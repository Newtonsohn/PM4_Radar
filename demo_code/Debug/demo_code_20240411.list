
demo_code_20240411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d478  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bf9c  0800d628  0800d628  0000e628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080195c4  080195c4  0001b360  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080195c4  080195c4  0001a5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080195cc  080195cc  0001b360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080195cc  080195cc  0001a5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080195d0  080195d0  0001a5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000360  20000000  080195d4  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000094c  20000360  08019934  0001b360  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cac  08019934  0001bcac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b360  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018127  00000000  00000000  0001b390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000402b  00000000  00000000  000334b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  000374e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001147  00000000  00000000  00038c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002729c  00000000  00000000  00039d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b915  00000000  00000000  0006103b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e225b  00000000  00000000  0007c950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0015ebab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007324  00000000  00000000  0015ec5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00165f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003425  00000000  00000000  00165fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000140  00000000  00000000  00169407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000360 	.word	0x20000360
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d610 	.word	0x0800d610

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000364 	.word	0x20000364
 80001ec:	0800d610 	.word	0x0800d610

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b988 	b.w	8000ef0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	468e      	mov	lr, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	4688      	mov	r8, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d962      	bls.n	8000cd4 <__udivmoddi4+0xdc>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	b14e      	cbz	r6, 8000c28 <__udivmoddi4+0x30>
 8000c14:	f1c6 0320 	rsb	r3, r6, #32
 8000c18:	fa01 f806 	lsl.w	r8, r1, r6
 8000c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c20:	40b7      	lsls	r7, r6
 8000c22:	ea43 0808 	orr.w	r8, r3, r8
 8000c26:	40b4      	lsls	r4, r6
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c34:	0c23      	lsrs	r3, r4, #16
 8000c36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c4c:	f080 80ea 	bcs.w	8000e24 <__udivmoddi4+0x22c>
 8000c50:	429a      	cmp	r2, r3
 8000c52:	f240 80e7 	bls.w	8000e24 <__udivmoddi4+0x22c>
 8000c56:	3902      	subs	r1, #2
 8000c58:	443b      	add	r3, r7
 8000c5a:	1a9a      	subs	r2, r3, r2
 8000c5c:	b2a3      	uxth	r3, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6e:	459c      	cmp	ip, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c78:	f080 80d6 	bcs.w	8000e28 <__udivmoddi4+0x230>
 8000c7c:	459c      	cmp	ip, r3
 8000c7e:	f240 80d3 	bls.w	8000e28 <__udivmoddi4+0x230>
 8000c82:	443b      	add	r3, r7
 8000c84:	3802      	subs	r0, #2
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	eba3 030c 	sub.w	r3, r3, ip
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40f3      	lsrs	r3, r6
 8000c94:	2200      	movs	r2, #0
 8000c96:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xb6>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb0>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d146      	bne.n	8000d44 <__udivmoddi4+0x14c>
 8000cb6:	4573      	cmp	r3, lr
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xc8>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 8105 	bhi.w	8000eca <__udivmoddi4+0x2d2>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	4690      	mov	r8, r2
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e5      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cce:	e9c5 4800 	strd	r4, r8, [r5]
 8000cd2:	e7e2      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f000 8090 	beq.w	8000dfa <__udivmoddi4+0x202>
 8000cda:	fab2 f682 	clz	r6, r2
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	f040 80a4 	bne.w	8000e2c <__udivmoddi4+0x234>
 8000ce4:	1a8a      	subs	r2, r1, r2
 8000ce6:	0c03      	lsrs	r3, r0, #16
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	b280      	uxth	r0, r0
 8000cee:	b2bc      	uxth	r4, r7
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cf6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x11e>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x11c>
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	f200 80e0 	bhi.w	8000ed4 <__udivmoddi4+0x2dc>
 8000d14:	46c4      	mov	ip, r8
 8000d16:	1a9b      	subs	r3, r3, r2
 8000d18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d24:	fb02 f404 	mul.w	r4, r2, r4
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x144>
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x142>
 8000d34:	429c      	cmp	r4, r3
 8000d36:	f200 80ca 	bhi.w	8000ece <__udivmoddi4+0x2d6>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	1b1b      	subs	r3, r3, r4
 8000d3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d44:	f1c1 0620 	rsb	r6, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	fa0e f401 	lsl.w	r4, lr, r1
 8000d54:	fa20 f306 	lsr.w	r3, r0, r6
 8000d58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	fa1f fc87 	uxth.w	ip, r7
 8000d6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x1a0>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d8a:	f080 809c 	bcs.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f240 8099 	bls.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d94:	3802      	subs	r0, #2
 8000d96:	443c      	add	r4, r7
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	fa1f fe83 	uxth.w	lr, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db0:	45a4      	cmp	ip, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1ce>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dba:	f080 8082 	bcs.w	8000ec2 <__udivmoddi4+0x2ca>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d97f      	bls.n	8000ec2 <__udivmoddi4+0x2ca>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dca:	eba4 040c 	sub.w	r4, r4, ip
 8000dce:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	4673      	mov	r3, lr
 8000dd6:	46e1      	mov	r9, ip
 8000dd8:	d362      	bcc.n	8000ea0 <__udivmoddi4+0x2a8>
 8000dda:	d05f      	beq.n	8000e9c <__udivmoddi4+0x2a4>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x1fe>
 8000dde:	ebb8 0203 	subs.w	r2, r8, r3
 8000de2:	eb64 0409 	sbc.w	r4, r4, r9
 8000de6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dea:	fa22 f301 	lsr.w	r3, r2, r1
 8000dee:	431e      	orrs	r6, r3
 8000df0:	40cc      	lsrs	r4, r1
 8000df2:	e9c5 6400 	strd	r6, r4, [r5]
 8000df6:	2100      	movs	r1, #0
 8000df8:	e74f      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000dfa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dfe:	0c01      	lsrs	r1, r0, #16
 8000e00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e04:	b280      	uxth	r0, r0
 8000e06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	463c      	mov	r4, r7
 8000e10:	46b8      	mov	r8, r7
 8000e12:	46be      	mov	lr, r7
 8000e14:	2620      	movs	r6, #32
 8000e16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e1a:	eba2 0208 	sub.w	r2, r2, r8
 8000e1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e22:	e766      	b.n	8000cf2 <__udivmoddi4+0xfa>
 8000e24:	4601      	mov	r1, r0
 8000e26:	e718      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e72c      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000e2c:	f1c6 0220 	rsb	r2, r6, #32
 8000e30:	fa2e f302 	lsr.w	r3, lr, r2
 8000e34:	40b7      	lsls	r7, r6
 8000e36:	40b1      	lsls	r1, r6
 8000e38:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e40:	430a      	orrs	r2, r1
 8000e42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e46:	b2bc      	uxth	r4, r7
 8000e48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb08 f904 	mul.w	r9, r8, r4
 8000e56:	40b0      	lsls	r0, r6
 8000e58:	4589      	cmp	r9, r1
 8000e5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e5e:	b280      	uxth	r0, r0
 8000e60:	d93e      	bls.n	8000ee0 <__udivmoddi4+0x2e8>
 8000e62:	1879      	adds	r1, r7, r1
 8000e64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e68:	d201      	bcs.n	8000e6e <__udivmoddi4+0x276>
 8000e6a:	4589      	cmp	r9, r1
 8000e6c:	d81f      	bhi.n	8000eae <__udivmoddi4+0x2b6>
 8000e6e:	eba1 0109 	sub.w	r1, r1, r9
 8000e72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e76:	fb09 f804 	mul.w	r8, r9, r4
 8000e7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e84:	4542      	cmp	r2, r8
 8000e86:	d229      	bcs.n	8000edc <__udivmoddi4+0x2e4>
 8000e88:	18ba      	adds	r2, r7, r2
 8000e8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e8e:	d2c4      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e90:	4542      	cmp	r2, r8
 8000e92:	d2c2      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e94:	f1a9 0102 	sub.w	r1, r9, #2
 8000e98:	443a      	add	r2, r7
 8000e9a:	e7be      	b.n	8000e1a <__udivmoddi4+0x222>
 8000e9c:	45f0      	cmp	r8, lr
 8000e9e:	d29d      	bcs.n	8000ddc <__udivmoddi4+0x1e4>
 8000ea0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ea4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	46e1      	mov	r9, ip
 8000eac:	e796      	b.n	8000ddc <__udivmoddi4+0x1e4>
 8000eae:	eba7 0909 	sub.w	r9, r7, r9
 8000eb2:	4449      	add	r1, r9
 8000eb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ebc:	fb09 f804 	mul.w	r8, r9, r4
 8000ec0:	e7db      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ec2:	4673      	mov	r3, lr
 8000ec4:	e77f      	b.n	8000dc6 <__udivmoddi4+0x1ce>
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	e766      	b.n	8000d98 <__udivmoddi4+0x1a0>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e6fd      	b.n	8000cca <__udivmoddi4+0xd2>
 8000ece:	443b      	add	r3, r7
 8000ed0:	3a02      	subs	r2, #2
 8000ed2:	e733      	b.n	8000d3c <__udivmoddi4+0x144>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	443b      	add	r3, r7
 8000eda:	e71c      	b.n	8000d16 <__udivmoddi4+0x11e>
 8000edc:	4649      	mov	r1, r9
 8000ede:	e79c      	b.n	8000e1a <__udivmoddi4+0x222>
 8000ee0:	eba1 0109 	sub.w	r1, r1, r9
 8000ee4:	46c4      	mov	ip, r8
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fb09 f804 	mul.w	r8, r9, r4
 8000eee:	e7c4      	b.n	8000e7a <__udivmoddi4+0x282>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b08f      	sub	sp, #60	@ 0x3c
 8000ef8:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 8000efa:	f003 ff07 	bl	8004d0c <HAL_Init>
	SystemClock_Config();				// Configure system clocks
 8000efe:	f000 f8f1 	bl	80010e4 <SystemClock_Config>
	MX_GPIO_Init();
 8000f02:	f000 fa19 	bl	8001338 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000f06:	f000 f9e7 	bl	80012d8 <MX_USART1_UART_Init>

	char msg[50];
    uint8_t previous_menu = MENU_NONE;  // Tracks the last active menu
 8000f0a:	2306      	movs	r3, #6
 8000f0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    sprintf(msg, "Hello World\r\n");    // Convert MEAS_data_ready to a string
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	496d      	ldr	r1, [pc, #436]	@ (80010c8 <main+0x1d4>)
 8000f14:	4618      	mov	r0, r3
 8000f16:	f00a f9f5 	bl	800b304 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff f9b7 	bl	8000290 <strlen>
 8000f22:	4603      	mov	r3, r0
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	1d39      	adds	r1, r7, #4
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2c:	4867      	ldr	r0, [pc, #412]	@ (80010cc <main+0x1d8>)
 8000f2e:	f007 ff7e 	bl	8008e2e <HAL_UART_Transmit>

#ifdef FLIPPED_LCD
	BSP_LCD_Init_Flipped();				// Initialize the LCD for flipped orientation
 8000f32:	f002 fe35 	bl	8003ba0 <BSP_LCD_Init_Flipped>
#else
	BSP_LCD_Init();						// Initialize the LCD display
#endif
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8000f36:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f002 febe 	bl	8003cbc <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f002 ff1f 	bl	8003d84 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8000f46:	f003 f9ef 	bl	8004328 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4e:	f002 ff75 	bl	8003e3c <BSP_LCD_Clear>
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 8000f52:	f002 fe9b 	bl	8003c8c <BSP_LCD_GetXSize>
 8000f56:	4603      	mov	r3, r0
 8000f58:	b29c      	uxth	r4, r3
 8000f5a:	f002 fea3 	bl	8003ca4 <BSP_LCD_GetYSize>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	4619      	mov	r1, r3
 8000f64:	4620      	mov	r0, r4
 8000f66:	f003 fdcd 	bl	8004b04 <BSP_TS_Init>

	PB_init();							// Initialize the user pushbutton
 8000f6a:	f001 fc9b 	bl	80028a4 <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 8000f6e:	f001 fcb9 	bl	80028e4 <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 8000f72:	2000      	movs	r0, #0
 8000f74:	f002 fa32 	bl	80033dc <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f002 fa2f 	bl	80033dc <BSP_LED_Init>

	MENU_draw();						// Draw the menu
 8000f7e:	f001 fabf 	bl	8002500 <MENU_draw>
	MENU_hint();						// Show hint at startup
 8000f82:	f001 fb6b 	bl	800265c <MENU_hint>

	gyro_disable();						// Disable gyro, use those analog inputs
 8000f86:	f000 f92b 	bl	80011e0 <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 8000f8a:	f000 fb05 	bl	8001598 <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 8000f8e:	f000 fb9f 	bl	80016d0 <MEAS_timer_init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f98:	484d      	ldr	r0, [pc, #308]	@ (80010d0 <main+0x1dc>)
 8000f9a:	f004 fe5f 	bl	8005c5c <HAL_GPIO_WritePin>
	FFT_init();  						// Nach MEAS_timer_init()
 8000f9e:	f000 fa45 	bl	800142c <FFT_init>


	/* Infinite while loop */
	while (1) {							// Infinitely loop in main function
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f002 fa6e 	bl	8003484 <BSP_LED_Toggle>

	    sprintf(msg, "active menu: %d\r\n", active_menu);    // Convert MEAS_data_ready to a string
 8000fa8:	4b4a      	ldr	r3, [pc, #296]	@ (80010d4 <main+0x1e0>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	4949      	ldr	r1, [pc, #292]	@ (80010d8 <main+0x1e4>)
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f00a f9a6 	bl	800b304 <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff f968 	bl	8000290 <strlen>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	1d39      	adds	r1, r7, #4
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	4840      	ldr	r0, [pc, #256]	@ (80010cc <main+0x1d8>)
 8000fcc:	f007 ff2f 	bl	8008e2e <HAL_UART_Transmit>

		if (MEAS_data_ready) {			// Show data if new data available
 8000fd0:	4b42      	ldr	r3, [pc, #264]	@ (80010dc <main+0x1e8>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <main+0xea>
			MEAS_data_ready = false;
 8000fd8:	4b40      	ldr	r3, [pc, #256]	@ (80010dc <main+0x1e8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]
		}

		if(active_menu == MENU_ZERO){
 8000fde:	4b3d      	ldr	r3, [pc, #244]	@ (80010d4 <main+0x1e0>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d112      	bne.n	800100c <main+0x118>
		    sprintf(msg, "Showing data\r\n");    // Convert MEAS_data_ready to a string
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	493d      	ldr	r1, [pc, #244]	@ (80010e0 <main+0x1ec>)
 8000fea:	4618      	mov	r0, r3
 8000fec:	f00a f98a 	bl	800b304 <siprintf>
		    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff f94c 	bl	8000290 <strlen>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	1d39      	adds	r1, r7, #4
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	4832      	ldr	r0, [pc, #200]	@ (80010cc <main+0x1d8>)
 8001004:	f007 ff13 	bl	8008e2e <HAL_UART_Transmit>
		    show_data_menu_zero();
 8001008:	f001 f98a 	bl	8002320 <show_data_menu_zero>
		}

		if(active_menu == MENU_ONE){
 800100c:	4b31      	ldr	r3, [pc, #196]	@ (80010d4 <main+0x1e0>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d112      	bne.n	800103a <main+0x146>
			sprintf(msg, "Showing data\r\n");    // Convert MEAS_data_ready to a string
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	4932      	ldr	r1, [pc, #200]	@ (80010e0 <main+0x1ec>)
 8001018:	4618      	mov	r0, r3
 800101a:	f00a f973 	bl	800b304 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff f935 	bl	8000290 <strlen>
 8001026:	4603      	mov	r3, r0
 8001028:	b29a      	uxth	r2, r3
 800102a:	1d39      	adds	r1, r7, #4
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	4826      	ldr	r0, [pc, #152]	@ (80010cc <main+0x1d8>)
 8001032:	f007 fefc 	bl	8008e2e <HAL_UART_Transmit>
			show_data_menu_one();
 8001036:	f000 fff5 	bl	8002024 <show_data_menu_one>
        }

		MENU_check_transition();
 800103a:	f001 fb69 	bl	8002710 <MENU_check_transition>

		switch (MENU_get_transition()) {	// Handle user menu choice
 800103e:	f001 fb5b 	bl	80026f8 <MENU_get_transition>
 8001042:	4603      	mov	r3, r0
 8001044:	2b06      	cmp	r3, #6
 8001046:	d839      	bhi.n	80010bc <main+0x1c8>
 8001048:	a201      	add	r2, pc, #4	@ (adr r2, 8001050 <main+0x15c>)
 800104a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104e:	bf00      	nop
 8001050:	08001075 	.word	0x08001075
 8001054:	08001085 	.word	0x08001085
 8001058:	08001095 	.word	0x08001095
 800105c:	0800109f 	.word	0x0800109f
 8001060:	080010a9 	.word	0x080010a9
 8001064:	080010b3 	.word	0x080010b3
 8001068:	0800106d 	.word	0x0800106d
		case MENU_NONE:
            active_menu = MENU_NONE;
 800106c:	4b19      	ldr	r3, [pc, #100]	@ (80010d4 <main+0x1e0>)
 800106e:	2206      	movs	r2, #6
 8001070:	701a      	strb	r2, [r3, #0]
			break;
 8001072:	e024      	b.n	80010be <main+0x1ca>
		case MENU_ZERO:
            active_menu = MENU_ZERO;
 8001074:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <main+0x1e0>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
			ADC1_IN14_ADC2_IN15_dual_init();
 800107a:	f000 f9e3 	bl	8001444 <ADC1_IN14_ADC2_IN15_dual_init>
			ADC1_IN14_ADC2_IN15_dual_start();
 800107e:	f000 fce1 	bl	8001a44 <ADC1_IN14_ADC2_IN15_dual_start>
			break;
 8001082:	e01c      	b.n	80010be <main+0x1ca>
		case MENU_ONE:
            active_menu = MENU_ONE;
 8001084:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <main+0x1e0>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
			ADC1_IN14_ADC2_IN15_dual_init();
 800108a:	f000 f9db 	bl	8001444 <ADC1_IN14_ADC2_IN15_dual_init>
			ADC1_IN14_ADC2_IN15_dual_start();
 800108e:	f000 fcd9 	bl	8001a44 <ADC1_IN14_ADC2_IN15_dual_start>
			break;
 8001092:	e014      	b.n	80010be <main+0x1ca>
		case MENU_TWO:
			ADC3_IN4_DMA_init();
 8001094:	f000 fb52 	bl	800173c <ADC3_IN4_DMA_init>
			ADC3_IN4_DMA_start();
 8001098:	f000 fbde 	bl	8001858 <ADC3_IN4_DMA_start>
			break;
 800109c:	e00f      	b.n	80010be <main+0x1ca>
		case MENU_THREE:
			ADC1_IN13_ADC2_IN5_dual_init();
 800109e:	f000 fbfd 	bl	800189c <ADC1_IN13_ADC2_IN5_dual_init>
			ADC1_IN13_ADC2_IN5_dual_start();
 80010a2:	f000 fca5 	bl	80019f0 <ADC1_IN13_ADC2_IN5_dual_start>
			break;
 80010a6:	e00a      	b.n	80010be <main+0x1ca>
		case MENU_FOUR:
			ADC2_IN13_IN5_scan_init();
 80010a8:	f000 fcf6 	bl	8001a98 <ADC2_IN13_IN5_scan_init>
			ADC2_IN13_IN5_scan_start();
 80010ac:	f000 fd94 	bl	8001bd8 <ADC2_IN13_IN5_scan_start>
			break;
 80010b0:	e005      	b.n	80010be <main+0x1ca>
		case MENU_FIVE:
			ADC3_IN13_IN4_scan_init();
 80010b2:	f000 fdb3 	bl	8001c1c <ADC3_IN13_IN4_scan_init>
			ADC3_IN13_IN4_scan_start();
 80010b6:	f000 fe51 	bl	8001d5c <ADC3_IN13_IN4_scan_start>
			break;
 80010ba:	e000      	b.n	80010be <main+0x1ca>
		default:						// Should never occur
			break;
 80010bc:	bf00      	nop
		}

		HAL_Delay(200);					// Wait or sleep
 80010be:	20c8      	movs	r0, #200	@ 0xc8
 80010c0:	f003 fe96 	bl	8004df0 <HAL_Delay>
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 80010c4:	e76d      	b.n	8000fa2 <main+0xae>
 80010c6:	bf00      	nop
 80010c8:	0800d628 	.word	0x0800d628
 80010cc:	2000037c 	.word	0x2000037c
 80010d0:	40020000 	.word	0x40020000
 80010d4:	20000000 	.word	0x20000000
 80010d8:	0800d638 	.word	0x0800d638
 80010dc:	200003bc 	.word	0x200003bc
 80010e0:	0800d64c 	.word	0x0800d64c

080010e4 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0a0      	sub	sp, #128	@ 0x80
 80010e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80010ee:	2230      	movs	r2, #48	@ 0x30
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f00a f96b 	bl	800b3ce <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2230      	movs	r2, #48	@ 0x30
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f00a f95c 	bl	800b3ce <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	4b2e      	ldr	r3, [pc, #184]	@ (80011d4 <SystemClock_Config+0xf0>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	4a2d      	ldr	r2, [pc, #180]	@ (80011d4 <SystemClock_Config+0xf0>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001124:	6413      	str	r3, [r2, #64]	@ 0x40
 8001126:	4b2b      	ldr	r3, [pc, #172]	@ (80011d4 <SystemClock_Config+0xf0>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	4b28      	ldr	r3, [pc, #160]	@ (80011d8 <SystemClock_Config+0xf4>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a27      	ldr	r2, [pc, #156]	@ (80011d8 <SystemClock_Config+0xf4>)
 800113c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	4b25      	ldr	r3, [pc, #148]	@ (80011d8 <SystemClock_Config+0xf4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800114e:	2301      	movs	r3, #1
 8001150:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001152:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001156:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001158:	2302      	movs	r3, #2
 800115a:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001160:	66fb      	str	r3, [r7, #108]	@ 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001162:	2308      	movs	r3, #8
 8001164:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001166:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800116a:	677b      	str	r3, [r7, #116]	@ 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800116c:	2302      	movs	r3, #2
 800116e:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001170:	2307      	movs	r3, #7
 8001172:	67fb      	str	r3, [r7, #124]	@ 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001174:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001178:	4618      	mov	r0, r3
 800117a:	f006 f88b 	bl	8007294 <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800117e:	230f      	movs	r3, #15
 8001180:	63fb      	str	r3, [r7, #60]	@ 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001182:	2302      	movs	r3, #2
 8001184:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800118a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800118e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001190:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001194:	64fb      	str	r3, [r7, #76]	@ 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001196:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800119a:	2105      	movs	r1, #5
 800119c:	4618      	mov	r0, r3
 800119e:	f006 fae7 	bl	8007770 <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011a2:	2308      	movs	r3, #8
 80011a4:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80011a6:	23c0      	movs	r3, #192	@ 0xc0
 80011a8:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80011aa:	2304      	movs	r3, #4
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80011ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011b2:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	4618      	mov	r0, r3
 80011ba:	f006 fcf9 	bl	8007bb0 <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 80011be:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <SystemClock_Config+0xf8>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4a06      	ldr	r2, [pc, #24]	@ (80011dc <SystemClock_Config+0xf8>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011c8:	6053      	str	r3, [r2, #4]
}
 80011ca:	bf00      	nop
 80011cc:	3780      	adds	r7, #128	@ 0x80
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40007000 	.word	0x40007000
 80011dc:	40012300 	.word	0x40012300

080011e0 <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001294 <gyro_disable+0xb4>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a29      	ldr	r2, [pc, #164]	@ (8001294 <gyro_disable+0xb4>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b27      	ldr	r3, [pc, #156]	@ (8001294 <gyro_disable+0xb4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;	// Reset mode for PC1
 8001202:	4b25      	ldr	r3, [pc, #148]	@ (8001298 <gyro_disable+0xb8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a24      	ldr	r2, [pc, #144]	@ (8001298 <gyro_disable+0xb8>)
 8001208:	f023 030c 	bic.w	r3, r3, #12
 800120c:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;	// Set PC1 as output
 800120e:	4b22      	ldr	r3, [pc, #136]	@ (8001298 <gyro_disable+0xb8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a21      	ldr	r2, [pc, #132]	@ (8001298 <gyro_disable+0xb8>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 800121a:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <gyro_disable+0xb8>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	4a1e      	ldr	r2, [pc, #120]	@ (8001298 <gyro_disable+0xb8>)
 8001220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001224:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 8001226:	200a      	movs	r0, #10
 8001228:	f003 fde2 	bl	8004df0 <HAL_Delay>
	GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;	// Analog PC1 = ADC123_IN11
 800122c:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <gyro_disable+0xb8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a19      	ldr	r2, [pc, #100]	@ (8001298 <gyro_disable+0xb8>)
 8001232:	f043 030c 	orr.w	r3, r3, #12
 8001236:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8001238:	2300      	movs	r3, #0
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <gyro_disable+0xb4>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001240:	4a14      	ldr	r2, [pc, #80]	@ (8001294 <gyro_disable+0xb4>)
 8001242:	f043 0320 	orr.w	r3, r3, #32
 8001246:	6313      	str	r3, [r2, #48]	@ 0x30
 8001248:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <gyro_disable+0xb4>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124c:	f003 0320 	and.w	r3, r3, #32
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;	// Reset speed of PF8
 8001254:	4b11      	ldr	r3, [pc, #68]	@ (800129c <gyro_disable+0xbc>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	4a10      	ldr	r2, [pc, #64]	@ (800129c <gyro_disable+0xbc>)
 800125a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800125e:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;	// Reset alternate function of PF8
 8001260:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <gyro_disable+0xbc>)
 8001262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001264:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <gyro_disable+0xbc>)
 8001266:	f023 030f 	bic.w	r3, r3, #15
 800126a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;	// Reset pulup/down of PF8
 800126c:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <gyro_disable+0xbc>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <gyro_disable+0xbc>)
 8001272:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001276:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 8001278:	200a      	movs	r0, #10
 800127a:	f003 fdb9 	bl	8004df0 <HAL_Delay>
	GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos; // Analog mode PF8 = ADC3_IN4
 800127e:	4b07      	ldr	r3, [pc, #28]	@ (800129c <gyro_disable+0xbc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a06      	ldr	r2, [pc, #24]	@ (800129c <gyro_disable+0xbc>)
 8001284:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8001288:	6013      	str	r3, [r2, #0]
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	40020800 	.word	0x40020800
 800129c:	40021400 	.word	0x40021400

080012a0 <_close>:


// Default function implementations required to prevent build errors.
__attribute__((weak)) void _close(void){}
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <_lseek>:
__attribute__((weak)) void _lseek(void){}
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <_read>:
__attribute__((weak)) void _read(void){}
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <_write>:
__attribute__((weak)) void _write(void){}
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012dc:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <MX_USART1_UART_Init+0x4c>)
 80012de:	4a12      	ldr	r2, [pc, #72]	@ (8001328 <MX_USART1_UART_Init+0x50>)
 80012e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012e2:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <MX_USART1_UART_Init+0x4c>)
 80012e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <MX_USART1_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <MX_USART1_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <MX_USART1_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012fc:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <MX_USART1_UART_Init+0x4c>)
 80012fe:	220c      	movs	r2, #12
 8001300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001302:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <MX_USART1_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <MX_USART1_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800130e:	4805      	ldr	r0, [pc, #20]	@ (8001324 <MX_USART1_UART_Init+0x4c>)
 8001310:	f007 fd40 	bl	8008d94 <HAL_UART_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800131a:	f000 f807 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2000037c 	.word	0x2000037c
 8001328:	40011000 	.word	0x40011000

0800132c <Error_Handler>:

void Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
}
 8001332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <Error_Handler+0x8>

08001338 <MX_GPIO_Init>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_GPIO_Init(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <MX_GPIO_Init+0x30>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a08      	ldr	r2, [pc, #32]	@ (8001368 <MX_GPIO_Init+0x30>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <MX_GPIO_Init+0x30>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800

0800136c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	2b00      	cmp	r3, #0
 800137c:	db0b      	blt.n	8001396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	f003 021f 	and.w	r2, r3, #31
 8001384:	4907      	ldr	r1, [pc, #28]	@ (80013a4 <__NVIC_EnableIRQ+0x38>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	2001      	movs	r0, #1
 800138e:	fa00 f202 	lsl.w	r2, r0, r2
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db12      	blt.n	80013e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	490a      	ldr	r1, [pc, #40]	@ (80013ec <__NVIC_DisableIRQ+0x44>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	3320      	adds	r3, #32
 80013d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013d4:	f3bf 8f4f 	dsb	sy
}
 80013d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013da:	f3bf 8f6f 	isb	sy
}
 80013de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000e100 	.word	0xe000e100

080013f0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db0c      	blt.n	800141c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f003 021f 	and.w	r2, r3, #31
 8001408:	4907      	ldr	r1, [pc, #28]	@ (8001428 <__NVIC_ClearPendingIRQ+0x38>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	2001      	movs	r0, #1
 8001412:	fa00 f202 	lsl.w	r2, r0, r2
 8001416:	3360      	adds	r3, #96	@ 0x60
 8001418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100

0800142c <FFT_init>:
float32_t fft_input[FFT_SIZE*2];  // Complex input (I/Q)
float32_t fft_output[FFT_SIZE];    // FFT Ergebnis
uint32_t fft_mag[FFT_SIZE/2];     // Magnituden für die Darstellung


void FFT_init(void) {
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
    arm_cfft_radix4_init_f32(&fft_inst, FFT_SIZE, 0, 1);
 8001430:	2301      	movs	r3, #1
 8001432:	2200      	movs	r2, #0
 8001434:	213c      	movs	r1, #60	@ 0x3c
 8001436:	4802      	ldr	r0, [pc, #8]	@ (8001440 <FFT_init+0x14>)
 8001438:	f008 fc56 	bl	8009ce8 <arm_cfft_radix4_init_f32>
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200005a8 	.word	0x200005a8

08001444 <ADC1_IN14_ADC2_IN15_dual_init>:



void ADC1_IN14_ADC2_IN15_dual_init(void)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
    MEAS_input_count = 2;                // 2 inputs are converted
 800144a:	4b4a      	ldr	r3, [pc, #296]	@ (8001574 <ADC1_IN14_ADC2_IN15_dual_init+0x130>)
 800144c:	2202      	movs	r2, #2
 800144e:	601a      	str	r2, [r3, #0]
    __HAL_RCC_ADC1_CLK_ENABLE();        // Enable Clock for ADC1
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	4b48      	ldr	r3, [pc, #288]	@ (8001578 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 8001456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001458:	4a47      	ldr	r2, [pc, #284]	@ (8001578 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 800145a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800145e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001460:	4b45      	ldr	r3, [pc, #276]	@ (8001578 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 8001462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_ADC2_CLK_ENABLE();        // Enable Clock for ADC2
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	4b41      	ldr	r3, [pc, #260]	@ (8001578 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 8001472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001474:	4a40      	ldr	r2, [pc, #256]	@ (8001578 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 8001476:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800147a:	6453      	str	r3, [r2, #68]	@ 0x44
 800147c:	4b3e      	ldr	r3, [pc, #248]	@ (8001578 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 800147e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001480:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]

    // Common ADC configuration
    ADC->CCR |= ADC_CCR_DMA_1;            // Enable DMA mode 2 = dual DMA
 8001488:	4b3c      	ldr	r3, [pc, #240]	@ (800157c <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	4a3b      	ldr	r2, [pc, #236]	@ (800157c <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 800148e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001492:	6053      	str	r3, [r2, #4]
    ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2 simultaneous
 8001494:	4b39      	ldr	r3, [pc, #228]	@ (800157c <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4a38      	ldr	r2, [pc, #224]	@ (800157c <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 800149a:	f043 0306 	orr.w	r3, r3, #6
 800149e:	6053      	str	r3, [r2, #4]

    // ADC1 configuration
    ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);    // Enable external trigger on rising edge
 80014a0:	4b37      	ldr	r3, [pc, #220]	@ (8001580 <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4a36      	ldr	r2, [pc, #216]	@ (8001580 <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 80014a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014aa:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);   // Timer 2 TRGO event
 80014ac:	4b34      	ldr	r3, [pc, #208]	@ (8001580 <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4a33      	ldr	r2, [pc, #204]	@ (8001580 <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 80014b2:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 80014b6:	6093      	str	r3, [r2, #8]
    ADC1->SQR3 |= (14UL << ADC_SQR3_SQ1_Pos);   // Input 14 = first conversion (changed from 13)
 80014b8:	4b31      	ldr	r3, [pc, #196]	@ (8001580 <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 80014ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014bc:	4a30      	ldr	r2, [pc, #192]	@ (8001580 <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 80014be:	f043 030e 	orr.w	r3, r3, #14
 80014c2:	6353      	str	r3, [r2, #52]	@ 0x34

    // ADC2 configuration
    ADC2->SQR3 |= (15UL << ADC_SQR3_SQ1_Pos);   // Input 15 = first conversion (changed from 5)
 80014c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001584 <ADC1_IN14_ADC2_IN15_dual_init+0x140>)
 80014c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001584 <ADC1_IN14_ADC2_IN15_dual_init+0x140>)
 80014ca:	f043 030f 	orr.w	r3, r3, #15
 80014ce:	6353      	str	r3, [r2, #52]	@ 0x34

    // DMA configuration
    __HAL_RCC_DMA2_CLK_ENABLE();        // Enable Clock for DMA2
 80014d0:	2300      	movs	r3, #0
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	4b28      	ldr	r3, [pc, #160]	@ (8001578 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d8:	4a27      	ldr	r2, [pc, #156]	@ (8001578 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 80014da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014de:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e0:	4b25      	ldr	r3, [pc, #148]	@ (8001578 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
    DMA2_Stream4->CR &= ~DMA_SxCR_EN;    // Disable the DMA stream 4
 80014ec:	4b26      	ldr	r3, [pc, #152]	@ (8001588 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a25      	ldr	r2, [pc, #148]	@ (8001588 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }    // Wait for DMA to finish
 80014f8:	bf00      	nop
 80014fa:	4b23      	ldr	r3, [pc, #140]	@ (8001588 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f9      	bne.n	80014fa <ADC1_IN14_ADC2_IN15_dual_init+0xb6>

    DMA2->HIFCR |= DMA_HIFCR_CTCIF4;    // Clear transfer complete interrupt flag
 8001506:	4b21      	ldr	r3, [pc, #132]	@ (800158c <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	4a20      	ldr	r2, [pc, #128]	@ (800158c <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 800150c:	f043 0320 	orr.w	r3, r3, #32
 8001510:	60d3      	str	r3, [r2, #12]
    DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);    // Select channel 0
 8001512:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8001514:	4a1c      	ldr	r2, [pc, #112]	@ (8001588 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_PL_1;        // Priority high
 800151a:	4b1b      	ldr	r3, [pc, #108]	@ (8001588 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a1a      	ldr	r2, [pc, #104]	@ (8001588 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8001520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001524:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;    // Memory data size = 32 bit
 8001526:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a17      	ldr	r2, [pc, #92]	@ (8001588 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 800152c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001530:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;    // Peripheral data size = 32 bit
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a14      	ldr	r2, [pc, #80]	@ (8001588 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8001538:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800153c:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_MINC;        // Increment memory address pointer
 800153e:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a11      	ldr	r2, [pc, #68]	@ (8001588 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8001544:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001548:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_TCIE;        // Transfer complete interrupt enable
 800154a:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a0e      	ldr	r2, [pc, #56]	@ (8001588 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8001550:	f043 0310 	orr.w	r3, r3, #16
 8001554:	6013      	str	r3, [r2, #0]

    DMA2_Stream4->NDTR = ADC_NUMS;        // Number of data items to transfer
 8001556:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8001558:	223c      	movs	r2, #60	@ 0x3c
 800155a:	605a      	str	r2, [r3, #4]
    DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;    // Peripheral register address
 800155c:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 800155e:	4a0c      	ldr	r2, [pc, #48]	@ (8001590 <ADC1_IN14_ADC2_IN15_dual_init+0x14c>)
 8001560:	609a      	str	r2, [r3, #8]
    DMA2_Stream4->M0AR = (uint32_t)ADC_samples;    // Buffer memory location address
 8001562:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8001564:	4a0b      	ldr	r2, [pc, #44]	@ (8001594 <ADC1_IN14_ADC2_IN15_dual_init+0x150>)
 8001566:	60da      	str	r2, [r3, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	20000004 	.word	0x20000004
 8001578:	40023800 	.word	0x40023800
 800157c:	40012300 	.word	0x40012300
 8001580:	40012000 	.word	0x40012000
 8001584:	40012100 	.word	0x40012100
 8001588:	40026470 	.word	0x40026470
 800158c:	40026400 	.word	0x40026400
 8001590:	40012308 	.word	0x40012308
 8001594:	200003c4 	.word	0x200003c4

08001598 <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b2a      	ldr	r3, [pc, #168]	@ (800164c <MEAS_GPIO_analog_init+0xb4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	4a29      	ldr	r2, [pc, #164]	@ (800164c <MEAS_GPIO_analog_init+0xb4>)
 80015a8:	f043 0320 	orr.w	r3, r3, #32
 80015ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ae:	4b27      	ldr	r3, [pc, #156]	@ (800164c <MEAS_GPIO_analog_init+0xb4>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f003 0320 	and.w	r3, r3, #32
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
	GPIOF->MODER |= (3UL << GPIO_MODER_MODER6_Pos);	// Analog PF6 = ADC3_IN4
 80015ba:	4b25      	ldr	r3, [pc, #148]	@ (8001650 <MEAS_GPIO_analog_init+0xb8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a24      	ldr	r2, [pc, #144]	@ (8001650 <MEAS_GPIO_analog_init+0xb8>)
 80015c0:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80015c4:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	4b20      	ldr	r3, [pc, #128]	@ (800164c <MEAS_GPIO_analog_init+0xb4>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	4a1f      	ldr	r2, [pc, #124]	@ (800164c <MEAS_GPIO_analog_init+0xb4>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d6:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <MEAS_GPIO_analog_init+0xb4>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
	GPIOC->MODER |= (3UL << GPIO_MODER_MODER3_Pos);	// Analog PC3 = ADC123_IN13
 80015e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <MEAS_GPIO_analog_init+0xbc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001654 <MEAS_GPIO_analog_init+0xbc>)
 80015e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80015ec:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	4b16      	ldr	r3, [pc, #88]	@ (800164c <MEAS_GPIO_analog_init+0xb4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a15      	ldr	r2, [pc, #84]	@ (800164c <MEAS_GPIO_analog_init+0xb4>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b13      	ldr	r3, [pc, #76]	@ (800164c <MEAS_GPIO_analog_init+0xb4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (3UL << GPIO_MODER_MODER5_Pos);	// Analog PA5 ADC12_IN5
 800160a:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <MEAS_GPIO_analog_init+0xc0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a12      	ldr	r2, [pc, #72]	@ (8001658 <MEAS_GPIO_analog_init+0xc0>)
 8001610:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8001614:	6013      	str	r3, [r2, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <MEAS_GPIO_analog_init+0xb4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a0b      	ldr	r2, [pc, #44]	@ (800164c <MEAS_GPIO_analog_init+0xb4>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b09      	ldr	r3, [pc, #36]	@ (800164c <MEAS_GPIO_analog_init+0xb4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]
    // Für ADC1_IN14 (PC4) und ADC2_IN15 (PC5)
    GPIOC->MODER |= (3UL << GPIO_MODER_MODER4_Pos) | (3UL << GPIO_MODER_MODER5_Pos);
 8001632:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <MEAS_GPIO_analog_init+0xbc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a07      	ldr	r2, [pc, #28]	@ (8001654 <MEAS_GPIO_analog_init+0xbc>)
 8001638:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 800163c:	6013      	str	r3, [r2, #0]
}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40021400 	.word	0x40021400
 8001654:	40020800 	.word	0x40020800
 8001658:	40020000 	.word	0x40020000

0800165c <DAC_increment>:

/** ***************************************************************************
 * @brief Increment the DAC value and write it to the output
 *
 *****************************************************************************/
void DAC_increment(void) {
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
	DAC_sample += 20;				// Increment DAC output
 8001660:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <DAC_increment+0x30>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	3314      	adds	r3, #20
 8001666:	4a09      	ldr	r2, [pc, #36]	@ (800168c <DAC_increment+0x30>)
 8001668:	6013      	str	r3, [r2, #0]
	if (DAC_sample >= (1UL << ADC_DAC_RES)) { DAC_sample = 0; }	// Go to 0
 800166a:	4b08      	ldr	r3, [pc, #32]	@ (800168c <DAC_increment+0x30>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001672:	d302      	bcc.n	800167a <DAC_increment+0x1e>
 8001674:	4b05      	ldr	r3, [pc, #20]	@ (800168c <DAC_increment+0x30>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
	DAC->DHR12R2 = DAC_sample;		// Write new DAC output value
 800167a:	4a05      	ldr	r2, [pc, #20]	@ (8001690 <DAC_increment+0x34>)
 800167c:	4b03      	ldr	r3, [pc, #12]	@ (800168c <DAC_increment+0x30>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6153      	str	r3, [r2, #20]
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	200005a4 	.word	0x200005a4
 8001690:	40007400 	.word	0x40007400

08001694 <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 8001698:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <ADC_reset+0x38>)
 800169a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169c:	4a0b      	ldr	r2, [pc, #44]	@ (80016cc <ADC_reset+0x38>)
 800169e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a2:	6253      	str	r3, [r2, #36]	@ 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 80016a4:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <ADC_reset+0x38>)
 80016a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a8:	4a08      	ldr	r2, [pc, #32]	@ (80016cc <ADC_reset+0x38>)
 80016aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016ae:	6253      	str	r3, [r2, #36]	@ 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 80016b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	4b17      	ldr	r3, [pc, #92]	@ (8001738 <MEAS_timer_init+0x68>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	4a16      	ldr	r2, [pc, #88]	@ (8001738 <MEAS_timer_init+0x68>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e6:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <MEAS_timer_init+0x68>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 80016f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016f6:	f243 62af 	movw	r2, #13999	@ 0x36af
 80016fa:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 80016fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001700:	2209      	movs	r2, #9
 8001702:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 8001704:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800170e:	f043 0320 	orr.w	r3, r3, #32
 8001712:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 8001714:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 8001724:	201c      	movs	r0, #28
 8001726:	f7ff fe63 	bl	80013f0 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 800172a:	201c      	movs	r0, #28
 800172c:	f7ff fe1e 	bl	800136c <__NVIC_EnableIRQ>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40023800 	.word	0x40023800

0800173c <ADC3_IN4_DMA_init>:
 * to memory without CPU intervention.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input is ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN4_DMA_init(void)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
	MEAS_input_count = 1;				// Only 1 input is converted
 8001742:	4b3e      	ldr	r3, [pc, #248]	@ (800183c <ADC3_IN4_DMA_init+0x100>)
 8001744:	2201      	movs	r2, #1
 8001746:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	4b3c      	ldr	r3, [pc, #240]	@ (8001840 <ADC3_IN4_DMA_init+0x104>)
 800174e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001750:	4a3b      	ldr	r2, [pc, #236]	@ (8001840 <ADC3_IN4_DMA_init+0x104>)
 8001752:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001756:	6453      	str	r3, [r2, #68]	@ 0x44
 8001758:	4b39      	ldr	r3, [pc, #228]	@ (8001840 <ADC3_IN4_DMA_init+0x104>)
 800175a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ1_Pos);	// Input 4 = first conversion
 8001764:	4b37      	ldr	r3, [pc, #220]	@ (8001844 <ADC3_IN4_DMA_init+0x108>)
 8001766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001768:	4a36      	ldr	r2, [pc, #216]	@ (8001844 <ADC3_IN4_DMA_init+0x108>)
 800176a:	f043 0304 	orr.w	r3, r3, #4
 800176e:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001770:	4b34      	ldr	r3, [pc, #208]	@ (8001844 <ADC3_IN4_DMA_init+0x108>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	4a33      	ldr	r2, [pc, #204]	@ (8001844 <ADC3_IN4_DMA_init+0x108>)
 8001776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800177a:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 800177c:	4b31      	ldr	r3, [pc, #196]	@ (8001844 <ADC3_IN4_DMA_init+0x108>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a30      	ldr	r2, [pc, #192]	@ (8001844 <ADC3_IN4_DMA_init+0x108>)
 8001782:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8001786:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001788:	4b2e      	ldr	r3, [pc, #184]	@ (8001844 <ADC3_IN4_DMA_init+0x108>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4a2d      	ldr	r2, [pc, #180]	@ (8001844 <ADC3_IN4_DMA_init+0x108>)
 800178e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001792:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001794:	2300      	movs	r3, #0
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	4b29      	ldr	r3, [pc, #164]	@ (8001840 <ADC3_IN4_DMA_init+0x104>)
 800179a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179c:	4a28      	ldr	r2, [pc, #160]	@ (8001840 <ADC3_IN4_DMA_init+0x104>)
 800179e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a4:	4b26      	ldr	r3, [pc, #152]	@ (8001840 <ADC3_IN4_DMA_init+0x104>)
 80017a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 80017b0:	4b25      	ldr	r3, [pc, #148]	@ (8001848 <ADC3_IN4_DMA_init+0x10c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a24      	ldr	r2, [pc, #144]	@ (8001848 <ADC3_IN4_DMA_init+0x10c>)
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80017bc:	bf00      	nop
 80017be:	4b22      	ldr	r3, [pc, #136]	@ (8001848 <ADC3_IN4_DMA_init+0x10c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f9      	bne.n	80017be <ADC3_IN4_DMA_init+0x82>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 80017ca:	4b20      	ldr	r3, [pc, #128]	@ (800184c <ADC3_IN4_DMA_init+0x110>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	4a1f      	ldr	r2, [pc, #124]	@ (800184c <ADC3_IN4_DMA_init+0x110>)
 80017d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017d4:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 80017d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001848 <ADC3_IN4_DMA_init+0x10c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a1b      	ldr	r2, [pc, #108]	@ (8001848 <ADC3_IN4_DMA_init+0x10c>)
 80017dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80017e0:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 80017e2:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <ADC3_IN4_DMA_init+0x10c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a18      	ldr	r2, [pc, #96]	@ (8001848 <ADC3_IN4_DMA_init+0x10c>)
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017ec:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 80017ee:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <ADC3_IN4_DMA_init+0x10c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a15      	ldr	r2, [pc, #84]	@ (8001848 <ADC3_IN4_DMA_init+0x10c>)
 80017f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017f8:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 80017fa:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <ADC3_IN4_DMA_init+0x10c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a12      	ldr	r2, [pc, #72]	@ (8001848 <ADC3_IN4_DMA_init+0x10c>)
 8001800:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001804:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <ADC3_IN4_DMA_init+0x10c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a0f      	ldr	r2, [pc, #60]	@ (8001848 <ADC3_IN4_DMA_init+0x10c>)
 800180c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001810:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8001812:	4b0d      	ldr	r3, [pc, #52]	@ (8001848 <ADC3_IN4_DMA_init+0x10c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a0c      	ldr	r2, [pc, #48]	@ (8001848 <ADC3_IN4_DMA_init+0x10c>)
 8001818:	f043 0310 	orr.w	r3, r3, #16
 800181c:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = ADC_NUMS;		// Number of data items to transfer
 800181e:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <ADC3_IN4_DMA_init+0x10c>)
 8001820:	223c      	movs	r2, #60	@ 0x3c
 8001822:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 8001824:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <ADC3_IN4_DMA_init+0x10c>)
 8001826:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <ADC3_IN4_DMA_init+0x114>)
 8001828:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 800182a:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <ADC3_IN4_DMA_init+0x10c>)
 800182c:	4a09      	ldr	r2, [pc, #36]	@ (8001854 <ADC3_IN4_DMA_init+0x118>)
 800182e:	60da      	str	r2, [r3, #12]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	20000004 	.word	0x20000004
 8001840:	40023800 	.word	0x40023800
 8001844:	40012200 	.word	0x40012200
 8001848:	40026428 	.word	0x40026428
 800184c:	40026400 	.word	0x40026400
 8001850:	4001224c 	.word	0x4001224c
 8001854:	200003c4 	.word	0x200003c4

08001858 <ADC3_IN4_DMA_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_IN4_DMA_start(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 800185c:	4b0d      	ldr	r3, [pc, #52]	@ (8001894 <ADC3_IN4_DMA_start+0x3c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0c      	ldr	r2, [pc, #48]	@ (8001894 <ADC3_IN4_DMA_start+0x3c>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 8001868:	2039      	movs	r0, #57	@ 0x39
 800186a:	f7ff fdc1 	bl	80013f0 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 800186e:	2039      	movs	r0, #57	@ 0x39
 8001870:	f7ff fd7c 	bl	800136c <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8001874:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <ADC3_IN4_DMA_start+0x40>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a07      	ldr	r2, [pc, #28]	@ (8001898 <ADC3_IN4_DMA_start+0x40>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001880:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40026428 	.word	0x40026428
 8001898:	40012200 	.word	0x40012200

0800189c <ADC1_IN13_ADC2_IN5_dual_init>:
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input used with ADC1 is ADC123_IN13 = GPIO PC3
 * @n The input used with ADC2 is ADC12_IN5 = GPIO PA5
 *****************************************************************************/
void ADC1_IN13_ADC2_IN5_dual_init(void)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 80018a2:	4b4a      	ldr	r3, [pc, #296]	@ (80019cc <ADC1_IN13_ADC2_IN5_dual_init+0x130>)
 80018a4:	2202      	movs	r2, #2
 80018a6:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC1_CLK_ENABLE();		// Enable Clock for ADC1
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	4b48      	ldr	r3, [pc, #288]	@ (80019d0 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 80018ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b0:	4a47      	ldr	r2, [pc, #284]	@ (80019d0 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80018b8:	4b45      	ldr	r3, [pc, #276]	@ (80019d0 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 80018ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	4b41      	ldr	r3, [pc, #260]	@ (80019d0 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 80018ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018cc:	4a40      	ldr	r2, [pc, #256]	@ (80019d0 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 80018ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80018d4:	4b3e      	ldr	r3, [pc, #248]	@ (80019d0 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 80018d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
	ADC->CCR |= ADC_CCR_DMA_1;			// Enable DMA mode 2 = dual DMA
 80018e0:	4b3c      	ldr	r3, [pc, #240]	@ (80019d4 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	4a3b      	ldr	r2, [pc, #236]	@ (80019d4 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 80018e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018ea:	6053      	str	r3, [r2, #4]
	ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2 simultan.
 80018ec:	4b39      	ldr	r3, [pc, #228]	@ (80019d4 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	4a38      	ldr	r2, [pc, #224]	@ (80019d4 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 80018f2:	f043 0306 	orr.w	r3, r3, #6
 80018f6:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 80018f8:	4b37      	ldr	r3, [pc, #220]	@ (80019d8 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4a36      	ldr	r2, [pc, #216]	@ (80019d8 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 80018fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001902:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001904:	4b34      	ldr	r3, [pc, #208]	@ (80019d8 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	4a33      	ldr	r2, [pc, #204]	@ (80019d8 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 800190a:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 800190e:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8001910:	4b31      	ldr	r3, [pc, #196]	@ (80019d8 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8001912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001914:	4a30      	ldr	r2, [pc, #192]	@ (80019d8 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8001916:	f043 030d 	orr.w	r3, r3, #13
 800191a:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->SQR3 |= (5UL << ADC_SQR3_SQ1_Pos);	// Input 5 = first conversion
 800191c:	4b2f      	ldr	r3, [pc, #188]	@ (80019dc <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 800191e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001920:	4a2e      	ldr	r2, [pc, #184]	@ (80019dc <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 8001922:	f043 0305 	orr.w	r3, r3, #5
 8001926:	6353      	str	r3, [r2, #52]	@ 0x34
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	4b28      	ldr	r3, [pc, #160]	@ (80019d0 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001930:	4a27      	ldr	r2, [pc, #156]	@ (80019d0 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8001932:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001936:	6313      	str	r3, [r2, #48]	@ 0x30
 8001938:	4b25      	ldr	r3, [pc, #148]	@ (80019d0 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
	DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 4
 8001944:	4b26      	ldr	r3, [pc, #152]	@ (80019e0 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a25      	ldr	r2, [pc, #148]	@ (80019e0 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 800194a:	f023 0301 	bic.w	r3, r3, #1
 800194e:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001950:	bf00      	nop
 8001952:	4b23      	ldr	r3, [pc, #140]	@ (80019e0 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f9      	bne.n	8001952 <ADC1_IN13_ADC2_IN5_dual_init+0xb6>
	DMA2->HIFCR |= DMA_HIFCR_CTCIF4;	// Clear transfer complete interrupt fl.
 800195e:	4b21      	ldr	r3, [pc, #132]	@ (80019e4 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	4a20      	ldr	r2, [pc, #128]	@ (80019e4 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001964:	f043 0320 	orr.w	r3, r3, #32
 8001968:	60d3      	str	r3, [r2, #12]
	DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);	// Select channel 0
 800196a:	4b1d      	ldr	r3, [pc, #116]	@ (80019e0 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 800196c:	4a1c      	ldr	r2, [pc, #112]	@ (80019e0 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PL_1;		// Priority high
 8001972:	4b1b      	ldr	r3, [pc, #108]	@ (80019e0 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a1a      	ldr	r2, [pc, #104]	@ (80019e0 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800197c:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 800197e:	4b18      	ldr	r3, [pc, #96]	@ (80019e0 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a17      	ldr	r2, [pc, #92]	@ (80019e0 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001988:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 800198a:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a14      	ldr	r2, [pc, #80]	@ (80019e0 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001990:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001994:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001996:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a11      	ldr	r2, [pc, #68]	@ (80019e0 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 800199c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019a0:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 80019a2:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a0e      	ldr	r2, [pc, #56]	@ (80019e0 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 80019a8:	f043 0310 	orr.w	r3, r3, #16
 80019ac:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->NDTR = ADC_NUMS;		// Number of data items to transfer
 80019ae:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 80019b0:	223c      	movs	r2, #60	@ 0x3c
 80019b2:	605a      	str	r2, [r3, #4]
	DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;	// Peripheral register address
 80019b4:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 80019b6:	4a0c      	ldr	r2, [pc, #48]	@ (80019e8 <ADC1_IN13_ADC2_IN5_dual_init+0x14c>)
 80019b8:	609a      	str	r2, [r3, #8]
	DMA2_Stream4->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 80019ba:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 80019bc:	4a0b      	ldr	r2, [pc, #44]	@ (80019ec <ADC1_IN13_ADC2_IN5_dual_init+0x150>)
 80019be:	60da      	str	r2, [r3, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	20000004 	.word	0x20000004
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40012300 	.word	0x40012300
 80019d8:	40012000 	.word	0x40012000
 80019dc:	40012100 	.word	0x40012100
 80019e0:	40026470 	.word	0x40026470
 80019e4:	40026400 	.word	0x40026400
 80019e8:	40012308 	.word	0x40012308
 80019ec:	200003c4 	.word	0x200003c4

080019f0 <ADC1_IN13_ADC2_IN5_dual_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC1_IN13_ADC2_IN5_dual_start(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	DMA2_Stream4->CR |= DMA_SxCR_EN;	// Enable DMA
 80019f4:	4b10      	ldr	r3, [pc, #64]	@ (8001a38 <ADC1_IN13_ADC2_IN5_dual_start+0x48>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001a38 <ADC1_IN13_ADC2_IN5_dual_start+0x48>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);	// Clear pending DMA interrupt
 8001a00:	203c      	movs	r0, #60	@ 0x3c
 8001a02:	f7ff fcf5 	bl	80013f0 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);	// Enable DMA interrupt in the NVIC
 8001a06:	203c      	movs	r0, #60	@ 0x3c
 8001a08:	f7ff fcb0 	bl	800136c <__NVIC_EnableIRQ>
	ADC1->CR2 |= ADC_CR2_ADON;			// Enable ADC1
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <ADC1_IN13_ADC2_IN5_dual_start+0x4c>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4a0a      	ldr	r2, [pc, #40]	@ (8001a3c <ADC1_IN13_ADC2_IN5_dual_start+0x4c>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 8001a18:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <ADC1_IN13_ADC2_IN5_dual_start+0x50>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	4a08      	ldr	r2, [pc, #32]	@ (8001a40 <ADC1_IN13_ADC2_IN5_dual_start+0x50>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001a24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40026470 	.word	0x40026470
 8001a3c:	40012000 	.word	0x40012000
 8001a40:	40012100 	.word	0x40012100

08001a44 <ADC1_IN14_ADC2_IN15_dual_start>:

void ADC1_IN14_ADC2_IN15_dual_start(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
    DMA2_Stream4->CR |= DMA_SxCR_EN;          // DMA-Stream aktivieren
 8001a48:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <ADC1_IN14_ADC2_IN15_dual_start+0x48>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a8c <ADC1_IN14_ADC2_IN15_dual_start+0x48>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6013      	str	r3, [r2, #0]
    NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);  // Ausstehende DMA-Interrupts löschen
 8001a54:	203c      	movs	r0, #60	@ 0x3c
 8001a56:	f7ff fccb 	bl	80013f0 <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(DMA2_Stream4_IRQn);        // DMA-Interrupt im NVIC aktivieren
 8001a5a:	203c      	movs	r0, #60	@ 0x3c
 8001a5c:	f7ff fc86 	bl	800136c <__NVIC_EnableIRQ>

    ADC1->CR2 |= ADC_CR2_ADON;                // ADC1 einschalten
 8001a60:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <ADC1_IN14_ADC2_IN15_dual_start+0x4c>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <ADC1_IN14_ADC2_IN15_dual_start+0x4c>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6093      	str	r3, [r2, #8]
    ADC2->CR2 |= ADC_CR2_ADON;                // ADC2 einschalten
 8001a6c:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <ADC1_IN14_ADC2_IN15_dual_start+0x50>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	4a08      	ldr	r2, [pc, #32]	@ (8001a94 <ADC1_IN14_ADC2_IN15_dual_start+0x50>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6093      	str	r3, [r2, #8]

    TIM2->CR1 |= TIM_CR1_CEN;                 // Timer starten
 8001a78:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40026470 	.word	0x40026470
 8001a90:	40012000 	.word	0x40012000
 8001a94:	40012100 	.word	0x40012100

08001a98 <ADC2_IN13_IN5_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC12_IN5 = GPIO PA5
 *****************************************************************************/
void ADC2_IN13_IN5_scan_init(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 8001a9e:	4b47      	ldr	r3, [pc, #284]	@ (8001bbc <ADC2_IN13_IN5_scan_init+0x124>)
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	4b45      	ldr	r3, [pc, #276]	@ (8001bc0 <ADC2_IN13_IN5_scan_init+0x128>)
 8001aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aac:	4a44      	ldr	r2, [pc, #272]	@ (8001bc0 <ADC2_IN13_IN5_scan_init+0x128>)
 8001aae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ab2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab4:	4b42      	ldr	r3, [pc, #264]	@ (8001bc0 <ADC2_IN13_IN5_scan_init+0x128>)
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
	ADC2->SQR1 |= (1UL << ADC_SQR1_L_Pos);			// Convert 2 inputs
 8001ac0:	4b40      	ldr	r3, [pc, #256]	@ (8001bc4 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac4:	4a3f      	ldr	r2, [pc, #252]	@ (8001bc4 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001ac6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001aca:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC2->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8001acc:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc4 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ad0:	4a3c      	ldr	r2, [pc, #240]	@ (8001bc4 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001ad2:	f043 030d 	orr.w	r3, r3, #13
 8001ad6:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->SQR3 |= (5UL << ADC_SQR3_SQ2_Pos);	// Input 5 = second conversion
 8001ad8:	4b3a      	ldr	r3, [pc, #232]	@ (8001bc4 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001adc:	4a39      	ldr	r2, [pc, #228]	@ (8001bc4 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001ade:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001ae2:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 8001ae4:	4b37      	ldr	r3, [pc, #220]	@ (8001bc4 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4a36      	ldr	r2, [pc, #216]	@ (8001bc4 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aee:	6053      	str	r3, [r2, #4]
	ADC2->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001af0:	4b34      	ldr	r3, [pc, #208]	@ (8001bc4 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4a33      	ldr	r2, [pc, #204]	@ (8001bc4 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001af6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001afa:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001afc:	4b31      	ldr	r3, [pc, #196]	@ (8001bc4 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	4a30      	ldr	r2, [pc, #192]	@ (8001bc4 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001b02:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8001b06:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001b08:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc4 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8001bc4 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b12:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001b14:	2300      	movs	r3, #0
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	4b29      	ldr	r3, [pc, #164]	@ (8001bc0 <ADC2_IN13_IN5_scan_init+0x128>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1c:	4a28      	ldr	r2, [pc, #160]	@ (8001bc0 <ADC2_IN13_IN5_scan_init+0x128>)
 8001b1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b22:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b24:	4b26      	ldr	r3, [pc, #152]	@ (8001bc0 <ADC2_IN13_IN5_scan_init+0x128>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 3
 8001b30:	4b25      	ldr	r3, [pc, #148]	@ (8001bc8 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a24      	ldr	r2, [pc, #144]	@ (8001bc8 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001b3c:	bf00      	nop
 8001b3e:	4b22      	ldr	r3, [pc, #136]	@ (8001bc8 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f9      	bne.n	8001b3e <ADC2_IN13_IN5_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF3;	// Clear transfer complete interrupt fl.
 8001b4a:	4b20      	ldr	r3, [pc, #128]	@ (8001bcc <ADC2_IN13_IN5_scan_init+0x134>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001bcc <ADC2_IN13_IN5_scan_init+0x134>)
 8001b50:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001b54:	6093      	str	r3, [r2, #8]
	DMA2_Stream3->CR |= (1UL << DMA_SxCR_CHSEL_Pos);	// Select channel 1
 8001b56:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc8 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc8 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b60:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_PL_1;		// Priority high
 8001b62:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a18      	ldr	r2, [pc, #96]	@ (8001bc8 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b6c:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8001b6e:	4b16      	ldr	r3, [pc, #88]	@ (8001bc8 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a15      	ldr	r2, [pc, #84]	@ (8001bc8 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b78:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001b7a:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a12      	ldr	r2, [pc, #72]	@ (8001bc8 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b84:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001b86:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc8 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b90:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8001b92:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc8 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc8 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b98:	f043 0310 	orr.w	r3, r3, #16
 8001b9c:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <ADC2_IN13_IN5_scan_init+0x130>)
 8001ba0:	2278      	movs	r2, #120	@ 0x78
 8001ba2:	605a      	str	r2, [r3, #4]
	DMA2_Stream3->PAR = (uint32_t)&ADC2->DR;	// Peripheral register address
 8001ba4:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <ADC2_IN13_IN5_scan_init+0x130>)
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd0 <ADC2_IN13_IN5_scan_init+0x138>)
 8001ba8:	609a      	str	r2, [r3, #8]
	DMA2_Stream3->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001baa:	4b07      	ldr	r3, [pc, #28]	@ (8001bc8 <ADC2_IN13_IN5_scan_init+0x130>)
 8001bac:	4a09      	ldr	r2, [pc, #36]	@ (8001bd4 <ADC2_IN13_IN5_scan_init+0x13c>)
 8001bae:	60da      	str	r2, [r3, #12]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	20000004 	.word	0x20000004
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40012100 	.word	0x40012100
 8001bc8:	40026458 	.word	0x40026458
 8001bcc:	40026400 	.word	0x40026400
 8001bd0:	4001214c 	.word	0x4001214c
 8001bd4:	200003c4 	.word	0x200003c4

08001bd8 <ADC2_IN13_IN5_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC2_IN13_IN5_scan_start(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	DMA2_Stream3->CR |= DMA_SxCR_EN;	// Enable DMA
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c14 <ADC2_IN13_IN5_scan_start+0x3c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0c      	ldr	r2, [pc, #48]	@ (8001c14 <ADC2_IN13_IN5_scan_start+0x3c>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);	// Clear pending DMA interrupt
 8001be8:	203b      	movs	r0, #59	@ 0x3b
 8001bea:	f7ff fc01 	bl	80013f0 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream3_IRQn);	// Enable DMA interrupt in the NVIC
 8001bee:	203b      	movs	r0, #59	@ 0x3b
 8001bf0:	f7ff fbbc 	bl	800136c <__NVIC_EnableIRQ>
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 8001bf4:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <ADC2_IN13_IN5_scan_start+0x40>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4a07      	ldr	r2, [pc, #28]	@ (8001c18 <ADC2_IN13_IN5_scan_start+0x40>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001c00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40026458 	.word	0x40026458
 8001c18:	40012100 	.word	0x40012100

08001c1c <ADC3_IN13_IN4_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN13_IN4_scan_init(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 8001c22:	4b47      	ldr	r3, [pc, #284]	@ (8001d40 <ADC3_IN13_IN4_scan_init+0x124>)
 8001c24:	2202      	movs	r2, #2
 8001c26:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 8001c28:	2300      	movs	r3, #0
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	4b45      	ldr	r3, [pc, #276]	@ (8001d44 <ADC3_IN13_IN4_scan_init+0x128>)
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c30:	4a44      	ldr	r2, [pc, #272]	@ (8001d44 <ADC3_IN13_IN4_scan_init+0x128>)
 8001c32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c36:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c38:	4b42      	ldr	r3, [pc, #264]	@ (8001d44 <ADC3_IN13_IN4_scan_init+0x128>)
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR1 |= (1UL << ADC_SQR1_L_Pos);		// Convert 2 inputs
 8001c44:	4b40      	ldr	r3, [pc, #256]	@ (8001d48 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c48:	4a3f      	ldr	r2, [pc, #252]	@ (8001d48 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC3->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8001c50:	4b3d      	ldr	r3, [pc, #244]	@ (8001d48 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c54:	4a3c      	ldr	r2, [pc, #240]	@ (8001d48 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c56:	f043 030d 	orr.w	r3, r3, #13
 8001c5a:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ2_Pos);	// Input 4 = second conversion
 8001c5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d48 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c60:	4a39      	ldr	r2, [pc, #228]	@ (8001d48 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c66:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 8001c68:	4b37      	ldr	r3, [pc, #220]	@ (8001d48 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	4a36      	ldr	r2, [pc, #216]	@ (8001d48 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c72:	6053      	str	r3, [r2, #4]
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001c74:	4b34      	ldr	r3, [pc, #208]	@ (8001d48 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	4a33      	ldr	r2, [pc, #204]	@ (8001d48 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001c80:	4b31      	ldr	r3, [pc, #196]	@ (8001d48 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4a30      	ldr	r2, [pc, #192]	@ (8001d48 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c86:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8001c8a:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d48 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4a2d      	ldr	r2, [pc, #180]	@ (8001d48 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c96:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001c98:	2300      	movs	r3, #0
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	4b29      	ldr	r3, [pc, #164]	@ (8001d44 <ADC3_IN13_IN4_scan_init+0x128>)
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca0:	4a28      	ldr	r2, [pc, #160]	@ (8001d44 <ADC3_IN13_IN4_scan_init+0x128>)
 8001ca2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ca6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca8:	4b26      	ldr	r3, [pc, #152]	@ (8001d44 <ADC3_IN13_IN4_scan_init+0x128>)
 8001caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 8001cb4:	4b25      	ldr	r3, [pc, #148]	@ (8001d4c <ADC3_IN13_IN4_scan_init+0x130>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a24      	ldr	r2, [pc, #144]	@ (8001d4c <ADC3_IN13_IN4_scan_init+0x130>)
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001cc0:	bf00      	nop
 8001cc2:	4b22      	ldr	r3, [pc, #136]	@ (8001d4c <ADC3_IN13_IN4_scan_init+0x130>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f9      	bne.n	8001cc2 <ADC3_IN13_IN4_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 8001cce:	4b20      	ldr	r3, [pc, #128]	@ (8001d50 <ADC3_IN13_IN4_scan_init+0x134>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d50 <ADC3_IN13_IN4_scan_init+0x134>)
 8001cd4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cd8:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 8001cda:	4b1c      	ldr	r3, [pc, #112]	@ (8001d4c <ADC3_IN13_IN4_scan_init+0x130>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a1b      	ldr	r2, [pc, #108]	@ (8001d4c <ADC3_IN13_IN4_scan_init+0x130>)
 8001ce0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ce4:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 8001ce6:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <ADC3_IN13_IN4_scan_init+0x130>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a18      	ldr	r2, [pc, #96]	@ (8001d4c <ADC3_IN13_IN4_scan_init+0x130>)
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf0:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8001cf2:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <ADC3_IN13_IN4_scan_init+0x130>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a15      	ldr	r2, [pc, #84]	@ (8001d4c <ADC3_IN13_IN4_scan_init+0x130>)
 8001cf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cfc:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001cfe:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <ADC3_IN13_IN4_scan_init+0x130>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a12      	ldr	r2, [pc, #72]	@ (8001d4c <ADC3_IN13_IN4_scan_init+0x130>)
 8001d04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d08:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001d0a:	4b10      	ldr	r3, [pc, #64]	@ (8001d4c <ADC3_IN13_IN4_scan_init+0x130>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d4c <ADC3_IN13_IN4_scan_init+0x130>)
 8001d10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d14:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8001d16:	4b0d      	ldr	r3, [pc, #52]	@ (8001d4c <ADC3_IN13_IN4_scan_init+0x130>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d4c <ADC3_IN13_IN4_scan_init+0x130>)
 8001d1c:	f043 0310 	orr.w	r3, r3, #16
 8001d20:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 8001d22:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <ADC3_IN13_IN4_scan_init+0x130>)
 8001d24:	2278      	movs	r2, #120	@ 0x78
 8001d26:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 8001d28:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <ADC3_IN13_IN4_scan_init+0x130>)
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d54 <ADC3_IN13_IN4_scan_init+0x138>)
 8001d2c:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001d2e:	4b07      	ldr	r3, [pc, #28]	@ (8001d4c <ADC3_IN13_IN4_scan_init+0x130>)
 8001d30:	4a09      	ldr	r2, [pc, #36]	@ (8001d58 <ADC3_IN13_IN4_scan_init+0x13c>)
 8001d32:	60da      	str	r2, [r3, #12]

}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	20000004 	.word	0x20000004
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40012200 	.word	0x40012200
 8001d4c:	40026428 	.word	0x40026428
 8001d50:	40026400 	.word	0x40026400
 8001d54:	4001224c 	.word	0x4001224c
 8001d58:	200003c4 	.word	0x200003c4

08001d5c <ADC3_IN13_IN4_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_IN13_IN4_scan_start(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 8001d60:	4b0d      	ldr	r3, [pc, #52]	@ (8001d98 <ADC3_IN13_IN4_scan_start+0x3c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0c      	ldr	r2, [pc, #48]	@ (8001d98 <ADC3_IN13_IN4_scan_start+0x3c>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 8001d6c:	2039      	movs	r0, #57	@ 0x39
 8001d6e:	f7ff fb3f 	bl	80013f0 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 8001d72:	2039      	movs	r0, #57	@ 0x39
 8001d74:	f7ff fafa 	bl	800136c <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <ADC3_IN13_IN4_scan_start+0x40>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4a07      	ldr	r2, [pc, #28]	@ (8001d9c <ADC3_IN13_IN4_scan_start+0x40>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001d84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6013      	str	r3, [r2, #0]
}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40026428 	.word	0x40026428
 8001d9c:	40012200 	.word	0x40012200

08001da0 <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 8001da4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001dae:	f023 0301 	bic.w	r3, r3, #1
 8001db2:	6113      	str	r3, [r2, #16]
	if (DAC_active) {
 8001db4:	4b03      	ldr	r3, [pc, #12]	@ (8001dc4 <TIM2_IRQHandler+0x24>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <TIM2_IRQHandler+0x20>
		DAC_increment();
 8001dbc:	f7ff fc4e 	bl	800165c <DAC_increment>
	}
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	200003bd 	.word	0x200003bd

08001dc8 <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 8001dcc:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <ADC_IRQHandler+0x58>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d020      	beq.n	8001e1a <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 8001dd8:	4911      	ldr	r1, [pc, #68]	@ (8001e20 <ADC_IRQHandler+0x58>)
 8001dda:	4b12      	ldr	r3, [pc, #72]	@ (8001e24 <ADC_IRQHandler+0x5c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	4810      	ldr	r0, [pc, #64]	@ (8001e24 <ADC_IRQHandler+0x5c>)
 8001de2:	6002      	str	r2, [r0, #0]
 8001de4:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001de6:	4910      	ldr	r1, [pc, #64]	@ (8001e28 <ADC_IRQHandler+0x60>)
 8001de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 8001dec:	4b0d      	ldr	r3, [pc, #52]	@ (8001e24 <ADC_IRQHandler+0x5c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b3b      	cmp	r3, #59	@ 0x3b
 8001df2:	d912      	bls.n	8001e1a <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 8001df4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 8001e04:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <ADC_IRQHandler+0x58>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	4a05      	ldr	r2, [pc, #20]	@ (8001e20 <ADC_IRQHandler+0x58>)
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	6093      	str	r3, [r2, #8]
			ADC_reset();
 8001e10:	f7ff fc40 	bl	8001694 <ADC_reset>
			MEAS_data_ready = true;
 8001e14:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <ADC_IRQHandler+0x64>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40012200 	.word	0x40012200
 8001e24:	200003c0 	.word	0x200003c0
 8001e28:	200003c4 	.word	0x200003c4
 8001e2c:	200003bc 	.word	0x200003bc

08001e30 <DMA2_Stream1_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF1) {	// Stream1 transfer compl. interrupt f.
 8001e34:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea8 <DMA2_Stream1_IRQHandler+0x78>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d031      	beq.n	8001ea4 <DMA2_Stream1_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream1_IRQn);	// Disable DMA interrupt in the NVIC
 8001e40:	2039      	movs	r0, #57	@ 0x39
 8001e42:	f7ff fab1 	bl	80013a8 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);// Clear pending DMA interrupt
 8001e46:	2039      	movs	r0, #57	@ 0x39
 8001e48:	f7ff fad2 	bl	80013f0 <__NVIC_ClearPendingIRQ>
		DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8001e4c:	4b17      	ldr	r3, [pc, #92]	@ (8001eac <DMA2_Stream1_IRQHandler+0x7c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a16      	ldr	r2, [pc, #88]	@ (8001eac <DMA2_Stream1_IRQHandler+0x7c>)
 8001e52:	f023 0301 	bic.w	r3, r3, #1
 8001e56:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001e58:	bf00      	nop
 8001e5a:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <DMA2_Stream1_IRQHandler+0x7c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f9      	bne.n	8001e5a <DMA2_Stream1_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF1;// Clear transfer complete interrupt fl.
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <DMA2_Stream1_IRQHandler+0x78>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea8 <DMA2_Stream1_IRQHandler+0x78>)
 8001e6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e70:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001e72:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	6013      	str	r3, [r2, #0]
		ADC3->CR2 &= ~ADC_CR2_ADON;		// Disable ADC3
 8001e82:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <DMA2_Stream1_IRQHandler+0x80>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <DMA2_Stream1_IRQHandler+0x80>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	6093      	str	r3, [r2, #8]
		ADC3->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 8001e8e:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <DMA2_Stream1_IRQHandler+0x80>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	4a07      	ldr	r2, [pc, #28]	@ (8001eb0 <DMA2_Stream1_IRQHandler+0x80>)
 8001e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e98:	6093      	str	r3, [r2, #8]
		ADC_reset();
 8001e9a:	f7ff fbfb 	bl	8001694 <ADC_reset>
		MEAS_data_ready = true;
 8001e9e:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <DMA2_Stream1_IRQHandler+0x84>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
	}
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40026400 	.word	0x40026400
 8001eac:	40026428 	.word	0x40026428
 8001eb0:	40012200 	.word	0x40012200
 8001eb4:	200003bc 	.word	0x200003bc

08001eb8 <DMA2_Stream3_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream3_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF3) {	// Stream3 transfer compl. interrupt f.
 8001ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f30 <DMA2_Stream3_IRQHandler+0x78>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d031      	beq.n	8001f2c <DMA2_Stream3_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream3_IRQn);	// Disable DMA interrupt in the NVIC
 8001ec8:	203b      	movs	r0, #59	@ 0x3b
 8001eca:	f7ff fa6d 	bl	80013a8 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);// Clear pending DMA interrupt
 8001ece:	203b      	movs	r0, #59	@ 0x3b
 8001ed0:	f7ff fa8e 	bl	80013f0 <__NVIC_ClearPendingIRQ>
		DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8001ed4:	4b17      	ldr	r3, [pc, #92]	@ (8001f34 <DMA2_Stream3_IRQHandler+0x7c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a16      	ldr	r2, [pc, #88]	@ (8001f34 <DMA2_Stream3_IRQHandler+0x7c>)
 8001eda:	f023 0301 	bic.w	r3, r3, #1
 8001ede:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001ee0:	bf00      	nop
 8001ee2:	4b14      	ldr	r3, [pc, #80]	@ (8001f34 <DMA2_Stream3_IRQHandler+0x7c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f9      	bne.n	8001ee2 <DMA2_Stream3_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF3;// Clear transfer complete interrupt fl.
 8001eee:	4b10      	ldr	r3, [pc, #64]	@ (8001f30 <DMA2_Stream3_IRQHandler+0x78>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4a0f      	ldr	r2, [pc, #60]	@ (8001f30 <DMA2_Stream3_IRQHandler+0x78>)
 8001ef4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001ef8:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001efa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f04:	f023 0301 	bic.w	r3, r3, #1
 8001f08:	6013      	str	r3, [r2, #0]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f38 <DMA2_Stream3_IRQHandler+0x80>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f38 <DMA2_Stream3_IRQHandler+0x80>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 8001f16:	4b08      	ldr	r3, [pc, #32]	@ (8001f38 <DMA2_Stream3_IRQHandler+0x80>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	4a07      	ldr	r2, [pc, #28]	@ (8001f38 <DMA2_Stream3_IRQHandler+0x80>)
 8001f1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f20:	6093      	str	r3, [r2, #8]
		ADC_reset();
 8001f22:	f7ff fbb7 	bl	8001694 <ADC_reset>
		MEAS_data_ready = true;
 8001f26:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <DMA2_Stream3_IRQHandler+0x84>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
	}
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40026400 	.word	0x40026400
 8001f34:	40026458 	.word	0x40026458
 8001f38:	40012100 	.word	0x40012100
 8001f3c:	200003bc 	.word	0x200003bc

08001f40 <DMA2_Stream4_IRQHandler>:
 * @note In dual ADC mode two values are combined (packed) in a single uint32_t
 * ADC_CDR[31:0] = ADC2_DR[15:0] | ADC1_DR[15:0]
 * and are therefore extracted before further processing.
 *****************************************************************************/
void DMA2_Stream4_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
	if (DMA2->HISR & DMA_HISR_TCIF4) {	// Stream4 transfer compl. interrupt f.
 8001f46:	4b30      	ldr	r3, [pc, #192]	@ (8002008 <DMA2_Stream4_IRQHandler+0xc8>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d055      	beq.n	8001ffe <DMA2_Stream4_IRQHandler+0xbe>
		NVIC_DisableIRQ(DMA2_Stream4_IRQn);	// Disable DMA interrupt in the NVIC
 8001f52:	203c      	movs	r0, #60	@ 0x3c
 8001f54:	f7ff fa28 	bl	80013a8 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);// Clear pending DMA interrupt
 8001f58:	203c      	movs	r0, #60	@ 0x3c
 8001f5a:	f7ff fa49 	bl	80013f0 <__NVIC_ClearPendingIRQ>
		DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8001f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800200c <DMA2_Stream4_IRQHandler+0xcc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a2a      	ldr	r2, [pc, #168]	@ (800200c <DMA2_Stream4_IRQHandler+0xcc>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001f6a:	bf00      	nop
 8001f6c:	4b27      	ldr	r3, [pc, #156]	@ (800200c <DMA2_Stream4_IRQHandler+0xcc>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f9      	bne.n	8001f6c <DMA2_Stream4_IRQHandler+0x2c>
		DMA2->HIFCR |= DMA_HIFCR_CTCIF4;// Clear transfer complete interrupt fl.
 8001f78:	4b23      	ldr	r3, [pc, #140]	@ (8002008 <DMA2_Stream4_IRQHandler+0xc8>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4a22      	ldr	r2, [pc, #136]	@ (8002008 <DMA2_Stream4_IRQHandler+0xc8>)
 8001f7e:	f043 0320 	orr.w	r3, r3, #32
 8001f82:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001f84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	6013      	str	r3, [r2, #0]
		ADC1->CR2 &= ~ADC_CR2_ADON;		// Disable ADC1
 8001f94:	4b1e      	ldr	r3, [pc, #120]	@ (8002010 <DMA2_Stream4_IRQHandler+0xd0>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4a1d      	ldr	r2, [pc, #116]	@ (8002010 <DMA2_Stream4_IRQHandler+0xd0>)
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 8001fa0:	4b1c      	ldr	r3, [pc, #112]	@ (8002014 <DMA2_Stream4_IRQHandler+0xd4>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8002014 <DMA2_Stream4_IRQHandler+0xd4>)
 8001fa6:	f023 0301 	bic.w	r3, r3, #1
 8001faa:	6093      	str	r3, [r2, #8]
		ADC->CCR &= ~ADC_CCR_DMA_1;		// Disable DMA mode
 8001fac:	4b1a      	ldr	r3, [pc, #104]	@ (8002018 <DMA2_Stream4_IRQHandler+0xd8>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4a19      	ldr	r2, [pc, #100]	@ (8002018 <DMA2_Stream4_IRQHandler+0xd8>)
 8001fb2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001fb6:	6053      	str	r3, [r2, #4]
		/* Extract combined samples */
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 8001fb8:	233b      	movs	r3, #59	@ 0x3b
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	e017      	b.n	8001fee <DMA2_Stream4_IRQHandler+0xae>
			ADC_samples[2*i+1] = (ADC_samples[i] >> 16);
 8001fbe:	4a17      	ldr	r2, [pc, #92]	@ (800201c <DMA2_Stream4_IRQHandler+0xdc>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	3301      	adds	r3, #1
 8001fcc:	0c12      	lsrs	r2, r2, #16
 8001fce:	4913      	ldr	r1, [pc, #76]	@ (800201c <DMA2_Stream4_IRQHandler+0xdc>)
 8001fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_samples[2*i]   = (ADC_samples[i] & 0xffff);
 8001fd4:	4a11      	ldr	r2, [pc, #68]	@ (800201c <DMA2_Stream4_IRQHandler+0xdc>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	b292      	uxth	r2, r2
 8001fe2:	490e      	ldr	r1, [pc, #56]	@ (800201c <DMA2_Stream4_IRQHandler+0xdc>)
 8001fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	dae4      	bge.n	8001fbe <DMA2_Stream4_IRQHandler+0x7e>
		}
		ADC_reset();
 8001ff4:	f7ff fb4e 	bl	8001694 <ADC_reset>
		MEAS_data_ready = true;
 8001ff8:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <DMA2_Stream4_IRQHandler+0xe0>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
	}
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40026400 	.word	0x40026400
 800200c:	40026470 	.word	0x40026470
 8002010:	40012000 	.word	0x40012000
 8002014:	40012100 	.word	0x40012100
 8002018:	40012300 	.word	0x40012300
 800201c:	200003c4 	.word	0x200003c4
 8002020:	200003bc 	.word	0x200003bc

08002024 <show_data_menu_one>:
        fft_mag[i] = (uint32_t)(fft_output[i] * scale);
        if(fft_mag[i] > 200) fft_mag[i] = 200;
    }
}
void show_data_menu_one(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b096      	sub	sp, #88	@ 0x58
 8002028:	af02      	add	r7, sp, #8
    const uint32_t Y_OFFSET = 260;
 800202a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800202e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const uint32_t X_SIZE = 240;
 8002030:	23f0      	movs	r3, #240	@ 0xf0
 8002032:	63bb      	str	r3, [r7, #56]	@ 0x38
    const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;
 8002034:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800203a:	fbb2 f3f3 	udiv	r3, r2, r3
 800203e:	3301      	adds	r3, #1
 8002040:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t data;
    uint32_t data_last;


    // Clear the display
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002042:	f04f 30ff 	mov.w	r0, #4294967295
 8002046:	f001 fead 	bl	8003da4 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET + 1);
 800204a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800204c:	b29a      	uxth	r2, r3
 800204e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002050:	b29b      	uxth	r3, r3
 8002052:	3301      	adds	r3, #1
 8002054:	b29b      	uxth	r3, r3
 8002056:	2100      	movs	r1, #0
 8002058:	2000      	movs	r0, #0
 800205a:	f002 f8e3 	bl	8004224 <BSP_LCD_FillRect>

    uint32_t valid_samples = (ADC_NUMS < FFT_SIZE) ? ADC_NUMS : FFT_SIZE;
 800205e:	233c      	movs	r3, #60	@ 0x3c
 8002060:	633b      	str	r3, [r7, #48]	@ 0x30

    for (uint32_t i = 0; i < valid_samples; i++) {
 8002062:	2300      	movs	r3, #0
 8002064:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002066:	e041      	b.n	80020ec <show_data_menu_one+0xc8>
        if (MEAS_input_count == 2) {
 8002068:	4b9e      	ldr	r3, [pc, #632]	@ (80022e4 <show_data_menu_one+0x2c0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d122      	bne.n	80020b6 <show_data_menu_one+0x92>
            fft_input[2 * i]     = (float32_t)ADC_samples[2 * i];       // I
 8002070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4a9c      	ldr	r2, [pc, #624]	@ (80022e8 <show_data_menu_one+0x2c4>)
 8002076:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800207a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	ee07 2a90 	vmov	s15, r2
 8002082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002086:	4a99      	ldr	r2, [pc, #612]	@ (80022ec <show_data_menu_one+0x2c8>)
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	edc3 7a00 	vstr	s15, [r3]
            fft_input[2 * i + 1] = (float32_t)ADC_samples[2 * i + 1];   // Q
 8002090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	3301      	adds	r3, #1
 8002096:	4a94      	ldr	r2, [pc, #592]	@ (80022e8 <show_data_menu_one+0x2c4>)
 8002098:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800209c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	3301      	adds	r3, #1
 80020a2:	ee07 2a90 	vmov	s15, r2
 80020a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020aa:	4a90      	ldr	r2, [pc, #576]	@ (80022ec <show_data_menu_one+0x2c8>)
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	edc3 7a00 	vstr	s15, [r3]
 80020b4:	e017      	b.n	80020e6 <show_data_menu_one+0xc2>
        } else {
            fft_input[2 * i]     = (float32_t)ADC_samples[i];  // nur I
 80020b6:	4a8c      	ldr	r2, [pc, #560]	@ (80022e8 <show_data_menu_one+0x2c4>)
 80020b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	ee07 2a90 	vmov	s15, r2
 80020c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ca:	4a88      	ldr	r2, [pc, #544]	@ (80022ec <show_data_menu_one+0x2c8>)
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	edc3 7a00 	vstr	s15, [r3]
            fft_input[2 * i + 1] = 0.0f;                        // Q = 0
 80020d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	3301      	adds	r3, #1
 80020da:	4a84      	ldr	r2, [pc, #528]	@ (80022ec <show_data_menu_one+0x2c8>)
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < valid_samples; i++) {
 80020e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020e8:	3301      	adds	r3, #1
 80020ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d3b9      	bcc.n	8002068 <show_data_menu_one+0x44>
        }
    }

    // Zero Padding für restliche FFT-Eingänge
    for (uint32_t i = valid_samples; i < FFT_SIZE; i++) {
 80020f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020f8:	e013      	b.n	8002122 <show_data_menu_one+0xfe>
        fft_input[2 * i] = 0.0f;
 80020fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4a7b      	ldr	r2, [pc, #492]	@ (80022ec <show_data_menu_one+0x2c8>)
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
        fft_input[2 * i + 1] = 0.0f;
 800210a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	3301      	adds	r3, #1
 8002110:	4a76      	ldr	r2, [pc, #472]	@ (80022ec <show_data_menu_one+0x2c8>)
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = valid_samples; i < FFT_SIZE; i++) {
 800211c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800211e:	3301      	adds	r3, #1
 8002120:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002124:	2b3b      	cmp	r3, #59	@ 0x3b
 8002126:	d9e8      	bls.n	80020fa <show_data_menu_one+0xd6>
    }


    // Fensterung (Hann Window)
    for (uint16_t i = 0; i < FFT_SIZE; i++) {
 8002128:	2300      	movs	r3, #0
 800212a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800212e:	e04c      	b.n	80021ca <show_data_menu_one+0x1a6>
    	float32_t window = 0.5f * (1.0f - arm_cos_f32(2 * PI * i / (FFT_SIZE - 1)));
 8002130:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002134:	ee07 3a90 	vmov	s15, r3
 8002138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800213c:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 80022f0 <show_data_menu_one+0x2cc>
 8002140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002144:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 80022f4 <show_data_menu_one+0x2d0>
 8002148:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800214c:	eeb0 0a47 	vmov.f32	s0, s14
 8002150:	f008 fada 	bl	800a708 <arm_cos_f32>
 8002154:	eef0 7a40 	vmov.f32	s15, s0
 8002158:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800215c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002160:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002168:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        fft_input[2 * i] *= window;
 800216c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4a5e      	ldr	r2, [pc, #376]	@ (80022ec <show_data_menu_one+0x2c8>)
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	ed93 7a00 	vldr	s14, [r3]
 800217c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218a:	4a58      	ldr	r2, [pc, #352]	@ (80022ec <show_data_menu_one+0x2c8>)
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	edc3 7a00 	vstr	s15, [r3]
        fft_input[2 * i + 1] *= window;
 8002194:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	3301      	adds	r3, #1
 800219c:	4a53      	ldr	r2, [pc, #332]	@ (80022ec <show_data_menu_one+0x2c8>)
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	ed93 7a00 	vldr	s14, [r3]
 80021a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	3301      	adds	r3, #1
 80021ae:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80021b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b6:	4a4d      	ldr	r2, [pc, #308]	@ (80022ec <show_data_menu_one+0x2c8>)
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	edc3 7a00 	vstr	s15, [r3]
    for (uint16_t i = 0; i < FFT_SIZE; i++) {
 80021c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80021c4:	3301      	adds	r3, #1
 80021c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80021ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80021ce:	2b3b      	cmp	r3, #59	@ 0x3b
 80021d0:	d9ae      	bls.n	8002130 <show_data_menu_one+0x10c>
        }

    // FFT durchführen
    arm_cfft_radix4_f32(&fft_inst, fft_input);
 80021d2:	4946      	ldr	r1, [pc, #280]	@ (80022ec <show_data_menu_one+0x2c8>)
 80021d4:	4848      	ldr	r0, [pc, #288]	@ (80022f8 <show_data_menu_one+0x2d4>)
 80021d6:	f008 f98b 	bl	800a4f0 <arm_cfft_radix4_f32>

     // Magnitude berechnen
    arm_cmplx_mag_f32(fft_input, fft_output, FFT_SIZE);
 80021da:	223c      	movs	r2, #60	@ 0x3c
 80021dc:	4947      	ldr	r1, [pc, #284]	@ (80022fc <show_data_menu_one+0x2d8>)
 80021de:	4843      	ldr	r0, [pc, #268]	@ (80022ec <show_data_menu_one+0x2c8>)
 80021e0:	f008 f9aa 	bl	800a538 <arm_cmplx_mag_f32>

           // Display vorbereiten
     BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	f001 fddc 	bl	8003da4 <BSP_LCD_SetTextColor>
     BSP_LCD_FillRect(0, 0, 240, 320);
 80021ec:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80021f0:	22f0      	movs	r2, #240	@ 0xf0
 80021f2:	2100      	movs	r1, #0
 80021f4:	2000      	movs	r0, #0
 80021f6:	f002 f815 	bl	8004224 <BSP_LCD_FillRect>
     BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80021fa:	4841      	ldr	r0, [pc, #260]	@ (8002300 <show_data_menu_one+0x2dc>)
 80021fc:	f001 fdd2 	bl	8003da4 <BSP_LCD_SetTextColor>

      // Maximalwert finden für Skalierung
     float32_t max_value;
     arm_max_f32(fft_output + 1, FFT_SIZE / 2 - 1, &max_value, NULL);
 8002200:	4840      	ldr	r0, [pc, #256]	@ (8002304 <show_data_menu_one+0x2e0>)
 8002202:	f107 0220 	add.w	r2, r7, #32
 8002206:	2300      	movs	r3, #0
 8002208:	211d      	movs	r1, #29
 800220a:	f007 fd05 	bl	8009c18 <arm_max_f32>
     float32_t scale = 200.0f / (max_value + 0.001f); // +0.001 um Division durch 0 zu vermeiden
 800220e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002212:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002308 <show_data_menu_one+0x2e4>
 8002216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800221a:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 800230c <show_data_menu_one+0x2e8>
 800221e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002222:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

     // FFT plotten
     for (uint16_t i = 1; i < FFT_SIZE / 2; i++) {
 8002226:	2301      	movs	r3, #1
 8002228:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800222c:	e02a      	b.n	8002284 <show_data_menu_one+0x260>
          uint16_t height = (uint16_t)(fft_output[i] * scale);
 800222e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002232:	4a32      	ldr	r2, [pc, #200]	@ (80022fc <show_data_menu_one+0x2d8>)
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	ed93 7a00 	vldr	s14, [r3]
 800223c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002248:	ee17 3a90 	vmov	r3, s15
 800224c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          if (height > 200) height = 200;
 8002250:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002254:	2bc8      	cmp	r3, #200	@ 0xc8
 8002256:	d902      	bls.n	800225e <show_data_menu_one+0x23a>
 8002258:	23c8      	movs	r3, #200	@ 0xc8
 800225a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          {
        	  uint16_t x = i * 240 / (FFT_SIZE / 2);
 800225e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	857b      	strh	r3, [r7, #42]	@ 0x2a
              BSP_LCD_DrawLine(x, 250, x, 250 - height);
 8002266:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800226a:	f1c3 03fa 	rsb	r3, r3, #250	@ 0xfa
 800226e:	b29b      	uxth	r3, r3
 8002270:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002272:	8d78      	ldrh	r0, [r7, #42]	@ 0x2a
 8002274:	21fa      	movs	r1, #250	@ 0xfa
 8002276:	f001 ff0b 	bl	8004090 <BSP_LCD_DrawLine>
     for (uint16_t i = 1; i < FFT_SIZE / 2; i++) {
 800227a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800227e:	3301      	adds	r3, #1
 8002280:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8002284:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002288:	2b1d      	cmp	r3, #29
 800228a:	d9d0      	bls.n	800222e <show_data_menu_one+0x20a>
          }
		}

          // Frequenzinformation anzeigen
     BSP_LCD_SetFont(&Font16);
 800228c:	4820      	ldr	r0, [pc, #128]	@ (8002310 <show_data_menu_one+0x2ec>)
 800228e:	f001 fdbb 	bl	8003e08 <BSP_LCD_SetFont>
     BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002292:	f04f 30ff 	mov.w	r0, #4294967295
 8002296:	f001 fd9d 	bl	8003dd4 <BSP_LCD_SetBackColor>
     BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800229a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800229e:	f001 fd81 	bl	8003da4 <BSP_LCD_SetTextColor>
     char text[32];
     snprintf(text, sizeof(text), "Max Freq: %.1f Hz", max_value * ADC_FS / FFT_SIZE);
 80022a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80022a6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002314 <show_data_menu_one+0x2f0>
 80022aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ae:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002318 <show_data_menu_one+0x2f4>
 80022b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022b6:	ee16 0a90 	vmov	r0, s13
 80022ba:	f7fe f955 	bl	8000568 <__aeabi_f2d>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4638      	mov	r0, r7
 80022c4:	e9cd 2300 	strd	r2, r3, [sp]
 80022c8:	4a14      	ldr	r2, [pc, #80]	@ (800231c <show_data_menu_one+0x2f8>)
 80022ca:	2120      	movs	r1, #32
 80022cc:	f008 ffe4 	bl	800b298 <sniprintf>
     BSP_LCD_DisplayStringAt(0, 20, (uint8_t *)text, LEFT_MODE);
 80022d0:	463a      	mov	r2, r7
 80022d2:	2303      	movs	r3, #3
 80022d4:	2114      	movs	r1, #20
 80022d6:	2000      	movs	r0, #0
 80022d8:	f001 fe1c 	bl	8003f14 <BSP_LCD_DisplayStringAt>
}
 80022dc:	bf00      	nop
 80022de:	3750      	adds	r7, #80	@ 0x50
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000004 	.word	0x20000004
 80022e8:	200003c4 	.word	0x200003c4
 80022ec:	200005bc 	.word	0x200005bc
 80022f0:	40c90fdb 	.word	0x40c90fdb
 80022f4:	426c0000 	.word	0x426c0000
 80022f8:	200005a8 	.word	0x200005a8
 80022fc:	2000079c 	.word	0x2000079c
 8002300:	ff0000ff 	.word	0xff0000ff
 8002304:	200007a0 	.word	0x200007a0
 8002308:	3a83126f 	.word	0x3a83126f
 800230c:	43480000 	.word	0x43480000
 8002310:	2000017c 	.word	0x2000017c
 8002314:	44160000 	.word	0x44160000
 8002318:	42700000 	.word	0x42700000
 800231c:	0800d65c 	.word	0x0800d65c

08002320 <show_data_menu_zero>:


void show_data_menu_zero(void)
{
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	b08d      	sub	sp, #52	@ 0x34
 8002324:	af00      	add	r7, sp, #0
    const uint32_t Y_OFFSET = 260;
 8002326:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800232a:	61fb      	str	r3, [r7, #28]
    const uint32_t X_SIZE = 240;
 800232c:	23f0      	movs	r3, #240	@ 0xf0
 800232e:	61bb      	str	r3, [r7, #24]
    const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;
 8002330:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	fbb2 f3f3 	udiv	r3, r2, r3
 800233a:	3301      	adds	r3, #1
 800233c:	617b      	str	r3, [r7, #20]
    uint32_t data;
    uint32_t data_last;

    /* Clear the display */
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800233e:	f04f 30ff 	mov.w	r0, #4294967295
 8002342:	f001 fd2f 	bl	8003da4 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET + 1);
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	b29a      	uxth	r2, r3
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	b29b      	uxth	r3, r3
 800234e:	3301      	adds	r3, #1
 8002350:	b29b      	uxth	r3, r3
 8002352:	2100      	movs	r1, #0
 8002354:	2000      	movs	r0, #0
 8002356:	f001 ff65 	bl	8004224 <BSP_LCD_FillRect>

    /* Write first 2 samples as numbers */
    BSP_LCD_SetFont(&Font24);
 800235a:	4861      	ldr	r0, [pc, #388]	@ (80024e0 <show_data_menu_zero+0x1c0>)
 800235c:	f001 fd54 	bl	8003e08 <BSP_LCD_SetFont>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	f001 fd36 	bl	8003dd4 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002368:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800236c:	f001 fd1a 	bl	8003da4 <BSP_LCD_SetTextColor>
    char text[16];
    snprintf(text, 15, "1. sample %4d", (int)(ADC_samples[0]));
 8002370:	4b5c      	ldr	r3, [pc, #368]	@ (80024e4 <show_data_menu_zero+0x1c4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4638      	mov	r0, r7
 8002376:	4a5c      	ldr	r2, [pc, #368]	@ (80024e8 <show_data_menu_zero+0x1c8>)
 8002378:	210f      	movs	r1, #15
 800237a:	f008 ff8d 	bl	800b298 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 50, (uint8_t *)text, LEFT_MODE);
 800237e:	463a      	mov	r2, r7
 8002380:	2303      	movs	r3, #3
 8002382:	2132      	movs	r1, #50	@ 0x32
 8002384:	2000      	movs	r0, #0
 8002386:	f001 fdc5 	bl	8003f14 <BSP_LCD_DisplayStringAt>
    snprintf(text, 15, "2. sample %4d", (int)(ADC_samples[1]));
 800238a:	4b56      	ldr	r3, [pc, #344]	@ (80024e4 <show_data_menu_zero+0x1c4>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4638      	mov	r0, r7
 8002390:	4a56      	ldr	r2, [pc, #344]	@ (80024ec <show_data_menu_zero+0x1cc>)
 8002392:	210f      	movs	r1, #15
 8002394:	f008 ff80 	bl	800b298 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 80, (uint8_t *)text, LEFT_MODE);
 8002398:	463a      	mov	r2, r7
 800239a:	2303      	movs	r3, #3
 800239c:	2150      	movs	r1, #80	@ 0x50
 800239e:	2000      	movs	r0, #0
 80023a0:	f001 fdb8 	bl	8003f14 <BSP_LCD_DisplayStringAt>

    /* Draw the values of input channel 1 as a curve */
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80023a4:	4852      	ldr	r0, [pc, #328]	@ (80024f0 <show_data_menu_zero+0x1d0>)
 80023a6:	f001 fcfd 	bl	8003da4 <BSP_LCD_SetTextColor>
    data = ADC_samples[MEAS_input_count * 0] / f;
 80023aa:	4b4e      	ldr	r3, [pc, #312]	@ (80024e4 <show_data_menu_zero+0x1c4>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (uint32_t i = 1; i < ADC_NUMS; i++) {
 80023b6:	2301      	movs	r3, #1
 80023b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023ba:	e02e      	b.n	800241a <show_data_menu_zero+0xfa>
        data_last = data;
 80023bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023be:	613b      	str	r3, [r7, #16]
        data = (ADC_samples[MEAS_input_count * i]) / f;
 80023c0:	4b4c      	ldr	r3, [pc, #304]	@ (80024f4 <show_data_menu_zero+0x1d4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023c6:	fb02 f303 	mul.w	r3, r2, r3
 80023ca:	4a46      	ldr	r2, [pc, #280]	@ (80024e4 <show_data_menu_zero+0x1c4>)
 80023cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (data > Y_OFFSET) data = Y_OFFSET;
 80023d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d901      	bls.n	80023e4 <show_data_menu_zero+0xc4>
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i, Y_OFFSET - data);
 80023e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	b298      	uxth	r0, r3
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	b299      	uxth	r1, r3
 80023fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	b29c      	uxth	r4, r3
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	b29a      	uxth	r2, r3
 8002406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002408:	b29b      	uxth	r3, r3
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	b29b      	uxth	r3, r3
 800240e:	4622      	mov	r2, r4
 8002410:	f001 fe3e 	bl	8004090 <BSP_LCD_DrawLine>
    for (uint32_t i = 1; i < ADC_NUMS; i++) {
 8002414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002416:	3301      	adds	r3, #1
 8002418:	62bb      	str	r3, [r7, #40]	@ 0x28
 800241a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241c:	2b3b      	cmp	r3, #59	@ 0x3b
 800241e:	d9cd      	bls.n	80023bc <show_data_menu_zero+0x9c>
    }

    /* Draw the values of input channel 2 (if present) as a curve */
    if (MEAS_input_count == 2) {
 8002420:	4b34      	ldr	r3, [pc, #208]	@ (80024f4 <show_data_menu_zero+0x1d4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d13e      	bne.n	80024a6 <show_data_menu_zero+0x186>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002428:	4833      	ldr	r0, [pc, #204]	@ (80024f8 <show_data_menu_zero+0x1d8>)
 800242a:	f001 fcbb 	bl	8003da4 <BSP_LCD_SetTextColor>
        data = ADC_samples[MEAS_input_count * 0 + 1] / f;
 800242e:	4b2d      	ldr	r3, [pc, #180]	@ (80024e4 <show_data_menu_zero+0x1c4>)
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	fbb2 f3f3 	udiv	r3, r2, r3
 8002438:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (uint32_t i = 1; i < ADC_NUMS; i++) {
 800243a:	2301      	movs	r3, #1
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24
 800243e:	e02f      	b.n	80024a0 <show_data_menu_zero+0x180>
            data_last = data;
 8002440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002442:	613b      	str	r3, [r7, #16]
            data = (ADC_samples[MEAS_input_count * i + 1]) / f;
 8002444:	4b2b      	ldr	r3, [pc, #172]	@ (80024f4 <show_data_menu_zero+0x1d4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	3301      	adds	r3, #1
 8002450:	4a24      	ldr	r2, [pc, #144]	@ (80024e4 <show_data_menu_zero+0x1c4>)
 8002452:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	fbb2 f3f3 	udiv	r3, r2, r3
 800245c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (data > Y_OFFSET) data = Y_OFFSET;
 800245e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	429a      	cmp	r2, r3
 8002464:	d901      	bls.n	800246a <show_data_menu_zero+0x14a>
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	62fb      	str	r3, [r7, #44]	@ 0x2c
            BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i, Y_OFFSET - data);
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	3b01      	subs	r3, #1
 800246e:	b29b      	uxth	r3, r3
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	b298      	uxth	r0, r3
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	b29a      	uxth	r2, r3
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	b29b      	uxth	r3, r3
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	b299      	uxth	r1, r3
 8002480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002482:	b29b      	uxth	r3, r3
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	b29c      	uxth	r4, r3
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	b29a      	uxth	r2, r3
 800248c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800248e:	b29b      	uxth	r3, r3
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	b29b      	uxth	r3, r3
 8002494:	4622      	mov	r2, r4
 8002496:	f001 fdfb 	bl	8004090 <BSP_LCD_DrawLine>
        for (uint32_t i = 1; i < ADC_NUMS; i++) {
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	3301      	adds	r3, #1
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24
 80024a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a2:	2b3b      	cmp	r3, #59	@ 0x3b
 80024a4:	d9cc      	bls.n	8002440 <show_data_menu_zero+0x120>
        }
    }

/* Clear buffer and flag */
	for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
 80024aa:	e00f      	b.n	80024cc <show_data_menu_zero+0x1ac>
		ADC_samples[2 * i] = 0;
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4a0c      	ldr	r2, [pc, #48]	@ (80024e4 <show_data_menu_zero+0x1c4>)
 80024b2:	2100      	movs	r1, #0
 80024b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		ADC_samples[2 * i + 1] = 0;
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	3301      	adds	r3, #1
 80024be:	4a09      	ldr	r2, [pc, #36]	@ (80024e4 <show_data_menu_zero+0x1c4>)
 80024c0:	2100      	movs	r1, #0
 80024c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	3301      	adds	r3, #1
 80024ca:	623b      	str	r3, [r7, #32]
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	2b3b      	cmp	r3, #59	@ 0x3b
 80024d0:	d9ec      	bls.n	80024ac <show_data_menu_zero+0x18c>
	}
	ADC_sample_count = 0;
 80024d2:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <show_data_menu_zero+0x1dc>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
}
 80024d8:	bf00      	nop
 80024da:	3734      	adds	r7, #52	@ 0x34
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd90      	pop	{r4, r7, pc}
 80024e0:	20000174 	.word	0x20000174
 80024e4:	200003c4 	.word	0x200003c4
 80024e8:	0800d670 	.word	0x0800d670
 80024ec:	0800d680 	.word	0x0800d680
 80024f0:	ff0000ff 	.word	0xff0000ff
 80024f4:	20000004 	.word	0x20000004
 80024f8:	ffff0000 	.word	0xffff0000
 80024fc:	200003c0 	.word	0x200003c0

08002500 <MENU_draw>:
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(void)
{
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(MENU_FONT);
 8002506:	4852      	ldr	r0, [pc, #328]	@ (8002650 <MENU_draw+0x150>)
 8002508:	f001 fc7e 	bl	8003e08 <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MENU_Y;
 800250c:	f001 fbca 	bl	8003ca4 <BSP_LCD_GetYSize>
 8002510:	4603      	mov	r3, r0
 8002512:	3b28      	subs	r3, #40	@ 0x28
 8002514:	613b      	str	r3, [r7, #16]
	m = MENU_MARGIN;
 8002516:	2302      	movs	r3, #2
 8002518:	60fb      	str	r3, [r7, #12]
	w = BSP_LCD_GetXSize()/MENU_ENTRY_COUNT;
 800251a:	f001 fbb7 	bl	8003c8c <BSP_LCD_GetXSize>
 800251e:	4603      	mov	r3, r0
 8002520:	4a4c      	ldr	r2, [pc, #304]	@ (8002654 <MENU_draw+0x154>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	60bb      	str	r3, [r7, #8]
	h = MENU_HEIGHT;
 800252a:	2328      	movs	r3, #40	@ 0x28
 800252c:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	e084      	b.n	800263e <MENU_draw+0x13e>
		x = i*w;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	fb02 f303 	mul.w	r3, r2, r3
 800253c:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(MENU_entry[i].back_color);
 800253e:	4946      	ldr	r1, [pc, #280]	@ (8002658 <MENU_draw+0x158>)
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	440b      	add	r3, r1
 800254c:	3324      	adds	r3, #36	@ 0x24
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f001 fc27 	bl	8003da4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	b29b      	uxth	r3, r3
 800255e:	4413      	add	r3, r2
 8002560:	b298      	uxth	r0, r3
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	b29b      	uxth	r3, r3
 800256a:	4413      	add	r3, r2
 800256c:	b299      	uxth	r1, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	b29b      	uxth	r3, r3
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	b29b      	uxth	r3, r3
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	b29c      	uxth	r4, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	b29b      	uxth	r3, r3
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	b29b      	uxth	r3, r3
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	b29b      	uxth	r3, r3
 800258e:	4622      	mov	r2, r4
 8002590:	f001 fe48 	bl	8004224 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(MENU_entry[i].back_color);
 8002594:	4930      	ldr	r1, [pc, #192]	@ (8002658 <MENU_draw+0x158>)
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	440b      	add	r3, r1
 80025a2:	3324      	adds	r3, #36	@ 0x24
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f001 fc14 	bl	8003dd4 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(MENU_entry[i].text_color);
 80025ac:	492a      	ldr	r1, [pc, #168]	@ (8002658 <MENU_draw+0x158>)
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	440b      	add	r3, r1
 80025ba:	3320      	adds	r3, #32
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f001 fbf0 	bl	8003da4 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	0052      	lsls	r2, r2, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	b298      	uxth	r0, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	461a      	mov	r2, r3
 80025de:	0052      	lsls	r2, r2, #1
 80025e0:	4413      	add	r3, r2
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	4413      	add	r3, r2
 80025ea:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line1, LEFT_MODE);
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4a18      	ldr	r2, [pc, #96]	@ (8002658 <MENU_draw+0x158>)
 80025f8:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 80025fa:	2303      	movs	r3, #3
 80025fc:	f001 fc8a 	bl	8003f14 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	b29b      	uxth	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	0052      	lsls	r2, r2, #1
 8002608:	4413      	add	r3, r2
 800260a:	b29a      	uxth	r2, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	4413      	add	r3, r2
 8002612:	b298      	uxth	r0, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	085b      	lsrs	r3, r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	b29b      	uxth	r3, r3
 800261e:	4413      	add	r3, r2
 8002620:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line2, LEFT_MODE);
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	3310      	adds	r3, #16
 800262e:	4a0a      	ldr	r2, [pc, #40]	@ (8002658 <MENU_draw+0x158>)
 8002630:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 8002632:	2303      	movs	r3, #3
 8002634:	f001 fc6e 	bl	8003f14 <BSP_LCD_DisplayStringAt>
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3301      	adds	r3, #1
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b05      	cmp	r3, #5
 8002642:	f67f af77 	bls.w	8002534 <MENU_draw+0x34>
	}
}
 8002646:	bf00      	nop
 8002648:	bf00      	nop
 800264a:	371c      	adds	r7, #28
 800264c:	46bd      	mov	sp, r7
 800264e:	bd90      	pop	{r4, r7, pc}
 8002650:	20000184 	.word	0x20000184
 8002654:	aaaaaaab 	.word	0xaaaaaaab
 8002658:	2000000c 	.word	0x2000000c

0800265c <MENU_hint>:
/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_hint(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002660:	f04f 30ff 	mov.w	r0, #4294967295
 8002664:	f001 fbb6 	bl	8003dd4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002668:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800266c:	f001 fb9a 	bl	8003da4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 8002670:	4818      	ldr	r0, [pc, #96]	@ (80026d4 <MENU_hint+0x78>)
 8002672:	f001 fbc9 	bl	8003e08 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"KEK-CODE", LEFT_MODE);
 8002676:	2303      	movs	r3, #3
 8002678:	4a17      	ldr	r2, [pc, #92]	@ (80026d8 <MENU_hint+0x7c>)
 800267a:	210a      	movs	r1, #10
 800267c:	2005      	movs	r0, #5
 800267e:	f001 fc49 	bl	8003f14 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 8002682:	4816      	ldr	r0, [pc, #88]	@ (80026dc <MENU_hint+0x80>)
 8002684:	f001 fbc0 	bl	8003e08 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Touch a menu item", LEFT_MODE);
 8002688:	2303      	movs	r3, #3
 800268a:	4a15      	ldr	r2, [pc, #84]	@ (80026e0 <MENU_hint+0x84>)
 800268c:	213c      	movs	r1, #60	@ 0x3c
 800268e:	2005      	movs	r0, #5
 8002690:	f001 fc40 	bl	8003f14 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 80, (uint8_t *)"to start an ADC demo", LEFT_MODE);
 8002694:	2303      	movs	r3, #3
 8002696:	4a13      	ldr	r2, [pc, #76]	@ (80026e4 <MENU_hint+0x88>)
 8002698:	2150      	movs	r1, #80	@ 0x50
 800269a:	2005      	movs	r0, #5
 800269c:	f001 fc3a 	bl	8003f14 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 110, (uint8_t *)"Switch DAC on/off", LEFT_MODE);
 80026a0:	2303      	movs	r3, #3
 80026a2:	4a11      	ldr	r2, [pc, #68]	@ (80026e8 <MENU_hint+0x8c>)
 80026a4:	216e      	movs	r1, #110	@ 0x6e
 80026a6:	2005      	movs	r0, #5
 80026a8:	f001 fc34 	bl	8003f14 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 130, (uint8_t *)"with blue pushbutton", LEFT_MODE);
 80026ac:	2303      	movs	r3, #3
 80026ae:	4a0f      	ldr	r2, [pc, #60]	@ (80026ec <MENU_hint+0x90>)
 80026b0:	2182      	movs	r1, #130	@ 0x82
 80026b2:	2005      	movs	r0, #5
 80026b4:	f001 fc2e 	bl	8003f14 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"(c) hhrt@zhaw.ch", LEFT_MODE);
 80026b8:	2303      	movs	r3, #3
 80026ba:	4a0d      	ldr	r2, [pc, #52]	@ (80026f0 <MENU_hint+0x94>)
 80026bc:	21a0      	movs	r1, #160	@ 0xa0
 80026be:	2005      	movs	r0, #5
 80026c0:	f001 fc28 	bl	8003f14 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"Version 27.09.2022", LEFT_MODE);
 80026c4:	2303      	movs	r3, #3
 80026c6:	4a0b      	ldr	r2, [pc, #44]	@ (80026f4 <MENU_hint+0x98>)
 80026c8:	21a0      	movs	r1, #160	@ 0xa0
 80026ca:	2005      	movs	r0, #5
 80026cc:	f001 fc22 	bl	8003f14 <BSP_LCD_DisplayStringAt>
}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20000174 	.word	0x20000174
 80026d8:	0800d690 	.word	0x0800d690
 80026dc:	2000017c 	.word	0x2000017c
 80026e0:	0800d69c 	.word	0x0800d69c
 80026e4:	0800d6b0 	.word	0x0800d6b0
 80026e8:	0800d6c8 	.word	0x0800d6c8
 80026ec:	0800d6dc 	.word	0x0800d6dc
 80026f0:	0800d6f4 	.word	0x0800d6f4
 80026f4:	0800d708 	.word	0x0800d708

080026f8 <MENU_get_transition>:
	MENU_transition = MENU_NONE;
	return item;
}*/

MENU_item_t MENU_get_transition(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
	/*
	MENU_item_t item = MENU_transition;
	MENU_transition = MENU_NONE;
	return item;
	*/
	return MENU_transition;
 80026fc:	4b03      	ldr	r3, [pc, #12]	@ (800270c <MENU_get_transition+0x14>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000008 	.word	0x20000008

08002710 <MENU_check_transition>:
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/

void MENU_check_transition(void)
{
 8002710:	b598      	push	{r3, r4, r7, lr}
 8002712:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 8002714:	482f      	ldr	r0, [pc, #188]	@ (80027d4 <MENU_check_transition+0xc4>)
 8002716:	f002 fa3b 	bl	8004b90 <BSP_TS_GetState>

// Evalboard revision E (blue) has an inverted y-axis in the touch controller
#ifdef EVAL_REV_E
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 800271a:	f001 fac3 	bl	8003ca4 <BSP_LCD_GetYSize>
 800271e:	4603      	mov	r3, r0
 8002720:	b29a      	uxth	r2, r3
 8002722:	4b2c      	ldr	r3, [pc, #176]	@ (80027d4 <MENU_check_transition+0xc4>)
 8002724:	889b      	ldrh	r3, [r3, #4]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	b29a      	uxth	r2, r3
 800272a:	4b2a      	ldr	r3, [pc, #168]	@ (80027d4 <MENU_check_transition+0xc4>)
 800272c:	809a      	strh	r2, [r3, #4]
#endif
	// Invert x- and y-axis if LCD ist flipped
#ifdef FLIPPED_LCD
	TS_State.X = BSP_LCD_GetXSize() - TS_State.X;	// Invert the x-axis
 800272e:	f001 faad 	bl	8003c8c <BSP_LCD_GetXSize>
 8002732:	4603      	mov	r3, r0
 8002734:	b29a      	uxth	r2, r3
 8002736:	4b27      	ldr	r3, [pc, #156]	@ (80027d4 <MENU_check_transition+0xc4>)
 8002738:	885b      	ldrh	r3, [r3, #2]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	b29a      	uxth	r2, r3
 800273e:	4b25      	ldr	r3, [pc, #148]	@ (80027d4 <MENU_check_transition+0xc4>)
 8002740:	805a      	strh	r2, [r3, #2]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8002742:	f001 faaf 	bl	8003ca4 <BSP_LCD_GetYSize>
 8002746:	4603      	mov	r3, r0
 8002748:	b29a      	uxth	r2, r3
 800274a:	4b22      	ldr	r3, [pc, #136]	@ (80027d4 <MENU_check_transition+0xc4>)
 800274c:	889b      	ldrh	r3, [r3, #4]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	b29a      	uxth	r2, r3
 8002752:	4b20      	ldr	r3, [pc, #128]	@ (80027d4 <MENU_check_transition+0xc4>)
 8002754:	809a      	strh	r2, [r3, #4]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
#endif
#ifdef EVAL_REV_E
#endif
*/
	if (TS_State.TouchDetected) {		// If a touch was detected
 8002756:	4b1f      	ldr	r3, [pc, #124]	@ (80027d4 <MENU_check_transition+0xc4>)
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d037      	beq.n	80027ce <MENU_check_transition+0xbe>
					MENU_transition = item_old;
				}
			}
		}*/

        item_old = item_new;           // Update old item
 800275e:	4b1e      	ldr	r3, [pc, #120]	@ (80027d8 <MENU_check_transition+0xc8>)
 8002760:	781a      	ldrb	r2, [r3, #0]
 8002762:	4b1e      	ldr	r3, [pc, #120]	@ (80027dc <MENU_check_transition+0xcc>)
 8002764:	701a      	strb	r2, [r3, #0]
        if ((MENU_Y < TS_State.Y) && (MENU_Y + MENU_HEIGHT > TS_State.Y)) {
 8002766:	f001 fa9d 	bl	8003ca4 <BSP_LCD_GetYSize>
 800276a:	4603      	mov	r3, r0
 800276c:	3b28      	subs	r3, #40	@ 0x28
 800276e:	4a19      	ldr	r2, [pc, #100]	@ (80027d4 <MENU_check_transition+0xc4>)
 8002770:	8892      	ldrh	r2, [r2, #4]
 8002772:	4293      	cmp	r3, r2
 8002774:	d22b      	bcs.n	80027ce <MENU_check_transition+0xbe>
 8002776:	f001 fa95 	bl	8003ca4 <BSP_LCD_GetYSize>
 800277a:	4603      	mov	r3, r0
 800277c:	4a15      	ldr	r2, [pc, #84]	@ (80027d4 <MENU_check_transition+0xc4>)
 800277e:	8892      	ldrh	r2, [r2, #4]
 8002780:	4293      	cmp	r3, r2
 8002782:	d924      	bls.n	80027ce <MENU_check_transition+0xbe>
            item_new = TS_State.X / (BSP_LCD_GetXSize() / MENU_ENTRY_COUNT);
 8002784:	4b13      	ldr	r3, [pc, #76]	@ (80027d4 <MENU_check_transition+0xc4>)
 8002786:	885b      	ldrh	r3, [r3, #2]
 8002788:	461c      	mov	r4, r3
 800278a:	f001 fa7f 	bl	8003c8c <BSP_LCD_GetXSize>
 800278e:	4603      	mov	r3, r0
 8002790:	4a13      	ldr	r2, [pc, #76]	@ (80027e0 <MENU_check_transition+0xd0>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	089b      	lsrs	r3, r3, #2
 8002798:	fbb4 f3f3 	udiv	r3, r4, r3
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4b0e      	ldr	r3, [pc, #56]	@ (80027d8 <MENU_check_transition+0xc8>)
 80027a0:	701a      	strb	r2, [r3, #0]
            if ((item_new < 0) || (item_new >= MENU_ENTRY_COUNT)) {
 80027a2:	4b0d      	ldr	r3, [pc, #52]	@ (80027d8 <MENU_check_transition+0xc8>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b05      	cmp	r3, #5
 80027a8:	d902      	bls.n	80027b0 <MENU_check_transition+0xa0>
                item_new = MENU_NONE;  // Out of bounds
 80027aa:	4b0b      	ldr	r3, [pc, #44]	@ (80027d8 <MENU_check_transition+0xc8>)
 80027ac:	2206      	movs	r2, #6
 80027ae:	701a      	strb	r2, [r3, #0]
            }
            if (item_new == item_old) { // Handle same menu item touch
 80027b0:	4b09      	ldr	r3, [pc, #36]	@ (80027d8 <MENU_check_transition+0xc8>)
 80027b2:	781a      	ldrb	r2, [r3, #0]
 80027b4:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <MENU_check_transition+0xcc>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d104      	bne.n	80027c6 <MENU_check_transition+0xb6>
                MENU_transition = item_old;
 80027bc:	4b07      	ldr	r3, [pc, #28]	@ (80027dc <MENU_check_transition+0xcc>)
 80027be:	781a      	ldrb	r2, [r3, #0]
 80027c0:	4b08      	ldr	r3, [pc, #32]	@ (80027e4 <MENU_check_transition+0xd4>)
 80027c2:	701a      	strb	r2, [r3, #0]
	} else {
//		sprintf(msg, "No touch detected\r\n");
//		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	}

}
 80027c4:	e003      	b.n	80027ce <MENU_check_transition+0xbe>
                MENU_transition = item_new;
 80027c6:	4b04      	ldr	r3, [pc, #16]	@ (80027d8 <MENU_check_transition+0xc8>)
 80027c8:	781a      	ldrb	r2, [r3, #0]
 80027ca:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <MENU_check_transition+0xd4>)
 80027cc:	701a      	strb	r2, [r3, #0]
}
 80027ce:	bf00      	nop
 80027d0:	bd98      	pop	{r3, r4, r7, pc}
 80027d2:	bf00      	nop
 80027d4:	2000088c 	.word	0x2000088c
 80027d8:	200000fc 	.word	0x200000fc
 80027dc:	200000fd 	.word	0x200000fd
 80027e0:	aaaaaaab 	.word	0xaaaaaaab
 80027e4:	20000008 	.word	0x20000008

080027e8 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 80027ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002828 <EXTI15_10_IRQHandler+0x40>)
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d014      	beq.n	8002822 <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 80027f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002828 <EXTI15_10_IRQHandler+0x40>)
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002828 <EXTI15_10_IRQHandler+0x40>)
 80027fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002802:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 8002804:	f002 f9b8 	bl	8004b78 <BSP_TS_ITGetStatus>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 800280e:	f002 fa71 	bl	8004cf4 <BSP_TS_ITClear>
			MENU_check_transition();
 8002812:	f7ff ff7d 	bl	8002710 <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8002816:	4b04      	ldr	r3, [pc, #16]	@ (8002828 <EXTI15_10_IRQHandler+0x40>)
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	4a03      	ldr	r2, [pc, #12]	@ (8002828 <EXTI15_10_IRQHandler+0x40>)
 800281c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002820:	6153      	str	r3, [r2, #20]
	}
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40013c00 	.word	0x40013c00

0800282c <__NVIC_EnableIRQ>:
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	2b00      	cmp	r3, #0
 800283c:	db0b      	blt.n	8002856 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	f003 021f 	and.w	r2, r3, #31
 8002844:	4907      	ldr	r1, [pc, #28]	@ (8002864 <__NVIC_EnableIRQ+0x38>)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	2001      	movs	r0, #1
 800284e:	fa00 f202 	lsl.w	r2, r0, r2
 8002852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000e100 	.word	0xe000e100

08002868 <__NVIC_ClearPendingIRQ>:
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	2b00      	cmp	r3, #0
 8002878:	db0c      	blt.n	8002894 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	f003 021f 	and.w	r2, r3, #31
 8002880:	4907      	ldr	r1, [pc, #28]	@ (80028a0 <__NVIC_ClearPendingIRQ+0x38>)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	2001      	movs	r0, #1
 800288a:	fa00 f202 	lsl.w	r2, r0, r2
 800288e:	3360      	adds	r3, #96	@ 0x60
 8002890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000e100 	.word	0xe000e100

080028a4 <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]
 80028ae:	4b0b      	ldr	r3, [pc, #44]	@ (80028dc <PB_init+0x38>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	4a0a      	ldr	r2, [pc, #40]	@ (80028dc <PB_init+0x38>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ba:	4b08      	ldr	r3, [pc, #32]	@ (80028dc <PB_init+0x38>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 80028c6:	4b06      	ldr	r3, [pc, #24]	@ (80028e0 <PB_init+0x3c>)
 80028c8:	4a05      	ldr	r2, [pc, #20]	@ (80028e0 <PB_init+0x3c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6013      	str	r3, [r2, #0]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40020000 	.word	0x40020000

080028e4 <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 80028ea:	2300      	movs	r3, #0
 80028ec:	607b      	str	r3, [r7, #4]
 80028ee:	4b13      	ldr	r3, [pc, #76]	@ (800293c <PB_enableIRQ+0x58>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f2:	4a12      	ldr	r2, [pc, #72]	@ (800293c <PB_enableIRQ+0x58>)
 80028f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028fa:	4b10      	ldr	r3, [pc, #64]	@ (800293c <PB_enableIRQ+0x58>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 8002906:	4b0e      	ldr	r3, [pc, #56]	@ (8002940 <PB_enableIRQ+0x5c>)
 8002908:	4a0d      	ldr	r2, [pc, #52]	@ (8002940 <PB_enableIRQ+0x5c>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 800290e:	4b0d      	ldr	r3, [pc, #52]	@ (8002944 <PB_enableIRQ+0x60>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	4a0c      	ldr	r2, [pc, #48]	@ (8002944 <PB_enableIRQ+0x60>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 800291a:	4b0a      	ldr	r3, [pc, #40]	@ (8002944 <PB_enableIRQ+0x60>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a09      	ldr	r2, [pc, #36]	@ (8002944 <PB_enableIRQ+0x60>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 8002926:	2006      	movs	r0, #6
 8002928:	f7ff ff9e 	bl	8002868 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 800292c:	2006      	movs	r0, #6
 800292e:	f7ff ff7d 	bl	800282c <__NVIC_EnableIRQ>
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800
 8002940:	40013800 	.word	0x40013800
 8002944:	40013c00 	.word	0x40013c00

08002948 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 800294c:	4b09      	ldr	r3, [pc, #36]	@ (8002974 <EXTI0_IRQHandler+0x2c>)
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8002958:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <EXTI0_IRQHandler+0x2c>)
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	4a05      	ldr	r2, [pc, #20]	@ (8002974 <EXTI0_IRQHandler+0x2c>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8002964:	4b04      	ldr	r3, [pc, #16]	@ (8002978 <EXTI0_IRQHandler+0x30>)
 8002966:	2201      	movs	r2, #1
 8002968:	701a      	strb	r2, [r3, #0]
	}
}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	40013c00 	.word	0x40013c00
 8002978:	20000894 	.word	0x20000894

0800297c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	4b10      	ldr	r3, [pc, #64]	@ (80029c8 <HAL_MspInit+0x4c>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298a:	4a0f      	ldr	r2, [pc, #60]	@ (80029c8 <HAL_MspInit+0x4c>)
 800298c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002990:	6453      	str	r3, [r2, #68]	@ 0x44
 8002992:	4b0d      	ldr	r3, [pc, #52]	@ (80029c8 <HAL_MspInit+0x4c>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800299a:	607b      	str	r3, [r7, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	603b      	str	r3, [r7, #0]
 80029a2:	4b09      	ldr	r3, [pc, #36]	@ (80029c8 <HAL_MspInit+0x4c>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	4a08      	ldr	r2, [pc, #32]	@ (80029c8 <HAL_MspInit+0x4c>)
 80029a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ae:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <HAL_MspInit+0x4c>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b6:	603b      	str	r3, [r7, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800

080029cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	@ 0x28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002a60 <HAL_UART_MspInit+0x94>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d134      	bne.n	8002a58 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a64 <HAL_UART_MspInit+0x98>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a64 <HAL_UART_MspInit+0x98>)
 80029f8:	f043 0310 	orr.w	r3, r3, #16
 80029fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029fe:	4b19      	ldr	r3, [pc, #100]	@ (8002a64 <HAL_UART_MspInit+0x98>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	4b15      	ldr	r3, [pc, #84]	@ (8002a64 <HAL_UART_MspInit+0x98>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	4a14      	ldr	r2, [pc, #80]	@ (8002a64 <HAL_UART_MspInit+0x98>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a1a:	4b12      	ldr	r3, [pc, #72]	@ (8002a64 <HAL_UART_MspInit+0x98>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a26:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a34:	2303      	movs	r3, #3
 8002a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a38:	2307      	movs	r3, #7
 8002a3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	4619      	mov	r1, r3
 8002a42:	4809      	ldr	r0, [pc, #36]	@ (8002a68 <HAL_UART_MspInit+0x9c>)
 8002a44:	f002 ff5e 	bl	8005904 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	2025      	movs	r0, #37	@ 0x25
 8002a4e:	f002 face 	bl	8004fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a52:	2025      	movs	r0, #37	@ 0x25
 8002a54:	f002 fae7 	bl	8005026 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002a58:	bf00      	nop
 8002a5a:	3728      	adds	r7, #40	@ 0x28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40011000 	.word	0x40011000
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40020000 	.word	0x40020000

08002a6c <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 8002a7e:	bf00      	nop
 8002a80:	e7fd      	b.n	8002a7e <HardFault_Handler+0x4>

08002a82 <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 8002a86:	bf00      	nop
 8002a88:	e7fd      	b.n	8002a86 <MemManage_Handler+0x4>

08002a8a <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 8002a8e:	bf00      	nop
 8002a90:	e7fd      	b.n	8002a8e <BusFault_Handler+0x4>

08002a92 <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 8002a92:	b480      	push	{r7}
 8002a94:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 8002a96:	bf00      	nop
 8002a98:	e7fd      	b.n	8002a96 <UsageFault_Handler+0x4>

08002a9a <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0
}
 8002a9e:	bf00      	nop
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0
}
 8002aba:	bf00      	nop
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8002ac8:	f002 f972 	bl	8004db0 <HAL_IncTick>
}
 8002acc:	bf00      	nop
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ad4:	4b16      	ldr	r3, [pc, #88]	@ (8002b30 <SystemInit+0x60>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ada:	4a15      	ldr	r2, [pc, #84]	@ (8002b30 <SystemInit+0x60>)
 8002adc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ae0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002ae4:	4b13      	ldr	r3, [pc, #76]	@ (8002b34 <SystemInit+0x64>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a12      	ldr	r2, [pc, #72]	@ (8002b34 <SystemInit+0x64>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002af0:	4b10      	ldr	r3, [pc, #64]	@ (8002b34 <SystemInit+0x64>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002af6:	4b0f      	ldr	r3, [pc, #60]	@ (8002b34 <SystemInit+0x64>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a0e      	ldr	r2, [pc, #56]	@ (8002b34 <SystemInit+0x64>)
 8002afc:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8002b00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002b06:	4b0b      	ldr	r3, [pc, #44]	@ (8002b34 <SystemInit+0x64>)
 8002b08:	4a0b      	ldr	r2, [pc, #44]	@ (8002b38 <SystemInit+0x68>)
 8002b0a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002b0c:	4b09      	ldr	r3, [pc, #36]	@ (8002b34 <SystemInit+0x64>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a08      	ldr	r2, [pc, #32]	@ (8002b34 <SystemInit+0x64>)
 8002b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002b18:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <SystemInit+0x64>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b1e:	4b04      	ldr	r3, [pc, #16]	@ (8002b30 <SystemInit+0x60>)
 8002b20:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b24:	609a      	str	r2, [r3, #8]
#endif
}
 8002b26:	bf00      	nop
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000ed00 	.word	0xe000ed00
 8002b34:	40023800 	.word	0x40023800
 8002b38:	24003010 	.word	0x24003010

08002b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002b3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b74 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b42:	e003      	b.n	8002b4c <LoopCopyDataInit>

08002b44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b44:	4b0c      	ldr	r3, [pc, #48]	@ (8002b78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b4a:	3104      	adds	r1, #4

08002b4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b4c:	480b      	ldr	r0, [pc, #44]	@ (8002b7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b54:	d3f6      	bcc.n	8002b44 <CopyDataInit>
  ldr  r2, =_sbss
 8002b56:	4a0b      	ldr	r2, [pc, #44]	@ (8002b84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b58:	e002      	b.n	8002b60 <LoopFillZerobss>

08002b5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b5c:	f842 3b04 	str.w	r3, [r2], #4

08002b60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b60:	4b09      	ldr	r3, [pc, #36]	@ (8002b88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b64:	d3f9      	bcc.n	8002b5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b66:	f7ff ffb3 	bl	8002ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b6a:	f008 fc83 	bl	800b474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b6e:	f7fe f9c1 	bl	8000ef4 <main>
  bx  lr    
 8002b72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002b74:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002b78:	080195d4 	.word	0x080195d4
  ldr  r0, =_sdata
 8002b7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b80:	20000360 	.word	0x20000360
  ldr  r2, =_sbss
 8002b84:	20000360 	.word	0x20000360
  ldr  r3, = _ebss
 8002b88:	20000cac 	.word	0x20000cac

08002b8c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b8c:	e7fe      	b.n	8002b8c <CAN1_RX0_IRQHandler>

08002b8e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002b92:	f000 feb9 	bl	8003908 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002b96:	20ca      	movs	r0, #202	@ 0xca
 8002b98:	f000 f95d 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002b9c:	20c3      	movs	r0, #195	@ 0xc3
 8002b9e:	f000 f967 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002ba2:	2008      	movs	r0, #8
 8002ba4:	f000 f964 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002ba8:	2050      	movs	r0, #80	@ 0x50
 8002baa:	f000 f961 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002bae:	20cf      	movs	r0, #207	@ 0xcf
 8002bb0:	f000 f951 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f000 f95b 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002bba:	20c1      	movs	r0, #193	@ 0xc1
 8002bbc:	f000 f958 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002bc0:	2030      	movs	r0, #48	@ 0x30
 8002bc2:	f000 f955 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002bc6:	20ed      	movs	r0, #237	@ 0xed
 8002bc8:	f000 f945 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002bcc:	2064      	movs	r0, #100	@ 0x64
 8002bce:	f000 f94f 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002bd2:	2003      	movs	r0, #3
 8002bd4:	f000 f94c 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002bd8:	2012      	movs	r0, #18
 8002bda:	f000 f949 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002bde:	2081      	movs	r0, #129	@ 0x81
 8002be0:	f000 f946 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002be4:	20e8      	movs	r0, #232	@ 0xe8
 8002be6:	f000 f936 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002bea:	2085      	movs	r0, #133	@ 0x85
 8002bec:	f000 f940 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f000 f93d 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002bf6:	2078      	movs	r0, #120	@ 0x78
 8002bf8:	f000 f93a 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002bfc:	20cb      	movs	r0, #203	@ 0xcb
 8002bfe:	f000 f92a 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002c02:	2039      	movs	r0, #57	@ 0x39
 8002c04:	f000 f934 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002c08:	202c      	movs	r0, #44	@ 0x2c
 8002c0a:	f000 f931 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f000 f92e 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002c14:	2034      	movs	r0, #52	@ 0x34
 8002c16:	f000 f92b 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002c1a:	2002      	movs	r0, #2
 8002c1c:	f000 f928 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002c20:	20f7      	movs	r0, #247	@ 0xf7
 8002c22:	f000 f918 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002c26:	2020      	movs	r0, #32
 8002c28:	f000 f922 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002c2c:	20ea      	movs	r0, #234	@ 0xea
 8002c2e:	f000 f912 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002c32:	2000      	movs	r0, #0
 8002c34:	f000 f91c 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f000 f919 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002c3e:	20b1      	movs	r0, #177	@ 0xb1
 8002c40:	f000 f909 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002c44:	2000      	movs	r0, #0
 8002c46:	f000 f913 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002c4a:	201b      	movs	r0, #27
 8002c4c:	f000 f910 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002c50:	20b6      	movs	r0, #182	@ 0xb6
 8002c52:	f000 f900 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002c56:	200a      	movs	r0, #10
 8002c58:	f000 f90a 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002c5c:	20a2      	movs	r0, #162	@ 0xa2
 8002c5e:	f000 f907 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002c62:	20c0      	movs	r0, #192	@ 0xc0
 8002c64:	f000 f8f7 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002c68:	2010      	movs	r0, #16
 8002c6a:	f000 f901 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002c6e:	20c1      	movs	r0, #193	@ 0xc1
 8002c70:	f000 f8f1 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002c74:	2010      	movs	r0, #16
 8002c76:	f000 f8fb 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002c7a:	20c5      	movs	r0, #197	@ 0xc5
 8002c7c:	f000 f8eb 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002c80:	2045      	movs	r0, #69	@ 0x45
 8002c82:	f000 f8f5 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002c86:	2015      	movs	r0, #21
 8002c88:	f000 f8f2 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002c8c:	20c7      	movs	r0, #199	@ 0xc7
 8002c8e:	f000 f8e2 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002c92:	2090      	movs	r0, #144	@ 0x90
 8002c94:	f000 f8ec 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002c98:	2036      	movs	r0, #54	@ 0x36
 8002c9a:	f000 f8dc 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002c9e:	20c8      	movs	r0, #200	@ 0xc8
 8002ca0:	f000 f8e6 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002ca4:	20f2      	movs	r0, #242	@ 0xf2
 8002ca6:	f000 f8d6 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002caa:	2000      	movs	r0, #0
 8002cac:	f000 f8e0 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002cb0:	20b0      	movs	r0, #176	@ 0xb0
 8002cb2:	f000 f8d0 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002cb6:	20c2      	movs	r0, #194	@ 0xc2
 8002cb8:	f000 f8da 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002cbc:	20b6      	movs	r0, #182	@ 0xb6
 8002cbe:	f000 f8ca 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002cc2:	200a      	movs	r0, #10
 8002cc4:	f000 f8d4 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002cc8:	20a7      	movs	r0, #167	@ 0xa7
 8002cca:	f000 f8d1 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002cce:	2027      	movs	r0, #39	@ 0x27
 8002cd0:	f000 f8ce 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002cd4:	2004      	movs	r0, #4
 8002cd6:	f000 f8cb 	bl	8002e70 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002cda:	202a      	movs	r0, #42	@ 0x2a
 8002cdc:	f000 f8bb 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f000 f8c5 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f000 f8c2 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002cec:	2000      	movs	r0, #0
 8002cee:	f000 f8bf 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002cf2:	20ef      	movs	r0, #239	@ 0xef
 8002cf4:	f000 f8bc 	bl	8002e70 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002cf8:	202b      	movs	r0, #43	@ 0x2b
 8002cfa:	f000 f8ac 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f000 f8b6 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002d04:	2000      	movs	r0, #0
 8002d06:	f000 f8b3 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	f000 f8b0 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002d10:	203f      	movs	r0, #63	@ 0x3f
 8002d12:	f000 f8ad 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002d16:	20f6      	movs	r0, #246	@ 0xf6
 8002d18:	f000 f89d 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	f000 f8a7 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002d22:	2000      	movs	r0, #0
 8002d24:	f000 f8a4 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002d28:	2006      	movs	r0, #6
 8002d2a:	f000 f8a1 	bl	8002e70 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002d2e:	202c      	movs	r0, #44	@ 0x2c
 8002d30:	f000 f891 	bl	8002e56 <ili9341_WriteReg>
  LCD_Delay(200);
 8002d34:	20c8      	movs	r0, #200	@ 0xc8
 8002d36:	f000 fed5 	bl	8003ae4 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002d3a:	2026      	movs	r0, #38	@ 0x26
 8002d3c:	f000 f88b 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002d40:	2001      	movs	r0, #1
 8002d42:	f000 f895 	bl	8002e70 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002d46:	20e0      	movs	r0, #224	@ 0xe0
 8002d48:	f000 f885 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002d4c:	200f      	movs	r0, #15
 8002d4e:	f000 f88f 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002d52:	2029      	movs	r0, #41	@ 0x29
 8002d54:	f000 f88c 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002d58:	2024      	movs	r0, #36	@ 0x24
 8002d5a:	f000 f889 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002d5e:	200c      	movs	r0, #12
 8002d60:	f000 f886 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002d64:	200e      	movs	r0, #14
 8002d66:	f000 f883 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002d6a:	2009      	movs	r0, #9
 8002d6c:	f000 f880 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002d70:	204e      	movs	r0, #78	@ 0x4e
 8002d72:	f000 f87d 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002d76:	2078      	movs	r0, #120	@ 0x78
 8002d78:	f000 f87a 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002d7c:	203c      	movs	r0, #60	@ 0x3c
 8002d7e:	f000 f877 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002d82:	2009      	movs	r0, #9
 8002d84:	f000 f874 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002d88:	2013      	movs	r0, #19
 8002d8a:	f000 f871 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002d8e:	2005      	movs	r0, #5
 8002d90:	f000 f86e 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002d94:	2017      	movs	r0, #23
 8002d96:	f000 f86b 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002d9a:	2011      	movs	r0, #17
 8002d9c:	f000 f868 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002da0:	2000      	movs	r0, #0
 8002da2:	f000 f865 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002da6:	20e1      	movs	r0, #225	@ 0xe1
 8002da8:	f000 f855 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f000 f85f 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002db2:	2016      	movs	r0, #22
 8002db4:	f000 f85c 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002db8:	201b      	movs	r0, #27
 8002dba:	f000 f859 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002dbe:	2004      	movs	r0, #4
 8002dc0:	f000 f856 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002dc4:	2011      	movs	r0, #17
 8002dc6:	f000 f853 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002dca:	2007      	movs	r0, #7
 8002dcc:	f000 f850 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002dd0:	2031      	movs	r0, #49	@ 0x31
 8002dd2:	f000 f84d 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002dd6:	2033      	movs	r0, #51	@ 0x33
 8002dd8:	f000 f84a 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002ddc:	2042      	movs	r0, #66	@ 0x42
 8002dde:	f000 f847 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002de2:	2005      	movs	r0, #5
 8002de4:	f000 f844 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002de8:	200c      	movs	r0, #12
 8002dea:	f000 f841 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002dee:	200a      	movs	r0, #10
 8002df0:	f000 f83e 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002df4:	2028      	movs	r0, #40	@ 0x28
 8002df6:	f000 f83b 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002dfa:	202f      	movs	r0, #47	@ 0x2f
 8002dfc:	f000 f838 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002e00:	200f      	movs	r0, #15
 8002e02:	f000 f835 	bl	8002e70 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002e06:	2011      	movs	r0, #17
 8002e08:	f000 f825 	bl	8002e56 <ili9341_WriteReg>
  LCD_Delay(200);
 8002e0c:	20c8      	movs	r0, #200	@ 0xc8
 8002e0e:	f000 fe69 	bl	8003ae4 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002e12:	2029      	movs	r0, #41	@ 0x29
 8002e14:	f000 f81f 	bl	8002e56 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002e18:	202c      	movs	r0, #44	@ 0x2c
 8002e1a:	f000 f81c 	bl	8002e56 <ili9341_WriteReg>
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002e26:	f000 fd6f 	bl	8003908 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002e2a:	2103      	movs	r1, #3
 8002e2c:	20d3      	movs	r0, #211	@ 0xd3
 8002e2e:	f000 f82c 	bl	8002e8a <ili9341_ReadData>
 8002e32:	4603      	mov	r3, r0
 8002e34:	b29b      	uxth	r3, r3
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002e3e:	2029      	movs	r0, #41	@ 0x29
 8002e40:	f000 f809 	bl	8002e56 <ili9341_WriteReg>
}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002e4c:	2028      	movs	r0, #40	@ 0x28
 8002e4e:	f000 f802 	bl	8002e56 <ili9341_WriteReg>
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fdea 	bl	8003a3c <LCD_IO_WriteReg>
}
 8002e68:	bf00      	nop
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fdbb 	bl	80039f8 <LCD_IO_WriteData>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	460a      	mov	r2, r1
 8002e94:	80fb      	strh	r3, [r7, #6]
 8002e96:	4613      	mov	r3, r2
 8002e98:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002e9a:	797a      	ldrb	r2, [r7, #5]
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fded 	bl	8003a80 <LCD_IO_ReadData>
 8002ea6:	4603      	mov	r3, r0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002eb4:	23f0      	movs	r3, #240	@ 0xf0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002ec4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fa59 	bl	8003398 <stmpe811_GetInstance>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	2bff      	cmp	r3, #255	@ 0xff
 8002eee:	d112      	bne.n	8002f16 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f000 fa51 	bl	8003398 <stmpe811_GetInstance>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8002efa:	7bbb      	ldrb	r3, [r7, #14]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d80a      	bhi.n	8002f16 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002f00:	7bbb      	ldrb	r3, [r7, #14]
 8002f02:	88fa      	ldrh	r2, [r7, #6]
 8002f04:	b2d1      	uxtb	r1, r2
 8002f06:	4a06      	ldr	r2, [pc, #24]	@ (8002f20 <stmpe811_Init+0x4c>)
 8002f08:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8002f0a:	f000 fdf6 	bl	8003afa <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 f807 	bl	8002f24 <stmpe811_Reset>
    }
  }
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000898 	.word	0x20000898

08002f24 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2202      	movs	r2, #2
 8002f34:	2103      	movs	r1, #3
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 fdeb 	bl	8003b12 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002f3c:	200a      	movs	r0, #10
 8002f3e:	f000 fe24 	bl	8003b8a <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2200      	movs	r2, #0
 8002f48:	2103      	movs	r1, #3
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fde1 	bl	8003b12 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002f50:	2002      	movs	r0, #2
 8002f52:	f000 fe1a 	bl	8003b8a <IOE_Delay>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002f5e:	b590      	push	{r4, r7, lr}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	4603      	mov	r3, r0
 8002f66:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002f68:	f000 fdc7 	bl	8003afa <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2100      	movs	r1, #0
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fde0 	bl	8003b38 <IOE_Read>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	b21b      	sxth	r3, r3
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2101      	movs	r1, #1
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fdd6 	bl	8003b38 <IOE_Read>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002f90:	4323      	orrs	r3, r4
 8002f92:	b21b      	sxth	r3, r3
 8002f94:	b29b      	uxth	r3, r3
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd90      	pop	{r4, r7, pc}

08002f9e <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2109      	movs	r1, #9
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fdc0 	bl	8003b38 <IOE_Read>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	7bfa      	ldrb	r2, [r7, #15]
 8002fca:	2109      	movs	r1, #9
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 fda0 	bl	8003b12 <IOE_Write>
}
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2109      	movs	r1, #9
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fda2 	bl	8003b38 <IOE_Read>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	f023 0301 	bic.w	r3, r3, #1
 8002ffe:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	7bfa      	ldrb	r2, [r7, #15]
 8003006:	2109      	movs	r1, #9
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fd82 	bl	8003b12 <IOE_Write>
    
}
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	4603      	mov	r3, r0
 800301e:	460a      	mov	r2, r1
 8003020:	80fb      	strh	r3, [r7, #6]
 8003022:	4613      	mov	r3, r2
 8003024:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	210a      	movs	r1, #10
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fd81 	bl	8003b38 <IOE_Read>
 8003036:	4603      	mov	r3, r0
 8003038:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 800303a:	7bfa      	ldrb	r2, [r7, #15]
 800303c:	797b      	ldrb	r3, [r7, #5]
 800303e:	4313      	orrs	r3, r2
 8003040:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	7bfa      	ldrb	r2, [r7, #15]
 8003048:	210a      	movs	r1, #10
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fd61 	bl	8003b12 <IOE_Write>
}
 8003050:	bf00      	nop
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	460a      	mov	r2, r1
 8003062:	80fb      	strh	r3, [r7, #6]
 8003064:	4613      	mov	r3, r2
 8003066:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	210a      	movs	r1, #10
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fd60 	bl	8003b38 <IOE_Read>
 8003078:	4603      	mov	r3, r0
 800307a:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 800307c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003080:	43db      	mvns	r3, r3
 8003082:	b25a      	sxtb	r2, r3
 8003084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003088:	4013      	ands	r3, r2
 800308a:	b25b      	sxtb	r3, r3
 800308c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	210a      	movs	r1, #10
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fd3b 	bl	8003b12 <IOE_Write>
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	460a      	mov	r2, r1
 80030ae:	80fb      	strh	r3, [r7, #6]
 80030b0:	4613      	mov	r3, r2
 80030b2:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	210b      	movs	r1, #11
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fd3c 	bl	8003b38 <IOE_Read>
 80030c0:	4603      	mov	r3, r0
 80030c2:	461a      	mov	r2, r3
 80030c4:	797b      	ldrb	r3, [r7, #5]
 80030c6:	4013      	ands	r3, r2
 80030c8:	b2db      	uxtb	r3, r3
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	4603      	mov	r3, r0
 80030da:	460a      	mov	r2, r1
 80030dc:	80fb      	strh	r3, [r7, #6]
 80030de:	4613      	mov	r3, r2
 80030e0:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	797a      	ldrb	r2, [r7, #5]
 80030e8:	210b      	movs	r1, #11
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 fd11 	bl	8003b12 <IOE_Write>
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	6039      	str	r1, [r7, #0]
 8003102:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2117      	movs	r1, #23
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fd12 	bl	8003b38 <IOE_Read>
 8003114:	4603      	mov	r3, r0
 8003116:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	b25b      	sxtb	r3, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	b25a      	sxtb	r2, r3
 8003120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003124:	4013      	ands	r3, r2
 8003126:	b25b      	sxtb	r3, r3
 8003128:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	7bfa      	ldrb	r2, [r7, #15]
 8003130:	2117      	movs	r1, #23
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fced 	bl	8003b12 <IOE_Write>
}
 8003138:	bf00      	nop
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2104      	movs	r1, #4
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fcf1 	bl	8003b38 <IOE_Read>
 8003156:	4603      	mov	r3, r0
 8003158:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	f023 0304 	bic.w	r3, r3, #4
 8003160:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	2104      	movs	r1, #4
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fcd1 	bl	8003b12 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8003170:	88fb      	ldrh	r3, [r7, #6]
 8003172:	21f0      	movs	r1, #240	@ 0xf0
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ffbf 	bl	80030f8 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	f023 0303 	bic.w	r3, r3, #3
 8003180:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	7bfa      	ldrb	r2, [r7, #15]
 8003188:	2104      	movs	r1, #4
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fcc1 	bl	8003b12 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8003190:	88fb      	ldrh	r3, [r7, #6]
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2249      	movs	r2, #73	@ 0x49
 8003196:	2120      	movs	r1, #32
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fcba 	bl	8003b12 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 800319e:	2002      	movs	r0, #2
 80031a0:	f000 fcf3 	bl	8003b8a <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2201      	movs	r2, #1
 80031aa:	2121      	movs	r1, #33	@ 0x21
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fcb0 	bl	8003b12 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	229a      	movs	r2, #154	@ 0x9a
 80031b8:	2141      	movs	r1, #65	@ 0x41
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fca9 	bl	8003b12 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2201      	movs	r2, #1
 80031c6:	214a      	movs	r1, #74	@ 0x4a
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 fca2 	bl	8003b12 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2201      	movs	r2, #1
 80031d4:	214b      	movs	r1, #75	@ 0x4b
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fc9b 	bl	8003b12 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2200      	movs	r2, #0
 80031e2:	214b      	movs	r1, #75	@ 0x4b
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 fc94 	bl	8003b12 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2201      	movs	r2, #1
 80031f0:	2156      	movs	r1, #86	@ 0x56
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fc8d 	bl	8003b12 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 80031f8:	88fb      	ldrh	r3, [r7, #6]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2201      	movs	r2, #1
 80031fe:	2158      	movs	r1, #88	@ 0x58
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fc86 	bl	8003b12 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2201      	movs	r2, #1
 800320c:	2140      	movs	r1, #64	@ 0x40
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fc7f 	bl	8003b12 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8003214:	88fb      	ldrh	r3, [r7, #6]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	22ff      	movs	r2, #255	@ 0xff
 800321a:	210b      	movs	r1, #11
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fc78 	bl	8003b12 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8003222:	2002      	movs	r0, #2
 8003224:	f000 fcb1 	bl	8003b8a <IOE_Delay>
}
 8003228:	bf00      	nop
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2140      	movs	r1, #64	@ 0x40
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fc77 	bl	8003b38 <IOE_Read>
 800324a:	4603      	mov	r3, r0
 800324c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003250:	2b80      	cmp	r3, #128	@ 0x80
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 800325c:	7bbb      	ldrb	r3, [r7, #14]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	214c      	movs	r1, #76	@ 0x4c
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fc65 	bl	8003b38 <IOE_Read>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d010      	beq.n	8003296 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8003274:	2301      	movs	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
 8003278:	e00d      	b.n	8003296 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2201      	movs	r2, #1
 8003280:	214b      	movs	r1, #75	@ 0x4b
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fc45 	bl	8003b12 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2200      	movs	r2, #0
 800328e:	214b      	movs	r1, #75	@ 0x4b
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fc3e 	bl	8003b12 <IOE_Write>
  }
  
  return ret;
 8003296:	7bfb      	ldrb	r3, [r7, #15]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80032ae:	89fb      	ldrh	r3, [r7, #14]
 80032b0:	b2d8      	uxtb	r0, r3
 80032b2:	f107 0210 	add.w	r2, r7, #16
 80032b6:	2304      	movs	r3, #4
 80032b8:	21d7      	movs	r1, #215	@ 0xd7
 80032ba:	f000 fc50 	bl	8003b5e <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80032be:	7c3b      	ldrb	r3, [r7, #16]
 80032c0:	061a      	lsls	r2, r3, #24
 80032c2:	7c7b      	ldrb	r3, [r7, #17]
 80032c4:	041b      	lsls	r3, r3, #16
 80032c6:	431a      	orrs	r2, r3
 80032c8:	7cbb      	ldrb	r3, [r7, #18]
 80032ca:	021b      	lsls	r3, r3, #8
 80032cc:	4313      	orrs	r3, r2
 80032ce:	7cfa      	ldrb	r2, [r7, #19]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	0d1b      	lsrs	r3, r3, #20
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80032ee:	89fb      	ldrh	r3, [r7, #14]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2201      	movs	r2, #1
 80032f4:	214b      	movs	r1, #75	@ 0x4b
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fc0b 	bl	8003b12 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80032fc:	89fb      	ldrh	r3, [r7, #14]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2200      	movs	r2, #0
 8003302:	214b      	movs	r1, #75	@ 0x4b
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fc04 	bl	8003b12 <IOE_Write>
}
 800330a:	bf00      	nop
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	4603      	mov	r3, r0
 800331a:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800331c:	f000 fbf3 	bl	8003b06 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	211f      	movs	r1, #31
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff fe76 	bl	8003016 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fe36 	bl	8002f9e <stmpe811_EnableGlobalIT>
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	4603      	mov	r3, r0
 8003342:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff fe47 	bl	8002fda <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	211f      	movs	r1, #31
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff fe81 	bl	8003058 <stmpe811_DisableITSource>
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	4603      	mov	r3, r0
 8003366:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	211f      	movs	r1, #31
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff fe99 	bl	80030a4 <stmpe811_ReadGITStatus>
 8003372:	4603      	mov	r3, r0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	211f      	movs	r1, #31
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fea1 	bl	80030d2 <stmpe811_ClearGlobalIT>
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80033a6:	2300      	movs	r3, #0
 80033a8:	73fb      	strb	r3, [r7, #15]
 80033aa:	e00b      	b.n	80033c4 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	4a0a      	ldr	r2, [pc, #40]	@ (80033d8 <stmpe811_GetInstance+0x40>)
 80033b0:	5cd3      	ldrb	r3, [r2, r3]
 80033b2:	461a      	mov	r2, r3
 80033b4:	88fb      	ldrh	r3, [r7, #6]
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d101      	bne.n	80033be <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	e006      	b.n	80033cc <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	3301      	adds	r3, #1
 80033c2:	73fb      	strb	r3, [r7, #15]
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d9f0      	bls.n	80033ac <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80033ca:	23ff      	movs	r3, #255	@ 0xff
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	20000898 	.word	0x20000898

080033dc <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08a      	sub	sp, #40	@ 0x28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10e      	bne.n	800340a <BSP_LED_Init+0x2e>
 80033ec:	2300      	movs	r3, #0
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	4b21      	ldr	r3, [pc, #132]	@ (8003478 <BSP_LED_Init+0x9c>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f4:	4a20      	ldr	r2, [pc, #128]	@ (8003478 <BSP_LED_Init+0x9c>)
 80033f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80033fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003478 <BSP_LED_Init+0x9c>)
 80033fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	e010      	b.n	800342c <BSP_LED_Init+0x50>
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d10d      	bne.n	800342c <BSP_LED_Init+0x50>
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	4b18      	ldr	r3, [pc, #96]	@ (8003478 <BSP_LED_Init+0x9c>)
 8003416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003418:	4a17      	ldr	r2, [pc, #92]	@ (8003478 <BSP_LED_Init+0x9c>)
 800341a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800341e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003420:	4b15      	ldr	r3, [pc, #84]	@ (8003478 <BSP_LED_Init+0x9c>)
 8003422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	4a13      	ldr	r2, [pc, #76]	@ (800347c <BSP_LED_Init+0xa0>)
 8003430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003436:	2301      	movs	r3, #1
 8003438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800343a:	2301      	movs	r3, #1
 800343c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800343e:	2302      	movs	r3, #2
 8003440:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	4a0e      	ldr	r2, [pc, #56]	@ (8003480 <BSP_LED_Init+0xa4>)
 8003446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344a:	f107 0214 	add.w	r2, r7, #20
 800344e:	4611      	mov	r1, r2
 8003450:	4618      	mov	r0, r3
 8003452:	f002 fa57 	bl	8005904 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	4a09      	ldr	r2, [pc, #36]	@ (8003480 <BSP_LED_Init+0xa4>)
 800345a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	4a06      	ldr	r2, [pc, #24]	@ (800347c <BSP_LED_Init+0xa0>)
 8003462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003466:	2200      	movs	r2, #0
 8003468:	4619      	mov	r1, r3
 800346a:	f002 fbf7 	bl	8005c5c <HAL_GPIO_WritePin>
}
 800346e:	bf00      	nop
 8003470:	3728      	adds	r7, #40	@ 0x28
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40023800 	.word	0x40023800
 800347c:	0800d734 	.word	0x0800d734
 8003480:	20000164 	.word	0x20000164

08003484 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	4a07      	ldr	r2, [pc, #28]	@ (80034b0 <BSP_LED_Toggle+0x2c>)
 8003492:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	4906      	ldr	r1, [pc, #24]	@ (80034b4 <BSP_LED_Toggle+0x30>)
 800349a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800349e:	4619      	mov	r1, r3
 80034a0:	4610      	mov	r0, r2
 80034a2:	f002 fbf4 	bl	8005c8e <HAL_GPIO_TogglePin>
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20000164 	.word	0x20000164
 80034b4:	0800d734 	.word	0x0800d734

080034b8 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	@ 0x28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a33      	ldr	r2, [pc, #204]	@ (8003594 <I2Cx_MspInit+0xdc>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d15f      	bne.n	800358a <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	4b32      	ldr	r3, [pc, #200]	@ (8003598 <I2Cx_MspInit+0xe0>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	4a31      	ldr	r2, [pc, #196]	@ (8003598 <I2Cx_MspInit+0xe0>)
 80034d4:	f043 0304 	orr.w	r3, r3, #4
 80034d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034da:	4b2f      	ldr	r3, [pc, #188]	@ (8003598 <I2Cx_MspInit+0xe0>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003598 <I2Cx_MspInit+0xe0>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003598 <I2Cx_MspInit+0xe0>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f6:	4b28      	ldr	r3, [pc, #160]	@ (8003598 <I2Cx_MspInit+0xe0>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8003502:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8003508:	2312      	movs	r3, #18
 800350a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8003510:	2302      	movs	r3, #2
 8003512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003514:	2304      	movs	r3, #4
 8003516:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	4619      	mov	r1, r3
 800351e:	481f      	ldr	r0, [pc, #124]	@ (800359c <I2Cx_MspInit+0xe4>)
 8003520:	f002 f9f0 	bl	8005904 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8003524:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003528:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800352a:	f107 0314 	add.w	r3, r7, #20
 800352e:	4619      	mov	r1, r3
 8003530:	481b      	ldr	r0, [pc, #108]	@ (80035a0 <I2Cx_MspInit+0xe8>)
 8003532:	f002 f9e7 	bl	8005904 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	4b17      	ldr	r3, [pc, #92]	@ (8003598 <I2Cx_MspInit+0xe0>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353e:	4a16      	ldr	r2, [pc, #88]	@ (8003598 <I2Cx_MspInit+0xe0>)
 8003540:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003544:	6413      	str	r3, [r2, #64]	@ 0x40
 8003546:	4b14      	ldr	r3, [pc, #80]	@ (8003598 <I2Cx_MspInit+0xe0>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8003552:	4b11      	ldr	r3, [pc, #68]	@ (8003598 <I2Cx_MspInit+0xe0>)
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	4a10      	ldr	r2, [pc, #64]	@ (8003598 <I2Cx_MspInit+0xe0>)
 8003558:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800355c:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 800355e:	4b0e      	ldr	r3, [pc, #56]	@ (8003598 <I2Cx_MspInit+0xe0>)
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	4a0d      	ldr	r2, [pc, #52]	@ (8003598 <I2Cx_MspInit+0xe0>)
 8003564:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003568:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800356a:	2200      	movs	r2, #0
 800356c:	210f      	movs	r1, #15
 800356e:	2048      	movs	r0, #72	@ 0x48
 8003570:	f001 fd3d 	bl	8004fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003574:	2048      	movs	r0, #72	@ 0x48
 8003576:	f001 fd56 	bl	8005026 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800357a:	2200      	movs	r2, #0
 800357c:	210f      	movs	r1, #15
 800357e:	2049      	movs	r0, #73	@ 0x49
 8003580:	f001 fd35 	bl	8004fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8003584:	2049      	movs	r0, #73	@ 0x49
 8003586:	f001 fd4e 	bl	8005026 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 800358a:	bf00      	nop
 800358c:	3728      	adds	r7, #40	@ 0x28
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40005c00 	.word	0x40005c00
 8003598:	40023800 	.word	0x40023800
 800359c:	40020000 	.word	0x40020000
 80035a0:	40020800 	.word	0x40020800

080035a4 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80035a8:	4814      	ldr	r0, [pc, #80]	@ (80035fc <I2Cx_Init+0x58>)
 80035aa:	f003 f833 	bl	8006614 <HAL_I2C_GetState>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d121      	bne.n	80035f8 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80035b4:	4b11      	ldr	r3, [pc, #68]	@ (80035fc <I2Cx_Init+0x58>)
 80035b6:	4a12      	ldr	r2, [pc, #72]	@ (8003600 <I2Cx_Init+0x5c>)
 80035b8:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80035ba:	4b10      	ldr	r3, [pc, #64]	@ (80035fc <I2Cx_Init+0x58>)
 80035bc:	4a11      	ldr	r2, [pc, #68]	@ (8003604 <I2Cx_Init+0x60>)
 80035be:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80035c0:	4b0e      	ldr	r3, [pc, #56]	@ (80035fc <I2Cx_Init+0x58>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 80035c6:	4b0d      	ldr	r3, [pc, #52]	@ (80035fc <I2Cx_Init+0x58>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80035cc:	4b0b      	ldr	r3, [pc, #44]	@ (80035fc <I2Cx_Init+0x58>)
 80035ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80035d2:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 80035d4:	4b09      	ldr	r3, [pc, #36]	@ (80035fc <I2Cx_Init+0x58>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 80035da:	4b08      	ldr	r3, [pc, #32]	@ (80035fc <I2Cx_Init+0x58>)
 80035dc:	2200      	movs	r2, #0
 80035de:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 80035e0:	4b06      	ldr	r3, [pc, #24]	@ (80035fc <I2Cx_Init+0x58>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 80035e6:	4b05      	ldr	r3, [pc, #20]	@ (80035fc <I2Cx_Init+0x58>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80035ec:	4803      	ldr	r0, [pc, #12]	@ (80035fc <I2Cx_Init+0x58>)
 80035ee:	f7ff ff63 	bl	80034b8 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80035f2:	4802      	ldr	r0, [pc, #8]	@ (80035fc <I2Cx_Init+0x58>)
 80035f4:	f002 fb66 	bl	8005cc4 <HAL_I2C_Init>
  }
}
 80035f8:	bf00      	nop
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	2000089c 	.word	0x2000089c
 8003600:	40005c00 	.word	0x40005c00
 8003604:	000186a0 	.word	0x000186a0

08003608 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	603b      	str	r3, [r7, #0]
 8003612:	4b13      	ldr	r3, [pc, #76]	@ (8003660 <I2Cx_ITConfig+0x58>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003616:	4a12      	ldr	r2, [pc, #72]	@ (8003660 <I2Cx_ITConfig+0x58>)
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	6313      	str	r3, [r2, #48]	@ 0x30
 800361e:	4b10      	ldr	r3, [pc, #64]	@ (8003660 <I2Cx_ITConfig+0x58>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 800362a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800362e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8003630:	2301      	movs	r3, #1
 8003632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003634:	2300      	movs	r3, #0
 8003636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8003638:	4b0a      	ldr	r3, [pc, #40]	@ (8003664 <I2Cx_ITConfig+0x5c>)
 800363a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 800363c:	1d3b      	adds	r3, r7, #4
 800363e:	4619      	mov	r1, r3
 8003640:	4809      	ldr	r0, [pc, #36]	@ (8003668 <I2Cx_ITConfig+0x60>)
 8003642:	f002 f95f 	bl	8005904 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8003646:	2200      	movs	r2, #0
 8003648:	210f      	movs	r1, #15
 800364a:	2028      	movs	r0, #40	@ 0x28
 800364c:	f001 fccf 	bl	8004fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8003650:	2028      	movs	r0, #40	@ 0x28
 8003652:	f001 fce8 	bl	8005026 <HAL_NVIC_EnableIRQ>
}
 8003656:	bf00      	nop
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800
 8003664:	10210000 	.word	0x10210000
 8003668:	40020000 	.word	0x40020000

0800366c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af04      	add	r7, sp, #16
 8003672:	4603      	mov	r3, r0
 8003674:	71fb      	strb	r3, [r7, #7]
 8003676:	460b      	mov	r3, r1
 8003678:	71bb      	strb	r3, [r7, #6]
 800367a:	4613      	mov	r3, r2
 800367c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	b299      	uxth	r1, r3
 8003686:	79bb      	ldrb	r3, [r7, #6]
 8003688:	b29a      	uxth	r2, r3
 800368a:	4b0b      	ldr	r3, [pc, #44]	@ (80036b8 <I2Cx_WriteData+0x4c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	9302      	str	r3, [sp, #8]
 8003690:	2301      	movs	r3, #1
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	1d7b      	adds	r3, r7, #5
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	2301      	movs	r3, #1
 800369a:	4808      	ldr	r0, [pc, #32]	@ (80036bc <I2Cx_WriteData+0x50>)
 800369c:	f002 fc9a 	bl	8005fd4 <HAL_I2C_Mem_Write>
 80036a0:	4603      	mov	r3, r0
 80036a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80036aa:	f000 f863 	bl	8003774 <I2Cx_Error>
  }        
}
 80036ae:	bf00      	nop
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	2000016c 	.word	0x2000016c
 80036bc:	2000089c 	.word	0x2000089c

080036c0 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af04      	add	r7, sp, #16
 80036c6:	4603      	mov	r3, r0
 80036c8:	460a      	mov	r2, r1
 80036ca:	71fb      	strb	r3, [r7, #7]
 80036cc:	4613      	mov	r3, r2
 80036ce:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	b299      	uxth	r1, r3
 80036dc:	79bb      	ldrb	r3, [r7, #6]
 80036de:	b29a      	uxth	r2, r3
 80036e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003710 <I2Cx_ReadData+0x50>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	9302      	str	r3, [sp, #8]
 80036e6:	2301      	movs	r3, #1
 80036e8:	9301      	str	r3, [sp, #4]
 80036ea:	f107 030e 	add.w	r3, r7, #14
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	2301      	movs	r3, #1
 80036f2:	4808      	ldr	r0, [pc, #32]	@ (8003714 <I2Cx_ReadData+0x54>)
 80036f4:	f002 fd68 	bl	80061c8 <HAL_I2C_Mem_Read>
 80036f8:	4603      	mov	r3, r0
 80036fa:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003702:	f000 f837 	bl	8003774 <I2Cx_Error>
  
  }
  return value;
 8003706:	7bbb      	ldrb	r3, [r7, #14]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	2000016c 	.word	0x2000016c
 8003714:	2000089c 	.word	0x2000089c

08003718 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af04      	add	r7, sp, #16
 800371e:	603a      	str	r2, [r7, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	4603      	mov	r3, r0
 8003724:	71fb      	strb	r3, [r7, #7]
 8003726:	460b      	mov	r3, r1
 8003728:	71bb      	strb	r3, [r7, #6]
 800372a:	4613      	mov	r3, r2
 800372c:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	b299      	uxth	r1, r3
 8003736:	79bb      	ldrb	r3, [r7, #6]
 8003738:	b29a      	uxth	r2, r3
 800373a:	4b0c      	ldr	r3, [pc, #48]	@ (800376c <I2Cx_ReadBuffer+0x54>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	9302      	str	r3, [sp, #8]
 8003740:	88bb      	ldrh	r3, [r7, #4]
 8003742:	9301      	str	r3, [sp, #4]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	2301      	movs	r3, #1
 800374a:	4809      	ldr	r0, [pc, #36]	@ (8003770 <I2Cx_ReadBuffer+0x58>)
 800374c:	f002 fd3c 	bl	80061c8 <HAL_I2C_Mem_Read>
 8003750:	4603      	mov	r3, r0
 8003752:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 800375a:	2300      	movs	r3, #0
 800375c:	e002      	b.n	8003764 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800375e:	f000 f809 	bl	8003774 <I2Cx_Error>

    return 1;
 8003762:	2301      	movs	r3, #1
  }
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	2000016c 	.word	0x2000016c
 8003770:	2000089c 	.word	0x2000089c

08003774 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003778:	4803      	ldr	r0, [pc, #12]	@ (8003788 <I2Cx_Error+0x14>)
 800377a:	f002 fbe7 	bl	8005f4c <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 800377e:	f7ff ff11 	bl	80035a4 <I2Cx_Init>
}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	2000089c 	.word	0x2000089c

0800378c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003790:	4819      	ldr	r0, [pc, #100]	@ (80037f8 <SPIx_Init+0x6c>)
 8003792:	f005 f9e0 	bl	8008b56 <HAL_SPI_GetState>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d12b      	bne.n	80037f4 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800379c:	4b16      	ldr	r3, [pc, #88]	@ (80037f8 <SPIx_Init+0x6c>)
 800379e:	4a17      	ldr	r2, [pc, #92]	@ (80037fc <SPIx_Init+0x70>)
 80037a0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80037a2:	4b15      	ldr	r3, [pc, #84]	@ (80037f8 <SPIx_Init+0x6c>)
 80037a4:	2218      	movs	r2, #24
 80037a6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80037a8:	4b13      	ldr	r3, [pc, #76]	@ (80037f8 <SPIx_Init+0x6c>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80037ae:	4b12      	ldr	r3, [pc, #72]	@ (80037f8 <SPIx_Init+0x6c>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80037b4:	4b10      	ldr	r3, [pc, #64]	@ (80037f8 <SPIx_Init+0x6c>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80037ba:	4b0f      	ldr	r3, [pc, #60]	@ (80037f8 <SPIx_Init+0x6c>)
 80037bc:	2200      	movs	r2, #0
 80037be:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80037c0:	4b0d      	ldr	r3, [pc, #52]	@ (80037f8 <SPIx_Init+0x6c>)
 80037c2:	2207      	movs	r2, #7
 80037c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80037c6:	4b0c      	ldr	r3, [pc, #48]	@ (80037f8 <SPIx_Init+0x6c>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80037cc:	4b0a      	ldr	r3, [pc, #40]	@ (80037f8 <SPIx_Init+0x6c>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80037d2:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <SPIx_Init+0x6c>)
 80037d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037d8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80037da:	4b07      	ldr	r3, [pc, #28]	@ (80037f8 <SPIx_Init+0x6c>)
 80037dc:	2200      	movs	r2, #0
 80037de:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80037e0:	4b05      	ldr	r3, [pc, #20]	@ (80037f8 <SPIx_Init+0x6c>)
 80037e2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80037e6:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80037e8:	4803      	ldr	r0, [pc, #12]	@ (80037f8 <SPIx_Init+0x6c>)
 80037ea:	f000 f853 	bl	8003894 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80037ee:	4802      	ldr	r0, [pc, #8]	@ (80037f8 <SPIx_Init+0x6c>)
 80037f0:	f004 fc27 	bl	8008042 <HAL_SPI_Init>
  } 
}
 80037f4:	bf00      	nop
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	200008f0 	.word	0x200008f0
 80037fc:	40015000 	.word	0x40015000

08003800 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	b29a      	uxth	r2, r3
 8003812:	4b09      	ldr	r3, [pc, #36]	@ (8003838 <SPIx_Read+0x38>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f107 0108 	add.w	r1, r7, #8
 800381a:	4808      	ldr	r0, [pc, #32]	@ (800383c <SPIx_Read+0x3c>)
 800381c:	f004 fe0e 	bl	800843c <HAL_SPI_Receive>
 8003820:	4603      	mov	r3, r0
 8003822:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800382a:	f000 f827 	bl	800387c <SPIx_Error>
  }
  
  return readvalue;
 800382e:	68bb      	ldr	r3, [r7, #8]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	20000170 	.word	0x20000170
 800383c:	200008f0 	.word	0x200008f0

08003840 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800384e:	4b09      	ldr	r3, [pc, #36]	@ (8003874 <SPIx_Write+0x34>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	1db9      	adds	r1, r7, #6
 8003854:	2201      	movs	r2, #1
 8003856:	4808      	ldr	r0, [pc, #32]	@ (8003878 <SPIx_Write+0x38>)
 8003858:	f004 fc9a 	bl	8008190 <HAL_SPI_Transmit>
 800385c:	4603      	mov	r3, r0
 800385e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003866:	f000 f809 	bl	800387c <SPIx_Error>
  }
}
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000170 	.word	0x20000170
 8003878:	200008f0 	.word	0x200008f0

0800387c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003880:	4803      	ldr	r0, [pc, #12]	@ (8003890 <SPIx_Error+0x14>)
 8003882:	f004 fc49 	bl	8008118 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003886:	f7ff ff81 	bl	800378c <SPIx_Init>
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	200008f0 	.word	0x200008f0

08003894 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	@ 0x28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800389c:	2300      	movs	r3, #0
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	4b17      	ldr	r3, [pc, #92]	@ (8003900 <SPIx_MspInit+0x6c>)
 80038a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a4:	4a16      	ldr	r2, [pc, #88]	@ (8003900 <SPIx_MspInit+0x6c>)
 80038a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ac:	4b14      	ldr	r3, [pc, #80]	@ (8003900 <SPIx_MspInit+0x6c>)
 80038ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	4b10      	ldr	r3, [pc, #64]	@ (8003900 <SPIx_MspInit+0x6c>)
 80038be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003900 <SPIx_MspInit+0x6c>)
 80038c2:	f043 0320 	orr.w	r3, r3, #32
 80038c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80038c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003900 <SPIx_MspInit+0x6c>)
 80038ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80038d4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80038d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80038da:	2302      	movs	r3, #2
 80038dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80038de:	2302      	movs	r3, #2
 80038e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80038e2:	2301      	movs	r3, #1
 80038e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80038e6:	2305      	movs	r3, #5
 80038e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80038ea:	f107 0314 	add.w	r3, r7, #20
 80038ee:	4619      	mov	r1, r3
 80038f0:	4804      	ldr	r0, [pc, #16]	@ (8003904 <SPIx_MspInit+0x70>)
 80038f2:	f002 f807 	bl	8005904 <HAL_GPIO_Init>
}
 80038f6:	bf00      	nop
 80038f8:	3728      	adds	r7, #40	@ 0x28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800
 8003904:	40021400 	.word	0x40021400

08003908 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800390e:	4b36      	ldr	r3, [pc, #216]	@ (80039e8 <LCD_IO_Init+0xe0>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d164      	bne.n	80039e0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8003916:	4b34      	ldr	r3, [pc, #208]	@ (80039e8 <LCD_IO_Init+0xe0>)
 8003918:	2201      	movs	r2, #1
 800391a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800391c:	2300      	movs	r3, #0
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	4b32      	ldr	r3, [pc, #200]	@ (80039ec <LCD_IO_Init+0xe4>)
 8003922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003924:	4a31      	ldr	r2, [pc, #196]	@ (80039ec <LCD_IO_Init+0xe4>)
 8003926:	f043 0308 	orr.w	r3, r3, #8
 800392a:	6313      	str	r3, [r2, #48]	@ 0x30
 800392c:	4b2f      	ldr	r3, [pc, #188]	@ (80039ec <LCD_IO_Init+0xe4>)
 800392e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003938:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800393c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800393e:	2301      	movs	r3, #1
 8003940:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003946:	2302      	movs	r3, #2
 8003948:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800394a:	f107 030c 	add.w	r3, r7, #12
 800394e:	4619      	mov	r1, r3
 8003950:	4827      	ldr	r0, [pc, #156]	@ (80039f0 <LCD_IO_Init+0xe8>)
 8003952:	f001 ffd7 	bl	8005904 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	4b24      	ldr	r3, [pc, #144]	@ (80039ec <LCD_IO_Init+0xe4>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	4a23      	ldr	r2, [pc, #140]	@ (80039ec <LCD_IO_Init+0xe4>)
 8003960:	f043 0308 	orr.w	r3, r3, #8
 8003964:	6313      	str	r3, [r2, #48]	@ 0x30
 8003966:	4b21      	ldr	r3, [pc, #132]	@ (80039ec <LCD_IO_Init+0xe4>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	607b      	str	r3, [r7, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003972:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003976:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003978:	2301      	movs	r3, #1
 800397a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003980:	2302      	movs	r3, #2
 8003982:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003984:	f107 030c 	add.w	r3, r7, #12
 8003988:	4619      	mov	r1, r3
 800398a:	4819      	ldr	r0, [pc, #100]	@ (80039f0 <LCD_IO_Init+0xe8>)
 800398c:	f001 ffba 	bl	8005904 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003990:	2300      	movs	r3, #0
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	4b15      	ldr	r3, [pc, #84]	@ (80039ec <LCD_IO_Init+0xe4>)
 8003996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003998:	4a14      	ldr	r2, [pc, #80]	@ (80039ec <LCD_IO_Init+0xe4>)
 800399a:	f043 0304 	orr.w	r3, r3, #4
 800399e:	6313      	str	r3, [r2, #48]	@ 0x30
 80039a0:	4b12      	ldr	r3, [pc, #72]	@ (80039ec <LCD_IO_Init+0xe4>)
 80039a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	603b      	str	r3, [r7, #0]
 80039aa:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80039ac:	2304      	movs	r3, #4
 80039ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80039b0:	2301      	movs	r3, #1
 80039b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80039b8:	2302      	movs	r3, #2
 80039ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80039bc:	f107 030c 	add.w	r3, r7, #12
 80039c0:	4619      	mov	r1, r3
 80039c2:	480c      	ldr	r0, [pc, #48]	@ (80039f4 <LCD_IO_Init+0xec>)
 80039c4:	f001 ff9e 	bl	8005904 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80039c8:	2200      	movs	r2, #0
 80039ca:	2104      	movs	r1, #4
 80039cc:	4809      	ldr	r0, [pc, #36]	@ (80039f4 <LCD_IO_Init+0xec>)
 80039ce:	f002 f945 	bl	8005c5c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80039d2:	2201      	movs	r2, #1
 80039d4:	2104      	movs	r1, #4
 80039d6:	4807      	ldr	r0, [pc, #28]	@ (80039f4 <LCD_IO_Init+0xec>)
 80039d8:	f002 f940 	bl	8005c5c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80039dc:	f7ff fed6 	bl	800378c <SPIx_Init>
  }
}
 80039e0:	bf00      	nop
 80039e2:	3720      	adds	r7, #32
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20000948 	.word	0x20000948
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40020c00 	.word	0x40020c00
 80039f4:	40020800 	.word	0x40020800

080039f8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003a02:	2201      	movs	r2, #1
 8003a04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a08:	480a      	ldr	r0, [pc, #40]	@ (8003a34 <LCD_IO_WriteData+0x3c>)
 8003a0a:	f002 f927 	bl	8005c5c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2104      	movs	r1, #4
 8003a12:	4809      	ldr	r0, [pc, #36]	@ (8003a38 <LCD_IO_WriteData+0x40>)
 8003a14:	f002 f922 	bl	8005c5c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff ff10 	bl	8003840 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003a20:	2201      	movs	r2, #1
 8003a22:	2104      	movs	r1, #4
 8003a24:	4804      	ldr	r0, [pc, #16]	@ (8003a38 <LCD_IO_WriteData+0x40>)
 8003a26:	f002 f919 	bl	8005c5c <HAL_GPIO_WritePin>
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40020c00 	.word	0x40020c00
 8003a38:	40020800 	.word	0x40020800

08003a3c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003a46:	2200      	movs	r2, #0
 8003a48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a4c:	480a      	ldr	r0, [pc, #40]	@ (8003a78 <LCD_IO_WriteReg+0x3c>)
 8003a4e:	f002 f905 	bl	8005c5c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003a52:	2200      	movs	r2, #0
 8003a54:	2104      	movs	r1, #4
 8003a56:	4809      	ldr	r0, [pc, #36]	@ (8003a7c <LCD_IO_WriteReg+0x40>)
 8003a58:	f002 f900 	bl	8005c5c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff feed 	bl	8003840 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003a66:	2201      	movs	r2, #1
 8003a68:	2104      	movs	r1, #4
 8003a6a:	4804      	ldr	r0, [pc, #16]	@ (8003a7c <LCD_IO_WriteReg+0x40>)
 8003a6c:	f002 f8f6 	bl	8005c5c <HAL_GPIO_WritePin>
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40020c00 	.word	0x40020c00
 8003a7c:	40020800 	.word	0x40020800

08003a80 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	460a      	mov	r2, r1
 8003a8a:	80fb      	strh	r3, [r7, #6]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003a94:	2200      	movs	r2, #0
 8003a96:	2104      	movs	r1, #4
 8003a98:	4810      	ldr	r0, [pc, #64]	@ (8003adc <LCD_IO_ReadData+0x5c>)
 8003a9a:	f002 f8df 	bl	8005c5c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003aa4:	480e      	ldr	r0, [pc, #56]	@ (8003ae0 <LCD_IO_ReadData+0x60>)
 8003aa6:	f002 f8d9 	bl	8005c5c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8003aaa:	88fb      	ldrh	r3, [r7, #6]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fec7 	bl	8003840 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8003ab2:	797b      	ldrb	r3, [r7, #5]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff fea3 	bl	8003800 <SPIx_Read>
 8003aba:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003abc:	2201      	movs	r2, #1
 8003abe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003ac2:	4807      	ldr	r0, [pc, #28]	@ (8003ae0 <LCD_IO_ReadData+0x60>)
 8003ac4:	f002 f8ca 	bl	8005c5c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003ac8:	2201      	movs	r2, #1
 8003aca:	2104      	movs	r1, #4
 8003acc:	4803      	ldr	r0, [pc, #12]	@ (8003adc <LCD_IO_ReadData+0x5c>)
 8003ace:	f002 f8c5 	bl	8005c5c <HAL_GPIO_WritePin>
  
  return readvalue;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40020800 	.word	0x40020800
 8003ae0:	40020c00 	.word	0x40020c00

08003ae4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f001 f97f 	bl	8004df0 <HAL_Delay>
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8003afe:	f7ff fd51 	bl	80035a4 <I2Cx_Init>
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8003b0a:	f7ff fd7d 	bl	8003608 <I2Cx_ITConfig>
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	4603      	mov	r3, r0
 8003b1a:	71fb      	strb	r3, [r7, #7]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	71bb      	strb	r3, [r7, #6]
 8003b20:	4613      	mov	r3, r2
 8003b22:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8003b24:	797a      	ldrb	r2, [r7, #5]
 8003b26:	79b9      	ldrb	r1, [r7, #6]
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff fd9e 	bl	800366c <I2Cx_WriteData>
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	460a      	mov	r2, r1
 8003b42:	71fb      	strb	r3, [r7, #7]
 8003b44:	4613      	mov	r3, r2
 8003b46:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8003b48:	79ba      	ldrb	r2, [r7, #6]
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff fdb6 	bl	80036c0 <I2Cx_ReadData>
 8003b54:	4603      	mov	r3, r0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	603a      	str	r2, [r7, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	4603      	mov	r3, r0
 8003b6a:	71fb      	strb	r3, [r7, #7]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	71bb      	strb	r3, [r7, #6]
 8003b70:	4613      	mov	r3, r2
 8003b72:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8003b74:	88bb      	ldrh	r3, [r7, #4]
 8003b76:	79b9      	ldrb	r1, [r7, #6]
 8003b78:	79f8      	ldrb	r0, [r7, #7]
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	f7ff fdcc 	bl	8003718 <I2Cx_ReadBuffer>
 8003b80:	4603      	mov	r3, r0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f001 f92c 	bl	8004df0 <HAL_Delay>
}
 8003b98:	bf00      	nop
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <BSP_LCD_Init_Flipped>:
/**
 * @brief  Initializes the LCD for flipped operation.
 * LCD orientation is rotated by 180°.
 * @retval LCD state
 */
uint8_t BSP_LCD_Init_Flipped(void){
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
	flippedLcd = true;
 8003ba4:	4b03      	ldr	r3, [pc, #12]	@ (8003bb4 <BSP_LCD_Init_Flipped+0x14>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	701a      	strb	r2, [r3, #0]
	return BSP_LCD_Init();
 8003baa:	f000 f805 	bl	8003bb8 <BSP_LCD_Init>
 8003bae:	4603      	mov	r3, r0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20000a84 	.word	0x20000a84

08003bb8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8003bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8003c74 <BSP_LCD_Init+0xbc>)
 8003bbe:	4a2e      	ldr	r2, [pc, #184]	@ (8003c78 <BSP_LCD_Init+0xc0>)
 8003bc0:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8003bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8003c74 <BSP_LCD_Init+0xbc>)
 8003bc4:	2209      	movs	r2, #9
 8003bc6:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8003c74 <BSP_LCD_Init+0xbc>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8003bce:	4b29      	ldr	r3, [pc, #164]	@ (8003c74 <BSP_LCD_Init+0xbc>)
 8003bd0:	221d      	movs	r2, #29
 8003bd2:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003bd4:	4b27      	ldr	r3, [pc, #156]	@ (8003c74 <BSP_LCD_Init+0xbc>)
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8003bda:	4b26      	ldr	r3, [pc, #152]	@ (8003c74 <BSP_LCD_Init+0xbc>)
 8003bdc:	f240 120d 	movw	r2, #269	@ 0x10d
 8003be0:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8003be2:	4b24      	ldr	r3, [pc, #144]	@ (8003c74 <BSP_LCD_Init+0xbc>)
 8003be4:	f240 1243 	movw	r2, #323	@ 0x143
 8003be8:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8003bea:	4b22      	ldr	r3, [pc, #136]	@ (8003c74 <BSP_LCD_Init+0xbc>)
 8003bec:	f240 1217 	movw	r2, #279	@ 0x117
 8003bf0:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8003bf2:	4b20      	ldr	r3, [pc, #128]	@ (8003c74 <BSP_LCD_Init+0xbc>)
 8003bf4:	f240 1247 	movw	r2, #327	@ 0x147
 8003bf8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8003bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8003c74 <BSP_LCD_Init+0xbc>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8003c02:	4b1c      	ldr	r3, [pc, #112]	@ (8003c74 <BSP_LCD_Init+0xbc>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8003c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003c74 <BSP_LCD_Init+0xbc>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003c12:	4b1a      	ldr	r3, [pc, #104]	@ (8003c7c <BSP_LCD_Init+0xc4>)
 8003c14:	2208      	movs	r2, #8
 8003c16:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003c18:	4b18      	ldr	r3, [pc, #96]	@ (8003c7c <BSP_LCD_Init+0xc4>)
 8003c1a:	22c0      	movs	r2, #192	@ 0xc0
 8003c1c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003c1e:	4b17      	ldr	r3, [pc, #92]	@ (8003c7c <BSP_LCD_Init+0xc4>)
 8003c20:	2204      	movs	r2, #4
 8003c22:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003c24:	4b15      	ldr	r3, [pc, #84]	@ (8003c7c <BSP_LCD_Init+0xc4>)
 8003c26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c2a:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003c2c:	4813      	ldr	r0, [pc, #76]	@ (8003c7c <BSP_LCD_Init+0xc4>)
 8003c2e:	f003 ffbf 	bl	8007bb0 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003c32:	4b10      	ldr	r3, [pc, #64]	@ (8003c74 <BSP_LCD_Init+0xbc>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003c38:	4b0e      	ldr	r3, [pc, #56]	@ (8003c74 <BSP_LCD_Init+0xbc>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c74 <BSP_LCD_Init+0xbc>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003c44:	4b0b      	ldr	r3, [pc, #44]	@ (8003c74 <BSP_LCD_Init+0xbc>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8003c4a:	f000 fb7d 	bl	8004348 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003c4e:	4809      	ldr	r0, [pc, #36]	@ (8003c74 <BSP_LCD_Init+0xbc>)
 8003c50:	f003 f846 	bl	8006ce0 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003c54:	4b0a      	ldr	r3, [pc, #40]	@ (8003c80 <BSP_LCD_Init+0xc8>)
 8003c56:	4a0b      	ldr	r2, [pc, #44]	@ (8003c84 <BSP_LCD_Init+0xcc>)
 8003c58:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8003c5a:	4b09      	ldr	r3, [pc, #36]	@ (8003c80 <BSP_LCD_Init+0xc8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8003c62:	f000 fd85 	bl	8004770 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003c66:	4808      	ldr	r0, [pc, #32]	@ (8003c88 <BSP_LCD_Init+0xd0>)
 8003c68:	f000 f8ce 	bl	8003e08 <BSP_LCD_SetFont>

  return LCD_OK;
 8003c6c:	2300      	movs	r3, #0
}  
 8003c6e:	4618      	mov	r0, r3
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	2000094c 	.word	0x2000094c
 8003c78:	40016800 	.word	0x40016800
 8003c7c:	20000a34 	.word	0x20000a34
 8003c80:	20000a80 	.word	0x20000a80
 8003c84:	20000104 	.word	0x20000104
 8003c88:	20000174 	.word	0x20000174

08003c8c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003c90:	4b03      	ldr	r3, [pc, #12]	@ (8003ca0 <BSP_LCD_GetXSize+0x14>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c96:	4798      	blx	r3
 8003c98:	4603      	mov	r3, r0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000a80 	.word	0x20000a80

08003ca4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8003ca8:	4b03      	ldr	r3, [pc, #12]	@ (8003cb8 <BSP_LCD_GetYSize+0x14>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cae:	4798      	blx	r3
 8003cb0:	4603      	mov	r3, r0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000a80 	.word	0x20000a80

08003cbc <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b090      	sub	sp, #64	@ 0x40
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	6039      	str	r1, [r7, #0]
 8003cc6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003ccc:	f7ff ffde 	bl	8003c8c <BSP_LCD_GetXSize>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003cd8:	f7ff ffe4 	bl	8003ca4 <BSP_LCD_GetYSize>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8003ce8:	23ff      	movs	r3, #255	@ 0xff
 8003cea:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003d02:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003d08:	2307      	movs	r3, #7
 8003d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003d0c:	f7ff ffbe 	bl	8003c8c <BSP_LCD_GetXSize>
 8003d10:	4603      	mov	r3, r0
 8003d12:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003d14:	f7ff ffc6 	bl	8003ca4 <BSP_LCD_GetYSize>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003d1c:	88fa      	ldrh	r2, [r7, #6]
 8003d1e:	f107 030c 	add.w	r3, r7, #12
 8003d22:	4619      	mov	r1, r3
 8003d24:	4814      	ldr	r0, [pc, #80]	@ (8003d78 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003d26:	f003 f8b5 	bl	8006e94 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003d2a:	88fa      	ldrh	r2, [r7, #6]
 8003d2c:	4913      	ldr	r1, [pc, #76]	@ (8003d7c <BSP_LCD_LayerDefaultInit+0xc0>)
 8003d2e:	4613      	mov	r3, r2
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	3304      	adds	r3, #4
 8003d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d3e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003d40:	88fa      	ldrh	r2, [r7, #6]
 8003d42:	490e      	ldr	r1, [pc, #56]	@ (8003d7c <BSP_LCD_LayerDefaultInit+0xc0>)
 8003d44:	4613      	mov	r3, r2
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	3308      	adds	r3, #8
 8003d50:	4a0b      	ldr	r2, [pc, #44]	@ (8003d80 <BSP_LCD_LayerDefaultInit+0xc4>)
 8003d52:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003d54:	88fa      	ldrh	r2, [r7, #6]
 8003d56:	4909      	ldr	r1, [pc, #36]	@ (8003d7c <BSP_LCD_LayerDefaultInit+0xc0>)
 8003d58:	4613      	mov	r3, r2
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8003d66:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003d68:	4803      	ldr	r0, [pc, #12]	@ (8003d78 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003d6a:	f003 f8d1 	bl	8006f10 <HAL_LTDC_EnableDither>
}
 8003d6e:	bf00      	nop
 8003d70:	3740      	adds	r7, #64	@ 0x40
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	2000094c 	.word	0x2000094c
 8003d7c:	20000a68 	.word	0x20000a68
 8003d80:	20000174 	.word	0x20000174

08003d84 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003d8c:	4a04      	ldr	r2, [pc, #16]	@ (8003da0 <BSP_LCD_SelectLayer+0x1c>)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6013      	str	r3, [r2, #0]
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	20000a64 	.word	0x20000a64

08003da4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003dac:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <BSP_LCD_SetTextColor+0x28>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4907      	ldr	r1, [pc, #28]	@ (8003dd0 <BSP_LCD_SetTextColor+0x2c>)
 8003db2:	4613      	mov	r3, r2
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	4413      	add	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	440b      	add	r3, r1
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	601a      	str	r2, [r3, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	20000a64 	.word	0x20000a64
 8003dd0:	20000a68 	.word	0x20000a68

08003dd4 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003ddc:	4b08      	ldr	r3, [pc, #32]	@ (8003e00 <BSP_LCD_SetBackColor+0x2c>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4908      	ldr	r1, [pc, #32]	@ (8003e04 <BSP_LCD_SetBackColor+0x30>)
 8003de2:	4613      	mov	r3, r2
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	4413      	add	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	3304      	adds	r3, #4
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	601a      	str	r2, [r3, #0]
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	20000a64 	.word	0x20000a64
 8003e04:	20000a68 	.word	0x20000a68

08003e08 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003e10:	4b08      	ldr	r3, [pc, #32]	@ (8003e34 <BSP_LCD_SetFont+0x2c>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	4908      	ldr	r1, [pc, #32]	@ (8003e38 <BSP_LCD_SetFont+0x30>)
 8003e16:	4613      	mov	r3, r2
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	3308      	adds	r3, #8
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	601a      	str	r2, [r3, #0]
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	20000a64 	.word	0x20000a64
 8003e38:	20000a68 	.word	0x20000a68

08003e3c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003e44:	4b0f      	ldr	r3, [pc, #60]	@ (8003e84 <BSP_LCD_Clear+0x48>)
 8003e46:	681c      	ldr	r4, [r3, #0]
 8003e48:	4b0e      	ldr	r3, [pc, #56]	@ (8003e84 <BSP_LCD_Clear+0x48>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a0e      	ldr	r2, [pc, #56]	@ (8003e88 <BSP_LCD_Clear+0x4c>)
 8003e4e:	2134      	movs	r1, #52	@ 0x34
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	4413      	add	r3, r2
 8003e56:	335c      	adds	r3, #92	@ 0x5c
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	461e      	mov	r6, r3
 8003e5c:	f7ff ff16 	bl	8003c8c <BSP_LCD_GetXSize>
 8003e60:	4605      	mov	r5, r0
 8003e62:	f7ff ff1f 	bl	8003ca4 <BSP_LCD_GetYSize>
 8003e66:	4602      	mov	r2, r0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	9301      	str	r3, [sp, #4]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	4613      	mov	r3, r2
 8003e72:	462a      	mov	r2, r5
 8003e74:	4631      	mov	r1, r6
 8003e76:	4620      	mov	r0, r4
 8003e78:	f000 fc42 	bl	8004700 <FillBuffer>
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e84:	20000a64 	.word	0x20000a64
 8003e88:	2000094c 	.word	0x2000094c

08003e8c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003e8c:	b590      	push	{r4, r7, lr}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	80fb      	strh	r3, [r7, #6]
 8003e96:	460b      	mov	r3, r1
 8003e98:	80bb      	strh	r3, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003f0c <BSP_LCD_DisplayChar+0x80>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	491b      	ldr	r1, [pc, #108]	@ (8003f10 <BSP_LCD_DisplayChar+0x84>)
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	3308      	adds	r3, #8
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6819      	ldr	r1, [r3, #0]
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003eba:	4b14      	ldr	r3, [pc, #80]	@ (8003f0c <BSP_LCD_DisplayChar+0x80>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4c14      	ldr	r4, [pc, #80]	@ (8003f10 <BSP_LCD_DisplayChar+0x84>)
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4423      	add	r3, r4
 8003eca:	3308      	adds	r3, #8
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003ed0:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8003f0c <BSP_LCD_DisplayChar+0x80>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	4c0d      	ldr	r4, [pc, #52]	@ (8003f10 <BSP_LCD_DisplayChar+0x84>)
 8003eda:	4613      	mov	r3, r2
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4423      	add	r3, r4
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	889b      	ldrh	r3, [r3, #4]
 8003eea:	3307      	adds	r3, #7
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	da00      	bge.n	8003ef2 <BSP_LCD_DisplayChar+0x66>
 8003ef0:	3307      	adds	r3, #7
 8003ef2:	10db      	asrs	r3, r3, #3
 8003ef4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003ef8:	18ca      	adds	r2, r1, r3
 8003efa:	88b9      	ldrh	r1, [r7, #4]
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fb44 	bl	800458c <DrawChar>
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd90      	pop	{r4, r7, pc}
 8003f0c:	20000a64 	.word	0x20000a64
 8003f10:	20000a68 	.word	0x20000a68

08003f14 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003f14:	b5b0      	push	{r4, r5, r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60ba      	str	r2, [r7, #8]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4603      	mov	r3, r0
 8003f20:	81fb      	strh	r3, [r7, #14]
 8003f22:	460b      	mov	r3, r1
 8003f24:	81bb      	strh	r3, [r7, #12]
 8003f26:	4613      	mov	r3, r2
 8003f28:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	83fb      	strh	r3, [r7, #30]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003f32:	2300      	movs	r3, #0
 8003f34:	61bb      	str	r3, [r7, #24]
 8003f36:	2300      	movs	r3, #0
 8003f38:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003f3e:	e002      	b.n	8003f46 <BSP_LCD_DisplayStringAt+0x32>
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	3301      	adds	r3, #1
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	617a      	str	r2, [r7, #20]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f6      	bne.n	8003f40 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003f52:	f7ff fe9b 	bl	8003c8c <BSP_LCD_GetXSize>
 8003f56:	4601      	mov	r1, r0
 8003f58:	4b4b      	ldr	r3, [pc, #300]	@ (8004088 <BSP_LCD_DisplayStringAt+0x174>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	484b      	ldr	r0, [pc, #300]	@ (800408c <BSP_LCD_DisplayStringAt+0x178>)
 8003f5e:	4613      	mov	r3, r2
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	4413      	add	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4403      	add	r3, r0
 8003f68:	3308      	adds	r3, #8
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	889b      	ldrh	r3, [r3, #4]
 8003f6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f72:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d01c      	beq.n	8003fb4 <BSP_LCD_DisplayStringAt+0xa0>
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	dc33      	bgt.n	8003fe6 <BSP_LCD_DisplayStringAt+0xd2>
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d002      	beq.n	8003f88 <BSP_LCD_DisplayStringAt+0x74>
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d019      	beq.n	8003fba <BSP_LCD_DisplayStringAt+0xa6>
 8003f86:	e02e      	b.n	8003fe6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	1ad1      	subs	r1, r2, r3
 8003f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8004088 <BSP_LCD_DisplayStringAt+0x174>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	483e      	ldr	r0, [pc, #248]	@ (800408c <BSP_LCD_DisplayStringAt+0x178>)
 8003f94:	4613      	mov	r3, r2
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4403      	add	r3, r0
 8003f9e:	3308      	adds	r3, #8
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	889b      	ldrh	r3, [r3, #4]
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	085b      	lsrs	r3, r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	89fb      	ldrh	r3, [r7, #14]
 8003fae:	4413      	add	r3, r2
 8003fb0:	83fb      	strh	r3, [r7, #30]
      break;
 8003fb2:	e01b      	b.n	8003fec <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003fb4:	89fb      	ldrh	r3, [r7, #14]
 8003fb6:	83fb      	strh	r3, [r7, #30]
      break;
 8003fb8:	e018      	b.n	8003fec <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	b299      	uxth	r1, r3
 8003fc2:	4b31      	ldr	r3, [pc, #196]	@ (8004088 <BSP_LCD_DisplayStringAt+0x174>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4831      	ldr	r0, [pc, #196]	@ (800408c <BSP_LCD_DisplayStringAt+0x178>)
 8003fc8:	4613      	mov	r3, r2
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4403      	add	r3, r0
 8003fd2:	3308      	adds	r3, #8
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	889b      	ldrh	r3, [r3, #4]
 8003fd8:	fb11 f303 	smulbb	r3, r1, r3
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	89fb      	ldrh	r3, [r7, #14]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	83fb      	strh	r3, [r7, #30]
      break;
 8003fe4:	e002      	b.n	8003fec <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8003fe6:	89fb      	ldrh	r3, [r7, #14]
 8003fe8:	83fb      	strh	r3, [r7, #30]
      break;
 8003fea:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003fec:	e01a      	b.n	8004024 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	781a      	ldrb	r2, [r3, #0]
 8003ff2:	89b9      	ldrh	r1, [r7, #12]
 8003ff4:	8bfb      	ldrh	r3, [r7, #30]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff ff48 	bl	8003e8c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003ffc:	4b22      	ldr	r3, [pc, #136]	@ (8004088 <BSP_LCD_DisplayStringAt+0x174>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4922      	ldr	r1, [pc, #136]	@ (800408c <BSP_LCD_DisplayStringAt+0x178>)
 8004002:	4613      	mov	r3, r2
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	3308      	adds	r3, #8
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	889a      	ldrh	r2, [r3, #4]
 8004012:	8bfb      	ldrh	r3, [r7, #30]
 8004014:	4413      	add	r3, r2
 8004016:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	3301      	adds	r3, #1
 800401c:	60bb      	str	r3, [r7, #8]
    i++;
 800401e:	8bbb      	ldrh	r3, [r7, #28]
 8004020:	3301      	adds	r3, #1
 8004022:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf14      	ite	ne
 800402c:	2301      	movne	r3, #1
 800402e:	2300      	moveq	r3, #0
 8004030:	b2dc      	uxtb	r4, r3
 8004032:	f7ff fe2b 	bl	8003c8c <BSP_LCD_GetXSize>
 8004036:	8bb9      	ldrh	r1, [r7, #28]
 8004038:	4b13      	ldr	r3, [pc, #76]	@ (8004088 <BSP_LCD_DisplayStringAt+0x174>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4d13      	ldr	r5, [pc, #76]	@ (800408c <BSP_LCD_DisplayStringAt+0x178>)
 800403e:	4613      	mov	r3, r2
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	442b      	add	r3, r5
 8004048:	3308      	adds	r3, #8
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	889b      	ldrh	r3, [r3, #4]
 800404e:	fb01 f303 	mul.w	r3, r1, r3
 8004052:	1ac3      	subs	r3, r0, r3
 8004054:	b299      	uxth	r1, r3
 8004056:	4b0c      	ldr	r3, [pc, #48]	@ (8004088 <BSP_LCD_DisplayStringAt+0x174>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	480c      	ldr	r0, [pc, #48]	@ (800408c <BSP_LCD_DisplayStringAt+0x178>)
 800405c:	4613      	mov	r3, r2
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4403      	add	r3, r0
 8004066:	3308      	adds	r3, #8
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	889b      	ldrh	r3, [r3, #4]
 800406c:	4299      	cmp	r1, r3
 800406e:	bf2c      	ite	cs
 8004070:	2301      	movcs	r3, #1
 8004072:	2300      	movcc	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	4023      	ands	r3, r4
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1b7      	bne.n	8003fee <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800407e:	bf00      	nop
 8004080:	bf00      	nop
 8004082:	3720      	adds	r7, #32
 8004084:	46bd      	mov	sp, r7
 8004086:	bdb0      	pop	{r4, r5, r7, pc}
 8004088:	20000a64 	.word	0x20000a64
 800408c:	20000a68 	.word	0x20000a68

08004090 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8004090:	b590      	push	{r4, r7, lr}
 8004092:	b08b      	sub	sp, #44	@ 0x2c
 8004094:	af00      	add	r7, sp, #0
 8004096:	4604      	mov	r4, r0
 8004098:	4608      	mov	r0, r1
 800409a:	4611      	mov	r1, r2
 800409c:	461a      	mov	r2, r3
 800409e:	4623      	mov	r3, r4
 80040a0:	80fb      	strh	r3, [r7, #6]
 80040a2:	4603      	mov	r3, r0
 80040a4:	80bb      	strh	r3, [r7, #4]
 80040a6:	460b      	mov	r3, r1
 80040a8:	807b      	strh	r3, [r7, #2]
 80040aa:	4613      	mov	r3, r2
 80040ac:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80040ae:	2300      	movs	r3, #0
 80040b0:	823b      	strh	r3, [r7, #16]
 80040b2:	2300      	movs	r3, #0
 80040b4:	81fb      	strh	r3, [r7, #14]
 80040b6:	2300      	movs	r3, #0
 80040b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80040ba:	2300      	movs	r3, #0
 80040bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80040be:	2300      	movs	r3, #0
 80040c0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80040c2:	2300      	movs	r3, #0
 80040c4:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 80040c6:	2300      	movs	r3, #0
 80040c8:	83fb      	strh	r3, [r7, #30]
 80040ca:	2300      	movs	r3, #0
 80040cc:	83bb      	strh	r3, [r7, #28]
 80040ce:	2300      	movs	r3, #0
 80040d0:	837b      	strh	r3, [r7, #26]
 80040d2:	2300      	movs	r3, #0
 80040d4:	833b      	strh	r3, [r7, #24]
 80040d6:	2300      	movs	r3, #0
 80040d8:	82fb      	strh	r3, [r7, #22]
 80040da:	2300      	movs	r3, #0
 80040dc:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80040de:	2300      	movs	r3, #0
 80040e0:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 80040e2:	887a      	ldrh	r2, [r7, #2]
 80040e4:	88fb      	ldrh	r3, [r7, #6]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bfb8      	it	lt
 80040ec:	425b      	neglt	r3, r3
 80040ee:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 80040f0:	883a      	ldrh	r2, [r7, #0]
 80040f2:	88bb      	ldrh	r3, [r7, #4]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	bfb8      	it	lt
 80040fa:	425b      	neglt	r3, r3
 80040fc:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 80040fe:	88fb      	ldrh	r3, [r7, #6]
 8004100:	84fb      	strh	r3, [r7, #38]	@ 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8004102:	88bb      	ldrh	r3, [r7, #4]
 8004104:	84bb      	strh	r3, [r7, #36]	@ 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8004106:	887a      	ldrh	r2, [r7, #2]
 8004108:	88fb      	ldrh	r3, [r7, #6]
 800410a:	429a      	cmp	r2, r3
 800410c:	d304      	bcc.n	8004118 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 800410e:	2301      	movs	r3, #1
 8004110:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = 1;
 8004112:	2301      	movs	r3, #1
 8004114:	843b      	strh	r3, [r7, #32]
 8004116:	e005      	b.n	8004124 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8004118:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800411c:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = -1;
 800411e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004122:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8004124:	883a      	ldrh	r2, [r7, #0]
 8004126:	88bb      	ldrh	r3, [r7, #4]
 8004128:	429a      	cmp	r2, r3
 800412a:	d304      	bcc.n	8004136 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 800412c:	2301      	movs	r3, #1
 800412e:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8004130:	2301      	movs	r3, #1
 8004132:	83bb      	strh	r3, [r7, #28]
 8004134:	e005      	b.n	8004142 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8004136:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800413a:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 800413c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004140:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8004142:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004146:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800414a:	429a      	cmp	r2, r3
 800414c:	db10      	blt.n	8004170 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800414e:	2300      	movs	r3, #0
 8004150:	847b      	strh	r3, [r7, #34]	@ 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8004152:	2300      	movs	r3, #0
 8004154:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8004156:	8a3b      	ldrh	r3, [r7, #16]
 8004158:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 800415a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800415e:	0fda      	lsrs	r2, r3, #31
 8004160:	4413      	add	r3, r2
 8004162:	105b      	asrs	r3, r3, #1
 8004164:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8004166:	89fb      	ldrh	r3, [r7, #14]
 8004168:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 800416a:	8a3b      	ldrh	r3, [r7, #16]
 800416c:	82bb      	strh	r3, [r7, #20]
 800416e:	e00f      	b.n	8004190 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8004170:	2300      	movs	r3, #0
 8004172:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8004174:	2300      	movs	r3, #0
 8004176:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8004178:	89fb      	ldrh	r3, [r7, #14]
 800417a:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 800417c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004180:	0fda      	lsrs	r2, r3, #31
 8004182:	4413      	add	r3, r2
 8004184:	105b      	asrs	r3, r3, #1
 8004186:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8004188:	8a3b      	ldrh	r3, [r7, #16]
 800418a:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 800418c:	89fb      	ldrh	r3, [r7, #14]
 800418e:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8004190:	2300      	movs	r3, #0
 8004192:	827b      	strh	r3, [r7, #18]
 8004194:	e037      	b.n	8004206 <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8004196:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8004198:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800419a:	4b20      	ldr	r3, [pc, #128]	@ (800421c <BSP_LCD_DrawLine+0x18c>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	4c20      	ldr	r4, [pc, #128]	@ (8004220 <BSP_LCD_DrawLine+0x190>)
 80041a0:	4613      	mov	r3, r2
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4423      	add	r3, r4
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	f000 f9a1 	bl	80044f4 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 80041b2:	8b3a      	ldrh	r2, [r7, #24]
 80041b4:	8afb      	ldrh	r3, [r7, #22]
 80041b6:	4413      	add	r3, r2
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 80041bc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80041c0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	db0e      	blt.n	80041e6 <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 80041c8:	8b3a      	ldrh	r2, [r7, #24]
 80041ca:	8b7b      	ldrh	r3, [r7, #26]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 80041d2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80041d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80041d6:	4413      	add	r3, r2
 80041d8:	b29b      	uxth	r3, r3
 80041da:	84fb      	strh	r3, [r7, #38]	@ 0x26
      y += yinc1;                             /* Change the y as appropriate */
 80041dc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041de:	8bfb      	ldrh	r3, [r7, #30]
 80041e0:	4413      	add	r3, r2
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 80041e6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80041e8:	8c3b      	ldrh	r3, [r7, #32]
 80041ea:	4413      	add	r3, r2
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
    y += yinc2;                               /* Change the y as appropriate */
 80041f0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041f2:	8bbb      	ldrh	r3, [r7, #28]
 80041f4:	4413      	add	r3, r2
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80041fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3301      	adds	r3, #1
 8004202:	b29b      	uxth	r3, r3
 8004204:	827b      	strh	r3, [r7, #18]
 8004206:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800420a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800420e:	429a      	cmp	r2, r3
 8004210:	ddc1      	ble.n	8004196 <BSP_LCD_DrawLine+0x106>
  }
}
 8004212:	bf00      	nop
 8004214:	bf00      	nop
 8004216:	372c      	adds	r7, #44	@ 0x2c
 8004218:	46bd      	mov	sp, r7
 800421a:	bd90      	pop	{r4, r7, pc}
 800421c:	20000a64 	.word	0x20000a64
 8004220:	20000a68 	.word	0x20000a68

08004224 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004228:	b086      	sub	sp, #24
 800422a:	af02      	add	r7, sp, #8
 800422c:	4604      	mov	r4, r0
 800422e:	4608      	mov	r0, r1
 8004230:	4611      	mov	r1, r2
 8004232:	461a      	mov	r2, r3
 8004234:	4623      	mov	r3, r4
 8004236:	80fb      	strh	r3, [r7, #6]
 8004238:	4603      	mov	r3, r0
 800423a:	80bb      	strh	r3, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	807b      	strh	r3, [r7, #2]
 8004240:	4613      	mov	r3, r2
 8004242:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004248:	4b33      	ldr	r3, [pc, #204]	@ (8004318 <BSP_LCD_FillRect+0xf4>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4933      	ldr	r1, [pc, #204]	@ (800431c <BSP_LCD_FillRect+0xf8>)
 800424e:	4613      	mov	r3, r2
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	440b      	add	r3, r1
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff fda2 	bl	8003da4 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 8004260:	4b2f      	ldr	r3, [pc, #188]	@ (8004320 <BSP_LCD_FillRect+0xfc>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d022      	beq.n	80042ae <BSP_LCD_FillRect+0x8a>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +BSP_LCD_GetXSize()*BSP_LCD_GetYSize()); //Rotate by 180°
 8004268:	4b2b      	ldr	r3, [pc, #172]	@ (8004318 <BSP_LCD_FillRect+0xf4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a2d      	ldr	r2, [pc, #180]	@ (8004324 <BSP_LCD_FillRect+0x100>)
 800426e:	2134      	movs	r1, #52	@ 0x34
 8004270:	fb01 f303 	mul.w	r3, r1, r3
 8004274:	4413      	add	r3, r2
 8004276:	335c      	adds	r3, #92	@ 0x5c
 8004278:	681c      	ldr	r4, [r3, #0]
 800427a:	f7ff fd07 	bl	8003c8c <BSP_LCD_GetXSize>
 800427e:	4603      	mov	r3, r0
 8004280:	425b      	negs	r3, r3
 8004282:	88b9      	ldrh	r1, [r7, #4]
 8004284:	883a      	ldrh	r2, [r7, #0]
 8004286:	440a      	add	r2, r1
 8004288:	fb02 f503 	mul.w	r5, r2, r3
 800428c:	f7ff fcfe 	bl	8003c8c <BSP_LCD_GetXSize>
 8004290:	4606      	mov	r6, r0
 8004292:	f7ff fd07 	bl	8003ca4 <BSP_LCD_GetYSize>
 8004296:	4603      	mov	r3, r0
 8004298:	fb06 f303 	mul.w	r3, r6, r3
 800429c:	442b      	add	r3, r5
 800429e:	88f9      	ldrh	r1, [r7, #6]
 80042a0:	887a      	ldrh	r2, [r7, #2]
 80042a2:	440a      	add	r2, r1
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4423      	add	r3, r4
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	e013      	b.n	80042d6 <BSP_LCD_FillRect+0xb2>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80042ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004318 <BSP_LCD_FillRect+0xf4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004324 <BSP_LCD_FillRect+0x100>)
 80042b4:	2134      	movs	r1, #52	@ 0x34
 80042b6:	fb01 f303 	mul.w	r3, r1, r3
 80042ba:	4413      	add	r3, r2
 80042bc:	335c      	adds	r3, #92	@ 0x5c
 80042be:	681c      	ldr	r4, [r3, #0]
 80042c0:	f7ff fce4 	bl	8003c8c <BSP_LCD_GetXSize>
 80042c4:	4602      	mov	r2, r0
 80042c6:	88bb      	ldrh	r3, [r7, #4]
 80042c8:	fb03 f202 	mul.w	r2, r3, r2
 80042cc:	88fb      	ldrh	r3, [r7, #6]
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4423      	add	r3, r4
 80042d4:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80042d6:	4b10      	ldr	r3, [pc, #64]	@ (8004318 <BSP_LCD_FillRect+0xf4>)
 80042d8:	681c      	ldr	r4, [r3, #0]
 80042da:	68fd      	ldr	r5, [r7, #12]
 80042dc:	887e      	ldrh	r6, [r7, #2]
 80042de:	f8b7 8000 	ldrh.w	r8, [r7]
 80042e2:	f7ff fcd3 	bl	8003c8c <BSP_LCD_GetXSize>
 80042e6:	4602      	mov	r2, r0
 80042e8:	887b      	ldrh	r3, [r7, #2]
 80042ea:	1ad1      	subs	r1, r2, r3
 80042ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004318 <BSP_LCD_FillRect+0xf4>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	480a      	ldr	r0, [pc, #40]	@ (800431c <BSP_LCD_FillRect+0xf8>)
 80042f2:	4613      	mov	r3, r2
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4403      	add	r3, r0
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	9301      	str	r3, [sp, #4]
 8004300:	9100      	str	r1, [sp, #0]
 8004302:	4643      	mov	r3, r8
 8004304:	4632      	mov	r2, r6
 8004306:	4629      	mov	r1, r5
 8004308:	4620      	mov	r0, r4
 800430a:	f000 f9f9 	bl	8004700 <FillBuffer>
}
 800430e:	bf00      	nop
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004318:	20000a64 	.word	0x20000a64
 800431c:	20000a68 	.word	0x20000a68
 8004320:	20000a84 	.word	0x20000a84
 8004324:	2000094c 	.word	0x2000094c

08004328 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 800432c:	4b05      	ldr	r3, [pc, #20]	@ (8004344 <BSP_LCD_DisplayOn+0x1c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8004336:	4b03      	ldr	r3, [pc, #12]	@ (8004344 <BSP_LCD_DisplayOn+0x1c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	4798      	blx	r3
  }
}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20000a80 	.word	0x20000a80

08004348 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08e      	sub	sp, #56	@ 0x38
 800434c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	623b      	str	r3, [r7, #32]
 8004352:	4b61      	ldr	r3, [pc, #388]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 8004354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004356:	4a60      	ldr	r2, [pc, #384]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 8004358:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800435c:	6453      	str	r3, [r2, #68]	@ 0x44
 800435e:	4b5e      	ldr	r3, [pc, #376]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 8004360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004362:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004366:	623b      	str	r3, [r7, #32]
 8004368:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800436a:	2300      	movs	r3, #0
 800436c:	61fb      	str	r3, [r7, #28]
 800436e:	4b5a      	ldr	r3, [pc, #360]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 8004370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004372:	4a59      	ldr	r2, [pc, #356]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 8004374:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004378:	6313      	str	r3, [r2, #48]	@ 0x30
 800437a:	4b57      	ldr	r3, [pc, #348]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004382:	61fb      	str	r3, [r7, #28]
 8004384:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	61bb      	str	r3, [r7, #24]
 800438a:	4b53      	ldr	r3, [pc, #332]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438e:	4a52      	ldr	r2, [pc, #328]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	6313      	str	r3, [r2, #48]	@ 0x30
 8004396:	4b50      	ldr	r3, [pc, #320]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043a2:	2300      	movs	r3, #0
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	4b4c      	ldr	r3, [pc, #304]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	4a4b      	ldr	r2, [pc, #300]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 80043ac:	f043 0302 	orr.w	r3, r3, #2
 80043b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043b2:	4b49      	ldr	r3, [pc, #292]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	4b45      	ldr	r3, [pc, #276]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c6:	4a44      	ldr	r2, [pc, #272]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 80043c8:	f043 0304 	orr.w	r3, r3, #4
 80043cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ce:	4b42      	ldr	r3, [pc, #264]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	4b3e      	ldr	r3, [pc, #248]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e2:	4a3d      	ldr	r2, [pc, #244]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 80043e4:	f043 0308 	orr.w	r3, r3, #8
 80043e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ea:	4b3b      	ldr	r3, [pc, #236]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80043f6:	2300      	movs	r3, #0
 80043f8:	60bb      	str	r3, [r7, #8]
 80043fa:	4b37      	ldr	r3, [pc, #220]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fe:	4a36      	ldr	r2, [pc, #216]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 8004400:	f043 0320 	orr.w	r3, r3, #32
 8004404:	6313      	str	r3, [r2, #48]	@ 0x30
 8004406:	4b34      	ldr	r3, [pc, #208]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	60bb      	str	r3, [r7, #8]
 8004410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004412:	2300      	movs	r3, #0
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	4b30      	ldr	r3, [pc, #192]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441a:	4a2f      	ldr	r2, [pc, #188]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 800441c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004420:	6313      	str	r3, [r2, #48]	@ 0x30
 8004422:	4b2d      	ldr	r3, [pc, #180]	@ (80044d8 <BSP_LCD_MspInit+0x190>)
 8004424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800442a:	607b      	str	r3, [r7, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800442e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8004432:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004434:	2302      	movs	r3, #2
 8004436:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004438:	2300      	movs	r3, #0
 800443a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800443c:	2302      	movs	r3, #2
 800443e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8004440:	230e      	movs	r3, #14
 8004442:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004448:	4619      	mov	r1, r3
 800444a:	4824      	ldr	r0, [pc, #144]	@ (80044dc <BSP_LCD_MspInit+0x194>)
 800444c:	f001 fa5a 	bl	8005904 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8004450:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8004454:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800445a:	4619      	mov	r1, r3
 800445c:	4820      	ldr	r0, [pc, #128]	@ (80044e0 <BSP_LCD_MspInit+0x198>)
 800445e:	f001 fa51 	bl	8005904 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8004462:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8004466:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004468:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800446c:	4619      	mov	r1, r3
 800446e:	481d      	ldr	r0, [pc, #116]	@ (80044e4 <BSP_LCD_MspInit+0x19c>)
 8004470:	f001 fa48 	bl	8005904 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8004474:	2348      	movs	r3, #72	@ 0x48
 8004476:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800447c:	4619      	mov	r1, r3
 800447e:	481a      	ldr	r0, [pc, #104]	@ (80044e8 <BSP_LCD_MspInit+0x1a0>)
 8004480:	f001 fa40 	bl	8005904 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8004484:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004488:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800448a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800448e:	4619      	mov	r1, r3
 8004490:	4816      	ldr	r0, [pc, #88]	@ (80044ec <BSP_LCD_MspInit+0x1a4>)
 8004492:	f001 fa37 	bl	8005904 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8004496:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800449a:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800449c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044a0:	4619      	mov	r1, r3
 80044a2:	4813      	ldr	r0, [pc, #76]	@ (80044f0 <BSP_LCD_MspInit+0x1a8>)
 80044a4:	f001 fa2e 	bl	8005904 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80044a8:	2303      	movs	r3, #3
 80044aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80044ac:	2309      	movs	r3, #9
 80044ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80044b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044b4:	4619      	mov	r1, r3
 80044b6:	480a      	ldr	r0, [pc, #40]	@ (80044e0 <BSP_LCD_MspInit+0x198>)
 80044b8:	f001 fa24 	bl	8005904 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80044bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80044c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80044c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044c6:	4619      	mov	r1, r3
 80044c8:	4809      	ldr	r0, [pc, #36]	@ (80044f0 <BSP_LCD_MspInit+0x1a8>)
 80044ca:	f001 fa1b 	bl	8005904 <HAL_GPIO_Init>
}
 80044ce:	bf00      	nop
 80044d0:	3738      	adds	r7, #56	@ 0x38
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800
 80044dc:	40020000 	.word	0x40020000
 80044e0:	40020400 	.word	0x40020400
 80044e4:	40020800 	.word	0x40020800
 80044e8:	40020c00 	.word	0x40020c00
 80044ec:	40021400 	.word	0x40021400
 80044f0:	40021800 	.word	0x40021800

080044f4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80044f4:	b5b0      	push	{r4, r5, r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	603a      	str	r2, [r7, #0]
 80044fe:	80fb      	strh	r3, [r7, #6]
 8004500:	460b      	mov	r3, r1
 8004502:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 8004504:	4b1e      	ldr	r3, [pc, #120]	@ (8004580 <BSP_LCD_DrawPixel+0x8c>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01f      	beq.n	800454c <BSP_LCD_DrawPixel+0x58>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (BSP_LCD_GetXSize()*BSP_LCD_GetYSize() - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 800450c:	4b1d      	ldr	r3, [pc, #116]	@ (8004584 <BSP_LCD_DrawPixel+0x90>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1d      	ldr	r2, [pc, #116]	@ (8004588 <BSP_LCD_DrawPixel+0x94>)
 8004512:	2134      	movs	r1, #52	@ 0x34
 8004514:	fb01 f303 	mul.w	r3, r1, r3
 8004518:	4413      	add	r3, r2
 800451a:	335c      	adds	r3, #92	@ 0x5c
 800451c:	681c      	ldr	r4, [r3, #0]
 800451e:	f7ff fbb5 	bl	8003c8c <BSP_LCD_GetXSize>
 8004522:	4605      	mov	r5, r0
 8004524:	f7ff fbbe 	bl	8003ca4 <BSP_LCD_GetYSize>
 8004528:	4603      	mov	r3, r0
 800452a:	fb03 f205 	mul.w	r2, r3, r5
 800452e:	88fb      	ldrh	r3, [r7, #6]
 8004530:	1ad5      	subs	r5, r2, r3
 8004532:	f7ff fbab 	bl	8003c8c <BSP_LCD_GetXSize>
 8004536:	4602      	mov	r2, r0
 8004538:	88bb      	ldrh	r3, [r7, #4]
 800453a:	fb02 f303 	mul.w	r3, r2, r3
 800453e:	1aeb      	subs	r3, r5, r3
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4423      	add	r3, r4
 8004544:	461a      	mov	r2, r3
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800454a:	e015      	b.n	8004578 <BSP_LCD_DrawPixel+0x84>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800454c:	4b0d      	ldr	r3, [pc, #52]	@ (8004584 <BSP_LCD_DrawPixel+0x90>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a0d      	ldr	r2, [pc, #52]	@ (8004588 <BSP_LCD_DrawPixel+0x94>)
 8004552:	2134      	movs	r1, #52	@ 0x34
 8004554:	fb01 f303 	mul.w	r3, r1, r3
 8004558:	4413      	add	r3, r2
 800455a:	335c      	adds	r3, #92	@ 0x5c
 800455c:	681c      	ldr	r4, [r3, #0]
 800455e:	88bd      	ldrh	r5, [r7, #4]
 8004560:	f7ff fb94 	bl	8003c8c <BSP_LCD_GetXSize>
 8004564:	4603      	mov	r3, r0
 8004566:	fb03 f205 	mul.w	r2, r3, r5
 800456a:	88fb      	ldrh	r3, [r7, #6]
 800456c:	4413      	add	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4423      	add	r3, r4
 8004572:	461a      	mov	r2, r3
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	6013      	str	r3, [r2, #0]
}
 8004578:	bf00      	nop
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bdb0      	pop	{r4, r5, r7, pc}
 8004580:	20000a84 	.word	0x20000a84
 8004584:	20000a64 	.word	0x20000a64
 8004588:	2000094c 	.word	0x2000094c

0800458c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	603a      	str	r2, [r7, #0]
 8004596:	80fb      	strh	r3, [r7, #6]
 8004598:	460b      	mov	r3, r1
 800459a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800459c:	2300      	movs	r3, #0
 800459e:	61fb      	str	r3, [r7, #28]
 80045a0:	2300      	movs	r3, #0
 80045a2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80045a8:	4b53      	ldr	r3, [pc, #332]	@ (80046f8 <DrawChar+0x16c>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	4953      	ldr	r1, [pc, #332]	@ (80046fc <DrawChar+0x170>)
 80045ae:	4613      	mov	r3, r2
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	440b      	add	r3, r1
 80045b8:	3308      	adds	r3, #8
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	88db      	ldrh	r3, [r3, #6]
 80045be:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80045c0:	4b4d      	ldr	r3, [pc, #308]	@ (80046f8 <DrawChar+0x16c>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	494d      	ldr	r1, [pc, #308]	@ (80046fc <DrawChar+0x170>)
 80045c6:	4613      	mov	r3, r2
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	4413      	add	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	440b      	add	r3, r1
 80045d0:	3308      	adds	r3, #8
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	889b      	ldrh	r3, [r3, #4]
 80045d6:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80045d8:	8a3b      	ldrh	r3, [r7, #16]
 80045da:	3307      	adds	r3, #7
 80045dc:	2b00      	cmp	r3, #0
 80045de:	da00      	bge.n	80045e2 <DrawChar+0x56>
 80045e0:	3307      	adds	r3, #7
 80045e2:	10db      	asrs	r3, r3, #3
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	8a3b      	ldrh	r3, [r7, #16]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
 80045f6:	e076      	b.n	80046e6 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80045f8:	8a3b      	ldrh	r3, [r7, #16]
 80045fa:	3307      	adds	r3, #7
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	da00      	bge.n	8004602 <DrawChar+0x76>
 8004600:	3307      	adds	r3, #7
 8004602:	10db      	asrs	r3, r3, #3
 8004604:	461a      	mov	r2, r3
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	fb02 f303 	mul.w	r3, r2, r3
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	4413      	add	r3, r2
 8004610:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8004612:	8a3b      	ldrh	r3, [r7, #16]
 8004614:	3307      	adds	r3, #7
 8004616:	2b00      	cmp	r3, #0
 8004618:	da00      	bge.n	800461c <DrawChar+0x90>
 800461a:	3307      	adds	r3, #7
 800461c:	10db      	asrs	r3, r3, #3
 800461e:	2b01      	cmp	r3, #1
 8004620:	d002      	beq.n	8004628 <DrawChar+0x9c>
 8004622:	2b02      	cmp	r3, #2
 8004624:	d004      	beq.n	8004630 <DrawChar+0xa4>
 8004626:	e00c      	b.n	8004642 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	617b      	str	r3, [r7, #20]
      break;
 800462e:	e016      	b.n	800465e <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	021b      	lsls	r3, r3, #8
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	3201      	adds	r2, #1
 800463a:	7812      	ldrb	r2, [r2, #0]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]
      break;
 8004640:	e00d      	b.n	800465e <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	041a      	lsls	r2, r3, #16
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	3301      	adds	r3, #1
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	021b      	lsls	r3, r3, #8
 8004650:	4313      	orrs	r3, r2
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	3202      	adds	r2, #2
 8004656:	7812      	ldrb	r2, [r2, #0]
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]
      break;
 800465c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800465e:	2300      	movs	r3, #0
 8004660:	61bb      	str	r3, [r7, #24]
 8004662:	e036      	b.n	80046d2 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004664:	8a3a      	ldrh	r2, [r7, #16]
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	1ad2      	subs	r2, r2, r3
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	4413      	add	r3, r2
 800466e:	3b01      	subs	r3, #1
 8004670:	2201      	movs	r2, #1
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	461a      	mov	r2, r3
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	4013      	ands	r3, r2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d012      	beq.n	80046a6 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	b29a      	uxth	r2, r3
 8004684:	88fb      	ldrh	r3, [r7, #6]
 8004686:	4413      	add	r3, r2
 8004688:	b298      	uxth	r0, r3
 800468a:	4b1b      	ldr	r3, [pc, #108]	@ (80046f8 <DrawChar+0x16c>)
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	491b      	ldr	r1, [pc, #108]	@ (80046fc <DrawChar+0x170>)
 8004690:	4613      	mov	r3, r2
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	88bb      	ldrh	r3, [r7, #4]
 800469e:	4619      	mov	r1, r3
 80046a0:	f7ff ff28 	bl	80044f4 <BSP_LCD_DrawPixel>
 80046a4:	e012      	b.n	80046cc <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	4413      	add	r3, r2
 80046ae:	b298      	uxth	r0, r3
 80046b0:	4b11      	ldr	r3, [pc, #68]	@ (80046f8 <DrawChar+0x16c>)
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	4911      	ldr	r1, [pc, #68]	@ (80046fc <DrawChar+0x170>)
 80046b6:	4613      	mov	r3, r2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	4413      	add	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	3304      	adds	r3, #4
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	88bb      	ldrh	r3, [r7, #4]
 80046c6:	4619      	mov	r1, r3
 80046c8:	f7ff ff14 	bl	80044f4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	3301      	adds	r3, #1
 80046d0:	61bb      	str	r3, [r7, #24]
 80046d2:	8a3b      	ldrh	r3, [r7, #16]
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d3c4      	bcc.n	8004664 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80046da:	88bb      	ldrh	r3, [r7, #4]
 80046dc:	3301      	adds	r3, #1
 80046de:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	3301      	adds	r3, #1
 80046e4:	61fb      	str	r3, [r7, #28]
 80046e6:	8a7b      	ldrh	r3, [r7, #18]
 80046e8:	69fa      	ldr	r2, [r7, #28]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d384      	bcc.n	80045f8 <DrawChar+0x6c>
  }
}
 80046ee:	bf00      	nop
 80046f0:	bf00      	nop
 80046f2:	3720      	adds	r7, #32
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	20000a64 	.word	0x20000a64
 80046fc:	20000a68 	.word	0x20000a68

08004700 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af02      	add	r7, sp, #8
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800470e:	4b16      	ldr	r3, [pc, #88]	@ (8004768 <FillBuffer+0x68>)
 8004710:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004714:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004716:	4b14      	ldr	r3, [pc, #80]	@ (8004768 <FillBuffer+0x68>)
 8004718:	2200      	movs	r2, #0
 800471a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 800471c:	4a12      	ldr	r2, [pc, #72]	@ (8004768 <FillBuffer+0x68>)
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8004722:	4b11      	ldr	r3, [pc, #68]	@ (8004768 <FillBuffer+0x68>)
 8004724:	4a11      	ldr	r2, [pc, #68]	@ (800476c <FillBuffer+0x6c>)
 8004726:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8004728:	480f      	ldr	r0, [pc, #60]	@ (8004768 <FillBuffer+0x68>)
 800472a:	f000 fe55 	bl	80053d8 <HAL_DMA2D_Init>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d115      	bne.n	8004760 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8004734:	68f9      	ldr	r1, [r7, #12]
 8004736:	480c      	ldr	r0, [pc, #48]	@ (8004768 <FillBuffer+0x68>)
 8004738:	f000 ffb6 	bl	80056a8 <HAL_DMA2D_ConfigLayer>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10e      	bne.n	8004760 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	69f9      	ldr	r1, [r7, #28]
 800474c:	4806      	ldr	r0, [pc, #24]	@ (8004768 <FillBuffer+0x68>)
 800474e:	f000 fe96 	bl	800547e <HAL_DMA2D_Start>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d103      	bne.n	8004760 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004758:	210a      	movs	r1, #10
 800475a:	4803      	ldr	r0, [pc, #12]	@ (8004768 <FillBuffer+0x68>)
 800475c:	f000 feba 	bl	80054d4 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004760:	bf00      	nop
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	200009f4 	.word	0x200009f4
 800476c:	4002b000 	.word	0x4002b000

08004770 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004774:	4b29      	ldr	r3, [pc, #164]	@ (800481c <BSP_SDRAM_Init+0xac>)
 8004776:	4a2a      	ldr	r2, [pc, #168]	@ (8004820 <BSP_SDRAM_Init+0xb0>)
 8004778:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800477a:	4b2a      	ldr	r3, [pc, #168]	@ (8004824 <BSP_SDRAM_Init+0xb4>)
 800477c:	2202      	movs	r2, #2
 800477e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004780:	4b28      	ldr	r3, [pc, #160]	@ (8004824 <BSP_SDRAM_Init+0xb4>)
 8004782:	2207      	movs	r2, #7
 8004784:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8004786:	4b27      	ldr	r3, [pc, #156]	@ (8004824 <BSP_SDRAM_Init+0xb4>)
 8004788:	2204      	movs	r2, #4
 800478a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800478c:	4b25      	ldr	r3, [pc, #148]	@ (8004824 <BSP_SDRAM_Init+0xb4>)
 800478e:	2207      	movs	r2, #7
 8004790:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8004792:	4b24      	ldr	r3, [pc, #144]	@ (8004824 <BSP_SDRAM_Init+0xb4>)
 8004794:	2202      	movs	r2, #2
 8004796:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8004798:	4b22      	ldr	r3, [pc, #136]	@ (8004824 <BSP_SDRAM_Init+0xb4>)
 800479a:	2202      	movs	r2, #2
 800479c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800479e:	4b21      	ldr	r3, [pc, #132]	@ (8004824 <BSP_SDRAM_Init+0xb4>)
 80047a0:	2202      	movs	r2, #2
 80047a2:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80047a4:	4b1d      	ldr	r3, [pc, #116]	@ (800481c <BSP_SDRAM_Init+0xac>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80047aa:	4b1c      	ldr	r3, [pc, #112]	@ (800481c <BSP_SDRAM_Init+0xac>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80047b0:	4b1a      	ldr	r3, [pc, #104]	@ (800481c <BSP_SDRAM_Init+0xac>)
 80047b2:	2204      	movs	r2, #4
 80047b4:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80047b6:	4b19      	ldr	r3, [pc, #100]	@ (800481c <BSP_SDRAM_Init+0xac>)
 80047b8:	2210      	movs	r2, #16
 80047ba:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80047bc:	4b17      	ldr	r3, [pc, #92]	@ (800481c <BSP_SDRAM_Init+0xac>)
 80047be:	2240      	movs	r2, #64	@ 0x40
 80047c0:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80047c2:	4b16      	ldr	r3, [pc, #88]	@ (800481c <BSP_SDRAM_Init+0xac>)
 80047c4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80047c8:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80047ca:	4b14      	ldr	r3, [pc, #80]	@ (800481c <BSP_SDRAM_Init+0xac>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80047d0:	4b12      	ldr	r3, [pc, #72]	@ (800481c <BSP_SDRAM_Init+0xac>)
 80047d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047d6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80047d8:	4b10      	ldr	r3, [pc, #64]	@ (800481c <BSP_SDRAM_Init+0xac>)
 80047da:	2200      	movs	r2, #0
 80047dc:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80047de:	4b0f      	ldr	r3, [pc, #60]	@ (800481c <BSP_SDRAM_Init+0xac>)
 80047e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80047e4:	629a      	str	r2, [r3, #40]	@ 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80047e6:	2100      	movs	r1, #0
 80047e8:	480c      	ldr	r0, [pc, #48]	@ (800481c <BSP_SDRAM_Init+0xac>)
 80047ea:	f000 f87f 	bl	80048ec <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80047ee:	490d      	ldr	r1, [pc, #52]	@ (8004824 <BSP_SDRAM_Init+0xb4>)
 80047f0:	480a      	ldr	r0, [pc, #40]	@ (800481c <BSP_SDRAM_Init+0xac>)
 80047f2:	f003 fb9d 	bl	8007f30 <HAL_SDRAM_Init>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80047fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004828 <BSP_SDRAM_Init+0xb8>)
 80047fe:	2201      	movs	r2, #1
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	e002      	b.n	800480a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004804:	4b08      	ldr	r3, [pc, #32]	@ (8004828 <BSP_SDRAM_Init+0xb8>)
 8004806:	2200      	movs	r2, #0
 8004808:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800480a:	f240 506a 	movw	r0, #1386	@ 0x56a
 800480e:	f000 f80d 	bl	800482c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004812:	4b05      	ldr	r3, [pc, #20]	@ (8004828 <BSP_SDRAM_Init+0xb8>)
 8004814:	781b      	ldrb	r3, [r3, #0]
}
 8004816:	4618      	mov	r0, r3
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20000a88 	.word	0x20000a88
 8004820:	a0000140 	.word	0xa0000140
 8004824:	20000abc 	.word	0x20000abc
 8004828:	2000018c 	.word	0x2000018c

0800482c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004838:	4b2a      	ldr	r3, [pc, #168]	@ (80048e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800483a:	2201      	movs	r2, #1
 800483c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800483e:	4b29      	ldr	r3, [pc, #164]	@ (80048e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004840:	2208      	movs	r2, #8
 8004842:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004844:	4b27      	ldr	r3, [pc, #156]	@ (80048e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004846:	2201      	movs	r2, #1
 8004848:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800484a:	4b26      	ldr	r3, [pc, #152]	@ (80048e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800484c:	2200      	movs	r2, #0
 800484e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004850:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004854:	4923      	ldr	r1, [pc, #140]	@ (80048e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004856:	4824      	ldr	r0, [pc, #144]	@ (80048e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004858:	f003 fba8 	bl	8007fac <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800485c:	2001      	movs	r0, #1
 800485e:	f000 fac7 	bl	8004df0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8004862:	4b20      	ldr	r3, [pc, #128]	@ (80048e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004864:	2202      	movs	r2, #2
 8004866:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004868:	4b1e      	ldr	r3, [pc, #120]	@ (80048e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800486a:	2208      	movs	r2, #8
 800486c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800486e:	4b1d      	ldr	r3, [pc, #116]	@ (80048e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004870:	2201      	movs	r2, #1
 8004872:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004874:	4b1b      	ldr	r3, [pc, #108]	@ (80048e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004876:	2200      	movs	r2, #0
 8004878:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800487a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800487e:	4919      	ldr	r1, [pc, #100]	@ (80048e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004880:	4819      	ldr	r0, [pc, #100]	@ (80048e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004882:	f003 fb93 	bl	8007fac <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004886:	4b17      	ldr	r3, [pc, #92]	@ (80048e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004888:	2203      	movs	r2, #3
 800488a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800488c:	4b15      	ldr	r3, [pc, #84]	@ (80048e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800488e:	2208      	movs	r2, #8
 8004890:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8004892:	4b14      	ldr	r3, [pc, #80]	@ (80048e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004894:	2204      	movs	r2, #4
 8004896:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004898:	4b12      	ldr	r3, [pc, #72]	@ (80048e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800489a:	2200      	movs	r2, #0
 800489c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800489e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048a2:	4910      	ldr	r1, [pc, #64]	@ (80048e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80048a4:	4810      	ldr	r0, [pc, #64]	@ (80048e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80048a6:	f003 fb81 	bl	8007fac <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80048aa:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80048ae:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80048b0:	4b0c      	ldr	r3, [pc, #48]	@ (80048e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80048b2:	2204      	movs	r2, #4
 80048b4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80048b6:	4b0b      	ldr	r3, [pc, #44]	@ (80048e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80048b8:	2208      	movs	r2, #8
 80048ba:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80048bc:	4b09      	ldr	r3, [pc, #36]	@ (80048e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80048be:	2201      	movs	r2, #1
 80048c0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4a07      	ldr	r2, [pc, #28]	@ (80048e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80048c6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80048c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048cc:	4905      	ldr	r1, [pc, #20]	@ (80048e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80048ce:	4806      	ldr	r0, [pc, #24]	@ (80048e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80048d0:	f003 fb6c 	bl	8007fac <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	4804      	ldr	r0, [pc, #16]	@ (80048e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80048d8:	f003 fb93 	bl	8008002 <HAL_SDRAM_ProgramRefreshRate>
}
 80048dc:	bf00      	nop
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20000ad8 	.word	0x20000ad8
 80048e8:	20000a88 	.word	0x20000a88

080048ec <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b090      	sub	sp, #64	@ 0x40
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 80ec 	beq.w	8004ad6 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80048fe:	2300      	movs	r3, #0
 8004900:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004902:	4b77      	ldr	r3, [pc, #476]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 8004904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004906:	4a76      	ldr	r2, [pc, #472]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	6393      	str	r3, [r2, #56]	@ 0x38
 800490e:	4b74      	ldr	r3, [pc, #464]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 8004910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004918:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800491a:	2300      	movs	r3, #0
 800491c:	627b      	str	r3, [r7, #36]	@ 0x24
 800491e:	4b70      	ldr	r3, [pc, #448]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004922:	4a6f      	ldr	r2, [pc, #444]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 8004924:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004928:	6313      	str	r3, [r2, #48]	@ 0x30
 800492a:	4b6d      	ldr	r3, [pc, #436]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 800492c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004932:	627b      	str	r3, [r7, #36]	@ 0x24
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	623b      	str	r3, [r7, #32]
 800493a:	4b69      	ldr	r3, [pc, #420]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 800493c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493e:	4a68      	ldr	r2, [pc, #416]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 8004940:	f043 0302 	orr.w	r3, r3, #2
 8004944:	6313      	str	r3, [r2, #48]	@ 0x30
 8004946:	4b66      	ldr	r3, [pc, #408]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 8004948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	623b      	str	r3, [r7, #32]
 8004950:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004952:	2300      	movs	r3, #0
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	4b62      	ldr	r3, [pc, #392]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 8004958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495a:	4a61      	ldr	r2, [pc, #388]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 800495c:	f043 0304 	orr.w	r3, r3, #4
 8004960:	6313      	str	r3, [r2, #48]	@ 0x30
 8004962:	4b5f      	ldr	r3, [pc, #380]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800496e:	2300      	movs	r3, #0
 8004970:	61bb      	str	r3, [r7, #24]
 8004972:	4b5b      	ldr	r3, [pc, #364]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 8004974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004976:	4a5a      	ldr	r2, [pc, #360]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 8004978:	f043 0308 	orr.w	r3, r3, #8
 800497c:	6313      	str	r3, [r2, #48]	@ 0x30
 800497e:	4b58      	ldr	r3, [pc, #352]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 8004980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	61bb      	str	r3, [r7, #24]
 8004988:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	4b54      	ldr	r3, [pc, #336]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 8004990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004992:	4a53      	ldr	r2, [pc, #332]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 8004994:	f043 0310 	orr.w	r3, r3, #16
 8004998:	6313      	str	r3, [r2, #48]	@ 0x30
 800499a:	4b51      	ldr	r3, [pc, #324]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 800499c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80049a6:	2300      	movs	r3, #0
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	4b4d      	ldr	r3, [pc, #308]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 80049ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ae:	4a4c      	ldr	r2, [pc, #304]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 80049b0:	f043 0320 	orr.w	r3, r3, #32
 80049b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80049b6:	4b4a      	ldr	r3, [pc, #296]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 80049b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80049c2:	2300      	movs	r3, #0
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	4b46      	ldr	r3, [pc, #280]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 80049c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ca:	4a45      	ldr	r2, [pc, #276]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 80049cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80049d2:	4b43      	ldr	r3, [pc, #268]	@ (8004ae0 <BSP_SDRAM_MspInit+0x1f4>)
 80049d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80049de:	2302      	movs	r3, #2
 80049e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80049e2:	2302      	movs	r3, #2
 80049e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80049ea:	230c      	movs	r3, #12
 80049ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80049ee:	2360      	movs	r3, #96	@ 0x60
 80049f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80049f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80049f6:	4619      	mov	r1, r3
 80049f8:	483a      	ldr	r0, [pc, #232]	@ (8004ae4 <BSP_SDRAM_MspInit+0x1f8>)
 80049fa:	f000 ff83 	bl	8005904 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80049fe:	2301      	movs	r3, #1
 8004a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8004a02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004a06:	4619      	mov	r1, r3
 8004a08:	4837      	ldr	r0, [pc, #220]	@ (8004ae8 <BSP_SDRAM_MspInit+0x1fc>)
 8004a0a:	f000 ff7b 	bl	8005904 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8004a0e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004a14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4834      	ldr	r0, [pc, #208]	@ (8004aec <BSP_SDRAM_MspInit+0x200>)
 8004a1c:	f000 ff72 	bl	8005904 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004a20:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004a26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	4830      	ldr	r0, [pc, #192]	@ (8004af0 <BSP_SDRAM_MspInit+0x204>)
 8004a2e:	f000 ff69 	bl	8005904 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8004a32:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004a38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	482d      	ldr	r0, [pc, #180]	@ (8004af4 <BSP_SDRAM_MspInit+0x208>)
 8004a40:	f000 ff60 	bl	8005904 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004a44:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004a4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4829      	ldr	r0, [pc, #164]	@ (8004af8 <BSP_SDRAM_MspInit+0x20c>)
 8004a52:	f000 ff57 	bl	8005904 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004a56:	4b29      	ldr	r3, [pc, #164]	@ (8004afc <BSP_SDRAM_MspInit+0x210>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004a5c:	4b27      	ldr	r3, [pc, #156]	@ (8004afc <BSP_SDRAM_MspInit+0x210>)
 8004a5e:	2280      	movs	r2, #128	@ 0x80
 8004a60:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004a62:	4b26      	ldr	r3, [pc, #152]	@ (8004afc <BSP_SDRAM_MspInit+0x210>)
 8004a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a68:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004a6a:	4b24      	ldr	r3, [pc, #144]	@ (8004afc <BSP_SDRAM_MspInit+0x210>)
 8004a6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a70:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004a72:	4b22      	ldr	r3, [pc, #136]	@ (8004afc <BSP_SDRAM_MspInit+0x210>)
 8004a74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004a78:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004a7a:	4b20      	ldr	r3, [pc, #128]	@ (8004afc <BSP_SDRAM_MspInit+0x210>)
 8004a7c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004a80:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8004a82:	4b1e      	ldr	r3, [pc, #120]	@ (8004afc <BSP_SDRAM_MspInit+0x210>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004a88:	4b1c      	ldr	r3, [pc, #112]	@ (8004afc <BSP_SDRAM_MspInit+0x210>)
 8004a8a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004a8e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004a90:	4b1a      	ldr	r3, [pc, #104]	@ (8004afc <BSP_SDRAM_MspInit+0x210>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	625a      	str	r2, [r3, #36]	@ 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004a96:	4b19      	ldr	r3, [pc, #100]	@ (8004afc <BSP_SDRAM_MspInit+0x210>)
 8004a98:	2203      	movs	r2, #3
 8004a9a:	629a      	str	r2, [r3, #40]	@ 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004a9c:	4b17      	ldr	r3, [pc, #92]	@ (8004afc <BSP_SDRAM_MspInit+0x210>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004aa2:	4b16      	ldr	r3, [pc, #88]	@ (8004afc <BSP_SDRAM_MspInit+0x210>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004aa8:	4b14      	ldr	r3, [pc, #80]	@ (8004afc <BSP_SDRAM_MspInit+0x210>)
 8004aaa:	4a15      	ldr	r2, [pc, #84]	@ (8004b00 <BSP_SDRAM_MspInit+0x214>)
 8004aac:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a12      	ldr	r2, [pc, #72]	@ (8004afc <BSP_SDRAM_MspInit+0x210>)
 8004ab2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ab4:	4a11      	ldr	r2, [pc, #68]	@ (8004afc <BSP_SDRAM_MspInit+0x210>)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8004aba:	4810      	ldr	r0, [pc, #64]	@ (8004afc <BSP_SDRAM_MspInit+0x210>)
 8004abc:	f000 fb7c 	bl	80051b8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8004ac0:	480e      	ldr	r0, [pc, #56]	@ (8004afc <BSP_SDRAM_MspInit+0x210>)
 8004ac2:	f000 facb 	bl	800505c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	210f      	movs	r1, #15
 8004aca:	2038      	movs	r0, #56	@ 0x38
 8004acc:	f000 fa8f 	bl	8004fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004ad0:	2038      	movs	r0, #56	@ 0x38
 8004ad2:	f000 faa8 	bl	8005026 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8004ad6:	bf00      	nop
 8004ad8:	3740      	adds	r7, #64	@ 0x40
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	40020400 	.word	0x40020400
 8004ae8:	40020800 	.word	0x40020800
 8004aec:	40020c00 	.word	0x40020c00
 8004af0:	40021000 	.word	0x40021000
 8004af4:	40021400 	.word	0x40021400
 8004af8:	40021800 	.word	0x40021800
 8004afc:	20000ae8 	.word	0x20000ae8
 8004b00:	40026410 	.word	0x40026410

08004b04 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	460a      	mov	r2, r1
 8004b0e:	80fb      	strh	r3, [r7, #6]
 8004b10:	4613      	mov	r3, r2
 8004b12:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8004b18:	4a13      	ldr	r2, [pc, #76]	@ (8004b68 <BSP_TS_Init+0x64>)
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8004b1e:	4a13      	ldr	r2, [pc, #76]	@ (8004b6c <BSP_TS_Init+0x68>)
 8004b20:	88bb      	ldrh	r3, [r7, #4]
 8004b22:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8004b24:	4b12      	ldr	r3, [pc, #72]	@ (8004b70 <BSP_TS_Init+0x6c>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2082      	movs	r0, #130	@ 0x82
 8004b2a:	4798      	blx	r3
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f640 0311 	movw	r3, #2065	@ 0x811
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d104      	bne.n	8004b42 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8004b38:	4b0e      	ldr	r3, [pc, #56]	@ (8004b74 <BSP_TS_Init+0x70>)
 8004b3a:	4a0d      	ldr	r2, [pc, #52]	@ (8004b70 <BSP_TS_Init+0x6c>)
 8004b3c:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d109      	bne.n	8004b5c <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8004b48:	4b0a      	ldr	r3, [pc, #40]	@ (8004b74 <BSP_TS_Init+0x70>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2082      	movs	r0, #130	@ 0x82
 8004b50:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8004b52:	4b08      	ldr	r3, [pc, #32]	@ (8004b74 <BSP_TS_Init+0x70>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2082      	movs	r0, #130	@ 0x82
 8004b5a:	4798      	blx	r3
  }

  return ret;
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20000b4c 	.word	0x20000b4c
 8004b6c:	20000b4e 	.word	0x20000b4e
 8004b70:	2000013c 	.word	0x2000013c
 8004b74:	20000b48 	.word	0x20000b48

08004b78 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8004b7c:	4b03      	ldr	r3, [pc, #12]	@ (8004b8c <BSP_TS_ITGetStatus+0x14>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	2082      	movs	r0, #130	@ 0x82
 8004b84:	4798      	blx	r3
 8004b86:	4603      	mov	r3, r0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20000b48 	.word	0x20000b48

08004b90 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004b98:	4b4f      	ldr	r3, [pc, #316]	@ (8004cd8 <BSP_TS_GetState+0x148>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	2082      	movs	r0, #130	@ 0x82
 8004ba0:	4798      	blx	r3
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 808d 	beq.w	8004cce <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8004bb4:	4b48      	ldr	r3, [pc, #288]	@ (8004cd8 <BSP_TS_GetState+0x148>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	f107 020c 	add.w	r2, r7, #12
 8004bbe:	f107 010e 	add.w	r1, r7, #14
 8004bc2:	2082      	movs	r0, #130	@ 0x82
 8004bc4:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8004bc6:	89bb      	ldrh	r3, [r7, #12]
 8004bc8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8004bd0:	89bb      	ldrh	r3, [r7, #12]
 8004bd2:	4a42      	ldr	r2, [pc, #264]	@ (8004cdc <BSP_TS_GetState+0x14c>)
 8004bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd8:	08db      	lsrs	r3, r3, #3
 8004bda:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8004bdc:	8abb      	ldrh	r3, [r7, #20]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d102      	bne.n	8004be8 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8004be2:	2300      	movs	r3, #0
 8004be4:	82bb      	strh	r3, [r7, #20]
 8004be6:	e008      	b.n	8004bfa <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8004be8:	4b3d      	ldr	r3, [pc, #244]	@ (8004ce0 <BSP_TS_GetState+0x150>)
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	8aba      	ldrh	r2, [r7, #20]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d903      	bls.n	8004bfa <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8004bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8004ce0 <BSP_TS_GetState+0x150>)
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8004bfa:	8abb      	ldrh	r3, [r7, #20]
 8004bfc:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8004bfe:	89fb      	ldrh	r3, [r7, #14]
 8004c00:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d806      	bhi.n	8004c16 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8004c08:	89fb      	ldrh	r3, [r7, #14]
 8004c0a:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 8004c0e:	330e      	adds	r3, #14
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	81fb      	strh	r3, [r7, #14]
 8004c14:	e005      	b.n	8004c22 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8004c16:	89fb      	ldrh	r3, [r7, #14]
 8004c18:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8004c22:	89fb      	ldrh	r3, [r7, #14]
 8004c24:	4a2f      	ldr	r2, [pc, #188]	@ (8004ce4 <BSP_TS_GetState+0x154>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	08db      	lsrs	r3, r3, #3
 8004c2c:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8004c2e:	8afb      	ldrh	r3, [r7, #22]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d102      	bne.n	8004c3a <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	82fb      	strh	r3, [r7, #22]
 8004c38:	e008      	b.n	8004c4c <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8004c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ce8 <BSP_TS_GetState+0x158>)
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	8afa      	ldrh	r2, [r7, #22]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d903      	bls.n	8004c4c <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8004c44:	4b28      	ldr	r3, [pc, #160]	@ (8004ce8 <BSP_TS_GetState+0x158>)
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8004c4c:	8afb      	ldrh	r3, [r7, #22]
 8004c4e:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8004c50:	89fb      	ldrh	r3, [r7, #14]
 8004c52:	461a      	mov	r2, r3
 8004c54:	4b25      	ldr	r3, [pc, #148]	@ (8004cec <BSP_TS_GetState+0x15c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d906      	bls.n	8004c6a <BSP_TS_GetState+0xda>
 8004c5c:	89fa      	ldrh	r2, [r7, #14]
 8004c5e:	4b23      	ldr	r3, [pc, #140]	@ (8004cec <BSP_TS_GetState+0x15c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	e005      	b.n	8004c76 <BSP_TS_GetState+0xe6>
 8004c6a:	4b20      	ldr	r3, [pc, #128]	@ (8004cec <BSP_TS_GetState+0x15c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	89fb      	ldrh	r3, [r7, #14]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8004c78:	89bb      	ldrh	r3, [r7, #12]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8004cf0 <BSP_TS_GetState+0x160>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d906      	bls.n	8004c92 <BSP_TS_GetState+0x102>
 8004c84:	89ba      	ldrh	r2, [r7, #12]
 8004c86:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf0 <BSP_TS_GetState+0x160>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	e005      	b.n	8004c9e <BSP_TS_GetState+0x10e>
 8004c92:	4b17      	ldr	r3, [pc, #92]	@ (8004cf0 <BSP_TS_GetState+0x160>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	89bb      	ldrh	r3, [r7, #12]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8004ca0:	8a7a      	ldrh	r2, [r7, #18]
 8004ca2:	8a3b      	ldrh	r3, [r7, #16]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	2b05      	cmp	r3, #5
 8004ca8:	dd07      	ble.n	8004cba <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8004caa:	89fb      	ldrh	r3, [r7, #14]
 8004cac:	461a      	mov	r2, r3
 8004cae:	4b0f      	ldr	r3, [pc, #60]	@ (8004cec <BSP_TS_GetState+0x15c>)
 8004cb0:	601a      	str	r2, [r3, #0]
      _y = y; 
 8004cb2:	89bb      	ldrh	r3, [r7, #12]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf0 <BSP_TS_GetState+0x160>)
 8004cb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8004cba:	4b0c      	ldr	r3, [pc, #48]	@ (8004cec <BSP_TS_GetState+0x15c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8004cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf0 <BSP_TS_GetState+0x160>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	809a      	strh	r2, [r3, #4]
  }
}
 8004cce:	bf00      	nop
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000b48 	.word	0x20000b48
 8004cdc:	ba2e8ba3 	.word	0xba2e8ba3
 8004ce0:	20000b4e 	.word	0x20000b4e
 8004ce4:	88888889 	.word	0x88888889
 8004ce8:	20000b4c 	.word	0x20000b4c
 8004cec:	20000b50 	.word	0x20000b50
 8004cf0:	20000b54 	.word	0x20000b54

08004cf4 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 8004cf8:	4b03      	ldr	r3, [pc, #12]	@ (8004d08 <BSP_TS_ITClear+0x14>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	2082      	movs	r0, #130	@ 0x82
 8004d00:	4798      	blx	r3
}
 8004d02:	bf00      	nop
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000b48 	.word	0x20000b48

08004d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d10:	4b0e      	ldr	r3, [pc, #56]	@ (8004d4c <HAL_Init+0x40>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a0d      	ldr	r2, [pc, #52]	@ (8004d4c <HAL_Init+0x40>)
 8004d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <HAL_Init+0x40>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a0a      	ldr	r2, [pc, #40]	@ (8004d4c <HAL_Init+0x40>)
 8004d22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d28:	4b08      	ldr	r3, [pc, #32]	@ (8004d4c <HAL_Init+0x40>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a07      	ldr	r2, [pc, #28]	@ (8004d4c <HAL_Init+0x40>)
 8004d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d34:	2003      	movs	r0, #3
 8004d36:	f000 f94f 	bl	8004fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d3a:	200f      	movs	r0, #15
 8004d3c:	f000 f808 	bl	8004d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d40:	f7fd fe1c 	bl	800297c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40023c00 	.word	0x40023c00

08004d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d58:	4b12      	ldr	r3, [pc, #72]	@ (8004da4 <HAL_InitTick+0x54>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	4b12      	ldr	r3, [pc, #72]	@ (8004da8 <HAL_InitTick+0x58>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	4619      	mov	r1, r3
 8004d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 f967 	bl	8005042 <HAL_SYSTICK_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e00e      	b.n	8004d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b0f      	cmp	r3, #15
 8004d82:	d80a      	bhi.n	8004d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d84:	2200      	movs	r2, #0
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8c:	f000 f92f 	bl	8004fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d90:	4a06      	ldr	r2, [pc, #24]	@ (8004dac <HAL_InitTick+0x5c>)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	e000      	b.n	8004d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	20000100 	.word	0x20000100
 8004da8:	20000194 	.word	0x20000194
 8004dac:	20000190 	.word	0x20000190

08004db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004db4:	4b06      	ldr	r3, [pc, #24]	@ (8004dd0 <HAL_IncTick+0x20>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	4b06      	ldr	r3, [pc, #24]	@ (8004dd4 <HAL_IncTick+0x24>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	4a04      	ldr	r2, [pc, #16]	@ (8004dd4 <HAL_IncTick+0x24>)
 8004dc2:	6013      	str	r3, [r2, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	20000194 	.word	0x20000194
 8004dd4:	20000b58 	.word	0x20000b58

08004dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  return uwTick;
 8004ddc:	4b03      	ldr	r3, [pc, #12]	@ (8004dec <HAL_GetTick+0x14>)
 8004dde:	681b      	ldr	r3, [r3, #0]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20000b58 	.word	0x20000b58

08004df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004df8:	f7ff ffee 	bl	8004dd8 <HAL_GetTick>
 8004dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d005      	beq.n	8004e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e34 <HAL_Delay+0x44>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e16:	bf00      	nop
 8004e18:	f7ff ffde 	bl	8004dd8 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d8f7      	bhi.n	8004e18 <HAL_Delay+0x28>
  {
  }
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000194 	.word	0x20000194

08004e38 <__NVIC_SetPriorityGrouping>:
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e48:	4b0c      	ldr	r3, [pc, #48]	@ (8004e7c <__NVIC_SetPriorityGrouping+0x44>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e54:	4013      	ands	r3, r2
 8004e56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e6a:	4a04      	ldr	r2, [pc, #16]	@ (8004e7c <__NVIC_SetPriorityGrouping+0x44>)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	60d3      	str	r3, [r2, #12]
}
 8004e70:	bf00      	nop
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	e000ed00 	.word	0xe000ed00

08004e80 <__NVIC_GetPriorityGrouping>:
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e84:	4b04      	ldr	r3, [pc, #16]	@ (8004e98 <__NVIC_GetPriorityGrouping+0x18>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	0a1b      	lsrs	r3, r3, #8
 8004e8a:	f003 0307 	and.w	r3, r3, #7
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	e000ed00 	.word	0xe000ed00

08004e9c <__NVIC_EnableIRQ>:
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	db0b      	blt.n	8004ec6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eae:	79fb      	ldrb	r3, [r7, #7]
 8004eb0:	f003 021f 	and.w	r2, r3, #31
 8004eb4:	4907      	ldr	r1, [pc, #28]	@ (8004ed4 <__NVIC_EnableIRQ+0x38>)
 8004eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	2001      	movs	r0, #1
 8004ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8004ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	e000e100 	.word	0xe000e100

08004ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	6039      	str	r1, [r7, #0]
 8004ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	db0a      	blt.n	8004f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	490c      	ldr	r1, [pc, #48]	@ (8004f24 <__NVIC_SetPriority+0x4c>)
 8004ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef6:	0112      	lsls	r2, r2, #4
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	440b      	add	r3, r1
 8004efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f00:	e00a      	b.n	8004f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	4908      	ldr	r1, [pc, #32]	@ (8004f28 <__NVIC_SetPriority+0x50>)
 8004f08:	79fb      	ldrb	r3, [r7, #7]
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	3b04      	subs	r3, #4
 8004f10:	0112      	lsls	r2, r2, #4
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	440b      	add	r3, r1
 8004f16:	761a      	strb	r2, [r3, #24]
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	e000e100 	.word	0xe000e100
 8004f28:	e000ed00 	.word	0xe000ed00

08004f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b089      	sub	sp, #36	@ 0x24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f1c3 0307 	rsb	r3, r3, #7
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	bf28      	it	cs
 8004f4a:	2304      	movcs	r3, #4
 8004f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	3304      	adds	r3, #4
 8004f52:	2b06      	cmp	r3, #6
 8004f54:	d902      	bls.n	8004f5c <NVIC_EncodePriority+0x30>
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	3b03      	subs	r3, #3
 8004f5a:	e000      	b.n	8004f5e <NVIC_EncodePriority+0x32>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f60:	f04f 32ff 	mov.w	r2, #4294967295
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	43da      	mvns	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	401a      	ands	r2, r3
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f74:	f04f 31ff 	mov.w	r1, #4294967295
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7e:	43d9      	mvns	r1, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f84:	4313      	orrs	r3, r2
         );
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3724      	adds	r7, #36	@ 0x24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fa4:	d301      	bcc.n	8004faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e00f      	b.n	8004fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004faa:	4a0a      	ldr	r2, [pc, #40]	@ (8004fd4 <SysTick_Config+0x40>)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fb2:	210f      	movs	r1, #15
 8004fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb8:	f7ff ff8e 	bl	8004ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fbc:	4b05      	ldr	r3, [pc, #20]	@ (8004fd4 <SysTick_Config+0x40>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fc2:	4b04      	ldr	r3, [pc, #16]	@ (8004fd4 <SysTick_Config+0x40>)
 8004fc4:	2207      	movs	r2, #7
 8004fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	e000e010 	.word	0xe000e010

08004fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff ff29 	bl	8004e38 <__NVIC_SetPriorityGrouping>
}
 8004fe6:	bf00      	nop
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b086      	sub	sp, #24
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	607a      	str	r2, [r7, #4]
 8004ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005000:	f7ff ff3e 	bl	8004e80 <__NVIC_GetPriorityGrouping>
 8005004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	6978      	ldr	r0, [r7, #20]
 800500c:	f7ff ff8e 	bl	8004f2c <NVIC_EncodePriority>
 8005010:	4602      	mov	r2, r0
 8005012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005016:	4611      	mov	r1, r2
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff ff5d 	bl	8004ed8 <__NVIC_SetPriority>
}
 800501e:	bf00      	nop
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b082      	sub	sp, #8
 800502a:	af00      	add	r7, sp, #0
 800502c:	4603      	mov	r3, r0
 800502e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff ff31 	bl	8004e9c <__NVIC_EnableIRQ>
}
 800503a:	bf00      	nop
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b082      	sub	sp, #8
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7ff ffa2 	bl	8004f94 <SysTick_Config>
 8005050:	4603      	mov	r3, r0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005068:	f7ff feb6 	bl	8004dd8 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e099      	b.n	80051ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0201 	bic.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005098:	e00f      	b.n	80050ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800509a:	f7ff fe9d 	bl	8004dd8 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b05      	cmp	r3, #5
 80050a6:	d908      	bls.n	80050ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2203      	movs	r2, #3
 80050b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e078      	b.n	80051ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e8      	bne.n	800509a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4b38      	ldr	r3, [pc, #224]	@ (80051b4 <HAL_DMA_Init+0x158>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	2b04      	cmp	r3, #4
 8005112:	d107      	bne.n	8005124 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511c:	4313      	orrs	r3, r2
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	4313      	orrs	r3, r2
 8005122:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f023 0307 	bic.w	r3, r3, #7
 800513a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514a:	2b04      	cmp	r3, #4
 800514c:	d117      	bne.n	800517e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4313      	orrs	r3, r2
 8005156:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00e      	beq.n	800517e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f8bd 	bl	80052e0 <DMA_CheckFifoParam>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d008      	beq.n	800517e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2240      	movs	r2, #64	@ 0x40
 8005170:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800517a:	2301      	movs	r3, #1
 800517c:	e016      	b.n	80051ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f874 	bl	8005274 <DMA_CalcBaseAndBitshift>
 800518c:	4603      	mov	r3, r0
 800518e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005194:	223f      	movs	r2, #63	@ 0x3f
 8005196:	409a      	lsls	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	f010803f 	.word	0xf010803f

080051b8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e050      	b.n	800526c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d101      	bne.n	80051da <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80051d6:	2302      	movs	r3, #2
 80051d8:	e048      	b.n	800526c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0201 	bic.w	r2, r2, #1
 80051e8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2200      	movs	r2, #0
 80051f8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2200      	movs	r2, #0
 8005200:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2200      	movs	r2, #0
 8005208:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2200      	movs	r2, #0
 8005210:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2221      	movs	r2, #33	@ 0x21
 8005218:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f82a 	bl	8005274 <DMA_CalcBaseAndBitshift>
 8005220:	4603      	mov	r3, r0
 8005222:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800524c:	223f      	movs	r2, #63	@ 0x3f
 800524e:	409a      	lsls	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	3b10      	subs	r3, #16
 8005284:	4a14      	ldr	r2, [pc, #80]	@ (80052d8 <DMA_CalcBaseAndBitshift+0x64>)
 8005286:	fba2 2303 	umull	r2, r3, r2, r3
 800528a:	091b      	lsrs	r3, r3, #4
 800528c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800528e:	4a13      	ldr	r2, [pc, #76]	@ (80052dc <DMA_CalcBaseAndBitshift+0x68>)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4413      	add	r3, r2
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	461a      	mov	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d909      	bls.n	80052b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80052aa:	f023 0303 	bic.w	r3, r3, #3
 80052ae:	1d1a      	adds	r2, r3, #4
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80052b4:	e007      	b.n	80052c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80052be:	f023 0303 	bic.w	r3, r3, #3
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	aaaaaaab 	.word	0xaaaaaaab
 80052dc:	08010244 	.word	0x08010244

080052e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d11f      	bne.n	800533a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d856      	bhi.n	80053ae <DMA_CheckFifoParam+0xce>
 8005300:	a201      	add	r2, pc, #4	@ (adr r2, 8005308 <DMA_CheckFifoParam+0x28>)
 8005302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005306:	bf00      	nop
 8005308:	08005319 	.word	0x08005319
 800530c:	0800532b 	.word	0x0800532b
 8005310:	08005319 	.word	0x08005319
 8005314:	080053af 	.word	0x080053af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d046      	beq.n	80053b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005328:	e043      	b.n	80053b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005332:	d140      	bne.n	80053b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005338:	e03d      	b.n	80053b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005342:	d121      	bne.n	8005388 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b03      	cmp	r3, #3
 8005348:	d837      	bhi.n	80053ba <DMA_CheckFifoParam+0xda>
 800534a:	a201      	add	r2, pc, #4	@ (adr r2, 8005350 <DMA_CheckFifoParam+0x70>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	08005361 	.word	0x08005361
 8005354:	08005367 	.word	0x08005367
 8005358:	08005361 	.word	0x08005361
 800535c:	08005379 	.word	0x08005379
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	73fb      	strb	r3, [r7, #15]
      break;
 8005364:	e030      	b.n	80053c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d025      	beq.n	80053be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005376:	e022      	b.n	80053be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005380:	d11f      	bne.n	80053c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005386:	e01c      	b.n	80053c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d903      	bls.n	8005396 <DMA_CheckFifoParam+0xb6>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2b03      	cmp	r3, #3
 8005392:	d003      	beq.n	800539c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005394:	e018      	b.n	80053c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	73fb      	strb	r3, [r7, #15]
      break;
 800539a:	e015      	b.n	80053c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00e      	beq.n	80053c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	73fb      	strb	r3, [r7, #15]
      break;
 80053ac:	e00b      	b.n	80053c6 <DMA_CheckFifoParam+0xe6>
      break;
 80053ae:	bf00      	nop
 80053b0:	e00a      	b.n	80053c8 <DMA_CheckFifoParam+0xe8>
      break;
 80053b2:	bf00      	nop
 80053b4:	e008      	b.n	80053c8 <DMA_CheckFifoParam+0xe8>
      break;
 80053b6:	bf00      	nop
 80053b8:	e006      	b.n	80053c8 <DMA_CheckFifoParam+0xe8>
      break;
 80053ba:	bf00      	nop
 80053bc:	e004      	b.n	80053c8 <DMA_CheckFifoParam+0xe8>
      break;
 80053be:	bf00      	nop
 80053c0:	e002      	b.n	80053c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80053c2:	bf00      	nop
 80053c4:	e000      	b.n	80053c8 <DMA_CheckFifoParam+0xe8>
      break;
 80053c6:	bf00      	nop
    }
  } 
  
  return status; 
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop

080053d8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e03b      	b.n	8005462 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f833 	bl	800546a <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005428:	f023 0107 	bic.w	r1, r3, #7
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005442:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	68d1      	ldr	r1, [r2, #12]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6812      	ldr	r2, [r2, #0]
 800544e:	430b      	orrs	r3, r1
 8005450:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b086      	sub	sp, #24
 8005482:	af02      	add	r7, sp, #8
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	607a      	str	r2, [r7, #4]
 800548a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005492:	2b01      	cmp	r3, #1
 8005494:	d101      	bne.n	800549a <HAL_DMA2D_Start+0x1c>
 8005496:	2302      	movs	r3, #2
 8005498:	e018      	b.n	80054cc <HAL_DMA2D_Start+0x4e>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2202      	movs	r2, #2
 80054a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	68b9      	ldr	r1, [r7, #8]
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 f989 	bl	80057cc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f042 0201 	orr.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80054de:	2300      	movs	r3, #0
 80054e0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d056      	beq.n	800559e <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80054f0:	f7ff fc72 	bl	8004dd8 <HAL_GetTick>
 80054f4:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80054f6:	e04b      	b.n	8005590 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005506:	2b00      	cmp	r3, #0
 8005508:	d023      	beq.n	8005552 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005518:	f043 0202 	orr.w	r2, r3, #2
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d005      	beq.n	8005536 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800552e:	f043 0201 	orr.w	r2, r3, #1
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2221      	movs	r2, #33	@ 0x21
 800553c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2204      	movs	r2, #4
 8005542:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e0a5      	b.n	800569e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005558:	d01a      	beq.n	8005590 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800555a:	f7ff fc3d 	bl	8004dd8 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	429a      	cmp	r2, r3
 8005568:	d302      	bcc.n	8005570 <HAL_DMA2D_PollForTransfer+0x9c>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10f      	bne.n	8005590 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005574:	f043 0220 	orr.w	r2, r3, #32
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2203      	movs	r2, #3
 8005580:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e086      	b.n	800569e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0ac      	beq.n	80054f8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	f003 0320 	and.w	r3, r3, #32
 80055a8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d061      	beq.n	8005684 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80055c0:	f7ff fc0a 	bl	8004dd8 <HAL_GetTick>
 80055c4:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80055c6:	e056      	b.n	8005676 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d02e      	beq.n	8005638 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f003 0308 	and.w	r3, r3, #8
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e8:	f043 0204 	orr.w	r2, r3, #4
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d005      	beq.n	8005606 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055fe:	f043 0202 	orr.w	r2, r3, #2
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005614:	f043 0201 	orr.w	r2, r3, #1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2229      	movs	r2, #41	@ 0x29
 8005622:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2204      	movs	r2, #4
 8005628:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e032      	b.n	800569e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563e:	d01a      	beq.n	8005676 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005640:	f7ff fbca 	bl	8004dd8 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d302      	bcc.n	8005656 <HAL_DMA2D_PollForTransfer+0x182>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10f      	bne.n	8005676 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565a:	f043 0220 	orr.w	r2, r3, #32
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2203      	movs	r2, #3
 8005666:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e013      	b.n	800569e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0a1      	beq.n	80055c8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2212      	movs	r2, #18
 800568a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <HAL_DMA2D_ConfigLayer+0x20>
 80056c4:	2302      	movs	r3, #2
 80056c6:	e079      	b.n	80057bc <HAL_DMA2D_ConfigLayer+0x114>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	3318      	adds	r3, #24
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	4413      	add	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	041b      	lsls	r3, r3, #16
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80056f2:	4b35      	ldr	r3, [pc, #212]	@ (80057c8 <HAL_DMA2D_ConfigLayer+0x120>)
 80056f4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b0a      	cmp	r3, #10
 80056fc:	d003      	beq.n	8005706 <HAL_DMA2D_ConfigLayer+0x5e>
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b09      	cmp	r3, #9
 8005704:	d107      	bne.n	8005716 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4313      	orrs	r3, r2
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	e005      	b.n	8005722 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	061b      	lsls	r3, r3, #24
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d120      	bne.n	800576a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	43db      	mvns	r3, r3
 8005732:	ea02 0103 	and.w	r1, r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	430a      	orrs	r2, r1
 800573e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	6812      	ldr	r2, [r2, #0]
 8005748:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2b0a      	cmp	r3, #10
 8005750:	d003      	beq.n	800575a <HAL_DMA2D_ConfigLayer+0xb2>
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b09      	cmp	r3, #9
 8005758:	d127      	bne.n	80057aa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	68da      	ldr	r2, [r3, #12]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005766:	629a      	str	r2, [r3, #40]	@ 0x28
 8005768:	e01f      	b.n	80057aa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69da      	ldr	r2, [r3, #28]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	43db      	mvns	r3, r3
 8005774:	ea02 0103 	and.w	r1, r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	430a      	orrs	r2, r1
 8005780:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2b0a      	cmp	r3, #10
 8005792:	d003      	beq.n	800579c <HAL_DMA2D_ConfigLayer+0xf4>
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b09      	cmp	r3, #9
 800579a:	d106      	bne.n	80057aa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80057a8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	371c      	adds	r7, #28
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	ff03000f 	.word	0xff03000f

080057cc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b08b      	sub	sp, #44	@ 0x2c
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e0:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	041a      	lsls	r2, r3, #16
 80057e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ea:	431a      	orrs	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005804:	d174      	bne.n	80058f0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800580c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005814:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800581c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d108      	bne.n	800583e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	431a      	orrs	r2, r3
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	4313      	orrs	r3, r2
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	4313      	orrs	r3, r2
 800583a:	627b      	str	r3, [r7, #36]	@ 0x24
 800583c:	e053      	b.n	80058e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d106      	bne.n	8005854 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	4313      	orrs	r3, r2
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24
 8005852:	e048      	b.n	80058e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	2b02      	cmp	r3, #2
 800585a:	d111      	bne.n	8005880 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	0cdb      	lsrs	r3, r3, #19
 8005860:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	0a9b      	lsrs	r3, r3, #10
 8005866:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	08db      	lsrs	r3, r3, #3
 800586c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	02db      	lsls	r3, r3, #11
 8005876:	4313      	orrs	r3, r2
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	627b      	str	r3, [r7, #36]	@ 0x24
 800587e:	e032      	b.n	80058e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	2b03      	cmp	r3, #3
 8005886:	d117      	bne.n	80058b8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	0fdb      	lsrs	r3, r3, #31
 800588c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	0cdb      	lsrs	r3, r3, #19
 8005892:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	0adb      	lsrs	r3, r3, #11
 8005898:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	08db      	lsrs	r3, r3, #3
 800589e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	029b      	lsls	r3, r3, #10
 80058a8:	431a      	orrs	r2, r3
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	03db      	lsls	r3, r3, #15
 80058ae:	4313      	orrs	r3, r2
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80058b6:	e016      	b.n	80058e6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	0f1b      	lsrs	r3, r3, #28
 80058bc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	0d1b      	lsrs	r3, r3, #20
 80058c2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	0b1b      	lsrs	r3, r3, #12
 80058c8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	091b      	lsrs	r3, r3, #4
 80058ce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	011a      	lsls	r2, r3, #4
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	021b      	lsls	r3, r3, #8
 80058d8:	431a      	orrs	r2, r3
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	031b      	lsls	r3, r3, #12
 80058de:	4313      	orrs	r3, r2
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058ec:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80058ee:	e003      	b.n	80058f8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	60da      	str	r2, [r3, #12]
}
 80058f8:	bf00      	nop
 80058fa:	372c      	adds	r7, #44	@ 0x2c
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005904:	b480      	push	{r7}
 8005906:	b089      	sub	sp, #36	@ 0x24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800590e:	2300      	movs	r3, #0
 8005910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005912:	2300      	movs	r3, #0
 8005914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005916:	2300      	movs	r3, #0
 8005918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800591a:	2300      	movs	r3, #0
 800591c:	61fb      	str	r3, [r7, #28]
 800591e:	e177      	b.n	8005c10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005920:	2201      	movs	r2, #1
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	fa02 f303 	lsl.w	r3, r2, r3
 8005928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	4013      	ands	r3, r2
 8005932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	429a      	cmp	r2, r3
 800593a:	f040 8166 	bne.w	8005c0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d00b      	beq.n	800595e <HAL_GPIO_Init+0x5a>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d007      	beq.n	800595e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005952:	2b11      	cmp	r3, #17
 8005954:	d003      	beq.n	800595e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b12      	cmp	r3, #18
 800595c:	d130      	bne.n	80059c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	2203      	movs	r2, #3
 800596a:	fa02 f303 	lsl.w	r3, r2, r3
 800596e:	43db      	mvns	r3, r3
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	4013      	ands	r3, r2
 8005974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	fa02 f303 	lsl.w	r3, r2, r3
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	4313      	orrs	r3, r2
 8005986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005994:	2201      	movs	r2, #1
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	43db      	mvns	r3, r3
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	4013      	ands	r3, r2
 80059a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	091b      	lsrs	r3, r3, #4
 80059aa:	f003 0201 	and.w	r2, r3, #1
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	fa02 f303 	lsl.w	r3, r2, r3
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	2203      	movs	r2, #3
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	43db      	mvns	r3, r3
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	4013      	ands	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d003      	beq.n	8005a00 <HAL_GPIO_Init+0xfc>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2b12      	cmp	r3, #18
 80059fe:	d123      	bne.n	8005a48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	08da      	lsrs	r2, r3, #3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3208      	adds	r2, #8
 8005a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	220f      	movs	r2, #15
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	43db      	mvns	r3, r3
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	4013      	ands	r3, r2
 8005a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	08da      	lsrs	r2, r3, #3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	3208      	adds	r2, #8
 8005a42:	69b9      	ldr	r1, [r7, #24]
 8005a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	2203      	movs	r2, #3
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f003 0203 	and.w	r2, r3, #3
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 80c0 	beq.w	8005c0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	4b66      	ldr	r3, [pc, #408]	@ (8005c28 <HAL_GPIO_Init+0x324>)
 8005a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a92:	4a65      	ldr	r2, [pc, #404]	@ (8005c28 <HAL_GPIO_Init+0x324>)
 8005a94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a9a:	4b63      	ldr	r3, [pc, #396]	@ (8005c28 <HAL_GPIO_Init+0x324>)
 8005a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005aa6:	4a61      	ldr	r2, [pc, #388]	@ (8005c2c <HAL_GPIO_Init+0x328>)
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	089b      	lsrs	r3, r3, #2
 8005aac:	3302      	adds	r3, #2
 8005aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	220f      	movs	r2, #15
 8005abe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac2:	43db      	mvns	r3, r3
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a58      	ldr	r2, [pc, #352]	@ (8005c30 <HAL_GPIO_Init+0x32c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d037      	beq.n	8005b42 <HAL_GPIO_Init+0x23e>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a57      	ldr	r2, [pc, #348]	@ (8005c34 <HAL_GPIO_Init+0x330>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d031      	beq.n	8005b3e <HAL_GPIO_Init+0x23a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a56      	ldr	r2, [pc, #344]	@ (8005c38 <HAL_GPIO_Init+0x334>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d02b      	beq.n	8005b3a <HAL_GPIO_Init+0x236>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a55      	ldr	r2, [pc, #340]	@ (8005c3c <HAL_GPIO_Init+0x338>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d025      	beq.n	8005b36 <HAL_GPIO_Init+0x232>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a54      	ldr	r2, [pc, #336]	@ (8005c40 <HAL_GPIO_Init+0x33c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d01f      	beq.n	8005b32 <HAL_GPIO_Init+0x22e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a53      	ldr	r2, [pc, #332]	@ (8005c44 <HAL_GPIO_Init+0x340>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d019      	beq.n	8005b2e <HAL_GPIO_Init+0x22a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a52      	ldr	r2, [pc, #328]	@ (8005c48 <HAL_GPIO_Init+0x344>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d013      	beq.n	8005b2a <HAL_GPIO_Init+0x226>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a51      	ldr	r2, [pc, #324]	@ (8005c4c <HAL_GPIO_Init+0x348>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00d      	beq.n	8005b26 <HAL_GPIO_Init+0x222>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a50      	ldr	r2, [pc, #320]	@ (8005c50 <HAL_GPIO_Init+0x34c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d007      	beq.n	8005b22 <HAL_GPIO_Init+0x21e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a4f      	ldr	r2, [pc, #316]	@ (8005c54 <HAL_GPIO_Init+0x350>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d101      	bne.n	8005b1e <HAL_GPIO_Init+0x21a>
 8005b1a:	2309      	movs	r3, #9
 8005b1c:	e012      	b.n	8005b44 <HAL_GPIO_Init+0x240>
 8005b1e:	230a      	movs	r3, #10
 8005b20:	e010      	b.n	8005b44 <HAL_GPIO_Init+0x240>
 8005b22:	2308      	movs	r3, #8
 8005b24:	e00e      	b.n	8005b44 <HAL_GPIO_Init+0x240>
 8005b26:	2307      	movs	r3, #7
 8005b28:	e00c      	b.n	8005b44 <HAL_GPIO_Init+0x240>
 8005b2a:	2306      	movs	r3, #6
 8005b2c:	e00a      	b.n	8005b44 <HAL_GPIO_Init+0x240>
 8005b2e:	2305      	movs	r3, #5
 8005b30:	e008      	b.n	8005b44 <HAL_GPIO_Init+0x240>
 8005b32:	2304      	movs	r3, #4
 8005b34:	e006      	b.n	8005b44 <HAL_GPIO_Init+0x240>
 8005b36:	2303      	movs	r3, #3
 8005b38:	e004      	b.n	8005b44 <HAL_GPIO_Init+0x240>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	e002      	b.n	8005b44 <HAL_GPIO_Init+0x240>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e000      	b.n	8005b44 <HAL_GPIO_Init+0x240>
 8005b42:	2300      	movs	r3, #0
 8005b44:	69fa      	ldr	r2, [r7, #28]
 8005b46:	f002 0203 	and.w	r2, r2, #3
 8005b4a:	0092      	lsls	r2, r2, #2
 8005b4c:	4093      	lsls	r3, r2
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b54:	4935      	ldr	r1, [pc, #212]	@ (8005c2c <HAL_GPIO_Init+0x328>)
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	089b      	lsrs	r3, r3, #2
 8005b5a:	3302      	adds	r3, #2
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b62:	4b3d      	ldr	r3, [pc, #244]	@ (8005c58 <HAL_GPIO_Init+0x354>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	43db      	mvns	r3, r3
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b86:	4a34      	ldr	r2, [pc, #208]	@ (8005c58 <HAL_GPIO_Init+0x354>)
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005b8c:	4b32      	ldr	r3, [pc, #200]	@ (8005c58 <HAL_GPIO_Init+0x354>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	43db      	mvns	r3, r3
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d003      	beq.n	8005bb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005bb0:	4a29      	ldr	r2, [pc, #164]	@ (8005c58 <HAL_GPIO_Init+0x354>)
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bb6:	4b28      	ldr	r3, [pc, #160]	@ (8005c58 <HAL_GPIO_Init+0x354>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	43db      	mvns	r3, r3
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bda:	4a1f      	ldr	r2, [pc, #124]	@ (8005c58 <HAL_GPIO_Init+0x354>)
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005be0:	4b1d      	ldr	r3, [pc, #116]	@ (8005c58 <HAL_GPIO_Init+0x354>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	43db      	mvns	r3, r3
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	4013      	ands	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c04:	4a14      	ldr	r2, [pc, #80]	@ (8005c58 <HAL_GPIO_Init+0x354>)
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	61fb      	str	r3, [r7, #28]
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	2b0f      	cmp	r3, #15
 8005c14:	f67f ae84 	bls.w	8005920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c18:	bf00      	nop
 8005c1a:	bf00      	nop
 8005c1c:	3724      	adds	r7, #36	@ 0x24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	40013800 	.word	0x40013800
 8005c30:	40020000 	.word	0x40020000
 8005c34:	40020400 	.word	0x40020400
 8005c38:	40020800 	.word	0x40020800
 8005c3c:	40020c00 	.word	0x40020c00
 8005c40:	40021000 	.word	0x40021000
 8005c44:	40021400 	.word	0x40021400
 8005c48:	40021800 	.word	0x40021800
 8005c4c:	40021c00 	.word	0x40021c00
 8005c50:	40022000 	.word	0x40022000
 8005c54:	40022400 	.word	0x40022400
 8005c58:	40013c00 	.word	0x40013c00

08005c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	807b      	strh	r3, [r7, #2]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c6c:	787b      	ldrb	r3, [r7, #1]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c72:	887a      	ldrh	r2, [r7, #2]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c78:	e003      	b.n	8005c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c7a:	887b      	ldrh	r3, [r7, #2]
 8005c7c:	041a      	lsls	r2, r3, #16
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	619a      	str	r2, [r3, #24]
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	460b      	mov	r3, r1
 8005c98:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695a      	ldr	r2, [r3, #20]
 8005c9e:	887b      	ldrh	r3, [r7, #2]
 8005ca0:	401a      	ands	r2, r3
 8005ca2:	887b      	ldrh	r3, [r7, #2]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d104      	bne.n	8005cb2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ca8:	887b      	ldrh	r3, [r7, #2]
 8005caa:	041a      	lsls	r2, r3, #16
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005cb0:	e002      	b.n	8005cb8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005cb2:	887a      	ldrh	r2, [r7, #2]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	619a      	str	r2, [r3, #24]
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e12b      	b.n	8005f2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f95d 	bl	8005faa <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2224      	movs	r2, #36	@ 0x24
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0201 	bic.w	r2, r2, #1
 8005d06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d28:	f001 ff1a 	bl	8007b60 <HAL_RCC_GetPCLK1Freq>
 8005d2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	4a81      	ldr	r2, [pc, #516]	@ (8005f38 <HAL_I2C_Init+0x274>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d807      	bhi.n	8005d48 <HAL_I2C_Init+0x84>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4a80      	ldr	r2, [pc, #512]	@ (8005f3c <HAL_I2C_Init+0x278>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	bf94      	ite	ls
 8005d40:	2301      	movls	r3, #1
 8005d42:	2300      	movhi	r3, #0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	e006      	b.n	8005d56 <HAL_I2C_Init+0x92>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4a7d      	ldr	r2, [pc, #500]	@ (8005f40 <HAL_I2C_Init+0x27c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	bf94      	ite	ls
 8005d50:	2301      	movls	r3, #1
 8005d52:	2300      	movhi	r3, #0
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e0e7      	b.n	8005f2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	4a78      	ldr	r2, [pc, #480]	@ (8005f44 <HAL_I2C_Init+0x280>)
 8005d62:	fba2 2303 	umull	r2, r3, r2, r3
 8005d66:	0c9b      	lsrs	r3, r3, #18
 8005d68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	4a6a      	ldr	r2, [pc, #424]	@ (8005f38 <HAL_I2C_Init+0x274>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d802      	bhi.n	8005d98 <HAL_I2C_Init+0xd4>
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	3301      	adds	r3, #1
 8005d96:	e009      	b.n	8005dac <HAL_I2C_Init+0xe8>
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005d9e:	fb02 f303 	mul.w	r3, r2, r3
 8005da2:	4a69      	ldr	r2, [pc, #420]	@ (8005f48 <HAL_I2C_Init+0x284>)
 8005da4:	fba2 2303 	umull	r2, r3, r2, r3
 8005da8:	099b      	lsrs	r3, r3, #6
 8005daa:	3301      	adds	r3, #1
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6812      	ldr	r2, [r2, #0]
 8005db0:	430b      	orrs	r3, r1
 8005db2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005dbe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	495c      	ldr	r1, [pc, #368]	@ (8005f38 <HAL_I2C_Init+0x274>)
 8005dc8:	428b      	cmp	r3, r1
 8005dca:	d819      	bhi.n	8005e00 <HAL_I2C_Init+0x13c>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	1e59      	subs	r1, r3, #1
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dda:	1c59      	adds	r1, r3, #1
 8005ddc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005de0:	400b      	ands	r3, r1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <HAL_I2C_Init+0x138>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	1e59      	subs	r1, r3, #1
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005df4:	3301      	adds	r3, #1
 8005df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dfa:	e051      	b.n	8005ea0 <HAL_I2C_Init+0x1dc>
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	e04f      	b.n	8005ea0 <HAL_I2C_Init+0x1dc>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d111      	bne.n	8005e2c <HAL_I2C_Init+0x168>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	1e58      	subs	r0, r3, #1
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6859      	ldr	r1, [r3, #4]
 8005e10:	460b      	mov	r3, r1
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	440b      	add	r3, r1
 8005e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	bf0c      	ite	eq
 8005e24:	2301      	moveq	r3, #1
 8005e26:	2300      	movne	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	e012      	b.n	8005e52 <HAL_I2C_Init+0x18e>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	1e58      	subs	r0, r3, #1
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6859      	ldr	r1, [r3, #4]
 8005e34:	460b      	mov	r3, r1
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	440b      	add	r3, r1
 8005e3a:	0099      	lsls	r1, r3, #2
 8005e3c:	440b      	add	r3, r1
 8005e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e42:	3301      	adds	r3, #1
 8005e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	bf0c      	ite	eq
 8005e4c:	2301      	moveq	r3, #1
 8005e4e:	2300      	movne	r3, #0
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <HAL_I2C_Init+0x196>
 8005e56:	2301      	movs	r3, #1
 8005e58:	e022      	b.n	8005ea0 <HAL_I2C_Init+0x1dc>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10e      	bne.n	8005e80 <HAL_I2C_Init+0x1bc>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	1e58      	subs	r0, r3, #1
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6859      	ldr	r1, [r3, #4]
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	440b      	add	r3, r1
 8005e70:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e74:	3301      	adds	r3, #1
 8005e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e7e:	e00f      	b.n	8005ea0 <HAL_I2C_Init+0x1dc>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	1e58      	subs	r0, r3, #1
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6859      	ldr	r1, [r3, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	440b      	add	r3, r1
 8005e8e:	0099      	lsls	r1, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e96:	3301      	adds	r3, #1
 8005e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	6809      	ldr	r1, [r1, #0]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	69da      	ldr	r2, [r3, #28]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005ece:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6911      	ldr	r1, [r2, #16]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	68d2      	ldr	r2, [r2, #12]
 8005eda:	4311      	orrs	r1, r2
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6812      	ldr	r2, [r2, #0]
 8005ee0:	430b      	orrs	r3, r1
 8005ee2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	695a      	ldr	r2, [r3, #20]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0201 	orr.w	r2, r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	000186a0 	.word	0x000186a0
 8005f3c:	001e847f 	.word	0x001e847f
 8005f40:	003d08ff 	.word	0x003d08ff
 8005f44:	431bde83 	.word	0x431bde83
 8005f48:	10624dd3 	.word	0x10624dd3

08005f4c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e021      	b.n	8005fa2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2224      	movs	r2, #36	@ 0x24
 8005f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 0201 	bic.w	r2, r2, #1
 8005f74:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f821 	bl	8005fbe <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
	...

08005fd4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	4608      	mov	r0, r1
 8005fde:	4611      	mov	r1, r2
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	817b      	strh	r3, [r7, #10]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	813b      	strh	r3, [r7, #8]
 8005fea:	4613      	mov	r3, r2
 8005fec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fee:	f7fe fef3 	bl	8004dd8 <HAL_GetTick>
 8005ff2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b20      	cmp	r3, #32
 8005ffe:	f040 80d9 	bne.w	80061b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	2319      	movs	r3, #25
 8006008:	2201      	movs	r2, #1
 800600a:	496d      	ldr	r1, [pc, #436]	@ (80061c0 <HAL_I2C_Mem_Write+0x1ec>)
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 fc89 	bl	8006924 <I2C_WaitOnFlagUntilTimeout>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006018:	2302      	movs	r3, #2
 800601a:	e0cc      	b.n	80061b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006022:	2b01      	cmp	r3, #1
 8006024:	d101      	bne.n	800602a <HAL_I2C_Mem_Write+0x56>
 8006026:	2302      	movs	r3, #2
 8006028:	e0c5      	b.n	80061b6 <HAL_I2C_Mem_Write+0x1e2>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b01      	cmp	r3, #1
 800603e:	d007      	beq.n	8006050 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0201 	orr.w	r2, r2, #1
 800604e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800605e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2221      	movs	r2, #33	@ 0x21
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2240      	movs	r2, #64	@ 0x40
 800606c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a3a      	ldr	r2, [r7, #32]
 800607a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006080:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006086:	b29a      	uxth	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4a4d      	ldr	r2, [pc, #308]	@ (80061c4 <HAL_I2C_Mem_Write+0x1f0>)
 8006090:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006092:	88f8      	ldrh	r0, [r7, #6]
 8006094:	893a      	ldrh	r2, [r7, #8]
 8006096:	8979      	ldrh	r1, [r7, #10]
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	9301      	str	r3, [sp, #4]
 800609c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	4603      	mov	r3, r0
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 fac4 	bl	8006630 <I2C_RequestMemoryWrite>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d052      	beq.n	8006154 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e081      	b.n	80061b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 fd0a 	bl	8006ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00d      	beq.n	80060de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d107      	bne.n	80060da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e06b      	b.n	80061b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e2:	781a      	ldrb	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060f8:	3b01      	subs	r3, #1
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006104:	b29b      	uxth	r3, r3
 8006106:	3b01      	subs	r3, #1
 8006108:	b29a      	uxth	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b04      	cmp	r3, #4
 800611a:	d11b      	bne.n	8006154 <HAL_I2C_Mem_Write+0x180>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006120:	2b00      	cmp	r3, #0
 8006122:	d017      	beq.n	8006154 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006128:	781a      	ldrb	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006134:	1c5a      	adds	r2, r3, #1
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800614a:	b29b      	uxth	r3, r3
 800614c:	3b01      	subs	r3, #1
 800614e:	b29a      	uxth	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1aa      	bne.n	80060b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 fcf6 	bl	8006b52 <I2C_WaitOnBTFFlagUntilTimeout>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00d      	beq.n	8006188 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006170:	2b04      	cmp	r3, #4
 8006172:	d107      	bne.n	8006184 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006182:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e016      	b.n	80061b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	e000      	b.n	80061b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80061b4:	2302      	movs	r3, #2
  }
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	00100002 	.word	0x00100002
 80061c4:	ffff0000 	.word	0xffff0000

080061c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08c      	sub	sp, #48	@ 0x30
 80061cc:	af02      	add	r7, sp, #8
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	4608      	mov	r0, r1
 80061d2:	4611      	mov	r1, r2
 80061d4:	461a      	mov	r2, r3
 80061d6:	4603      	mov	r3, r0
 80061d8:	817b      	strh	r3, [r7, #10]
 80061da:	460b      	mov	r3, r1
 80061dc:	813b      	strh	r3, [r7, #8]
 80061de:	4613      	mov	r3, r2
 80061e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061e2:	f7fe fdf9 	bl	8004dd8 <HAL_GetTick>
 80061e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	f040 8208 	bne.w	8006606 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	2319      	movs	r3, #25
 80061fc:	2201      	movs	r2, #1
 80061fe:	497b      	ldr	r1, [pc, #492]	@ (80063ec <HAL_I2C_Mem_Read+0x224>)
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 fb8f 	bl	8006924 <I2C_WaitOnFlagUntilTimeout>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800620c:	2302      	movs	r3, #2
 800620e:	e1fb      	b.n	8006608 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006216:	2b01      	cmp	r3, #1
 8006218:	d101      	bne.n	800621e <HAL_I2C_Mem_Read+0x56>
 800621a:	2302      	movs	r3, #2
 800621c:	e1f4      	b.n	8006608 <HAL_I2C_Mem_Read+0x440>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b01      	cmp	r3, #1
 8006232:	d007      	beq.n	8006244 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0201 	orr.w	r2, r2, #1
 8006242:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006252:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2222      	movs	r2, #34	@ 0x22
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2240      	movs	r2, #64	@ 0x40
 8006260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800626e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006274:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800627a:	b29a      	uxth	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4a5b      	ldr	r2, [pc, #364]	@ (80063f0 <HAL_I2C_Mem_Read+0x228>)
 8006284:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006286:	88f8      	ldrh	r0, [r7, #6]
 8006288:	893a      	ldrh	r2, [r7, #8]
 800628a:	8979      	ldrh	r1, [r7, #10]
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	9301      	str	r3, [sp, #4]
 8006290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	4603      	mov	r3, r0
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f000 fa5e 	bl	8006758 <I2C_RequestMemoryRead>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e1b0      	b.n	8006608 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d113      	bne.n	80062d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ae:	2300      	movs	r3, #0
 80062b0:	623b      	str	r3, [r7, #32]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	623b      	str	r3, [r7, #32]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	623b      	str	r3, [r7, #32]
 80062c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	e184      	b.n	80065e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d11b      	bne.n	8006316 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ee:	2300      	movs	r3, #0
 80062f0:	61fb      	str	r3, [r7, #28]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	61fb      	str	r3, [r7, #28]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	61fb      	str	r3, [r7, #28]
 8006302:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	e164      	b.n	80065e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800631a:	2b02      	cmp	r3, #2
 800631c:	d11b      	bne.n	8006356 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800632c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800633c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800633e:	2300      	movs	r3, #0
 8006340:	61bb      	str	r3, [r7, #24]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	61bb      	str	r3, [r7, #24]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	61bb      	str	r3, [r7, #24]
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	e144      	b.n	80065e0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006356:	2300      	movs	r3, #0
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800636c:	e138      	b.n	80065e0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006372:	2b03      	cmp	r3, #3
 8006374:	f200 80f1 	bhi.w	800655a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800637c:	2b01      	cmp	r3, #1
 800637e:	d123      	bne.n	80063c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006382:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 fc25 	bl	8006bd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e139      	b.n	8006608 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691a      	ldr	r2, [r3, #16]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80063c6:	e10b      	b.n	80065e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d14e      	bne.n	800646e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d6:	2200      	movs	r2, #0
 80063d8:	4906      	ldr	r1, [pc, #24]	@ (80063f4 <HAL_I2C_Mem_Read+0x22c>)
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 faa2 	bl	8006924 <I2C_WaitOnFlagUntilTimeout>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d008      	beq.n	80063f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e10e      	b.n	8006608 <HAL_I2C_Mem_Read+0x440>
 80063ea:	bf00      	nop
 80063ec:	00100002 	.word	0x00100002
 80063f0:	ffff0000 	.word	0xffff0000
 80063f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006406:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	691a      	ldr	r2, [r3, #16]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006424:	3b01      	subs	r3, #1
 8006426:	b29a      	uxth	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006430:	b29b      	uxth	r3, r3
 8006432:	3b01      	subs	r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	691a      	ldr	r2, [r3, #16]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006444:	b2d2      	uxtb	r2, r2
 8006446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006456:	3b01      	subs	r3, #1
 8006458:	b29a      	uxth	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006462:	b29b      	uxth	r3, r3
 8006464:	3b01      	subs	r3, #1
 8006466:	b29a      	uxth	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800646c:	e0b8      	b.n	80065e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800646e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006474:	2200      	movs	r2, #0
 8006476:	4966      	ldr	r1, [pc, #408]	@ (8006610 <HAL_I2C_Mem_Read+0x448>)
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 fa53 	bl	8006924 <I2C_WaitOnFlagUntilTimeout>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e0bf      	b.n	8006608 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	691a      	ldr	r2, [r3, #16]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064b4:	3b01      	subs	r3, #1
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	3b01      	subs	r3, #1
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d0:	2200      	movs	r2, #0
 80064d2:	494f      	ldr	r1, [pc, #316]	@ (8006610 <HAL_I2C_Mem_Read+0x448>)
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 fa25 	bl	8006924 <I2C_WaitOnFlagUntilTimeout>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e091      	b.n	8006608 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	691a      	ldr	r2, [r3, #16]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006510:	3b01      	subs	r3, #1
 8006512:	b29a      	uxth	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800651c:	b29b      	uxth	r3, r3
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	691a      	ldr	r2, [r3, #16]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006530:	b2d2      	uxtb	r2, r2
 8006532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006538:	1c5a      	adds	r2, r3, #1
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006542:	3b01      	subs	r3, #1
 8006544:	b29a      	uxth	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800654e:	b29b      	uxth	r3, r3
 8006550:	3b01      	subs	r3, #1
 8006552:	b29a      	uxth	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006558:	e042      	b.n	80065e0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800655a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800655c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 fb38 	bl	8006bd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e04c      	b.n	8006608 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	691a      	ldr	r2, [r3, #16]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006578:	b2d2      	uxtb	r2, r2
 800657a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800658a:	3b01      	subs	r3, #1
 800658c:	b29a      	uxth	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006596:	b29b      	uxth	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	f003 0304 	and.w	r3, r3, #4
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	d118      	bne.n	80065e0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b8:	b2d2      	uxtb	r2, r2
 80065ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	3b01      	subs	r3, #1
 80065da:	b29a      	uxth	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f47f aec2 	bne.w	800636e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	e000      	b.n	8006608 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006606:	2302      	movs	r3, #2
  }
}
 8006608:	4618      	mov	r0, r3
 800660a:	3728      	adds	r7, #40	@ 0x28
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	00010004 	.word	0x00010004

08006614 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006622:	b2db      	uxtb	r3, r3
}
 8006624:	4618      	mov	r0, r3
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b088      	sub	sp, #32
 8006634:	af02      	add	r7, sp, #8
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	4608      	mov	r0, r1
 800663a:	4611      	mov	r1, r2
 800663c:	461a      	mov	r2, r3
 800663e:	4603      	mov	r3, r0
 8006640:	817b      	strh	r3, [r7, #10]
 8006642:	460b      	mov	r3, r1
 8006644:	813b      	strh	r3, [r7, #8]
 8006646:	4613      	mov	r3, r2
 8006648:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006658:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	2200      	movs	r2, #0
 8006662:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 f95c 	bl	8006924 <I2C_WaitOnFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00c      	beq.n	800668c <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006686:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e05f      	b.n	800674c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800668c:	897b      	ldrh	r3, [r7, #10]
 800668e:	b2db      	uxtb	r3, r3
 8006690:	461a      	mov	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800669a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800669c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669e:	6a3a      	ldr	r2, [r7, #32]
 80066a0:	492c      	ldr	r1, [pc, #176]	@ (8006754 <I2C_RequestMemoryWrite+0x124>)
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 f995 	bl	80069d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e04c      	b.n	800674c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066b2:	2300      	movs	r3, #0
 80066b4:	617b      	str	r3, [r7, #20]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	617b      	str	r3, [r7, #20]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ca:	6a39      	ldr	r1, [r7, #32]
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 f9ff 	bl	8006ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00d      	beq.n	80066f4 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066dc:	2b04      	cmp	r3, #4
 80066de:	d107      	bne.n	80066f0 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e02b      	b.n	800674c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066f4:	88fb      	ldrh	r3, [r7, #6]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d105      	bne.n	8006706 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066fa:	893b      	ldrh	r3, [r7, #8]
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	611a      	str	r2, [r3, #16]
 8006704:	e021      	b.n	800674a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006706:	893b      	ldrh	r3, [r7, #8]
 8006708:	0a1b      	lsrs	r3, r3, #8
 800670a:	b29b      	uxth	r3, r3
 800670c:	b2da      	uxtb	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006716:	6a39      	ldr	r1, [r7, #32]
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 f9d9 	bl	8006ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00d      	beq.n	8006740 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006728:	2b04      	cmp	r3, #4
 800672a:	d107      	bne.n	800673c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800673a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e005      	b.n	800674c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006740:	893b      	ldrh	r3, [r7, #8]
 8006742:	b2da      	uxtb	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3718      	adds	r7, #24
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	00010002 	.word	0x00010002

08006758 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af02      	add	r7, sp, #8
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	4608      	mov	r0, r1
 8006762:	4611      	mov	r1, r2
 8006764:	461a      	mov	r2, r3
 8006766:	4603      	mov	r3, r0
 8006768:	817b      	strh	r3, [r7, #10]
 800676a:	460b      	mov	r3, r1
 800676c:	813b      	strh	r3, [r7, #8]
 800676e:	4613      	mov	r3, r2
 8006770:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006780:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006790:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	2200      	movs	r2, #0
 800679a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 f8c0 	bl	8006924 <I2C_WaitOnFlagUntilTimeout>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00c      	beq.n	80067c4 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d003      	beq.n	80067c0 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e0a9      	b.n	8006918 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067c4:	897b      	ldrh	r3, [r7, #10]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	461a      	mov	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80067d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d6:	6a3a      	ldr	r2, [r7, #32]
 80067d8:	4951      	ldr	r1, [pc, #324]	@ (8006920 <I2C_RequestMemoryRead+0x1c8>)
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 f8f9 	bl	80069d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e096      	b.n	8006918 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	617b      	str	r3, [r7, #20]
 80067fe:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006802:	6a39      	ldr	r1, [r7, #32]
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 f963 	bl	8006ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00d      	beq.n	800682c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006814:	2b04      	cmp	r3, #4
 8006816:	d107      	bne.n	8006828 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006826:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e075      	b.n	8006918 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800682c:	88fb      	ldrh	r3, [r7, #6]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d105      	bne.n	800683e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006832:	893b      	ldrh	r3, [r7, #8]
 8006834:	b2da      	uxtb	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	611a      	str	r2, [r3, #16]
 800683c:	e021      	b.n	8006882 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800683e:	893b      	ldrh	r3, [r7, #8]
 8006840:	0a1b      	lsrs	r3, r3, #8
 8006842:	b29b      	uxth	r3, r3
 8006844:	b2da      	uxtb	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800684c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800684e:	6a39      	ldr	r1, [r7, #32]
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 f93d 	bl	8006ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00d      	beq.n	8006878 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006860:	2b04      	cmp	r3, #4
 8006862:	d107      	bne.n	8006874 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006872:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e04f      	b.n	8006918 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006878:	893b      	ldrh	r3, [r7, #8]
 800687a:	b2da      	uxtb	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006884:	6a39      	ldr	r1, [r7, #32]
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 f922 	bl	8006ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00d      	beq.n	80068ae <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006896:	2b04      	cmp	r3, #4
 8006898:	d107      	bne.n	80068aa <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e034      	b.n	8006918 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 f82a 	bl	8006924 <I2C_WaitOnFlagUntilTimeout>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00c      	beq.n	80068f0 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e013      	b.n	8006918 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80068f0:	897b      	ldrh	r3, [r7, #10]
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	f043 0301 	orr.w	r3, r3, #1
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006902:	6a3a      	ldr	r2, [r7, #32]
 8006904:	4906      	ldr	r1, [pc, #24]	@ (8006920 <I2C_RequestMemoryRead+0x1c8>)
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 f863 	bl	80069d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e000      	b.n	8006918 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	00010002 	.word	0x00010002

08006924 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	603b      	str	r3, [r7, #0]
 8006930:	4613      	mov	r3, r2
 8006932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006934:	e025      	b.n	8006982 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693c:	d021      	beq.n	8006982 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800693e:	f7fe fa4b 	bl	8004dd8 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d302      	bcc.n	8006954 <I2C_WaitOnFlagUntilTimeout+0x30>
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d116      	bne.n	8006982 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2220      	movs	r2, #32
 800695e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696e:	f043 0220 	orr.w	r2, r3, #32
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e023      	b.n	80069ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	0c1b      	lsrs	r3, r3, #16
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b01      	cmp	r3, #1
 800698a:	d10d      	bne.n	80069a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	43da      	mvns	r2, r3
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	4013      	ands	r3, r2
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	bf0c      	ite	eq
 800699e:	2301      	moveq	r3, #1
 80069a0:	2300      	movne	r3, #0
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	461a      	mov	r2, r3
 80069a6:	e00c      	b.n	80069c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	43da      	mvns	r2, r3
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	4013      	ands	r3, r2
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	bf0c      	ite	eq
 80069ba:	2301      	moveq	r3, #1
 80069bc:	2300      	movne	r3, #0
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	461a      	mov	r2, r3
 80069c2:	79fb      	ldrb	r3, [r7, #7]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d0b6      	beq.n	8006936 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	607a      	str	r2, [r7, #4]
 80069de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069e0:	e051      	b.n	8006a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069f0:	d123      	bne.n	8006a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a26:	f043 0204 	orr.w	r2, r3, #4
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e046      	b.n	8006ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a40:	d021      	beq.n	8006a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a42:	f7fe f9c9 	bl	8004dd8 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d302      	bcc.n	8006a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d116      	bne.n	8006a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a72:	f043 0220 	orr.w	r2, r3, #32
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e020      	b.n	8006ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	0c1b      	lsrs	r3, r3, #16
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d10c      	bne.n	8006aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	43da      	mvns	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	bf14      	ite	ne
 8006aa2:	2301      	movne	r3, #1
 8006aa4:	2300      	moveq	r3, #0
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	e00b      	b.n	8006ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	43da      	mvns	r2, r3
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	bf14      	ite	ne
 8006abc:	2301      	movne	r3, #1
 8006abe:	2300      	moveq	r3, #0
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d18d      	bne.n	80069e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006adc:	e02d      	b.n	8006b3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 f8ce 	bl	8006c80 <I2C_IsAcknowledgeFailed>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e02d      	b.n	8006b4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af4:	d021      	beq.n	8006b3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af6:	f7fe f96f 	bl	8004dd8 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d302      	bcc.n	8006b0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d116      	bne.n	8006b3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b26:	f043 0220 	orr.w	r2, r3, #32
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e007      	b.n	8006b4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b44:	2b80      	cmp	r3, #128	@ 0x80
 8006b46:	d1ca      	bne.n	8006ade <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	60f8      	str	r0, [r7, #12]
 8006b5a:	60b9      	str	r1, [r7, #8]
 8006b5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b5e:	e02d      	b.n	8006bbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 f88d 	bl	8006c80 <I2C_IsAcknowledgeFailed>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e02d      	b.n	8006bcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b76:	d021      	beq.n	8006bbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b78:	f7fe f92e 	bl	8004dd8 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d302      	bcc.n	8006b8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d116      	bne.n	8006bbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2220      	movs	r2, #32
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba8:	f043 0220 	orr.w	r2, r3, #32
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e007      	b.n	8006bcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	f003 0304 	and.w	r3, r3, #4
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d1ca      	bne.n	8006b60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006be0:	e042      	b.n	8006c68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	f003 0310 	and.w	r3, r3, #16
 8006bec:	2b10      	cmp	r3, #16
 8006bee:	d119      	bne.n	8006c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f06f 0210 	mvn.w	r2, #16
 8006bf8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e029      	b.n	8006c78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c24:	f7fe f8d8 	bl	8004dd8 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d302      	bcc.n	8006c3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d116      	bne.n	8006c68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c54:	f043 0220 	orr.w	r2, r3, #32
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e007      	b.n	8006c78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c72:	2b40      	cmp	r3, #64	@ 0x40
 8006c74:	d1b5      	bne.n	8006be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c96:	d11b      	bne.n	8006cd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006ca0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2220      	movs	r2, #32
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cbc:	f043 0204 	orr.w	r2, r3, #4
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e000      	b.n	8006cd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
	...

08006ce0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e0bf      	b.n	8006e72 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d106      	bne.n	8006d0c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f8ba 	bl	8006e80 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699a      	ldr	r2, [r3, #24]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006d22:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6999      	ldr	r1, [r3, #24]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d38:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6899      	ldr	r1, [r3, #8]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	4b4a      	ldr	r3, [pc, #296]	@ (8006e7c <HAL_LTDC_Init+0x19c>)
 8006d54:	400b      	ands	r3, r1
 8006d56:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	041b      	lsls	r3, r3, #16
 8006d5e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6899      	ldr	r1, [r3, #8]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699a      	ldr	r2, [r3, #24]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68d9      	ldr	r1, [r3, #12]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	4b3e      	ldr	r3, [pc, #248]	@ (8006e7c <HAL_LTDC_Init+0x19c>)
 8006d82:	400b      	ands	r3, r1
 8006d84:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	041b      	lsls	r3, r3, #16
 8006d8c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68d9      	ldr	r1, [r3, #12]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a1a      	ldr	r2, [r3, #32]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6919      	ldr	r1, [r3, #16]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	4b33      	ldr	r3, [pc, #204]	@ (8006e7c <HAL_LTDC_Init+0x19c>)
 8006db0:	400b      	ands	r3, r1
 8006db2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db8:	041b      	lsls	r3, r3, #16
 8006dba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6919      	ldr	r1, [r3, #16]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6959      	ldr	r1, [r3, #20]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	4b27      	ldr	r3, [pc, #156]	@ (8006e7c <HAL_LTDC_Init+0x19c>)
 8006dde:	400b      	ands	r3, r1
 8006de0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de6:	041b      	lsls	r3, r3, #16
 8006de8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6959      	ldr	r1, [r3, #20]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	431a      	orrs	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006e06:	021b      	lsls	r3, r3, #8
 8006e08:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006e10:	041b      	lsls	r3, r3, #16
 8006e12:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006e22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006e36:	431a      	orrs	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 0206 	orr.w	r2, r2, #6
 8006e4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699a      	ldr	r2, [r3, #24]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0201 	orr.w	r2, r2, #1
 8006e5e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	f000f800 	.word	0xf000f800

08006e80 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006e94:	b5b0      	push	{r4, r5, r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d101      	bne.n	8006eae <HAL_LTDC_ConfigLayer+0x1a>
 8006eaa:	2302      	movs	r3, #2
 8006eac:	e02c      	b.n	8006f08 <HAL_LTDC_ConfigLayer+0x74>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2202      	movs	r2, #2
 8006eba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2134      	movs	r1, #52	@ 0x34
 8006ec4:	fb01 f303 	mul.w	r3, r1, r3
 8006ec8:	4413      	add	r3, r2
 8006eca:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	4614      	mov	r4, r2
 8006ed2:	461d      	mov	r5, r3
 8006ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ee0:	682b      	ldr	r3, [r5, #0]
 8006ee2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	68b9      	ldr	r1, [r7, #8]
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 f83b 	bl	8006f64 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bdb0      	pop	{r4, r5, r7, pc}

08006f10 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d101      	bne.n	8006f26 <HAL_LTDC_EnableDither+0x16>
 8006f22:	2302      	movs	r3, #2
 8006f24:	e016      	b.n	8006f54 <HAL_LTDC_EnableDither+0x44>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2202      	movs	r2, #2
 8006f32:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006f36:	4b0a      	ldr	r3, [pc, #40]	@ (8006f60 <HAL_LTDC_EnableDither+0x50>)
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	4a09      	ldr	r2, [pc, #36]	@ (8006f60 <HAL_LTDC_EnableDither+0x50>)
 8006f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f40:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	40016800 	.word	0x40016800

08006f64 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b089      	sub	sp, #36	@ 0x24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	0c1b      	lsrs	r3, r3, #16
 8006f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f80:	4413      	add	r3, r2
 8006f82:	041b      	lsls	r3, r3, #16
 8006f84:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	01db      	lsls	r3, r3, #7
 8006f90:	4413      	add	r3, r2
 8006f92:	3384      	adds	r3, #132	@ 0x84
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	6812      	ldr	r2, [r2, #0]
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	01d2      	lsls	r2, r2, #7
 8006fa0:	440a      	add	r2, r1
 8006fa2:	3284      	adds	r2, #132	@ 0x84
 8006fa4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006fa8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	0c1b      	lsrs	r3, r3, #16
 8006fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fba:	4413      	add	r3, r2
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	01db      	lsls	r3, r3, #7
 8006fc8:	440b      	add	r3, r1
 8006fca:	3384      	adds	r3, #132	@ 0x84
 8006fcc:	4619      	mov	r1, r3
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	68da      	ldr	r2, [r3, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fe2:	4413      	add	r3, r2
 8006fe4:	041b      	lsls	r3, r3, #16
 8006fe6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	461a      	mov	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	01db      	lsls	r3, r3, #7
 8006ff2:	4413      	add	r3, r2
 8006ff4:	3384      	adds	r3, #132	@ 0x84
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	6812      	ldr	r2, [r2, #0]
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	01d2      	lsls	r2, r2, #7
 8007002:	440a      	add	r2, r1
 8007004:	3284      	adds	r2, #132	@ 0x84
 8007006:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800700a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800701a:	4413      	add	r3, r2
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4619      	mov	r1, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	01db      	lsls	r3, r3, #7
 8007028:	440b      	add	r3, r1
 800702a:	3384      	adds	r3, #132	@ 0x84
 800702c:	4619      	mov	r1, r3
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	4313      	orrs	r3, r2
 8007032:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	461a      	mov	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	01db      	lsls	r3, r3, #7
 800703e:	4413      	add	r3, r2
 8007040:	3384      	adds	r3, #132	@ 0x84
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	6812      	ldr	r2, [r2, #0]
 8007048:	4611      	mov	r1, r2
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	01d2      	lsls	r2, r2, #7
 800704e:	440a      	add	r2, r1
 8007050:	3284      	adds	r2, #132	@ 0x84
 8007052:	f023 0307 	bic.w	r3, r3, #7
 8007056:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	461a      	mov	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	01db      	lsls	r3, r3, #7
 8007062:	4413      	add	r3, r2
 8007064:	3384      	adds	r3, #132	@ 0x84
 8007066:	461a      	mov	r2, r3
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007074:	021b      	lsls	r3, r3, #8
 8007076:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800707e:	041b      	lsls	r3, r3, #16
 8007080:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	061b      	lsls	r3, r3, #24
 8007088:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	01db      	lsls	r3, r3, #7
 8007094:	4413      	add	r3, r2
 8007096:	3384      	adds	r3, #132	@ 0x84
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	01db      	lsls	r3, r3, #7
 80070a4:	4413      	add	r3, r2
 80070a6:	3384      	adds	r3, #132	@ 0x84
 80070a8:	461a      	mov	r2, r3
 80070aa:	2300      	movs	r3, #0
 80070ac:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80070b4:	461a      	mov	r2, r3
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	431a      	orrs	r2, r3
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	431a      	orrs	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4619      	mov	r1, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	01db      	lsls	r3, r3, #7
 80070c8:	440b      	add	r3, r1
 80070ca:	3384      	adds	r3, #132	@ 0x84
 80070cc:	4619      	mov	r1, r3
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	461a      	mov	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	01db      	lsls	r3, r3, #7
 80070de:	4413      	add	r3, r2
 80070e0:	3384      	adds	r3, #132	@ 0x84
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	6812      	ldr	r2, [r2, #0]
 80070e8:	4611      	mov	r1, r2
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	01d2      	lsls	r2, r2, #7
 80070ee:	440a      	add	r2, r1
 80070f0:	3284      	adds	r2, #132	@ 0x84
 80070f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80070f6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	461a      	mov	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	01db      	lsls	r3, r3, #7
 8007102:	4413      	add	r3, r2
 8007104:	3384      	adds	r3, #132	@ 0x84
 8007106:	461a      	mov	r2, r3
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	01db      	lsls	r3, r3, #7
 8007118:	4413      	add	r3, r2
 800711a:	3384      	adds	r3, #132	@ 0x84
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	6812      	ldr	r2, [r2, #0]
 8007122:	4611      	mov	r1, r2
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	01d2      	lsls	r2, r2, #7
 8007128:	440a      	add	r2, r1
 800712a:	3284      	adds	r2, #132	@ 0x84
 800712c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007130:	f023 0307 	bic.w	r3, r3, #7
 8007134:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	69da      	ldr	r2, [r3, #28]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	68f9      	ldr	r1, [r7, #12]
 8007140:	6809      	ldr	r1, [r1, #0]
 8007142:	4608      	mov	r0, r1
 8007144:	6879      	ldr	r1, [r7, #4]
 8007146:	01c9      	lsls	r1, r1, #7
 8007148:	4401      	add	r1, r0
 800714a:	3184      	adds	r1, #132	@ 0x84
 800714c:	4313      	orrs	r3, r2
 800714e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	461a      	mov	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	01db      	lsls	r3, r3, #7
 800715a:	4413      	add	r3, r2
 800715c:	3384      	adds	r3, #132	@ 0x84
 800715e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	461a      	mov	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	01db      	lsls	r3, r3, #7
 800716a:	4413      	add	r3, r2
 800716c:	3384      	adds	r3, #132	@ 0x84
 800716e:	461a      	mov	r2, r3
 8007170:	2300      	movs	r3, #0
 8007172:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	461a      	mov	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	01db      	lsls	r3, r3, #7
 800717e:	4413      	add	r3, r2
 8007180:	3384      	adds	r3, #132	@ 0x84
 8007182:	461a      	mov	r2, r3
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007188:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d102      	bne.n	8007198 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007192:	2304      	movs	r3, #4
 8007194:	61fb      	str	r3, [r7, #28]
 8007196:	e01b      	b.n	80071d0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d102      	bne.n	80071a6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80071a0:	2303      	movs	r3, #3
 80071a2:	61fb      	str	r3, [r7, #28]
 80071a4:	e014      	b.n	80071d0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d00b      	beq.n	80071c6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d007      	beq.n	80071c6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d003      	beq.n	80071c6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80071c2:	2b07      	cmp	r3, #7
 80071c4:	d102      	bne.n	80071cc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80071c6:	2302      	movs	r3, #2
 80071c8:	61fb      	str	r3, [r7, #28]
 80071ca:	e001      	b.n	80071d0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80071cc:	2301      	movs	r3, #1
 80071ce:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	461a      	mov	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	01db      	lsls	r3, r3, #7
 80071da:	4413      	add	r3, r2
 80071dc:	3384      	adds	r3, #132	@ 0x84
 80071de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	6812      	ldr	r2, [r2, #0]
 80071e4:	4611      	mov	r1, r2
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	01d2      	lsls	r2, r2, #7
 80071ea:	440a      	add	r2, r1
 80071ec:	3284      	adds	r2, #132	@ 0x84
 80071ee:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80071f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f8:	69fa      	ldr	r2, [r7, #28]
 80071fa:	fb02 f303 	mul.w	r3, r2, r3
 80071fe:	041a      	lsls	r2, r3, #16
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	6859      	ldr	r1, [r3, #4]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	1acb      	subs	r3, r1, r3
 800720a:	69f9      	ldr	r1, [r7, #28]
 800720c:	fb01 f303 	mul.w	r3, r1, r3
 8007210:	3303      	adds	r3, #3
 8007212:	68f9      	ldr	r1, [r7, #12]
 8007214:	6809      	ldr	r1, [r1, #0]
 8007216:	4608      	mov	r0, r1
 8007218:	6879      	ldr	r1, [r7, #4]
 800721a:	01c9      	lsls	r1, r1, #7
 800721c:	4401      	add	r1, r0
 800721e:	3184      	adds	r1, #132	@ 0x84
 8007220:	4313      	orrs	r3, r2
 8007222:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	461a      	mov	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	01db      	lsls	r3, r3, #7
 800722e:	4413      	add	r3, r2
 8007230:	3384      	adds	r3, #132	@ 0x84
 8007232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	6812      	ldr	r2, [r2, #0]
 8007238:	4611      	mov	r1, r2
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	01d2      	lsls	r2, r2, #7
 800723e:	440a      	add	r2, r1
 8007240:	3284      	adds	r2, #132	@ 0x84
 8007242:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007246:	f023 0307 	bic.w	r3, r3, #7
 800724a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	461a      	mov	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	01db      	lsls	r3, r3, #7
 8007256:	4413      	add	r3, r2
 8007258:	3384      	adds	r3, #132	@ 0x84
 800725a:	461a      	mov	r2, r3
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007260:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	01db      	lsls	r3, r3, #7
 800726c:	4413      	add	r3, r2
 800726e:	3384      	adds	r3, #132	@ 0x84
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	6812      	ldr	r2, [r2, #0]
 8007276:	4611      	mov	r1, r2
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	01d2      	lsls	r2, r2, #7
 800727c:	440a      	add	r2, r1
 800727e:	3284      	adds	r2, #132	@ 0x84
 8007280:	f043 0301 	orr.w	r3, r3, #1
 8007284:	6013      	str	r3, [r2, #0]
}
 8007286:	bf00      	nop
 8007288:	3724      	adds	r7, #36	@ 0x24
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
	...

08007294 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e25e      	b.n	8007764 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d075      	beq.n	800739e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072b2:	4b88      	ldr	r3, [pc, #544]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f003 030c 	and.w	r3, r3, #12
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d00c      	beq.n	80072d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072be:	4b85      	ldr	r3, [pc, #532]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072c6:	2b08      	cmp	r3, #8
 80072c8:	d112      	bne.n	80072f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072ca:	4b82      	ldr	r3, [pc, #520]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072d6:	d10b      	bne.n	80072f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072d8:	4b7e      	ldr	r3, [pc, #504]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d05b      	beq.n	800739c <HAL_RCC_OscConfig+0x108>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d157      	bne.n	800739c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e239      	b.n	8007764 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072f8:	d106      	bne.n	8007308 <HAL_RCC_OscConfig+0x74>
 80072fa:	4b76      	ldr	r3, [pc, #472]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a75      	ldr	r2, [pc, #468]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	e01d      	b.n	8007344 <HAL_RCC_OscConfig+0xb0>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007310:	d10c      	bne.n	800732c <HAL_RCC_OscConfig+0x98>
 8007312:	4b70      	ldr	r3, [pc, #448]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a6f      	ldr	r2, [pc, #444]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800731c:	6013      	str	r3, [r2, #0]
 800731e:	4b6d      	ldr	r3, [pc, #436]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a6c      	ldr	r2, [pc, #432]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	e00b      	b.n	8007344 <HAL_RCC_OscConfig+0xb0>
 800732c:	4b69      	ldr	r3, [pc, #420]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a68      	ldr	r2, [pc, #416]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007336:	6013      	str	r3, [r2, #0]
 8007338:	4b66      	ldr	r3, [pc, #408]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a65      	ldr	r2, [pc, #404]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 800733e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d013      	beq.n	8007374 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800734c:	f7fd fd44 	bl	8004dd8 <HAL_GetTick>
 8007350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007352:	e008      	b.n	8007366 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007354:	f7fd fd40 	bl	8004dd8 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b64      	cmp	r3, #100	@ 0x64
 8007360:	d901      	bls.n	8007366 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e1fe      	b.n	8007764 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007366:	4b5b      	ldr	r3, [pc, #364]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d0f0      	beq.n	8007354 <HAL_RCC_OscConfig+0xc0>
 8007372:	e014      	b.n	800739e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007374:	f7fd fd30 	bl	8004dd8 <HAL_GetTick>
 8007378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800737a:	e008      	b.n	800738e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800737c:	f7fd fd2c 	bl	8004dd8 <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	2b64      	cmp	r3, #100	@ 0x64
 8007388:	d901      	bls.n	800738e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e1ea      	b.n	8007764 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800738e:	4b51      	ldr	r3, [pc, #324]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1f0      	bne.n	800737c <HAL_RCC_OscConfig+0xe8>
 800739a:	e000      	b.n	800739e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800739c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0302 	and.w	r3, r3, #2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d063      	beq.n	8007472 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073aa:	4b4a      	ldr	r3, [pc, #296]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f003 030c 	and.w	r3, r3, #12
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00b      	beq.n	80073ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073b6:	4b47      	ldr	r3, [pc, #284]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073be:	2b08      	cmp	r3, #8
 80073c0:	d11c      	bne.n	80073fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073c2:	4b44      	ldr	r3, [pc, #272]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d116      	bne.n	80073fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073ce:	4b41      	ldr	r3, [pc, #260]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0302 	and.w	r3, r3, #2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d005      	beq.n	80073e6 <HAL_RCC_OscConfig+0x152>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d001      	beq.n	80073e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e1be      	b.n	8007764 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073e6:	4b3b      	ldr	r3, [pc, #236]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	4937      	ldr	r1, [pc, #220]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073fa:	e03a      	b.n	8007472 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d020      	beq.n	8007446 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007404:	4b34      	ldr	r3, [pc, #208]	@ (80074d8 <HAL_RCC_OscConfig+0x244>)
 8007406:	2201      	movs	r2, #1
 8007408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800740a:	f7fd fce5 	bl	8004dd8 <HAL_GetTick>
 800740e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007410:	e008      	b.n	8007424 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007412:	f7fd fce1 	bl	8004dd8 <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	2b02      	cmp	r3, #2
 800741e:	d901      	bls.n	8007424 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e19f      	b.n	8007764 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007424:	4b2b      	ldr	r3, [pc, #172]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d0f0      	beq.n	8007412 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007430:	4b28      	ldr	r3, [pc, #160]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	00db      	lsls	r3, r3, #3
 800743e:	4925      	ldr	r1, [pc, #148]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007440:	4313      	orrs	r3, r2
 8007442:	600b      	str	r3, [r1, #0]
 8007444:	e015      	b.n	8007472 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007446:	4b24      	ldr	r3, [pc, #144]	@ (80074d8 <HAL_RCC_OscConfig+0x244>)
 8007448:	2200      	movs	r2, #0
 800744a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800744c:	f7fd fcc4 	bl	8004dd8 <HAL_GetTick>
 8007450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007452:	e008      	b.n	8007466 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007454:	f7fd fcc0 	bl	8004dd8 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	2b02      	cmp	r3, #2
 8007460:	d901      	bls.n	8007466 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e17e      	b.n	8007764 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007466:	4b1b      	ldr	r3, [pc, #108]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1f0      	bne.n	8007454 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0308 	and.w	r3, r3, #8
 800747a:	2b00      	cmp	r3, #0
 800747c:	d036      	beq.n	80074ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d016      	beq.n	80074b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007486:	4b15      	ldr	r3, [pc, #84]	@ (80074dc <HAL_RCC_OscConfig+0x248>)
 8007488:	2201      	movs	r2, #1
 800748a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800748c:	f7fd fca4 	bl	8004dd8 <HAL_GetTick>
 8007490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007492:	e008      	b.n	80074a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007494:	f7fd fca0 	bl	8004dd8 <HAL_GetTick>
 8007498:	4602      	mov	r2, r0
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d901      	bls.n	80074a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e15e      	b.n	8007764 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074a6:	4b0b      	ldr	r3, [pc, #44]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80074a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074aa:	f003 0302 	and.w	r3, r3, #2
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0f0      	beq.n	8007494 <HAL_RCC_OscConfig+0x200>
 80074b2:	e01b      	b.n	80074ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074b4:	4b09      	ldr	r3, [pc, #36]	@ (80074dc <HAL_RCC_OscConfig+0x248>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074ba:	f7fd fc8d 	bl	8004dd8 <HAL_GetTick>
 80074be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074c0:	e00e      	b.n	80074e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074c2:	f7fd fc89 	bl	8004dd8 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d907      	bls.n	80074e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e147      	b.n	8007764 <HAL_RCC_OscConfig+0x4d0>
 80074d4:	40023800 	.word	0x40023800
 80074d8:	42470000 	.word	0x42470000
 80074dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074e0:	4b88      	ldr	r3, [pc, #544]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 80074e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1ea      	bne.n	80074c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 8097 	beq.w	8007628 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074fa:	2300      	movs	r3, #0
 80074fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074fe:	4b81      	ldr	r3, [pc, #516]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 8007500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10f      	bne.n	800752a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800750a:	2300      	movs	r3, #0
 800750c:	60bb      	str	r3, [r7, #8]
 800750e:	4b7d      	ldr	r3, [pc, #500]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 8007510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007512:	4a7c      	ldr	r2, [pc, #496]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 8007514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007518:	6413      	str	r3, [r2, #64]	@ 0x40
 800751a:	4b7a      	ldr	r3, [pc, #488]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 800751c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007522:	60bb      	str	r3, [r7, #8]
 8007524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007526:	2301      	movs	r3, #1
 8007528:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800752a:	4b77      	ldr	r3, [pc, #476]	@ (8007708 <HAL_RCC_OscConfig+0x474>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007532:	2b00      	cmp	r3, #0
 8007534:	d118      	bne.n	8007568 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007536:	4b74      	ldr	r3, [pc, #464]	@ (8007708 <HAL_RCC_OscConfig+0x474>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a73      	ldr	r2, [pc, #460]	@ (8007708 <HAL_RCC_OscConfig+0x474>)
 800753c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007542:	f7fd fc49 	bl	8004dd8 <HAL_GetTick>
 8007546:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007548:	e008      	b.n	800755c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800754a:	f7fd fc45 	bl	8004dd8 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	2b02      	cmp	r3, #2
 8007556:	d901      	bls.n	800755c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e103      	b.n	8007764 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800755c:	4b6a      	ldr	r3, [pc, #424]	@ (8007708 <HAL_RCC_OscConfig+0x474>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0f0      	beq.n	800754a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d106      	bne.n	800757e <HAL_RCC_OscConfig+0x2ea>
 8007570:	4b64      	ldr	r3, [pc, #400]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 8007572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007574:	4a63      	ldr	r2, [pc, #396]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 8007576:	f043 0301 	orr.w	r3, r3, #1
 800757a:	6713      	str	r3, [r2, #112]	@ 0x70
 800757c:	e01c      	b.n	80075b8 <HAL_RCC_OscConfig+0x324>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	2b05      	cmp	r3, #5
 8007584:	d10c      	bne.n	80075a0 <HAL_RCC_OscConfig+0x30c>
 8007586:	4b5f      	ldr	r3, [pc, #380]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 8007588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800758a:	4a5e      	ldr	r2, [pc, #376]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 800758c:	f043 0304 	orr.w	r3, r3, #4
 8007590:	6713      	str	r3, [r2, #112]	@ 0x70
 8007592:	4b5c      	ldr	r3, [pc, #368]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 8007594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007596:	4a5b      	ldr	r2, [pc, #364]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 8007598:	f043 0301 	orr.w	r3, r3, #1
 800759c:	6713      	str	r3, [r2, #112]	@ 0x70
 800759e:	e00b      	b.n	80075b8 <HAL_RCC_OscConfig+0x324>
 80075a0:	4b58      	ldr	r3, [pc, #352]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 80075a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a4:	4a57      	ldr	r2, [pc, #348]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 80075a6:	f023 0301 	bic.w	r3, r3, #1
 80075aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80075ac:	4b55      	ldr	r3, [pc, #340]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 80075ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075b0:	4a54      	ldr	r2, [pc, #336]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 80075b2:	f023 0304 	bic.w	r3, r3, #4
 80075b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d015      	beq.n	80075ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075c0:	f7fd fc0a 	bl	8004dd8 <HAL_GetTick>
 80075c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075c6:	e00a      	b.n	80075de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075c8:	f7fd fc06 	bl	8004dd8 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d901      	bls.n	80075de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e0c2      	b.n	8007764 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075de:	4b49      	ldr	r3, [pc, #292]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 80075e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d0ee      	beq.n	80075c8 <HAL_RCC_OscConfig+0x334>
 80075ea:	e014      	b.n	8007616 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075ec:	f7fd fbf4 	bl	8004dd8 <HAL_GetTick>
 80075f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075f2:	e00a      	b.n	800760a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075f4:	f7fd fbf0 	bl	8004dd8 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007602:	4293      	cmp	r3, r2
 8007604:	d901      	bls.n	800760a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e0ac      	b.n	8007764 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800760a:	4b3e      	ldr	r3, [pc, #248]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 800760c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1ee      	bne.n	80075f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d105      	bne.n	8007628 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800761c:	4b39      	ldr	r3, [pc, #228]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 800761e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007620:	4a38      	ldr	r2, [pc, #224]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 8007622:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007626:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 8098 	beq.w	8007762 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007632:	4b34      	ldr	r3, [pc, #208]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f003 030c 	and.w	r3, r3, #12
 800763a:	2b08      	cmp	r3, #8
 800763c:	d05c      	beq.n	80076f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	2b02      	cmp	r3, #2
 8007644:	d141      	bne.n	80076ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007646:	4b31      	ldr	r3, [pc, #196]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800764c:	f7fd fbc4 	bl	8004dd8 <HAL_GetTick>
 8007650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007652:	e008      	b.n	8007666 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007654:	f7fd fbc0 	bl	8004dd8 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b02      	cmp	r3, #2
 8007660:	d901      	bls.n	8007666 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e07e      	b.n	8007764 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007666:	4b27      	ldr	r3, [pc, #156]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1f0      	bne.n	8007654 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	69da      	ldr	r2, [r3, #28]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	431a      	orrs	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007680:	019b      	lsls	r3, r3, #6
 8007682:	431a      	orrs	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007688:	085b      	lsrs	r3, r3, #1
 800768a:	3b01      	subs	r3, #1
 800768c:	041b      	lsls	r3, r3, #16
 800768e:	431a      	orrs	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007694:	061b      	lsls	r3, r3, #24
 8007696:	491b      	ldr	r1, [pc, #108]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 8007698:	4313      	orrs	r3, r2
 800769a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800769c:	4b1b      	ldr	r3, [pc, #108]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 800769e:	2201      	movs	r2, #1
 80076a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076a2:	f7fd fb99 	bl	8004dd8 <HAL_GetTick>
 80076a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076a8:	e008      	b.n	80076bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076aa:	f7fd fb95 	bl	8004dd8 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d901      	bls.n	80076bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e053      	b.n	8007764 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076bc:	4b11      	ldr	r3, [pc, #68]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0f0      	beq.n	80076aa <HAL_RCC_OscConfig+0x416>
 80076c8:	e04b      	b.n	8007762 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076ca:	4b10      	ldr	r3, [pc, #64]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076d0:	f7fd fb82 	bl	8004dd8 <HAL_GetTick>
 80076d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076d6:	e008      	b.n	80076ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076d8:	f7fd fb7e 	bl	8004dd8 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d901      	bls.n	80076ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e03c      	b.n	8007764 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076ea:	4b06      	ldr	r3, [pc, #24]	@ (8007704 <HAL_RCC_OscConfig+0x470>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1f0      	bne.n	80076d8 <HAL_RCC_OscConfig+0x444>
 80076f6:	e034      	b.n	8007762 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d107      	bne.n	8007710 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e02f      	b.n	8007764 <HAL_RCC_OscConfig+0x4d0>
 8007704:	40023800 	.word	0x40023800
 8007708:	40007000 	.word	0x40007000
 800770c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007710:	4b16      	ldr	r3, [pc, #88]	@ (800776c <HAL_RCC_OscConfig+0x4d8>)
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	429a      	cmp	r2, r3
 8007722:	d11c      	bne.n	800775e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800772e:	429a      	cmp	r2, r3
 8007730:	d115      	bne.n	800775e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007738:	4013      	ands	r3, r2
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800773e:	4293      	cmp	r3, r2
 8007740:	d10d      	bne.n	800775e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800774c:	429a      	cmp	r2, r3
 800774e:	d106      	bne.n	800775e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800775a:	429a      	cmp	r2, r3
 800775c:	d001      	beq.n	8007762 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e000      	b.n	8007764 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3718      	adds	r7, #24
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	40023800 	.word	0x40023800

08007770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e0cc      	b.n	800791e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007784:	4b68      	ldr	r3, [pc, #416]	@ (8007928 <HAL_RCC_ClockConfig+0x1b8>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 030f 	and.w	r3, r3, #15
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	429a      	cmp	r2, r3
 8007790:	d90c      	bls.n	80077ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007792:	4b65      	ldr	r3, [pc, #404]	@ (8007928 <HAL_RCC_ClockConfig+0x1b8>)
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	b2d2      	uxtb	r2, r2
 8007798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800779a:	4b63      	ldr	r3, [pc, #396]	@ (8007928 <HAL_RCC_ClockConfig+0x1b8>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 030f 	and.w	r3, r3, #15
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d001      	beq.n	80077ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e0b8      	b.n	800791e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d020      	beq.n	80077fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d005      	beq.n	80077d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077c4:	4b59      	ldr	r3, [pc, #356]	@ (800792c <HAL_RCC_ClockConfig+0x1bc>)
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	4a58      	ldr	r2, [pc, #352]	@ (800792c <HAL_RCC_ClockConfig+0x1bc>)
 80077ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80077ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0308 	and.w	r3, r3, #8
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d005      	beq.n	80077e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80077dc:	4b53      	ldr	r3, [pc, #332]	@ (800792c <HAL_RCC_ClockConfig+0x1bc>)
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	4a52      	ldr	r2, [pc, #328]	@ (800792c <HAL_RCC_ClockConfig+0x1bc>)
 80077e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80077e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077e8:	4b50      	ldr	r3, [pc, #320]	@ (800792c <HAL_RCC_ClockConfig+0x1bc>)
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	494d      	ldr	r1, [pc, #308]	@ (800792c <HAL_RCC_ClockConfig+0x1bc>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b00      	cmp	r3, #0
 8007804:	d044      	beq.n	8007890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d107      	bne.n	800781e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800780e:	4b47      	ldr	r3, [pc, #284]	@ (800792c <HAL_RCC_ClockConfig+0x1bc>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d119      	bne.n	800784e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e07f      	b.n	800791e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	2b02      	cmp	r3, #2
 8007824:	d003      	beq.n	800782e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800782a:	2b03      	cmp	r3, #3
 800782c:	d107      	bne.n	800783e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800782e:	4b3f      	ldr	r3, [pc, #252]	@ (800792c <HAL_RCC_ClockConfig+0x1bc>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d109      	bne.n	800784e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e06f      	b.n	800791e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800783e:	4b3b      	ldr	r3, [pc, #236]	@ (800792c <HAL_RCC_ClockConfig+0x1bc>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0302 	and.w	r3, r3, #2
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e067      	b.n	800791e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800784e:	4b37      	ldr	r3, [pc, #220]	@ (800792c <HAL_RCC_ClockConfig+0x1bc>)
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f023 0203 	bic.w	r2, r3, #3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	4934      	ldr	r1, [pc, #208]	@ (800792c <HAL_RCC_ClockConfig+0x1bc>)
 800785c:	4313      	orrs	r3, r2
 800785e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007860:	f7fd faba 	bl	8004dd8 <HAL_GetTick>
 8007864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007866:	e00a      	b.n	800787e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007868:	f7fd fab6 	bl	8004dd8 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007876:	4293      	cmp	r3, r2
 8007878:	d901      	bls.n	800787e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e04f      	b.n	800791e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800787e:	4b2b      	ldr	r3, [pc, #172]	@ (800792c <HAL_RCC_ClockConfig+0x1bc>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f003 020c 	and.w	r2, r3, #12
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	429a      	cmp	r2, r3
 800788e:	d1eb      	bne.n	8007868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007890:	4b25      	ldr	r3, [pc, #148]	@ (8007928 <HAL_RCC_ClockConfig+0x1b8>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 030f 	and.w	r3, r3, #15
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	429a      	cmp	r2, r3
 800789c:	d20c      	bcs.n	80078b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800789e:	4b22      	ldr	r3, [pc, #136]	@ (8007928 <HAL_RCC_ClockConfig+0x1b8>)
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	b2d2      	uxtb	r2, r2
 80078a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078a6:	4b20      	ldr	r3, [pc, #128]	@ (8007928 <HAL_RCC_ClockConfig+0x1b8>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 030f 	and.w	r3, r3, #15
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d001      	beq.n	80078b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e032      	b.n	800791e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d008      	beq.n	80078d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078c4:	4b19      	ldr	r3, [pc, #100]	@ (800792c <HAL_RCC_ClockConfig+0x1bc>)
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	4916      	ldr	r1, [pc, #88]	@ (800792c <HAL_RCC_ClockConfig+0x1bc>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0308 	and.w	r3, r3, #8
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d009      	beq.n	80078f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078e2:	4b12      	ldr	r3, [pc, #72]	@ (800792c <HAL_RCC_ClockConfig+0x1bc>)
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	490e      	ldr	r1, [pc, #56]	@ (800792c <HAL_RCC_ClockConfig+0x1bc>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80078f6:	f000 f821 	bl	800793c <HAL_RCC_GetSysClockFreq>
 80078fa:	4602      	mov	r2, r0
 80078fc:	4b0b      	ldr	r3, [pc, #44]	@ (800792c <HAL_RCC_ClockConfig+0x1bc>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	091b      	lsrs	r3, r3, #4
 8007902:	f003 030f 	and.w	r3, r3, #15
 8007906:	490a      	ldr	r1, [pc, #40]	@ (8007930 <HAL_RCC_ClockConfig+0x1c0>)
 8007908:	5ccb      	ldrb	r3, [r1, r3]
 800790a:	fa22 f303 	lsr.w	r3, r2, r3
 800790e:	4a09      	ldr	r2, [pc, #36]	@ (8007934 <HAL_RCC_ClockConfig+0x1c4>)
 8007910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007912:	4b09      	ldr	r3, [pc, #36]	@ (8007938 <HAL_RCC_ClockConfig+0x1c8>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4618      	mov	r0, r3
 8007918:	f7fd fa1a 	bl	8004d50 <HAL_InitTick>

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	40023c00 	.word	0x40023c00
 800792c:	40023800 	.word	0x40023800
 8007930:	0800d71c 	.word	0x0800d71c
 8007934:	20000100 	.word	0x20000100
 8007938:	20000190 	.word	0x20000190

0800793c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800793c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007940:	b094      	sub	sp, #80	@ 0x50
 8007942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007944:	2300      	movs	r3, #0
 8007946:	647b      	str	r3, [r7, #68]	@ 0x44
 8007948:	2300      	movs	r3, #0
 800794a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800794c:	2300      	movs	r3, #0
 800794e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007950:	2300      	movs	r3, #0
 8007952:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007954:	4b79      	ldr	r3, [pc, #484]	@ (8007b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f003 030c 	and.w	r3, r3, #12
 800795c:	2b08      	cmp	r3, #8
 800795e:	d00d      	beq.n	800797c <HAL_RCC_GetSysClockFreq+0x40>
 8007960:	2b08      	cmp	r3, #8
 8007962:	f200 80e1 	bhi.w	8007b28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007966:	2b00      	cmp	r3, #0
 8007968:	d002      	beq.n	8007970 <HAL_RCC_GetSysClockFreq+0x34>
 800796a:	2b04      	cmp	r3, #4
 800796c:	d003      	beq.n	8007976 <HAL_RCC_GetSysClockFreq+0x3a>
 800796e:	e0db      	b.n	8007b28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007970:	4b73      	ldr	r3, [pc, #460]	@ (8007b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8007972:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007974:	e0db      	b.n	8007b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007976:	4b73      	ldr	r3, [pc, #460]	@ (8007b44 <HAL_RCC_GetSysClockFreq+0x208>)
 8007978:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800797a:	e0d8      	b.n	8007b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800797c:	4b6f      	ldr	r3, [pc, #444]	@ (8007b3c <HAL_RCC_GetSysClockFreq+0x200>)
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007984:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007986:	4b6d      	ldr	r3, [pc, #436]	@ (8007b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d063      	beq.n	8007a5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007992:	4b6a      	ldr	r3, [pc, #424]	@ (8007b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	099b      	lsrs	r3, r3, #6
 8007998:	2200      	movs	r2, #0
 800799a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800799c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800799e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80079a6:	2300      	movs	r3, #0
 80079a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80079ae:	4622      	mov	r2, r4
 80079b0:	462b      	mov	r3, r5
 80079b2:	f04f 0000 	mov.w	r0, #0
 80079b6:	f04f 0100 	mov.w	r1, #0
 80079ba:	0159      	lsls	r1, r3, #5
 80079bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079c0:	0150      	lsls	r0, r2, #5
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	4621      	mov	r1, r4
 80079c8:	1a51      	subs	r1, r2, r1
 80079ca:	6139      	str	r1, [r7, #16]
 80079cc:	4629      	mov	r1, r5
 80079ce:	eb63 0301 	sbc.w	r3, r3, r1
 80079d2:	617b      	str	r3, [r7, #20]
 80079d4:	f04f 0200 	mov.w	r2, #0
 80079d8:	f04f 0300 	mov.w	r3, #0
 80079dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079e0:	4659      	mov	r1, fp
 80079e2:	018b      	lsls	r3, r1, #6
 80079e4:	4651      	mov	r1, sl
 80079e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80079ea:	4651      	mov	r1, sl
 80079ec:	018a      	lsls	r2, r1, #6
 80079ee:	4651      	mov	r1, sl
 80079f0:	ebb2 0801 	subs.w	r8, r2, r1
 80079f4:	4659      	mov	r1, fp
 80079f6:	eb63 0901 	sbc.w	r9, r3, r1
 80079fa:	f04f 0200 	mov.w	r2, #0
 80079fe:	f04f 0300 	mov.w	r3, #0
 8007a02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a0e:	4690      	mov	r8, r2
 8007a10:	4699      	mov	r9, r3
 8007a12:	4623      	mov	r3, r4
 8007a14:	eb18 0303 	adds.w	r3, r8, r3
 8007a18:	60bb      	str	r3, [r7, #8]
 8007a1a:	462b      	mov	r3, r5
 8007a1c:	eb49 0303 	adc.w	r3, r9, r3
 8007a20:	60fb      	str	r3, [r7, #12]
 8007a22:	f04f 0200 	mov.w	r2, #0
 8007a26:	f04f 0300 	mov.w	r3, #0
 8007a2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007a2e:	4629      	mov	r1, r5
 8007a30:	024b      	lsls	r3, r1, #9
 8007a32:	4621      	mov	r1, r4
 8007a34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007a38:	4621      	mov	r1, r4
 8007a3a:	024a      	lsls	r2, r1, #9
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a42:	2200      	movs	r2, #0
 8007a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007a4c:	f7f9 f8bc 	bl	8000bc8 <__aeabi_uldivmod>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4613      	mov	r3, r2
 8007a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a58:	e058      	b.n	8007b0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a5a:	4b38      	ldr	r3, [pc, #224]	@ (8007b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	099b      	lsrs	r3, r3, #6
 8007a60:	2200      	movs	r2, #0
 8007a62:	4618      	mov	r0, r3
 8007a64:	4611      	mov	r1, r2
 8007a66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007a6a:	623b      	str	r3, [r7, #32]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007a74:	4642      	mov	r2, r8
 8007a76:	464b      	mov	r3, r9
 8007a78:	f04f 0000 	mov.w	r0, #0
 8007a7c:	f04f 0100 	mov.w	r1, #0
 8007a80:	0159      	lsls	r1, r3, #5
 8007a82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a86:	0150      	lsls	r0, r2, #5
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4641      	mov	r1, r8
 8007a8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007a92:	4649      	mov	r1, r9
 8007a94:	eb63 0b01 	sbc.w	fp, r3, r1
 8007a98:	f04f 0200 	mov.w	r2, #0
 8007a9c:	f04f 0300 	mov.w	r3, #0
 8007aa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007aa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007aa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007aac:	ebb2 040a 	subs.w	r4, r2, sl
 8007ab0:	eb63 050b 	sbc.w	r5, r3, fp
 8007ab4:	f04f 0200 	mov.w	r2, #0
 8007ab8:	f04f 0300 	mov.w	r3, #0
 8007abc:	00eb      	lsls	r3, r5, #3
 8007abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ac2:	00e2      	lsls	r2, r4, #3
 8007ac4:	4614      	mov	r4, r2
 8007ac6:	461d      	mov	r5, r3
 8007ac8:	4643      	mov	r3, r8
 8007aca:	18e3      	adds	r3, r4, r3
 8007acc:	603b      	str	r3, [r7, #0]
 8007ace:	464b      	mov	r3, r9
 8007ad0:	eb45 0303 	adc.w	r3, r5, r3
 8007ad4:	607b      	str	r3, [r7, #4]
 8007ad6:	f04f 0200 	mov.w	r2, #0
 8007ada:	f04f 0300 	mov.w	r3, #0
 8007ade:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ae2:	4629      	mov	r1, r5
 8007ae4:	028b      	lsls	r3, r1, #10
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007aec:	4621      	mov	r1, r4
 8007aee:	028a      	lsls	r2, r1, #10
 8007af0:	4610      	mov	r0, r2
 8007af2:	4619      	mov	r1, r3
 8007af4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007af6:	2200      	movs	r2, #0
 8007af8:	61bb      	str	r3, [r7, #24]
 8007afa:	61fa      	str	r2, [r7, #28]
 8007afc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b00:	f7f9 f862 	bl	8000bc8 <__aeabi_uldivmod>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4613      	mov	r3, r2
 8007b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	0c1b      	lsrs	r3, r3, #16
 8007b12:	f003 0303 	and.w	r3, r3, #3
 8007b16:	3301      	adds	r3, #1
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007b1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b26:	e002      	b.n	8007b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b28:	4b05      	ldr	r3, [pc, #20]	@ (8007b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8007b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3750      	adds	r7, #80	@ 0x50
 8007b34:	46bd      	mov	sp, r7
 8007b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b3a:	bf00      	nop
 8007b3c:	40023800 	.word	0x40023800
 8007b40:	00f42400 	.word	0x00f42400
 8007b44:	007a1200 	.word	0x007a1200

08007b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b4c:	4b03      	ldr	r3, [pc, #12]	@ (8007b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	20000100 	.word	0x20000100

08007b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007b64:	f7ff fff0 	bl	8007b48 <HAL_RCC_GetHCLKFreq>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	4b05      	ldr	r3, [pc, #20]	@ (8007b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	0a9b      	lsrs	r3, r3, #10
 8007b70:	f003 0307 	and.w	r3, r3, #7
 8007b74:	4903      	ldr	r1, [pc, #12]	@ (8007b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b76:	5ccb      	ldrb	r3, [r1, r3]
 8007b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	40023800 	.word	0x40023800
 8007b84:	0800d72c 	.word	0x0800d72c

08007b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007b8c:	f7ff ffdc 	bl	8007b48 <HAL_RCC_GetHCLKFreq>
 8007b90:	4602      	mov	r2, r0
 8007b92:	4b05      	ldr	r3, [pc, #20]	@ (8007ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	0b5b      	lsrs	r3, r3, #13
 8007b98:	f003 0307 	and.w	r3, r3, #7
 8007b9c:	4903      	ldr	r1, [pc, #12]	@ (8007bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b9e:	5ccb      	ldrb	r3, [r1, r3]
 8007ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	40023800 	.word	0x40023800
 8007bac:	0800d72c 	.word	0x0800d72c

08007bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10b      	bne.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d105      	bne.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d075      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007be4:	4b91      	ldr	r3, [pc, #580]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007bea:	f7fd f8f5 	bl	8004dd8 <HAL_GetTick>
 8007bee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007bf0:	e008      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007bf2:	f7fd f8f1 	bl	8004dd8 <HAL_GetTick>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d901      	bls.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e189      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c04:	4b8a      	ldr	r3, [pc, #552]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1f0      	bne.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d009      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	019a      	lsls	r2, r3, #6
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	071b      	lsls	r3, r3, #28
 8007c28:	4981      	ldr	r1, [pc, #516]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0302 	and.w	r3, r3, #2
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d01f      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007c3c:	4b7c      	ldr	r3, [pc, #496]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c42:	0f1b      	lsrs	r3, r3, #28
 8007c44:	f003 0307 	and.w	r3, r3, #7
 8007c48:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	019a      	lsls	r2, r3, #6
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	061b      	lsls	r3, r3, #24
 8007c56:	431a      	orrs	r2, r3
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	071b      	lsls	r3, r3, #28
 8007c5c:	4974      	ldr	r1, [pc, #464]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007c64:	4b72      	ldr	r3, [pc, #456]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c6a:	f023 021f 	bic.w	r2, r3, #31
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	3b01      	subs	r3, #1
 8007c74:	496e      	ldr	r1, [pc, #440]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00d      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	019a      	lsls	r2, r3, #6
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	061b      	lsls	r3, r3, #24
 8007c94:	431a      	orrs	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	071b      	lsls	r3, r3, #28
 8007c9c:	4964      	ldr	r1, [pc, #400]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007ca4:	4b61      	ldr	r3, [pc, #388]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007caa:	f7fd f895 	bl	8004dd8 <HAL_GetTick>
 8007cae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007cb0:	e008      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007cb2:	f7fd f891 	bl	8004dd8 <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d901      	bls.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e129      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007cc4:	4b5a      	ldr	r3, [pc, #360]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d0f0      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0304 	and.w	r3, r3, #4
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d105      	bne.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d079      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007ce8:	4b52      	ldr	r3, [pc, #328]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007cee:	f7fd f873 	bl	8004dd8 <HAL_GetTick>
 8007cf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007cf4:	e008      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007cf6:	f7fd f86f 	bl	8004dd8 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d901      	bls.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e107      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007d08:	4b49      	ldr	r3, [pc, #292]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d14:	d0ef      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0304 	and.w	r3, r3, #4
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d020      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007d22:	4b43      	ldr	r3, [pc, #268]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d28:	0f1b      	lsrs	r3, r3, #28
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	019a      	lsls	r2, r3, #6
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	061b      	lsls	r3, r3, #24
 8007d3c:	431a      	orrs	r2, r3
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	071b      	lsls	r3, r3, #28
 8007d42:	493b      	ldr	r1, [pc, #236]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007d4a:	4b39      	ldr	r3, [pc, #228]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d50:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a1b      	ldr	r3, [r3, #32]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	021b      	lsls	r3, r3, #8
 8007d5c:	4934      	ldr	r1, [pc, #208]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0308 	and.w	r3, r3, #8
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d01e      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d70:	4b2f      	ldr	r3, [pc, #188]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d76:	0e1b      	lsrs	r3, r3, #24
 8007d78:	f003 030f 	and.w	r3, r3, #15
 8007d7c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	019a      	lsls	r2, r3, #6
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	061b      	lsls	r3, r3, #24
 8007d88:	431a      	orrs	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	071b      	lsls	r3, r3, #28
 8007d90:	4927      	ldr	r1, [pc, #156]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007d98:	4b25      	ldr	r3, [pc, #148]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d9e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da6:	4922      	ldr	r1, [pc, #136]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007da8:	4313      	orrs	r3, r2
 8007daa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007dae:	4b21      	ldr	r3, [pc, #132]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007db0:	2201      	movs	r2, #1
 8007db2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007db4:	f7fd f810 	bl	8004dd8 <HAL_GetTick>
 8007db8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007dba:	e008      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007dbc:	f7fd f80c 	bl	8004dd8 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d901      	bls.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e0a4      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007dce:	4b18      	ldr	r3, [pc, #96]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dda:	d1ef      	bne.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0320 	and.w	r3, r3, #32
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 808b 	beq.w	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]
 8007dee:	4b10      	ldr	r3, [pc, #64]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df2:	4a0f      	ldr	r2, [pc, #60]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8007dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e02:	60fb      	str	r3, [r7, #12]
 8007e04:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007e06:	4b0c      	ldr	r3, [pc, #48]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a0b      	ldr	r2, [pc, #44]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e10:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e12:	f7fc ffe1 	bl	8004dd8 <HAL_GetTick>
 8007e16:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007e18:	e010      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007e1a:	f7fc ffdd 	bl	8004dd8 <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d909      	bls.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e075      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007e2c:	42470068 	.word	0x42470068
 8007e30:	40023800 	.word	0x40023800
 8007e34:	42470070 	.word	0x42470070
 8007e38:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007e3c:	4b38      	ldr	r3, [pc, #224]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d0e8      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007e48:	4b36      	ldr	r3, [pc, #216]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e50:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d02f      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d028      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e66:	4b2f      	ldr	r3, [pc, #188]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007e70:	4b2d      	ldr	r3, [pc, #180]	@ (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007e72:	2201      	movs	r2, #1
 8007e74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007e76:	4b2c      	ldr	r3, [pc, #176]	@ (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007e7c:	4a29      	ldr	r2, [pc, #164]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007e82:	4b28      	ldr	r3, [pc, #160]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d114      	bne.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007e8e:	f7fc ffa3 	bl	8004dd8 <HAL_GetTick>
 8007e92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e94:	e00a      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e96:	f7fc ff9f 	bl	8004dd8 <HAL_GetTick>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d901      	bls.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e035      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007eac:	4b1d      	ldr	r3, [pc, #116]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eb0:	f003 0302 	and.w	r3, r3, #2
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0ee      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ebc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ec0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ec4:	d10d      	bne.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007ec6:	4b17      	ldr	r3, [pc, #92]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007ed6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007eda:	4912      	ldr	r1, [pc, #72]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	608b      	str	r3, [r1, #8]
 8007ee0:	e005      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007ee2:	4b10      	ldr	r3, [pc, #64]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007ee8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007eec:	6093      	str	r3, [r2, #8]
 8007eee:	4b0d      	ldr	r3, [pc, #52]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007ef0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007efa:	490a      	ldr	r1, [pc, #40]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0310 	and.w	r3, r3, #16
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d004      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8007f12:	4b06      	ldr	r3, [pc, #24]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007f14:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3718      	adds	r7, #24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	40007000 	.word	0x40007000
 8007f24:	40023800 	.word	0x40023800
 8007f28:	42470e40 	.word	0x42470e40
 8007f2c:	424711e0 	.word	0x424711e0

08007f30 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e025      	b.n	8007f90 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d106      	bne.n	8007f5e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f81d 	bl	8007f98 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2202      	movs	r2, #2
 8007f62:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	4619      	mov	r1, r3
 8007f70:	4610      	mov	r0, r2
 8007f72:	f001 fd0f 	bl	8009994 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6818      	ldr	r0, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	f001 fd7a 	bl	8009a7a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d101      	bne.n	8007fc8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	e018      	b.n	8007ffa <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2202      	movs	r2, #2
 8007fcc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	68b9      	ldr	r1, [r7, #8]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f001 fdcd 	bl	8009b78 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d104      	bne.n	8007ff0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2205      	movs	r2, #5
 8007fea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8007fee:	e003      	b.n	8007ff8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }
  
  return HAL_OK;  
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b082      	sub	sp, #8
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b02      	cmp	r3, #2
 8008016:	d101      	bne.n	800801c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008018:	2302      	movs	r3, #2
 800801a:	e00e      	b.n	800803a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	4618      	mov	r0, r3
 800802c:	f001 fde0 	bl	8009bf0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;   
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b082      	sub	sp, #8
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e05d      	b.n	8008110 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	d106      	bne.n	800806e <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f87d 	bl	8008168 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2202      	movs	r2, #2
 8008072:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008084:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685a      	ldr	r2, [r3, #4]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	431a      	orrs	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	431a      	orrs	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	431a      	orrs	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	431a      	orrs	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080aa:	431a      	orrs	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	431a      	orrs	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	ea42 0103 	orr.w	r1, r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	0c1b      	lsrs	r3, r3, #16
 80080cc:	f003 0104 	and.w	r1, r3, #4
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	430a      	orrs	r2, r1
 80080da:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080e4:	d104      	bne.n	80080f0 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80080ee:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	69da      	ldr	r2, [r3, #28]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80080fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e01a      	b.n	8008160 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2202      	movs	r2, #2
 800812e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008140:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f81a 	bl	800817c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b088      	sub	sp, #32
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	603b      	str	r3, [r7, #0]
 800819c:	4613      	mov	r3, r2
 800819e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80081a0:	2300      	movs	r3, #0
 80081a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d101      	bne.n	80081b2 <HAL_SPI_Transmit+0x22>
 80081ae:	2302      	movs	r3, #2
 80081b0:	e140      	b.n	8008434 <HAL_SPI_Transmit+0x2a4>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081ba:	f7fc fe0d 	bl	8004dd8 <HAL_GetTick>
 80081be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80081c0:	88fb      	ldrh	r3, [r7, #6]
 80081c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d002      	beq.n	80081d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80081d0:	2302      	movs	r3, #2
 80081d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80081d4:	e125      	b.n	8008422 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <HAL_SPI_Transmit+0x52>
 80081dc:	88fb      	ldrh	r3, [r7, #6]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d102      	bne.n	80081e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80081e6:	e11c      	b.n	8008422 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2203      	movs	r2, #3
 80081ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	88fa      	ldrh	r2, [r7, #6]
 8008200:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	88fa      	ldrh	r2, [r7, #6]
 8008206:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800822e:	d107      	bne.n	8008240 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800823e:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008248:	d10f      	bne.n	800826a <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008268:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008274:	2b40      	cmp	r3, #64	@ 0x40
 8008276:	d007      	beq.n	8008288 <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008286:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008290:	d14b      	bne.n	800832a <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d002      	beq.n	80082a0 <HAL_SPI_Transmit+0x110>
 800829a:	8afb      	ldrh	r3, [r7, #22]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d13e      	bne.n	800831e <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a4:	881a      	ldrh	r2, [r3, #0]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082b0:	1c9a      	adds	r2, r3, #2
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	3b01      	subs	r3, #1
 80082be:	b29a      	uxth	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80082c4:	e02b      	b.n	800831e <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f003 0302 	and.w	r3, r3, #2
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d112      	bne.n	80082fa <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d8:	881a      	ldrh	r2, [r3, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082e4:	1c9a      	adds	r2, r3, #2
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	3b01      	subs	r3, #1
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80082f8:	e011      	b.n	800831e <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082fa:	f7fc fd6d 	bl	8004dd8 <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	429a      	cmp	r2, r3
 8008308:	d803      	bhi.n	8008312 <HAL_SPI_Transmit+0x182>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008310:	d102      	bne.n	8008318 <HAL_SPI_Transmit+0x188>
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d102      	bne.n	800831e <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800831c:	e081      	b.n	8008422 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008322:	b29b      	uxth	r3, r3
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1ce      	bne.n	80082c6 <HAL_SPI_Transmit+0x136>
 8008328:	e04c      	b.n	80083c4 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d002      	beq.n	8008338 <HAL_SPI_Transmit+0x1a8>
 8008332:	8afb      	ldrh	r3, [r7, #22]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d140      	bne.n	80083ba <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	330c      	adds	r3, #12
 8008342:	7812      	ldrb	r2, [r2, #0]
 8008344:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800834a:	1c5a      	adds	r2, r3, #1
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008354:	b29b      	uxth	r3, r3
 8008356:	3b01      	subs	r3, #1
 8008358:	b29a      	uxth	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800835e:	e02c      	b.n	80083ba <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f003 0302 	and.w	r3, r3, #2
 800836a:	2b02      	cmp	r3, #2
 800836c:	d113      	bne.n	8008396 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	330c      	adds	r3, #12
 8008378:	7812      	ldrb	r2, [r2, #0]
 800837a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008380:	1c5a      	adds	r2, r3, #1
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800838a:	b29b      	uxth	r3, r3
 800838c:	3b01      	subs	r3, #1
 800838e:	b29a      	uxth	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008394:	e011      	b.n	80083ba <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008396:	f7fc fd1f 	bl	8004dd8 <HAL_GetTick>
 800839a:	4602      	mov	r2, r0
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	683a      	ldr	r2, [r7, #0]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d803      	bhi.n	80083ae <HAL_SPI_Transmit+0x21e>
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ac:	d102      	bne.n	80083b4 <HAL_SPI_Transmit+0x224>
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d102      	bne.n	80083ba <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80083b8:	e033      	b.n	8008422 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083be:	b29b      	uxth	r3, r3
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1cd      	bne.n	8008360 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083cc:	d107      	bne.n	80083de <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80083dc:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083de:	69ba      	ldr	r2, [r7, #24]
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f000 fc94 	bl	8008d10 <SPI_EndRxTxTransaction>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d002      	beq.n	80083f4 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2220      	movs	r2, #32
 80083f2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10a      	bne.n	8008412 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083fc:	2300      	movs	r3, #0
 80083fe:	613b      	str	r3, [r7, #16]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	613b      	str	r3, [r7, #16]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	613b      	str	r3, [r7, #16]
 8008410:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008416:	2b00      	cmp	r3, #0
 8008418:	d002      	beq.n	8008420 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	77fb      	strb	r3, [r7, #31]
 800841e:	e000      	b.n	8008422 <HAL_SPI_Transmit+0x292>
  }

error:
 8008420:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008432:	7ffb      	ldrb	r3, [r7, #31]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3720      	adds	r7, #32
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af02      	add	r7, sp, #8
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	603b      	str	r3, [r7, #0]
 8008448:	4613      	mov	r3, r2
 800844a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800844c:	2300      	movs	r3, #0
 800844e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008458:	d112      	bne.n	8008480 <HAL_SPI_Receive+0x44>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10e      	bne.n	8008480 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2204      	movs	r2, #4
 8008466:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800846a:	88fa      	ldrh	r2, [r7, #6]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	4613      	mov	r3, r2
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	68b9      	ldr	r1, [r7, #8]
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f000 f95f 	bl	800873a <HAL_SPI_TransmitReceive>
 800847c:	4603      	mov	r3, r0
 800847e:	e158      	b.n	8008732 <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008486:	2b01      	cmp	r3, #1
 8008488:	d101      	bne.n	800848e <HAL_SPI_Receive+0x52>
 800848a:	2302      	movs	r3, #2
 800848c:	e151      	b.n	8008732 <HAL_SPI_Receive+0x2f6>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008496:	f7fc fc9f 	bl	8004dd8 <HAL_GetTick>
 800849a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d002      	beq.n	80084ae <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80084a8:	2302      	movs	r3, #2
 80084aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80084ac:	e138      	b.n	8008720 <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <HAL_SPI_Receive+0x7e>
 80084b4:	88fb      	ldrh	r3, [r7, #6]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d102      	bne.n	80084c0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80084be:	e12f      	b.n	8008720 <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2204      	movs	r2, #4
 80084c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	88fa      	ldrh	r2, [r7, #6]
 80084d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	88fa      	ldrh	r2, [r7, #6]
 80084de:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008506:	d116      	bne.n	8008536 <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008516:	601a      	str	r2, [r3, #0]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008526:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800852c:	b29b      	uxth	r3, r3
 800852e:	3b01      	subs	r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800853e:	d107      	bne.n	8008550 <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800854e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800855a:	2b40      	cmp	r3, #64	@ 0x40
 800855c:	d007      	beq.n	800856e <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800856c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d162      	bne.n	800863c <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008576:	e02e      	b.n	80085d6 <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	2b01      	cmp	r3, #1
 8008584:	d115      	bne.n	80085b2 <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f103 020c 	add.w	r2, r3, #12
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008592:	7812      	ldrb	r2, [r2, #0]
 8008594:	b2d2      	uxtb	r2, r2
 8008596:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859c:	1c5a      	adds	r2, r3, #1
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	3b01      	subs	r3, #1
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80085b0:	e011      	b.n	80085d6 <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085b2:	f7fc fc11 	bl	8004dd8 <HAL_GetTick>
 80085b6:	4602      	mov	r2, r0
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d803      	bhi.n	80085ca <HAL_SPI_Receive+0x18e>
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c8:	d102      	bne.n	80085d0 <HAL_SPI_Receive+0x194>
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d102      	bne.n	80085d6 <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80085d4:	e0a4      	b.n	8008720 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085da:	b29b      	uxth	r3, r3
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1cb      	bne.n	8008578 <HAL_SPI_Receive+0x13c>
 80085e0:	e031      	b.n	8008646 <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d113      	bne.n	8008618 <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68da      	ldr	r2, [r3, #12]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085fa:	b292      	uxth	r2, r2
 80085fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008602:	1c9a      	adds	r2, r3, #2
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800860c:	b29b      	uxth	r3, r3
 800860e:	3b01      	subs	r3, #1
 8008610:	b29a      	uxth	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008616:	e011      	b.n	800863c <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008618:	f7fc fbde 	bl	8004dd8 <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	429a      	cmp	r2, r3
 8008626:	d803      	bhi.n	8008630 <HAL_SPI_Receive+0x1f4>
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800862e:	d102      	bne.n	8008636 <HAL_SPI_Receive+0x1fa>
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d102      	bne.n	800863c <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	75fb      	strb	r3, [r7, #23]
          goto error;
 800863a:	e071      	b.n	8008720 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008640:	b29b      	uxth	r3, r3
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1cd      	bne.n	80085e2 <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800864a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800864e:	d142      	bne.n	80086d6 <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800865e:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	2201      	movs	r2, #1
 8008668:	2101      	movs	r1, #1
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 fa81 	bl	8008b72 <SPI_WaitFlagStateUntilTimeout>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	75fb      	strb	r3, [r7, #23]
      goto error;
 800867a:	e051      	b.n	8008720 <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008684:	d107      	bne.n	8008696 <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008690:	b292      	uxth	r2, r2
 8008692:	801a      	strh	r2, [r3, #0]
 8008694:	e008      	b.n	80086a8 <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f103 020c 	add.w	r2, r3, #12
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086a2:	7812      	ldrb	r2, [r2, #0]
 80086a4:	b2d2      	uxtb	r2, r2
 80086a6:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	2201      	movs	r2, #1
 80086b0:	2101      	movs	r1, #1
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 fa5d 	bl	8008b72 <SPI_WaitFlagStateUntilTimeout>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d008      	beq.n	80086d0 <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086c2:	f043 0202 	orr.w	r2, r3, #2
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	75fb      	strb	r3, [r7, #23]
      goto error;
 80086ce:	e027      	b.n	8008720 <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f000 fab3 	bl	8008c46 <SPI_EndRxTransaction>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2220      	movs	r2, #32
 80086ea:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f003 0310 	and.w	r3, r3, #16
 80086f6:	2b10      	cmp	r3, #16
 80086f8:	d10a      	bne.n	8008710 <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086fe:	f043 0202 	orr.w	r2, r3, #2
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800870e:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008714:	2b00      	cmp	r3, #0
 8008716:	d002      	beq.n	800871e <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	75fb      	strb	r3, [r7, #23]
 800871c:	e000      	b.n	8008720 <HAL_SPI_Receive+0x2e4>
  }

error :
 800871e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008730:	7dfb      	ldrb	r3, [r7, #23]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3718      	adds	r7, #24
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b08e      	sub	sp, #56	@ 0x38
 800873e:	af02      	add	r7, sp, #8
 8008740:	60f8      	str	r0, [r7, #12]
 8008742:	60b9      	str	r1, [r7, #8]
 8008744:	607a      	str	r2, [r7, #4]
 8008746:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008748:	2301      	movs	r3, #1
 800874a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008758:	2b01      	cmp	r3, #1
 800875a:	d101      	bne.n	8008760 <HAL_SPI_TransmitReceive+0x26>
 800875c:	2302      	movs	r3, #2
 800875e:	e1f6      	b.n	8008b4e <HAL_SPI_TransmitReceive+0x414>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008768:	f7fc fb36 	bl	8004dd8 <HAL_GetTick>
 800876c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008774:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800877e:	887b      	ldrh	r3, [r7, #2]
 8008780:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008782:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008786:	2b01      	cmp	r3, #1
 8008788:	d00f      	beq.n	80087aa <HAL_SPI_TransmitReceive+0x70>
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008790:	d107      	bne.n	80087a2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d103      	bne.n	80087a2 <HAL_SPI_TransmitReceive+0x68>
 800879a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800879e:	2b04      	cmp	r3, #4
 80087a0:	d003      	beq.n	80087aa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80087a2:	2302      	movs	r3, #2
 80087a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80087a8:	e1c7      	b.n	8008b3a <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d005      	beq.n	80087bc <HAL_SPI_TransmitReceive+0x82>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d002      	beq.n	80087bc <HAL_SPI_TransmitReceive+0x82>
 80087b6:	887b      	ldrh	r3, [r7, #2]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d103      	bne.n	80087c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80087c2:	e1ba      	b.n	8008b3a <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b04      	cmp	r3, #4
 80087ce:	d003      	beq.n	80087d8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2205      	movs	r2, #5
 80087d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	887a      	ldrh	r2, [r7, #2]
 80087e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	887a      	ldrh	r2, [r7, #2]
 80087ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	887a      	ldrh	r2, [r7, #2]
 80087fa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	887a      	ldrh	r2, [r7, #2]
 8008800:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008812:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008816:	d10f      	bne.n	8008838 <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008836:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008842:	2b40      	cmp	r3, #64	@ 0x40
 8008844:	d007      	beq.n	8008856 <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008854:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800885e:	f040 808b 	bne.w	8008978 <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d002      	beq.n	8008870 <HAL_SPI_TransmitReceive+0x136>
 800886a:	8b7b      	ldrh	r3, [r7, #26]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d178      	bne.n	8008962 <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008874:	881a      	ldrh	r2, [r3, #0]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008880:	1c9a      	adds	r2, r3, #2
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800888a:	b29b      	uxth	r3, r3
 800888c:	3b01      	subs	r3, #1
 800888e:	b29a      	uxth	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008894:	e065      	b.n	8008962 <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	f003 0302 	and.w	r3, r3, #2
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d12d      	bne.n	8008900 <HAL_SPI_TransmitReceive+0x1c6>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d028      	beq.n	8008900 <HAL_SPI_TransmitReceive+0x1c6>
 80088ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d125      	bne.n	8008900 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088b8:	881a      	ldrh	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088c4:	1c9a      	adds	r2, r3, #2
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	3b01      	subs	r3, #1
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80088d8:	2300      	movs	r3, #0
 80088da:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10c      	bne.n	8008900 <HAL_SPI_TransmitReceive+0x1c6>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088ee:	d107      	bne.n	8008900 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80088fe:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f003 0301 	and.w	r3, r3, #1
 800890a:	2b01      	cmp	r3, #1
 800890c:	d119      	bne.n	8008942 <HAL_SPI_TransmitReceive+0x208>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008912:	b29b      	uxth	r3, r3
 8008914:	2b00      	cmp	r3, #0
 8008916:	d014      	beq.n	8008942 <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68da      	ldr	r2, [r3, #12]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008922:	b292      	uxth	r2, r2
 8008924:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800892a:	1c9a      	adds	r2, r3, #2
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008934:	b29b      	uxth	r3, r3
 8008936:	3b01      	subs	r3, #1
 8008938:	b29a      	uxth	r2, r3
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800893e:	2301      	movs	r3, #1
 8008940:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008942:	f7fc fa49 	bl	8004dd8 <HAL_GetTick>
 8008946:	4602      	mov	r2, r0
 8008948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800894e:	429a      	cmp	r2, r3
 8008950:	d807      	bhi.n	8008962 <HAL_SPI_TransmitReceive+0x228>
 8008952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008958:	d003      	beq.n	8008962 <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8008960:	e0eb      	b.n	8008b3a <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008966:	b29b      	uxth	r3, r3
 8008968:	2b00      	cmp	r3, #0
 800896a:	d194      	bne.n	8008896 <HAL_SPI_TransmitReceive+0x15c>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008970:	b29b      	uxth	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	d18f      	bne.n	8008896 <HAL_SPI_TransmitReceive+0x15c>
 8008976:	e08e      	b.n	8008a96 <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d002      	beq.n	8008986 <HAL_SPI_TransmitReceive+0x24c>
 8008980:	8b7b      	ldrh	r3, [r7, #26]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d17d      	bne.n	8008a82 <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	330c      	adds	r3, #12
 8008990:	7812      	ldrb	r2, [r2, #0]
 8008992:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008998:	1c5a      	adds	r2, r3, #1
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	3b01      	subs	r3, #1
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089ac:	e069      	b.n	8008a82 <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f003 0302 	and.w	r3, r3, #2
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d12e      	bne.n	8008a1a <HAL_SPI_TransmitReceive+0x2e0>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d029      	beq.n	8008a1a <HAL_SPI_TransmitReceive+0x2e0>
 80089c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d126      	bne.n	8008a1a <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	330c      	adds	r3, #12
 80089d6:	7812      	ldrb	r2, [r2, #0]
 80089d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089de:	1c5a      	adds	r2, r3, #1
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	3b01      	subs	r3, #1
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d10c      	bne.n	8008a1a <HAL_SPI_TransmitReceive+0x2e0>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a08:	d107      	bne.n	8008a1a <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008a18:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d119      	bne.n	8008a5c <HAL_SPI_TransmitReceive+0x322>
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d014      	beq.n	8008a5c <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68da      	ldr	r2, [r3, #12]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a3c:	b2d2      	uxtb	r2, r2
 8008a3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a44:	1c5a      	adds	r2, r3, #1
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	3b01      	subs	r3, #1
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008a5c:	f7fc f9bc 	bl	8004dd8 <HAL_GetTick>
 8008a60:	4602      	mov	r2, r0
 8008a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d803      	bhi.n	8008a74 <HAL_SPI_TransmitReceive+0x33a>
 8008a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a72:	d102      	bne.n	8008a7a <HAL_SPI_TransmitReceive+0x340>
 8008a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d103      	bne.n	8008a82 <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8008a80:	e05b      	b.n	8008b3a <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d190      	bne.n	80089ae <HAL_SPI_TransmitReceive+0x274>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d18b      	bne.n	80089ae <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a9e:	d117      	bne.n	8008ad0 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f000 f861 	bl	8008b72 <SPI_WaitFlagStateUntilTimeout>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d009      	beq.n	8008aca <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aba:	f043 0202 	orr.w	r2, r3, #2
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      goto error;
 8008ac8:	e037      	b.n	8008b3a <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f003 0310 	and.w	r3, r3, #16
 8008ada:	2b10      	cmp	r3, #16
 8008adc:	d10d      	bne.n	8008afa <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ae2:	f043 0202 	orr.w	r2, r3, #2
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8008af2:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008afc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f000 f906 	bl	8008d10 <SPI_EndRxTxTransaction>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d006      	beq.n	8008b18 <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2220      	movs	r2, #32
 8008b14:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8008b16:	e010      	b.n	8008b3a <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d10b      	bne.n	8008b38 <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b20:	2300      	movs	r3, #0
 8008b22:	617b      	str	r3, [r7, #20]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	617b      	str	r3, [r7, #20]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	617b      	str	r3, [r7, #20]
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	e000      	b.n	8008b3a <HAL_SPI_TransmitReceive+0x400>
  }

error :
 8008b38:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008b4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3730      	adds	r7, #48	@ 0x30
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b083      	sub	sp, #12
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b64:	b2db      	uxtb	r3, r3
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b084      	sub	sp, #16
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	60f8      	str	r0, [r7, #12]
 8008b7a:	60b9      	str	r1, [r7, #8]
 8008b7c:	603b      	str	r3, [r7, #0]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b82:	e04c      	b.n	8008c1e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b8a:	d048      	beq.n	8008c1e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008b8c:	f7fc f924 	bl	8004dd8 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	683a      	ldr	r2, [r7, #0]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d902      	bls.n	8008ba2 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d13d      	bne.n	8008c1e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	685a      	ldr	r2, [r3, #4]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008bb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008bba:	d111      	bne.n	8008be0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bc4:	d004      	beq.n	8008bd0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bce:	d107      	bne.n	8008be0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008bde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008be8:	d10f      	bne.n	8008c0a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e00f      	b.n	8008c3e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	689a      	ldr	r2, [r3, #8]
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	4013      	ands	r3, r2
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	bf0c      	ite	eq
 8008c2e:	2301      	moveq	r3, #1
 8008c30:	2300      	movne	r3, #0
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	461a      	mov	r2, r3
 8008c36:	79fb      	ldrb	r3, [r7, #7]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d1a3      	bne.n	8008b84 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b086      	sub	sp, #24
 8008c4a:	af02      	add	r7, sp, #8
 8008c4c:	60f8      	str	r0, [r7, #12]
 8008c4e:	60b9      	str	r1, [r7, #8]
 8008c50:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c5a:	d111      	bne.n	8008c80 <SPI_EndRxTransaction+0x3a>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c64:	d004      	beq.n	8008c70 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c6e:	d107      	bne.n	8008c80 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c7e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c88:	d12a      	bne.n	8008ce0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c92:	d012      	beq.n	8008cba <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2180      	movs	r1, #128	@ 0x80
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f7ff ff67 	bl	8008b72 <SPI_WaitFlagStateUntilTimeout>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d02d      	beq.n	8008d06 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cae:	f043 0220 	orr.w	r2, r3, #32
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e026      	b.n	8008d08 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f7ff ff54 	bl	8008b72 <SPI_WaitFlagStateUntilTimeout>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d01a      	beq.n	8008d06 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cd4:	f043 0220 	orr.w	r2, r3, #32
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	e013      	b.n	8008d08 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	2101      	movs	r1, #1
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f7ff ff41 	bl	8008b72 <SPI_WaitFlagStateUntilTimeout>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d007      	beq.n	8008d06 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cfa:	f043 0220 	orr.w	r2, r3, #32
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008d02:	2303      	movs	r3, #3
 8008d04:	e000      	b.n	8008d08 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b088      	sub	sp, #32
 8008d14:	af02      	add	r7, sp, #8
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8008d8c <SPI_EndRxTxTransaction+0x7c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a1b      	ldr	r2, [pc, #108]	@ (8008d90 <SPI_EndRxTxTransaction+0x80>)
 8008d22:	fba2 2303 	umull	r2, r3, r2, r3
 8008d26:	0d5b      	lsrs	r3, r3, #21
 8008d28:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008d2c:	fb02 f303 	mul.w	r3, r2, r3
 8008d30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d3a:	d112      	bne.n	8008d62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2200      	movs	r2, #0
 8008d44:	2180      	movs	r1, #128	@ 0x80
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7ff ff13 	bl	8008b72 <SPI_WaitFlagStateUntilTimeout>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d016      	beq.n	8008d80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d56:	f043 0220 	orr.w	r2, r3, #32
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e00f      	b.n	8008d82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00a      	beq.n	8008d7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d78:	2b80      	cmp	r3, #128	@ 0x80
 8008d7a:	d0f2      	beq.n	8008d62 <SPI_EndRxTxTransaction+0x52>
 8008d7c:	e000      	b.n	8008d80 <SPI_EndRxTxTransaction+0x70>
        break;
 8008d7e:	bf00      	nop
  }

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3718      	adds	r7, #24
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20000100 	.word	0x20000100
 8008d90:	165e9f81 	.word	0x165e9f81

08008d94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e03f      	b.n	8008e26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d106      	bne.n	8008dc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7f9 fe06 	bl	80029cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2224      	movs	r2, #36	@ 0x24
 8008dc4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68da      	ldr	r2, [r3, #12]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008dd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f90b 	bl	8008ff4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	691a      	ldr	r2, [r3, #16]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008dec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	695a      	ldr	r2, [r3, #20]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008dfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68da      	ldr	r2, [r3, #12]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008e0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2220      	movs	r2, #32
 8008e18:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2220      	movs	r2, #32
 8008e20:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b088      	sub	sp, #32
 8008e32:	af02      	add	r7, sp, #8
 8008e34:	60f8      	str	r0, [r7, #12]
 8008e36:	60b9      	str	r1, [r7, #8]
 8008e38:	603b      	str	r3, [r7, #0]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b20      	cmp	r3, #32
 8008e4c:	f040 8083 	bne.w	8008f56 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d002      	beq.n	8008e5c <HAL_UART_Transmit+0x2e>
 8008e56:	88fb      	ldrh	r3, [r7, #6]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d101      	bne.n	8008e60 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e07b      	b.n	8008f58 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d101      	bne.n	8008e6e <HAL_UART_Transmit+0x40>
 8008e6a:	2302      	movs	r3, #2
 8008e6c:	e074      	b.n	8008f58 <HAL_UART_Transmit+0x12a>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2201      	movs	r2, #1
 8008e72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2221      	movs	r2, #33	@ 0x21
 8008e80:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008e84:	f7fb ffa8 	bl	8004dd8 <HAL_GetTick>
 8008e88:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	88fa      	ldrh	r2, [r7, #6]
 8008e8e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	88fa      	ldrh	r2, [r7, #6]
 8008e94:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 8008e9e:	e042      	b.n	8008f26 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008eb6:	d122      	bne.n	8008efe <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	2180      	movs	r1, #128	@ 0x80
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f000 f84c 	bl	8008f60 <UART_WaitOnFlagUntilTimeout>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d001      	beq.n	8008ed2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e042      	b.n	8008f58 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	881b      	ldrh	r3, [r3, #0]
 8008eda:	461a      	mov	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ee4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d103      	bne.n	8008ef6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	3302      	adds	r3, #2
 8008ef2:	60bb      	str	r3, [r7, #8]
 8008ef4:	e017      	b.n	8008f26 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	60bb      	str	r3, [r7, #8]
 8008efc:	e013      	b.n	8008f26 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	2200      	movs	r2, #0
 8008f06:	2180      	movs	r1, #128	@ 0x80
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f000 f829 	bl	8008f60 <UART_WaitOnFlagUntilTimeout>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d001      	beq.n	8008f18 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e01f      	b.n	8008f58 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	1c5a      	adds	r2, r3, #1
 8008f1c:	60ba      	str	r2, [r7, #8]
 8008f1e:	781a      	ldrb	r2, [r3, #0]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1b7      	bne.n	8008ea0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	2200      	movs	r2, #0
 8008f38:	2140      	movs	r1, #64	@ 0x40
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f000 f810 	bl	8008f60 <UART_WaitOnFlagUntilTimeout>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d001      	beq.n	8008f4a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e006      	b.n	8008f58 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	e000      	b.n	8008f58 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008f56:	2302      	movs	r3, #2
  }
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	603b      	str	r3, [r7, #0]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f70:	e02c      	b.n	8008fcc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f78:	d028      	beq.n	8008fcc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d007      	beq.n	8008f90 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f80:	f7fb ff2a 	bl	8004dd8 <HAL_GetTick>
 8008f84:	4602      	mov	r2, r0
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	69ba      	ldr	r2, [r7, #24]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d21d      	bcs.n	8008fcc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8008f9e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	695a      	ldr	r2, [r3, #20]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f022 0201 	bic.w	r2, r2, #1
 8008fae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2220      	movs	r2, #32
 8008fb4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2220      	movs	r2, #32
 8008fbc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	e00f      	b.n	8008fec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	bf0c      	ite	eq
 8008fdc:	2301      	moveq	r3, #1
 8008fde:	2300      	movne	r3, #0
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	79fb      	ldrb	r3, [r7, #7]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d0c3      	beq.n	8008f72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ff8:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009002:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800900e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009012:	68d9      	ldr	r1, [r3, #12]
 8009014:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	ea40 0301 	orr.w	r3, r0, r1
 800901e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009020:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009024:	689a      	ldr	r2, [r3, #8]
 8009026:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	431a      	orrs	r2, r3
 800902e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009032:	695b      	ldr	r3, [r3, #20]
 8009034:	431a      	orrs	r2, r3
 8009036:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	4313      	orrs	r3, r2
 800903e:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 8009042:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800904e:	f021 010c 	bic.w	r1, r1, #12
 8009052:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800905c:	430b      	orrs	r3, r1
 800905e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009060:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800906c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009070:	6999      	ldr	r1, [r3, #24]
 8009072:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	ea40 0301 	orr.w	r3, r0, r1
 800907c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800907e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009082:	69db      	ldr	r3, [r3, #28]
 8009084:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009088:	f040 824a 	bne.w	8009520 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800908c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	4b96      	ldr	r3, [pc, #600]	@ (80092ec <UART_SetConfig+0x2f8>)
 8009094:	429a      	cmp	r2, r3
 8009096:	d006      	beq.n	80090a6 <UART_SetConfig+0xb2>
 8009098:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	4b94      	ldr	r3, [pc, #592]	@ (80092f0 <UART_SetConfig+0x2fc>)
 80090a0:	429a      	cmp	r2, r3
 80090a2:	f040 8129 	bne.w	80092f8 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80090a6:	f7fe fd6f 	bl	8007b88 <HAL_RCC_GetPCLK2Freq>
 80090aa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80090ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80090b2:	2200      	movs	r2, #0
 80090b4:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 80090b8:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 80090bc:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 80090c0:	4622      	mov	r2, r4
 80090c2:	462b      	mov	r3, r5
 80090c4:	1891      	adds	r1, r2, r2
 80090c6:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80090ca:	415b      	adcs	r3, r3
 80090cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80090d0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80090d4:	4621      	mov	r1, r4
 80090d6:	1851      	adds	r1, r2, r1
 80090d8:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80090dc:	4629      	mov	r1, r5
 80090de:	414b      	adcs	r3, r1
 80090e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80090e4:	f04f 0200 	mov.w	r2, #0
 80090e8:	f04f 0300 	mov.w	r3, #0
 80090ec:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 80090f0:	4649      	mov	r1, r9
 80090f2:	00cb      	lsls	r3, r1, #3
 80090f4:	4641      	mov	r1, r8
 80090f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090fa:	4641      	mov	r1, r8
 80090fc:	00ca      	lsls	r2, r1, #3
 80090fe:	4610      	mov	r0, r2
 8009100:	4619      	mov	r1, r3
 8009102:	4603      	mov	r3, r0
 8009104:	4622      	mov	r2, r4
 8009106:	189b      	adds	r3, r3, r2
 8009108:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800910c:	462b      	mov	r3, r5
 800910e:	460a      	mov	r2, r1
 8009110:	eb42 0303 	adc.w	r3, r2, r3
 8009114:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8009118:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8009124:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8009128:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 800912c:	460b      	mov	r3, r1
 800912e:	18db      	adds	r3, r3, r3
 8009130:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009134:	4613      	mov	r3, r2
 8009136:	eb42 0303 	adc.w	r3, r2, r3
 800913a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800913e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8009142:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8009146:	f7f7 fd3f 	bl	8000bc8 <__aeabi_uldivmod>
 800914a:	4602      	mov	r2, r0
 800914c:	460b      	mov	r3, r1
 800914e:	4b69      	ldr	r3, [pc, #420]	@ (80092f4 <UART_SetConfig+0x300>)
 8009150:	fba3 2302 	umull	r2, r3, r3, r2
 8009154:	095b      	lsrs	r3, r3, #5
 8009156:	011c      	lsls	r4, r3, #4
 8009158:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800915c:	2200      	movs	r2, #0
 800915e:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8009162:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8009166:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 800916a:	4642      	mov	r2, r8
 800916c:	464b      	mov	r3, r9
 800916e:	1891      	adds	r1, r2, r2
 8009170:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8009174:	415b      	adcs	r3, r3
 8009176:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800917a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800917e:	4641      	mov	r1, r8
 8009180:	1851      	adds	r1, r2, r1
 8009182:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8009186:	4649      	mov	r1, r9
 8009188:	414b      	adcs	r3, r1
 800918a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800918e:	f04f 0200 	mov.w	r2, #0
 8009192:	f04f 0300 	mov.w	r3, #0
 8009196:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 800919a:	4659      	mov	r1, fp
 800919c:	00cb      	lsls	r3, r1, #3
 800919e:	4651      	mov	r1, sl
 80091a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091a4:	4651      	mov	r1, sl
 80091a6:	00ca      	lsls	r2, r1, #3
 80091a8:	4610      	mov	r0, r2
 80091aa:	4619      	mov	r1, r3
 80091ac:	4603      	mov	r3, r0
 80091ae:	4642      	mov	r2, r8
 80091b0:	189b      	adds	r3, r3, r2
 80091b2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80091b6:	464b      	mov	r3, r9
 80091b8:	460a      	mov	r2, r1
 80091ba:	eb42 0303 	adc.w	r3, r2, r3
 80091be:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80091c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80091ce:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 80091d2:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 80091d6:	460b      	mov	r3, r1
 80091d8:	18db      	adds	r3, r3, r3
 80091da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80091de:	4613      	mov	r3, r2
 80091e0:	eb42 0303 	adc.w	r3, r2, r3
 80091e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80091e8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80091ec:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 80091f0:	f7f7 fcea 	bl	8000bc8 <__aeabi_uldivmod>
 80091f4:	4602      	mov	r2, r0
 80091f6:	460b      	mov	r3, r1
 80091f8:	4611      	mov	r1, r2
 80091fa:	4b3e      	ldr	r3, [pc, #248]	@ (80092f4 <UART_SetConfig+0x300>)
 80091fc:	fba3 2301 	umull	r2, r3, r3, r1
 8009200:	095b      	lsrs	r3, r3, #5
 8009202:	2264      	movs	r2, #100	@ 0x64
 8009204:	fb02 f303 	mul.w	r3, r2, r3
 8009208:	1acb      	subs	r3, r1, r3
 800920a:	00db      	lsls	r3, r3, #3
 800920c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009210:	4b38      	ldr	r3, [pc, #224]	@ (80092f4 <UART_SetConfig+0x300>)
 8009212:	fba3 2302 	umull	r2, r3, r3, r2
 8009216:	095b      	lsrs	r3, r3, #5
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800921e:	441c      	add	r4, r3
 8009220:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009224:	2200      	movs	r2, #0
 8009226:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800922a:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 800922e:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8009232:	4642      	mov	r2, r8
 8009234:	464b      	mov	r3, r9
 8009236:	1891      	adds	r1, r2, r2
 8009238:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800923c:	415b      	adcs	r3, r3
 800923e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009242:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8009246:	4641      	mov	r1, r8
 8009248:	1851      	adds	r1, r2, r1
 800924a:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800924e:	4649      	mov	r1, r9
 8009250:	414b      	adcs	r3, r1
 8009252:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009256:	f04f 0200 	mov.w	r2, #0
 800925a:	f04f 0300 	mov.w	r3, #0
 800925e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 8009262:	4659      	mov	r1, fp
 8009264:	00cb      	lsls	r3, r1, #3
 8009266:	4651      	mov	r1, sl
 8009268:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800926c:	4651      	mov	r1, sl
 800926e:	00ca      	lsls	r2, r1, #3
 8009270:	4610      	mov	r0, r2
 8009272:	4619      	mov	r1, r3
 8009274:	4603      	mov	r3, r0
 8009276:	4642      	mov	r2, r8
 8009278:	189b      	adds	r3, r3, r2
 800927a:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800927e:	464b      	mov	r3, r9
 8009280:	460a      	mov	r2, r1
 8009282:	eb42 0303 	adc.w	r3, r2, r3
 8009286:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800928a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8009296:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 800929a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 800929e:	460b      	mov	r3, r1
 80092a0:	18db      	adds	r3, r3, r3
 80092a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80092a6:	4613      	mov	r3, r2
 80092a8:	eb42 0303 	adc.w	r3, r2, r3
 80092ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80092b0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80092b4:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 80092b8:	f7f7 fc86 	bl	8000bc8 <__aeabi_uldivmod>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	4b0c      	ldr	r3, [pc, #48]	@ (80092f4 <UART_SetConfig+0x300>)
 80092c2:	fba3 1302 	umull	r1, r3, r3, r2
 80092c6:	095b      	lsrs	r3, r3, #5
 80092c8:	2164      	movs	r1, #100	@ 0x64
 80092ca:	fb01 f303 	mul.w	r3, r1, r3
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	00db      	lsls	r3, r3, #3
 80092d2:	3332      	adds	r3, #50	@ 0x32
 80092d4:	4a07      	ldr	r2, [pc, #28]	@ (80092f4 <UART_SetConfig+0x300>)
 80092d6:	fba2 2303 	umull	r2, r3, r2, r3
 80092da:	095b      	lsrs	r3, r3, #5
 80092dc:	f003 0207 	and.w	r2, r3, #7
 80092e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4422      	add	r2, r4
 80092e8:	609a      	str	r2, [r3, #8]
 80092ea:	e34a      	b.n	8009982 <UART_SetConfig+0x98e>
 80092ec:	40011000 	.word	0x40011000
 80092f0:	40011400 	.word	0x40011400
 80092f4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80092f8:	f7fe fc32 	bl	8007b60 <HAL_RCC_GetPCLK1Freq>
 80092fc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009300:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009304:	2200      	movs	r2, #0
 8009306:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800930a:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 800930e:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 8009312:	4622      	mov	r2, r4
 8009314:	462b      	mov	r3, r5
 8009316:	1891      	adds	r1, r2, r2
 8009318:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 800931c:	415b      	adcs	r3, r3
 800931e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009322:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009326:	4621      	mov	r1, r4
 8009328:	eb12 0a01 	adds.w	sl, r2, r1
 800932c:	4629      	mov	r1, r5
 800932e:	eb43 0b01 	adc.w	fp, r3, r1
 8009332:	f04f 0200 	mov.w	r2, #0
 8009336:	f04f 0300 	mov.w	r3, #0
 800933a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800933e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009342:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009346:	4692      	mov	sl, r2
 8009348:	469b      	mov	fp, r3
 800934a:	4623      	mov	r3, r4
 800934c:	eb1a 0303 	adds.w	r3, sl, r3
 8009350:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8009354:	462b      	mov	r3, r5
 8009356:	eb4b 0303 	adc.w	r3, fp, r3
 800935a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800935e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800936a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800936e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 8009372:	460b      	mov	r3, r1
 8009374:	18db      	adds	r3, r3, r3
 8009376:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800937a:	4613      	mov	r3, r2
 800937c:	eb42 0303 	adc.w	r3, r2, r3
 8009380:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009384:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8009388:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 800938c:	f7f7 fc1c 	bl	8000bc8 <__aeabi_uldivmod>
 8009390:	4602      	mov	r2, r0
 8009392:	460b      	mov	r3, r1
 8009394:	4b61      	ldr	r3, [pc, #388]	@ (800951c <UART_SetConfig+0x528>)
 8009396:	fba3 2302 	umull	r2, r3, r3, r2
 800939a:	095b      	lsrs	r3, r3, #5
 800939c:	011c      	lsls	r4, r3, #4
 800939e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80093a2:	2200      	movs	r2, #0
 80093a4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80093a8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 80093ac:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 80093b0:	4642      	mov	r2, r8
 80093b2:	464b      	mov	r3, r9
 80093b4:	1891      	adds	r1, r2, r2
 80093b6:	67b9      	str	r1, [r7, #120]	@ 0x78
 80093b8:	415b      	adcs	r3, r3
 80093ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80093bc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80093c0:	4641      	mov	r1, r8
 80093c2:	1851      	adds	r1, r2, r1
 80093c4:	6739      	str	r1, [r7, #112]	@ 0x70
 80093c6:	4649      	mov	r1, r9
 80093c8:	414b      	adcs	r3, r1
 80093ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80093cc:	f04f 0200 	mov.w	r2, #0
 80093d0:	f04f 0300 	mov.w	r3, #0
 80093d4:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 80093d8:	4659      	mov	r1, fp
 80093da:	00cb      	lsls	r3, r1, #3
 80093dc:	4651      	mov	r1, sl
 80093de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093e2:	4651      	mov	r1, sl
 80093e4:	00ca      	lsls	r2, r1, #3
 80093e6:	4610      	mov	r0, r2
 80093e8:	4619      	mov	r1, r3
 80093ea:	4603      	mov	r3, r0
 80093ec:	4642      	mov	r2, r8
 80093ee:	189b      	adds	r3, r3, r2
 80093f0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80093f4:	464b      	mov	r3, r9
 80093f6:	460a      	mov	r2, r1
 80093f8:	eb42 0303 	adc.w	r3, r2, r3
 80093fc:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8009400:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800940c:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8009410:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 8009414:	460b      	mov	r3, r1
 8009416:	18db      	adds	r3, r3, r3
 8009418:	66bb      	str	r3, [r7, #104]	@ 0x68
 800941a:	4613      	mov	r3, r2
 800941c:	eb42 0303 	adc.w	r3, r2, r3
 8009420:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009422:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009426:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800942a:	f7f7 fbcd 	bl	8000bc8 <__aeabi_uldivmod>
 800942e:	4602      	mov	r2, r0
 8009430:	460b      	mov	r3, r1
 8009432:	4611      	mov	r1, r2
 8009434:	4b39      	ldr	r3, [pc, #228]	@ (800951c <UART_SetConfig+0x528>)
 8009436:	fba3 2301 	umull	r2, r3, r3, r1
 800943a:	095b      	lsrs	r3, r3, #5
 800943c:	2264      	movs	r2, #100	@ 0x64
 800943e:	fb02 f303 	mul.w	r3, r2, r3
 8009442:	1acb      	subs	r3, r1, r3
 8009444:	00db      	lsls	r3, r3, #3
 8009446:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800944a:	4b34      	ldr	r3, [pc, #208]	@ (800951c <UART_SetConfig+0x528>)
 800944c:	fba3 2302 	umull	r2, r3, r3, r2
 8009450:	095b      	lsrs	r3, r3, #5
 8009452:	005b      	lsls	r3, r3, #1
 8009454:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009458:	441c      	add	r4, r3
 800945a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800945e:	2200      	movs	r2, #0
 8009460:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8009464:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8009468:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 800946c:	4642      	mov	r2, r8
 800946e:	464b      	mov	r3, r9
 8009470:	1891      	adds	r1, r2, r2
 8009472:	6639      	str	r1, [r7, #96]	@ 0x60
 8009474:	415b      	adcs	r3, r3
 8009476:	667b      	str	r3, [r7, #100]	@ 0x64
 8009478:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800947c:	4641      	mov	r1, r8
 800947e:	1851      	adds	r1, r2, r1
 8009480:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009482:	4649      	mov	r1, r9
 8009484:	414b      	adcs	r3, r1
 8009486:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009488:	f04f 0200 	mov.w	r2, #0
 800948c:	f04f 0300 	mov.w	r3, #0
 8009490:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8009494:	4659      	mov	r1, fp
 8009496:	00cb      	lsls	r3, r1, #3
 8009498:	4651      	mov	r1, sl
 800949a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800949e:	4651      	mov	r1, sl
 80094a0:	00ca      	lsls	r2, r1, #3
 80094a2:	4610      	mov	r0, r2
 80094a4:	4619      	mov	r1, r3
 80094a6:	4603      	mov	r3, r0
 80094a8:	4642      	mov	r2, r8
 80094aa:	189b      	adds	r3, r3, r2
 80094ac:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80094b0:	464b      	mov	r3, r9
 80094b2:	460a      	mov	r2, r1
 80094b4:	eb42 0303 	adc.w	r3, r2, r3
 80094b8:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80094bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80094c8:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 80094cc:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 80094d0:	460b      	mov	r3, r1
 80094d2:	18db      	adds	r3, r3, r3
 80094d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80094d6:	4613      	mov	r3, r2
 80094d8:	eb42 0303 	adc.w	r3, r2, r3
 80094dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80094de:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80094e2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 80094e6:	f7f7 fb6f 	bl	8000bc8 <__aeabi_uldivmod>
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	4b0b      	ldr	r3, [pc, #44]	@ (800951c <UART_SetConfig+0x528>)
 80094f0:	fba3 1302 	umull	r1, r3, r3, r2
 80094f4:	095b      	lsrs	r3, r3, #5
 80094f6:	2164      	movs	r1, #100	@ 0x64
 80094f8:	fb01 f303 	mul.w	r3, r1, r3
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	00db      	lsls	r3, r3, #3
 8009500:	3332      	adds	r3, #50	@ 0x32
 8009502:	4a06      	ldr	r2, [pc, #24]	@ (800951c <UART_SetConfig+0x528>)
 8009504:	fba2 2303 	umull	r2, r3, r2, r3
 8009508:	095b      	lsrs	r3, r3, #5
 800950a:	f003 0207 	and.w	r2, r3, #7
 800950e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4422      	add	r2, r4
 8009516:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009518:	e233      	b.n	8009982 <UART_SetConfig+0x98e>
 800951a:	bf00      	nop
 800951c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009520:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	4b8d      	ldr	r3, [pc, #564]	@ (800975c <UART_SetConfig+0x768>)
 8009528:	429a      	cmp	r2, r3
 800952a:	d006      	beq.n	800953a <UART_SetConfig+0x546>
 800952c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	4b8b      	ldr	r3, [pc, #556]	@ (8009760 <UART_SetConfig+0x76c>)
 8009534:	429a      	cmp	r2, r3
 8009536:	f040 8117 	bne.w	8009768 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 800953a:	f7fe fb25 	bl	8007b88 <HAL_RCC_GetPCLK2Freq>
 800953e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009542:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009546:	2200      	movs	r2, #0
 8009548:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800954c:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8009550:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8009554:	4622      	mov	r2, r4
 8009556:	462b      	mov	r3, r5
 8009558:	1891      	adds	r1, r2, r2
 800955a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800955c:	415b      	adcs	r3, r3
 800955e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009560:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009564:	4621      	mov	r1, r4
 8009566:	eb12 0801 	adds.w	r8, r2, r1
 800956a:	4629      	mov	r1, r5
 800956c:	eb43 0901 	adc.w	r9, r3, r1
 8009570:	f04f 0200 	mov.w	r2, #0
 8009574:	f04f 0300 	mov.w	r3, #0
 8009578:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800957c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009580:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009584:	4690      	mov	r8, r2
 8009586:	4699      	mov	r9, r3
 8009588:	4623      	mov	r3, r4
 800958a:	eb18 0303 	adds.w	r3, r8, r3
 800958e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8009592:	462b      	mov	r3, r5
 8009594:	eb49 0303 	adc.w	r3, r9, r3
 8009598:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800959c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80095a8:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 80095ac:	f04f 0200 	mov.w	r2, #0
 80095b0:	f04f 0300 	mov.w	r3, #0
 80095b4:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 80095b8:	4629      	mov	r1, r5
 80095ba:	008b      	lsls	r3, r1, #2
 80095bc:	4621      	mov	r1, r4
 80095be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095c2:	4621      	mov	r1, r4
 80095c4:	008a      	lsls	r2, r1, #2
 80095c6:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 80095ca:	f7f7 fafd 	bl	8000bc8 <__aeabi_uldivmod>
 80095ce:	4602      	mov	r2, r0
 80095d0:	460b      	mov	r3, r1
 80095d2:	4b64      	ldr	r3, [pc, #400]	@ (8009764 <UART_SetConfig+0x770>)
 80095d4:	fba3 2302 	umull	r2, r3, r3, r2
 80095d8:	095b      	lsrs	r3, r3, #5
 80095da:	011c      	lsls	r4, r3, #4
 80095dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80095e0:	2200      	movs	r2, #0
 80095e2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80095e6:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80095ea:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 80095ee:	4642      	mov	r2, r8
 80095f0:	464b      	mov	r3, r9
 80095f2:	1891      	adds	r1, r2, r2
 80095f4:	6439      	str	r1, [r7, #64]	@ 0x40
 80095f6:	415b      	adcs	r3, r3
 80095f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80095fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80095fe:	4641      	mov	r1, r8
 8009600:	1851      	adds	r1, r2, r1
 8009602:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009604:	4649      	mov	r1, r9
 8009606:	414b      	adcs	r3, r1
 8009608:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800960a:	f04f 0200 	mov.w	r2, #0
 800960e:	f04f 0300 	mov.w	r3, #0
 8009612:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8009616:	4659      	mov	r1, fp
 8009618:	00cb      	lsls	r3, r1, #3
 800961a:	4651      	mov	r1, sl
 800961c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009620:	4651      	mov	r1, sl
 8009622:	00ca      	lsls	r2, r1, #3
 8009624:	4610      	mov	r0, r2
 8009626:	4619      	mov	r1, r3
 8009628:	4603      	mov	r3, r0
 800962a:	4642      	mov	r2, r8
 800962c:	189b      	adds	r3, r3, r2
 800962e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8009632:	464b      	mov	r3, r9
 8009634:	460a      	mov	r2, r1
 8009636:	eb42 0303 	adc.w	r3, r2, r3
 800963a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800963e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800964a:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 800964e:	f04f 0200 	mov.w	r2, #0
 8009652:	f04f 0300 	mov.w	r3, #0
 8009656:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 800965a:	4649      	mov	r1, r9
 800965c:	008b      	lsls	r3, r1, #2
 800965e:	4641      	mov	r1, r8
 8009660:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009664:	4641      	mov	r1, r8
 8009666:	008a      	lsls	r2, r1, #2
 8009668:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 800966c:	f7f7 faac 	bl	8000bc8 <__aeabi_uldivmod>
 8009670:	4602      	mov	r2, r0
 8009672:	460b      	mov	r3, r1
 8009674:	4611      	mov	r1, r2
 8009676:	4b3b      	ldr	r3, [pc, #236]	@ (8009764 <UART_SetConfig+0x770>)
 8009678:	fba3 2301 	umull	r2, r3, r3, r1
 800967c:	095b      	lsrs	r3, r3, #5
 800967e:	2264      	movs	r2, #100	@ 0x64
 8009680:	fb02 f303 	mul.w	r3, r2, r3
 8009684:	1acb      	subs	r3, r1, r3
 8009686:	011b      	lsls	r3, r3, #4
 8009688:	3332      	adds	r3, #50	@ 0x32
 800968a:	4a36      	ldr	r2, [pc, #216]	@ (8009764 <UART_SetConfig+0x770>)
 800968c:	fba2 2303 	umull	r2, r3, r2, r3
 8009690:	095b      	lsrs	r3, r3, #5
 8009692:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009696:	441c      	add	r4, r3
 8009698:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800969c:	2200      	movs	r2, #0
 800969e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80096a2:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 80096a6:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 80096aa:	4642      	mov	r2, r8
 80096ac:	464b      	mov	r3, r9
 80096ae:	1891      	adds	r1, r2, r2
 80096b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80096b2:	415b      	adcs	r3, r3
 80096b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80096b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80096ba:	4641      	mov	r1, r8
 80096bc:	1851      	adds	r1, r2, r1
 80096be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80096c0:	4649      	mov	r1, r9
 80096c2:	414b      	adcs	r3, r1
 80096c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096c6:	f04f 0200 	mov.w	r2, #0
 80096ca:	f04f 0300 	mov.w	r3, #0
 80096ce:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 80096d2:	4659      	mov	r1, fp
 80096d4:	00cb      	lsls	r3, r1, #3
 80096d6:	4651      	mov	r1, sl
 80096d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096dc:	4651      	mov	r1, sl
 80096de:	00ca      	lsls	r2, r1, #3
 80096e0:	4610      	mov	r0, r2
 80096e2:	4619      	mov	r1, r3
 80096e4:	4603      	mov	r3, r0
 80096e6:	4642      	mov	r2, r8
 80096e8:	189b      	adds	r3, r3, r2
 80096ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80096ee:	464b      	mov	r3, r9
 80096f0:	460a      	mov	r2, r1
 80096f2:	eb42 0303 	adc.w	r3, r2, r3
 80096f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80096fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8009706:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 800970a:	f04f 0200 	mov.w	r2, #0
 800970e:	f04f 0300 	mov.w	r3, #0
 8009712:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 8009716:	4649      	mov	r1, r9
 8009718:	008b      	lsls	r3, r1, #2
 800971a:	4641      	mov	r1, r8
 800971c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009720:	4641      	mov	r1, r8
 8009722:	008a      	lsls	r2, r1, #2
 8009724:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8009728:	f7f7 fa4e 	bl	8000bc8 <__aeabi_uldivmod>
 800972c:	4602      	mov	r2, r0
 800972e:	460b      	mov	r3, r1
 8009730:	4b0c      	ldr	r3, [pc, #48]	@ (8009764 <UART_SetConfig+0x770>)
 8009732:	fba3 1302 	umull	r1, r3, r3, r2
 8009736:	095b      	lsrs	r3, r3, #5
 8009738:	2164      	movs	r1, #100	@ 0x64
 800973a:	fb01 f303 	mul.w	r3, r1, r3
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	011b      	lsls	r3, r3, #4
 8009742:	3332      	adds	r3, #50	@ 0x32
 8009744:	4a07      	ldr	r2, [pc, #28]	@ (8009764 <UART_SetConfig+0x770>)
 8009746:	fba2 2303 	umull	r2, r3, r2, r3
 800974a:	095b      	lsrs	r3, r3, #5
 800974c:	f003 020f 	and.w	r2, r3, #15
 8009750:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4422      	add	r2, r4
 8009758:	609a      	str	r2, [r3, #8]
 800975a:	e112      	b.n	8009982 <UART_SetConfig+0x98e>
 800975c:	40011000 	.word	0x40011000
 8009760:	40011400 	.word	0x40011400
 8009764:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8009768:	f7fe f9fa 	bl	8007b60 <HAL_RCC_GetPCLK1Freq>
 800976c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009770:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009774:	2200      	movs	r2, #0
 8009776:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800977a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800977e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 8009782:	4642      	mov	r2, r8
 8009784:	464b      	mov	r3, r9
 8009786:	1891      	adds	r1, r2, r2
 8009788:	6239      	str	r1, [r7, #32]
 800978a:	415b      	adcs	r3, r3
 800978c:	627b      	str	r3, [r7, #36]	@ 0x24
 800978e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009792:	4641      	mov	r1, r8
 8009794:	1854      	adds	r4, r2, r1
 8009796:	4649      	mov	r1, r9
 8009798:	eb43 0501 	adc.w	r5, r3, r1
 800979c:	f04f 0200 	mov.w	r2, #0
 80097a0:	f04f 0300 	mov.w	r3, #0
 80097a4:	00eb      	lsls	r3, r5, #3
 80097a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80097aa:	00e2      	lsls	r2, r4, #3
 80097ac:	4614      	mov	r4, r2
 80097ae:	461d      	mov	r5, r3
 80097b0:	4643      	mov	r3, r8
 80097b2:	18e3      	adds	r3, r4, r3
 80097b4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80097b8:	464b      	mov	r3, r9
 80097ba:	eb45 0303 	adc.w	r3, r5, r3
 80097be:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80097c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80097ce:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 80097d2:	f04f 0200 	mov.w	r2, #0
 80097d6:	f04f 0300 	mov.w	r3, #0
 80097da:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 80097de:	4629      	mov	r1, r5
 80097e0:	008b      	lsls	r3, r1, #2
 80097e2:	4621      	mov	r1, r4
 80097e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097e8:	4621      	mov	r1, r4
 80097ea:	008a      	lsls	r2, r1, #2
 80097ec:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80097f0:	f7f7 f9ea 	bl	8000bc8 <__aeabi_uldivmod>
 80097f4:	4602      	mov	r2, r0
 80097f6:	460b      	mov	r3, r1
 80097f8:	4b65      	ldr	r3, [pc, #404]	@ (8009990 <UART_SetConfig+0x99c>)
 80097fa:	fba3 2302 	umull	r2, r3, r3, r2
 80097fe:	095b      	lsrs	r3, r3, #5
 8009800:	011c      	lsls	r4, r3, #4
 8009802:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009806:	2200      	movs	r2, #0
 8009808:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800980c:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8009810:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8009814:	4642      	mov	r2, r8
 8009816:	464b      	mov	r3, r9
 8009818:	1891      	adds	r1, r2, r2
 800981a:	61b9      	str	r1, [r7, #24]
 800981c:	415b      	adcs	r3, r3
 800981e:	61fb      	str	r3, [r7, #28]
 8009820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009824:	4641      	mov	r1, r8
 8009826:	1851      	adds	r1, r2, r1
 8009828:	6139      	str	r1, [r7, #16]
 800982a:	4649      	mov	r1, r9
 800982c:	414b      	adcs	r3, r1
 800982e:	617b      	str	r3, [r7, #20]
 8009830:	f04f 0200 	mov.w	r2, #0
 8009834:	f04f 0300 	mov.w	r3, #0
 8009838:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800983c:	4659      	mov	r1, fp
 800983e:	00cb      	lsls	r3, r1, #3
 8009840:	4651      	mov	r1, sl
 8009842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009846:	4651      	mov	r1, sl
 8009848:	00ca      	lsls	r2, r1, #3
 800984a:	4610      	mov	r0, r2
 800984c:	4619      	mov	r1, r3
 800984e:	4603      	mov	r3, r0
 8009850:	4642      	mov	r2, r8
 8009852:	189b      	adds	r3, r3, r2
 8009854:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009858:	464b      	mov	r3, r9
 800985a:	460a      	mov	r2, r1
 800985c:	eb42 0303 	adc.w	r3, r2, r3
 8009860:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009864:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009870:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8009874:	f04f 0200 	mov.w	r2, #0
 8009878:	f04f 0300 	mov.w	r3, #0
 800987c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8009880:	4649      	mov	r1, r9
 8009882:	008b      	lsls	r3, r1, #2
 8009884:	4641      	mov	r1, r8
 8009886:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800988a:	4641      	mov	r1, r8
 800988c:	008a      	lsls	r2, r1, #2
 800988e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8009892:	f7f7 f999 	bl	8000bc8 <__aeabi_uldivmod>
 8009896:	4602      	mov	r2, r0
 8009898:	460b      	mov	r3, r1
 800989a:	4611      	mov	r1, r2
 800989c:	4b3c      	ldr	r3, [pc, #240]	@ (8009990 <UART_SetConfig+0x99c>)
 800989e:	fba3 2301 	umull	r2, r3, r3, r1
 80098a2:	095b      	lsrs	r3, r3, #5
 80098a4:	2264      	movs	r2, #100	@ 0x64
 80098a6:	fb02 f303 	mul.w	r3, r2, r3
 80098aa:	1acb      	subs	r3, r1, r3
 80098ac:	011b      	lsls	r3, r3, #4
 80098ae:	3332      	adds	r3, #50	@ 0x32
 80098b0:	4a37      	ldr	r2, [pc, #220]	@ (8009990 <UART_SetConfig+0x99c>)
 80098b2:	fba2 2303 	umull	r2, r3, r2, r3
 80098b6:	095b      	lsrs	r3, r3, #5
 80098b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80098bc:	441c      	add	r4, r3
 80098be:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80098c2:	2200      	movs	r2, #0
 80098c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80098c8:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80098cc:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80098d0:	4642      	mov	r2, r8
 80098d2:	464b      	mov	r3, r9
 80098d4:	1891      	adds	r1, r2, r2
 80098d6:	60b9      	str	r1, [r7, #8]
 80098d8:	415b      	adcs	r3, r3
 80098da:	60fb      	str	r3, [r7, #12]
 80098dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098e0:	4641      	mov	r1, r8
 80098e2:	1851      	adds	r1, r2, r1
 80098e4:	6039      	str	r1, [r7, #0]
 80098e6:	4649      	mov	r1, r9
 80098e8:	414b      	adcs	r3, r1
 80098ea:	607b      	str	r3, [r7, #4]
 80098ec:	f04f 0200 	mov.w	r2, #0
 80098f0:	f04f 0300 	mov.w	r3, #0
 80098f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80098f8:	4659      	mov	r1, fp
 80098fa:	00cb      	lsls	r3, r1, #3
 80098fc:	4651      	mov	r1, sl
 80098fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009902:	4651      	mov	r1, sl
 8009904:	00ca      	lsls	r2, r1, #3
 8009906:	4610      	mov	r0, r2
 8009908:	4619      	mov	r1, r3
 800990a:	4603      	mov	r3, r0
 800990c:	4642      	mov	r2, r8
 800990e:	189b      	adds	r3, r3, r2
 8009910:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009914:	464b      	mov	r3, r9
 8009916:	460a      	mov	r2, r1
 8009918:	eb42 0303 	adc.w	r3, r2, r3
 800991c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009920:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800992c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009930:	f04f 0200 	mov.w	r2, #0
 8009934:	f04f 0300 	mov.w	r3, #0
 8009938:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800993c:	4649      	mov	r1, r9
 800993e:	008b      	lsls	r3, r1, #2
 8009940:	4641      	mov	r1, r8
 8009942:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009946:	4641      	mov	r1, r8
 8009948:	008a      	lsls	r2, r1, #2
 800994a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800994e:	f7f7 f93b 	bl	8000bc8 <__aeabi_uldivmod>
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	4b0e      	ldr	r3, [pc, #56]	@ (8009990 <UART_SetConfig+0x99c>)
 8009958:	fba3 1302 	umull	r1, r3, r3, r2
 800995c:	095b      	lsrs	r3, r3, #5
 800995e:	2164      	movs	r1, #100	@ 0x64
 8009960:	fb01 f303 	mul.w	r3, r1, r3
 8009964:	1ad3      	subs	r3, r2, r3
 8009966:	011b      	lsls	r3, r3, #4
 8009968:	3332      	adds	r3, #50	@ 0x32
 800996a:	4a09      	ldr	r2, [pc, #36]	@ (8009990 <UART_SetConfig+0x99c>)
 800996c:	fba2 2303 	umull	r2, r3, r2, r3
 8009970:	095b      	lsrs	r3, r3, #5
 8009972:	f003 020f 	and.w	r2, r3, #15
 8009976:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4422      	add	r2, r4
 800997e:	609a      	str	r2, [r3, #8]
}
 8009980:	e7ff      	b.n	8009982 <UART_SetConfig+0x98e>
 8009982:	bf00      	nop
 8009984:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8009988:	46bd      	mov	sp, r7
 800998a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800998e:	bf00      	nop
 8009990:	51eb851f 	.word	0x51eb851f

08009994 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800999e:	2300      	movs	r3, #0
 80099a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80099a2:	2300      	movs	r3, #0
 80099a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d029      	beq.n	8009a02 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80099ba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80099be:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80099c8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80099ce:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80099d4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80099da:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80099e0:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80099e6:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80099ec:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                                               Init->ReadBurst          |\
 80099f2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	601a      	str	r2, [r3, #0]
 8009a00:	e034      	b.n	8009a6c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009a0e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009a18:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 8009a1e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009a32:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009a36:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009a40:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8009a46:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8009a4c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8009a52:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8009a58:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	68ba      	ldr	r2, [r7, #8]
 8009a6a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3714      	adds	r7, #20
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr

08009a7a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	b087      	sub	sp, #28
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	60f8      	str	r0, [r7, #12]
 8009a82:	60b9      	str	r1, [r7, #8]
 8009a84:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d02e      	beq.n	8009af2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009aa0:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009ab0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009aba:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009ac4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	3b01      	subs	r3, #1
 8009acc:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009ace:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	695b      	ldr	r3, [r3, #20]
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009ad8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	697a      	ldr	r2, [r7, #20]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	609a      	str	r2, [r3, #8]
 8009af0:	e03b      	b.n	8009b6a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009afe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b02:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	695b      	ldr	r3, [r3, #20]
 8009b10:	3b01      	subs	r3, #1
 8009b12:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009b14:	4313      	orrs	r3, r2
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009b28:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	3b01      	subs	r3, #1
 8009b36:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009b38:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009b42:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009b4c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	3b01      	subs	r3, #1
 8009b54:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009b56:	4313      	orrs	r3, r2
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	697a      	ldr	r2, [r7, #20]
 8009b62:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	693a      	ldr	r2, [r7, #16]
 8009b68:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	371c      	adds	r7, #28
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8009b84:	2300      	movs	r3, #0
 8009b86:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009b94:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009b9e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8009bb0:	f7fb f912 	bl	8004dd8 <HAL_GetTick>
 8009bb4:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009bb6:	e010      	b.n	8009bda <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bbe:	d00c      	beq.n	8009bda <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d007      	beq.n	8009bd6 <FMC_SDRAM_SendCommand+0x5e>
 8009bc6:	f7fb f907 	bl	8004dd8 <HAL_GetTick>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d201      	bcs.n	8009bda <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e006      	b.n	8009be8 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	f003 0320 	and.w	r3, r3, #32
 8009be2:	2b20      	cmp	r3, #32
 8009be4:	d0e8      	beq.n	8009bb8 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3718      	adds	r7, #24
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	695a      	ldr	r2, [r3, #20]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	005b      	lsls	r3, r3, #1
 8009c02:	431a      	orrs	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	370c      	adds	r7, #12
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
	...

08009c18 <arm_max_f32>:
 8009c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c1c:	1e4f      	subs	r7, r1, #1
 8009c1e:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8009c22:	f100 0e04 	add.w	lr, r0, #4
 8009c26:	edd0 7a00 	vldr	s15, [r0]
 8009c2a:	d058      	beq.n	8009cde <arm_max_f32+0xc6>
 8009c2c:	3014      	adds	r0, #20
 8009c2e:	46c4      	mov	ip, r8
 8009c30:	2604      	movs	r6, #4
 8009c32:	2400      	movs	r4, #0
 8009c34:	ed10 6a04 	vldr	s12, [r0, #-16]
 8009c38:	ed50 6a03 	vldr	s13, [r0, #-12]
 8009c3c:	ed10 7a02 	vldr	s14, [r0, #-8]
 8009c40:	ed50 5a01 	vldr	s11, [r0, #-4]
 8009c44:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8009c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c4c:	bfc8      	it	gt
 8009c4e:	eef0 7a46 	vmovgt.f32	s15, s12
 8009c52:	f1a6 0503 	sub.w	r5, r6, #3
 8009c56:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009c5a:	bfc8      	it	gt
 8009c5c:	462c      	movgt	r4, r5
 8009c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c62:	bf48      	it	mi
 8009c64:	eef0 7a66 	vmovmi.f32	s15, s13
 8009c68:	f1a6 0502 	sub.w	r5, r6, #2
 8009c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c70:	bf48      	it	mi
 8009c72:	462c      	movmi	r4, r5
 8009c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c78:	bf48      	it	mi
 8009c7a:	eef0 7a47 	vmovmi.f32	s15, s14
 8009c7e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009c82:	eef4 7ae5 	vcmpe.f32	s15, s11
 8009c86:	bf48      	it	mi
 8009c88:	462c      	movmi	r4, r5
 8009c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c8e:	bf48      	it	mi
 8009c90:	4634      	movmi	r4, r6
 8009c92:	bf48      	it	mi
 8009c94:	eef0 7a65 	vmovmi.f32	s15, s11
 8009c98:	f1bc 0c01 	subs.w	ip, ip, #1
 8009c9c:	f100 0010 	add.w	r0, r0, #16
 8009ca0:	f106 0604 	add.w	r6, r6, #4
 8009ca4:	d1c6      	bne.n	8009c34 <arm_max_f32+0x1c>
 8009ca6:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8009caa:	f017 0003 	ands.w	r0, r7, #3
 8009cae:	d018      	beq.n	8009ce2 <arm_max_f32+0xca>
 8009cb0:	1a08      	subs	r0, r1, r0
 8009cb2:	ecbe 7a01 	vldmia	lr!, {s14}
 8009cb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cbe:	bfc8      	it	gt
 8009cc0:	4604      	movgt	r4, r0
 8009cc2:	f100 0001 	add.w	r0, r0, #1
 8009cc6:	bfd8      	it	le
 8009cc8:	eeb0 7a67 	vmovle.f32	s14, s15
 8009ccc:	4281      	cmp	r1, r0
 8009cce:	eef0 7a47 	vmov.f32	s15, s14
 8009cd2:	d1ee      	bne.n	8009cb2 <arm_max_f32+0x9a>
 8009cd4:	ed82 7a00 	vstr	s14, [r2]
 8009cd8:	601c      	str	r4, [r3, #0]
 8009cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cde:	4644      	mov	r4, r8
 8009ce0:	e7e3      	b.n	8009caa <arm_max_f32+0x92>
 8009ce2:	eeb0 7a67 	vmov.f32	s14, s15
 8009ce6:	e7f5      	b.n	8009cd4 <arm_max_f32+0xbc>

08009ce8 <arm_cfft_radix4_init_f32>:
 8009ce8:	b410      	push	{r4}
 8009cea:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8009cee:	4c29      	ldr	r4, [pc, #164]	@ (8009d94 <arm_cfft_radix4_init_f32+0xac>)
 8009cf0:	7082      	strb	r2, [r0, #2]
 8009cf2:	70c3      	strb	r3, [r0, #3]
 8009cf4:	8001      	strh	r1, [r0, #0]
 8009cf6:	6044      	str	r4, [r0, #4]
 8009cf8:	d03f      	beq.n	8009d7a <arm_cfft_radix4_init_f32+0x92>
 8009cfa:	d80e      	bhi.n	8009d1a <arm_cfft_radix4_init_f32+0x32>
 8009cfc:	2910      	cmp	r1, #16
 8009cfe:	d02f      	beq.n	8009d60 <arm_cfft_radix4_init_f32+0x78>
 8009d00:	2940      	cmp	r1, #64	@ 0x40
 8009d02:	d11c      	bne.n	8009d3e <arm_cfft_radix4_init_f32+0x56>
 8009d04:	f04f 5272 	mov.w	r2, #1015021568	@ 0x3c800000
 8009d08:	4b23      	ldr	r3, [pc, #140]	@ (8009d98 <arm_cfft_radix4_init_f32+0xb0>)
 8009d0a:	8181      	strh	r1, [r0, #12]
 8009d0c:	81c1      	strh	r1, [r0, #14]
 8009d0e:	6102      	str	r2, [r0, #16]
 8009d10:	6083      	str	r3, [r0, #8]
 8009d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d16:	2000      	movs	r0, #0
 8009d18:	4770      	bx	lr
 8009d1a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009d1e:	d013      	beq.n	8009d48 <arm_cfft_radix4_init_f32+0x60>
 8009d20:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8009d24:	d10b      	bne.n	8009d3e <arm_cfft_radix4_init_f32+0x56>
 8009d26:	f04f 5366 	mov.w	r3, #964689920	@ 0x39800000
 8009d2a:	6103      	str	r3, [r0, #16]
 8009d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8009d9c <arm_cfft_radix4_init_f32+0xb4>)
 8009d2e:	6082      	str	r2, [r0, #8]
 8009d30:	2301      	movs	r3, #1
 8009d32:	8183      	strh	r3, [r0, #12]
 8009d34:	81c3      	strh	r3, [r0, #14]
 8009d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	4770      	bx	lr
 8009d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d46:	4770      	bx	lr
 8009d48:	f04f 536a 	mov.w	r3, #981467136	@ 0x3a800000
 8009d4c:	6103      	str	r3, [r0, #16]
 8009d4e:	4a14      	ldr	r2, [pc, #80]	@ (8009da0 <arm_cfft_radix4_init_f32+0xb8>)
 8009d50:	6082      	str	r2, [r0, #8]
 8009d52:	2304      	movs	r3, #4
 8009d54:	8183      	strh	r3, [r0, #12]
 8009d56:	81c3      	strh	r3, [r0, #14]
 8009d58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	4770      	bx	lr
 8009d60:	f04f 5376 	mov.w	r3, #1031798784	@ 0x3d800000
 8009d64:	6103      	str	r3, [r0, #16]
 8009d66:	4a0f      	ldr	r2, [pc, #60]	@ (8009da4 <arm_cfft_radix4_init_f32+0xbc>)
 8009d68:	6082      	str	r2, [r0, #8]
 8009d6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d6e:	8183      	strh	r3, [r0, #12]
 8009d70:	81c3      	strh	r3, [r0, #14]
 8009d72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d76:	2000      	movs	r0, #0
 8009d78:	4770      	bx	lr
 8009d7a:	f04f 536e 	mov.w	r3, #998244352	@ 0x3b800000
 8009d7e:	6103      	str	r3, [r0, #16]
 8009d80:	4a09      	ldr	r2, [pc, #36]	@ (8009da8 <arm_cfft_radix4_init_f32+0xc0>)
 8009d82:	6082      	str	r2, [r0, #8]
 8009d84:	2310      	movs	r3, #16
 8009d86:	8183      	strh	r3, [r0, #12]
 8009d88:	81c3      	strh	r3, [r0, #14]
 8009d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d8e:	2000      	movs	r0, #0
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	08011250 	.word	0x08011250
 8009d98:	080102ca 	.word	0x080102ca
 8009d9c:	0801024c 	.word	0x0801024c
 8009da0:	08010252 	.word	0x08010252
 8009da4:	0801044a 	.word	0x0801044a
 8009da8:	0801026a 	.word	0x0801026a

08009dac <arm_radix4_butterfly_f32>:
 8009dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db0:	ed2d 8b06 	vpush	{d8-d10}
 8009db4:	468a      	mov	sl, r1
 8009db6:	0889      	lsrs	r1, r1, #2
 8009db8:	b08d      	sub	sp, #52	@ 0x34
 8009dba:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 8009dbe:	eb00 040c 	add.w	r4, r0, ip
 8009dc2:	460d      	mov	r5, r1
 8009dc4:	461f      	mov	r7, r3
 8009dc6:	4691      	mov	r9, r2
 8009dc8:	920a      	str	r2, [sp, #40]	@ 0x28
 8009dca:	eb04 020c 	add.w	r2, r4, ip
 8009dce:	4606      	mov	r6, r0
 8009dd0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8009dd4:	9700      	str	r7, [sp, #0]
 8009dd6:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 8009dda:	9009      	str	r0, [sp, #36]	@ 0x24
 8009ddc:	eba2 07c5 	sub.w	r7, r2, r5, lsl #3
 8009de0:	f10c 0004 	add.w	r0, ip, #4
 8009de4:	9701      	str	r7, [sp, #4]
 8009de6:	9103      	str	r1, [sp, #12]
 8009de8:	4430      	add	r0, r6
 8009dea:	4631      	mov	r1, r6
 8009dec:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8009df0:	1d37      	adds	r7, r6, #4
 8009df2:	9e00      	ldr	r6, [sp, #0]
 8009df4:	46ab      	mov	fp, r5
 8009df6:	00f5      	lsls	r5, r6, #3
 8009df8:	9502      	str	r5, [sp, #8]
 8009dfa:	f8cd b010 	str.w	fp, [sp, #16]
 8009dfe:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009e02:	f8cd a008 	str.w	sl, [sp, #8]
 8009e06:	f8dd a004 	ldr.w	sl, [sp, #4]
 8009e0a:	ea4f 1806 	mov.w	r8, r6, lsl #4
 8009e0e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8009e12:	464e      	mov	r6, r9
 8009e14:	464d      	mov	r5, r9
 8009e16:	edd1 4a01 	vldr	s9, [r1, #4]
 8009e1a:	ed10 4a01 	vldr	s8, [r0, #-4]
 8009e1e:	ed17 6a01 	vldr	s12, [r7, #-4]
 8009e22:	edd2 6a00 	vldr	s13, [r2]
 8009e26:	ed94 7a01 	vldr	s14, [r4, #4]
 8009e2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8009e2e:	ed93 5a00 	vldr	s10, [r3]
 8009e32:	edd2 5a01 	vldr	s11, [r2, #4]
 8009e36:	ed99 3a00 	vldr	s6, [r9]
 8009e3a:	edd9 3a01 	vldr	s7, [r9, #4]
 8009e3e:	ee36 2a26 	vadd.f32	s4, s12, s13
 8009e42:	ee74 2a05 	vadd.f32	s5, s8, s10
 8009e46:	ee34 1aa5 	vadd.f32	s2, s9, s11
 8009e4a:	ee77 1a27 	vadd.f32	s3, s14, s15
 8009e4e:	ee32 0a22 	vadd.f32	s0, s4, s5
 8009e52:	ee71 0a21 	vadd.f32	s1, s2, s3
 8009e56:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009e5a:	ee34 5a45 	vsub.f32	s10, s8, s10
 8009e5e:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8009e62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e66:	ed07 0a01 	vstr	s0, [r7, #-4]
 8009e6a:	edc1 0a01 	vstr	s1, [r1, #4]
 8009e6e:	ed95 4a00 	vldr	s8, [r5]
 8009e72:	edd6 6a00 	vldr	s13, [r6]
 8009e76:	edd6 7a01 	vldr	s15, [r6, #4]
 8009e7a:	ee72 4a62 	vsub.f32	s9, s4, s5
 8009e7e:	ee71 1a61 	vsub.f32	s3, s2, s3
 8009e82:	ee75 2ac5 	vsub.f32	s5, s11, s10
 8009e86:	ed95 1a01 	vldr	s2, [r5, #4]
 8009e8a:	ee36 2a07 	vadd.f32	s4, s12, s14
 8009e8e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8009e92:	ee35 6a25 	vadd.f32	s12, s10, s11
 8009e96:	ee62 0a04 	vmul.f32	s1, s4, s8
 8009e9a:	ee23 5a21 	vmul.f32	s10, s6, s3
 8009e9e:	ee22 2a01 	vmul.f32	s4, s4, s2
 8009ea2:	ee22 4a84 	vmul.f32	s8, s5, s8
 8009ea6:	ee22 1a81 	vmul.f32	s2, s5, s2
 8009eaa:	ee67 5a26 	vmul.f32	s11, s14, s13
 8009eae:	ee63 2a24 	vmul.f32	s5, s6, s9
 8009eb2:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009eb6:	ee63 4aa4 	vmul.f32	s9, s7, s9
 8009eba:	ee26 6a27 	vmul.f32	s12, s12, s15
 8009ebe:	ee63 1aa1 	vmul.f32	s3, s7, s3
 8009ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ec6:	ee31 3a20 	vadd.f32	s6, s2, s1
 8009eca:	ee34 4a42 	vsub.f32	s8, s8, s4
 8009ece:	ee71 3aa2 	vadd.f32	s7, s3, s5
 8009ed2:	ee35 5a64 	vsub.f32	s10, s10, s9
 8009ed6:	ee36 7a25 	vadd.f32	s14, s12, s11
 8009eda:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009ede:	3108      	adds	r1, #8
 8009ee0:	4551      	cmp	r1, sl
 8009ee2:	ed40 3a01 	vstr	s7, [r0, #-4]
 8009ee6:	f107 0708 	add.w	r7, r7, #8
 8009eea:	ed84 5a01 	vstr	s10, [r4, #4]
 8009eee:	44c1      	add	r9, r8
 8009ef0:	ed82 3a00 	vstr	s6, [r2]
 8009ef4:	ed82 4a01 	vstr	s8, [r2, #4]
 8009ef8:	445d      	add	r5, fp
 8009efa:	ed83 7a00 	vstr	s14, [r3]
 8009efe:	edc3 7a01 	vstr	s15, [r3, #4]
 8009f02:	4476      	add	r6, lr
 8009f04:	f100 0008 	add.w	r0, r0, #8
 8009f08:	f104 0408 	add.w	r4, r4, #8
 8009f0c:	f102 0208 	add.w	r2, r2, #8
 8009f10:	f103 0308 	add.w	r3, r3, #8
 8009f14:	f47f af7f 	bne.w	8009e16 <arm_radix4_butterfly_f32+0x6a>
 8009f18:	9b00      	ldr	r3, [sp, #0]
 8009f1a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8009f1e:	f8dd b010 	ldr.w	fp, [sp, #16]
 8009f22:	f8dd a008 	ldr.w	sl, [sp, #8]
 8009f26:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	2a04      	cmp	r2, #4
 8009f2e:	9306      	str	r3, [sp, #24]
 8009f30:	f240 80ba 	bls.w	800a0a8 <arm_radix4_butterfly_f32+0x2fc>
 8009f34:	9806      	ldr	r0, [sp, #24]
 8009f36:	9207      	str	r2, [sp, #28]
 8009f38:	ea4f 039b 	mov.w	r3, fp, lsr #2
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	9308      	str	r3, [sp, #32]
 8009f40:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8009f44:	1e4a      	subs	r2, r1, #1
 8009f46:	00db      	lsls	r3, r3, #3
 8009f48:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8009f4a:	9205      	str	r2, [sp, #20]
 8009f4c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009f4e:	9303      	str	r3, [sp, #12]
 8009f50:	010a      	lsls	r2, r1, #4
 8009f52:	0103      	lsls	r3, r0, #4
 8009f54:	9204      	str	r2, [sp, #16]
 8009f56:	9302      	str	r3, [sp, #8]
 8009f58:	00c2      	lsls	r2, r0, #3
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
 8009f60:	9201      	str	r2, [sp, #4]
 8009f62:	46b8      	mov	r8, r7
 8009f64:	46be      	mov	lr, r7
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	9b04      	ldr	r3, [sp, #16]
 8009f6a:	ed97 1a00 	vldr	s2, [r7]
 8009f6e:	edd7 1a01 	vldr	s3, [r7, #4]
 8009f72:	ed9e 2a00 	vldr	s4, [lr]
 8009f76:	edde 2a01 	vldr	s5, [lr, #4]
 8009f7a:	ed98 3a00 	vldr	s6, [r8]
 8009f7e:	edd8 3a01 	vldr	s7, [r8, #4]
 8009f82:	9d00      	ldr	r5, [sp, #0]
 8009f84:	18f1      	adds	r1, r6, r3
 8009f86:	eb09 0203 	add.w	r2, r9, r3
 8009f8a:	1d34      	adds	r4, r6, #4
 8009f8c:	464b      	mov	r3, r9
 8009f8e:	4630      	mov	r0, r6
 8009f90:	ed90 4a01 	vldr	s8, [r0, #4]
 8009f94:	ed54 5a01 	vldr	s11, [r4, #-4]
 8009f98:	ed91 7a00 	vldr	s14, [r1]
 8009f9c:	edd2 7a00 	vldr	s15, [r2]
 8009fa0:	edd3 4a01 	vldr	s9, [r3, #4]
 8009fa4:	ed92 5a01 	vldr	s10, [r2, #4]
 8009fa8:	ed93 6a00 	vldr	s12, [r3]
 8009fac:	edd1 6a01 	vldr	s13, [r1, #4]
 8009fb0:	ee35 0a87 	vadd.f32	s0, s11, s14
 8009fb4:	ee34 8a26 	vadd.f32	s16, s8, s13
 8009fb8:	ee76 8a27 	vadd.f32	s17, s12, s15
 8009fbc:	ee74 6a66 	vsub.f32	s13, s8, s13
 8009fc0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009fc4:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8009fc8:	ee74 7ac5 	vsub.f32	s15, s9, s10
 8009fcc:	ee74 0a85 	vadd.f32	s1, s9, s10
 8009fd0:	ee35 7ae7 	vsub.f32	s14, s11, s15
 8009fd4:	ee78 4a60 	vsub.f32	s9, s16, s1
 8009fd8:	ee35 5aa7 	vadd.f32	s10, s11, s15
 8009fdc:	ee30 4a68 	vsub.f32	s8, s0, s17
 8009fe0:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8009fe4:	ee76 7a26 	vadd.f32	s15, s12, s13
 8009fe8:	ee22 aa04 	vmul.f32	s20, s4, s8
 8009fec:	ee62 aaa4 	vmul.f32	s21, s5, s9
 8009ff0:	ee22 4a84 	vmul.f32	s8, s5, s8
 8009ff4:	ee21 9a05 	vmul.f32	s18, s2, s10
 8009ff8:	ee61 9aa5 	vmul.f32	s19, s3, s11
 8009ffc:	ee63 6a07 	vmul.f32	s13, s6, s14
 800a000:	ee23 6aa7 	vmul.f32	s12, s7, s15
 800a004:	ee62 4a24 	vmul.f32	s9, s4, s9
 800a008:	ee21 5a85 	vmul.f32	s10, s3, s10
 800a00c:	ee61 5a25 	vmul.f32	s11, s2, s11
 800a010:	ee23 7a87 	vmul.f32	s14, s7, s14
 800a014:	ee63 7a27 	vmul.f32	s15, s6, s15
 800a018:	ee78 0a20 	vadd.f32	s1, s16, s1
 800a01c:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800a020:	ee30 0a28 	vadd.f32	s0, s0, s17
 800a024:	ee3a 8a8a 	vadd.f32	s16, s21, s20
 800a028:	ee39 4a89 	vadd.f32	s8, s19, s18
 800a02c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800a030:	ee76 6a26 	vadd.f32	s13, s12, s13
 800a034:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a038:	445d      	add	r5, fp
 800a03a:	45aa      	cmp	sl, r5
 800a03c:	ed04 0a01 	vstr	s0, [r4, #-4]
 800a040:	edc0 0a01 	vstr	s1, [r0, #4]
 800a044:	4464      	add	r4, ip
 800a046:	ed83 8a00 	vstr	s16, [r3]
 800a04a:	edc3 4a01 	vstr	s9, [r3, #4]
 800a04e:	4460      	add	r0, ip
 800a050:	ed81 4a00 	vstr	s8, [r1]
 800a054:	edc1 5a01 	vstr	s11, [r1, #4]
 800a058:	4463      	add	r3, ip
 800a05a:	edc2 6a00 	vstr	s13, [r2]
 800a05e:	edc2 7a01 	vstr	s15, [r2, #4]
 800a062:	4461      	add	r1, ip
 800a064:	4462      	add	r2, ip
 800a066:	d893      	bhi.n	8009f90 <arm_radix4_butterfly_f32+0x1e4>
 800a068:	9a01      	ldr	r2, [sp, #4]
 800a06a:	9b00      	ldr	r3, [sp, #0]
 800a06c:	4417      	add	r7, r2
 800a06e:	9a02      	ldr	r2, [sp, #8]
 800a070:	4496      	add	lr, r2
 800a072:	9a03      	ldr	r2, [sp, #12]
 800a074:	4490      	add	r8, r2
 800a076:	9a05      	ldr	r2, [sp, #20]
 800a078:	3301      	adds	r3, #1
 800a07a:	4293      	cmp	r3, r2
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	f106 0608 	add.w	r6, r6, #8
 800a082:	f109 0908 	add.w	r9, r9, #8
 800a086:	f67f af6f 	bls.w	8009f68 <arm_radix4_butterfly_f32+0x1bc>
 800a08a:	9b06      	ldr	r3, [sp, #24]
 800a08c:	9a07      	ldr	r2, [sp, #28]
 800a08e:	f8dd b020 	ldr.w	fp, [sp, #32]
 800a092:	0892      	lsrs	r2, r2, #2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	b29b      	uxth	r3, r3
 800a098:	2a04      	cmp	r2, #4
 800a09a:	9207      	str	r2, [sp, #28]
 800a09c:	9306      	str	r3, [sp, #24]
 800a09e:	d903      	bls.n	800a0a8 <arm_radix4_butterfly_f32+0x2fc>
 800a0a0:	ea4f 0ccb 	mov.w	ip, fp, lsl #3
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	e747      	b.n	8009f38 <arm_radix4_butterfly_f32+0x18c>
 800a0a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0aa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a0ac:	3320      	adds	r3, #32
 800a0ae:	ed53 4a04 	vldr	s9, [r3, #-16]
 800a0b2:	ed13 6a06 	vldr	s12, [r3, #-24]	@ 0xffffffe8
 800a0b6:	ed13 5a05 	vldr	s10, [r3, #-20]	@ 0xffffffec
 800a0ba:	ed53 5a01 	vldr	s11, [r3, #-4]
 800a0be:	ed53 6a07 	vldr	s13, [r3, #-28]	@ 0xffffffe4
 800a0c2:	ed13 4a08 	vldr	s8, [r3, #-32]	@ 0xffffffe0
 800a0c6:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a0ca:	ed13 7a03 	vldr	s14, [r3, #-12]
 800a0ce:	ee34 3a24 	vadd.f32	s6, s8, s9
 800a0d2:	ee76 3a27 	vadd.f32	s7, s12, s15
 800a0d6:	ee34 4a64 	vsub.f32	s8, s8, s9
 800a0da:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a0de:	ee75 4a65 	vsub.f32	s9, s10, s11
 800a0e2:	ee35 6a25 	vadd.f32	s12, s10, s11
 800a0e6:	ee76 5a87 	vadd.f32	s11, s13, s14
 800a0ea:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a0ee:	ee73 2a23 	vadd.f32	s5, s6, s7
 800a0f2:	ee35 5a86 	vadd.f32	s10, s11, s12
 800a0f6:	ee73 3a63 	vsub.f32	s7, s6, s7
 800a0fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a0fe:	ee34 3a24 	vadd.f32	s6, s8, s9
 800a102:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800a106:	ee74 4a64 	vsub.f32	s9, s8, s9
 800a10a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a10e:	3a01      	subs	r2, #1
 800a110:	ed43 2a08 	vstr	s5, [r3, #-32]	@ 0xffffffe0
 800a114:	ed43 3a06 	vstr	s7, [r3, #-24]	@ 0xffffffe8
 800a118:	ed03 3a04 	vstr	s6, [r3, #-16]
 800a11c:	ed43 4a02 	vstr	s9, [r3, #-8]
 800a120:	ed03 5a07 	vstr	s10, [r3, #-28]	@ 0xffffffe4
 800a124:	ed03 6a05 	vstr	s12, [r3, #-20]	@ 0xffffffec
 800a128:	ed43 6a03 	vstr	s13, [r3, #-12]
 800a12c:	ed43 7a01 	vstr	s15, [r3, #-4]
 800a130:	f103 0320 	add.w	r3, r3, #32
 800a134:	d1bb      	bne.n	800a0ae <arm_radix4_butterfly_f32+0x302>
 800a136:	b00d      	add	sp, #52	@ 0x34
 800a138:	ecbd 8b06 	vpop	{d8-d10}
 800a13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a140 <arm_radix4_butterfly_inverse_f32>:
 800a140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a144:	ed2d 8b08 	vpush	{d8-d11}
 800a148:	b08d      	sub	sp, #52	@ 0x34
 800a14a:	461f      	mov	r7, r3
 800a14c:	9700      	str	r7, [sp, #0]
 800a14e:	468a      	mov	sl, r1
 800a150:	9c00      	ldr	r4, [sp, #0]
 800a152:	9009      	str	r0, [sp, #36]	@ 0x24
 800a154:	0889      	lsrs	r1, r1, #2
 800a156:	460d      	mov	r5, r1
 800a158:	9103      	str	r1, [sp, #12]
 800a15a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a15e:	46ab      	mov	fp, r5
 800a160:	ea4f 0cc5 	mov.w	ip, r5, lsl #3
 800a164:	eba1 08c5 	sub.w	r8, r1, r5, lsl #3
 800a168:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800a16c:	0125      	lsls	r5, r4, #4
 800a16e:	00e4      	lsls	r4, r4, #3
 800a170:	9402      	str	r4, [sp, #8]
 800a172:	9501      	str	r5, [sp, #4]
 800a174:	4606      	mov	r6, r0
 800a176:	4691      	mov	r9, r2
 800a178:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 800a17c:	f10c 0004 	add.w	r0, ip, #4
 800a180:	f8cd b010 	str.w	fp, [sp, #16]
 800a184:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a188:	f8cd a008 	str.w	sl, [sp, #8]
 800a18c:	f8dd a004 	ldr.w	sl, [sp, #4]
 800a190:	920a      	str	r2, [sp, #40]	@ 0x28
 800a192:	4430      	add	r0, r6
 800a194:	4632      	mov	r2, r6
 800a196:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800a19a:	4647      	mov	r7, r8
 800a19c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800a1a0:	3604      	adds	r6, #4
 800a1a2:	464d      	mov	r5, r9
 800a1a4:	464c      	mov	r4, r9
 800a1a6:	edd2 4a01 	vldr	s9, [r2, #4]
 800a1aa:	ed10 4a01 	vldr	s8, [r0, #-4]
 800a1ae:	ed16 6a01 	vldr	s12, [r6, #-4]
 800a1b2:	edd1 6a00 	vldr	s13, [r1]
 800a1b6:	ed97 7a01 	vldr	s14, [r7, #4]
 800a1ba:	edd3 7a01 	vldr	s15, [r3, #4]
 800a1be:	edd3 5a00 	vldr	s11, [r3]
 800a1c2:	ed91 5a01 	vldr	s10, [r1, #4]
 800a1c6:	edd9 3a01 	vldr	s7, [r9, #4]
 800a1ca:	ed99 3a00 	vldr	s6, [r9]
 800a1ce:	ee36 2a26 	vadd.f32	s4, s12, s13
 800a1d2:	ee74 2a25 	vadd.f32	s5, s8, s11
 800a1d6:	ee34 1a85 	vadd.f32	s2, s9, s10
 800a1da:	ee77 1a27 	vadd.f32	s3, s14, s15
 800a1de:	ee32 8a22 	vadd.f32	s16, s4, s5
 800a1e2:	ee71 0a21 	vadd.f32	s1, s2, s3
 800a1e6:	ee36 6a66 	vsub.f32	s12, s12, s13
 800a1ea:	ee74 5a65 	vsub.f32	s11, s8, s11
 800a1ee:	ee34 5ac5 	vsub.f32	s10, s9, s10
 800a1f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a1f6:	ed06 8a01 	vstr	s16, [r6, #-4]
 800a1fa:	edc2 0a01 	vstr	s1, [r2, #4]
 800a1fe:	ed94 4a00 	vldr	s8, [r4]
 800a202:	edd5 6a00 	vldr	s13, [r5]
 800a206:	edd5 7a01 	vldr	s15, [r5, #4]
 800a20a:	ee72 4a62 	vsub.f32	s9, s4, s5
 800a20e:	ee71 1a61 	vsub.f32	s3, s2, s3
 800a212:	ee75 2a85 	vadd.f32	s5, s11, s10
 800a216:	ed94 1a01 	vldr	s2, [r4, #4]
 800a21a:	ee36 2a47 	vsub.f32	s4, s12, s14
 800a21e:	ee36 7a07 	vadd.f32	s14, s12, s14
 800a222:	ee35 6a65 	vsub.f32	s12, s10, s11
 800a226:	ee62 0a04 	vmul.f32	s1, s4, s8
 800a22a:	ee23 5aa4 	vmul.f32	s10, s7, s9
 800a22e:	ee22 4a84 	vmul.f32	s8, s5, s8
 800a232:	ee22 2a01 	vmul.f32	s4, s4, s2
 800a236:	ee67 5a26 	vmul.f32	s11, s14, s13
 800a23a:	ee22 1a81 	vmul.f32	s2, s5, s2
 800a23e:	ee66 6a26 	vmul.f32	s13, s12, s13
 800a242:	ee63 2a24 	vmul.f32	s5, s6, s9
 800a246:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a24a:	ee23 3a21 	vmul.f32	s6, s6, s3
 800a24e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a252:	ee63 1aa1 	vmul.f32	s3, s7, s3
 800a256:	ee72 4a04 	vadd.f32	s9, s4, s8
 800a25a:	ee70 3ac1 	vsub.f32	s7, s1, s2
 800a25e:	ee32 4ae1 	vsub.f32	s8, s5, s3
 800a262:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a266:	ee35 7ac6 	vsub.f32	s14, s11, s12
 800a26a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a26e:	3208      	adds	r2, #8
 800a270:	4542      	cmp	r2, r8
 800a272:	ed00 4a01 	vstr	s8, [r0, #-4]
 800a276:	f106 0608 	add.w	r6, r6, #8
 800a27a:	ed87 5a01 	vstr	s10, [r7, #4]
 800a27e:	44d1      	add	r9, sl
 800a280:	edc1 3a00 	vstr	s7, [r1]
 800a284:	edc1 4a01 	vstr	s9, [r1, #4]
 800a288:	445c      	add	r4, fp
 800a28a:	ed83 7a00 	vstr	s14, [r3]
 800a28e:	edc3 7a01 	vstr	s15, [r3, #4]
 800a292:	4475      	add	r5, lr
 800a294:	f100 0008 	add.w	r0, r0, #8
 800a298:	f107 0708 	add.w	r7, r7, #8
 800a29c:	f101 0108 	add.w	r1, r1, #8
 800a2a0:	f103 0308 	add.w	r3, r3, #8
 800a2a4:	f47f af7f 	bne.w	800a1a6 <arm_radix4_butterfly_inverse_f32+0x66>
 800a2a8:	9b00      	ldr	r3, [sp, #0]
 800a2aa:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800a2ae:	f8dd b010 	ldr.w	fp, [sp, #16]
 800a2b2:	f8dd a008 	ldr.w	sl, [sp, #8]
 800a2b6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	2a04      	cmp	r2, #4
 800a2be:	9306      	str	r3, [sp, #24]
 800a2c0:	f240 80ba 	bls.w	800a438 <arm_radix4_butterfly_inverse_f32+0x2f8>
 800a2c4:	9806      	ldr	r0, [sp, #24]
 800a2c6:	9207      	str	r2, [sp, #28]
 800a2c8:	ea4f 039b 	mov.w	r3, fp, lsr #2
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	9308      	str	r3, [sp, #32]
 800a2d0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800a2d4:	1e4a      	subs	r2, r1, #1
 800a2d6:	00db      	lsls	r3, r3, #3
 800a2d8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800a2da:	9205      	str	r2, [sp, #20]
 800a2dc:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800a2de:	9303      	str	r3, [sp, #12]
 800a2e0:	010a      	lsls	r2, r1, #4
 800a2e2:	0103      	lsls	r3, r0, #4
 800a2e4:	9204      	str	r2, [sp, #16]
 800a2e6:	9302      	str	r3, [sp, #8]
 800a2e8:	00c2      	lsls	r2, r0, #3
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
 800a2f0:	9201      	str	r2, [sp, #4]
 800a2f2:	46b8      	mov	r8, r7
 800a2f4:	46be      	mov	lr, r7
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	9b04      	ldr	r3, [sp, #16]
 800a2fa:	ed97 1a00 	vldr	s2, [r7]
 800a2fe:	edd7 1a01 	vldr	s3, [r7, #4]
 800a302:	ed9e 2a00 	vldr	s4, [lr]
 800a306:	edde 2a01 	vldr	s5, [lr, #4]
 800a30a:	ed98 3a00 	vldr	s6, [r8]
 800a30e:	edd8 3a01 	vldr	s7, [r8, #4]
 800a312:	9d00      	ldr	r5, [sp, #0]
 800a314:	18f1      	adds	r1, r6, r3
 800a316:	eb09 0203 	add.w	r2, r9, r3
 800a31a:	1d34      	adds	r4, r6, #4
 800a31c:	464b      	mov	r3, r9
 800a31e:	4630      	mov	r0, r6
 800a320:	ed90 4a01 	vldr	s8, [r0, #4]
 800a324:	ed14 6a01 	vldr	s12, [r4, #-4]
 800a328:	ed91 7a00 	vldr	s14, [r1]
 800a32c:	edd2 7a00 	vldr	s15, [r2]
 800a330:	ed93 5a01 	vldr	s10, [r3, #4]
 800a334:	edd1 4a01 	vldr	s9, [r1, #4]
 800a338:	edd2 5a01 	vldr	s11, [r2, #4]
 800a33c:	edd3 6a00 	vldr	s13, [r3]
 800a340:	ee76 0a07 	vadd.f32	s1, s12, s14
 800a344:	ee36 8aa7 	vadd.f32	s16, s13, s15
 800a348:	ee36 6a47 	vsub.f32	s12, s12, s14
 800a34c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a350:	ee74 8a24 	vadd.f32	s17, s8, s9
 800a354:	ee74 7a64 	vsub.f32	s15, s8, s9
 800a358:	ee35 7a65 	vsub.f32	s14, s10, s11
 800a35c:	ee35 4a25 	vadd.f32	s8, s10, s11
 800a360:	ee70 4ac8 	vsub.f32	s9, s1, s16
 800a364:	ee76 5a47 	vsub.f32	s11, s12, s14
 800a368:	ee38 5ac4 	vsub.f32	s10, s17, s8
 800a36c:	ee36 7a07 	vadd.f32	s14, s12, s14
 800a370:	ee36 6aa7 	vadd.f32	s12, s13, s15
 800a374:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a378:	ee22 ba24 	vmul.f32	s22, s4, s9
 800a37c:	ee62 aa85 	vmul.f32	s21, s5, s10
 800a380:	ee62 4aa4 	vmul.f32	s9, s5, s9
 800a384:	ee21 aa25 	vmul.f32	s20, s2, s11
 800a388:	ee61 9a86 	vmul.f32	s19, s3, s12
 800a38c:	ee23 9a07 	vmul.f32	s18, s6, s14
 800a390:	ee63 6aa7 	vmul.f32	s13, s7, s15
 800a394:	ee22 5a05 	vmul.f32	s10, s4, s10
 800a398:	ee61 5aa5 	vmul.f32	s11, s3, s11
 800a39c:	ee21 6a06 	vmul.f32	s12, s2, s12
 800a3a0:	ee23 7a87 	vmul.f32	s14, s7, s14
 800a3a4:	ee63 7a27 	vmul.f32	s15, s6, s15
 800a3a8:	ee70 0a88 	vadd.f32	s1, s1, s16
 800a3ac:	ee34 5a85 	vadd.f32	s10, s9, s10
 800a3b0:	ee38 4a84 	vadd.f32	s8, s17, s8
 800a3b4:	ee3b 8a6a 	vsub.f32	s16, s22, s21
 800a3b8:	ee7a 4a69 	vsub.f32	s9, s20, s19
 800a3bc:	ee35 6a86 	vadd.f32	s12, s11, s12
 800a3c0:	ee79 6a66 	vsub.f32	s13, s18, s13
 800a3c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3c8:	445d      	add	r5, fp
 800a3ca:	45aa      	cmp	sl, r5
 800a3cc:	ed44 0a01 	vstr	s1, [r4, #-4]
 800a3d0:	ed80 4a01 	vstr	s8, [r0, #4]
 800a3d4:	4464      	add	r4, ip
 800a3d6:	ed83 8a00 	vstr	s16, [r3]
 800a3da:	ed83 5a01 	vstr	s10, [r3, #4]
 800a3de:	4460      	add	r0, ip
 800a3e0:	edc1 4a00 	vstr	s9, [r1]
 800a3e4:	ed81 6a01 	vstr	s12, [r1, #4]
 800a3e8:	4463      	add	r3, ip
 800a3ea:	edc2 6a00 	vstr	s13, [r2]
 800a3ee:	edc2 7a01 	vstr	s15, [r2, #4]
 800a3f2:	4461      	add	r1, ip
 800a3f4:	4462      	add	r2, ip
 800a3f6:	d893      	bhi.n	800a320 <arm_radix4_butterfly_inverse_f32+0x1e0>
 800a3f8:	9a01      	ldr	r2, [sp, #4]
 800a3fa:	9b00      	ldr	r3, [sp, #0]
 800a3fc:	4417      	add	r7, r2
 800a3fe:	9a02      	ldr	r2, [sp, #8]
 800a400:	4496      	add	lr, r2
 800a402:	9a03      	ldr	r2, [sp, #12]
 800a404:	4490      	add	r8, r2
 800a406:	9a05      	ldr	r2, [sp, #20]
 800a408:	3301      	adds	r3, #1
 800a40a:	4293      	cmp	r3, r2
 800a40c:	9300      	str	r3, [sp, #0]
 800a40e:	f106 0608 	add.w	r6, r6, #8
 800a412:	f109 0908 	add.w	r9, r9, #8
 800a416:	f67f af6f 	bls.w	800a2f8 <arm_radix4_butterfly_inverse_f32+0x1b8>
 800a41a:	9b06      	ldr	r3, [sp, #24]
 800a41c:	9a07      	ldr	r2, [sp, #28]
 800a41e:	f8dd b020 	ldr.w	fp, [sp, #32]
 800a422:	0892      	lsrs	r2, r2, #2
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	b29b      	uxth	r3, r3
 800a428:	2a04      	cmp	r2, #4
 800a42a:	9207      	str	r2, [sp, #28]
 800a42c:	9306      	str	r3, [sp, #24]
 800a42e:	d903      	bls.n	800a438 <arm_radix4_butterfly_inverse_f32+0x2f8>
 800a430:	ea4f 0ccb 	mov.w	ip, fp, lsl #3
 800a434:	4618      	mov	r0, r3
 800a436:	e747      	b.n	800a2c8 <arm_radix4_butterfly_inverse_f32+0x188>
 800a438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a43a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a43c:	3320      	adds	r3, #32
 800a43e:	ed53 4a04 	vldr	s9, [r3, #-16]
 800a442:	ed13 6a06 	vldr	s12, [r3, #-24]	@ 0xffffffe8
 800a446:	ed13 5a05 	vldr	s10, [r3, #-20]	@ 0xffffffec
 800a44a:	ed53 5a01 	vldr	s11, [r3, #-4]
 800a44e:	ed53 6a07 	vldr	s13, [r3, #-28]	@ 0xffffffe4
 800a452:	ed13 4a08 	vldr	s8, [r3, #-32]	@ 0xffffffe0
 800a456:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a45a:	ed13 7a03 	vldr	s14, [r3, #-12]
 800a45e:	ee34 3a24 	vadd.f32	s6, s8, s9
 800a462:	ee76 3a27 	vadd.f32	s7, s12, s15
 800a466:	ee34 4a64 	vsub.f32	s8, s8, s9
 800a46a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a46e:	ee75 4a65 	vsub.f32	s9, s10, s11
 800a472:	ee35 6a25 	vadd.f32	s12, s10, s11
 800a476:	ee76 5a87 	vadd.f32	s11, s13, s14
 800a47a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a47e:	ee73 2a23 	vadd.f32	s5, s6, s7
 800a482:	ee74 6a24 	vadd.f32	s13, s8, s9
 800a486:	ee37 5a27 	vadd.f32	s10, s14, s15
 800a48a:	ee73 3a63 	vsub.f32	s7, s6, s7
 800a48e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a492:	ee34 3a64 	vsub.f32	s6, s8, s9
 800a496:	ee75 4a86 	vadd.f32	s9, s11, s12
 800a49a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800a49e:	ee62 2a80 	vmul.f32	s5, s5, s0
 800a4a2:	ee26 7a00 	vmul.f32	s14, s12, s0
 800a4a6:	ee63 5a80 	vmul.f32	s11, s7, s0
 800a4aa:	ee23 4a00 	vmul.f32	s8, s6, s0
 800a4ae:	ee66 6a80 	vmul.f32	s13, s13, s0
 800a4b2:	ee64 4a80 	vmul.f32	s9, s9, s0
 800a4b6:	ee25 6a00 	vmul.f32	s12, s10, s0
 800a4ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a4be:	3a01      	subs	r2, #1
 800a4c0:	ed43 2a08 	vstr	s5, [r3, #-32]	@ 0xffffffe0
 800a4c4:	ed43 5a06 	vstr	s11, [r3, #-24]	@ 0xffffffe8
 800a4c8:	ed03 4a04 	vstr	s8, [r3, #-16]
 800a4cc:	ed43 6a02 	vstr	s13, [r3, #-8]
 800a4d0:	ed43 4a07 	vstr	s9, [r3, #-28]	@ 0xffffffe4
 800a4d4:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 800a4d8:	ed03 6a03 	vstr	s12, [r3, #-12]
 800a4dc:	ed43 7a01 	vstr	s15, [r3, #-4]
 800a4e0:	f103 0320 	add.w	r3, r3, #32
 800a4e4:	d1ab      	bne.n	800a43e <arm_radix4_butterfly_inverse_f32+0x2fe>
 800a4e6:	b00d      	add	sp, #52	@ 0x34
 800a4e8:	ecbd 8b08 	vpop	{d8-d11}
 800a4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a4f0 <arm_cfft_radix4_f32>:
 800a4f0:	b570      	push	{r4, r5, r6, lr}
 800a4f2:	7883      	ldrb	r3, [r0, #2]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	460d      	mov	r5, r1
 800a4fa:	d009      	beq.n	800a510 <arm_cfft_radix4_f32+0x20>
 800a4fc:	8983      	ldrh	r3, [r0, #12]
 800a4fe:	6842      	ldr	r2, [r0, #4]
 800a500:	8801      	ldrh	r1, [r0, #0]
 800a502:	4628      	mov	r0, r5
 800a504:	f7ff fc52 	bl	8009dac <arm_radix4_butterfly_f32>
 800a508:	78e3      	ldrb	r3, [r4, #3]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d00b      	beq.n	800a526 <arm_cfft_radix4_f32+0x36>
 800a50e:	bd70      	pop	{r4, r5, r6, pc}
 800a510:	8983      	ldrh	r3, [r0, #12]
 800a512:	ed90 0a04 	vldr	s0, [r0, #16]
 800a516:	6842      	ldr	r2, [r0, #4]
 800a518:	8801      	ldrh	r1, [r0, #0]
 800a51a:	4628      	mov	r0, r5
 800a51c:	f7ff fe10 	bl	800a140 <arm_radix4_butterfly_inverse_f32>
 800a520:	78e3      	ldrb	r3, [r4, #3]
 800a522:	2b01      	cmp	r3, #1
 800a524:	d1f3      	bne.n	800a50e <arm_cfft_radix4_f32+0x1e>
 800a526:	4628      	mov	r0, r5
 800a528:	68a3      	ldr	r3, [r4, #8]
 800a52a:	89e2      	ldrh	r2, [r4, #14]
 800a52c:	8821      	ldrh	r1, [r4, #0]
 800a52e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a532:	f000 b929 	b.w	800a788 <arm_bitreversal_f32>
 800a536:	bf00      	nop

0800a538 <arm_cmplx_mag_f32>:
 800a538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a53c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800a540:	b084      	sub	sp, #16
 800a542:	d07f      	beq.n	800a644 <arm_cmplx_mag_f32+0x10c>
 800a544:	2700      	movs	r7, #0
 800a546:	f100 0420 	add.w	r4, r0, #32
 800a54a:	f101 0510 	add.w	r5, r1, #16
 800a54e:	4646      	mov	r6, r8
 800a550:	e05a      	b.n	800a608 <arm_cmplx_mag_f32+0xd0>
 800a552:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a556:	eeb4 0a40 	vcmp.f32	s0, s0
 800a55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a55e:	f040 80a4 	bne.w	800a6aa <arm_cmplx_mag_f32+0x172>
 800a562:	ed05 0a04 	vstr	s0, [r5, #-16]
 800a566:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800a56a:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 800a56e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a572:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a576:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a57a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a582:	f2c0 808f 	blt.w	800a6a4 <arm_cmplx_mag_f32+0x16c>
 800a586:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a58a:	eeb4 0a40 	vcmp.f32	s0, s0
 800a58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a592:	f040 80af 	bne.w	800a6f4 <arm_cmplx_mag_f32+0x1bc>
 800a596:	ed05 0a03 	vstr	s0, [r5, #-12]
 800a59a:	ed54 7a04 	vldr	s15, [r4, #-16]
 800a59e:	ed14 0a03 	vldr	s0, [r4, #-12]
 800a5a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a5a6:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a5aa:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a5ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b6:	db72      	blt.n	800a69e <arm_cmplx_mag_f32+0x166>
 800a5b8:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a5bc:	eeb4 0a40 	vcmp.f32	s0, s0
 800a5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5c4:	f040 808c 	bne.w	800a6e0 <arm_cmplx_mag_f32+0x1a8>
 800a5c8:	ed05 0a02 	vstr	s0, [r5, #-8]
 800a5cc:	ed54 7a02 	vldr	s15, [r4, #-8]
 800a5d0:	ed14 0a01 	vldr	s0, [r4, #-4]
 800a5d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a5d8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a5dc:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a5e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5e8:	db20      	blt.n	800a62c <arm_cmplx_mag_f32+0xf4>
 800a5ea:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a5ee:	eeb4 0a40 	vcmp.f32	s0, s0
 800a5f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5f6:	d169      	bne.n	800a6cc <arm_cmplx_mag_f32+0x194>
 800a5f8:	3e01      	subs	r6, #1
 800a5fa:	ed05 0a01 	vstr	s0, [r5, #-4]
 800a5fe:	f104 0420 	add.w	r4, r4, #32
 800a602:	f105 0510 	add.w	r5, r5, #16
 800a606:	d019      	beq.n	800a63c <arm_cmplx_mag_f32+0x104>
 800a608:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 800a60c:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 800a610:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a614:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a618:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a61c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a624:	da95      	bge.n	800a552 <arm_cmplx_mag_f32+0x1a>
 800a626:	f845 7c10 	str.w	r7, [r5, #-16]
 800a62a:	e79c      	b.n	800a566 <arm_cmplx_mag_f32+0x2e>
 800a62c:	3e01      	subs	r6, #1
 800a62e:	f845 7c04 	str.w	r7, [r5, #-4]
 800a632:	f104 0420 	add.w	r4, r4, #32
 800a636:	f105 0510 	add.w	r5, r5, #16
 800a63a:	d1e5      	bne.n	800a608 <arm_cmplx_mag_f32+0xd0>
 800a63c:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800a640:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800a644:	f012 0503 	ands.w	r5, r2, #3
 800a648:	d026      	beq.n	800a698 <arm_cmplx_mag_f32+0x160>
 800a64a:	2600      	movs	r6, #0
 800a64c:	f100 0408 	add.w	r4, r0, #8
 800a650:	e00c      	b.n	800a66c <arm_cmplx_mag_f32+0x134>
 800a652:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a656:	eeb4 0a40 	vcmp.f32	s0, s0
 800a65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a65e:	d12e      	bne.n	800a6be <arm_cmplx_mag_f32+0x186>
 800a660:	3d01      	subs	r5, #1
 800a662:	ed01 0a01 	vstr	s0, [r1, #-4]
 800a666:	f104 0408 	add.w	r4, r4, #8
 800a66a:	d015      	beq.n	800a698 <arm_cmplx_mag_f32+0x160>
 800a66c:	ed54 7a02 	vldr	s15, [r4, #-8]
 800a670:	ed14 0a01 	vldr	s0, [r4, #-4]
 800a674:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a678:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a67c:	3104      	adds	r1, #4
 800a67e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a682:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a68a:	dae2      	bge.n	800a652 <arm_cmplx_mag_f32+0x11a>
 800a68c:	3d01      	subs	r5, #1
 800a68e:	f841 6c04 	str.w	r6, [r1, #-4]
 800a692:	f104 0408 	add.w	r4, r4, #8
 800a696:	d1e9      	bne.n	800a66c <arm_cmplx_mag_f32+0x134>
 800a698:	b004      	add	sp, #16
 800a69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a69e:	f845 7c08 	str.w	r7, [r5, #-8]
 800a6a2:	e793      	b.n	800a5cc <arm_cmplx_mag_f32+0x94>
 800a6a4:	f845 7c0c 	str.w	r7, [r5, #-12]
 800a6a8:	e777      	b.n	800a59a <arm_cmplx_mag_f32+0x62>
 800a6aa:	eeb0 0a67 	vmov.f32	s0, s15
 800a6ae:	9203      	str	r2, [sp, #12]
 800a6b0:	9102      	str	r1, [sp, #8]
 800a6b2:	9001      	str	r0, [sp, #4]
 800a6b4:	f002 ff54 	bl	800d560 <sqrtf>
 800a6b8:	a801      	add	r0, sp, #4
 800a6ba:	c807      	ldmia	r0, {r0, r1, r2}
 800a6bc:	e751      	b.n	800a562 <arm_cmplx_mag_f32+0x2a>
 800a6be:	eeb0 0a67 	vmov.f32	s0, s15
 800a6c2:	9101      	str	r1, [sp, #4]
 800a6c4:	f002 ff4c 	bl	800d560 <sqrtf>
 800a6c8:	9901      	ldr	r1, [sp, #4]
 800a6ca:	e7c9      	b.n	800a660 <arm_cmplx_mag_f32+0x128>
 800a6cc:	eeb0 0a67 	vmov.f32	s0, s15
 800a6d0:	9203      	str	r2, [sp, #12]
 800a6d2:	9102      	str	r1, [sp, #8]
 800a6d4:	9001      	str	r0, [sp, #4]
 800a6d6:	f002 ff43 	bl	800d560 <sqrtf>
 800a6da:	a801      	add	r0, sp, #4
 800a6dc:	c807      	ldmia	r0, {r0, r1, r2}
 800a6de:	e78b      	b.n	800a5f8 <arm_cmplx_mag_f32+0xc0>
 800a6e0:	eeb0 0a67 	vmov.f32	s0, s15
 800a6e4:	9203      	str	r2, [sp, #12]
 800a6e6:	9102      	str	r1, [sp, #8]
 800a6e8:	9001      	str	r0, [sp, #4]
 800a6ea:	f002 ff39 	bl	800d560 <sqrtf>
 800a6ee:	a801      	add	r0, sp, #4
 800a6f0:	c807      	ldmia	r0, {r0, r1, r2}
 800a6f2:	e769      	b.n	800a5c8 <arm_cmplx_mag_f32+0x90>
 800a6f4:	eeb0 0a67 	vmov.f32	s0, s15
 800a6f8:	9203      	str	r2, [sp, #12]
 800a6fa:	9102      	str	r1, [sp, #8]
 800a6fc:	9001      	str	r0, [sp, #4]
 800a6fe:	f002 ff2f 	bl	800d560 <sqrtf>
 800a702:	a801      	add	r0, sp, #4
 800a704:	c807      	ldmia	r0, {r0, r1, r2}
 800a706:	e746      	b.n	800a596 <arm_cmplx_mag_f32+0x5e>

0800a708 <arm_cos_f32>:
 800a708:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800a77c <arm_cos_f32+0x74>
 800a70c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a710:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800a714:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a718:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a720:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a724:	d504      	bpl.n	800a730 <arm_cos_f32+0x28>
 800a726:	ee17 3a90 	vmov	r3, s15
 800a72a:	3b01      	subs	r3, #1
 800a72c:	ee07 3a90 	vmov	s15, r3
 800a730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a734:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800a780 <arm_cos_f32+0x78>
 800a738:	4a12      	ldr	r2, [pc, #72]	@ (800a784 <arm_cos_f32+0x7c>)
 800a73a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a73e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a742:	ee20 0a26 	vmul.f32	s0, s0, s13
 800a746:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800a74a:	ee17 3a90 	vmov	r3, s15
 800a74e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a752:	ee07 3a90 	vmov	s15, r3
 800a756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a75a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800a75e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a762:	edd1 6a01 	vldr	s13, [r1, #4]
 800a766:	ed91 0a00 	vldr	s0, [r1]
 800a76a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a76e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a772:	ee27 0a00 	vmul.f32	s0, s14, s0
 800a776:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a77a:	4770      	bx	lr
 800a77c:	3e22f983 	.word	0x3e22f983
 800a780:	44000000 	.word	0x44000000
 800a784:	08010a4c 	.word	0x08010a4c

0800a788 <arm_bitreversal_f32>:
 800a788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78c:	b085      	sub	sp, #20
 800a78e:	0849      	lsrs	r1, r1, #1
 800a790:	0052      	lsls	r2, r2, #1
 800a792:	2400      	movs	r4, #0
 800a794:	9203      	str	r2, [sp, #12]
 800a796:	1e8a      	subs	r2, r1, #2
 800a798:	9101      	str	r1, [sp, #4]
 800a79a:	f101 0c01 	add.w	ip, r1, #1
 800a79e:	9202      	str	r2, [sp, #8]
 800a7a0:	4621      	mov	r1, r4
 800a7a2:	4622      	mov	r2, r4
 800a7a4:	9d01      	ldr	r5, [sp, #4]
 800a7a6:	3101      	adds	r1, #1
 800a7a8:	442a      	add	r2, r5
 800a7aa:	00c9      	lsls	r1, r1, #3
 800a7ac:	00d2      	lsls	r2, r2, #3
 800a7ae:	1846      	adds	r6, r0, r1
 800a7b0:	1885      	adds	r5, r0, r2
 800a7b2:	3104      	adds	r1, #4
 800a7b4:	3204      	adds	r2, #4
 800a7b6:	6837      	ldr	r7, [r6, #0]
 800a7b8:	f8d5 e000 	ldr.w	lr, [r5]
 800a7bc:	f8c6 e000 	str.w	lr, [r6]
 800a7c0:	4401      	add	r1, r0
 800a7c2:	4402      	add	r2, r0
 800a7c4:	602f      	str	r7, [r5, #0]
 800a7c6:	3402      	adds	r4, #2
 800a7c8:	680e      	ldr	r6, [r1, #0]
 800a7ca:	f8d2 9000 	ldr.w	r9, [r2]
 800a7ce:	f8c1 9000 	str.w	r9, [r1]
 800a7d2:	b2a4      	uxth	r4, r4
 800a7d4:	6016      	str	r6, [r2, #0]
 800a7d6:	eb04 050c 	add.w	r5, r4, ip
 800a7da:	881a      	ldrh	r2, [r3, #0]
 800a7dc:	00ed      	lsls	r5, r5, #3
 800a7de:	eb00 0e05 	add.w	lr, r0, r5
 800a7e2:	3504      	adds	r5, #4
 800a7e4:	9500      	str	r5, [sp, #0]
 800a7e6:	eb02 010c 	add.w	r1, r2, ip
 800a7ea:	9d02      	ldr	r5, [sp, #8]
 800a7ec:	00c9      	lsls	r1, r1, #3
 800a7ee:	00e7      	lsls	r7, r4, #3
 800a7f0:	00d6      	lsls	r6, r2, #3
 800a7f2:	f101 0b04 	add.w	fp, r1, #4
 800a7f6:	eb00 0901 	add.w	r9, r0, r1
 800a7fa:	42ac      	cmp	r4, r5
 800a7fc:	9903      	ldr	r1, [sp, #12]
 800a7fe:	9d00      	ldr	r5, [sp, #0]
 800a800:	eb00 0807 	add.w	r8, r0, r7
 800a804:	eb00 0a06 	add.w	sl, r0, r6
 800a808:	f107 0704 	add.w	r7, r7, #4
 800a80c:	f106 0604 	add.w	r6, r6, #4
 800a810:	440b      	add	r3, r1
 800a812:	4407      	add	r7, r0
 800a814:	4406      	add	r6, r0
 800a816:	4621      	mov	r1, r4
 800a818:	4405      	add	r5, r0
 800a81a:	4483      	add	fp, r0
 800a81c:	d820      	bhi.n	800a860 <arm_bitreversal_f32+0xd8>
 800a81e:	42a2      	cmp	r2, r4
 800a820:	d9c0      	bls.n	800a7a4 <arm_bitreversal_f32+0x1c>
 800a822:	edd8 7a00 	vldr	s15, [r8]
 800a826:	ed9a 7a00 	vldr	s14, [sl]
 800a82a:	ed88 7a00 	vstr	s14, [r8]
 800a82e:	edca 7a00 	vstr	s15, [sl]
 800a832:	f8d7 8000 	ldr.w	r8, [r7]
 800a836:	f8d6 a000 	ldr.w	sl, [r6]
 800a83a:	f8c7 a000 	str.w	sl, [r7]
 800a83e:	f8c6 8000 	str.w	r8, [r6]
 800a842:	f8de 6000 	ldr.w	r6, [lr]
 800a846:	f8d9 7000 	ldr.w	r7, [r9]
 800a84a:	f8ce 7000 	str.w	r7, [lr]
 800a84e:	f8c9 6000 	str.w	r6, [r9]
 800a852:	682e      	ldr	r6, [r5, #0]
 800a854:	f8db 7000 	ldr.w	r7, [fp]
 800a858:	602f      	str	r7, [r5, #0]
 800a85a:	f8cb 6000 	str.w	r6, [fp]
 800a85e:	e7a1      	b.n	800a7a4 <arm_bitreversal_f32+0x1c>
 800a860:	b005      	add	sp, #20
 800a862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a866:	bf00      	nop

0800a868 <__cvt>:
 800a868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a86c:	ec57 6b10 	vmov	r6, r7, d0
 800a870:	2f00      	cmp	r7, #0
 800a872:	460c      	mov	r4, r1
 800a874:	4619      	mov	r1, r3
 800a876:	463b      	mov	r3, r7
 800a878:	bfbb      	ittet	lt
 800a87a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a87e:	461f      	movlt	r7, r3
 800a880:	2300      	movge	r3, #0
 800a882:	232d      	movlt	r3, #45	@ 0x2d
 800a884:	700b      	strb	r3, [r1, #0]
 800a886:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a888:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a88c:	4691      	mov	r9, r2
 800a88e:	f023 0820 	bic.w	r8, r3, #32
 800a892:	bfbc      	itt	lt
 800a894:	4632      	movlt	r2, r6
 800a896:	4616      	movlt	r6, r2
 800a898:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a89c:	d005      	beq.n	800a8aa <__cvt+0x42>
 800a89e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a8a2:	d100      	bne.n	800a8a6 <__cvt+0x3e>
 800a8a4:	3401      	adds	r4, #1
 800a8a6:	2102      	movs	r1, #2
 800a8a8:	e000      	b.n	800a8ac <__cvt+0x44>
 800a8aa:	2103      	movs	r1, #3
 800a8ac:	ab03      	add	r3, sp, #12
 800a8ae:	9301      	str	r3, [sp, #4]
 800a8b0:	ab02      	add	r3, sp, #8
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	ec47 6b10 	vmov	d0, r6, r7
 800a8b8:	4653      	mov	r3, sl
 800a8ba:	4622      	mov	r2, r4
 800a8bc:	f000 fe8c 	bl	800b5d8 <_dtoa_r>
 800a8c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a8c4:	4605      	mov	r5, r0
 800a8c6:	d119      	bne.n	800a8fc <__cvt+0x94>
 800a8c8:	f019 0f01 	tst.w	r9, #1
 800a8cc:	d00e      	beq.n	800a8ec <__cvt+0x84>
 800a8ce:	eb00 0904 	add.w	r9, r0, r4
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	4639      	mov	r1, r7
 800a8da:	f7f6 f905 	bl	8000ae8 <__aeabi_dcmpeq>
 800a8de:	b108      	cbz	r0, 800a8e4 <__cvt+0x7c>
 800a8e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a8e4:	2230      	movs	r2, #48	@ 0x30
 800a8e6:	9b03      	ldr	r3, [sp, #12]
 800a8e8:	454b      	cmp	r3, r9
 800a8ea:	d31e      	bcc.n	800a92a <__cvt+0xc2>
 800a8ec:	9b03      	ldr	r3, [sp, #12]
 800a8ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8f0:	1b5b      	subs	r3, r3, r5
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	6013      	str	r3, [r2, #0]
 800a8f6:	b004      	add	sp, #16
 800a8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a900:	eb00 0904 	add.w	r9, r0, r4
 800a904:	d1e5      	bne.n	800a8d2 <__cvt+0x6a>
 800a906:	7803      	ldrb	r3, [r0, #0]
 800a908:	2b30      	cmp	r3, #48	@ 0x30
 800a90a:	d10a      	bne.n	800a922 <__cvt+0xba>
 800a90c:	2200      	movs	r2, #0
 800a90e:	2300      	movs	r3, #0
 800a910:	4630      	mov	r0, r6
 800a912:	4639      	mov	r1, r7
 800a914:	f7f6 f8e8 	bl	8000ae8 <__aeabi_dcmpeq>
 800a918:	b918      	cbnz	r0, 800a922 <__cvt+0xba>
 800a91a:	f1c4 0401 	rsb	r4, r4, #1
 800a91e:	f8ca 4000 	str.w	r4, [sl]
 800a922:	f8da 3000 	ldr.w	r3, [sl]
 800a926:	4499      	add	r9, r3
 800a928:	e7d3      	b.n	800a8d2 <__cvt+0x6a>
 800a92a:	1c59      	adds	r1, r3, #1
 800a92c:	9103      	str	r1, [sp, #12]
 800a92e:	701a      	strb	r2, [r3, #0]
 800a930:	e7d9      	b.n	800a8e6 <__cvt+0x7e>

0800a932 <__exponent>:
 800a932:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a934:	2900      	cmp	r1, #0
 800a936:	bfba      	itte	lt
 800a938:	4249      	neglt	r1, r1
 800a93a:	232d      	movlt	r3, #45	@ 0x2d
 800a93c:	232b      	movge	r3, #43	@ 0x2b
 800a93e:	2909      	cmp	r1, #9
 800a940:	7002      	strb	r2, [r0, #0]
 800a942:	7043      	strb	r3, [r0, #1]
 800a944:	dd29      	ble.n	800a99a <__exponent+0x68>
 800a946:	f10d 0307 	add.w	r3, sp, #7
 800a94a:	461d      	mov	r5, r3
 800a94c:	270a      	movs	r7, #10
 800a94e:	461a      	mov	r2, r3
 800a950:	fbb1 f6f7 	udiv	r6, r1, r7
 800a954:	fb07 1416 	mls	r4, r7, r6, r1
 800a958:	3430      	adds	r4, #48	@ 0x30
 800a95a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a95e:	460c      	mov	r4, r1
 800a960:	2c63      	cmp	r4, #99	@ 0x63
 800a962:	f103 33ff 	add.w	r3, r3, #4294967295
 800a966:	4631      	mov	r1, r6
 800a968:	dcf1      	bgt.n	800a94e <__exponent+0x1c>
 800a96a:	3130      	adds	r1, #48	@ 0x30
 800a96c:	1e94      	subs	r4, r2, #2
 800a96e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a972:	1c41      	adds	r1, r0, #1
 800a974:	4623      	mov	r3, r4
 800a976:	42ab      	cmp	r3, r5
 800a978:	d30a      	bcc.n	800a990 <__exponent+0x5e>
 800a97a:	f10d 0309 	add.w	r3, sp, #9
 800a97e:	1a9b      	subs	r3, r3, r2
 800a980:	42ac      	cmp	r4, r5
 800a982:	bf88      	it	hi
 800a984:	2300      	movhi	r3, #0
 800a986:	3302      	adds	r3, #2
 800a988:	4403      	add	r3, r0
 800a98a:	1a18      	subs	r0, r3, r0
 800a98c:	b003      	add	sp, #12
 800a98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a990:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a994:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a998:	e7ed      	b.n	800a976 <__exponent+0x44>
 800a99a:	2330      	movs	r3, #48	@ 0x30
 800a99c:	3130      	adds	r1, #48	@ 0x30
 800a99e:	7083      	strb	r3, [r0, #2]
 800a9a0:	70c1      	strb	r1, [r0, #3]
 800a9a2:	1d03      	adds	r3, r0, #4
 800a9a4:	e7f1      	b.n	800a98a <__exponent+0x58>
	...

0800a9a8 <_printf_float>:
 800a9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ac:	b08d      	sub	sp, #52	@ 0x34
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a9b4:	4616      	mov	r6, r2
 800a9b6:	461f      	mov	r7, r3
 800a9b8:	4605      	mov	r5, r0
 800a9ba:	f000 fd11 	bl	800b3e0 <_localeconv_r>
 800a9be:	6803      	ldr	r3, [r0, #0]
 800a9c0:	9304      	str	r3, [sp, #16]
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7f5 fc64 	bl	8000290 <strlen>
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9cc:	f8d8 3000 	ldr.w	r3, [r8]
 800a9d0:	9005      	str	r0, [sp, #20]
 800a9d2:	3307      	adds	r3, #7
 800a9d4:	f023 0307 	bic.w	r3, r3, #7
 800a9d8:	f103 0208 	add.w	r2, r3, #8
 800a9dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a9e0:	f8d4 b000 	ldr.w	fp, [r4]
 800a9e4:	f8c8 2000 	str.w	r2, [r8]
 800a9e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a9f0:	9307      	str	r3, [sp, #28]
 800a9f2:	f8cd 8018 	str.w	r8, [sp, #24]
 800a9f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a9fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9fe:	4b9c      	ldr	r3, [pc, #624]	@ (800ac70 <_printf_float+0x2c8>)
 800aa00:	f04f 32ff 	mov.w	r2, #4294967295
 800aa04:	f7f6 f8a2 	bl	8000b4c <__aeabi_dcmpun>
 800aa08:	bb70      	cbnz	r0, 800aa68 <_printf_float+0xc0>
 800aa0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa0e:	4b98      	ldr	r3, [pc, #608]	@ (800ac70 <_printf_float+0x2c8>)
 800aa10:	f04f 32ff 	mov.w	r2, #4294967295
 800aa14:	f7f6 f87c 	bl	8000b10 <__aeabi_dcmple>
 800aa18:	bb30      	cbnz	r0, 800aa68 <_printf_float+0xc0>
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	4640      	mov	r0, r8
 800aa20:	4649      	mov	r1, r9
 800aa22:	f7f6 f86b 	bl	8000afc <__aeabi_dcmplt>
 800aa26:	b110      	cbz	r0, 800aa2e <_printf_float+0x86>
 800aa28:	232d      	movs	r3, #45	@ 0x2d
 800aa2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa2e:	4a91      	ldr	r2, [pc, #580]	@ (800ac74 <_printf_float+0x2cc>)
 800aa30:	4b91      	ldr	r3, [pc, #580]	@ (800ac78 <_printf_float+0x2d0>)
 800aa32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aa36:	bf8c      	ite	hi
 800aa38:	4690      	movhi	r8, r2
 800aa3a:	4698      	movls	r8, r3
 800aa3c:	2303      	movs	r3, #3
 800aa3e:	6123      	str	r3, [r4, #16]
 800aa40:	f02b 0304 	bic.w	r3, fp, #4
 800aa44:	6023      	str	r3, [r4, #0]
 800aa46:	f04f 0900 	mov.w	r9, #0
 800aa4a:	9700      	str	r7, [sp, #0]
 800aa4c:	4633      	mov	r3, r6
 800aa4e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aa50:	4621      	mov	r1, r4
 800aa52:	4628      	mov	r0, r5
 800aa54:	f000 f9d2 	bl	800adfc <_printf_common>
 800aa58:	3001      	adds	r0, #1
 800aa5a:	f040 808d 	bne.w	800ab78 <_printf_float+0x1d0>
 800aa5e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa62:	b00d      	add	sp, #52	@ 0x34
 800aa64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa68:	4642      	mov	r2, r8
 800aa6a:	464b      	mov	r3, r9
 800aa6c:	4640      	mov	r0, r8
 800aa6e:	4649      	mov	r1, r9
 800aa70:	f7f6 f86c 	bl	8000b4c <__aeabi_dcmpun>
 800aa74:	b140      	cbz	r0, 800aa88 <_printf_float+0xe0>
 800aa76:	464b      	mov	r3, r9
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	bfbc      	itt	lt
 800aa7c:	232d      	movlt	r3, #45	@ 0x2d
 800aa7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aa82:	4a7e      	ldr	r2, [pc, #504]	@ (800ac7c <_printf_float+0x2d4>)
 800aa84:	4b7e      	ldr	r3, [pc, #504]	@ (800ac80 <_printf_float+0x2d8>)
 800aa86:	e7d4      	b.n	800aa32 <_printf_float+0x8a>
 800aa88:	6863      	ldr	r3, [r4, #4]
 800aa8a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800aa8e:	9206      	str	r2, [sp, #24]
 800aa90:	1c5a      	adds	r2, r3, #1
 800aa92:	d13b      	bne.n	800ab0c <_printf_float+0x164>
 800aa94:	2306      	movs	r3, #6
 800aa96:	6063      	str	r3, [r4, #4]
 800aa98:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	6022      	str	r2, [r4, #0]
 800aaa0:	9303      	str	r3, [sp, #12]
 800aaa2:	ab0a      	add	r3, sp, #40	@ 0x28
 800aaa4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800aaa8:	ab09      	add	r3, sp, #36	@ 0x24
 800aaaa:	9300      	str	r3, [sp, #0]
 800aaac:	6861      	ldr	r1, [r4, #4]
 800aaae:	ec49 8b10 	vmov	d0, r8, r9
 800aab2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800aab6:	4628      	mov	r0, r5
 800aab8:	f7ff fed6 	bl	800a868 <__cvt>
 800aabc:	9b06      	ldr	r3, [sp, #24]
 800aabe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aac0:	2b47      	cmp	r3, #71	@ 0x47
 800aac2:	4680      	mov	r8, r0
 800aac4:	d129      	bne.n	800ab1a <_printf_float+0x172>
 800aac6:	1cc8      	adds	r0, r1, #3
 800aac8:	db02      	blt.n	800aad0 <_printf_float+0x128>
 800aaca:	6863      	ldr	r3, [r4, #4]
 800aacc:	4299      	cmp	r1, r3
 800aace:	dd41      	ble.n	800ab54 <_printf_float+0x1ac>
 800aad0:	f1aa 0a02 	sub.w	sl, sl, #2
 800aad4:	fa5f fa8a 	uxtb.w	sl, sl
 800aad8:	3901      	subs	r1, #1
 800aada:	4652      	mov	r2, sl
 800aadc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aae0:	9109      	str	r1, [sp, #36]	@ 0x24
 800aae2:	f7ff ff26 	bl	800a932 <__exponent>
 800aae6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aae8:	1813      	adds	r3, r2, r0
 800aaea:	2a01      	cmp	r2, #1
 800aaec:	4681      	mov	r9, r0
 800aaee:	6123      	str	r3, [r4, #16]
 800aaf0:	dc02      	bgt.n	800aaf8 <_printf_float+0x150>
 800aaf2:	6822      	ldr	r2, [r4, #0]
 800aaf4:	07d2      	lsls	r2, r2, #31
 800aaf6:	d501      	bpl.n	800aafc <_printf_float+0x154>
 800aaf8:	3301      	adds	r3, #1
 800aafa:	6123      	str	r3, [r4, #16]
 800aafc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d0a2      	beq.n	800aa4a <_printf_float+0xa2>
 800ab04:	232d      	movs	r3, #45	@ 0x2d
 800ab06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab0a:	e79e      	b.n	800aa4a <_printf_float+0xa2>
 800ab0c:	9a06      	ldr	r2, [sp, #24]
 800ab0e:	2a47      	cmp	r2, #71	@ 0x47
 800ab10:	d1c2      	bne.n	800aa98 <_printf_float+0xf0>
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1c0      	bne.n	800aa98 <_printf_float+0xf0>
 800ab16:	2301      	movs	r3, #1
 800ab18:	e7bd      	b.n	800aa96 <_printf_float+0xee>
 800ab1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ab1e:	d9db      	bls.n	800aad8 <_printf_float+0x130>
 800ab20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ab24:	d118      	bne.n	800ab58 <_printf_float+0x1b0>
 800ab26:	2900      	cmp	r1, #0
 800ab28:	6863      	ldr	r3, [r4, #4]
 800ab2a:	dd0b      	ble.n	800ab44 <_printf_float+0x19c>
 800ab2c:	6121      	str	r1, [r4, #16]
 800ab2e:	b913      	cbnz	r3, 800ab36 <_printf_float+0x18e>
 800ab30:	6822      	ldr	r2, [r4, #0]
 800ab32:	07d0      	lsls	r0, r2, #31
 800ab34:	d502      	bpl.n	800ab3c <_printf_float+0x194>
 800ab36:	3301      	adds	r3, #1
 800ab38:	440b      	add	r3, r1
 800ab3a:	6123      	str	r3, [r4, #16]
 800ab3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ab3e:	f04f 0900 	mov.w	r9, #0
 800ab42:	e7db      	b.n	800aafc <_printf_float+0x154>
 800ab44:	b913      	cbnz	r3, 800ab4c <_printf_float+0x1a4>
 800ab46:	6822      	ldr	r2, [r4, #0]
 800ab48:	07d2      	lsls	r2, r2, #31
 800ab4a:	d501      	bpl.n	800ab50 <_printf_float+0x1a8>
 800ab4c:	3302      	adds	r3, #2
 800ab4e:	e7f4      	b.n	800ab3a <_printf_float+0x192>
 800ab50:	2301      	movs	r3, #1
 800ab52:	e7f2      	b.n	800ab3a <_printf_float+0x192>
 800ab54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ab58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab5a:	4299      	cmp	r1, r3
 800ab5c:	db05      	blt.n	800ab6a <_printf_float+0x1c2>
 800ab5e:	6823      	ldr	r3, [r4, #0]
 800ab60:	6121      	str	r1, [r4, #16]
 800ab62:	07d8      	lsls	r0, r3, #31
 800ab64:	d5ea      	bpl.n	800ab3c <_printf_float+0x194>
 800ab66:	1c4b      	adds	r3, r1, #1
 800ab68:	e7e7      	b.n	800ab3a <_printf_float+0x192>
 800ab6a:	2900      	cmp	r1, #0
 800ab6c:	bfd4      	ite	le
 800ab6e:	f1c1 0202 	rsble	r2, r1, #2
 800ab72:	2201      	movgt	r2, #1
 800ab74:	4413      	add	r3, r2
 800ab76:	e7e0      	b.n	800ab3a <_printf_float+0x192>
 800ab78:	6823      	ldr	r3, [r4, #0]
 800ab7a:	055a      	lsls	r2, r3, #21
 800ab7c:	d407      	bmi.n	800ab8e <_printf_float+0x1e6>
 800ab7e:	6923      	ldr	r3, [r4, #16]
 800ab80:	4642      	mov	r2, r8
 800ab82:	4631      	mov	r1, r6
 800ab84:	4628      	mov	r0, r5
 800ab86:	47b8      	blx	r7
 800ab88:	3001      	adds	r0, #1
 800ab8a:	d12b      	bne.n	800abe4 <_printf_float+0x23c>
 800ab8c:	e767      	b.n	800aa5e <_printf_float+0xb6>
 800ab8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ab92:	f240 80dd 	bls.w	800ad50 <_printf_float+0x3a8>
 800ab96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	f7f5 ffa3 	bl	8000ae8 <__aeabi_dcmpeq>
 800aba2:	2800      	cmp	r0, #0
 800aba4:	d033      	beq.n	800ac0e <_printf_float+0x266>
 800aba6:	4a37      	ldr	r2, [pc, #220]	@ (800ac84 <_printf_float+0x2dc>)
 800aba8:	2301      	movs	r3, #1
 800abaa:	4631      	mov	r1, r6
 800abac:	4628      	mov	r0, r5
 800abae:	47b8      	blx	r7
 800abb0:	3001      	adds	r0, #1
 800abb2:	f43f af54 	beq.w	800aa5e <_printf_float+0xb6>
 800abb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800abba:	4543      	cmp	r3, r8
 800abbc:	db02      	blt.n	800abc4 <_printf_float+0x21c>
 800abbe:	6823      	ldr	r3, [r4, #0]
 800abc0:	07d8      	lsls	r0, r3, #31
 800abc2:	d50f      	bpl.n	800abe4 <_printf_float+0x23c>
 800abc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abc8:	4631      	mov	r1, r6
 800abca:	4628      	mov	r0, r5
 800abcc:	47b8      	blx	r7
 800abce:	3001      	adds	r0, #1
 800abd0:	f43f af45 	beq.w	800aa5e <_printf_float+0xb6>
 800abd4:	f04f 0900 	mov.w	r9, #0
 800abd8:	f108 38ff 	add.w	r8, r8, #4294967295
 800abdc:	f104 0a1a 	add.w	sl, r4, #26
 800abe0:	45c8      	cmp	r8, r9
 800abe2:	dc09      	bgt.n	800abf8 <_printf_float+0x250>
 800abe4:	6823      	ldr	r3, [r4, #0]
 800abe6:	079b      	lsls	r3, r3, #30
 800abe8:	f100 8103 	bmi.w	800adf2 <_printf_float+0x44a>
 800abec:	68e0      	ldr	r0, [r4, #12]
 800abee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abf0:	4298      	cmp	r0, r3
 800abf2:	bfb8      	it	lt
 800abf4:	4618      	movlt	r0, r3
 800abf6:	e734      	b.n	800aa62 <_printf_float+0xba>
 800abf8:	2301      	movs	r3, #1
 800abfa:	4652      	mov	r2, sl
 800abfc:	4631      	mov	r1, r6
 800abfe:	4628      	mov	r0, r5
 800ac00:	47b8      	blx	r7
 800ac02:	3001      	adds	r0, #1
 800ac04:	f43f af2b 	beq.w	800aa5e <_printf_float+0xb6>
 800ac08:	f109 0901 	add.w	r9, r9, #1
 800ac0c:	e7e8      	b.n	800abe0 <_printf_float+0x238>
 800ac0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	dc39      	bgt.n	800ac88 <_printf_float+0x2e0>
 800ac14:	4a1b      	ldr	r2, [pc, #108]	@ (800ac84 <_printf_float+0x2dc>)
 800ac16:	2301      	movs	r3, #1
 800ac18:	4631      	mov	r1, r6
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	47b8      	blx	r7
 800ac1e:	3001      	adds	r0, #1
 800ac20:	f43f af1d 	beq.w	800aa5e <_printf_float+0xb6>
 800ac24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ac28:	ea59 0303 	orrs.w	r3, r9, r3
 800ac2c:	d102      	bne.n	800ac34 <_printf_float+0x28c>
 800ac2e:	6823      	ldr	r3, [r4, #0]
 800ac30:	07d9      	lsls	r1, r3, #31
 800ac32:	d5d7      	bpl.n	800abe4 <_printf_float+0x23c>
 800ac34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac38:	4631      	mov	r1, r6
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	47b8      	blx	r7
 800ac3e:	3001      	adds	r0, #1
 800ac40:	f43f af0d 	beq.w	800aa5e <_printf_float+0xb6>
 800ac44:	f04f 0a00 	mov.w	sl, #0
 800ac48:	f104 0b1a 	add.w	fp, r4, #26
 800ac4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac4e:	425b      	negs	r3, r3
 800ac50:	4553      	cmp	r3, sl
 800ac52:	dc01      	bgt.n	800ac58 <_printf_float+0x2b0>
 800ac54:	464b      	mov	r3, r9
 800ac56:	e793      	b.n	800ab80 <_printf_float+0x1d8>
 800ac58:	2301      	movs	r3, #1
 800ac5a:	465a      	mov	r2, fp
 800ac5c:	4631      	mov	r1, r6
 800ac5e:	4628      	mov	r0, r5
 800ac60:	47b8      	blx	r7
 800ac62:	3001      	adds	r0, #1
 800ac64:	f43f aefb 	beq.w	800aa5e <_printf_float+0xb6>
 800ac68:	f10a 0a01 	add.w	sl, sl, #1
 800ac6c:	e7ee      	b.n	800ac4c <_printf_float+0x2a4>
 800ac6e:	bf00      	nop
 800ac70:	7fefffff 	.word	0x7fefffff
 800ac74:	08019254 	.word	0x08019254
 800ac78:	08019250 	.word	0x08019250
 800ac7c:	0801925c 	.word	0x0801925c
 800ac80:	08019258 	.word	0x08019258
 800ac84:	08019260 	.word	0x08019260
 800ac88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ac8a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ac8e:	4553      	cmp	r3, sl
 800ac90:	bfa8      	it	ge
 800ac92:	4653      	movge	r3, sl
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	4699      	mov	r9, r3
 800ac98:	dc36      	bgt.n	800ad08 <_printf_float+0x360>
 800ac9a:	f04f 0b00 	mov.w	fp, #0
 800ac9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aca2:	f104 021a 	add.w	r2, r4, #26
 800aca6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aca8:	9306      	str	r3, [sp, #24]
 800acaa:	eba3 0309 	sub.w	r3, r3, r9
 800acae:	455b      	cmp	r3, fp
 800acb0:	dc31      	bgt.n	800ad16 <_printf_float+0x36e>
 800acb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acb4:	459a      	cmp	sl, r3
 800acb6:	dc3a      	bgt.n	800ad2e <_printf_float+0x386>
 800acb8:	6823      	ldr	r3, [r4, #0]
 800acba:	07da      	lsls	r2, r3, #31
 800acbc:	d437      	bmi.n	800ad2e <_printf_float+0x386>
 800acbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acc0:	ebaa 0903 	sub.w	r9, sl, r3
 800acc4:	9b06      	ldr	r3, [sp, #24]
 800acc6:	ebaa 0303 	sub.w	r3, sl, r3
 800acca:	4599      	cmp	r9, r3
 800accc:	bfa8      	it	ge
 800acce:	4699      	movge	r9, r3
 800acd0:	f1b9 0f00 	cmp.w	r9, #0
 800acd4:	dc33      	bgt.n	800ad3e <_printf_float+0x396>
 800acd6:	f04f 0800 	mov.w	r8, #0
 800acda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acde:	f104 0b1a 	add.w	fp, r4, #26
 800ace2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ace4:	ebaa 0303 	sub.w	r3, sl, r3
 800ace8:	eba3 0309 	sub.w	r3, r3, r9
 800acec:	4543      	cmp	r3, r8
 800acee:	f77f af79 	ble.w	800abe4 <_printf_float+0x23c>
 800acf2:	2301      	movs	r3, #1
 800acf4:	465a      	mov	r2, fp
 800acf6:	4631      	mov	r1, r6
 800acf8:	4628      	mov	r0, r5
 800acfa:	47b8      	blx	r7
 800acfc:	3001      	adds	r0, #1
 800acfe:	f43f aeae 	beq.w	800aa5e <_printf_float+0xb6>
 800ad02:	f108 0801 	add.w	r8, r8, #1
 800ad06:	e7ec      	b.n	800ace2 <_printf_float+0x33a>
 800ad08:	4642      	mov	r2, r8
 800ad0a:	4631      	mov	r1, r6
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	47b8      	blx	r7
 800ad10:	3001      	adds	r0, #1
 800ad12:	d1c2      	bne.n	800ac9a <_printf_float+0x2f2>
 800ad14:	e6a3      	b.n	800aa5e <_printf_float+0xb6>
 800ad16:	2301      	movs	r3, #1
 800ad18:	4631      	mov	r1, r6
 800ad1a:	4628      	mov	r0, r5
 800ad1c:	9206      	str	r2, [sp, #24]
 800ad1e:	47b8      	blx	r7
 800ad20:	3001      	adds	r0, #1
 800ad22:	f43f ae9c 	beq.w	800aa5e <_printf_float+0xb6>
 800ad26:	9a06      	ldr	r2, [sp, #24]
 800ad28:	f10b 0b01 	add.w	fp, fp, #1
 800ad2c:	e7bb      	b.n	800aca6 <_printf_float+0x2fe>
 800ad2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad32:	4631      	mov	r1, r6
 800ad34:	4628      	mov	r0, r5
 800ad36:	47b8      	blx	r7
 800ad38:	3001      	adds	r0, #1
 800ad3a:	d1c0      	bne.n	800acbe <_printf_float+0x316>
 800ad3c:	e68f      	b.n	800aa5e <_printf_float+0xb6>
 800ad3e:	9a06      	ldr	r2, [sp, #24]
 800ad40:	464b      	mov	r3, r9
 800ad42:	4442      	add	r2, r8
 800ad44:	4631      	mov	r1, r6
 800ad46:	4628      	mov	r0, r5
 800ad48:	47b8      	blx	r7
 800ad4a:	3001      	adds	r0, #1
 800ad4c:	d1c3      	bne.n	800acd6 <_printf_float+0x32e>
 800ad4e:	e686      	b.n	800aa5e <_printf_float+0xb6>
 800ad50:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ad54:	f1ba 0f01 	cmp.w	sl, #1
 800ad58:	dc01      	bgt.n	800ad5e <_printf_float+0x3b6>
 800ad5a:	07db      	lsls	r3, r3, #31
 800ad5c:	d536      	bpl.n	800adcc <_printf_float+0x424>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	4642      	mov	r2, r8
 800ad62:	4631      	mov	r1, r6
 800ad64:	4628      	mov	r0, r5
 800ad66:	47b8      	blx	r7
 800ad68:	3001      	adds	r0, #1
 800ad6a:	f43f ae78 	beq.w	800aa5e <_printf_float+0xb6>
 800ad6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad72:	4631      	mov	r1, r6
 800ad74:	4628      	mov	r0, r5
 800ad76:	47b8      	blx	r7
 800ad78:	3001      	adds	r0, #1
 800ad7a:	f43f ae70 	beq.w	800aa5e <_printf_float+0xb6>
 800ad7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ad82:	2200      	movs	r2, #0
 800ad84:	2300      	movs	r3, #0
 800ad86:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad8a:	f7f5 fead 	bl	8000ae8 <__aeabi_dcmpeq>
 800ad8e:	b9c0      	cbnz	r0, 800adc2 <_printf_float+0x41a>
 800ad90:	4653      	mov	r3, sl
 800ad92:	f108 0201 	add.w	r2, r8, #1
 800ad96:	4631      	mov	r1, r6
 800ad98:	4628      	mov	r0, r5
 800ad9a:	47b8      	blx	r7
 800ad9c:	3001      	adds	r0, #1
 800ad9e:	d10c      	bne.n	800adba <_printf_float+0x412>
 800ada0:	e65d      	b.n	800aa5e <_printf_float+0xb6>
 800ada2:	2301      	movs	r3, #1
 800ada4:	465a      	mov	r2, fp
 800ada6:	4631      	mov	r1, r6
 800ada8:	4628      	mov	r0, r5
 800adaa:	47b8      	blx	r7
 800adac:	3001      	adds	r0, #1
 800adae:	f43f ae56 	beq.w	800aa5e <_printf_float+0xb6>
 800adb2:	f108 0801 	add.w	r8, r8, #1
 800adb6:	45d0      	cmp	r8, sl
 800adb8:	dbf3      	blt.n	800ada2 <_printf_float+0x3fa>
 800adba:	464b      	mov	r3, r9
 800adbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800adc0:	e6df      	b.n	800ab82 <_printf_float+0x1da>
 800adc2:	f04f 0800 	mov.w	r8, #0
 800adc6:	f104 0b1a 	add.w	fp, r4, #26
 800adca:	e7f4      	b.n	800adb6 <_printf_float+0x40e>
 800adcc:	2301      	movs	r3, #1
 800adce:	4642      	mov	r2, r8
 800add0:	e7e1      	b.n	800ad96 <_printf_float+0x3ee>
 800add2:	2301      	movs	r3, #1
 800add4:	464a      	mov	r2, r9
 800add6:	4631      	mov	r1, r6
 800add8:	4628      	mov	r0, r5
 800adda:	47b8      	blx	r7
 800addc:	3001      	adds	r0, #1
 800adde:	f43f ae3e 	beq.w	800aa5e <_printf_float+0xb6>
 800ade2:	f108 0801 	add.w	r8, r8, #1
 800ade6:	68e3      	ldr	r3, [r4, #12]
 800ade8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800adea:	1a5b      	subs	r3, r3, r1
 800adec:	4543      	cmp	r3, r8
 800adee:	dcf0      	bgt.n	800add2 <_printf_float+0x42a>
 800adf0:	e6fc      	b.n	800abec <_printf_float+0x244>
 800adf2:	f04f 0800 	mov.w	r8, #0
 800adf6:	f104 0919 	add.w	r9, r4, #25
 800adfa:	e7f4      	b.n	800ade6 <_printf_float+0x43e>

0800adfc <_printf_common>:
 800adfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae00:	4616      	mov	r6, r2
 800ae02:	4698      	mov	r8, r3
 800ae04:	688a      	ldr	r2, [r1, #8]
 800ae06:	690b      	ldr	r3, [r1, #16]
 800ae08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	bfb8      	it	lt
 800ae10:	4613      	movlt	r3, r2
 800ae12:	6033      	str	r3, [r6, #0]
 800ae14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ae18:	4607      	mov	r7, r0
 800ae1a:	460c      	mov	r4, r1
 800ae1c:	b10a      	cbz	r2, 800ae22 <_printf_common+0x26>
 800ae1e:	3301      	adds	r3, #1
 800ae20:	6033      	str	r3, [r6, #0]
 800ae22:	6823      	ldr	r3, [r4, #0]
 800ae24:	0699      	lsls	r1, r3, #26
 800ae26:	bf42      	ittt	mi
 800ae28:	6833      	ldrmi	r3, [r6, #0]
 800ae2a:	3302      	addmi	r3, #2
 800ae2c:	6033      	strmi	r3, [r6, #0]
 800ae2e:	6825      	ldr	r5, [r4, #0]
 800ae30:	f015 0506 	ands.w	r5, r5, #6
 800ae34:	d106      	bne.n	800ae44 <_printf_common+0x48>
 800ae36:	f104 0a19 	add.w	sl, r4, #25
 800ae3a:	68e3      	ldr	r3, [r4, #12]
 800ae3c:	6832      	ldr	r2, [r6, #0]
 800ae3e:	1a9b      	subs	r3, r3, r2
 800ae40:	42ab      	cmp	r3, r5
 800ae42:	dc26      	bgt.n	800ae92 <_printf_common+0x96>
 800ae44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ae48:	6822      	ldr	r2, [r4, #0]
 800ae4a:	3b00      	subs	r3, #0
 800ae4c:	bf18      	it	ne
 800ae4e:	2301      	movne	r3, #1
 800ae50:	0692      	lsls	r2, r2, #26
 800ae52:	d42b      	bmi.n	800aeac <_printf_common+0xb0>
 800ae54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ae58:	4641      	mov	r1, r8
 800ae5a:	4638      	mov	r0, r7
 800ae5c:	47c8      	blx	r9
 800ae5e:	3001      	adds	r0, #1
 800ae60:	d01e      	beq.n	800aea0 <_printf_common+0xa4>
 800ae62:	6823      	ldr	r3, [r4, #0]
 800ae64:	6922      	ldr	r2, [r4, #16]
 800ae66:	f003 0306 	and.w	r3, r3, #6
 800ae6a:	2b04      	cmp	r3, #4
 800ae6c:	bf02      	ittt	eq
 800ae6e:	68e5      	ldreq	r5, [r4, #12]
 800ae70:	6833      	ldreq	r3, [r6, #0]
 800ae72:	1aed      	subeq	r5, r5, r3
 800ae74:	68a3      	ldr	r3, [r4, #8]
 800ae76:	bf0c      	ite	eq
 800ae78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae7c:	2500      	movne	r5, #0
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	bfc4      	itt	gt
 800ae82:	1a9b      	subgt	r3, r3, r2
 800ae84:	18ed      	addgt	r5, r5, r3
 800ae86:	2600      	movs	r6, #0
 800ae88:	341a      	adds	r4, #26
 800ae8a:	42b5      	cmp	r5, r6
 800ae8c:	d11a      	bne.n	800aec4 <_printf_common+0xc8>
 800ae8e:	2000      	movs	r0, #0
 800ae90:	e008      	b.n	800aea4 <_printf_common+0xa8>
 800ae92:	2301      	movs	r3, #1
 800ae94:	4652      	mov	r2, sl
 800ae96:	4641      	mov	r1, r8
 800ae98:	4638      	mov	r0, r7
 800ae9a:	47c8      	blx	r9
 800ae9c:	3001      	adds	r0, #1
 800ae9e:	d103      	bne.n	800aea8 <_printf_common+0xac>
 800aea0:	f04f 30ff 	mov.w	r0, #4294967295
 800aea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aea8:	3501      	adds	r5, #1
 800aeaa:	e7c6      	b.n	800ae3a <_printf_common+0x3e>
 800aeac:	18e1      	adds	r1, r4, r3
 800aeae:	1c5a      	adds	r2, r3, #1
 800aeb0:	2030      	movs	r0, #48	@ 0x30
 800aeb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aeb6:	4422      	add	r2, r4
 800aeb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aebc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aec0:	3302      	adds	r3, #2
 800aec2:	e7c7      	b.n	800ae54 <_printf_common+0x58>
 800aec4:	2301      	movs	r3, #1
 800aec6:	4622      	mov	r2, r4
 800aec8:	4641      	mov	r1, r8
 800aeca:	4638      	mov	r0, r7
 800aecc:	47c8      	blx	r9
 800aece:	3001      	adds	r0, #1
 800aed0:	d0e6      	beq.n	800aea0 <_printf_common+0xa4>
 800aed2:	3601      	adds	r6, #1
 800aed4:	e7d9      	b.n	800ae8a <_printf_common+0x8e>
	...

0800aed8 <_printf_i>:
 800aed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aedc:	7e0f      	ldrb	r7, [r1, #24]
 800aede:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aee0:	2f78      	cmp	r7, #120	@ 0x78
 800aee2:	4691      	mov	r9, r2
 800aee4:	4680      	mov	r8, r0
 800aee6:	460c      	mov	r4, r1
 800aee8:	469a      	mov	sl, r3
 800aeea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aeee:	d807      	bhi.n	800af00 <_printf_i+0x28>
 800aef0:	2f62      	cmp	r7, #98	@ 0x62
 800aef2:	d80a      	bhi.n	800af0a <_printf_i+0x32>
 800aef4:	2f00      	cmp	r7, #0
 800aef6:	f000 80d1 	beq.w	800b09c <_printf_i+0x1c4>
 800aefa:	2f58      	cmp	r7, #88	@ 0x58
 800aefc:	f000 80b8 	beq.w	800b070 <_printf_i+0x198>
 800af00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800af08:	e03a      	b.n	800af80 <_printf_i+0xa8>
 800af0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800af0e:	2b15      	cmp	r3, #21
 800af10:	d8f6      	bhi.n	800af00 <_printf_i+0x28>
 800af12:	a101      	add	r1, pc, #4	@ (adr r1, 800af18 <_printf_i+0x40>)
 800af14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af18:	0800af71 	.word	0x0800af71
 800af1c:	0800af85 	.word	0x0800af85
 800af20:	0800af01 	.word	0x0800af01
 800af24:	0800af01 	.word	0x0800af01
 800af28:	0800af01 	.word	0x0800af01
 800af2c:	0800af01 	.word	0x0800af01
 800af30:	0800af85 	.word	0x0800af85
 800af34:	0800af01 	.word	0x0800af01
 800af38:	0800af01 	.word	0x0800af01
 800af3c:	0800af01 	.word	0x0800af01
 800af40:	0800af01 	.word	0x0800af01
 800af44:	0800b083 	.word	0x0800b083
 800af48:	0800afaf 	.word	0x0800afaf
 800af4c:	0800b03d 	.word	0x0800b03d
 800af50:	0800af01 	.word	0x0800af01
 800af54:	0800af01 	.word	0x0800af01
 800af58:	0800b0a5 	.word	0x0800b0a5
 800af5c:	0800af01 	.word	0x0800af01
 800af60:	0800afaf 	.word	0x0800afaf
 800af64:	0800af01 	.word	0x0800af01
 800af68:	0800af01 	.word	0x0800af01
 800af6c:	0800b045 	.word	0x0800b045
 800af70:	6833      	ldr	r3, [r6, #0]
 800af72:	1d1a      	adds	r2, r3, #4
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	6032      	str	r2, [r6, #0]
 800af78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800af80:	2301      	movs	r3, #1
 800af82:	e09c      	b.n	800b0be <_printf_i+0x1e6>
 800af84:	6833      	ldr	r3, [r6, #0]
 800af86:	6820      	ldr	r0, [r4, #0]
 800af88:	1d19      	adds	r1, r3, #4
 800af8a:	6031      	str	r1, [r6, #0]
 800af8c:	0606      	lsls	r6, r0, #24
 800af8e:	d501      	bpl.n	800af94 <_printf_i+0xbc>
 800af90:	681d      	ldr	r5, [r3, #0]
 800af92:	e003      	b.n	800af9c <_printf_i+0xc4>
 800af94:	0645      	lsls	r5, r0, #25
 800af96:	d5fb      	bpl.n	800af90 <_printf_i+0xb8>
 800af98:	f9b3 5000 	ldrsh.w	r5, [r3]
 800af9c:	2d00      	cmp	r5, #0
 800af9e:	da03      	bge.n	800afa8 <_printf_i+0xd0>
 800afa0:	232d      	movs	r3, #45	@ 0x2d
 800afa2:	426d      	negs	r5, r5
 800afa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afa8:	4858      	ldr	r0, [pc, #352]	@ (800b10c <_printf_i+0x234>)
 800afaa:	230a      	movs	r3, #10
 800afac:	e011      	b.n	800afd2 <_printf_i+0xfa>
 800afae:	6821      	ldr	r1, [r4, #0]
 800afb0:	6833      	ldr	r3, [r6, #0]
 800afb2:	0608      	lsls	r0, r1, #24
 800afb4:	f853 5b04 	ldr.w	r5, [r3], #4
 800afb8:	d402      	bmi.n	800afc0 <_printf_i+0xe8>
 800afba:	0649      	lsls	r1, r1, #25
 800afbc:	bf48      	it	mi
 800afbe:	b2ad      	uxthmi	r5, r5
 800afc0:	2f6f      	cmp	r7, #111	@ 0x6f
 800afc2:	4852      	ldr	r0, [pc, #328]	@ (800b10c <_printf_i+0x234>)
 800afc4:	6033      	str	r3, [r6, #0]
 800afc6:	bf14      	ite	ne
 800afc8:	230a      	movne	r3, #10
 800afca:	2308      	moveq	r3, #8
 800afcc:	2100      	movs	r1, #0
 800afce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800afd2:	6866      	ldr	r6, [r4, #4]
 800afd4:	60a6      	str	r6, [r4, #8]
 800afd6:	2e00      	cmp	r6, #0
 800afd8:	db05      	blt.n	800afe6 <_printf_i+0x10e>
 800afda:	6821      	ldr	r1, [r4, #0]
 800afdc:	432e      	orrs	r6, r5
 800afde:	f021 0104 	bic.w	r1, r1, #4
 800afe2:	6021      	str	r1, [r4, #0]
 800afe4:	d04b      	beq.n	800b07e <_printf_i+0x1a6>
 800afe6:	4616      	mov	r6, r2
 800afe8:	fbb5 f1f3 	udiv	r1, r5, r3
 800afec:	fb03 5711 	mls	r7, r3, r1, r5
 800aff0:	5dc7      	ldrb	r7, [r0, r7]
 800aff2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aff6:	462f      	mov	r7, r5
 800aff8:	42bb      	cmp	r3, r7
 800affa:	460d      	mov	r5, r1
 800affc:	d9f4      	bls.n	800afe8 <_printf_i+0x110>
 800affe:	2b08      	cmp	r3, #8
 800b000:	d10b      	bne.n	800b01a <_printf_i+0x142>
 800b002:	6823      	ldr	r3, [r4, #0]
 800b004:	07df      	lsls	r7, r3, #31
 800b006:	d508      	bpl.n	800b01a <_printf_i+0x142>
 800b008:	6923      	ldr	r3, [r4, #16]
 800b00a:	6861      	ldr	r1, [r4, #4]
 800b00c:	4299      	cmp	r1, r3
 800b00e:	bfde      	ittt	le
 800b010:	2330      	movle	r3, #48	@ 0x30
 800b012:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b016:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b01a:	1b92      	subs	r2, r2, r6
 800b01c:	6122      	str	r2, [r4, #16]
 800b01e:	f8cd a000 	str.w	sl, [sp]
 800b022:	464b      	mov	r3, r9
 800b024:	aa03      	add	r2, sp, #12
 800b026:	4621      	mov	r1, r4
 800b028:	4640      	mov	r0, r8
 800b02a:	f7ff fee7 	bl	800adfc <_printf_common>
 800b02e:	3001      	adds	r0, #1
 800b030:	d14a      	bne.n	800b0c8 <_printf_i+0x1f0>
 800b032:	f04f 30ff 	mov.w	r0, #4294967295
 800b036:	b004      	add	sp, #16
 800b038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b03c:	6823      	ldr	r3, [r4, #0]
 800b03e:	f043 0320 	orr.w	r3, r3, #32
 800b042:	6023      	str	r3, [r4, #0]
 800b044:	4832      	ldr	r0, [pc, #200]	@ (800b110 <_printf_i+0x238>)
 800b046:	2778      	movs	r7, #120	@ 0x78
 800b048:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b04c:	6823      	ldr	r3, [r4, #0]
 800b04e:	6831      	ldr	r1, [r6, #0]
 800b050:	061f      	lsls	r7, r3, #24
 800b052:	f851 5b04 	ldr.w	r5, [r1], #4
 800b056:	d402      	bmi.n	800b05e <_printf_i+0x186>
 800b058:	065f      	lsls	r7, r3, #25
 800b05a:	bf48      	it	mi
 800b05c:	b2ad      	uxthmi	r5, r5
 800b05e:	6031      	str	r1, [r6, #0]
 800b060:	07d9      	lsls	r1, r3, #31
 800b062:	bf44      	itt	mi
 800b064:	f043 0320 	orrmi.w	r3, r3, #32
 800b068:	6023      	strmi	r3, [r4, #0]
 800b06a:	b11d      	cbz	r5, 800b074 <_printf_i+0x19c>
 800b06c:	2310      	movs	r3, #16
 800b06e:	e7ad      	b.n	800afcc <_printf_i+0xf4>
 800b070:	4826      	ldr	r0, [pc, #152]	@ (800b10c <_printf_i+0x234>)
 800b072:	e7e9      	b.n	800b048 <_printf_i+0x170>
 800b074:	6823      	ldr	r3, [r4, #0]
 800b076:	f023 0320 	bic.w	r3, r3, #32
 800b07a:	6023      	str	r3, [r4, #0]
 800b07c:	e7f6      	b.n	800b06c <_printf_i+0x194>
 800b07e:	4616      	mov	r6, r2
 800b080:	e7bd      	b.n	800affe <_printf_i+0x126>
 800b082:	6833      	ldr	r3, [r6, #0]
 800b084:	6825      	ldr	r5, [r4, #0]
 800b086:	6961      	ldr	r1, [r4, #20]
 800b088:	1d18      	adds	r0, r3, #4
 800b08a:	6030      	str	r0, [r6, #0]
 800b08c:	062e      	lsls	r6, r5, #24
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	d501      	bpl.n	800b096 <_printf_i+0x1be>
 800b092:	6019      	str	r1, [r3, #0]
 800b094:	e002      	b.n	800b09c <_printf_i+0x1c4>
 800b096:	0668      	lsls	r0, r5, #25
 800b098:	d5fb      	bpl.n	800b092 <_printf_i+0x1ba>
 800b09a:	8019      	strh	r1, [r3, #0]
 800b09c:	2300      	movs	r3, #0
 800b09e:	6123      	str	r3, [r4, #16]
 800b0a0:	4616      	mov	r6, r2
 800b0a2:	e7bc      	b.n	800b01e <_printf_i+0x146>
 800b0a4:	6833      	ldr	r3, [r6, #0]
 800b0a6:	1d1a      	adds	r2, r3, #4
 800b0a8:	6032      	str	r2, [r6, #0]
 800b0aa:	681e      	ldr	r6, [r3, #0]
 800b0ac:	6862      	ldr	r2, [r4, #4]
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	f7f5 f89d 	bl	80001f0 <memchr>
 800b0b6:	b108      	cbz	r0, 800b0bc <_printf_i+0x1e4>
 800b0b8:	1b80      	subs	r0, r0, r6
 800b0ba:	6060      	str	r0, [r4, #4]
 800b0bc:	6863      	ldr	r3, [r4, #4]
 800b0be:	6123      	str	r3, [r4, #16]
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0c6:	e7aa      	b.n	800b01e <_printf_i+0x146>
 800b0c8:	6923      	ldr	r3, [r4, #16]
 800b0ca:	4632      	mov	r2, r6
 800b0cc:	4649      	mov	r1, r9
 800b0ce:	4640      	mov	r0, r8
 800b0d0:	47d0      	blx	sl
 800b0d2:	3001      	adds	r0, #1
 800b0d4:	d0ad      	beq.n	800b032 <_printf_i+0x15a>
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	079b      	lsls	r3, r3, #30
 800b0da:	d413      	bmi.n	800b104 <_printf_i+0x22c>
 800b0dc:	68e0      	ldr	r0, [r4, #12]
 800b0de:	9b03      	ldr	r3, [sp, #12]
 800b0e0:	4298      	cmp	r0, r3
 800b0e2:	bfb8      	it	lt
 800b0e4:	4618      	movlt	r0, r3
 800b0e6:	e7a6      	b.n	800b036 <_printf_i+0x15e>
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	4632      	mov	r2, r6
 800b0ec:	4649      	mov	r1, r9
 800b0ee:	4640      	mov	r0, r8
 800b0f0:	47d0      	blx	sl
 800b0f2:	3001      	adds	r0, #1
 800b0f4:	d09d      	beq.n	800b032 <_printf_i+0x15a>
 800b0f6:	3501      	adds	r5, #1
 800b0f8:	68e3      	ldr	r3, [r4, #12]
 800b0fa:	9903      	ldr	r1, [sp, #12]
 800b0fc:	1a5b      	subs	r3, r3, r1
 800b0fe:	42ab      	cmp	r3, r5
 800b100:	dcf2      	bgt.n	800b0e8 <_printf_i+0x210>
 800b102:	e7eb      	b.n	800b0dc <_printf_i+0x204>
 800b104:	2500      	movs	r5, #0
 800b106:	f104 0619 	add.w	r6, r4, #25
 800b10a:	e7f5      	b.n	800b0f8 <_printf_i+0x220>
 800b10c:	08019262 	.word	0x08019262
 800b110:	08019273 	.word	0x08019273

0800b114 <std>:
 800b114:	2300      	movs	r3, #0
 800b116:	b510      	push	{r4, lr}
 800b118:	4604      	mov	r4, r0
 800b11a:	e9c0 3300 	strd	r3, r3, [r0]
 800b11e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b122:	6083      	str	r3, [r0, #8]
 800b124:	8181      	strh	r1, [r0, #12]
 800b126:	6643      	str	r3, [r0, #100]	@ 0x64
 800b128:	81c2      	strh	r2, [r0, #14]
 800b12a:	6183      	str	r3, [r0, #24]
 800b12c:	4619      	mov	r1, r3
 800b12e:	2208      	movs	r2, #8
 800b130:	305c      	adds	r0, #92	@ 0x5c
 800b132:	f000 f94c 	bl	800b3ce <memset>
 800b136:	4b0d      	ldr	r3, [pc, #52]	@ (800b16c <std+0x58>)
 800b138:	6263      	str	r3, [r4, #36]	@ 0x24
 800b13a:	4b0d      	ldr	r3, [pc, #52]	@ (800b170 <std+0x5c>)
 800b13c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b13e:	4b0d      	ldr	r3, [pc, #52]	@ (800b174 <std+0x60>)
 800b140:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b142:	4b0d      	ldr	r3, [pc, #52]	@ (800b178 <std+0x64>)
 800b144:	6323      	str	r3, [r4, #48]	@ 0x30
 800b146:	4b0d      	ldr	r3, [pc, #52]	@ (800b17c <std+0x68>)
 800b148:	6224      	str	r4, [r4, #32]
 800b14a:	429c      	cmp	r4, r3
 800b14c:	d006      	beq.n	800b15c <std+0x48>
 800b14e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b152:	4294      	cmp	r4, r2
 800b154:	d002      	beq.n	800b15c <std+0x48>
 800b156:	33d0      	adds	r3, #208	@ 0xd0
 800b158:	429c      	cmp	r4, r3
 800b15a:	d105      	bne.n	800b168 <std+0x54>
 800b15c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b164:	f000 b9aa 	b.w	800b4bc <__retarget_lock_init_recursive>
 800b168:	bd10      	pop	{r4, pc}
 800b16a:	bf00      	nop
 800b16c:	0800b349 	.word	0x0800b349
 800b170:	0800b36b 	.word	0x0800b36b
 800b174:	0800b3a3 	.word	0x0800b3a3
 800b178:	0800b3c7 	.word	0x0800b3c7
 800b17c:	20000b5c 	.word	0x20000b5c

0800b180 <stdio_exit_handler>:
 800b180:	4a02      	ldr	r2, [pc, #8]	@ (800b18c <stdio_exit_handler+0xc>)
 800b182:	4903      	ldr	r1, [pc, #12]	@ (800b190 <stdio_exit_handler+0x10>)
 800b184:	4803      	ldr	r0, [pc, #12]	@ (800b194 <stdio_exit_handler+0x14>)
 800b186:	f000 b869 	b.w	800b25c <_fwalk_sglue>
 800b18a:	bf00      	nop
 800b18c:	20000198 	.word	0x20000198
 800b190:	0800ce25 	.word	0x0800ce25
 800b194:	200001a8 	.word	0x200001a8

0800b198 <cleanup_stdio>:
 800b198:	6841      	ldr	r1, [r0, #4]
 800b19a:	4b0c      	ldr	r3, [pc, #48]	@ (800b1cc <cleanup_stdio+0x34>)
 800b19c:	4299      	cmp	r1, r3
 800b19e:	b510      	push	{r4, lr}
 800b1a0:	4604      	mov	r4, r0
 800b1a2:	d001      	beq.n	800b1a8 <cleanup_stdio+0x10>
 800b1a4:	f001 fe3e 	bl	800ce24 <_fflush_r>
 800b1a8:	68a1      	ldr	r1, [r4, #8]
 800b1aa:	4b09      	ldr	r3, [pc, #36]	@ (800b1d0 <cleanup_stdio+0x38>)
 800b1ac:	4299      	cmp	r1, r3
 800b1ae:	d002      	beq.n	800b1b6 <cleanup_stdio+0x1e>
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	f001 fe37 	bl	800ce24 <_fflush_r>
 800b1b6:	68e1      	ldr	r1, [r4, #12]
 800b1b8:	4b06      	ldr	r3, [pc, #24]	@ (800b1d4 <cleanup_stdio+0x3c>)
 800b1ba:	4299      	cmp	r1, r3
 800b1bc:	d004      	beq.n	800b1c8 <cleanup_stdio+0x30>
 800b1be:	4620      	mov	r0, r4
 800b1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1c4:	f001 be2e 	b.w	800ce24 <_fflush_r>
 800b1c8:	bd10      	pop	{r4, pc}
 800b1ca:	bf00      	nop
 800b1cc:	20000b5c 	.word	0x20000b5c
 800b1d0:	20000bc4 	.word	0x20000bc4
 800b1d4:	20000c2c 	.word	0x20000c2c

0800b1d8 <global_stdio_init.part.0>:
 800b1d8:	b510      	push	{r4, lr}
 800b1da:	4b0b      	ldr	r3, [pc, #44]	@ (800b208 <global_stdio_init.part.0+0x30>)
 800b1dc:	4c0b      	ldr	r4, [pc, #44]	@ (800b20c <global_stdio_init.part.0+0x34>)
 800b1de:	4a0c      	ldr	r2, [pc, #48]	@ (800b210 <global_stdio_init.part.0+0x38>)
 800b1e0:	601a      	str	r2, [r3, #0]
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	2104      	movs	r1, #4
 800b1e8:	f7ff ff94 	bl	800b114 <std>
 800b1ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	2109      	movs	r1, #9
 800b1f4:	f7ff ff8e 	bl	800b114 <std>
 800b1f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b1fc:	2202      	movs	r2, #2
 800b1fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b202:	2112      	movs	r1, #18
 800b204:	f7ff bf86 	b.w	800b114 <std>
 800b208:	20000c94 	.word	0x20000c94
 800b20c:	20000b5c 	.word	0x20000b5c
 800b210:	0800b181 	.word	0x0800b181

0800b214 <__sfp_lock_acquire>:
 800b214:	4801      	ldr	r0, [pc, #4]	@ (800b21c <__sfp_lock_acquire+0x8>)
 800b216:	f000 b952 	b.w	800b4be <__retarget_lock_acquire_recursive>
 800b21a:	bf00      	nop
 800b21c:	20000c9d 	.word	0x20000c9d

0800b220 <__sfp_lock_release>:
 800b220:	4801      	ldr	r0, [pc, #4]	@ (800b228 <__sfp_lock_release+0x8>)
 800b222:	f000 b94d 	b.w	800b4c0 <__retarget_lock_release_recursive>
 800b226:	bf00      	nop
 800b228:	20000c9d 	.word	0x20000c9d

0800b22c <__sinit>:
 800b22c:	b510      	push	{r4, lr}
 800b22e:	4604      	mov	r4, r0
 800b230:	f7ff fff0 	bl	800b214 <__sfp_lock_acquire>
 800b234:	6a23      	ldr	r3, [r4, #32]
 800b236:	b11b      	cbz	r3, 800b240 <__sinit+0x14>
 800b238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b23c:	f7ff bff0 	b.w	800b220 <__sfp_lock_release>
 800b240:	4b04      	ldr	r3, [pc, #16]	@ (800b254 <__sinit+0x28>)
 800b242:	6223      	str	r3, [r4, #32]
 800b244:	4b04      	ldr	r3, [pc, #16]	@ (800b258 <__sinit+0x2c>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d1f5      	bne.n	800b238 <__sinit+0xc>
 800b24c:	f7ff ffc4 	bl	800b1d8 <global_stdio_init.part.0>
 800b250:	e7f2      	b.n	800b238 <__sinit+0xc>
 800b252:	bf00      	nop
 800b254:	0800b199 	.word	0x0800b199
 800b258:	20000c94 	.word	0x20000c94

0800b25c <_fwalk_sglue>:
 800b25c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b260:	4607      	mov	r7, r0
 800b262:	4688      	mov	r8, r1
 800b264:	4614      	mov	r4, r2
 800b266:	2600      	movs	r6, #0
 800b268:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b26c:	f1b9 0901 	subs.w	r9, r9, #1
 800b270:	d505      	bpl.n	800b27e <_fwalk_sglue+0x22>
 800b272:	6824      	ldr	r4, [r4, #0]
 800b274:	2c00      	cmp	r4, #0
 800b276:	d1f7      	bne.n	800b268 <_fwalk_sglue+0xc>
 800b278:	4630      	mov	r0, r6
 800b27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b27e:	89ab      	ldrh	r3, [r5, #12]
 800b280:	2b01      	cmp	r3, #1
 800b282:	d907      	bls.n	800b294 <_fwalk_sglue+0x38>
 800b284:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b288:	3301      	adds	r3, #1
 800b28a:	d003      	beq.n	800b294 <_fwalk_sglue+0x38>
 800b28c:	4629      	mov	r1, r5
 800b28e:	4638      	mov	r0, r7
 800b290:	47c0      	blx	r8
 800b292:	4306      	orrs	r6, r0
 800b294:	3568      	adds	r5, #104	@ 0x68
 800b296:	e7e9      	b.n	800b26c <_fwalk_sglue+0x10>

0800b298 <sniprintf>:
 800b298:	b40c      	push	{r2, r3}
 800b29a:	b530      	push	{r4, r5, lr}
 800b29c:	4b18      	ldr	r3, [pc, #96]	@ (800b300 <sniprintf+0x68>)
 800b29e:	1e0c      	subs	r4, r1, #0
 800b2a0:	681d      	ldr	r5, [r3, #0]
 800b2a2:	b09d      	sub	sp, #116	@ 0x74
 800b2a4:	da08      	bge.n	800b2b8 <sniprintf+0x20>
 800b2a6:	238b      	movs	r3, #139	@ 0x8b
 800b2a8:	602b      	str	r3, [r5, #0]
 800b2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ae:	b01d      	add	sp, #116	@ 0x74
 800b2b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2b4:	b002      	add	sp, #8
 800b2b6:	4770      	bx	lr
 800b2b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b2bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b2c0:	f04f 0300 	mov.w	r3, #0
 800b2c4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b2c6:	bf14      	ite	ne
 800b2c8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b2cc:	4623      	moveq	r3, r4
 800b2ce:	9304      	str	r3, [sp, #16]
 800b2d0:	9307      	str	r3, [sp, #28]
 800b2d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b2d6:	9002      	str	r0, [sp, #8]
 800b2d8:	9006      	str	r0, [sp, #24]
 800b2da:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b2de:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b2e0:	ab21      	add	r3, sp, #132	@ 0x84
 800b2e2:	a902      	add	r1, sp, #8
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	9301      	str	r3, [sp, #4]
 800b2e8:	f001 fc1c 	bl	800cb24 <_svfiprintf_r>
 800b2ec:	1c43      	adds	r3, r0, #1
 800b2ee:	bfbc      	itt	lt
 800b2f0:	238b      	movlt	r3, #139	@ 0x8b
 800b2f2:	602b      	strlt	r3, [r5, #0]
 800b2f4:	2c00      	cmp	r4, #0
 800b2f6:	d0da      	beq.n	800b2ae <sniprintf+0x16>
 800b2f8:	9b02      	ldr	r3, [sp, #8]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	701a      	strb	r2, [r3, #0]
 800b2fe:	e7d6      	b.n	800b2ae <sniprintf+0x16>
 800b300:	200001a4 	.word	0x200001a4

0800b304 <siprintf>:
 800b304:	b40e      	push	{r1, r2, r3}
 800b306:	b510      	push	{r4, lr}
 800b308:	b09d      	sub	sp, #116	@ 0x74
 800b30a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b30c:	9002      	str	r0, [sp, #8]
 800b30e:	9006      	str	r0, [sp, #24]
 800b310:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b314:	480a      	ldr	r0, [pc, #40]	@ (800b340 <siprintf+0x3c>)
 800b316:	9107      	str	r1, [sp, #28]
 800b318:	9104      	str	r1, [sp, #16]
 800b31a:	490a      	ldr	r1, [pc, #40]	@ (800b344 <siprintf+0x40>)
 800b31c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b320:	9105      	str	r1, [sp, #20]
 800b322:	2400      	movs	r4, #0
 800b324:	a902      	add	r1, sp, #8
 800b326:	6800      	ldr	r0, [r0, #0]
 800b328:	9301      	str	r3, [sp, #4]
 800b32a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b32c:	f001 fbfa 	bl	800cb24 <_svfiprintf_r>
 800b330:	9b02      	ldr	r3, [sp, #8]
 800b332:	701c      	strb	r4, [r3, #0]
 800b334:	b01d      	add	sp, #116	@ 0x74
 800b336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b33a:	b003      	add	sp, #12
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	200001a4 	.word	0x200001a4
 800b344:	ffff0208 	.word	0xffff0208

0800b348 <__sread>:
 800b348:	b510      	push	{r4, lr}
 800b34a:	460c      	mov	r4, r1
 800b34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b350:	f000 f86c 	bl	800b42c <_read_r>
 800b354:	2800      	cmp	r0, #0
 800b356:	bfab      	itete	ge
 800b358:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b35a:	89a3      	ldrhlt	r3, [r4, #12]
 800b35c:	181b      	addge	r3, r3, r0
 800b35e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b362:	bfac      	ite	ge
 800b364:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b366:	81a3      	strhlt	r3, [r4, #12]
 800b368:	bd10      	pop	{r4, pc}

0800b36a <__swrite>:
 800b36a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b36e:	461f      	mov	r7, r3
 800b370:	898b      	ldrh	r3, [r1, #12]
 800b372:	05db      	lsls	r3, r3, #23
 800b374:	4605      	mov	r5, r0
 800b376:	460c      	mov	r4, r1
 800b378:	4616      	mov	r6, r2
 800b37a:	d505      	bpl.n	800b388 <__swrite+0x1e>
 800b37c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b380:	2302      	movs	r3, #2
 800b382:	2200      	movs	r2, #0
 800b384:	f000 f840 	bl	800b408 <_lseek_r>
 800b388:	89a3      	ldrh	r3, [r4, #12]
 800b38a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b38e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b392:	81a3      	strh	r3, [r4, #12]
 800b394:	4632      	mov	r2, r6
 800b396:	463b      	mov	r3, r7
 800b398:	4628      	mov	r0, r5
 800b39a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b39e:	f000 b857 	b.w	800b450 <_write_r>

0800b3a2 <__sseek>:
 800b3a2:	b510      	push	{r4, lr}
 800b3a4:	460c      	mov	r4, r1
 800b3a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3aa:	f000 f82d 	bl	800b408 <_lseek_r>
 800b3ae:	1c43      	adds	r3, r0, #1
 800b3b0:	89a3      	ldrh	r3, [r4, #12]
 800b3b2:	bf15      	itete	ne
 800b3b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b3b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b3ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b3be:	81a3      	strheq	r3, [r4, #12]
 800b3c0:	bf18      	it	ne
 800b3c2:	81a3      	strhne	r3, [r4, #12]
 800b3c4:	bd10      	pop	{r4, pc}

0800b3c6 <__sclose>:
 800b3c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ca:	f000 b80d 	b.w	800b3e8 <_close_r>

0800b3ce <memset>:
 800b3ce:	4402      	add	r2, r0
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d100      	bne.n	800b3d8 <memset+0xa>
 800b3d6:	4770      	bx	lr
 800b3d8:	f803 1b01 	strb.w	r1, [r3], #1
 800b3dc:	e7f9      	b.n	800b3d2 <memset+0x4>
	...

0800b3e0 <_localeconv_r>:
 800b3e0:	4800      	ldr	r0, [pc, #0]	@ (800b3e4 <_localeconv_r+0x4>)
 800b3e2:	4770      	bx	lr
 800b3e4:	200002e4 	.word	0x200002e4

0800b3e8 <_close_r>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	4d06      	ldr	r5, [pc, #24]	@ (800b404 <_close_r+0x1c>)
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	4608      	mov	r0, r1
 800b3f2:	602b      	str	r3, [r5, #0]
 800b3f4:	f7f5 ff54 	bl	80012a0 <_close>
 800b3f8:	1c43      	adds	r3, r0, #1
 800b3fa:	d102      	bne.n	800b402 <_close_r+0x1a>
 800b3fc:	682b      	ldr	r3, [r5, #0]
 800b3fe:	b103      	cbz	r3, 800b402 <_close_r+0x1a>
 800b400:	6023      	str	r3, [r4, #0]
 800b402:	bd38      	pop	{r3, r4, r5, pc}
 800b404:	20000c98 	.word	0x20000c98

0800b408 <_lseek_r>:
 800b408:	b538      	push	{r3, r4, r5, lr}
 800b40a:	4d07      	ldr	r5, [pc, #28]	@ (800b428 <_lseek_r+0x20>)
 800b40c:	4604      	mov	r4, r0
 800b40e:	4608      	mov	r0, r1
 800b410:	4611      	mov	r1, r2
 800b412:	2200      	movs	r2, #0
 800b414:	602a      	str	r2, [r5, #0]
 800b416:	461a      	mov	r2, r3
 800b418:	f7f5 ff49 	bl	80012ae <_lseek>
 800b41c:	1c43      	adds	r3, r0, #1
 800b41e:	d102      	bne.n	800b426 <_lseek_r+0x1e>
 800b420:	682b      	ldr	r3, [r5, #0]
 800b422:	b103      	cbz	r3, 800b426 <_lseek_r+0x1e>
 800b424:	6023      	str	r3, [r4, #0]
 800b426:	bd38      	pop	{r3, r4, r5, pc}
 800b428:	20000c98 	.word	0x20000c98

0800b42c <_read_r>:
 800b42c:	b538      	push	{r3, r4, r5, lr}
 800b42e:	4d07      	ldr	r5, [pc, #28]	@ (800b44c <_read_r+0x20>)
 800b430:	4604      	mov	r4, r0
 800b432:	4608      	mov	r0, r1
 800b434:	4611      	mov	r1, r2
 800b436:	2200      	movs	r2, #0
 800b438:	602a      	str	r2, [r5, #0]
 800b43a:	461a      	mov	r2, r3
 800b43c:	f7f5 ff3e 	bl	80012bc <_read>
 800b440:	1c43      	adds	r3, r0, #1
 800b442:	d102      	bne.n	800b44a <_read_r+0x1e>
 800b444:	682b      	ldr	r3, [r5, #0]
 800b446:	b103      	cbz	r3, 800b44a <_read_r+0x1e>
 800b448:	6023      	str	r3, [r4, #0]
 800b44a:	bd38      	pop	{r3, r4, r5, pc}
 800b44c:	20000c98 	.word	0x20000c98

0800b450 <_write_r>:
 800b450:	b538      	push	{r3, r4, r5, lr}
 800b452:	4d07      	ldr	r5, [pc, #28]	@ (800b470 <_write_r+0x20>)
 800b454:	4604      	mov	r4, r0
 800b456:	4608      	mov	r0, r1
 800b458:	4611      	mov	r1, r2
 800b45a:	2200      	movs	r2, #0
 800b45c:	602a      	str	r2, [r5, #0]
 800b45e:	461a      	mov	r2, r3
 800b460:	f7f5 ff33 	bl	80012ca <_write>
 800b464:	1c43      	adds	r3, r0, #1
 800b466:	d102      	bne.n	800b46e <_write_r+0x1e>
 800b468:	682b      	ldr	r3, [r5, #0]
 800b46a:	b103      	cbz	r3, 800b46e <_write_r+0x1e>
 800b46c:	6023      	str	r3, [r4, #0]
 800b46e:	bd38      	pop	{r3, r4, r5, pc}
 800b470:	20000c98 	.word	0x20000c98

0800b474 <__libc_init_array>:
 800b474:	b570      	push	{r4, r5, r6, lr}
 800b476:	4d0d      	ldr	r5, [pc, #52]	@ (800b4ac <__libc_init_array+0x38>)
 800b478:	4c0d      	ldr	r4, [pc, #52]	@ (800b4b0 <__libc_init_array+0x3c>)
 800b47a:	1b64      	subs	r4, r4, r5
 800b47c:	10a4      	asrs	r4, r4, #2
 800b47e:	2600      	movs	r6, #0
 800b480:	42a6      	cmp	r6, r4
 800b482:	d109      	bne.n	800b498 <__libc_init_array+0x24>
 800b484:	4d0b      	ldr	r5, [pc, #44]	@ (800b4b4 <__libc_init_array+0x40>)
 800b486:	4c0c      	ldr	r4, [pc, #48]	@ (800b4b8 <__libc_init_array+0x44>)
 800b488:	f002 f8c2 	bl	800d610 <_init>
 800b48c:	1b64      	subs	r4, r4, r5
 800b48e:	10a4      	asrs	r4, r4, #2
 800b490:	2600      	movs	r6, #0
 800b492:	42a6      	cmp	r6, r4
 800b494:	d105      	bne.n	800b4a2 <__libc_init_array+0x2e>
 800b496:	bd70      	pop	{r4, r5, r6, pc}
 800b498:	f855 3b04 	ldr.w	r3, [r5], #4
 800b49c:	4798      	blx	r3
 800b49e:	3601      	adds	r6, #1
 800b4a0:	e7ee      	b.n	800b480 <__libc_init_array+0xc>
 800b4a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4a6:	4798      	blx	r3
 800b4a8:	3601      	adds	r6, #1
 800b4aa:	e7f2      	b.n	800b492 <__libc_init_array+0x1e>
 800b4ac:	080195cc 	.word	0x080195cc
 800b4b0:	080195cc 	.word	0x080195cc
 800b4b4:	080195cc 	.word	0x080195cc
 800b4b8:	080195d0 	.word	0x080195d0

0800b4bc <__retarget_lock_init_recursive>:
 800b4bc:	4770      	bx	lr

0800b4be <__retarget_lock_acquire_recursive>:
 800b4be:	4770      	bx	lr

0800b4c0 <__retarget_lock_release_recursive>:
 800b4c0:	4770      	bx	lr

0800b4c2 <quorem>:
 800b4c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c6:	6903      	ldr	r3, [r0, #16]
 800b4c8:	690c      	ldr	r4, [r1, #16]
 800b4ca:	42a3      	cmp	r3, r4
 800b4cc:	4607      	mov	r7, r0
 800b4ce:	db7e      	blt.n	800b5ce <quorem+0x10c>
 800b4d0:	3c01      	subs	r4, #1
 800b4d2:	f101 0814 	add.w	r8, r1, #20
 800b4d6:	00a3      	lsls	r3, r4, #2
 800b4d8:	f100 0514 	add.w	r5, r0, #20
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4e2:	9301      	str	r3, [sp, #4]
 800b4e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b4e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b4f4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b4f8:	d32e      	bcc.n	800b558 <quorem+0x96>
 800b4fa:	f04f 0a00 	mov.w	sl, #0
 800b4fe:	46c4      	mov	ip, r8
 800b500:	46ae      	mov	lr, r5
 800b502:	46d3      	mov	fp, sl
 800b504:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b508:	b298      	uxth	r0, r3
 800b50a:	fb06 a000 	mla	r0, r6, r0, sl
 800b50e:	0c02      	lsrs	r2, r0, #16
 800b510:	0c1b      	lsrs	r3, r3, #16
 800b512:	fb06 2303 	mla	r3, r6, r3, r2
 800b516:	f8de 2000 	ldr.w	r2, [lr]
 800b51a:	b280      	uxth	r0, r0
 800b51c:	b292      	uxth	r2, r2
 800b51e:	1a12      	subs	r2, r2, r0
 800b520:	445a      	add	r2, fp
 800b522:	f8de 0000 	ldr.w	r0, [lr]
 800b526:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b530:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b534:	b292      	uxth	r2, r2
 800b536:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b53a:	45e1      	cmp	r9, ip
 800b53c:	f84e 2b04 	str.w	r2, [lr], #4
 800b540:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b544:	d2de      	bcs.n	800b504 <quorem+0x42>
 800b546:	9b00      	ldr	r3, [sp, #0]
 800b548:	58eb      	ldr	r3, [r5, r3]
 800b54a:	b92b      	cbnz	r3, 800b558 <quorem+0x96>
 800b54c:	9b01      	ldr	r3, [sp, #4]
 800b54e:	3b04      	subs	r3, #4
 800b550:	429d      	cmp	r5, r3
 800b552:	461a      	mov	r2, r3
 800b554:	d32f      	bcc.n	800b5b6 <quorem+0xf4>
 800b556:	613c      	str	r4, [r7, #16]
 800b558:	4638      	mov	r0, r7
 800b55a:	f001 f97f 	bl	800c85c <__mcmp>
 800b55e:	2800      	cmp	r0, #0
 800b560:	db25      	blt.n	800b5ae <quorem+0xec>
 800b562:	4629      	mov	r1, r5
 800b564:	2000      	movs	r0, #0
 800b566:	f858 2b04 	ldr.w	r2, [r8], #4
 800b56a:	f8d1 c000 	ldr.w	ip, [r1]
 800b56e:	fa1f fe82 	uxth.w	lr, r2
 800b572:	fa1f f38c 	uxth.w	r3, ip
 800b576:	eba3 030e 	sub.w	r3, r3, lr
 800b57a:	4403      	add	r3, r0
 800b57c:	0c12      	lsrs	r2, r2, #16
 800b57e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b582:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b586:	b29b      	uxth	r3, r3
 800b588:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b58c:	45c1      	cmp	r9, r8
 800b58e:	f841 3b04 	str.w	r3, [r1], #4
 800b592:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b596:	d2e6      	bcs.n	800b566 <quorem+0xa4>
 800b598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b59c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5a0:	b922      	cbnz	r2, 800b5ac <quorem+0xea>
 800b5a2:	3b04      	subs	r3, #4
 800b5a4:	429d      	cmp	r5, r3
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	d30b      	bcc.n	800b5c2 <quorem+0x100>
 800b5aa:	613c      	str	r4, [r7, #16]
 800b5ac:	3601      	adds	r6, #1
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	b003      	add	sp, #12
 800b5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b6:	6812      	ldr	r2, [r2, #0]
 800b5b8:	3b04      	subs	r3, #4
 800b5ba:	2a00      	cmp	r2, #0
 800b5bc:	d1cb      	bne.n	800b556 <quorem+0x94>
 800b5be:	3c01      	subs	r4, #1
 800b5c0:	e7c6      	b.n	800b550 <quorem+0x8e>
 800b5c2:	6812      	ldr	r2, [r2, #0]
 800b5c4:	3b04      	subs	r3, #4
 800b5c6:	2a00      	cmp	r2, #0
 800b5c8:	d1ef      	bne.n	800b5aa <quorem+0xe8>
 800b5ca:	3c01      	subs	r4, #1
 800b5cc:	e7ea      	b.n	800b5a4 <quorem+0xe2>
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	e7ee      	b.n	800b5b0 <quorem+0xee>
 800b5d2:	0000      	movs	r0, r0
 800b5d4:	0000      	movs	r0, r0
	...

0800b5d8 <_dtoa_r>:
 800b5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5dc:	69c7      	ldr	r7, [r0, #28]
 800b5de:	b097      	sub	sp, #92	@ 0x5c
 800b5e0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b5e4:	ec55 4b10 	vmov	r4, r5, d0
 800b5e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b5ea:	9107      	str	r1, [sp, #28]
 800b5ec:	4681      	mov	r9, r0
 800b5ee:	920c      	str	r2, [sp, #48]	@ 0x30
 800b5f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b5f2:	b97f      	cbnz	r7, 800b614 <_dtoa_r+0x3c>
 800b5f4:	2010      	movs	r0, #16
 800b5f6:	f000 fe09 	bl	800c20c <malloc>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	f8c9 001c 	str.w	r0, [r9, #28]
 800b600:	b920      	cbnz	r0, 800b60c <_dtoa_r+0x34>
 800b602:	4ba9      	ldr	r3, [pc, #676]	@ (800b8a8 <_dtoa_r+0x2d0>)
 800b604:	21ef      	movs	r1, #239	@ 0xef
 800b606:	48a9      	ldr	r0, [pc, #676]	@ (800b8ac <_dtoa_r+0x2d4>)
 800b608:	f001 fc6c 	bl	800cee4 <__assert_func>
 800b60c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b610:	6007      	str	r7, [r0, #0]
 800b612:	60c7      	str	r7, [r0, #12]
 800b614:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b618:	6819      	ldr	r1, [r3, #0]
 800b61a:	b159      	cbz	r1, 800b634 <_dtoa_r+0x5c>
 800b61c:	685a      	ldr	r2, [r3, #4]
 800b61e:	604a      	str	r2, [r1, #4]
 800b620:	2301      	movs	r3, #1
 800b622:	4093      	lsls	r3, r2
 800b624:	608b      	str	r3, [r1, #8]
 800b626:	4648      	mov	r0, r9
 800b628:	f000 fee6 	bl	800c3f8 <_Bfree>
 800b62c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b630:	2200      	movs	r2, #0
 800b632:	601a      	str	r2, [r3, #0]
 800b634:	1e2b      	subs	r3, r5, #0
 800b636:	bfb9      	ittee	lt
 800b638:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b63c:	9305      	strlt	r3, [sp, #20]
 800b63e:	2300      	movge	r3, #0
 800b640:	6033      	strge	r3, [r6, #0]
 800b642:	9f05      	ldr	r7, [sp, #20]
 800b644:	4b9a      	ldr	r3, [pc, #616]	@ (800b8b0 <_dtoa_r+0x2d8>)
 800b646:	bfbc      	itt	lt
 800b648:	2201      	movlt	r2, #1
 800b64a:	6032      	strlt	r2, [r6, #0]
 800b64c:	43bb      	bics	r3, r7
 800b64e:	d112      	bne.n	800b676 <_dtoa_r+0x9e>
 800b650:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b652:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b656:	6013      	str	r3, [r2, #0]
 800b658:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b65c:	4323      	orrs	r3, r4
 800b65e:	f000 855a 	beq.w	800c116 <_dtoa_r+0xb3e>
 800b662:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b664:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b8c4 <_dtoa_r+0x2ec>
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 855c 	beq.w	800c126 <_dtoa_r+0xb4e>
 800b66e:	f10a 0303 	add.w	r3, sl, #3
 800b672:	f000 bd56 	b.w	800c122 <_dtoa_r+0xb4a>
 800b676:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b67a:	2200      	movs	r2, #0
 800b67c:	ec51 0b17 	vmov	r0, r1, d7
 800b680:	2300      	movs	r3, #0
 800b682:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b686:	f7f5 fa2f 	bl	8000ae8 <__aeabi_dcmpeq>
 800b68a:	4680      	mov	r8, r0
 800b68c:	b158      	cbz	r0, 800b6a6 <_dtoa_r+0xce>
 800b68e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b690:	2301      	movs	r3, #1
 800b692:	6013      	str	r3, [r2, #0]
 800b694:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b696:	b113      	cbz	r3, 800b69e <_dtoa_r+0xc6>
 800b698:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b69a:	4b86      	ldr	r3, [pc, #536]	@ (800b8b4 <_dtoa_r+0x2dc>)
 800b69c:	6013      	str	r3, [r2, #0]
 800b69e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b8c8 <_dtoa_r+0x2f0>
 800b6a2:	f000 bd40 	b.w	800c126 <_dtoa_r+0xb4e>
 800b6a6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b6aa:	aa14      	add	r2, sp, #80	@ 0x50
 800b6ac:	a915      	add	r1, sp, #84	@ 0x54
 800b6ae:	4648      	mov	r0, r9
 800b6b0:	f001 f984 	bl	800c9bc <__d2b>
 800b6b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b6b8:	9002      	str	r0, [sp, #8]
 800b6ba:	2e00      	cmp	r6, #0
 800b6bc:	d078      	beq.n	800b7b0 <_dtoa_r+0x1d8>
 800b6be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6c0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b6c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b6cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b6d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b6d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b6d8:	4619      	mov	r1, r3
 800b6da:	2200      	movs	r2, #0
 800b6dc:	4b76      	ldr	r3, [pc, #472]	@ (800b8b8 <_dtoa_r+0x2e0>)
 800b6de:	f7f4 fde3 	bl	80002a8 <__aeabi_dsub>
 800b6e2:	a36b      	add	r3, pc, #428	@ (adr r3, 800b890 <_dtoa_r+0x2b8>)
 800b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e8:	f7f4 ff96 	bl	8000618 <__aeabi_dmul>
 800b6ec:	a36a      	add	r3, pc, #424	@ (adr r3, 800b898 <_dtoa_r+0x2c0>)
 800b6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f2:	f7f4 fddb 	bl	80002ac <__adddf3>
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	460d      	mov	r5, r1
 800b6fc:	f7f4 ff22 	bl	8000544 <__aeabi_i2d>
 800b700:	a367      	add	r3, pc, #412	@ (adr r3, 800b8a0 <_dtoa_r+0x2c8>)
 800b702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b706:	f7f4 ff87 	bl	8000618 <__aeabi_dmul>
 800b70a:	4602      	mov	r2, r0
 800b70c:	460b      	mov	r3, r1
 800b70e:	4620      	mov	r0, r4
 800b710:	4629      	mov	r1, r5
 800b712:	f7f4 fdcb 	bl	80002ac <__adddf3>
 800b716:	4604      	mov	r4, r0
 800b718:	460d      	mov	r5, r1
 800b71a:	f7f5 fa2d 	bl	8000b78 <__aeabi_d2iz>
 800b71e:	2200      	movs	r2, #0
 800b720:	4607      	mov	r7, r0
 800b722:	2300      	movs	r3, #0
 800b724:	4620      	mov	r0, r4
 800b726:	4629      	mov	r1, r5
 800b728:	f7f5 f9e8 	bl	8000afc <__aeabi_dcmplt>
 800b72c:	b140      	cbz	r0, 800b740 <_dtoa_r+0x168>
 800b72e:	4638      	mov	r0, r7
 800b730:	f7f4 ff08 	bl	8000544 <__aeabi_i2d>
 800b734:	4622      	mov	r2, r4
 800b736:	462b      	mov	r3, r5
 800b738:	f7f5 f9d6 	bl	8000ae8 <__aeabi_dcmpeq>
 800b73c:	b900      	cbnz	r0, 800b740 <_dtoa_r+0x168>
 800b73e:	3f01      	subs	r7, #1
 800b740:	2f16      	cmp	r7, #22
 800b742:	d852      	bhi.n	800b7ea <_dtoa_r+0x212>
 800b744:	4b5d      	ldr	r3, [pc, #372]	@ (800b8bc <_dtoa_r+0x2e4>)
 800b746:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b752:	f7f5 f9d3 	bl	8000afc <__aeabi_dcmplt>
 800b756:	2800      	cmp	r0, #0
 800b758:	d049      	beq.n	800b7ee <_dtoa_r+0x216>
 800b75a:	3f01      	subs	r7, #1
 800b75c:	2300      	movs	r3, #0
 800b75e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b760:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b762:	1b9b      	subs	r3, r3, r6
 800b764:	1e5a      	subs	r2, r3, #1
 800b766:	bf45      	ittet	mi
 800b768:	f1c3 0301 	rsbmi	r3, r3, #1
 800b76c:	9300      	strmi	r3, [sp, #0]
 800b76e:	2300      	movpl	r3, #0
 800b770:	2300      	movmi	r3, #0
 800b772:	9206      	str	r2, [sp, #24]
 800b774:	bf54      	ite	pl
 800b776:	9300      	strpl	r3, [sp, #0]
 800b778:	9306      	strmi	r3, [sp, #24]
 800b77a:	2f00      	cmp	r7, #0
 800b77c:	db39      	blt.n	800b7f2 <_dtoa_r+0x21a>
 800b77e:	9b06      	ldr	r3, [sp, #24]
 800b780:	970d      	str	r7, [sp, #52]	@ 0x34
 800b782:	443b      	add	r3, r7
 800b784:	9306      	str	r3, [sp, #24]
 800b786:	2300      	movs	r3, #0
 800b788:	9308      	str	r3, [sp, #32]
 800b78a:	9b07      	ldr	r3, [sp, #28]
 800b78c:	2b09      	cmp	r3, #9
 800b78e:	d863      	bhi.n	800b858 <_dtoa_r+0x280>
 800b790:	2b05      	cmp	r3, #5
 800b792:	bfc4      	itt	gt
 800b794:	3b04      	subgt	r3, #4
 800b796:	9307      	strgt	r3, [sp, #28]
 800b798:	9b07      	ldr	r3, [sp, #28]
 800b79a:	f1a3 0302 	sub.w	r3, r3, #2
 800b79e:	bfcc      	ite	gt
 800b7a0:	2400      	movgt	r4, #0
 800b7a2:	2401      	movle	r4, #1
 800b7a4:	2b03      	cmp	r3, #3
 800b7a6:	d863      	bhi.n	800b870 <_dtoa_r+0x298>
 800b7a8:	e8df f003 	tbb	[pc, r3]
 800b7ac:	2b375452 	.word	0x2b375452
 800b7b0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b7b4:	441e      	add	r6, r3
 800b7b6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b7ba:	2b20      	cmp	r3, #32
 800b7bc:	bfc1      	itttt	gt
 800b7be:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b7c2:	409f      	lslgt	r7, r3
 800b7c4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b7c8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b7cc:	bfd6      	itet	le
 800b7ce:	f1c3 0320 	rsble	r3, r3, #32
 800b7d2:	ea47 0003 	orrgt.w	r0, r7, r3
 800b7d6:	fa04 f003 	lslle.w	r0, r4, r3
 800b7da:	f7f4 fea3 	bl	8000524 <__aeabi_ui2d>
 800b7de:	2201      	movs	r2, #1
 800b7e0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b7e4:	3e01      	subs	r6, #1
 800b7e6:	9212      	str	r2, [sp, #72]	@ 0x48
 800b7e8:	e776      	b.n	800b6d8 <_dtoa_r+0x100>
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e7b7      	b.n	800b75e <_dtoa_r+0x186>
 800b7ee:	9010      	str	r0, [sp, #64]	@ 0x40
 800b7f0:	e7b6      	b.n	800b760 <_dtoa_r+0x188>
 800b7f2:	9b00      	ldr	r3, [sp, #0]
 800b7f4:	1bdb      	subs	r3, r3, r7
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	427b      	negs	r3, r7
 800b7fa:	9308      	str	r3, [sp, #32]
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	930d      	str	r3, [sp, #52]	@ 0x34
 800b800:	e7c3      	b.n	800b78a <_dtoa_r+0x1b2>
 800b802:	2301      	movs	r3, #1
 800b804:	9309      	str	r3, [sp, #36]	@ 0x24
 800b806:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b808:	eb07 0b03 	add.w	fp, r7, r3
 800b80c:	f10b 0301 	add.w	r3, fp, #1
 800b810:	2b01      	cmp	r3, #1
 800b812:	9303      	str	r3, [sp, #12]
 800b814:	bfb8      	it	lt
 800b816:	2301      	movlt	r3, #1
 800b818:	e006      	b.n	800b828 <_dtoa_r+0x250>
 800b81a:	2301      	movs	r3, #1
 800b81c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b81e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b820:	2b00      	cmp	r3, #0
 800b822:	dd28      	ble.n	800b876 <_dtoa_r+0x29e>
 800b824:	469b      	mov	fp, r3
 800b826:	9303      	str	r3, [sp, #12]
 800b828:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b82c:	2100      	movs	r1, #0
 800b82e:	2204      	movs	r2, #4
 800b830:	f102 0514 	add.w	r5, r2, #20
 800b834:	429d      	cmp	r5, r3
 800b836:	d926      	bls.n	800b886 <_dtoa_r+0x2ae>
 800b838:	6041      	str	r1, [r0, #4]
 800b83a:	4648      	mov	r0, r9
 800b83c:	f000 fd9c 	bl	800c378 <_Balloc>
 800b840:	4682      	mov	sl, r0
 800b842:	2800      	cmp	r0, #0
 800b844:	d142      	bne.n	800b8cc <_dtoa_r+0x2f4>
 800b846:	4b1e      	ldr	r3, [pc, #120]	@ (800b8c0 <_dtoa_r+0x2e8>)
 800b848:	4602      	mov	r2, r0
 800b84a:	f240 11af 	movw	r1, #431	@ 0x1af
 800b84e:	e6da      	b.n	800b606 <_dtoa_r+0x2e>
 800b850:	2300      	movs	r3, #0
 800b852:	e7e3      	b.n	800b81c <_dtoa_r+0x244>
 800b854:	2300      	movs	r3, #0
 800b856:	e7d5      	b.n	800b804 <_dtoa_r+0x22c>
 800b858:	2401      	movs	r4, #1
 800b85a:	2300      	movs	r3, #0
 800b85c:	9307      	str	r3, [sp, #28]
 800b85e:	9409      	str	r4, [sp, #36]	@ 0x24
 800b860:	f04f 3bff 	mov.w	fp, #4294967295
 800b864:	2200      	movs	r2, #0
 800b866:	f8cd b00c 	str.w	fp, [sp, #12]
 800b86a:	2312      	movs	r3, #18
 800b86c:	920c      	str	r2, [sp, #48]	@ 0x30
 800b86e:	e7db      	b.n	800b828 <_dtoa_r+0x250>
 800b870:	2301      	movs	r3, #1
 800b872:	9309      	str	r3, [sp, #36]	@ 0x24
 800b874:	e7f4      	b.n	800b860 <_dtoa_r+0x288>
 800b876:	f04f 0b01 	mov.w	fp, #1
 800b87a:	f8cd b00c 	str.w	fp, [sp, #12]
 800b87e:	465b      	mov	r3, fp
 800b880:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b884:	e7d0      	b.n	800b828 <_dtoa_r+0x250>
 800b886:	3101      	adds	r1, #1
 800b888:	0052      	lsls	r2, r2, #1
 800b88a:	e7d1      	b.n	800b830 <_dtoa_r+0x258>
 800b88c:	f3af 8000 	nop.w
 800b890:	636f4361 	.word	0x636f4361
 800b894:	3fd287a7 	.word	0x3fd287a7
 800b898:	8b60c8b3 	.word	0x8b60c8b3
 800b89c:	3fc68a28 	.word	0x3fc68a28
 800b8a0:	509f79fb 	.word	0x509f79fb
 800b8a4:	3fd34413 	.word	0x3fd34413
 800b8a8:	08019291 	.word	0x08019291
 800b8ac:	080192a8 	.word	0x080192a8
 800b8b0:	7ff00000 	.word	0x7ff00000
 800b8b4:	08019261 	.word	0x08019261
 800b8b8:	3ff80000 	.word	0x3ff80000
 800b8bc:	080193f8 	.word	0x080193f8
 800b8c0:	08019300 	.word	0x08019300
 800b8c4:	0801928d 	.word	0x0801928d
 800b8c8:	08019260 	.word	0x08019260
 800b8cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b8d0:	6018      	str	r0, [r3, #0]
 800b8d2:	9b03      	ldr	r3, [sp, #12]
 800b8d4:	2b0e      	cmp	r3, #14
 800b8d6:	f200 80a1 	bhi.w	800ba1c <_dtoa_r+0x444>
 800b8da:	2c00      	cmp	r4, #0
 800b8dc:	f000 809e 	beq.w	800ba1c <_dtoa_r+0x444>
 800b8e0:	2f00      	cmp	r7, #0
 800b8e2:	dd33      	ble.n	800b94c <_dtoa_r+0x374>
 800b8e4:	4b9c      	ldr	r3, [pc, #624]	@ (800bb58 <_dtoa_r+0x580>)
 800b8e6:	f007 020f 	and.w	r2, r7, #15
 800b8ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8ee:	ed93 7b00 	vldr	d7, [r3]
 800b8f2:	05f8      	lsls	r0, r7, #23
 800b8f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b8f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b8fc:	d516      	bpl.n	800b92c <_dtoa_r+0x354>
 800b8fe:	4b97      	ldr	r3, [pc, #604]	@ (800bb5c <_dtoa_r+0x584>)
 800b900:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b904:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b908:	f7f4 ffb0 	bl	800086c <__aeabi_ddiv>
 800b90c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b910:	f004 040f 	and.w	r4, r4, #15
 800b914:	2603      	movs	r6, #3
 800b916:	4d91      	ldr	r5, [pc, #580]	@ (800bb5c <_dtoa_r+0x584>)
 800b918:	b954      	cbnz	r4, 800b930 <_dtoa_r+0x358>
 800b91a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b91e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b922:	f7f4 ffa3 	bl	800086c <__aeabi_ddiv>
 800b926:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b92a:	e028      	b.n	800b97e <_dtoa_r+0x3a6>
 800b92c:	2602      	movs	r6, #2
 800b92e:	e7f2      	b.n	800b916 <_dtoa_r+0x33e>
 800b930:	07e1      	lsls	r1, r4, #31
 800b932:	d508      	bpl.n	800b946 <_dtoa_r+0x36e>
 800b934:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b938:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b93c:	f7f4 fe6c 	bl	8000618 <__aeabi_dmul>
 800b940:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b944:	3601      	adds	r6, #1
 800b946:	1064      	asrs	r4, r4, #1
 800b948:	3508      	adds	r5, #8
 800b94a:	e7e5      	b.n	800b918 <_dtoa_r+0x340>
 800b94c:	f000 80af 	beq.w	800baae <_dtoa_r+0x4d6>
 800b950:	427c      	negs	r4, r7
 800b952:	4b81      	ldr	r3, [pc, #516]	@ (800bb58 <_dtoa_r+0x580>)
 800b954:	4d81      	ldr	r5, [pc, #516]	@ (800bb5c <_dtoa_r+0x584>)
 800b956:	f004 020f 	and.w	r2, r4, #15
 800b95a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b962:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b966:	f7f4 fe57 	bl	8000618 <__aeabi_dmul>
 800b96a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b96e:	1124      	asrs	r4, r4, #4
 800b970:	2300      	movs	r3, #0
 800b972:	2602      	movs	r6, #2
 800b974:	2c00      	cmp	r4, #0
 800b976:	f040 808f 	bne.w	800ba98 <_dtoa_r+0x4c0>
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d1d3      	bne.n	800b926 <_dtoa_r+0x34e>
 800b97e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b980:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b984:	2b00      	cmp	r3, #0
 800b986:	f000 8094 	beq.w	800bab2 <_dtoa_r+0x4da>
 800b98a:	4b75      	ldr	r3, [pc, #468]	@ (800bb60 <_dtoa_r+0x588>)
 800b98c:	2200      	movs	r2, #0
 800b98e:	4620      	mov	r0, r4
 800b990:	4629      	mov	r1, r5
 800b992:	f7f5 f8b3 	bl	8000afc <__aeabi_dcmplt>
 800b996:	2800      	cmp	r0, #0
 800b998:	f000 808b 	beq.w	800bab2 <_dtoa_r+0x4da>
 800b99c:	9b03      	ldr	r3, [sp, #12]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f000 8087 	beq.w	800bab2 <_dtoa_r+0x4da>
 800b9a4:	f1bb 0f00 	cmp.w	fp, #0
 800b9a8:	dd34      	ble.n	800ba14 <_dtoa_r+0x43c>
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	4b6d      	ldr	r3, [pc, #436]	@ (800bb64 <_dtoa_r+0x58c>)
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	4629      	mov	r1, r5
 800b9b2:	f7f4 fe31 	bl	8000618 <__aeabi_dmul>
 800b9b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9ba:	f107 38ff 	add.w	r8, r7, #4294967295
 800b9be:	3601      	adds	r6, #1
 800b9c0:	465c      	mov	r4, fp
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	f7f4 fdbe 	bl	8000544 <__aeabi_i2d>
 800b9c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9cc:	f7f4 fe24 	bl	8000618 <__aeabi_dmul>
 800b9d0:	4b65      	ldr	r3, [pc, #404]	@ (800bb68 <_dtoa_r+0x590>)
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f7f4 fc6a 	bl	80002ac <__adddf3>
 800b9d8:	4605      	mov	r5, r0
 800b9da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b9de:	2c00      	cmp	r4, #0
 800b9e0:	d16a      	bne.n	800bab8 <_dtoa_r+0x4e0>
 800b9e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9e6:	4b61      	ldr	r3, [pc, #388]	@ (800bb6c <_dtoa_r+0x594>)
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f7f4 fc5d 	bl	80002a8 <__aeabi_dsub>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b9f6:	462a      	mov	r2, r5
 800b9f8:	4633      	mov	r3, r6
 800b9fa:	f7f5 f89d 	bl	8000b38 <__aeabi_dcmpgt>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	f040 8298 	bne.w	800bf34 <_dtoa_r+0x95c>
 800ba04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba08:	462a      	mov	r2, r5
 800ba0a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ba0e:	f7f5 f875 	bl	8000afc <__aeabi_dcmplt>
 800ba12:	bb38      	cbnz	r0, 800ba64 <_dtoa_r+0x48c>
 800ba14:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ba18:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ba1c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f2c0 8157 	blt.w	800bcd2 <_dtoa_r+0x6fa>
 800ba24:	2f0e      	cmp	r7, #14
 800ba26:	f300 8154 	bgt.w	800bcd2 <_dtoa_r+0x6fa>
 800ba2a:	4b4b      	ldr	r3, [pc, #300]	@ (800bb58 <_dtoa_r+0x580>)
 800ba2c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ba30:	ed93 7b00 	vldr	d7, [r3]
 800ba34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	ed8d 7b00 	vstr	d7, [sp]
 800ba3c:	f280 80e5 	bge.w	800bc0a <_dtoa_r+0x632>
 800ba40:	9b03      	ldr	r3, [sp, #12]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f300 80e1 	bgt.w	800bc0a <_dtoa_r+0x632>
 800ba48:	d10c      	bne.n	800ba64 <_dtoa_r+0x48c>
 800ba4a:	4b48      	ldr	r3, [pc, #288]	@ (800bb6c <_dtoa_r+0x594>)
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	ec51 0b17 	vmov	r0, r1, d7
 800ba52:	f7f4 fde1 	bl	8000618 <__aeabi_dmul>
 800ba56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba5a:	f7f5 f863 	bl	8000b24 <__aeabi_dcmpge>
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	f000 8266 	beq.w	800bf30 <_dtoa_r+0x958>
 800ba64:	2400      	movs	r4, #0
 800ba66:	4625      	mov	r5, r4
 800ba68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba6a:	4656      	mov	r6, sl
 800ba6c:	ea6f 0803 	mvn.w	r8, r3
 800ba70:	2700      	movs	r7, #0
 800ba72:	4621      	mov	r1, r4
 800ba74:	4648      	mov	r0, r9
 800ba76:	f000 fcbf 	bl	800c3f8 <_Bfree>
 800ba7a:	2d00      	cmp	r5, #0
 800ba7c:	f000 80bd 	beq.w	800bbfa <_dtoa_r+0x622>
 800ba80:	b12f      	cbz	r7, 800ba8e <_dtoa_r+0x4b6>
 800ba82:	42af      	cmp	r7, r5
 800ba84:	d003      	beq.n	800ba8e <_dtoa_r+0x4b6>
 800ba86:	4639      	mov	r1, r7
 800ba88:	4648      	mov	r0, r9
 800ba8a:	f000 fcb5 	bl	800c3f8 <_Bfree>
 800ba8e:	4629      	mov	r1, r5
 800ba90:	4648      	mov	r0, r9
 800ba92:	f000 fcb1 	bl	800c3f8 <_Bfree>
 800ba96:	e0b0      	b.n	800bbfa <_dtoa_r+0x622>
 800ba98:	07e2      	lsls	r2, r4, #31
 800ba9a:	d505      	bpl.n	800baa8 <_dtoa_r+0x4d0>
 800ba9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800baa0:	f7f4 fdba 	bl	8000618 <__aeabi_dmul>
 800baa4:	3601      	adds	r6, #1
 800baa6:	2301      	movs	r3, #1
 800baa8:	1064      	asrs	r4, r4, #1
 800baaa:	3508      	adds	r5, #8
 800baac:	e762      	b.n	800b974 <_dtoa_r+0x39c>
 800baae:	2602      	movs	r6, #2
 800bab0:	e765      	b.n	800b97e <_dtoa_r+0x3a6>
 800bab2:	9c03      	ldr	r4, [sp, #12]
 800bab4:	46b8      	mov	r8, r7
 800bab6:	e784      	b.n	800b9c2 <_dtoa_r+0x3ea>
 800bab8:	4b27      	ldr	r3, [pc, #156]	@ (800bb58 <_dtoa_r+0x580>)
 800baba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800babc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bac0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bac4:	4454      	add	r4, sl
 800bac6:	2900      	cmp	r1, #0
 800bac8:	d054      	beq.n	800bb74 <_dtoa_r+0x59c>
 800baca:	4929      	ldr	r1, [pc, #164]	@ (800bb70 <_dtoa_r+0x598>)
 800bacc:	2000      	movs	r0, #0
 800bace:	f7f4 fecd 	bl	800086c <__aeabi_ddiv>
 800bad2:	4633      	mov	r3, r6
 800bad4:	462a      	mov	r2, r5
 800bad6:	f7f4 fbe7 	bl	80002a8 <__aeabi_dsub>
 800bada:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bade:	4656      	mov	r6, sl
 800bae0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bae4:	f7f5 f848 	bl	8000b78 <__aeabi_d2iz>
 800bae8:	4605      	mov	r5, r0
 800baea:	f7f4 fd2b 	bl	8000544 <__aeabi_i2d>
 800baee:	4602      	mov	r2, r0
 800baf0:	460b      	mov	r3, r1
 800baf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800baf6:	f7f4 fbd7 	bl	80002a8 <__aeabi_dsub>
 800bafa:	3530      	adds	r5, #48	@ 0x30
 800bafc:	4602      	mov	r2, r0
 800bafe:	460b      	mov	r3, r1
 800bb00:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb04:	f806 5b01 	strb.w	r5, [r6], #1
 800bb08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bb0c:	f7f4 fff6 	bl	8000afc <__aeabi_dcmplt>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	d172      	bne.n	800bbfa <_dtoa_r+0x622>
 800bb14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb18:	4911      	ldr	r1, [pc, #68]	@ (800bb60 <_dtoa_r+0x588>)
 800bb1a:	2000      	movs	r0, #0
 800bb1c:	f7f4 fbc4 	bl	80002a8 <__aeabi_dsub>
 800bb20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bb24:	f7f4 ffea 	bl	8000afc <__aeabi_dcmplt>
 800bb28:	2800      	cmp	r0, #0
 800bb2a:	f040 80b4 	bne.w	800bc96 <_dtoa_r+0x6be>
 800bb2e:	42a6      	cmp	r6, r4
 800bb30:	f43f af70 	beq.w	800ba14 <_dtoa_r+0x43c>
 800bb34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bb38:	4b0a      	ldr	r3, [pc, #40]	@ (800bb64 <_dtoa_r+0x58c>)
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f7f4 fd6c 	bl	8000618 <__aeabi_dmul>
 800bb40:	4b08      	ldr	r3, [pc, #32]	@ (800bb64 <_dtoa_r+0x58c>)
 800bb42:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bb46:	2200      	movs	r2, #0
 800bb48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb4c:	f7f4 fd64 	bl	8000618 <__aeabi_dmul>
 800bb50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb54:	e7c4      	b.n	800bae0 <_dtoa_r+0x508>
 800bb56:	bf00      	nop
 800bb58:	080193f8 	.word	0x080193f8
 800bb5c:	080193d0 	.word	0x080193d0
 800bb60:	3ff00000 	.word	0x3ff00000
 800bb64:	40240000 	.word	0x40240000
 800bb68:	401c0000 	.word	0x401c0000
 800bb6c:	40140000 	.word	0x40140000
 800bb70:	3fe00000 	.word	0x3fe00000
 800bb74:	4631      	mov	r1, r6
 800bb76:	4628      	mov	r0, r5
 800bb78:	f7f4 fd4e 	bl	8000618 <__aeabi_dmul>
 800bb7c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bb80:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bb82:	4656      	mov	r6, sl
 800bb84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb88:	f7f4 fff6 	bl	8000b78 <__aeabi_d2iz>
 800bb8c:	4605      	mov	r5, r0
 800bb8e:	f7f4 fcd9 	bl	8000544 <__aeabi_i2d>
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb9a:	f7f4 fb85 	bl	80002a8 <__aeabi_dsub>
 800bb9e:	3530      	adds	r5, #48	@ 0x30
 800bba0:	f806 5b01 	strb.w	r5, [r6], #1
 800bba4:	4602      	mov	r2, r0
 800bba6:	460b      	mov	r3, r1
 800bba8:	42a6      	cmp	r6, r4
 800bbaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bbae:	f04f 0200 	mov.w	r2, #0
 800bbb2:	d124      	bne.n	800bbfe <_dtoa_r+0x626>
 800bbb4:	4baf      	ldr	r3, [pc, #700]	@ (800be74 <_dtoa_r+0x89c>)
 800bbb6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bbba:	f7f4 fb77 	bl	80002ac <__adddf3>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbc6:	f7f4 ffb7 	bl	8000b38 <__aeabi_dcmpgt>
 800bbca:	2800      	cmp	r0, #0
 800bbcc:	d163      	bne.n	800bc96 <_dtoa_r+0x6be>
 800bbce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bbd2:	49a8      	ldr	r1, [pc, #672]	@ (800be74 <_dtoa_r+0x89c>)
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	f7f4 fb67 	bl	80002a8 <__aeabi_dsub>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	460b      	mov	r3, r1
 800bbde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbe2:	f7f4 ff8b 	bl	8000afc <__aeabi_dcmplt>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	f43f af14 	beq.w	800ba14 <_dtoa_r+0x43c>
 800bbec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bbee:	1e73      	subs	r3, r6, #1
 800bbf0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bbf2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bbf6:	2b30      	cmp	r3, #48	@ 0x30
 800bbf8:	d0f8      	beq.n	800bbec <_dtoa_r+0x614>
 800bbfa:	4647      	mov	r7, r8
 800bbfc:	e03b      	b.n	800bc76 <_dtoa_r+0x69e>
 800bbfe:	4b9e      	ldr	r3, [pc, #632]	@ (800be78 <_dtoa_r+0x8a0>)
 800bc00:	f7f4 fd0a 	bl	8000618 <__aeabi_dmul>
 800bc04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc08:	e7bc      	b.n	800bb84 <_dtoa_r+0x5ac>
 800bc0a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bc0e:	4656      	mov	r6, sl
 800bc10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc14:	4620      	mov	r0, r4
 800bc16:	4629      	mov	r1, r5
 800bc18:	f7f4 fe28 	bl	800086c <__aeabi_ddiv>
 800bc1c:	f7f4 ffac 	bl	8000b78 <__aeabi_d2iz>
 800bc20:	4680      	mov	r8, r0
 800bc22:	f7f4 fc8f 	bl	8000544 <__aeabi_i2d>
 800bc26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc2a:	f7f4 fcf5 	bl	8000618 <__aeabi_dmul>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	460b      	mov	r3, r1
 800bc32:	4620      	mov	r0, r4
 800bc34:	4629      	mov	r1, r5
 800bc36:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bc3a:	f7f4 fb35 	bl	80002a8 <__aeabi_dsub>
 800bc3e:	f806 4b01 	strb.w	r4, [r6], #1
 800bc42:	9d03      	ldr	r5, [sp, #12]
 800bc44:	eba6 040a 	sub.w	r4, r6, sl
 800bc48:	42a5      	cmp	r5, r4
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	d133      	bne.n	800bcb8 <_dtoa_r+0x6e0>
 800bc50:	f7f4 fb2c 	bl	80002ac <__adddf3>
 800bc54:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc58:	4604      	mov	r4, r0
 800bc5a:	460d      	mov	r5, r1
 800bc5c:	f7f4 ff6c 	bl	8000b38 <__aeabi_dcmpgt>
 800bc60:	b9c0      	cbnz	r0, 800bc94 <_dtoa_r+0x6bc>
 800bc62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc66:	4620      	mov	r0, r4
 800bc68:	4629      	mov	r1, r5
 800bc6a:	f7f4 ff3d 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc6e:	b110      	cbz	r0, 800bc76 <_dtoa_r+0x69e>
 800bc70:	f018 0f01 	tst.w	r8, #1
 800bc74:	d10e      	bne.n	800bc94 <_dtoa_r+0x6bc>
 800bc76:	9902      	ldr	r1, [sp, #8]
 800bc78:	4648      	mov	r0, r9
 800bc7a:	f000 fbbd 	bl	800c3f8 <_Bfree>
 800bc7e:	2300      	movs	r3, #0
 800bc80:	7033      	strb	r3, [r6, #0]
 800bc82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bc84:	3701      	adds	r7, #1
 800bc86:	601f      	str	r7, [r3, #0]
 800bc88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	f000 824b 	beq.w	800c126 <_dtoa_r+0xb4e>
 800bc90:	601e      	str	r6, [r3, #0]
 800bc92:	e248      	b.n	800c126 <_dtoa_r+0xb4e>
 800bc94:	46b8      	mov	r8, r7
 800bc96:	4633      	mov	r3, r6
 800bc98:	461e      	mov	r6, r3
 800bc9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc9e:	2a39      	cmp	r2, #57	@ 0x39
 800bca0:	d106      	bne.n	800bcb0 <_dtoa_r+0x6d8>
 800bca2:	459a      	cmp	sl, r3
 800bca4:	d1f8      	bne.n	800bc98 <_dtoa_r+0x6c0>
 800bca6:	2230      	movs	r2, #48	@ 0x30
 800bca8:	f108 0801 	add.w	r8, r8, #1
 800bcac:	f88a 2000 	strb.w	r2, [sl]
 800bcb0:	781a      	ldrb	r2, [r3, #0]
 800bcb2:	3201      	adds	r2, #1
 800bcb4:	701a      	strb	r2, [r3, #0]
 800bcb6:	e7a0      	b.n	800bbfa <_dtoa_r+0x622>
 800bcb8:	4b6f      	ldr	r3, [pc, #444]	@ (800be78 <_dtoa_r+0x8a0>)
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f7f4 fcac 	bl	8000618 <__aeabi_dmul>
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	4604      	mov	r4, r0
 800bcc6:	460d      	mov	r5, r1
 800bcc8:	f7f4 ff0e 	bl	8000ae8 <__aeabi_dcmpeq>
 800bccc:	2800      	cmp	r0, #0
 800bcce:	d09f      	beq.n	800bc10 <_dtoa_r+0x638>
 800bcd0:	e7d1      	b.n	800bc76 <_dtoa_r+0x69e>
 800bcd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcd4:	2a00      	cmp	r2, #0
 800bcd6:	f000 80ea 	beq.w	800beae <_dtoa_r+0x8d6>
 800bcda:	9a07      	ldr	r2, [sp, #28]
 800bcdc:	2a01      	cmp	r2, #1
 800bcde:	f300 80cd 	bgt.w	800be7c <_dtoa_r+0x8a4>
 800bce2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bce4:	2a00      	cmp	r2, #0
 800bce6:	f000 80c1 	beq.w	800be6c <_dtoa_r+0x894>
 800bcea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bcee:	9c08      	ldr	r4, [sp, #32]
 800bcf0:	9e00      	ldr	r6, [sp, #0]
 800bcf2:	9a00      	ldr	r2, [sp, #0]
 800bcf4:	441a      	add	r2, r3
 800bcf6:	9200      	str	r2, [sp, #0]
 800bcf8:	9a06      	ldr	r2, [sp, #24]
 800bcfa:	2101      	movs	r1, #1
 800bcfc:	441a      	add	r2, r3
 800bcfe:	4648      	mov	r0, r9
 800bd00:	9206      	str	r2, [sp, #24]
 800bd02:	f000 fc2d 	bl	800c560 <__i2b>
 800bd06:	4605      	mov	r5, r0
 800bd08:	b166      	cbz	r6, 800bd24 <_dtoa_r+0x74c>
 800bd0a:	9b06      	ldr	r3, [sp, #24]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	dd09      	ble.n	800bd24 <_dtoa_r+0x74c>
 800bd10:	42b3      	cmp	r3, r6
 800bd12:	9a00      	ldr	r2, [sp, #0]
 800bd14:	bfa8      	it	ge
 800bd16:	4633      	movge	r3, r6
 800bd18:	1ad2      	subs	r2, r2, r3
 800bd1a:	9200      	str	r2, [sp, #0]
 800bd1c:	9a06      	ldr	r2, [sp, #24]
 800bd1e:	1af6      	subs	r6, r6, r3
 800bd20:	1ad3      	subs	r3, r2, r3
 800bd22:	9306      	str	r3, [sp, #24]
 800bd24:	9b08      	ldr	r3, [sp, #32]
 800bd26:	b30b      	cbz	r3, 800bd6c <_dtoa_r+0x794>
 800bd28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f000 80c6 	beq.w	800bebc <_dtoa_r+0x8e4>
 800bd30:	2c00      	cmp	r4, #0
 800bd32:	f000 80c0 	beq.w	800beb6 <_dtoa_r+0x8de>
 800bd36:	4629      	mov	r1, r5
 800bd38:	4622      	mov	r2, r4
 800bd3a:	4648      	mov	r0, r9
 800bd3c:	f000 fcc8 	bl	800c6d0 <__pow5mult>
 800bd40:	9a02      	ldr	r2, [sp, #8]
 800bd42:	4601      	mov	r1, r0
 800bd44:	4605      	mov	r5, r0
 800bd46:	4648      	mov	r0, r9
 800bd48:	f000 fc20 	bl	800c58c <__multiply>
 800bd4c:	9902      	ldr	r1, [sp, #8]
 800bd4e:	4680      	mov	r8, r0
 800bd50:	4648      	mov	r0, r9
 800bd52:	f000 fb51 	bl	800c3f8 <_Bfree>
 800bd56:	9b08      	ldr	r3, [sp, #32]
 800bd58:	1b1b      	subs	r3, r3, r4
 800bd5a:	9308      	str	r3, [sp, #32]
 800bd5c:	f000 80b1 	beq.w	800bec2 <_dtoa_r+0x8ea>
 800bd60:	9a08      	ldr	r2, [sp, #32]
 800bd62:	4641      	mov	r1, r8
 800bd64:	4648      	mov	r0, r9
 800bd66:	f000 fcb3 	bl	800c6d0 <__pow5mult>
 800bd6a:	9002      	str	r0, [sp, #8]
 800bd6c:	2101      	movs	r1, #1
 800bd6e:	4648      	mov	r0, r9
 800bd70:	f000 fbf6 	bl	800c560 <__i2b>
 800bd74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd76:	4604      	mov	r4, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f000 81d8 	beq.w	800c12e <_dtoa_r+0xb56>
 800bd7e:	461a      	mov	r2, r3
 800bd80:	4601      	mov	r1, r0
 800bd82:	4648      	mov	r0, r9
 800bd84:	f000 fca4 	bl	800c6d0 <__pow5mult>
 800bd88:	9b07      	ldr	r3, [sp, #28]
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	f300 809f 	bgt.w	800bed0 <_dtoa_r+0x8f8>
 800bd92:	9b04      	ldr	r3, [sp, #16]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f040 8097 	bne.w	800bec8 <_dtoa_r+0x8f0>
 800bd9a:	9b05      	ldr	r3, [sp, #20]
 800bd9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f040 8093 	bne.w	800becc <_dtoa_r+0x8f4>
 800bda6:	9b05      	ldr	r3, [sp, #20]
 800bda8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bdac:	0d1b      	lsrs	r3, r3, #20
 800bdae:	051b      	lsls	r3, r3, #20
 800bdb0:	b133      	cbz	r3, 800bdc0 <_dtoa_r+0x7e8>
 800bdb2:	9b00      	ldr	r3, [sp, #0]
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	9300      	str	r3, [sp, #0]
 800bdb8:	9b06      	ldr	r3, [sp, #24]
 800bdba:	3301      	adds	r3, #1
 800bdbc:	9306      	str	r3, [sp, #24]
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	9308      	str	r3, [sp, #32]
 800bdc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f000 81b8 	beq.w	800c13a <_dtoa_r+0xb62>
 800bdca:	6923      	ldr	r3, [r4, #16]
 800bdcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bdd0:	6918      	ldr	r0, [r3, #16]
 800bdd2:	f000 fb79 	bl	800c4c8 <__hi0bits>
 800bdd6:	f1c0 0020 	rsb	r0, r0, #32
 800bdda:	9b06      	ldr	r3, [sp, #24]
 800bddc:	4418      	add	r0, r3
 800bdde:	f010 001f 	ands.w	r0, r0, #31
 800bde2:	f000 8082 	beq.w	800beea <_dtoa_r+0x912>
 800bde6:	f1c0 0320 	rsb	r3, r0, #32
 800bdea:	2b04      	cmp	r3, #4
 800bdec:	dd73      	ble.n	800bed6 <_dtoa_r+0x8fe>
 800bdee:	9b00      	ldr	r3, [sp, #0]
 800bdf0:	f1c0 001c 	rsb	r0, r0, #28
 800bdf4:	4403      	add	r3, r0
 800bdf6:	9300      	str	r3, [sp, #0]
 800bdf8:	9b06      	ldr	r3, [sp, #24]
 800bdfa:	4403      	add	r3, r0
 800bdfc:	4406      	add	r6, r0
 800bdfe:	9306      	str	r3, [sp, #24]
 800be00:	9b00      	ldr	r3, [sp, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	dd05      	ble.n	800be12 <_dtoa_r+0x83a>
 800be06:	9902      	ldr	r1, [sp, #8]
 800be08:	461a      	mov	r2, r3
 800be0a:	4648      	mov	r0, r9
 800be0c:	f000 fcba 	bl	800c784 <__lshift>
 800be10:	9002      	str	r0, [sp, #8]
 800be12:	9b06      	ldr	r3, [sp, #24]
 800be14:	2b00      	cmp	r3, #0
 800be16:	dd05      	ble.n	800be24 <_dtoa_r+0x84c>
 800be18:	4621      	mov	r1, r4
 800be1a:	461a      	mov	r2, r3
 800be1c:	4648      	mov	r0, r9
 800be1e:	f000 fcb1 	bl	800c784 <__lshift>
 800be22:	4604      	mov	r4, r0
 800be24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800be26:	2b00      	cmp	r3, #0
 800be28:	d061      	beq.n	800beee <_dtoa_r+0x916>
 800be2a:	9802      	ldr	r0, [sp, #8]
 800be2c:	4621      	mov	r1, r4
 800be2e:	f000 fd15 	bl	800c85c <__mcmp>
 800be32:	2800      	cmp	r0, #0
 800be34:	da5b      	bge.n	800beee <_dtoa_r+0x916>
 800be36:	2300      	movs	r3, #0
 800be38:	9902      	ldr	r1, [sp, #8]
 800be3a:	220a      	movs	r2, #10
 800be3c:	4648      	mov	r0, r9
 800be3e:	f000 fafd 	bl	800c43c <__multadd>
 800be42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be44:	9002      	str	r0, [sp, #8]
 800be46:	f107 38ff 	add.w	r8, r7, #4294967295
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	f000 8177 	beq.w	800c13e <_dtoa_r+0xb66>
 800be50:	4629      	mov	r1, r5
 800be52:	2300      	movs	r3, #0
 800be54:	220a      	movs	r2, #10
 800be56:	4648      	mov	r0, r9
 800be58:	f000 faf0 	bl	800c43c <__multadd>
 800be5c:	f1bb 0f00 	cmp.w	fp, #0
 800be60:	4605      	mov	r5, r0
 800be62:	dc6f      	bgt.n	800bf44 <_dtoa_r+0x96c>
 800be64:	9b07      	ldr	r3, [sp, #28]
 800be66:	2b02      	cmp	r3, #2
 800be68:	dc49      	bgt.n	800befe <_dtoa_r+0x926>
 800be6a:	e06b      	b.n	800bf44 <_dtoa_r+0x96c>
 800be6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800be6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800be72:	e73c      	b.n	800bcee <_dtoa_r+0x716>
 800be74:	3fe00000 	.word	0x3fe00000
 800be78:	40240000 	.word	0x40240000
 800be7c:	9b03      	ldr	r3, [sp, #12]
 800be7e:	1e5c      	subs	r4, r3, #1
 800be80:	9b08      	ldr	r3, [sp, #32]
 800be82:	42a3      	cmp	r3, r4
 800be84:	db09      	blt.n	800be9a <_dtoa_r+0x8c2>
 800be86:	1b1c      	subs	r4, r3, r4
 800be88:	9b03      	ldr	r3, [sp, #12]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f6bf af30 	bge.w	800bcf0 <_dtoa_r+0x718>
 800be90:	9b00      	ldr	r3, [sp, #0]
 800be92:	9a03      	ldr	r2, [sp, #12]
 800be94:	1a9e      	subs	r6, r3, r2
 800be96:	2300      	movs	r3, #0
 800be98:	e72b      	b.n	800bcf2 <_dtoa_r+0x71a>
 800be9a:	9b08      	ldr	r3, [sp, #32]
 800be9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800be9e:	9408      	str	r4, [sp, #32]
 800bea0:	1ae3      	subs	r3, r4, r3
 800bea2:	441a      	add	r2, r3
 800bea4:	9e00      	ldr	r6, [sp, #0]
 800bea6:	9b03      	ldr	r3, [sp, #12]
 800bea8:	920d      	str	r2, [sp, #52]	@ 0x34
 800beaa:	2400      	movs	r4, #0
 800beac:	e721      	b.n	800bcf2 <_dtoa_r+0x71a>
 800beae:	9c08      	ldr	r4, [sp, #32]
 800beb0:	9e00      	ldr	r6, [sp, #0]
 800beb2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800beb4:	e728      	b.n	800bd08 <_dtoa_r+0x730>
 800beb6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800beba:	e751      	b.n	800bd60 <_dtoa_r+0x788>
 800bebc:	9a08      	ldr	r2, [sp, #32]
 800bebe:	9902      	ldr	r1, [sp, #8]
 800bec0:	e750      	b.n	800bd64 <_dtoa_r+0x78c>
 800bec2:	f8cd 8008 	str.w	r8, [sp, #8]
 800bec6:	e751      	b.n	800bd6c <_dtoa_r+0x794>
 800bec8:	2300      	movs	r3, #0
 800beca:	e779      	b.n	800bdc0 <_dtoa_r+0x7e8>
 800becc:	9b04      	ldr	r3, [sp, #16]
 800bece:	e777      	b.n	800bdc0 <_dtoa_r+0x7e8>
 800bed0:	2300      	movs	r3, #0
 800bed2:	9308      	str	r3, [sp, #32]
 800bed4:	e779      	b.n	800bdca <_dtoa_r+0x7f2>
 800bed6:	d093      	beq.n	800be00 <_dtoa_r+0x828>
 800bed8:	9a00      	ldr	r2, [sp, #0]
 800beda:	331c      	adds	r3, #28
 800bedc:	441a      	add	r2, r3
 800bede:	9200      	str	r2, [sp, #0]
 800bee0:	9a06      	ldr	r2, [sp, #24]
 800bee2:	441a      	add	r2, r3
 800bee4:	441e      	add	r6, r3
 800bee6:	9206      	str	r2, [sp, #24]
 800bee8:	e78a      	b.n	800be00 <_dtoa_r+0x828>
 800beea:	4603      	mov	r3, r0
 800beec:	e7f4      	b.n	800bed8 <_dtoa_r+0x900>
 800beee:	9b03      	ldr	r3, [sp, #12]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	46b8      	mov	r8, r7
 800bef4:	dc20      	bgt.n	800bf38 <_dtoa_r+0x960>
 800bef6:	469b      	mov	fp, r3
 800bef8:	9b07      	ldr	r3, [sp, #28]
 800befa:	2b02      	cmp	r3, #2
 800befc:	dd1e      	ble.n	800bf3c <_dtoa_r+0x964>
 800befe:	f1bb 0f00 	cmp.w	fp, #0
 800bf02:	f47f adb1 	bne.w	800ba68 <_dtoa_r+0x490>
 800bf06:	4621      	mov	r1, r4
 800bf08:	465b      	mov	r3, fp
 800bf0a:	2205      	movs	r2, #5
 800bf0c:	4648      	mov	r0, r9
 800bf0e:	f000 fa95 	bl	800c43c <__multadd>
 800bf12:	4601      	mov	r1, r0
 800bf14:	4604      	mov	r4, r0
 800bf16:	9802      	ldr	r0, [sp, #8]
 800bf18:	f000 fca0 	bl	800c85c <__mcmp>
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	f77f ada3 	ble.w	800ba68 <_dtoa_r+0x490>
 800bf22:	4656      	mov	r6, sl
 800bf24:	2331      	movs	r3, #49	@ 0x31
 800bf26:	f806 3b01 	strb.w	r3, [r6], #1
 800bf2a:	f108 0801 	add.w	r8, r8, #1
 800bf2e:	e59f      	b.n	800ba70 <_dtoa_r+0x498>
 800bf30:	9c03      	ldr	r4, [sp, #12]
 800bf32:	46b8      	mov	r8, r7
 800bf34:	4625      	mov	r5, r4
 800bf36:	e7f4      	b.n	800bf22 <_dtoa_r+0x94a>
 800bf38:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bf3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	f000 8101 	beq.w	800c146 <_dtoa_r+0xb6e>
 800bf44:	2e00      	cmp	r6, #0
 800bf46:	dd05      	ble.n	800bf54 <_dtoa_r+0x97c>
 800bf48:	4629      	mov	r1, r5
 800bf4a:	4632      	mov	r2, r6
 800bf4c:	4648      	mov	r0, r9
 800bf4e:	f000 fc19 	bl	800c784 <__lshift>
 800bf52:	4605      	mov	r5, r0
 800bf54:	9b08      	ldr	r3, [sp, #32]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d05c      	beq.n	800c014 <_dtoa_r+0xa3c>
 800bf5a:	6869      	ldr	r1, [r5, #4]
 800bf5c:	4648      	mov	r0, r9
 800bf5e:	f000 fa0b 	bl	800c378 <_Balloc>
 800bf62:	4606      	mov	r6, r0
 800bf64:	b928      	cbnz	r0, 800bf72 <_dtoa_r+0x99a>
 800bf66:	4b82      	ldr	r3, [pc, #520]	@ (800c170 <_dtoa_r+0xb98>)
 800bf68:	4602      	mov	r2, r0
 800bf6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bf6e:	f7ff bb4a 	b.w	800b606 <_dtoa_r+0x2e>
 800bf72:	692a      	ldr	r2, [r5, #16]
 800bf74:	3202      	adds	r2, #2
 800bf76:	0092      	lsls	r2, r2, #2
 800bf78:	f105 010c 	add.w	r1, r5, #12
 800bf7c:	300c      	adds	r0, #12
 800bf7e:	f000 ffa3 	bl	800cec8 <memcpy>
 800bf82:	2201      	movs	r2, #1
 800bf84:	4631      	mov	r1, r6
 800bf86:	4648      	mov	r0, r9
 800bf88:	f000 fbfc 	bl	800c784 <__lshift>
 800bf8c:	f10a 0301 	add.w	r3, sl, #1
 800bf90:	9300      	str	r3, [sp, #0]
 800bf92:	eb0a 030b 	add.w	r3, sl, fp
 800bf96:	9308      	str	r3, [sp, #32]
 800bf98:	9b04      	ldr	r3, [sp, #16]
 800bf9a:	f003 0301 	and.w	r3, r3, #1
 800bf9e:	462f      	mov	r7, r5
 800bfa0:	9306      	str	r3, [sp, #24]
 800bfa2:	4605      	mov	r5, r0
 800bfa4:	9b00      	ldr	r3, [sp, #0]
 800bfa6:	9802      	ldr	r0, [sp, #8]
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	f103 3bff 	add.w	fp, r3, #4294967295
 800bfae:	f7ff fa88 	bl	800b4c2 <quorem>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	3330      	adds	r3, #48	@ 0x30
 800bfb6:	9003      	str	r0, [sp, #12]
 800bfb8:	4639      	mov	r1, r7
 800bfba:	9802      	ldr	r0, [sp, #8]
 800bfbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfbe:	f000 fc4d 	bl	800c85c <__mcmp>
 800bfc2:	462a      	mov	r2, r5
 800bfc4:	9004      	str	r0, [sp, #16]
 800bfc6:	4621      	mov	r1, r4
 800bfc8:	4648      	mov	r0, r9
 800bfca:	f000 fc63 	bl	800c894 <__mdiff>
 800bfce:	68c2      	ldr	r2, [r0, #12]
 800bfd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfd2:	4606      	mov	r6, r0
 800bfd4:	bb02      	cbnz	r2, 800c018 <_dtoa_r+0xa40>
 800bfd6:	4601      	mov	r1, r0
 800bfd8:	9802      	ldr	r0, [sp, #8]
 800bfda:	f000 fc3f 	bl	800c85c <__mcmp>
 800bfde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	4631      	mov	r1, r6
 800bfe4:	4648      	mov	r0, r9
 800bfe6:	920c      	str	r2, [sp, #48]	@ 0x30
 800bfe8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfea:	f000 fa05 	bl	800c3f8 <_Bfree>
 800bfee:	9b07      	ldr	r3, [sp, #28]
 800bff0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bff2:	9e00      	ldr	r6, [sp, #0]
 800bff4:	ea42 0103 	orr.w	r1, r2, r3
 800bff8:	9b06      	ldr	r3, [sp, #24]
 800bffa:	4319      	orrs	r1, r3
 800bffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bffe:	d10d      	bne.n	800c01c <_dtoa_r+0xa44>
 800c000:	2b39      	cmp	r3, #57	@ 0x39
 800c002:	d027      	beq.n	800c054 <_dtoa_r+0xa7c>
 800c004:	9a04      	ldr	r2, [sp, #16]
 800c006:	2a00      	cmp	r2, #0
 800c008:	dd01      	ble.n	800c00e <_dtoa_r+0xa36>
 800c00a:	9b03      	ldr	r3, [sp, #12]
 800c00c:	3331      	adds	r3, #49	@ 0x31
 800c00e:	f88b 3000 	strb.w	r3, [fp]
 800c012:	e52e      	b.n	800ba72 <_dtoa_r+0x49a>
 800c014:	4628      	mov	r0, r5
 800c016:	e7b9      	b.n	800bf8c <_dtoa_r+0x9b4>
 800c018:	2201      	movs	r2, #1
 800c01a:	e7e2      	b.n	800bfe2 <_dtoa_r+0xa0a>
 800c01c:	9904      	ldr	r1, [sp, #16]
 800c01e:	2900      	cmp	r1, #0
 800c020:	db04      	blt.n	800c02c <_dtoa_r+0xa54>
 800c022:	9807      	ldr	r0, [sp, #28]
 800c024:	4301      	orrs	r1, r0
 800c026:	9806      	ldr	r0, [sp, #24]
 800c028:	4301      	orrs	r1, r0
 800c02a:	d120      	bne.n	800c06e <_dtoa_r+0xa96>
 800c02c:	2a00      	cmp	r2, #0
 800c02e:	ddee      	ble.n	800c00e <_dtoa_r+0xa36>
 800c030:	9902      	ldr	r1, [sp, #8]
 800c032:	9300      	str	r3, [sp, #0]
 800c034:	2201      	movs	r2, #1
 800c036:	4648      	mov	r0, r9
 800c038:	f000 fba4 	bl	800c784 <__lshift>
 800c03c:	4621      	mov	r1, r4
 800c03e:	9002      	str	r0, [sp, #8]
 800c040:	f000 fc0c 	bl	800c85c <__mcmp>
 800c044:	2800      	cmp	r0, #0
 800c046:	9b00      	ldr	r3, [sp, #0]
 800c048:	dc02      	bgt.n	800c050 <_dtoa_r+0xa78>
 800c04a:	d1e0      	bne.n	800c00e <_dtoa_r+0xa36>
 800c04c:	07da      	lsls	r2, r3, #31
 800c04e:	d5de      	bpl.n	800c00e <_dtoa_r+0xa36>
 800c050:	2b39      	cmp	r3, #57	@ 0x39
 800c052:	d1da      	bne.n	800c00a <_dtoa_r+0xa32>
 800c054:	2339      	movs	r3, #57	@ 0x39
 800c056:	f88b 3000 	strb.w	r3, [fp]
 800c05a:	4633      	mov	r3, r6
 800c05c:	461e      	mov	r6, r3
 800c05e:	3b01      	subs	r3, #1
 800c060:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c064:	2a39      	cmp	r2, #57	@ 0x39
 800c066:	d04e      	beq.n	800c106 <_dtoa_r+0xb2e>
 800c068:	3201      	adds	r2, #1
 800c06a:	701a      	strb	r2, [r3, #0]
 800c06c:	e501      	b.n	800ba72 <_dtoa_r+0x49a>
 800c06e:	2a00      	cmp	r2, #0
 800c070:	dd03      	ble.n	800c07a <_dtoa_r+0xaa2>
 800c072:	2b39      	cmp	r3, #57	@ 0x39
 800c074:	d0ee      	beq.n	800c054 <_dtoa_r+0xa7c>
 800c076:	3301      	adds	r3, #1
 800c078:	e7c9      	b.n	800c00e <_dtoa_r+0xa36>
 800c07a:	9a00      	ldr	r2, [sp, #0]
 800c07c:	9908      	ldr	r1, [sp, #32]
 800c07e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c082:	428a      	cmp	r2, r1
 800c084:	d028      	beq.n	800c0d8 <_dtoa_r+0xb00>
 800c086:	9902      	ldr	r1, [sp, #8]
 800c088:	2300      	movs	r3, #0
 800c08a:	220a      	movs	r2, #10
 800c08c:	4648      	mov	r0, r9
 800c08e:	f000 f9d5 	bl	800c43c <__multadd>
 800c092:	42af      	cmp	r7, r5
 800c094:	9002      	str	r0, [sp, #8]
 800c096:	f04f 0300 	mov.w	r3, #0
 800c09a:	f04f 020a 	mov.w	r2, #10
 800c09e:	4639      	mov	r1, r7
 800c0a0:	4648      	mov	r0, r9
 800c0a2:	d107      	bne.n	800c0b4 <_dtoa_r+0xadc>
 800c0a4:	f000 f9ca 	bl	800c43c <__multadd>
 800c0a8:	4607      	mov	r7, r0
 800c0aa:	4605      	mov	r5, r0
 800c0ac:	9b00      	ldr	r3, [sp, #0]
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	9300      	str	r3, [sp, #0]
 800c0b2:	e777      	b.n	800bfa4 <_dtoa_r+0x9cc>
 800c0b4:	f000 f9c2 	bl	800c43c <__multadd>
 800c0b8:	4629      	mov	r1, r5
 800c0ba:	4607      	mov	r7, r0
 800c0bc:	2300      	movs	r3, #0
 800c0be:	220a      	movs	r2, #10
 800c0c0:	4648      	mov	r0, r9
 800c0c2:	f000 f9bb 	bl	800c43c <__multadd>
 800c0c6:	4605      	mov	r5, r0
 800c0c8:	e7f0      	b.n	800c0ac <_dtoa_r+0xad4>
 800c0ca:	f1bb 0f00 	cmp.w	fp, #0
 800c0ce:	bfcc      	ite	gt
 800c0d0:	465e      	movgt	r6, fp
 800c0d2:	2601      	movle	r6, #1
 800c0d4:	4456      	add	r6, sl
 800c0d6:	2700      	movs	r7, #0
 800c0d8:	9902      	ldr	r1, [sp, #8]
 800c0da:	9300      	str	r3, [sp, #0]
 800c0dc:	2201      	movs	r2, #1
 800c0de:	4648      	mov	r0, r9
 800c0e0:	f000 fb50 	bl	800c784 <__lshift>
 800c0e4:	4621      	mov	r1, r4
 800c0e6:	9002      	str	r0, [sp, #8]
 800c0e8:	f000 fbb8 	bl	800c85c <__mcmp>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	dcb4      	bgt.n	800c05a <_dtoa_r+0xa82>
 800c0f0:	d102      	bne.n	800c0f8 <_dtoa_r+0xb20>
 800c0f2:	9b00      	ldr	r3, [sp, #0]
 800c0f4:	07db      	lsls	r3, r3, #31
 800c0f6:	d4b0      	bmi.n	800c05a <_dtoa_r+0xa82>
 800c0f8:	4633      	mov	r3, r6
 800c0fa:	461e      	mov	r6, r3
 800c0fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c100:	2a30      	cmp	r2, #48	@ 0x30
 800c102:	d0fa      	beq.n	800c0fa <_dtoa_r+0xb22>
 800c104:	e4b5      	b.n	800ba72 <_dtoa_r+0x49a>
 800c106:	459a      	cmp	sl, r3
 800c108:	d1a8      	bne.n	800c05c <_dtoa_r+0xa84>
 800c10a:	2331      	movs	r3, #49	@ 0x31
 800c10c:	f108 0801 	add.w	r8, r8, #1
 800c110:	f88a 3000 	strb.w	r3, [sl]
 800c114:	e4ad      	b.n	800ba72 <_dtoa_r+0x49a>
 800c116:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c118:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c174 <_dtoa_r+0xb9c>
 800c11c:	b11b      	cbz	r3, 800c126 <_dtoa_r+0xb4e>
 800c11e:	f10a 0308 	add.w	r3, sl, #8
 800c122:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c124:	6013      	str	r3, [r2, #0]
 800c126:	4650      	mov	r0, sl
 800c128:	b017      	add	sp, #92	@ 0x5c
 800c12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c12e:	9b07      	ldr	r3, [sp, #28]
 800c130:	2b01      	cmp	r3, #1
 800c132:	f77f ae2e 	ble.w	800bd92 <_dtoa_r+0x7ba>
 800c136:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c138:	9308      	str	r3, [sp, #32]
 800c13a:	2001      	movs	r0, #1
 800c13c:	e64d      	b.n	800bdda <_dtoa_r+0x802>
 800c13e:	f1bb 0f00 	cmp.w	fp, #0
 800c142:	f77f aed9 	ble.w	800bef8 <_dtoa_r+0x920>
 800c146:	4656      	mov	r6, sl
 800c148:	9802      	ldr	r0, [sp, #8]
 800c14a:	4621      	mov	r1, r4
 800c14c:	f7ff f9b9 	bl	800b4c2 <quorem>
 800c150:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c154:	f806 3b01 	strb.w	r3, [r6], #1
 800c158:	eba6 020a 	sub.w	r2, r6, sl
 800c15c:	4593      	cmp	fp, r2
 800c15e:	ddb4      	ble.n	800c0ca <_dtoa_r+0xaf2>
 800c160:	9902      	ldr	r1, [sp, #8]
 800c162:	2300      	movs	r3, #0
 800c164:	220a      	movs	r2, #10
 800c166:	4648      	mov	r0, r9
 800c168:	f000 f968 	bl	800c43c <__multadd>
 800c16c:	9002      	str	r0, [sp, #8]
 800c16e:	e7eb      	b.n	800c148 <_dtoa_r+0xb70>
 800c170:	08019300 	.word	0x08019300
 800c174:	08019284 	.word	0x08019284

0800c178 <_free_r>:
 800c178:	b538      	push	{r3, r4, r5, lr}
 800c17a:	4605      	mov	r5, r0
 800c17c:	2900      	cmp	r1, #0
 800c17e:	d041      	beq.n	800c204 <_free_r+0x8c>
 800c180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c184:	1f0c      	subs	r4, r1, #4
 800c186:	2b00      	cmp	r3, #0
 800c188:	bfb8      	it	lt
 800c18a:	18e4      	addlt	r4, r4, r3
 800c18c:	f000 f8e8 	bl	800c360 <__malloc_lock>
 800c190:	4a1d      	ldr	r2, [pc, #116]	@ (800c208 <_free_r+0x90>)
 800c192:	6813      	ldr	r3, [r2, #0]
 800c194:	b933      	cbnz	r3, 800c1a4 <_free_r+0x2c>
 800c196:	6063      	str	r3, [r4, #4]
 800c198:	6014      	str	r4, [r2, #0]
 800c19a:	4628      	mov	r0, r5
 800c19c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1a0:	f000 b8e4 	b.w	800c36c <__malloc_unlock>
 800c1a4:	42a3      	cmp	r3, r4
 800c1a6:	d908      	bls.n	800c1ba <_free_r+0x42>
 800c1a8:	6820      	ldr	r0, [r4, #0]
 800c1aa:	1821      	adds	r1, r4, r0
 800c1ac:	428b      	cmp	r3, r1
 800c1ae:	bf01      	itttt	eq
 800c1b0:	6819      	ldreq	r1, [r3, #0]
 800c1b2:	685b      	ldreq	r3, [r3, #4]
 800c1b4:	1809      	addeq	r1, r1, r0
 800c1b6:	6021      	streq	r1, [r4, #0]
 800c1b8:	e7ed      	b.n	800c196 <_free_r+0x1e>
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	b10b      	cbz	r3, 800c1c4 <_free_r+0x4c>
 800c1c0:	42a3      	cmp	r3, r4
 800c1c2:	d9fa      	bls.n	800c1ba <_free_r+0x42>
 800c1c4:	6811      	ldr	r1, [r2, #0]
 800c1c6:	1850      	adds	r0, r2, r1
 800c1c8:	42a0      	cmp	r0, r4
 800c1ca:	d10b      	bne.n	800c1e4 <_free_r+0x6c>
 800c1cc:	6820      	ldr	r0, [r4, #0]
 800c1ce:	4401      	add	r1, r0
 800c1d0:	1850      	adds	r0, r2, r1
 800c1d2:	4283      	cmp	r3, r0
 800c1d4:	6011      	str	r1, [r2, #0]
 800c1d6:	d1e0      	bne.n	800c19a <_free_r+0x22>
 800c1d8:	6818      	ldr	r0, [r3, #0]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	6053      	str	r3, [r2, #4]
 800c1de:	4408      	add	r0, r1
 800c1e0:	6010      	str	r0, [r2, #0]
 800c1e2:	e7da      	b.n	800c19a <_free_r+0x22>
 800c1e4:	d902      	bls.n	800c1ec <_free_r+0x74>
 800c1e6:	230c      	movs	r3, #12
 800c1e8:	602b      	str	r3, [r5, #0]
 800c1ea:	e7d6      	b.n	800c19a <_free_r+0x22>
 800c1ec:	6820      	ldr	r0, [r4, #0]
 800c1ee:	1821      	adds	r1, r4, r0
 800c1f0:	428b      	cmp	r3, r1
 800c1f2:	bf04      	itt	eq
 800c1f4:	6819      	ldreq	r1, [r3, #0]
 800c1f6:	685b      	ldreq	r3, [r3, #4]
 800c1f8:	6063      	str	r3, [r4, #4]
 800c1fa:	bf04      	itt	eq
 800c1fc:	1809      	addeq	r1, r1, r0
 800c1fe:	6021      	streq	r1, [r4, #0]
 800c200:	6054      	str	r4, [r2, #4]
 800c202:	e7ca      	b.n	800c19a <_free_r+0x22>
 800c204:	bd38      	pop	{r3, r4, r5, pc}
 800c206:	bf00      	nop
 800c208:	20000ca4 	.word	0x20000ca4

0800c20c <malloc>:
 800c20c:	4b02      	ldr	r3, [pc, #8]	@ (800c218 <malloc+0xc>)
 800c20e:	4601      	mov	r1, r0
 800c210:	6818      	ldr	r0, [r3, #0]
 800c212:	f000 b825 	b.w	800c260 <_malloc_r>
 800c216:	bf00      	nop
 800c218:	200001a4 	.word	0x200001a4

0800c21c <sbrk_aligned>:
 800c21c:	b570      	push	{r4, r5, r6, lr}
 800c21e:	4e0f      	ldr	r6, [pc, #60]	@ (800c25c <sbrk_aligned+0x40>)
 800c220:	460c      	mov	r4, r1
 800c222:	6831      	ldr	r1, [r6, #0]
 800c224:	4605      	mov	r5, r0
 800c226:	b911      	cbnz	r1, 800c22e <sbrk_aligned+0x12>
 800c228:	f000 fe3e 	bl	800cea8 <_sbrk_r>
 800c22c:	6030      	str	r0, [r6, #0]
 800c22e:	4621      	mov	r1, r4
 800c230:	4628      	mov	r0, r5
 800c232:	f000 fe39 	bl	800cea8 <_sbrk_r>
 800c236:	1c43      	adds	r3, r0, #1
 800c238:	d103      	bne.n	800c242 <sbrk_aligned+0x26>
 800c23a:	f04f 34ff 	mov.w	r4, #4294967295
 800c23e:	4620      	mov	r0, r4
 800c240:	bd70      	pop	{r4, r5, r6, pc}
 800c242:	1cc4      	adds	r4, r0, #3
 800c244:	f024 0403 	bic.w	r4, r4, #3
 800c248:	42a0      	cmp	r0, r4
 800c24a:	d0f8      	beq.n	800c23e <sbrk_aligned+0x22>
 800c24c:	1a21      	subs	r1, r4, r0
 800c24e:	4628      	mov	r0, r5
 800c250:	f000 fe2a 	bl	800cea8 <_sbrk_r>
 800c254:	3001      	adds	r0, #1
 800c256:	d1f2      	bne.n	800c23e <sbrk_aligned+0x22>
 800c258:	e7ef      	b.n	800c23a <sbrk_aligned+0x1e>
 800c25a:	bf00      	nop
 800c25c:	20000ca0 	.word	0x20000ca0

0800c260 <_malloc_r>:
 800c260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c264:	1ccd      	adds	r5, r1, #3
 800c266:	f025 0503 	bic.w	r5, r5, #3
 800c26a:	3508      	adds	r5, #8
 800c26c:	2d0c      	cmp	r5, #12
 800c26e:	bf38      	it	cc
 800c270:	250c      	movcc	r5, #12
 800c272:	2d00      	cmp	r5, #0
 800c274:	4606      	mov	r6, r0
 800c276:	db01      	blt.n	800c27c <_malloc_r+0x1c>
 800c278:	42a9      	cmp	r1, r5
 800c27a:	d904      	bls.n	800c286 <_malloc_r+0x26>
 800c27c:	230c      	movs	r3, #12
 800c27e:	6033      	str	r3, [r6, #0]
 800c280:	2000      	movs	r0, #0
 800c282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c286:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c35c <_malloc_r+0xfc>
 800c28a:	f000 f869 	bl	800c360 <__malloc_lock>
 800c28e:	f8d8 3000 	ldr.w	r3, [r8]
 800c292:	461c      	mov	r4, r3
 800c294:	bb44      	cbnz	r4, 800c2e8 <_malloc_r+0x88>
 800c296:	4629      	mov	r1, r5
 800c298:	4630      	mov	r0, r6
 800c29a:	f7ff ffbf 	bl	800c21c <sbrk_aligned>
 800c29e:	1c43      	adds	r3, r0, #1
 800c2a0:	4604      	mov	r4, r0
 800c2a2:	d158      	bne.n	800c356 <_malloc_r+0xf6>
 800c2a4:	f8d8 4000 	ldr.w	r4, [r8]
 800c2a8:	4627      	mov	r7, r4
 800c2aa:	2f00      	cmp	r7, #0
 800c2ac:	d143      	bne.n	800c336 <_malloc_r+0xd6>
 800c2ae:	2c00      	cmp	r4, #0
 800c2b0:	d04b      	beq.n	800c34a <_malloc_r+0xea>
 800c2b2:	6823      	ldr	r3, [r4, #0]
 800c2b4:	4639      	mov	r1, r7
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	eb04 0903 	add.w	r9, r4, r3
 800c2bc:	f000 fdf4 	bl	800cea8 <_sbrk_r>
 800c2c0:	4581      	cmp	r9, r0
 800c2c2:	d142      	bne.n	800c34a <_malloc_r+0xea>
 800c2c4:	6821      	ldr	r1, [r4, #0]
 800c2c6:	1a6d      	subs	r5, r5, r1
 800c2c8:	4629      	mov	r1, r5
 800c2ca:	4630      	mov	r0, r6
 800c2cc:	f7ff ffa6 	bl	800c21c <sbrk_aligned>
 800c2d0:	3001      	adds	r0, #1
 800c2d2:	d03a      	beq.n	800c34a <_malloc_r+0xea>
 800c2d4:	6823      	ldr	r3, [r4, #0]
 800c2d6:	442b      	add	r3, r5
 800c2d8:	6023      	str	r3, [r4, #0]
 800c2da:	f8d8 3000 	ldr.w	r3, [r8]
 800c2de:	685a      	ldr	r2, [r3, #4]
 800c2e0:	bb62      	cbnz	r2, 800c33c <_malloc_r+0xdc>
 800c2e2:	f8c8 7000 	str.w	r7, [r8]
 800c2e6:	e00f      	b.n	800c308 <_malloc_r+0xa8>
 800c2e8:	6822      	ldr	r2, [r4, #0]
 800c2ea:	1b52      	subs	r2, r2, r5
 800c2ec:	d420      	bmi.n	800c330 <_malloc_r+0xd0>
 800c2ee:	2a0b      	cmp	r2, #11
 800c2f0:	d917      	bls.n	800c322 <_malloc_r+0xc2>
 800c2f2:	1961      	adds	r1, r4, r5
 800c2f4:	42a3      	cmp	r3, r4
 800c2f6:	6025      	str	r5, [r4, #0]
 800c2f8:	bf18      	it	ne
 800c2fa:	6059      	strne	r1, [r3, #4]
 800c2fc:	6863      	ldr	r3, [r4, #4]
 800c2fe:	bf08      	it	eq
 800c300:	f8c8 1000 	streq.w	r1, [r8]
 800c304:	5162      	str	r2, [r4, r5]
 800c306:	604b      	str	r3, [r1, #4]
 800c308:	4630      	mov	r0, r6
 800c30a:	f000 f82f 	bl	800c36c <__malloc_unlock>
 800c30e:	f104 000b 	add.w	r0, r4, #11
 800c312:	1d23      	adds	r3, r4, #4
 800c314:	f020 0007 	bic.w	r0, r0, #7
 800c318:	1ac2      	subs	r2, r0, r3
 800c31a:	bf1c      	itt	ne
 800c31c:	1a1b      	subne	r3, r3, r0
 800c31e:	50a3      	strne	r3, [r4, r2]
 800c320:	e7af      	b.n	800c282 <_malloc_r+0x22>
 800c322:	6862      	ldr	r2, [r4, #4]
 800c324:	42a3      	cmp	r3, r4
 800c326:	bf0c      	ite	eq
 800c328:	f8c8 2000 	streq.w	r2, [r8]
 800c32c:	605a      	strne	r2, [r3, #4]
 800c32e:	e7eb      	b.n	800c308 <_malloc_r+0xa8>
 800c330:	4623      	mov	r3, r4
 800c332:	6864      	ldr	r4, [r4, #4]
 800c334:	e7ae      	b.n	800c294 <_malloc_r+0x34>
 800c336:	463c      	mov	r4, r7
 800c338:	687f      	ldr	r7, [r7, #4]
 800c33a:	e7b6      	b.n	800c2aa <_malloc_r+0x4a>
 800c33c:	461a      	mov	r2, r3
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	42a3      	cmp	r3, r4
 800c342:	d1fb      	bne.n	800c33c <_malloc_r+0xdc>
 800c344:	2300      	movs	r3, #0
 800c346:	6053      	str	r3, [r2, #4]
 800c348:	e7de      	b.n	800c308 <_malloc_r+0xa8>
 800c34a:	230c      	movs	r3, #12
 800c34c:	6033      	str	r3, [r6, #0]
 800c34e:	4630      	mov	r0, r6
 800c350:	f000 f80c 	bl	800c36c <__malloc_unlock>
 800c354:	e794      	b.n	800c280 <_malloc_r+0x20>
 800c356:	6005      	str	r5, [r0, #0]
 800c358:	e7d6      	b.n	800c308 <_malloc_r+0xa8>
 800c35a:	bf00      	nop
 800c35c:	20000ca4 	.word	0x20000ca4

0800c360 <__malloc_lock>:
 800c360:	4801      	ldr	r0, [pc, #4]	@ (800c368 <__malloc_lock+0x8>)
 800c362:	f7ff b8ac 	b.w	800b4be <__retarget_lock_acquire_recursive>
 800c366:	bf00      	nop
 800c368:	20000c9c 	.word	0x20000c9c

0800c36c <__malloc_unlock>:
 800c36c:	4801      	ldr	r0, [pc, #4]	@ (800c374 <__malloc_unlock+0x8>)
 800c36e:	f7ff b8a7 	b.w	800b4c0 <__retarget_lock_release_recursive>
 800c372:	bf00      	nop
 800c374:	20000c9c 	.word	0x20000c9c

0800c378 <_Balloc>:
 800c378:	b570      	push	{r4, r5, r6, lr}
 800c37a:	69c6      	ldr	r6, [r0, #28]
 800c37c:	4604      	mov	r4, r0
 800c37e:	460d      	mov	r5, r1
 800c380:	b976      	cbnz	r6, 800c3a0 <_Balloc+0x28>
 800c382:	2010      	movs	r0, #16
 800c384:	f7ff ff42 	bl	800c20c <malloc>
 800c388:	4602      	mov	r2, r0
 800c38a:	61e0      	str	r0, [r4, #28]
 800c38c:	b920      	cbnz	r0, 800c398 <_Balloc+0x20>
 800c38e:	4b18      	ldr	r3, [pc, #96]	@ (800c3f0 <_Balloc+0x78>)
 800c390:	4818      	ldr	r0, [pc, #96]	@ (800c3f4 <_Balloc+0x7c>)
 800c392:	216b      	movs	r1, #107	@ 0x6b
 800c394:	f000 fda6 	bl	800cee4 <__assert_func>
 800c398:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c39c:	6006      	str	r6, [r0, #0]
 800c39e:	60c6      	str	r6, [r0, #12]
 800c3a0:	69e6      	ldr	r6, [r4, #28]
 800c3a2:	68f3      	ldr	r3, [r6, #12]
 800c3a4:	b183      	cbz	r3, 800c3c8 <_Balloc+0x50>
 800c3a6:	69e3      	ldr	r3, [r4, #28]
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3ae:	b9b8      	cbnz	r0, 800c3e0 <_Balloc+0x68>
 800c3b0:	2101      	movs	r1, #1
 800c3b2:	fa01 f605 	lsl.w	r6, r1, r5
 800c3b6:	1d72      	adds	r2, r6, #5
 800c3b8:	0092      	lsls	r2, r2, #2
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f000 fdb0 	bl	800cf20 <_calloc_r>
 800c3c0:	b160      	cbz	r0, 800c3dc <_Balloc+0x64>
 800c3c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c3c6:	e00e      	b.n	800c3e6 <_Balloc+0x6e>
 800c3c8:	2221      	movs	r2, #33	@ 0x21
 800c3ca:	2104      	movs	r1, #4
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	f000 fda7 	bl	800cf20 <_calloc_r>
 800c3d2:	69e3      	ldr	r3, [r4, #28]
 800c3d4:	60f0      	str	r0, [r6, #12]
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d1e4      	bne.n	800c3a6 <_Balloc+0x2e>
 800c3dc:	2000      	movs	r0, #0
 800c3de:	bd70      	pop	{r4, r5, r6, pc}
 800c3e0:	6802      	ldr	r2, [r0, #0]
 800c3e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3ec:	e7f7      	b.n	800c3de <_Balloc+0x66>
 800c3ee:	bf00      	nop
 800c3f0:	08019291 	.word	0x08019291
 800c3f4:	08019311 	.word	0x08019311

0800c3f8 <_Bfree>:
 800c3f8:	b570      	push	{r4, r5, r6, lr}
 800c3fa:	69c6      	ldr	r6, [r0, #28]
 800c3fc:	4605      	mov	r5, r0
 800c3fe:	460c      	mov	r4, r1
 800c400:	b976      	cbnz	r6, 800c420 <_Bfree+0x28>
 800c402:	2010      	movs	r0, #16
 800c404:	f7ff ff02 	bl	800c20c <malloc>
 800c408:	4602      	mov	r2, r0
 800c40a:	61e8      	str	r0, [r5, #28]
 800c40c:	b920      	cbnz	r0, 800c418 <_Bfree+0x20>
 800c40e:	4b09      	ldr	r3, [pc, #36]	@ (800c434 <_Bfree+0x3c>)
 800c410:	4809      	ldr	r0, [pc, #36]	@ (800c438 <_Bfree+0x40>)
 800c412:	218f      	movs	r1, #143	@ 0x8f
 800c414:	f000 fd66 	bl	800cee4 <__assert_func>
 800c418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c41c:	6006      	str	r6, [r0, #0]
 800c41e:	60c6      	str	r6, [r0, #12]
 800c420:	b13c      	cbz	r4, 800c432 <_Bfree+0x3a>
 800c422:	69eb      	ldr	r3, [r5, #28]
 800c424:	6862      	ldr	r2, [r4, #4]
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c42c:	6021      	str	r1, [r4, #0]
 800c42e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c432:	bd70      	pop	{r4, r5, r6, pc}
 800c434:	08019291 	.word	0x08019291
 800c438:	08019311 	.word	0x08019311

0800c43c <__multadd>:
 800c43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c440:	690d      	ldr	r5, [r1, #16]
 800c442:	4607      	mov	r7, r0
 800c444:	460c      	mov	r4, r1
 800c446:	461e      	mov	r6, r3
 800c448:	f101 0c14 	add.w	ip, r1, #20
 800c44c:	2000      	movs	r0, #0
 800c44e:	f8dc 3000 	ldr.w	r3, [ip]
 800c452:	b299      	uxth	r1, r3
 800c454:	fb02 6101 	mla	r1, r2, r1, r6
 800c458:	0c1e      	lsrs	r6, r3, #16
 800c45a:	0c0b      	lsrs	r3, r1, #16
 800c45c:	fb02 3306 	mla	r3, r2, r6, r3
 800c460:	b289      	uxth	r1, r1
 800c462:	3001      	adds	r0, #1
 800c464:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c468:	4285      	cmp	r5, r0
 800c46a:	f84c 1b04 	str.w	r1, [ip], #4
 800c46e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c472:	dcec      	bgt.n	800c44e <__multadd+0x12>
 800c474:	b30e      	cbz	r6, 800c4ba <__multadd+0x7e>
 800c476:	68a3      	ldr	r3, [r4, #8]
 800c478:	42ab      	cmp	r3, r5
 800c47a:	dc19      	bgt.n	800c4b0 <__multadd+0x74>
 800c47c:	6861      	ldr	r1, [r4, #4]
 800c47e:	4638      	mov	r0, r7
 800c480:	3101      	adds	r1, #1
 800c482:	f7ff ff79 	bl	800c378 <_Balloc>
 800c486:	4680      	mov	r8, r0
 800c488:	b928      	cbnz	r0, 800c496 <__multadd+0x5a>
 800c48a:	4602      	mov	r2, r0
 800c48c:	4b0c      	ldr	r3, [pc, #48]	@ (800c4c0 <__multadd+0x84>)
 800c48e:	480d      	ldr	r0, [pc, #52]	@ (800c4c4 <__multadd+0x88>)
 800c490:	21ba      	movs	r1, #186	@ 0xba
 800c492:	f000 fd27 	bl	800cee4 <__assert_func>
 800c496:	6922      	ldr	r2, [r4, #16]
 800c498:	3202      	adds	r2, #2
 800c49a:	f104 010c 	add.w	r1, r4, #12
 800c49e:	0092      	lsls	r2, r2, #2
 800c4a0:	300c      	adds	r0, #12
 800c4a2:	f000 fd11 	bl	800cec8 <memcpy>
 800c4a6:	4621      	mov	r1, r4
 800c4a8:	4638      	mov	r0, r7
 800c4aa:	f7ff ffa5 	bl	800c3f8 <_Bfree>
 800c4ae:	4644      	mov	r4, r8
 800c4b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c4b4:	3501      	adds	r5, #1
 800c4b6:	615e      	str	r6, [r3, #20]
 800c4b8:	6125      	str	r5, [r4, #16]
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c0:	08019300 	.word	0x08019300
 800c4c4:	08019311 	.word	0x08019311

0800c4c8 <__hi0bits>:
 800c4c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	bf36      	itet	cc
 800c4d0:	0403      	lslcc	r3, r0, #16
 800c4d2:	2000      	movcs	r0, #0
 800c4d4:	2010      	movcc	r0, #16
 800c4d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c4da:	bf3c      	itt	cc
 800c4dc:	021b      	lslcc	r3, r3, #8
 800c4de:	3008      	addcc	r0, #8
 800c4e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c4e4:	bf3c      	itt	cc
 800c4e6:	011b      	lslcc	r3, r3, #4
 800c4e8:	3004      	addcc	r0, #4
 800c4ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4ee:	bf3c      	itt	cc
 800c4f0:	009b      	lslcc	r3, r3, #2
 800c4f2:	3002      	addcc	r0, #2
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	db05      	blt.n	800c504 <__hi0bits+0x3c>
 800c4f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c4fc:	f100 0001 	add.w	r0, r0, #1
 800c500:	bf08      	it	eq
 800c502:	2020      	moveq	r0, #32
 800c504:	4770      	bx	lr

0800c506 <__lo0bits>:
 800c506:	6803      	ldr	r3, [r0, #0]
 800c508:	4602      	mov	r2, r0
 800c50a:	f013 0007 	ands.w	r0, r3, #7
 800c50e:	d00b      	beq.n	800c528 <__lo0bits+0x22>
 800c510:	07d9      	lsls	r1, r3, #31
 800c512:	d421      	bmi.n	800c558 <__lo0bits+0x52>
 800c514:	0798      	lsls	r0, r3, #30
 800c516:	bf49      	itett	mi
 800c518:	085b      	lsrmi	r3, r3, #1
 800c51a:	089b      	lsrpl	r3, r3, #2
 800c51c:	2001      	movmi	r0, #1
 800c51e:	6013      	strmi	r3, [r2, #0]
 800c520:	bf5c      	itt	pl
 800c522:	6013      	strpl	r3, [r2, #0]
 800c524:	2002      	movpl	r0, #2
 800c526:	4770      	bx	lr
 800c528:	b299      	uxth	r1, r3
 800c52a:	b909      	cbnz	r1, 800c530 <__lo0bits+0x2a>
 800c52c:	0c1b      	lsrs	r3, r3, #16
 800c52e:	2010      	movs	r0, #16
 800c530:	b2d9      	uxtb	r1, r3
 800c532:	b909      	cbnz	r1, 800c538 <__lo0bits+0x32>
 800c534:	3008      	adds	r0, #8
 800c536:	0a1b      	lsrs	r3, r3, #8
 800c538:	0719      	lsls	r1, r3, #28
 800c53a:	bf04      	itt	eq
 800c53c:	091b      	lsreq	r3, r3, #4
 800c53e:	3004      	addeq	r0, #4
 800c540:	0799      	lsls	r1, r3, #30
 800c542:	bf04      	itt	eq
 800c544:	089b      	lsreq	r3, r3, #2
 800c546:	3002      	addeq	r0, #2
 800c548:	07d9      	lsls	r1, r3, #31
 800c54a:	d403      	bmi.n	800c554 <__lo0bits+0x4e>
 800c54c:	085b      	lsrs	r3, r3, #1
 800c54e:	f100 0001 	add.w	r0, r0, #1
 800c552:	d003      	beq.n	800c55c <__lo0bits+0x56>
 800c554:	6013      	str	r3, [r2, #0]
 800c556:	4770      	bx	lr
 800c558:	2000      	movs	r0, #0
 800c55a:	4770      	bx	lr
 800c55c:	2020      	movs	r0, #32
 800c55e:	4770      	bx	lr

0800c560 <__i2b>:
 800c560:	b510      	push	{r4, lr}
 800c562:	460c      	mov	r4, r1
 800c564:	2101      	movs	r1, #1
 800c566:	f7ff ff07 	bl	800c378 <_Balloc>
 800c56a:	4602      	mov	r2, r0
 800c56c:	b928      	cbnz	r0, 800c57a <__i2b+0x1a>
 800c56e:	4b05      	ldr	r3, [pc, #20]	@ (800c584 <__i2b+0x24>)
 800c570:	4805      	ldr	r0, [pc, #20]	@ (800c588 <__i2b+0x28>)
 800c572:	f240 1145 	movw	r1, #325	@ 0x145
 800c576:	f000 fcb5 	bl	800cee4 <__assert_func>
 800c57a:	2301      	movs	r3, #1
 800c57c:	6144      	str	r4, [r0, #20]
 800c57e:	6103      	str	r3, [r0, #16]
 800c580:	bd10      	pop	{r4, pc}
 800c582:	bf00      	nop
 800c584:	08019300 	.word	0x08019300
 800c588:	08019311 	.word	0x08019311

0800c58c <__multiply>:
 800c58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c590:	4617      	mov	r7, r2
 800c592:	690a      	ldr	r2, [r1, #16]
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	429a      	cmp	r2, r3
 800c598:	bfa8      	it	ge
 800c59a:	463b      	movge	r3, r7
 800c59c:	4689      	mov	r9, r1
 800c59e:	bfa4      	itt	ge
 800c5a0:	460f      	movge	r7, r1
 800c5a2:	4699      	movge	r9, r3
 800c5a4:	693d      	ldr	r5, [r7, #16]
 800c5a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	6879      	ldr	r1, [r7, #4]
 800c5ae:	eb05 060a 	add.w	r6, r5, sl
 800c5b2:	42b3      	cmp	r3, r6
 800c5b4:	b085      	sub	sp, #20
 800c5b6:	bfb8      	it	lt
 800c5b8:	3101      	addlt	r1, #1
 800c5ba:	f7ff fedd 	bl	800c378 <_Balloc>
 800c5be:	b930      	cbnz	r0, 800c5ce <__multiply+0x42>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	4b41      	ldr	r3, [pc, #260]	@ (800c6c8 <__multiply+0x13c>)
 800c5c4:	4841      	ldr	r0, [pc, #260]	@ (800c6cc <__multiply+0x140>)
 800c5c6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c5ca:	f000 fc8b 	bl	800cee4 <__assert_func>
 800c5ce:	f100 0414 	add.w	r4, r0, #20
 800c5d2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c5d6:	4623      	mov	r3, r4
 800c5d8:	2200      	movs	r2, #0
 800c5da:	4573      	cmp	r3, lr
 800c5dc:	d320      	bcc.n	800c620 <__multiply+0x94>
 800c5de:	f107 0814 	add.w	r8, r7, #20
 800c5e2:	f109 0114 	add.w	r1, r9, #20
 800c5e6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c5ea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c5ee:	9302      	str	r3, [sp, #8]
 800c5f0:	1beb      	subs	r3, r5, r7
 800c5f2:	3b15      	subs	r3, #21
 800c5f4:	f023 0303 	bic.w	r3, r3, #3
 800c5f8:	3304      	adds	r3, #4
 800c5fa:	3715      	adds	r7, #21
 800c5fc:	42bd      	cmp	r5, r7
 800c5fe:	bf38      	it	cc
 800c600:	2304      	movcc	r3, #4
 800c602:	9301      	str	r3, [sp, #4]
 800c604:	9b02      	ldr	r3, [sp, #8]
 800c606:	9103      	str	r1, [sp, #12]
 800c608:	428b      	cmp	r3, r1
 800c60a:	d80c      	bhi.n	800c626 <__multiply+0x9a>
 800c60c:	2e00      	cmp	r6, #0
 800c60e:	dd03      	ble.n	800c618 <__multiply+0x8c>
 800c610:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c614:	2b00      	cmp	r3, #0
 800c616:	d055      	beq.n	800c6c4 <__multiply+0x138>
 800c618:	6106      	str	r6, [r0, #16]
 800c61a:	b005      	add	sp, #20
 800c61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c620:	f843 2b04 	str.w	r2, [r3], #4
 800c624:	e7d9      	b.n	800c5da <__multiply+0x4e>
 800c626:	f8b1 a000 	ldrh.w	sl, [r1]
 800c62a:	f1ba 0f00 	cmp.w	sl, #0
 800c62e:	d01f      	beq.n	800c670 <__multiply+0xe4>
 800c630:	46c4      	mov	ip, r8
 800c632:	46a1      	mov	r9, r4
 800c634:	2700      	movs	r7, #0
 800c636:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c63a:	f8d9 3000 	ldr.w	r3, [r9]
 800c63e:	fa1f fb82 	uxth.w	fp, r2
 800c642:	b29b      	uxth	r3, r3
 800c644:	fb0a 330b 	mla	r3, sl, fp, r3
 800c648:	443b      	add	r3, r7
 800c64a:	f8d9 7000 	ldr.w	r7, [r9]
 800c64e:	0c12      	lsrs	r2, r2, #16
 800c650:	0c3f      	lsrs	r7, r7, #16
 800c652:	fb0a 7202 	mla	r2, sl, r2, r7
 800c656:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c660:	4565      	cmp	r5, ip
 800c662:	f849 3b04 	str.w	r3, [r9], #4
 800c666:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c66a:	d8e4      	bhi.n	800c636 <__multiply+0xaa>
 800c66c:	9b01      	ldr	r3, [sp, #4]
 800c66e:	50e7      	str	r7, [r4, r3]
 800c670:	9b03      	ldr	r3, [sp, #12]
 800c672:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c676:	3104      	adds	r1, #4
 800c678:	f1b9 0f00 	cmp.w	r9, #0
 800c67c:	d020      	beq.n	800c6c0 <__multiply+0x134>
 800c67e:	6823      	ldr	r3, [r4, #0]
 800c680:	4647      	mov	r7, r8
 800c682:	46a4      	mov	ip, r4
 800c684:	f04f 0a00 	mov.w	sl, #0
 800c688:	f8b7 b000 	ldrh.w	fp, [r7]
 800c68c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c690:	fb09 220b 	mla	r2, r9, fp, r2
 800c694:	4452      	add	r2, sl
 800c696:	b29b      	uxth	r3, r3
 800c698:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c69c:	f84c 3b04 	str.w	r3, [ip], #4
 800c6a0:	f857 3b04 	ldr.w	r3, [r7], #4
 800c6a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c6a8:	f8bc 3000 	ldrh.w	r3, [ip]
 800c6ac:	fb09 330a 	mla	r3, r9, sl, r3
 800c6b0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c6b4:	42bd      	cmp	r5, r7
 800c6b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c6ba:	d8e5      	bhi.n	800c688 <__multiply+0xfc>
 800c6bc:	9a01      	ldr	r2, [sp, #4]
 800c6be:	50a3      	str	r3, [r4, r2]
 800c6c0:	3404      	adds	r4, #4
 800c6c2:	e79f      	b.n	800c604 <__multiply+0x78>
 800c6c4:	3e01      	subs	r6, #1
 800c6c6:	e7a1      	b.n	800c60c <__multiply+0x80>
 800c6c8:	08019300 	.word	0x08019300
 800c6cc:	08019311 	.word	0x08019311

0800c6d0 <__pow5mult>:
 800c6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6d4:	4615      	mov	r5, r2
 800c6d6:	f012 0203 	ands.w	r2, r2, #3
 800c6da:	4607      	mov	r7, r0
 800c6dc:	460e      	mov	r6, r1
 800c6de:	d007      	beq.n	800c6f0 <__pow5mult+0x20>
 800c6e0:	4c25      	ldr	r4, [pc, #148]	@ (800c778 <__pow5mult+0xa8>)
 800c6e2:	3a01      	subs	r2, #1
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c6ea:	f7ff fea7 	bl	800c43c <__multadd>
 800c6ee:	4606      	mov	r6, r0
 800c6f0:	10ad      	asrs	r5, r5, #2
 800c6f2:	d03d      	beq.n	800c770 <__pow5mult+0xa0>
 800c6f4:	69fc      	ldr	r4, [r7, #28]
 800c6f6:	b97c      	cbnz	r4, 800c718 <__pow5mult+0x48>
 800c6f8:	2010      	movs	r0, #16
 800c6fa:	f7ff fd87 	bl	800c20c <malloc>
 800c6fe:	4602      	mov	r2, r0
 800c700:	61f8      	str	r0, [r7, #28]
 800c702:	b928      	cbnz	r0, 800c710 <__pow5mult+0x40>
 800c704:	4b1d      	ldr	r3, [pc, #116]	@ (800c77c <__pow5mult+0xac>)
 800c706:	481e      	ldr	r0, [pc, #120]	@ (800c780 <__pow5mult+0xb0>)
 800c708:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c70c:	f000 fbea 	bl	800cee4 <__assert_func>
 800c710:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c714:	6004      	str	r4, [r0, #0]
 800c716:	60c4      	str	r4, [r0, #12]
 800c718:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c71c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c720:	b94c      	cbnz	r4, 800c736 <__pow5mult+0x66>
 800c722:	f240 2171 	movw	r1, #625	@ 0x271
 800c726:	4638      	mov	r0, r7
 800c728:	f7ff ff1a 	bl	800c560 <__i2b>
 800c72c:	2300      	movs	r3, #0
 800c72e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c732:	4604      	mov	r4, r0
 800c734:	6003      	str	r3, [r0, #0]
 800c736:	f04f 0900 	mov.w	r9, #0
 800c73a:	07eb      	lsls	r3, r5, #31
 800c73c:	d50a      	bpl.n	800c754 <__pow5mult+0x84>
 800c73e:	4631      	mov	r1, r6
 800c740:	4622      	mov	r2, r4
 800c742:	4638      	mov	r0, r7
 800c744:	f7ff ff22 	bl	800c58c <__multiply>
 800c748:	4631      	mov	r1, r6
 800c74a:	4680      	mov	r8, r0
 800c74c:	4638      	mov	r0, r7
 800c74e:	f7ff fe53 	bl	800c3f8 <_Bfree>
 800c752:	4646      	mov	r6, r8
 800c754:	106d      	asrs	r5, r5, #1
 800c756:	d00b      	beq.n	800c770 <__pow5mult+0xa0>
 800c758:	6820      	ldr	r0, [r4, #0]
 800c75a:	b938      	cbnz	r0, 800c76c <__pow5mult+0x9c>
 800c75c:	4622      	mov	r2, r4
 800c75e:	4621      	mov	r1, r4
 800c760:	4638      	mov	r0, r7
 800c762:	f7ff ff13 	bl	800c58c <__multiply>
 800c766:	6020      	str	r0, [r4, #0]
 800c768:	f8c0 9000 	str.w	r9, [r0]
 800c76c:	4604      	mov	r4, r0
 800c76e:	e7e4      	b.n	800c73a <__pow5mult+0x6a>
 800c770:	4630      	mov	r0, r6
 800c772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c776:	bf00      	nop
 800c778:	080193c4 	.word	0x080193c4
 800c77c:	08019291 	.word	0x08019291
 800c780:	08019311 	.word	0x08019311

0800c784 <__lshift>:
 800c784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c788:	460c      	mov	r4, r1
 800c78a:	6849      	ldr	r1, [r1, #4]
 800c78c:	6923      	ldr	r3, [r4, #16]
 800c78e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c792:	68a3      	ldr	r3, [r4, #8]
 800c794:	4607      	mov	r7, r0
 800c796:	4691      	mov	r9, r2
 800c798:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c79c:	f108 0601 	add.w	r6, r8, #1
 800c7a0:	42b3      	cmp	r3, r6
 800c7a2:	db0b      	blt.n	800c7bc <__lshift+0x38>
 800c7a4:	4638      	mov	r0, r7
 800c7a6:	f7ff fde7 	bl	800c378 <_Balloc>
 800c7aa:	4605      	mov	r5, r0
 800c7ac:	b948      	cbnz	r0, 800c7c2 <__lshift+0x3e>
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	4b28      	ldr	r3, [pc, #160]	@ (800c854 <__lshift+0xd0>)
 800c7b2:	4829      	ldr	r0, [pc, #164]	@ (800c858 <__lshift+0xd4>)
 800c7b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c7b8:	f000 fb94 	bl	800cee4 <__assert_func>
 800c7bc:	3101      	adds	r1, #1
 800c7be:	005b      	lsls	r3, r3, #1
 800c7c0:	e7ee      	b.n	800c7a0 <__lshift+0x1c>
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	f100 0114 	add.w	r1, r0, #20
 800c7c8:	f100 0210 	add.w	r2, r0, #16
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	4553      	cmp	r3, sl
 800c7d0:	db33      	blt.n	800c83a <__lshift+0xb6>
 800c7d2:	6920      	ldr	r0, [r4, #16]
 800c7d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7d8:	f104 0314 	add.w	r3, r4, #20
 800c7dc:	f019 091f 	ands.w	r9, r9, #31
 800c7e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c7e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c7e8:	d02b      	beq.n	800c842 <__lshift+0xbe>
 800c7ea:	f1c9 0e20 	rsb	lr, r9, #32
 800c7ee:	468a      	mov	sl, r1
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	6818      	ldr	r0, [r3, #0]
 800c7f4:	fa00 f009 	lsl.w	r0, r0, r9
 800c7f8:	4310      	orrs	r0, r2
 800c7fa:	f84a 0b04 	str.w	r0, [sl], #4
 800c7fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c802:	459c      	cmp	ip, r3
 800c804:	fa22 f20e 	lsr.w	r2, r2, lr
 800c808:	d8f3      	bhi.n	800c7f2 <__lshift+0x6e>
 800c80a:	ebac 0304 	sub.w	r3, ip, r4
 800c80e:	3b15      	subs	r3, #21
 800c810:	f023 0303 	bic.w	r3, r3, #3
 800c814:	3304      	adds	r3, #4
 800c816:	f104 0015 	add.w	r0, r4, #21
 800c81a:	4560      	cmp	r0, ip
 800c81c:	bf88      	it	hi
 800c81e:	2304      	movhi	r3, #4
 800c820:	50ca      	str	r2, [r1, r3]
 800c822:	b10a      	cbz	r2, 800c828 <__lshift+0xa4>
 800c824:	f108 0602 	add.w	r6, r8, #2
 800c828:	3e01      	subs	r6, #1
 800c82a:	4638      	mov	r0, r7
 800c82c:	612e      	str	r6, [r5, #16]
 800c82e:	4621      	mov	r1, r4
 800c830:	f7ff fde2 	bl	800c3f8 <_Bfree>
 800c834:	4628      	mov	r0, r5
 800c836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c83a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c83e:	3301      	adds	r3, #1
 800c840:	e7c5      	b.n	800c7ce <__lshift+0x4a>
 800c842:	3904      	subs	r1, #4
 800c844:	f853 2b04 	ldr.w	r2, [r3], #4
 800c848:	f841 2f04 	str.w	r2, [r1, #4]!
 800c84c:	459c      	cmp	ip, r3
 800c84e:	d8f9      	bhi.n	800c844 <__lshift+0xc0>
 800c850:	e7ea      	b.n	800c828 <__lshift+0xa4>
 800c852:	bf00      	nop
 800c854:	08019300 	.word	0x08019300
 800c858:	08019311 	.word	0x08019311

0800c85c <__mcmp>:
 800c85c:	690a      	ldr	r2, [r1, #16]
 800c85e:	4603      	mov	r3, r0
 800c860:	6900      	ldr	r0, [r0, #16]
 800c862:	1a80      	subs	r0, r0, r2
 800c864:	b530      	push	{r4, r5, lr}
 800c866:	d10e      	bne.n	800c886 <__mcmp+0x2a>
 800c868:	3314      	adds	r3, #20
 800c86a:	3114      	adds	r1, #20
 800c86c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c870:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c874:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c878:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c87c:	4295      	cmp	r5, r2
 800c87e:	d003      	beq.n	800c888 <__mcmp+0x2c>
 800c880:	d205      	bcs.n	800c88e <__mcmp+0x32>
 800c882:	f04f 30ff 	mov.w	r0, #4294967295
 800c886:	bd30      	pop	{r4, r5, pc}
 800c888:	42a3      	cmp	r3, r4
 800c88a:	d3f3      	bcc.n	800c874 <__mcmp+0x18>
 800c88c:	e7fb      	b.n	800c886 <__mcmp+0x2a>
 800c88e:	2001      	movs	r0, #1
 800c890:	e7f9      	b.n	800c886 <__mcmp+0x2a>
	...

0800c894 <__mdiff>:
 800c894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c898:	4689      	mov	r9, r1
 800c89a:	4606      	mov	r6, r0
 800c89c:	4611      	mov	r1, r2
 800c89e:	4648      	mov	r0, r9
 800c8a0:	4614      	mov	r4, r2
 800c8a2:	f7ff ffdb 	bl	800c85c <__mcmp>
 800c8a6:	1e05      	subs	r5, r0, #0
 800c8a8:	d112      	bne.n	800c8d0 <__mdiff+0x3c>
 800c8aa:	4629      	mov	r1, r5
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	f7ff fd63 	bl	800c378 <_Balloc>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	b928      	cbnz	r0, 800c8c2 <__mdiff+0x2e>
 800c8b6:	4b3f      	ldr	r3, [pc, #252]	@ (800c9b4 <__mdiff+0x120>)
 800c8b8:	f240 2137 	movw	r1, #567	@ 0x237
 800c8bc:	483e      	ldr	r0, [pc, #248]	@ (800c9b8 <__mdiff+0x124>)
 800c8be:	f000 fb11 	bl	800cee4 <__assert_func>
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c8c8:	4610      	mov	r0, r2
 800c8ca:	b003      	add	sp, #12
 800c8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8d0:	bfbc      	itt	lt
 800c8d2:	464b      	movlt	r3, r9
 800c8d4:	46a1      	movlt	r9, r4
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c8dc:	bfba      	itte	lt
 800c8de:	461c      	movlt	r4, r3
 800c8e0:	2501      	movlt	r5, #1
 800c8e2:	2500      	movge	r5, #0
 800c8e4:	f7ff fd48 	bl	800c378 <_Balloc>
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	b918      	cbnz	r0, 800c8f4 <__mdiff+0x60>
 800c8ec:	4b31      	ldr	r3, [pc, #196]	@ (800c9b4 <__mdiff+0x120>)
 800c8ee:	f240 2145 	movw	r1, #581	@ 0x245
 800c8f2:	e7e3      	b.n	800c8bc <__mdiff+0x28>
 800c8f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c8f8:	6926      	ldr	r6, [r4, #16]
 800c8fa:	60c5      	str	r5, [r0, #12]
 800c8fc:	f109 0310 	add.w	r3, r9, #16
 800c900:	f109 0514 	add.w	r5, r9, #20
 800c904:	f104 0e14 	add.w	lr, r4, #20
 800c908:	f100 0b14 	add.w	fp, r0, #20
 800c90c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c910:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c914:	9301      	str	r3, [sp, #4]
 800c916:	46d9      	mov	r9, fp
 800c918:	f04f 0c00 	mov.w	ip, #0
 800c91c:	9b01      	ldr	r3, [sp, #4]
 800c91e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c922:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c926:	9301      	str	r3, [sp, #4]
 800c928:	fa1f f38a 	uxth.w	r3, sl
 800c92c:	4619      	mov	r1, r3
 800c92e:	b283      	uxth	r3, r0
 800c930:	1acb      	subs	r3, r1, r3
 800c932:	0c00      	lsrs	r0, r0, #16
 800c934:	4463      	add	r3, ip
 800c936:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c93a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c93e:	b29b      	uxth	r3, r3
 800c940:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c944:	4576      	cmp	r6, lr
 800c946:	f849 3b04 	str.w	r3, [r9], #4
 800c94a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c94e:	d8e5      	bhi.n	800c91c <__mdiff+0x88>
 800c950:	1b33      	subs	r3, r6, r4
 800c952:	3b15      	subs	r3, #21
 800c954:	f023 0303 	bic.w	r3, r3, #3
 800c958:	3415      	adds	r4, #21
 800c95a:	3304      	adds	r3, #4
 800c95c:	42a6      	cmp	r6, r4
 800c95e:	bf38      	it	cc
 800c960:	2304      	movcc	r3, #4
 800c962:	441d      	add	r5, r3
 800c964:	445b      	add	r3, fp
 800c966:	461e      	mov	r6, r3
 800c968:	462c      	mov	r4, r5
 800c96a:	4544      	cmp	r4, r8
 800c96c:	d30e      	bcc.n	800c98c <__mdiff+0xf8>
 800c96e:	f108 0103 	add.w	r1, r8, #3
 800c972:	1b49      	subs	r1, r1, r5
 800c974:	f021 0103 	bic.w	r1, r1, #3
 800c978:	3d03      	subs	r5, #3
 800c97a:	45a8      	cmp	r8, r5
 800c97c:	bf38      	it	cc
 800c97e:	2100      	movcc	r1, #0
 800c980:	440b      	add	r3, r1
 800c982:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c986:	b191      	cbz	r1, 800c9ae <__mdiff+0x11a>
 800c988:	6117      	str	r7, [r2, #16]
 800c98a:	e79d      	b.n	800c8c8 <__mdiff+0x34>
 800c98c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c990:	46e6      	mov	lr, ip
 800c992:	0c08      	lsrs	r0, r1, #16
 800c994:	fa1c fc81 	uxtah	ip, ip, r1
 800c998:	4471      	add	r1, lr
 800c99a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c99e:	b289      	uxth	r1, r1
 800c9a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c9a4:	f846 1b04 	str.w	r1, [r6], #4
 800c9a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c9ac:	e7dd      	b.n	800c96a <__mdiff+0xd6>
 800c9ae:	3f01      	subs	r7, #1
 800c9b0:	e7e7      	b.n	800c982 <__mdiff+0xee>
 800c9b2:	bf00      	nop
 800c9b4:	08019300 	.word	0x08019300
 800c9b8:	08019311 	.word	0x08019311

0800c9bc <__d2b>:
 800c9bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c9c0:	460f      	mov	r7, r1
 800c9c2:	2101      	movs	r1, #1
 800c9c4:	ec59 8b10 	vmov	r8, r9, d0
 800c9c8:	4616      	mov	r6, r2
 800c9ca:	f7ff fcd5 	bl	800c378 <_Balloc>
 800c9ce:	4604      	mov	r4, r0
 800c9d0:	b930      	cbnz	r0, 800c9e0 <__d2b+0x24>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	4b23      	ldr	r3, [pc, #140]	@ (800ca64 <__d2b+0xa8>)
 800c9d6:	4824      	ldr	r0, [pc, #144]	@ (800ca68 <__d2b+0xac>)
 800c9d8:	f240 310f 	movw	r1, #783	@ 0x30f
 800c9dc:	f000 fa82 	bl	800cee4 <__assert_func>
 800c9e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c9e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9e8:	b10d      	cbz	r5, 800c9ee <__d2b+0x32>
 800c9ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c9ee:	9301      	str	r3, [sp, #4]
 800c9f0:	f1b8 0300 	subs.w	r3, r8, #0
 800c9f4:	d023      	beq.n	800ca3e <__d2b+0x82>
 800c9f6:	4668      	mov	r0, sp
 800c9f8:	9300      	str	r3, [sp, #0]
 800c9fa:	f7ff fd84 	bl	800c506 <__lo0bits>
 800c9fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ca02:	b1d0      	cbz	r0, 800ca3a <__d2b+0x7e>
 800ca04:	f1c0 0320 	rsb	r3, r0, #32
 800ca08:	fa02 f303 	lsl.w	r3, r2, r3
 800ca0c:	430b      	orrs	r3, r1
 800ca0e:	40c2      	lsrs	r2, r0
 800ca10:	6163      	str	r3, [r4, #20]
 800ca12:	9201      	str	r2, [sp, #4]
 800ca14:	9b01      	ldr	r3, [sp, #4]
 800ca16:	61a3      	str	r3, [r4, #24]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	bf0c      	ite	eq
 800ca1c:	2201      	moveq	r2, #1
 800ca1e:	2202      	movne	r2, #2
 800ca20:	6122      	str	r2, [r4, #16]
 800ca22:	b1a5      	cbz	r5, 800ca4e <__d2b+0x92>
 800ca24:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ca28:	4405      	add	r5, r0
 800ca2a:	603d      	str	r5, [r7, #0]
 800ca2c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ca30:	6030      	str	r0, [r6, #0]
 800ca32:	4620      	mov	r0, r4
 800ca34:	b003      	add	sp, #12
 800ca36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca3a:	6161      	str	r1, [r4, #20]
 800ca3c:	e7ea      	b.n	800ca14 <__d2b+0x58>
 800ca3e:	a801      	add	r0, sp, #4
 800ca40:	f7ff fd61 	bl	800c506 <__lo0bits>
 800ca44:	9b01      	ldr	r3, [sp, #4]
 800ca46:	6163      	str	r3, [r4, #20]
 800ca48:	3020      	adds	r0, #32
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	e7e8      	b.n	800ca20 <__d2b+0x64>
 800ca4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ca56:	6038      	str	r0, [r7, #0]
 800ca58:	6918      	ldr	r0, [r3, #16]
 800ca5a:	f7ff fd35 	bl	800c4c8 <__hi0bits>
 800ca5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca62:	e7e5      	b.n	800ca30 <__d2b+0x74>
 800ca64:	08019300 	.word	0x08019300
 800ca68:	08019311 	.word	0x08019311

0800ca6c <__ssputs_r>:
 800ca6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca70:	688e      	ldr	r6, [r1, #8]
 800ca72:	461f      	mov	r7, r3
 800ca74:	42be      	cmp	r6, r7
 800ca76:	680b      	ldr	r3, [r1, #0]
 800ca78:	4682      	mov	sl, r0
 800ca7a:	460c      	mov	r4, r1
 800ca7c:	4690      	mov	r8, r2
 800ca7e:	d82d      	bhi.n	800cadc <__ssputs_r+0x70>
 800ca80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ca88:	d026      	beq.n	800cad8 <__ssputs_r+0x6c>
 800ca8a:	6965      	ldr	r5, [r4, #20]
 800ca8c:	6909      	ldr	r1, [r1, #16]
 800ca8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca92:	eba3 0901 	sub.w	r9, r3, r1
 800ca96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca9a:	1c7b      	adds	r3, r7, #1
 800ca9c:	444b      	add	r3, r9
 800ca9e:	106d      	asrs	r5, r5, #1
 800caa0:	429d      	cmp	r5, r3
 800caa2:	bf38      	it	cc
 800caa4:	461d      	movcc	r5, r3
 800caa6:	0553      	lsls	r3, r2, #21
 800caa8:	d527      	bpl.n	800cafa <__ssputs_r+0x8e>
 800caaa:	4629      	mov	r1, r5
 800caac:	f7ff fbd8 	bl	800c260 <_malloc_r>
 800cab0:	4606      	mov	r6, r0
 800cab2:	b360      	cbz	r0, 800cb0e <__ssputs_r+0xa2>
 800cab4:	6921      	ldr	r1, [r4, #16]
 800cab6:	464a      	mov	r2, r9
 800cab8:	f000 fa06 	bl	800cec8 <memcpy>
 800cabc:	89a3      	ldrh	r3, [r4, #12]
 800cabe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cac6:	81a3      	strh	r3, [r4, #12]
 800cac8:	6126      	str	r6, [r4, #16]
 800caca:	6165      	str	r5, [r4, #20]
 800cacc:	444e      	add	r6, r9
 800cace:	eba5 0509 	sub.w	r5, r5, r9
 800cad2:	6026      	str	r6, [r4, #0]
 800cad4:	60a5      	str	r5, [r4, #8]
 800cad6:	463e      	mov	r6, r7
 800cad8:	42be      	cmp	r6, r7
 800cada:	d900      	bls.n	800cade <__ssputs_r+0x72>
 800cadc:	463e      	mov	r6, r7
 800cade:	6820      	ldr	r0, [r4, #0]
 800cae0:	4632      	mov	r2, r6
 800cae2:	4641      	mov	r1, r8
 800cae4:	f000 f9c6 	bl	800ce74 <memmove>
 800cae8:	68a3      	ldr	r3, [r4, #8]
 800caea:	1b9b      	subs	r3, r3, r6
 800caec:	60a3      	str	r3, [r4, #8]
 800caee:	6823      	ldr	r3, [r4, #0]
 800caf0:	4433      	add	r3, r6
 800caf2:	6023      	str	r3, [r4, #0]
 800caf4:	2000      	movs	r0, #0
 800caf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cafa:	462a      	mov	r2, r5
 800cafc:	f000 fa36 	bl	800cf6c <_realloc_r>
 800cb00:	4606      	mov	r6, r0
 800cb02:	2800      	cmp	r0, #0
 800cb04:	d1e0      	bne.n	800cac8 <__ssputs_r+0x5c>
 800cb06:	6921      	ldr	r1, [r4, #16]
 800cb08:	4650      	mov	r0, sl
 800cb0a:	f7ff fb35 	bl	800c178 <_free_r>
 800cb0e:	230c      	movs	r3, #12
 800cb10:	f8ca 3000 	str.w	r3, [sl]
 800cb14:	89a3      	ldrh	r3, [r4, #12]
 800cb16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb1a:	81a3      	strh	r3, [r4, #12]
 800cb1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb20:	e7e9      	b.n	800caf6 <__ssputs_r+0x8a>
	...

0800cb24 <_svfiprintf_r>:
 800cb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb28:	4698      	mov	r8, r3
 800cb2a:	898b      	ldrh	r3, [r1, #12]
 800cb2c:	061b      	lsls	r3, r3, #24
 800cb2e:	b09d      	sub	sp, #116	@ 0x74
 800cb30:	4607      	mov	r7, r0
 800cb32:	460d      	mov	r5, r1
 800cb34:	4614      	mov	r4, r2
 800cb36:	d510      	bpl.n	800cb5a <_svfiprintf_r+0x36>
 800cb38:	690b      	ldr	r3, [r1, #16]
 800cb3a:	b973      	cbnz	r3, 800cb5a <_svfiprintf_r+0x36>
 800cb3c:	2140      	movs	r1, #64	@ 0x40
 800cb3e:	f7ff fb8f 	bl	800c260 <_malloc_r>
 800cb42:	6028      	str	r0, [r5, #0]
 800cb44:	6128      	str	r0, [r5, #16]
 800cb46:	b930      	cbnz	r0, 800cb56 <_svfiprintf_r+0x32>
 800cb48:	230c      	movs	r3, #12
 800cb4a:	603b      	str	r3, [r7, #0]
 800cb4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb50:	b01d      	add	sp, #116	@ 0x74
 800cb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb56:	2340      	movs	r3, #64	@ 0x40
 800cb58:	616b      	str	r3, [r5, #20]
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb5e:	2320      	movs	r3, #32
 800cb60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cb64:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb68:	2330      	movs	r3, #48	@ 0x30
 800cb6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cd08 <_svfiprintf_r+0x1e4>
 800cb6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb72:	f04f 0901 	mov.w	r9, #1
 800cb76:	4623      	mov	r3, r4
 800cb78:	469a      	mov	sl, r3
 800cb7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb7e:	b10a      	cbz	r2, 800cb84 <_svfiprintf_r+0x60>
 800cb80:	2a25      	cmp	r2, #37	@ 0x25
 800cb82:	d1f9      	bne.n	800cb78 <_svfiprintf_r+0x54>
 800cb84:	ebba 0b04 	subs.w	fp, sl, r4
 800cb88:	d00b      	beq.n	800cba2 <_svfiprintf_r+0x7e>
 800cb8a:	465b      	mov	r3, fp
 800cb8c:	4622      	mov	r2, r4
 800cb8e:	4629      	mov	r1, r5
 800cb90:	4638      	mov	r0, r7
 800cb92:	f7ff ff6b 	bl	800ca6c <__ssputs_r>
 800cb96:	3001      	adds	r0, #1
 800cb98:	f000 80a7 	beq.w	800ccea <_svfiprintf_r+0x1c6>
 800cb9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb9e:	445a      	add	r2, fp
 800cba0:	9209      	str	r2, [sp, #36]	@ 0x24
 800cba2:	f89a 3000 	ldrb.w	r3, [sl]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	f000 809f 	beq.w	800ccea <_svfiprintf_r+0x1c6>
 800cbac:	2300      	movs	r3, #0
 800cbae:	f04f 32ff 	mov.w	r2, #4294967295
 800cbb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbb6:	f10a 0a01 	add.w	sl, sl, #1
 800cbba:	9304      	str	r3, [sp, #16]
 800cbbc:	9307      	str	r3, [sp, #28]
 800cbbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cbc2:	931a      	str	r3, [sp, #104]	@ 0x68
 800cbc4:	4654      	mov	r4, sl
 800cbc6:	2205      	movs	r2, #5
 800cbc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbcc:	484e      	ldr	r0, [pc, #312]	@ (800cd08 <_svfiprintf_r+0x1e4>)
 800cbce:	f7f3 fb0f 	bl	80001f0 <memchr>
 800cbd2:	9a04      	ldr	r2, [sp, #16]
 800cbd4:	b9d8      	cbnz	r0, 800cc0e <_svfiprintf_r+0xea>
 800cbd6:	06d0      	lsls	r0, r2, #27
 800cbd8:	bf44      	itt	mi
 800cbda:	2320      	movmi	r3, #32
 800cbdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbe0:	0711      	lsls	r1, r2, #28
 800cbe2:	bf44      	itt	mi
 800cbe4:	232b      	movmi	r3, #43	@ 0x2b
 800cbe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbea:	f89a 3000 	ldrb.w	r3, [sl]
 800cbee:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbf0:	d015      	beq.n	800cc1e <_svfiprintf_r+0xfa>
 800cbf2:	9a07      	ldr	r2, [sp, #28]
 800cbf4:	4654      	mov	r4, sl
 800cbf6:	2000      	movs	r0, #0
 800cbf8:	f04f 0c0a 	mov.w	ip, #10
 800cbfc:	4621      	mov	r1, r4
 800cbfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc02:	3b30      	subs	r3, #48	@ 0x30
 800cc04:	2b09      	cmp	r3, #9
 800cc06:	d94b      	bls.n	800cca0 <_svfiprintf_r+0x17c>
 800cc08:	b1b0      	cbz	r0, 800cc38 <_svfiprintf_r+0x114>
 800cc0a:	9207      	str	r2, [sp, #28]
 800cc0c:	e014      	b.n	800cc38 <_svfiprintf_r+0x114>
 800cc0e:	eba0 0308 	sub.w	r3, r0, r8
 800cc12:	fa09 f303 	lsl.w	r3, r9, r3
 800cc16:	4313      	orrs	r3, r2
 800cc18:	9304      	str	r3, [sp, #16]
 800cc1a:	46a2      	mov	sl, r4
 800cc1c:	e7d2      	b.n	800cbc4 <_svfiprintf_r+0xa0>
 800cc1e:	9b03      	ldr	r3, [sp, #12]
 800cc20:	1d19      	adds	r1, r3, #4
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	9103      	str	r1, [sp, #12]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	bfbb      	ittet	lt
 800cc2a:	425b      	neglt	r3, r3
 800cc2c:	f042 0202 	orrlt.w	r2, r2, #2
 800cc30:	9307      	strge	r3, [sp, #28]
 800cc32:	9307      	strlt	r3, [sp, #28]
 800cc34:	bfb8      	it	lt
 800cc36:	9204      	strlt	r2, [sp, #16]
 800cc38:	7823      	ldrb	r3, [r4, #0]
 800cc3a:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc3c:	d10a      	bne.n	800cc54 <_svfiprintf_r+0x130>
 800cc3e:	7863      	ldrb	r3, [r4, #1]
 800cc40:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc42:	d132      	bne.n	800ccaa <_svfiprintf_r+0x186>
 800cc44:	9b03      	ldr	r3, [sp, #12]
 800cc46:	1d1a      	adds	r2, r3, #4
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	9203      	str	r2, [sp, #12]
 800cc4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc50:	3402      	adds	r4, #2
 800cc52:	9305      	str	r3, [sp, #20]
 800cc54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cd18 <_svfiprintf_r+0x1f4>
 800cc58:	7821      	ldrb	r1, [r4, #0]
 800cc5a:	2203      	movs	r2, #3
 800cc5c:	4650      	mov	r0, sl
 800cc5e:	f7f3 fac7 	bl	80001f0 <memchr>
 800cc62:	b138      	cbz	r0, 800cc74 <_svfiprintf_r+0x150>
 800cc64:	9b04      	ldr	r3, [sp, #16]
 800cc66:	eba0 000a 	sub.w	r0, r0, sl
 800cc6a:	2240      	movs	r2, #64	@ 0x40
 800cc6c:	4082      	lsls	r2, r0
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	3401      	adds	r4, #1
 800cc72:	9304      	str	r3, [sp, #16]
 800cc74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc78:	4824      	ldr	r0, [pc, #144]	@ (800cd0c <_svfiprintf_r+0x1e8>)
 800cc7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc7e:	2206      	movs	r2, #6
 800cc80:	f7f3 fab6 	bl	80001f0 <memchr>
 800cc84:	2800      	cmp	r0, #0
 800cc86:	d036      	beq.n	800ccf6 <_svfiprintf_r+0x1d2>
 800cc88:	4b21      	ldr	r3, [pc, #132]	@ (800cd10 <_svfiprintf_r+0x1ec>)
 800cc8a:	bb1b      	cbnz	r3, 800ccd4 <_svfiprintf_r+0x1b0>
 800cc8c:	9b03      	ldr	r3, [sp, #12]
 800cc8e:	3307      	adds	r3, #7
 800cc90:	f023 0307 	bic.w	r3, r3, #7
 800cc94:	3308      	adds	r3, #8
 800cc96:	9303      	str	r3, [sp, #12]
 800cc98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc9a:	4433      	add	r3, r6
 800cc9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc9e:	e76a      	b.n	800cb76 <_svfiprintf_r+0x52>
 800cca0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cca4:	460c      	mov	r4, r1
 800cca6:	2001      	movs	r0, #1
 800cca8:	e7a8      	b.n	800cbfc <_svfiprintf_r+0xd8>
 800ccaa:	2300      	movs	r3, #0
 800ccac:	3401      	adds	r4, #1
 800ccae:	9305      	str	r3, [sp, #20]
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	f04f 0c0a 	mov.w	ip, #10
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccbc:	3a30      	subs	r2, #48	@ 0x30
 800ccbe:	2a09      	cmp	r2, #9
 800ccc0:	d903      	bls.n	800ccca <_svfiprintf_r+0x1a6>
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d0c6      	beq.n	800cc54 <_svfiprintf_r+0x130>
 800ccc6:	9105      	str	r1, [sp, #20]
 800ccc8:	e7c4      	b.n	800cc54 <_svfiprintf_r+0x130>
 800ccca:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccce:	4604      	mov	r4, r0
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	e7f0      	b.n	800ccb6 <_svfiprintf_r+0x192>
 800ccd4:	ab03      	add	r3, sp, #12
 800ccd6:	9300      	str	r3, [sp, #0]
 800ccd8:	462a      	mov	r2, r5
 800ccda:	4b0e      	ldr	r3, [pc, #56]	@ (800cd14 <_svfiprintf_r+0x1f0>)
 800ccdc:	a904      	add	r1, sp, #16
 800ccde:	4638      	mov	r0, r7
 800cce0:	f7fd fe62 	bl	800a9a8 <_printf_float>
 800cce4:	1c42      	adds	r2, r0, #1
 800cce6:	4606      	mov	r6, r0
 800cce8:	d1d6      	bne.n	800cc98 <_svfiprintf_r+0x174>
 800ccea:	89ab      	ldrh	r3, [r5, #12]
 800ccec:	065b      	lsls	r3, r3, #25
 800ccee:	f53f af2d 	bmi.w	800cb4c <_svfiprintf_r+0x28>
 800ccf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ccf4:	e72c      	b.n	800cb50 <_svfiprintf_r+0x2c>
 800ccf6:	ab03      	add	r3, sp, #12
 800ccf8:	9300      	str	r3, [sp, #0]
 800ccfa:	462a      	mov	r2, r5
 800ccfc:	4b05      	ldr	r3, [pc, #20]	@ (800cd14 <_svfiprintf_r+0x1f0>)
 800ccfe:	a904      	add	r1, sp, #16
 800cd00:	4638      	mov	r0, r7
 800cd02:	f7fe f8e9 	bl	800aed8 <_printf_i>
 800cd06:	e7ed      	b.n	800cce4 <_svfiprintf_r+0x1c0>
 800cd08:	0801936a 	.word	0x0801936a
 800cd0c:	08019374 	.word	0x08019374
 800cd10:	0800a9a9 	.word	0x0800a9a9
 800cd14:	0800ca6d 	.word	0x0800ca6d
 800cd18:	08019370 	.word	0x08019370

0800cd1c <__sflush_r>:
 800cd1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd24:	0716      	lsls	r6, r2, #28
 800cd26:	4605      	mov	r5, r0
 800cd28:	460c      	mov	r4, r1
 800cd2a:	d454      	bmi.n	800cdd6 <__sflush_r+0xba>
 800cd2c:	684b      	ldr	r3, [r1, #4]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	dc02      	bgt.n	800cd38 <__sflush_r+0x1c>
 800cd32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	dd48      	ble.n	800cdca <__sflush_r+0xae>
 800cd38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd3a:	2e00      	cmp	r6, #0
 800cd3c:	d045      	beq.n	800cdca <__sflush_r+0xae>
 800cd3e:	2300      	movs	r3, #0
 800cd40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cd44:	682f      	ldr	r7, [r5, #0]
 800cd46:	6a21      	ldr	r1, [r4, #32]
 800cd48:	602b      	str	r3, [r5, #0]
 800cd4a:	d030      	beq.n	800cdae <__sflush_r+0x92>
 800cd4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cd4e:	89a3      	ldrh	r3, [r4, #12]
 800cd50:	0759      	lsls	r1, r3, #29
 800cd52:	d505      	bpl.n	800cd60 <__sflush_r+0x44>
 800cd54:	6863      	ldr	r3, [r4, #4]
 800cd56:	1ad2      	subs	r2, r2, r3
 800cd58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cd5a:	b10b      	cbz	r3, 800cd60 <__sflush_r+0x44>
 800cd5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cd5e:	1ad2      	subs	r2, r2, r3
 800cd60:	2300      	movs	r3, #0
 800cd62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd64:	6a21      	ldr	r1, [r4, #32]
 800cd66:	4628      	mov	r0, r5
 800cd68:	47b0      	blx	r6
 800cd6a:	1c43      	adds	r3, r0, #1
 800cd6c:	89a3      	ldrh	r3, [r4, #12]
 800cd6e:	d106      	bne.n	800cd7e <__sflush_r+0x62>
 800cd70:	6829      	ldr	r1, [r5, #0]
 800cd72:	291d      	cmp	r1, #29
 800cd74:	d82b      	bhi.n	800cdce <__sflush_r+0xb2>
 800cd76:	4a2a      	ldr	r2, [pc, #168]	@ (800ce20 <__sflush_r+0x104>)
 800cd78:	40ca      	lsrs	r2, r1
 800cd7a:	07d6      	lsls	r6, r2, #31
 800cd7c:	d527      	bpl.n	800cdce <__sflush_r+0xb2>
 800cd7e:	2200      	movs	r2, #0
 800cd80:	6062      	str	r2, [r4, #4]
 800cd82:	04d9      	lsls	r1, r3, #19
 800cd84:	6922      	ldr	r2, [r4, #16]
 800cd86:	6022      	str	r2, [r4, #0]
 800cd88:	d504      	bpl.n	800cd94 <__sflush_r+0x78>
 800cd8a:	1c42      	adds	r2, r0, #1
 800cd8c:	d101      	bne.n	800cd92 <__sflush_r+0x76>
 800cd8e:	682b      	ldr	r3, [r5, #0]
 800cd90:	b903      	cbnz	r3, 800cd94 <__sflush_r+0x78>
 800cd92:	6560      	str	r0, [r4, #84]	@ 0x54
 800cd94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd96:	602f      	str	r7, [r5, #0]
 800cd98:	b1b9      	cbz	r1, 800cdca <__sflush_r+0xae>
 800cd9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd9e:	4299      	cmp	r1, r3
 800cda0:	d002      	beq.n	800cda8 <__sflush_r+0x8c>
 800cda2:	4628      	mov	r0, r5
 800cda4:	f7ff f9e8 	bl	800c178 <_free_r>
 800cda8:	2300      	movs	r3, #0
 800cdaa:	6363      	str	r3, [r4, #52]	@ 0x34
 800cdac:	e00d      	b.n	800cdca <__sflush_r+0xae>
 800cdae:	2301      	movs	r3, #1
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	47b0      	blx	r6
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	1c50      	adds	r0, r2, #1
 800cdb8:	d1c9      	bne.n	800cd4e <__sflush_r+0x32>
 800cdba:	682b      	ldr	r3, [r5, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d0c6      	beq.n	800cd4e <__sflush_r+0x32>
 800cdc0:	2b1d      	cmp	r3, #29
 800cdc2:	d001      	beq.n	800cdc8 <__sflush_r+0xac>
 800cdc4:	2b16      	cmp	r3, #22
 800cdc6:	d11e      	bne.n	800ce06 <__sflush_r+0xea>
 800cdc8:	602f      	str	r7, [r5, #0]
 800cdca:	2000      	movs	r0, #0
 800cdcc:	e022      	b.n	800ce14 <__sflush_r+0xf8>
 800cdce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdd2:	b21b      	sxth	r3, r3
 800cdd4:	e01b      	b.n	800ce0e <__sflush_r+0xf2>
 800cdd6:	690f      	ldr	r7, [r1, #16]
 800cdd8:	2f00      	cmp	r7, #0
 800cdda:	d0f6      	beq.n	800cdca <__sflush_r+0xae>
 800cddc:	0793      	lsls	r3, r2, #30
 800cdde:	680e      	ldr	r6, [r1, #0]
 800cde0:	bf08      	it	eq
 800cde2:	694b      	ldreq	r3, [r1, #20]
 800cde4:	600f      	str	r7, [r1, #0]
 800cde6:	bf18      	it	ne
 800cde8:	2300      	movne	r3, #0
 800cdea:	eba6 0807 	sub.w	r8, r6, r7
 800cdee:	608b      	str	r3, [r1, #8]
 800cdf0:	f1b8 0f00 	cmp.w	r8, #0
 800cdf4:	dde9      	ble.n	800cdca <__sflush_r+0xae>
 800cdf6:	6a21      	ldr	r1, [r4, #32]
 800cdf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cdfa:	4643      	mov	r3, r8
 800cdfc:	463a      	mov	r2, r7
 800cdfe:	4628      	mov	r0, r5
 800ce00:	47b0      	blx	r6
 800ce02:	2800      	cmp	r0, #0
 800ce04:	dc08      	bgt.n	800ce18 <__sflush_r+0xfc>
 800ce06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce0e:	81a3      	strh	r3, [r4, #12]
 800ce10:	f04f 30ff 	mov.w	r0, #4294967295
 800ce14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce18:	4407      	add	r7, r0
 800ce1a:	eba8 0800 	sub.w	r8, r8, r0
 800ce1e:	e7e7      	b.n	800cdf0 <__sflush_r+0xd4>
 800ce20:	20400001 	.word	0x20400001

0800ce24 <_fflush_r>:
 800ce24:	b538      	push	{r3, r4, r5, lr}
 800ce26:	690b      	ldr	r3, [r1, #16]
 800ce28:	4605      	mov	r5, r0
 800ce2a:	460c      	mov	r4, r1
 800ce2c:	b913      	cbnz	r3, 800ce34 <_fflush_r+0x10>
 800ce2e:	2500      	movs	r5, #0
 800ce30:	4628      	mov	r0, r5
 800ce32:	bd38      	pop	{r3, r4, r5, pc}
 800ce34:	b118      	cbz	r0, 800ce3e <_fflush_r+0x1a>
 800ce36:	6a03      	ldr	r3, [r0, #32]
 800ce38:	b90b      	cbnz	r3, 800ce3e <_fflush_r+0x1a>
 800ce3a:	f7fe f9f7 	bl	800b22c <__sinit>
 800ce3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d0f3      	beq.n	800ce2e <_fflush_r+0xa>
 800ce46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ce48:	07d0      	lsls	r0, r2, #31
 800ce4a:	d404      	bmi.n	800ce56 <_fflush_r+0x32>
 800ce4c:	0599      	lsls	r1, r3, #22
 800ce4e:	d402      	bmi.n	800ce56 <_fflush_r+0x32>
 800ce50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce52:	f7fe fb34 	bl	800b4be <__retarget_lock_acquire_recursive>
 800ce56:	4628      	mov	r0, r5
 800ce58:	4621      	mov	r1, r4
 800ce5a:	f7ff ff5f 	bl	800cd1c <__sflush_r>
 800ce5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce60:	07da      	lsls	r2, r3, #31
 800ce62:	4605      	mov	r5, r0
 800ce64:	d4e4      	bmi.n	800ce30 <_fflush_r+0xc>
 800ce66:	89a3      	ldrh	r3, [r4, #12]
 800ce68:	059b      	lsls	r3, r3, #22
 800ce6a:	d4e1      	bmi.n	800ce30 <_fflush_r+0xc>
 800ce6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce6e:	f7fe fb27 	bl	800b4c0 <__retarget_lock_release_recursive>
 800ce72:	e7dd      	b.n	800ce30 <_fflush_r+0xc>

0800ce74 <memmove>:
 800ce74:	4288      	cmp	r0, r1
 800ce76:	b510      	push	{r4, lr}
 800ce78:	eb01 0402 	add.w	r4, r1, r2
 800ce7c:	d902      	bls.n	800ce84 <memmove+0x10>
 800ce7e:	4284      	cmp	r4, r0
 800ce80:	4623      	mov	r3, r4
 800ce82:	d807      	bhi.n	800ce94 <memmove+0x20>
 800ce84:	1e43      	subs	r3, r0, #1
 800ce86:	42a1      	cmp	r1, r4
 800ce88:	d008      	beq.n	800ce9c <memmove+0x28>
 800ce8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce92:	e7f8      	b.n	800ce86 <memmove+0x12>
 800ce94:	4402      	add	r2, r0
 800ce96:	4601      	mov	r1, r0
 800ce98:	428a      	cmp	r2, r1
 800ce9a:	d100      	bne.n	800ce9e <memmove+0x2a>
 800ce9c:	bd10      	pop	{r4, pc}
 800ce9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cea2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cea6:	e7f7      	b.n	800ce98 <memmove+0x24>

0800cea8 <_sbrk_r>:
 800cea8:	b538      	push	{r3, r4, r5, lr}
 800ceaa:	4d06      	ldr	r5, [pc, #24]	@ (800cec4 <_sbrk_r+0x1c>)
 800ceac:	2300      	movs	r3, #0
 800ceae:	4604      	mov	r4, r0
 800ceb0:	4608      	mov	r0, r1
 800ceb2:	602b      	str	r3, [r5, #0]
 800ceb4:	f000 fb9c 	bl	800d5f0 <_sbrk>
 800ceb8:	1c43      	adds	r3, r0, #1
 800ceba:	d102      	bne.n	800cec2 <_sbrk_r+0x1a>
 800cebc:	682b      	ldr	r3, [r5, #0]
 800cebe:	b103      	cbz	r3, 800cec2 <_sbrk_r+0x1a>
 800cec0:	6023      	str	r3, [r4, #0]
 800cec2:	bd38      	pop	{r3, r4, r5, pc}
 800cec4:	20000c98 	.word	0x20000c98

0800cec8 <memcpy>:
 800cec8:	440a      	add	r2, r1
 800ceca:	4291      	cmp	r1, r2
 800cecc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ced0:	d100      	bne.n	800ced4 <memcpy+0xc>
 800ced2:	4770      	bx	lr
 800ced4:	b510      	push	{r4, lr}
 800ced6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ceda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cede:	4291      	cmp	r1, r2
 800cee0:	d1f9      	bne.n	800ced6 <memcpy+0xe>
 800cee2:	bd10      	pop	{r4, pc}

0800cee4 <__assert_func>:
 800cee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cee6:	4614      	mov	r4, r2
 800cee8:	461a      	mov	r2, r3
 800ceea:	4b09      	ldr	r3, [pc, #36]	@ (800cf10 <__assert_func+0x2c>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4605      	mov	r5, r0
 800cef0:	68d8      	ldr	r0, [r3, #12]
 800cef2:	b14c      	cbz	r4, 800cf08 <__assert_func+0x24>
 800cef4:	4b07      	ldr	r3, [pc, #28]	@ (800cf14 <__assert_func+0x30>)
 800cef6:	9100      	str	r1, [sp, #0]
 800cef8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cefc:	4906      	ldr	r1, [pc, #24]	@ (800cf18 <__assert_func+0x34>)
 800cefe:	462b      	mov	r3, r5
 800cf00:	f000 f870 	bl	800cfe4 <fiprintf>
 800cf04:	f000 f880 	bl	800d008 <abort>
 800cf08:	4b04      	ldr	r3, [pc, #16]	@ (800cf1c <__assert_func+0x38>)
 800cf0a:	461c      	mov	r4, r3
 800cf0c:	e7f3      	b.n	800cef6 <__assert_func+0x12>
 800cf0e:	bf00      	nop
 800cf10:	200001a4 	.word	0x200001a4
 800cf14:	08019385 	.word	0x08019385
 800cf18:	08019392 	.word	0x08019392
 800cf1c:	080193c0 	.word	0x080193c0

0800cf20 <_calloc_r>:
 800cf20:	b570      	push	{r4, r5, r6, lr}
 800cf22:	fba1 5402 	umull	r5, r4, r1, r2
 800cf26:	b934      	cbnz	r4, 800cf36 <_calloc_r+0x16>
 800cf28:	4629      	mov	r1, r5
 800cf2a:	f7ff f999 	bl	800c260 <_malloc_r>
 800cf2e:	4606      	mov	r6, r0
 800cf30:	b928      	cbnz	r0, 800cf3e <_calloc_r+0x1e>
 800cf32:	4630      	mov	r0, r6
 800cf34:	bd70      	pop	{r4, r5, r6, pc}
 800cf36:	220c      	movs	r2, #12
 800cf38:	6002      	str	r2, [r0, #0]
 800cf3a:	2600      	movs	r6, #0
 800cf3c:	e7f9      	b.n	800cf32 <_calloc_r+0x12>
 800cf3e:	462a      	mov	r2, r5
 800cf40:	4621      	mov	r1, r4
 800cf42:	f7fe fa44 	bl	800b3ce <memset>
 800cf46:	e7f4      	b.n	800cf32 <_calloc_r+0x12>

0800cf48 <__ascii_mbtowc>:
 800cf48:	b082      	sub	sp, #8
 800cf4a:	b901      	cbnz	r1, 800cf4e <__ascii_mbtowc+0x6>
 800cf4c:	a901      	add	r1, sp, #4
 800cf4e:	b142      	cbz	r2, 800cf62 <__ascii_mbtowc+0x1a>
 800cf50:	b14b      	cbz	r3, 800cf66 <__ascii_mbtowc+0x1e>
 800cf52:	7813      	ldrb	r3, [r2, #0]
 800cf54:	600b      	str	r3, [r1, #0]
 800cf56:	7812      	ldrb	r2, [r2, #0]
 800cf58:	1e10      	subs	r0, r2, #0
 800cf5a:	bf18      	it	ne
 800cf5c:	2001      	movne	r0, #1
 800cf5e:	b002      	add	sp, #8
 800cf60:	4770      	bx	lr
 800cf62:	4610      	mov	r0, r2
 800cf64:	e7fb      	b.n	800cf5e <__ascii_mbtowc+0x16>
 800cf66:	f06f 0001 	mvn.w	r0, #1
 800cf6a:	e7f8      	b.n	800cf5e <__ascii_mbtowc+0x16>

0800cf6c <_realloc_r>:
 800cf6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf70:	4607      	mov	r7, r0
 800cf72:	4614      	mov	r4, r2
 800cf74:	460d      	mov	r5, r1
 800cf76:	b921      	cbnz	r1, 800cf82 <_realloc_r+0x16>
 800cf78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf7c:	4611      	mov	r1, r2
 800cf7e:	f7ff b96f 	b.w	800c260 <_malloc_r>
 800cf82:	b92a      	cbnz	r2, 800cf90 <_realloc_r+0x24>
 800cf84:	f7ff f8f8 	bl	800c178 <_free_r>
 800cf88:	4625      	mov	r5, r4
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf90:	f000 f841 	bl	800d016 <_malloc_usable_size_r>
 800cf94:	4284      	cmp	r4, r0
 800cf96:	4606      	mov	r6, r0
 800cf98:	d802      	bhi.n	800cfa0 <_realloc_r+0x34>
 800cf9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf9e:	d8f4      	bhi.n	800cf8a <_realloc_r+0x1e>
 800cfa0:	4621      	mov	r1, r4
 800cfa2:	4638      	mov	r0, r7
 800cfa4:	f7ff f95c 	bl	800c260 <_malloc_r>
 800cfa8:	4680      	mov	r8, r0
 800cfaa:	b908      	cbnz	r0, 800cfb0 <_realloc_r+0x44>
 800cfac:	4645      	mov	r5, r8
 800cfae:	e7ec      	b.n	800cf8a <_realloc_r+0x1e>
 800cfb0:	42b4      	cmp	r4, r6
 800cfb2:	4622      	mov	r2, r4
 800cfb4:	4629      	mov	r1, r5
 800cfb6:	bf28      	it	cs
 800cfb8:	4632      	movcs	r2, r6
 800cfba:	f7ff ff85 	bl	800cec8 <memcpy>
 800cfbe:	4629      	mov	r1, r5
 800cfc0:	4638      	mov	r0, r7
 800cfc2:	f7ff f8d9 	bl	800c178 <_free_r>
 800cfc6:	e7f1      	b.n	800cfac <_realloc_r+0x40>

0800cfc8 <__ascii_wctomb>:
 800cfc8:	4603      	mov	r3, r0
 800cfca:	4608      	mov	r0, r1
 800cfcc:	b141      	cbz	r1, 800cfe0 <__ascii_wctomb+0x18>
 800cfce:	2aff      	cmp	r2, #255	@ 0xff
 800cfd0:	d904      	bls.n	800cfdc <__ascii_wctomb+0x14>
 800cfd2:	228a      	movs	r2, #138	@ 0x8a
 800cfd4:	601a      	str	r2, [r3, #0]
 800cfd6:	f04f 30ff 	mov.w	r0, #4294967295
 800cfda:	4770      	bx	lr
 800cfdc:	700a      	strb	r2, [r1, #0]
 800cfde:	2001      	movs	r0, #1
 800cfe0:	4770      	bx	lr
	...

0800cfe4 <fiprintf>:
 800cfe4:	b40e      	push	{r1, r2, r3}
 800cfe6:	b503      	push	{r0, r1, lr}
 800cfe8:	4601      	mov	r1, r0
 800cfea:	ab03      	add	r3, sp, #12
 800cfec:	4805      	ldr	r0, [pc, #20]	@ (800d004 <fiprintf+0x20>)
 800cfee:	f853 2b04 	ldr.w	r2, [r3], #4
 800cff2:	6800      	ldr	r0, [r0, #0]
 800cff4:	9301      	str	r3, [sp, #4]
 800cff6:	f000 f83f 	bl	800d078 <_vfiprintf_r>
 800cffa:	b002      	add	sp, #8
 800cffc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d000:	b003      	add	sp, #12
 800d002:	4770      	bx	lr
 800d004:	200001a4 	.word	0x200001a4

0800d008 <abort>:
 800d008:	b508      	push	{r3, lr}
 800d00a:	2006      	movs	r0, #6
 800d00c:	f000 fa08 	bl	800d420 <raise>
 800d010:	2001      	movs	r0, #1
 800d012:	f000 fafb 	bl	800d60c <_exit>

0800d016 <_malloc_usable_size_r>:
 800d016:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d01a:	1f18      	subs	r0, r3, #4
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	bfbc      	itt	lt
 800d020:	580b      	ldrlt	r3, [r1, r0]
 800d022:	18c0      	addlt	r0, r0, r3
 800d024:	4770      	bx	lr

0800d026 <__sfputc_r>:
 800d026:	6893      	ldr	r3, [r2, #8]
 800d028:	3b01      	subs	r3, #1
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	b410      	push	{r4}
 800d02e:	6093      	str	r3, [r2, #8]
 800d030:	da08      	bge.n	800d044 <__sfputc_r+0x1e>
 800d032:	6994      	ldr	r4, [r2, #24]
 800d034:	42a3      	cmp	r3, r4
 800d036:	db01      	blt.n	800d03c <__sfputc_r+0x16>
 800d038:	290a      	cmp	r1, #10
 800d03a:	d103      	bne.n	800d044 <__sfputc_r+0x1e>
 800d03c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d040:	f000 b932 	b.w	800d2a8 <__swbuf_r>
 800d044:	6813      	ldr	r3, [r2, #0]
 800d046:	1c58      	adds	r0, r3, #1
 800d048:	6010      	str	r0, [r2, #0]
 800d04a:	7019      	strb	r1, [r3, #0]
 800d04c:	4608      	mov	r0, r1
 800d04e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <__sfputs_r>:
 800d054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d056:	4606      	mov	r6, r0
 800d058:	460f      	mov	r7, r1
 800d05a:	4614      	mov	r4, r2
 800d05c:	18d5      	adds	r5, r2, r3
 800d05e:	42ac      	cmp	r4, r5
 800d060:	d101      	bne.n	800d066 <__sfputs_r+0x12>
 800d062:	2000      	movs	r0, #0
 800d064:	e007      	b.n	800d076 <__sfputs_r+0x22>
 800d066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d06a:	463a      	mov	r2, r7
 800d06c:	4630      	mov	r0, r6
 800d06e:	f7ff ffda 	bl	800d026 <__sfputc_r>
 800d072:	1c43      	adds	r3, r0, #1
 800d074:	d1f3      	bne.n	800d05e <__sfputs_r+0xa>
 800d076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d078 <_vfiprintf_r>:
 800d078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d07c:	460d      	mov	r5, r1
 800d07e:	b09d      	sub	sp, #116	@ 0x74
 800d080:	4614      	mov	r4, r2
 800d082:	4698      	mov	r8, r3
 800d084:	4606      	mov	r6, r0
 800d086:	b118      	cbz	r0, 800d090 <_vfiprintf_r+0x18>
 800d088:	6a03      	ldr	r3, [r0, #32]
 800d08a:	b90b      	cbnz	r3, 800d090 <_vfiprintf_r+0x18>
 800d08c:	f7fe f8ce 	bl	800b22c <__sinit>
 800d090:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d092:	07d9      	lsls	r1, r3, #31
 800d094:	d405      	bmi.n	800d0a2 <_vfiprintf_r+0x2a>
 800d096:	89ab      	ldrh	r3, [r5, #12]
 800d098:	059a      	lsls	r2, r3, #22
 800d09a:	d402      	bmi.n	800d0a2 <_vfiprintf_r+0x2a>
 800d09c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d09e:	f7fe fa0e 	bl	800b4be <__retarget_lock_acquire_recursive>
 800d0a2:	89ab      	ldrh	r3, [r5, #12]
 800d0a4:	071b      	lsls	r3, r3, #28
 800d0a6:	d501      	bpl.n	800d0ac <_vfiprintf_r+0x34>
 800d0a8:	692b      	ldr	r3, [r5, #16]
 800d0aa:	b99b      	cbnz	r3, 800d0d4 <_vfiprintf_r+0x5c>
 800d0ac:	4629      	mov	r1, r5
 800d0ae:	4630      	mov	r0, r6
 800d0b0:	f000 f938 	bl	800d324 <__swsetup_r>
 800d0b4:	b170      	cbz	r0, 800d0d4 <_vfiprintf_r+0x5c>
 800d0b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0b8:	07dc      	lsls	r4, r3, #31
 800d0ba:	d504      	bpl.n	800d0c6 <_vfiprintf_r+0x4e>
 800d0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c0:	b01d      	add	sp, #116	@ 0x74
 800d0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0c6:	89ab      	ldrh	r3, [r5, #12]
 800d0c8:	0598      	lsls	r0, r3, #22
 800d0ca:	d4f7      	bmi.n	800d0bc <_vfiprintf_r+0x44>
 800d0cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0ce:	f7fe f9f7 	bl	800b4c0 <__retarget_lock_release_recursive>
 800d0d2:	e7f3      	b.n	800d0bc <_vfiprintf_r+0x44>
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0d8:	2320      	movs	r3, #32
 800d0da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d0de:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0e2:	2330      	movs	r3, #48	@ 0x30
 800d0e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d294 <_vfiprintf_r+0x21c>
 800d0e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d0ec:	f04f 0901 	mov.w	r9, #1
 800d0f0:	4623      	mov	r3, r4
 800d0f2:	469a      	mov	sl, r3
 800d0f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0f8:	b10a      	cbz	r2, 800d0fe <_vfiprintf_r+0x86>
 800d0fa:	2a25      	cmp	r2, #37	@ 0x25
 800d0fc:	d1f9      	bne.n	800d0f2 <_vfiprintf_r+0x7a>
 800d0fe:	ebba 0b04 	subs.w	fp, sl, r4
 800d102:	d00b      	beq.n	800d11c <_vfiprintf_r+0xa4>
 800d104:	465b      	mov	r3, fp
 800d106:	4622      	mov	r2, r4
 800d108:	4629      	mov	r1, r5
 800d10a:	4630      	mov	r0, r6
 800d10c:	f7ff ffa2 	bl	800d054 <__sfputs_r>
 800d110:	3001      	adds	r0, #1
 800d112:	f000 80a7 	beq.w	800d264 <_vfiprintf_r+0x1ec>
 800d116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d118:	445a      	add	r2, fp
 800d11a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d11c:	f89a 3000 	ldrb.w	r3, [sl]
 800d120:	2b00      	cmp	r3, #0
 800d122:	f000 809f 	beq.w	800d264 <_vfiprintf_r+0x1ec>
 800d126:	2300      	movs	r3, #0
 800d128:	f04f 32ff 	mov.w	r2, #4294967295
 800d12c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d130:	f10a 0a01 	add.w	sl, sl, #1
 800d134:	9304      	str	r3, [sp, #16]
 800d136:	9307      	str	r3, [sp, #28]
 800d138:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d13c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d13e:	4654      	mov	r4, sl
 800d140:	2205      	movs	r2, #5
 800d142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d146:	4853      	ldr	r0, [pc, #332]	@ (800d294 <_vfiprintf_r+0x21c>)
 800d148:	f7f3 f852 	bl	80001f0 <memchr>
 800d14c:	9a04      	ldr	r2, [sp, #16]
 800d14e:	b9d8      	cbnz	r0, 800d188 <_vfiprintf_r+0x110>
 800d150:	06d1      	lsls	r1, r2, #27
 800d152:	bf44      	itt	mi
 800d154:	2320      	movmi	r3, #32
 800d156:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d15a:	0713      	lsls	r3, r2, #28
 800d15c:	bf44      	itt	mi
 800d15e:	232b      	movmi	r3, #43	@ 0x2b
 800d160:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d164:	f89a 3000 	ldrb.w	r3, [sl]
 800d168:	2b2a      	cmp	r3, #42	@ 0x2a
 800d16a:	d015      	beq.n	800d198 <_vfiprintf_r+0x120>
 800d16c:	9a07      	ldr	r2, [sp, #28]
 800d16e:	4654      	mov	r4, sl
 800d170:	2000      	movs	r0, #0
 800d172:	f04f 0c0a 	mov.w	ip, #10
 800d176:	4621      	mov	r1, r4
 800d178:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d17c:	3b30      	subs	r3, #48	@ 0x30
 800d17e:	2b09      	cmp	r3, #9
 800d180:	d94b      	bls.n	800d21a <_vfiprintf_r+0x1a2>
 800d182:	b1b0      	cbz	r0, 800d1b2 <_vfiprintf_r+0x13a>
 800d184:	9207      	str	r2, [sp, #28]
 800d186:	e014      	b.n	800d1b2 <_vfiprintf_r+0x13a>
 800d188:	eba0 0308 	sub.w	r3, r0, r8
 800d18c:	fa09 f303 	lsl.w	r3, r9, r3
 800d190:	4313      	orrs	r3, r2
 800d192:	9304      	str	r3, [sp, #16]
 800d194:	46a2      	mov	sl, r4
 800d196:	e7d2      	b.n	800d13e <_vfiprintf_r+0xc6>
 800d198:	9b03      	ldr	r3, [sp, #12]
 800d19a:	1d19      	adds	r1, r3, #4
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	9103      	str	r1, [sp, #12]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	bfbb      	ittet	lt
 800d1a4:	425b      	neglt	r3, r3
 800d1a6:	f042 0202 	orrlt.w	r2, r2, #2
 800d1aa:	9307      	strge	r3, [sp, #28]
 800d1ac:	9307      	strlt	r3, [sp, #28]
 800d1ae:	bfb8      	it	lt
 800d1b0:	9204      	strlt	r2, [sp, #16]
 800d1b2:	7823      	ldrb	r3, [r4, #0]
 800d1b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1b6:	d10a      	bne.n	800d1ce <_vfiprintf_r+0x156>
 800d1b8:	7863      	ldrb	r3, [r4, #1]
 800d1ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1bc:	d132      	bne.n	800d224 <_vfiprintf_r+0x1ac>
 800d1be:	9b03      	ldr	r3, [sp, #12]
 800d1c0:	1d1a      	adds	r2, r3, #4
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	9203      	str	r2, [sp, #12]
 800d1c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d1ca:	3402      	adds	r4, #2
 800d1cc:	9305      	str	r3, [sp, #20]
 800d1ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d2a4 <_vfiprintf_r+0x22c>
 800d1d2:	7821      	ldrb	r1, [r4, #0]
 800d1d4:	2203      	movs	r2, #3
 800d1d6:	4650      	mov	r0, sl
 800d1d8:	f7f3 f80a 	bl	80001f0 <memchr>
 800d1dc:	b138      	cbz	r0, 800d1ee <_vfiprintf_r+0x176>
 800d1de:	9b04      	ldr	r3, [sp, #16]
 800d1e0:	eba0 000a 	sub.w	r0, r0, sl
 800d1e4:	2240      	movs	r2, #64	@ 0x40
 800d1e6:	4082      	lsls	r2, r0
 800d1e8:	4313      	orrs	r3, r2
 800d1ea:	3401      	adds	r4, #1
 800d1ec:	9304      	str	r3, [sp, #16]
 800d1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1f2:	4829      	ldr	r0, [pc, #164]	@ (800d298 <_vfiprintf_r+0x220>)
 800d1f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d1f8:	2206      	movs	r2, #6
 800d1fa:	f7f2 fff9 	bl	80001f0 <memchr>
 800d1fe:	2800      	cmp	r0, #0
 800d200:	d03f      	beq.n	800d282 <_vfiprintf_r+0x20a>
 800d202:	4b26      	ldr	r3, [pc, #152]	@ (800d29c <_vfiprintf_r+0x224>)
 800d204:	bb1b      	cbnz	r3, 800d24e <_vfiprintf_r+0x1d6>
 800d206:	9b03      	ldr	r3, [sp, #12]
 800d208:	3307      	adds	r3, #7
 800d20a:	f023 0307 	bic.w	r3, r3, #7
 800d20e:	3308      	adds	r3, #8
 800d210:	9303      	str	r3, [sp, #12]
 800d212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d214:	443b      	add	r3, r7
 800d216:	9309      	str	r3, [sp, #36]	@ 0x24
 800d218:	e76a      	b.n	800d0f0 <_vfiprintf_r+0x78>
 800d21a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d21e:	460c      	mov	r4, r1
 800d220:	2001      	movs	r0, #1
 800d222:	e7a8      	b.n	800d176 <_vfiprintf_r+0xfe>
 800d224:	2300      	movs	r3, #0
 800d226:	3401      	adds	r4, #1
 800d228:	9305      	str	r3, [sp, #20]
 800d22a:	4619      	mov	r1, r3
 800d22c:	f04f 0c0a 	mov.w	ip, #10
 800d230:	4620      	mov	r0, r4
 800d232:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d236:	3a30      	subs	r2, #48	@ 0x30
 800d238:	2a09      	cmp	r2, #9
 800d23a:	d903      	bls.n	800d244 <_vfiprintf_r+0x1cc>
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d0c6      	beq.n	800d1ce <_vfiprintf_r+0x156>
 800d240:	9105      	str	r1, [sp, #20]
 800d242:	e7c4      	b.n	800d1ce <_vfiprintf_r+0x156>
 800d244:	fb0c 2101 	mla	r1, ip, r1, r2
 800d248:	4604      	mov	r4, r0
 800d24a:	2301      	movs	r3, #1
 800d24c:	e7f0      	b.n	800d230 <_vfiprintf_r+0x1b8>
 800d24e:	ab03      	add	r3, sp, #12
 800d250:	9300      	str	r3, [sp, #0]
 800d252:	462a      	mov	r2, r5
 800d254:	4b12      	ldr	r3, [pc, #72]	@ (800d2a0 <_vfiprintf_r+0x228>)
 800d256:	a904      	add	r1, sp, #16
 800d258:	4630      	mov	r0, r6
 800d25a:	f7fd fba5 	bl	800a9a8 <_printf_float>
 800d25e:	4607      	mov	r7, r0
 800d260:	1c78      	adds	r0, r7, #1
 800d262:	d1d6      	bne.n	800d212 <_vfiprintf_r+0x19a>
 800d264:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d266:	07d9      	lsls	r1, r3, #31
 800d268:	d405      	bmi.n	800d276 <_vfiprintf_r+0x1fe>
 800d26a:	89ab      	ldrh	r3, [r5, #12]
 800d26c:	059a      	lsls	r2, r3, #22
 800d26e:	d402      	bmi.n	800d276 <_vfiprintf_r+0x1fe>
 800d270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d272:	f7fe f925 	bl	800b4c0 <__retarget_lock_release_recursive>
 800d276:	89ab      	ldrh	r3, [r5, #12]
 800d278:	065b      	lsls	r3, r3, #25
 800d27a:	f53f af1f 	bmi.w	800d0bc <_vfiprintf_r+0x44>
 800d27e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d280:	e71e      	b.n	800d0c0 <_vfiprintf_r+0x48>
 800d282:	ab03      	add	r3, sp, #12
 800d284:	9300      	str	r3, [sp, #0]
 800d286:	462a      	mov	r2, r5
 800d288:	4b05      	ldr	r3, [pc, #20]	@ (800d2a0 <_vfiprintf_r+0x228>)
 800d28a:	a904      	add	r1, sp, #16
 800d28c:	4630      	mov	r0, r6
 800d28e:	f7fd fe23 	bl	800aed8 <_printf_i>
 800d292:	e7e4      	b.n	800d25e <_vfiprintf_r+0x1e6>
 800d294:	0801936a 	.word	0x0801936a
 800d298:	08019374 	.word	0x08019374
 800d29c:	0800a9a9 	.word	0x0800a9a9
 800d2a0:	0800d055 	.word	0x0800d055
 800d2a4:	08019370 	.word	0x08019370

0800d2a8 <__swbuf_r>:
 800d2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2aa:	460e      	mov	r6, r1
 800d2ac:	4614      	mov	r4, r2
 800d2ae:	4605      	mov	r5, r0
 800d2b0:	b118      	cbz	r0, 800d2ba <__swbuf_r+0x12>
 800d2b2:	6a03      	ldr	r3, [r0, #32]
 800d2b4:	b90b      	cbnz	r3, 800d2ba <__swbuf_r+0x12>
 800d2b6:	f7fd ffb9 	bl	800b22c <__sinit>
 800d2ba:	69a3      	ldr	r3, [r4, #24]
 800d2bc:	60a3      	str	r3, [r4, #8]
 800d2be:	89a3      	ldrh	r3, [r4, #12]
 800d2c0:	071a      	lsls	r2, r3, #28
 800d2c2:	d501      	bpl.n	800d2c8 <__swbuf_r+0x20>
 800d2c4:	6923      	ldr	r3, [r4, #16]
 800d2c6:	b943      	cbnz	r3, 800d2da <__swbuf_r+0x32>
 800d2c8:	4621      	mov	r1, r4
 800d2ca:	4628      	mov	r0, r5
 800d2cc:	f000 f82a 	bl	800d324 <__swsetup_r>
 800d2d0:	b118      	cbz	r0, 800d2da <__swbuf_r+0x32>
 800d2d2:	f04f 37ff 	mov.w	r7, #4294967295
 800d2d6:	4638      	mov	r0, r7
 800d2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2da:	6823      	ldr	r3, [r4, #0]
 800d2dc:	6922      	ldr	r2, [r4, #16]
 800d2de:	1a98      	subs	r0, r3, r2
 800d2e0:	6963      	ldr	r3, [r4, #20]
 800d2e2:	b2f6      	uxtb	r6, r6
 800d2e4:	4283      	cmp	r3, r0
 800d2e6:	4637      	mov	r7, r6
 800d2e8:	dc05      	bgt.n	800d2f6 <__swbuf_r+0x4e>
 800d2ea:	4621      	mov	r1, r4
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	f7ff fd99 	bl	800ce24 <_fflush_r>
 800d2f2:	2800      	cmp	r0, #0
 800d2f4:	d1ed      	bne.n	800d2d2 <__swbuf_r+0x2a>
 800d2f6:	68a3      	ldr	r3, [r4, #8]
 800d2f8:	3b01      	subs	r3, #1
 800d2fa:	60a3      	str	r3, [r4, #8]
 800d2fc:	6823      	ldr	r3, [r4, #0]
 800d2fe:	1c5a      	adds	r2, r3, #1
 800d300:	6022      	str	r2, [r4, #0]
 800d302:	701e      	strb	r6, [r3, #0]
 800d304:	6962      	ldr	r2, [r4, #20]
 800d306:	1c43      	adds	r3, r0, #1
 800d308:	429a      	cmp	r2, r3
 800d30a:	d004      	beq.n	800d316 <__swbuf_r+0x6e>
 800d30c:	89a3      	ldrh	r3, [r4, #12]
 800d30e:	07db      	lsls	r3, r3, #31
 800d310:	d5e1      	bpl.n	800d2d6 <__swbuf_r+0x2e>
 800d312:	2e0a      	cmp	r6, #10
 800d314:	d1df      	bne.n	800d2d6 <__swbuf_r+0x2e>
 800d316:	4621      	mov	r1, r4
 800d318:	4628      	mov	r0, r5
 800d31a:	f7ff fd83 	bl	800ce24 <_fflush_r>
 800d31e:	2800      	cmp	r0, #0
 800d320:	d0d9      	beq.n	800d2d6 <__swbuf_r+0x2e>
 800d322:	e7d6      	b.n	800d2d2 <__swbuf_r+0x2a>

0800d324 <__swsetup_r>:
 800d324:	b538      	push	{r3, r4, r5, lr}
 800d326:	4b29      	ldr	r3, [pc, #164]	@ (800d3cc <__swsetup_r+0xa8>)
 800d328:	4605      	mov	r5, r0
 800d32a:	6818      	ldr	r0, [r3, #0]
 800d32c:	460c      	mov	r4, r1
 800d32e:	b118      	cbz	r0, 800d338 <__swsetup_r+0x14>
 800d330:	6a03      	ldr	r3, [r0, #32]
 800d332:	b90b      	cbnz	r3, 800d338 <__swsetup_r+0x14>
 800d334:	f7fd ff7a 	bl	800b22c <__sinit>
 800d338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d33c:	0719      	lsls	r1, r3, #28
 800d33e:	d422      	bmi.n	800d386 <__swsetup_r+0x62>
 800d340:	06da      	lsls	r2, r3, #27
 800d342:	d407      	bmi.n	800d354 <__swsetup_r+0x30>
 800d344:	2209      	movs	r2, #9
 800d346:	602a      	str	r2, [r5, #0]
 800d348:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d34c:	81a3      	strh	r3, [r4, #12]
 800d34e:	f04f 30ff 	mov.w	r0, #4294967295
 800d352:	e033      	b.n	800d3bc <__swsetup_r+0x98>
 800d354:	0758      	lsls	r0, r3, #29
 800d356:	d512      	bpl.n	800d37e <__swsetup_r+0x5a>
 800d358:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d35a:	b141      	cbz	r1, 800d36e <__swsetup_r+0x4a>
 800d35c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d360:	4299      	cmp	r1, r3
 800d362:	d002      	beq.n	800d36a <__swsetup_r+0x46>
 800d364:	4628      	mov	r0, r5
 800d366:	f7fe ff07 	bl	800c178 <_free_r>
 800d36a:	2300      	movs	r3, #0
 800d36c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d36e:	89a3      	ldrh	r3, [r4, #12]
 800d370:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d374:	81a3      	strh	r3, [r4, #12]
 800d376:	2300      	movs	r3, #0
 800d378:	6063      	str	r3, [r4, #4]
 800d37a:	6923      	ldr	r3, [r4, #16]
 800d37c:	6023      	str	r3, [r4, #0]
 800d37e:	89a3      	ldrh	r3, [r4, #12]
 800d380:	f043 0308 	orr.w	r3, r3, #8
 800d384:	81a3      	strh	r3, [r4, #12]
 800d386:	6923      	ldr	r3, [r4, #16]
 800d388:	b94b      	cbnz	r3, 800d39e <__swsetup_r+0x7a>
 800d38a:	89a3      	ldrh	r3, [r4, #12]
 800d38c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d390:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d394:	d003      	beq.n	800d39e <__swsetup_r+0x7a>
 800d396:	4621      	mov	r1, r4
 800d398:	4628      	mov	r0, r5
 800d39a:	f000 f883 	bl	800d4a4 <__smakebuf_r>
 800d39e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3a2:	f013 0201 	ands.w	r2, r3, #1
 800d3a6:	d00a      	beq.n	800d3be <__swsetup_r+0x9a>
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	60a2      	str	r2, [r4, #8]
 800d3ac:	6962      	ldr	r2, [r4, #20]
 800d3ae:	4252      	negs	r2, r2
 800d3b0:	61a2      	str	r2, [r4, #24]
 800d3b2:	6922      	ldr	r2, [r4, #16]
 800d3b4:	b942      	cbnz	r2, 800d3c8 <__swsetup_r+0xa4>
 800d3b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d3ba:	d1c5      	bne.n	800d348 <__swsetup_r+0x24>
 800d3bc:	bd38      	pop	{r3, r4, r5, pc}
 800d3be:	0799      	lsls	r1, r3, #30
 800d3c0:	bf58      	it	pl
 800d3c2:	6962      	ldrpl	r2, [r4, #20]
 800d3c4:	60a2      	str	r2, [r4, #8]
 800d3c6:	e7f4      	b.n	800d3b2 <__swsetup_r+0x8e>
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	e7f7      	b.n	800d3bc <__swsetup_r+0x98>
 800d3cc:	200001a4 	.word	0x200001a4

0800d3d0 <_raise_r>:
 800d3d0:	291f      	cmp	r1, #31
 800d3d2:	b538      	push	{r3, r4, r5, lr}
 800d3d4:	4605      	mov	r5, r0
 800d3d6:	460c      	mov	r4, r1
 800d3d8:	d904      	bls.n	800d3e4 <_raise_r+0x14>
 800d3da:	2316      	movs	r3, #22
 800d3dc:	6003      	str	r3, [r0, #0]
 800d3de:	f04f 30ff 	mov.w	r0, #4294967295
 800d3e2:	bd38      	pop	{r3, r4, r5, pc}
 800d3e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d3e6:	b112      	cbz	r2, 800d3ee <_raise_r+0x1e>
 800d3e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3ec:	b94b      	cbnz	r3, 800d402 <_raise_r+0x32>
 800d3ee:	4628      	mov	r0, r5
 800d3f0:	f000 f830 	bl	800d454 <_getpid_r>
 800d3f4:	4622      	mov	r2, r4
 800d3f6:	4601      	mov	r1, r0
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3fe:	f000 b817 	b.w	800d430 <_kill_r>
 800d402:	2b01      	cmp	r3, #1
 800d404:	d00a      	beq.n	800d41c <_raise_r+0x4c>
 800d406:	1c59      	adds	r1, r3, #1
 800d408:	d103      	bne.n	800d412 <_raise_r+0x42>
 800d40a:	2316      	movs	r3, #22
 800d40c:	6003      	str	r3, [r0, #0]
 800d40e:	2001      	movs	r0, #1
 800d410:	e7e7      	b.n	800d3e2 <_raise_r+0x12>
 800d412:	2100      	movs	r1, #0
 800d414:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d418:	4620      	mov	r0, r4
 800d41a:	4798      	blx	r3
 800d41c:	2000      	movs	r0, #0
 800d41e:	e7e0      	b.n	800d3e2 <_raise_r+0x12>

0800d420 <raise>:
 800d420:	4b02      	ldr	r3, [pc, #8]	@ (800d42c <raise+0xc>)
 800d422:	4601      	mov	r1, r0
 800d424:	6818      	ldr	r0, [r3, #0]
 800d426:	f7ff bfd3 	b.w	800d3d0 <_raise_r>
 800d42a:	bf00      	nop
 800d42c:	200001a4 	.word	0x200001a4

0800d430 <_kill_r>:
 800d430:	b538      	push	{r3, r4, r5, lr}
 800d432:	4d07      	ldr	r5, [pc, #28]	@ (800d450 <_kill_r+0x20>)
 800d434:	2300      	movs	r3, #0
 800d436:	4604      	mov	r4, r0
 800d438:	4608      	mov	r0, r1
 800d43a:	4611      	mov	r1, r2
 800d43c:	602b      	str	r3, [r5, #0]
 800d43e:	f000 f8cf 	bl	800d5e0 <_kill>
 800d442:	1c43      	adds	r3, r0, #1
 800d444:	d102      	bne.n	800d44c <_kill_r+0x1c>
 800d446:	682b      	ldr	r3, [r5, #0]
 800d448:	b103      	cbz	r3, 800d44c <_kill_r+0x1c>
 800d44a:	6023      	str	r3, [r4, #0]
 800d44c:	bd38      	pop	{r3, r4, r5, pc}
 800d44e:	bf00      	nop
 800d450:	20000c98 	.word	0x20000c98

0800d454 <_getpid_r>:
 800d454:	f000 b8b4 	b.w	800d5c0 <_getpid>

0800d458 <__swhatbuf_r>:
 800d458:	b570      	push	{r4, r5, r6, lr}
 800d45a:	460c      	mov	r4, r1
 800d45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d460:	2900      	cmp	r1, #0
 800d462:	b096      	sub	sp, #88	@ 0x58
 800d464:	4615      	mov	r5, r2
 800d466:	461e      	mov	r6, r3
 800d468:	da0d      	bge.n	800d486 <__swhatbuf_r+0x2e>
 800d46a:	89a3      	ldrh	r3, [r4, #12]
 800d46c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d470:	f04f 0100 	mov.w	r1, #0
 800d474:	bf14      	ite	ne
 800d476:	2340      	movne	r3, #64	@ 0x40
 800d478:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d47c:	2000      	movs	r0, #0
 800d47e:	6031      	str	r1, [r6, #0]
 800d480:	602b      	str	r3, [r5, #0]
 800d482:	b016      	add	sp, #88	@ 0x58
 800d484:	bd70      	pop	{r4, r5, r6, pc}
 800d486:	466a      	mov	r2, sp
 800d488:	f000 f848 	bl	800d51c <_fstat_r>
 800d48c:	2800      	cmp	r0, #0
 800d48e:	dbec      	blt.n	800d46a <__swhatbuf_r+0x12>
 800d490:	9901      	ldr	r1, [sp, #4]
 800d492:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d496:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d49a:	4259      	negs	r1, r3
 800d49c:	4159      	adcs	r1, r3
 800d49e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4a2:	e7eb      	b.n	800d47c <__swhatbuf_r+0x24>

0800d4a4 <__smakebuf_r>:
 800d4a4:	898b      	ldrh	r3, [r1, #12]
 800d4a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4a8:	079d      	lsls	r5, r3, #30
 800d4aa:	4606      	mov	r6, r0
 800d4ac:	460c      	mov	r4, r1
 800d4ae:	d507      	bpl.n	800d4c0 <__smakebuf_r+0x1c>
 800d4b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d4b4:	6023      	str	r3, [r4, #0]
 800d4b6:	6123      	str	r3, [r4, #16]
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	6163      	str	r3, [r4, #20]
 800d4bc:	b003      	add	sp, #12
 800d4be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4c0:	ab01      	add	r3, sp, #4
 800d4c2:	466a      	mov	r2, sp
 800d4c4:	f7ff ffc8 	bl	800d458 <__swhatbuf_r>
 800d4c8:	9f00      	ldr	r7, [sp, #0]
 800d4ca:	4605      	mov	r5, r0
 800d4cc:	4639      	mov	r1, r7
 800d4ce:	4630      	mov	r0, r6
 800d4d0:	f7fe fec6 	bl	800c260 <_malloc_r>
 800d4d4:	b948      	cbnz	r0, 800d4ea <__smakebuf_r+0x46>
 800d4d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4da:	059a      	lsls	r2, r3, #22
 800d4dc:	d4ee      	bmi.n	800d4bc <__smakebuf_r+0x18>
 800d4de:	f023 0303 	bic.w	r3, r3, #3
 800d4e2:	f043 0302 	orr.w	r3, r3, #2
 800d4e6:	81a3      	strh	r3, [r4, #12]
 800d4e8:	e7e2      	b.n	800d4b0 <__smakebuf_r+0xc>
 800d4ea:	89a3      	ldrh	r3, [r4, #12]
 800d4ec:	6020      	str	r0, [r4, #0]
 800d4ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4f2:	81a3      	strh	r3, [r4, #12]
 800d4f4:	9b01      	ldr	r3, [sp, #4]
 800d4f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d4fa:	b15b      	cbz	r3, 800d514 <__smakebuf_r+0x70>
 800d4fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d500:	4630      	mov	r0, r6
 800d502:	f000 f81d 	bl	800d540 <_isatty_r>
 800d506:	b128      	cbz	r0, 800d514 <__smakebuf_r+0x70>
 800d508:	89a3      	ldrh	r3, [r4, #12]
 800d50a:	f023 0303 	bic.w	r3, r3, #3
 800d50e:	f043 0301 	orr.w	r3, r3, #1
 800d512:	81a3      	strh	r3, [r4, #12]
 800d514:	89a3      	ldrh	r3, [r4, #12]
 800d516:	431d      	orrs	r5, r3
 800d518:	81a5      	strh	r5, [r4, #12]
 800d51a:	e7cf      	b.n	800d4bc <__smakebuf_r+0x18>

0800d51c <_fstat_r>:
 800d51c:	b538      	push	{r3, r4, r5, lr}
 800d51e:	4d07      	ldr	r5, [pc, #28]	@ (800d53c <_fstat_r+0x20>)
 800d520:	2300      	movs	r3, #0
 800d522:	4604      	mov	r4, r0
 800d524:	4608      	mov	r0, r1
 800d526:	4611      	mov	r1, r2
 800d528:	602b      	str	r3, [r5, #0]
 800d52a:	f000 f841 	bl	800d5b0 <_fstat>
 800d52e:	1c43      	adds	r3, r0, #1
 800d530:	d102      	bne.n	800d538 <_fstat_r+0x1c>
 800d532:	682b      	ldr	r3, [r5, #0]
 800d534:	b103      	cbz	r3, 800d538 <_fstat_r+0x1c>
 800d536:	6023      	str	r3, [r4, #0]
 800d538:	bd38      	pop	{r3, r4, r5, pc}
 800d53a:	bf00      	nop
 800d53c:	20000c98 	.word	0x20000c98

0800d540 <_isatty_r>:
 800d540:	b538      	push	{r3, r4, r5, lr}
 800d542:	4d06      	ldr	r5, [pc, #24]	@ (800d55c <_isatty_r+0x1c>)
 800d544:	2300      	movs	r3, #0
 800d546:	4604      	mov	r4, r0
 800d548:	4608      	mov	r0, r1
 800d54a:	602b      	str	r3, [r5, #0]
 800d54c:	f000 f840 	bl	800d5d0 <_isatty>
 800d550:	1c43      	adds	r3, r0, #1
 800d552:	d102      	bne.n	800d55a <_isatty_r+0x1a>
 800d554:	682b      	ldr	r3, [r5, #0]
 800d556:	b103      	cbz	r3, 800d55a <_isatty_r+0x1a>
 800d558:	6023      	str	r3, [r4, #0]
 800d55a:	bd38      	pop	{r3, r4, r5, pc}
 800d55c:	20000c98 	.word	0x20000c98

0800d560 <sqrtf>:
 800d560:	b508      	push	{r3, lr}
 800d562:	ed2d 8b02 	vpush	{d8}
 800d566:	eeb0 8a40 	vmov.f32	s16, s0
 800d56a:	f000 f817 	bl	800d59c <__ieee754_sqrtf>
 800d56e:	eeb4 8a48 	vcmp.f32	s16, s16
 800d572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d576:	d60c      	bvs.n	800d592 <sqrtf+0x32>
 800d578:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d598 <sqrtf+0x38>
 800d57c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d584:	d505      	bpl.n	800d592 <sqrtf+0x32>
 800d586:	f000 f80d 	bl	800d5a4 <__errno>
 800d58a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d58e:	2321      	movs	r3, #33	@ 0x21
 800d590:	6003      	str	r3, [r0, #0]
 800d592:	ecbd 8b02 	vpop	{d8}
 800d596:	bd08      	pop	{r3, pc}
 800d598:	00000000 	.word	0x00000000

0800d59c <__ieee754_sqrtf>:
 800d59c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d5a0:	4770      	bx	lr
	...

0800d5a4 <__errno>:
 800d5a4:	4b01      	ldr	r3, [pc, #4]	@ (800d5ac <__errno+0x8>)
 800d5a6:	6818      	ldr	r0, [r3, #0]
 800d5a8:	4770      	bx	lr
 800d5aa:	bf00      	nop
 800d5ac:	200001a4 	.word	0x200001a4

0800d5b0 <_fstat>:
 800d5b0:	4b02      	ldr	r3, [pc, #8]	@ (800d5bc <_fstat+0xc>)
 800d5b2:	2258      	movs	r2, #88	@ 0x58
 800d5b4:	601a      	str	r2, [r3, #0]
 800d5b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ba:	4770      	bx	lr
 800d5bc:	20000c98 	.word	0x20000c98

0800d5c0 <_getpid>:
 800d5c0:	4b02      	ldr	r3, [pc, #8]	@ (800d5cc <_getpid+0xc>)
 800d5c2:	2258      	movs	r2, #88	@ 0x58
 800d5c4:	601a      	str	r2, [r3, #0]
 800d5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ca:	4770      	bx	lr
 800d5cc:	20000c98 	.word	0x20000c98

0800d5d0 <_isatty>:
 800d5d0:	4b02      	ldr	r3, [pc, #8]	@ (800d5dc <_isatty+0xc>)
 800d5d2:	2258      	movs	r2, #88	@ 0x58
 800d5d4:	601a      	str	r2, [r3, #0]
 800d5d6:	2000      	movs	r0, #0
 800d5d8:	4770      	bx	lr
 800d5da:	bf00      	nop
 800d5dc:	20000c98 	.word	0x20000c98

0800d5e0 <_kill>:
 800d5e0:	4b02      	ldr	r3, [pc, #8]	@ (800d5ec <_kill+0xc>)
 800d5e2:	2258      	movs	r2, #88	@ 0x58
 800d5e4:	601a      	str	r2, [r3, #0]
 800d5e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ea:	4770      	bx	lr
 800d5ec:	20000c98 	.word	0x20000c98

0800d5f0 <_sbrk>:
 800d5f0:	4a04      	ldr	r2, [pc, #16]	@ (800d604 <_sbrk+0x14>)
 800d5f2:	6811      	ldr	r1, [r2, #0]
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	b909      	cbnz	r1, 800d5fc <_sbrk+0xc>
 800d5f8:	4903      	ldr	r1, [pc, #12]	@ (800d608 <_sbrk+0x18>)
 800d5fa:	6011      	str	r1, [r2, #0]
 800d5fc:	6810      	ldr	r0, [r2, #0]
 800d5fe:	4403      	add	r3, r0
 800d600:	6013      	str	r3, [r2, #0]
 800d602:	4770      	bx	lr
 800d604:	20000ca8 	.word	0x20000ca8
 800d608:	20000cb0 	.word	0x20000cb0

0800d60c <_exit>:
 800d60c:	e7fe      	b.n	800d60c <_exit>
	...

0800d610 <_init>:
 800d610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d612:	bf00      	nop
 800d614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d616:	bc08      	pop	{r3}
 800d618:	469e      	mov	lr, r3
 800d61a:	4770      	bx	lr

0800d61c <_fini>:
 800d61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d61e:	bf00      	nop
 800d620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d622:	bc08      	pop	{r3}
 800d624:	469e      	mov	lr, r3
 800d626:	4770      	bx	lr
