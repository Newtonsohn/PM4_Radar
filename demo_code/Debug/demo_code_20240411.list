
demo_code_20240411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcd0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018cb8  0800de80  0800de80  0000ee80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026b38  08026b38  00028364  2**0
                  CONTENTS
  4 .ARM          00000008  08026b38  08026b38  00027b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026b40  08026b40  00028364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026b40  08026b40  00027b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08026b44  08026b44  00027b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000364  20000000  08026b48  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024a8  20000364  08026eac  00028364  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000280c  08026eac  0002880c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00028364  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d14  00000000  00000000  00028394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f5c  00000000  00000000  000410a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  00045008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001197  00000000  00000000  000467a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027628  00000000  00000000  0004793f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001caf3  00000000  00000000  0006ef67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e28dc  00000000  00000000  0008ba5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016e336  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007428  00000000  00000000  0016e3e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00175810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000199e  00000000  00000000  0017587b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000040  00000000  00000000  00177219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000364 	.word	0x20000364
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800de68 	.word	0x0800de68

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000368 	.word	0x20000368
 80001ec:	0800de68 	.word	0x0800de68

080001f0 <arm_bitreversal_32>:
 80001f0:	1c4b      	adds	r3, r1, #1
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	bf98      	it	ls
 80001f6:	4770      	bxls	lr
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001fc:	1c91      	adds	r1, r2, #2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000208:	880a      	ldrh	r2, [r1, #0]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020e:	4480      	add	r8, r0
 8000210:	4481      	add	r9, r0
 8000212:	4402      	add	r2, r0
 8000214:	4484      	add	ip, r0
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
 800021e:	6815      	ldr	r5, [r2, #0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
 8000224:	f8c9 6000 	str.w	r6, [r9]
 8000228:	f8c8 7000 	str.w	r7, [r8]
 800022c:	f8cc 5000 	str.w	r5, [ip]
 8000230:	6014      	str	r4, [r2, #0]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800023a:	6855      	ldr	r5, [r2, #4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
 800024c:	6054      	str	r4, [r2, #4]
 800024e:	3108      	adds	r1, #8
 8000250:	3b01      	subs	r3, #1
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
 800025a:	1c4b      	adds	r3, r1, #1
 800025c:	2b01      	cmp	r3, #1
 800025e:	bf98      	it	ls
 8000260:	4770      	bxls	lr
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000266:	1c91      	adds	r1, r2, #2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000272:	880a      	ldrh	r2, [r1, #0]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
 8000290:	6815      	ldr	r5, [r2, #0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
 8000296:	f8c9 6000 	str.w	r6, [r9]
 800029a:	f8c8 7000 	str.w	r7, [r8]
 800029e:	f8cc 5000 	str.w	r5, [ip]
 80002a2:	6014      	str	r4, [r2, #0]
 80002a4:	3108      	adds	r1, #8
 80002a6:	3b01      	subs	r3, #1
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ae:	4770      	bx	lr

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <strlen>:
 8000350:	4603      	mov	r3, r0
 8000352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000356:	2a00      	cmp	r2, #0
 8000358:	d1fb      	bne.n	8000352 <strlen+0x2>
 800035a:	1a18      	subs	r0, r3, r0
 800035c:	3801      	subs	r0, #1
 800035e:	4770      	bx	lr

08000360 <__aeabi_drsub>:
 8000360:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000364:	e002      	b.n	800036c <__adddf3>
 8000366:	bf00      	nop

08000368 <__aeabi_dsub>:
 8000368:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800036c <__adddf3>:
 800036c:	b530      	push	{r4, r5, lr}
 800036e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000372:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	bf1f      	itttt	ne
 8000382:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000386:	ea55 0c02 	orrsne.w	ip, r5, r2
 800038a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800038e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000392:	f000 80e2 	beq.w	800055a <__adddf3+0x1ee>
 8000396:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800039a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800039e:	bfb8      	it	lt
 80003a0:	426d      	neglt	r5, r5
 80003a2:	dd0c      	ble.n	80003be <__adddf3+0x52>
 80003a4:	442c      	add	r4, r5
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	ea82 0000 	eor.w	r0, r2, r0
 80003b2:	ea83 0101 	eor.w	r1, r3, r1
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	2d36      	cmp	r5, #54	@ 0x36
 80003c0:	bf88      	it	hi
 80003c2:	bd30      	pophi	{r4, r5, pc}
 80003c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003d4:	d002      	beq.n	80003dc <__adddf3+0x70>
 80003d6:	4240      	negs	r0, r0
 80003d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003e8:	d002      	beq.n	80003f0 <__adddf3+0x84>
 80003ea:	4252      	negs	r2, r2
 80003ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003f0:	ea94 0f05 	teq	r4, r5
 80003f4:	f000 80a7 	beq.w	8000546 <__adddf3+0x1da>
 80003f8:	f1a4 0401 	sub.w	r4, r4, #1
 80003fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000400:	db0d      	blt.n	800041e <__adddf3+0xb2>
 8000402:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000406:	fa22 f205 	lsr.w	r2, r2, r5
 800040a:	1880      	adds	r0, r0, r2
 800040c:	f141 0100 	adc.w	r1, r1, #0
 8000410:	fa03 f20e 	lsl.w	r2, r3, lr
 8000414:	1880      	adds	r0, r0, r2
 8000416:	fa43 f305 	asr.w	r3, r3, r5
 800041a:	4159      	adcs	r1, r3
 800041c:	e00e      	b.n	800043c <__adddf3+0xd0>
 800041e:	f1a5 0520 	sub.w	r5, r5, #32
 8000422:	f10e 0e20 	add.w	lr, lr, #32
 8000426:	2a01      	cmp	r2, #1
 8000428:	fa03 fc0e 	lsl.w	ip, r3, lr
 800042c:	bf28      	it	cs
 800042e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000432:	fa43 f305 	asr.w	r3, r3, r5
 8000436:	18c0      	adds	r0, r0, r3
 8000438:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000440:	d507      	bpl.n	8000452 <__adddf3+0xe6>
 8000442:	f04f 0e00 	mov.w	lr, #0
 8000446:	f1dc 0c00 	rsbs	ip, ip, #0
 800044a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800044e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000452:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000456:	d31b      	bcc.n	8000490 <__adddf3+0x124>
 8000458:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800045c:	d30c      	bcc.n	8000478 <__adddf3+0x10c>
 800045e:	0849      	lsrs	r1, r1, #1
 8000460:	ea5f 0030 	movs.w	r0, r0, rrx
 8000464:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000468:	f104 0401 	add.w	r4, r4, #1
 800046c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000470:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000474:	f080 809a 	bcs.w	80005ac <__adddf3+0x240>
 8000478:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800047c:	bf08      	it	eq
 800047e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000482:	f150 0000 	adcs.w	r0, r0, #0
 8000486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800048a:	ea41 0105 	orr.w	r1, r1, r5
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000494:	4140      	adcs	r0, r0
 8000496:	eb41 0101 	adc.w	r1, r1, r1
 800049a:	3c01      	subs	r4, #1
 800049c:	bf28      	it	cs
 800049e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004a2:	d2e9      	bcs.n	8000478 <__adddf3+0x10c>
 80004a4:	f091 0f00 	teq	r1, #0
 80004a8:	bf04      	itt	eq
 80004aa:	4601      	moveq	r1, r0
 80004ac:	2000      	moveq	r0, #0
 80004ae:	fab1 f381 	clz	r3, r1
 80004b2:	bf08      	it	eq
 80004b4:	3320      	addeq	r3, #32
 80004b6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ba:	f1b3 0220 	subs.w	r2, r3, #32
 80004be:	da0c      	bge.n	80004da <__adddf3+0x16e>
 80004c0:	320c      	adds	r2, #12
 80004c2:	dd08      	ble.n	80004d6 <__adddf3+0x16a>
 80004c4:	f102 0c14 	add.w	ip, r2, #20
 80004c8:	f1c2 020c 	rsb	r2, r2, #12
 80004cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004d0:	fa21 f102 	lsr.w	r1, r1, r2
 80004d4:	e00c      	b.n	80004f0 <__adddf3+0x184>
 80004d6:	f102 0214 	add.w	r2, r2, #20
 80004da:	bfd8      	it	le
 80004dc:	f1c2 0c20 	rsble	ip, r2, #32
 80004e0:	fa01 f102 	lsl.w	r1, r1, r2
 80004e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004e8:	bfdc      	itt	le
 80004ea:	ea41 010c 	orrle.w	r1, r1, ip
 80004ee:	4090      	lslle	r0, r2
 80004f0:	1ae4      	subs	r4, r4, r3
 80004f2:	bfa2      	ittt	ge
 80004f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004f8:	4329      	orrge	r1, r5
 80004fa:	bd30      	popge	{r4, r5, pc}
 80004fc:	ea6f 0404 	mvn.w	r4, r4
 8000500:	3c1f      	subs	r4, #31
 8000502:	da1c      	bge.n	800053e <__adddf3+0x1d2>
 8000504:	340c      	adds	r4, #12
 8000506:	dc0e      	bgt.n	8000526 <__adddf3+0x1ba>
 8000508:	f104 0414 	add.w	r4, r4, #20
 800050c:	f1c4 0220 	rsb	r2, r4, #32
 8000510:	fa20 f004 	lsr.w	r0, r0, r4
 8000514:	fa01 f302 	lsl.w	r3, r1, r2
 8000518:	ea40 0003 	orr.w	r0, r0, r3
 800051c:	fa21 f304 	lsr.w	r3, r1, r4
 8000520:	ea45 0103 	orr.w	r1, r5, r3
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f1c4 040c 	rsb	r4, r4, #12
 800052a:	f1c4 0220 	rsb	r2, r4, #32
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 f304 	lsl.w	r3, r1, r4
 8000536:	ea40 0003 	orr.w	r0, r0, r3
 800053a:	4629      	mov	r1, r5
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	fa21 f004 	lsr.w	r0, r1, r4
 8000542:	4629      	mov	r1, r5
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f094 0f00 	teq	r4, #0
 800054a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800054e:	bf06      	itte	eq
 8000550:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000554:	3401      	addeq	r4, #1
 8000556:	3d01      	subne	r5, #1
 8000558:	e74e      	b.n	80003f8 <__adddf3+0x8c>
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf18      	it	ne
 8000560:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000564:	d029      	beq.n	80005ba <__adddf3+0x24e>
 8000566:	ea94 0f05 	teq	r4, r5
 800056a:	bf08      	it	eq
 800056c:	ea90 0f02 	teqeq	r0, r2
 8000570:	d005      	beq.n	800057e <__adddf3+0x212>
 8000572:	ea54 0c00 	orrs.w	ip, r4, r0
 8000576:	bf04      	itt	eq
 8000578:	4619      	moveq	r1, r3
 800057a:	4610      	moveq	r0, r2
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	ea91 0f03 	teq	r1, r3
 8000582:	bf1e      	ittt	ne
 8000584:	2100      	movne	r1, #0
 8000586:	2000      	movne	r0, #0
 8000588:	bd30      	popne	{r4, r5, pc}
 800058a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800058e:	d105      	bne.n	800059c <__adddf3+0x230>
 8000590:	0040      	lsls	r0, r0, #1
 8000592:	4149      	adcs	r1, r1
 8000594:	bf28      	it	cs
 8000596:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005a0:	bf3c      	itt	cc
 80005a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005a6:	bd30      	popcc	{r4, r5, pc}
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005b4:	f04f 0000 	mov.w	r0, #0
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf1a      	itte	ne
 80005c0:	4619      	movne	r1, r3
 80005c2:	4610      	movne	r0, r2
 80005c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005c8:	bf1c      	itt	ne
 80005ca:	460b      	movne	r3, r1
 80005cc:	4602      	movne	r2, r0
 80005ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005d2:	bf06      	itte	eq
 80005d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005d8:	ea91 0f03 	teqeq	r1, r3
 80005dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop

080005e4 <__aeabi_ui2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f8:	f04f 0500 	mov.w	r5, #0
 80005fc:	f04f 0100 	mov.w	r1, #0
 8000600:	e750      	b.n	80004a4 <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_i2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800061c:	bf48      	it	mi
 800061e:	4240      	negmi	r0, r0
 8000620:	f04f 0100 	mov.w	r1, #0
 8000624:	e73e      	b.n	80004a4 <__adddf3+0x138>
 8000626:	bf00      	nop

08000628 <__aeabi_f2d>:
 8000628:	0042      	lsls	r2, r0, #1
 800062a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800062e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000632:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000636:	bf1f      	itttt	ne
 8000638:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800063c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000640:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000644:	4770      	bxne	lr
 8000646:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800064a:	bf08      	it	eq
 800064c:	4770      	bxeq	lr
 800064e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000652:	bf04      	itt	eq
 8000654:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000658:	4770      	bxeq	lr
 800065a:	b530      	push	{r4, r5, lr}
 800065c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000660:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000668:	e71c      	b.n	80004a4 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_ul2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	e00a      	b.n	8000692 <__aeabi_l2d+0x16>

0800067c <__aeabi_l2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800068a:	d502      	bpl.n	8000692 <__aeabi_l2d+0x16>
 800068c:	4240      	negs	r0, r0
 800068e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000692:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000696:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800069a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800069e:	f43f aed8 	beq.w	8000452 <__adddf3+0xe6>
 80006a2:	f04f 0203 	mov.w	r2, #3
 80006a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006aa:	bf18      	it	ne
 80006ac:	3203      	addne	r2, #3
 80006ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006b2:	bf18      	it	ne
 80006b4:	3203      	addne	r2, #3
 80006b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ba:	f1c2 0320 	rsb	r3, r2, #32
 80006be:	fa00 fc03 	lsl.w	ip, r0, r3
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ca:	ea40 000e 	orr.w	r0, r0, lr
 80006ce:	fa21 f102 	lsr.w	r1, r1, r2
 80006d2:	4414      	add	r4, r2
 80006d4:	e6bd      	b.n	8000452 <__adddf3+0xe6>
 80006d6:	bf00      	nop

080006d8 <__aeabi_dmul>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006e6:	bf1d      	ittte	ne
 80006e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ec:	ea94 0f0c 	teqne	r4, ip
 80006f0:	ea95 0f0c 	teqne	r5, ip
 80006f4:	f000 f8de 	bleq	80008b4 <__aeabi_dmul+0x1dc>
 80006f8:	442c      	add	r4, r5
 80006fa:	ea81 0603 	eor.w	r6, r1, r3
 80006fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000702:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000706:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800070a:	bf18      	it	ne
 800070c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000714:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000718:	d038      	beq.n	800078c <__aeabi_dmul+0xb4>
 800071a:	fba0 ce02 	umull	ip, lr, r0, r2
 800071e:	f04f 0500 	mov.w	r5, #0
 8000722:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000726:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800072a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800072e:	f04f 0600 	mov.w	r6, #0
 8000732:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000736:	f09c 0f00 	teq	ip, #0
 800073a:	bf18      	it	ne
 800073c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000740:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000744:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000748:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800074c:	d204      	bcs.n	8000758 <__aeabi_dmul+0x80>
 800074e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000752:	416d      	adcs	r5, r5
 8000754:	eb46 0606 	adc.w	r6, r6, r6
 8000758:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800075c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000760:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000764:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000768:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800076c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000770:	bf88      	it	hi
 8000772:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000776:	d81e      	bhi.n	80007b6 <__aeabi_dmul+0xde>
 8000778:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800077c:	bf08      	it	eq
 800077e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000782:	f150 0000 	adcs.w	r0, r0, #0
 8000786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000790:	ea46 0101 	orr.w	r1, r6, r1
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007a0:	bfc2      	ittt	gt
 80007a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	popgt	{r4, r5, r6, pc}
 80007ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007b0:	f04f 0e00 	mov.w	lr, #0
 80007b4:	3c01      	subs	r4, #1
 80007b6:	f300 80ab 	bgt.w	8000910 <__aeabi_dmul+0x238>
 80007ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007be:	bfde      	ittt	le
 80007c0:	2000      	movle	r0, #0
 80007c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007c6:	bd70      	pople	{r4, r5, r6, pc}
 80007c8:	f1c4 0400 	rsb	r4, r4, #0
 80007cc:	3c20      	subs	r4, #32
 80007ce:	da35      	bge.n	800083c <__aeabi_dmul+0x164>
 80007d0:	340c      	adds	r4, #12
 80007d2:	dc1b      	bgt.n	800080c <__aeabi_dmul+0x134>
 80007d4:	f104 0414 	add.w	r4, r4, #20
 80007d8:	f1c4 0520 	rsb	r5, r4, #32
 80007dc:	fa00 f305 	lsl.w	r3, r0, r5
 80007e0:	fa20 f004 	lsr.w	r0, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea40 0002 	orr.w	r0, r0, r2
 80007ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007f8:	fa21 f604 	lsr.w	r6, r1, r4
 80007fc:	eb42 0106 	adc.w	r1, r2, r6
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 040c 	rsb	r4, r4, #12
 8000810:	f1c4 0520 	rsb	r5, r4, #32
 8000814:	fa00 f304 	lsl.w	r3, r0, r4
 8000818:	fa20 f005 	lsr.w	r0, r0, r5
 800081c:	fa01 f204 	lsl.w	r2, r1, r4
 8000820:	ea40 0002 	orr.w	r0, r0, r2
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800082c:	f141 0100 	adc.w	r1, r1, #0
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 0520 	rsb	r5, r4, #32
 8000840:	fa00 f205 	lsl.w	r2, r0, r5
 8000844:	ea4e 0e02 	orr.w	lr, lr, r2
 8000848:	fa20 f304 	lsr.w	r3, r0, r4
 800084c:	fa01 f205 	lsl.w	r2, r1, r5
 8000850:	ea43 0302 	orr.w	r3, r3, r2
 8000854:	fa21 f004 	lsr.w	r0, r1, r4
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	fa21 f204 	lsr.w	r2, r1, r4
 8000860:	ea20 0002 	bic.w	r0, r0, r2
 8000864:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800086c:	bf08      	it	eq
 800086e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f094 0f00 	teq	r4, #0
 8000878:	d10f      	bne.n	800089a <__aeabi_dmul+0x1c2>
 800087a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800087e:	0040      	lsls	r0, r0, #1
 8000880:	eb41 0101 	adc.w	r1, r1, r1
 8000884:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000888:	bf08      	it	eq
 800088a:	3c01      	subeq	r4, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1a6>
 800088e:	ea41 0106 	orr.w	r1, r1, r6
 8000892:	f095 0f00 	teq	r5, #0
 8000896:	bf18      	it	ne
 8000898:	4770      	bxne	lr
 800089a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	eb43 0303 	adc.w	r3, r3, r3
 80008a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3d01      	subeq	r5, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1c6>
 80008ae:	ea43 0306 	orr.w	r3, r3, r6
 80008b2:	4770      	bx	lr
 80008b4:	ea94 0f0c 	teq	r4, ip
 80008b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008bc:	bf18      	it	ne
 80008be:	ea95 0f0c 	teqne	r5, ip
 80008c2:	d00c      	beq.n	80008de <__aeabi_dmul+0x206>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	d1d1      	bne.n	8000874 <__aeabi_dmul+0x19c>
 80008d0:	ea81 0103 	eor.w	r1, r1, r3
 80008d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008d8:	f04f 0000 	mov.w	r0, #0
 80008dc:	bd70      	pop	{r4, r5, r6, pc}
 80008de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e2:	bf06      	itte	eq
 80008e4:	4610      	moveq	r0, r2
 80008e6:	4619      	moveq	r1, r3
 80008e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ec:	d019      	beq.n	8000922 <__aeabi_dmul+0x24a>
 80008ee:	ea94 0f0c 	teq	r4, ip
 80008f2:	d102      	bne.n	80008fa <__aeabi_dmul+0x222>
 80008f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008f8:	d113      	bne.n	8000922 <__aeabi_dmul+0x24a>
 80008fa:	ea95 0f0c 	teq	r5, ip
 80008fe:	d105      	bne.n	800090c <__aeabi_dmul+0x234>
 8000900:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000904:	bf1c      	itt	ne
 8000906:	4610      	movne	r0, r2
 8000908:	4619      	movne	r1, r3
 800090a:	d10a      	bne.n	8000922 <__aeabi_dmul+0x24a>
 800090c:	ea81 0103 	eor.w	r1, r1, r3
 8000910:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000914:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000918:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	bd70      	pop	{r4, r5, r6, pc}
 8000922:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000926:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800092a:	bd70      	pop	{r4, r5, r6, pc}

0800092c <__aeabi_ddiv>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000932:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000936:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800093a:	bf1d      	ittte	ne
 800093c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000940:	ea94 0f0c 	teqne	r4, ip
 8000944:	ea95 0f0c 	teqne	r5, ip
 8000948:	f000 f8a7 	bleq	8000a9a <__aeabi_ddiv+0x16e>
 800094c:	eba4 0405 	sub.w	r4, r4, r5
 8000950:	ea81 0e03 	eor.w	lr, r1, r3
 8000954:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000958:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800095c:	f000 8088 	beq.w	8000a70 <__aeabi_ddiv+0x144>
 8000960:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000964:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000968:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800096c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000970:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000974:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000978:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800097c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000980:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000984:	429d      	cmp	r5, r3
 8000986:	bf08      	it	eq
 8000988:	4296      	cmpeq	r6, r2
 800098a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800098e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000992:	d202      	bcs.n	800099a <__aeabi_ddiv+0x6e>
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	ea4f 0232 	mov.w	r2, r2, rrx
 800099a:	1ab6      	subs	r6, r6, r2
 800099c:	eb65 0503 	sbc.w	r5, r5, r3
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a08:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a0c:	d018      	beq.n	8000a40 <__aeabi_ddiv+0x114>
 8000a0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a2a:	d1c0      	bne.n	80009ae <__aeabi_ddiv+0x82>
 8000a2c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a30:	d10b      	bne.n	8000a4a <__aeabi_ddiv+0x11e>
 8000a32:	ea41 0100 	orr.w	r1, r1, r0
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a3e:	e7b6      	b.n	80009ae <__aeabi_ddiv+0x82>
 8000a40:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a44:	bf04      	itt	eq
 8000a46:	4301      	orreq	r1, r0
 8000a48:	2000      	moveq	r0, #0
 8000a4a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a4e:	bf88      	it	hi
 8000a50:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a54:	f63f aeaf 	bhi.w	80007b6 <__aeabi_dmul+0xde>
 8000a58:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a5c:	bf04      	itt	eq
 8000a5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a66:	f150 0000 	adcs.w	r0, r0, #0
 8000a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a7c:	bfc2      	ittt	gt
 8000a7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a86:	bd70      	popgt	{r4, r5, r6, pc}
 8000a88:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a8c:	f04f 0e00 	mov.w	lr, #0
 8000a90:	3c01      	subs	r4, #1
 8000a92:	e690      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a94:	ea45 0e06 	orr.w	lr, r5, r6
 8000a98:	e68d      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a9e:	ea94 0f0c 	teq	r4, ip
 8000aa2:	bf08      	it	eq
 8000aa4:	ea95 0f0c 	teqeq	r5, ip
 8000aa8:	f43f af3b 	beq.w	8000922 <__aeabi_dmul+0x24a>
 8000aac:	ea94 0f0c 	teq	r4, ip
 8000ab0:	d10a      	bne.n	8000ac8 <__aeabi_ddiv+0x19c>
 8000ab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ab6:	f47f af34 	bne.w	8000922 <__aeabi_dmul+0x24a>
 8000aba:	ea95 0f0c 	teq	r5, ip
 8000abe:	f47f af25 	bne.w	800090c <__aeabi_dmul+0x234>
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	e72c      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000ac8:	ea95 0f0c 	teq	r5, ip
 8000acc:	d106      	bne.n	8000adc <__aeabi_ddiv+0x1b0>
 8000ace:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ad2:	f43f aefd 	beq.w	80008d0 <__aeabi_dmul+0x1f8>
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	e722      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000adc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ae6:	f47f aec5 	bne.w	8000874 <__aeabi_dmul+0x19c>
 8000aea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aee:	f47f af0d 	bne.w	800090c <__aeabi_dmul+0x234>
 8000af2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000af6:	f47f aeeb 	bne.w	80008d0 <__aeabi_dmul+0x1f8>
 8000afa:	e712      	b.n	8000922 <__aeabi_dmul+0x24a>

08000afc <__gedf2>:
 8000afc:	f04f 3cff 	mov.w	ip, #4294967295
 8000b00:	e006      	b.n	8000b10 <__cmpdf2+0x4>
 8000b02:	bf00      	nop

08000b04 <__ledf2>:
 8000b04:	f04f 0c01 	mov.w	ip, #1
 8000b08:	e002      	b.n	8000b10 <__cmpdf2+0x4>
 8000b0a:	bf00      	nop

08000b0c <__cmpdf2>:
 8000b0c:	f04f 0c01 	mov.w	ip, #1
 8000b10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b26:	d01b      	beq.n	8000b60 <__cmpdf2+0x54>
 8000b28:	b001      	add	sp, #4
 8000b2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b2e:	bf0c      	ite	eq
 8000b30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b34:	ea91 0f03 	teqne	r1, r3
 8000b38:	bf02      	ittt	eq
 8000b3a:	ea90 0f02 	teqeq	r0, r2
 8000b3e:	2000      	moveq	r0, #0
 8000b40:	4770      	bxeq	lr
 8000b42:	f110 0f00 	cmn.w	r0, #0
 8000b46:	ea91 0f03 	teq	r1, r3
 8000b4a:	bf58      	it	pl
 8000b4c:	4299      	cmppl	r1, r3
 8000b4e:	bf08      	it	eq
 8000b50:	4290      	cmpeq	r0, r2
 8000b52:	bf2c      	ite	cs
 8000b54:	17d8      	asrcs	r0, r3, #31
 8000b56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b5a:	f040 0001 	orr.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__cmpdf2+0x64>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d107      	bne.n	8000b80 <__cmpdf2+0x74>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d1d6      	bne.n	8000b28 <__cmpdf2+0x1c>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d0d3      	beq.n	8000b28 <__cmpdf2+0x1c>
 8000b80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdrcmple>:
 8000b88:	4684      	mov	ip, r0
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	4662      	mov	r2, ip
 8000b8e:	468c      	mov	ip, r1
 8000b90:	4619      	mov	r1, r3
 8000b92:	4663      	mov	r3, ip
 8000b94:	e000      	b.n	8000b98 <__aeabi_cdcmpeq>
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdcmpeq>:
 8000b98:	b501      	push	{r0, lr}
 8000b9a:	f7ff ffb7 	bl	8000b0c <__cmpdf2>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	bf48      	it	mi
 8000ba2:	f110 0f00 	cmnmi.w	r0, #0
 8000ba6:	bd01      	pop	{r0, pc}

08000ba8 <__aeabi_dcmpeq>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff fff4 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bb0:	bf0c      	ite	eq
 8000bb2:	2001      	moveq	r0, #1
 8000bb4:	2000      	movne	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmplt>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffea 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bc4:	bf34      	ite	cc
 8000bc6:	2001      	movcc	r0, #1
 8000bc8:	2000      	movcs	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmple>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffe0 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bd8:	bf94      	ite	ls
 8000bda:	2001      	movls	r0, #1
 8000bdc:	2000      	movhi	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmpge>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffce 	bl	8000b88 <__aeabi_cdrcmple>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmpgt>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffc4 	bl	8000b88 <__aeabi_cdrcmple>
 8000c00:	bf34      	ite	cc
 8000c02:	2001      	movcc	r0, #1
 8000c04:	2000      	movcs	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpun>:
 8000c0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x10>
 8000c16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c1a:	d10a      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x20>
 8000c26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0001 	mov.w	r0, #1
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2iz>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c40:	d215      	bcs.n	8000c6e <__aeabi_d2iz+0x36>
 8000c42:	d511      	bpl.n	8000c68 <__aeabi_d2iz+0x30>
 8000c44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c4c:	d912      	bls.n	8000c74 <__aeabi_d2iz+0x3c>
 8000c4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c62:	bf18      	it	ne
 8000c64:	4240      	negne	r0, r0
 8000c66:	4770      	bx	lr
 8000c68:	f04f 0000 	mov.w	r0, #0
 8000c6c:	4770      	bx	lr
 8000c6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c72:	d105      	bne.n	8000c80 <__aeabi_d2iz+0x48>
 8000c74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	bf08      	it	eq
 8000c7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b08f      	sub	sp, #60	@ 0x3c
 8000f7c:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 8000f7e:	f004 fa47 	bl	8005410 <HAL_Init>
	SystemClock_Config();				// Configure system clocks
 8000f82:	f000 f8f7 	bl	8001174 <SystemClock_Config>
	MX_GPIO_Init();
 8000f86:	f000 fa1f 	bl	80013c8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000f8a:	f000 f9ed 	bl	8001368 <MX_USART1_UART_Init>

	char msg[50];
    uint8_t previous_menu = MENU_NONE;  // Tracks the last active menu
 8000f8e:	2306      	movs	r3, #6
 8000f90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    sprintf(msg, "Hello World\r\n");    // Convert MEAS_data_ready to a string
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	4970      	ldr	r1, [pc, #448]	@ (8001158 <main+0x1e0>)
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f00a fde7 	bl	800bb6c <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff f9d5 	bl	8000350 <strlen>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	1d39      	adds	r1, r7, #4
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	486a      	ldr	r0, [pc, #424]	@ (800115c <main+0x1e4>)
 8000fb2:	f008 fabe 	bl	8009532 <HAL_UART_Transmit>

#ifdef FLIPPED_LCD
	BSP_LCD_Init_Flipped();				// Initialize the LCD for flipped orientation
 8000fb6:	f003 f8a3 	bl	8004100 <BSP_LCD_Init_Flipped>
#else
	BSP_LCD_Init();						// Initialize the LCD display
#endif
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8000fba:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f003 f92c 	bl	800421c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f003 f98d 	bl	80042e4 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8000fca:	f003 fc5d 	bl	8004888 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000fce:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd2:	f003 f9e3 	bl	800439c <BSP_LCD_Clear>
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 8000fd6:	f003 f909 	bl	80041ec <BSP_LCD_GetXSize>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	b29c      	uxth	r4, r3
 8000fde:	f003 f911 	bl	8004204 <BSP_LCD_GetYSize>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f004 f83b 	bl	8005064 <BSP_TS_Init>

	PB_init();							// Initialize the user pushbutton
 8000fee:	f001 ff09 	bl	8002e04 <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 8000ff2:	f001 ff27 	bl	8002e44 <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f002 fca0 	bl	800393c <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f002 fc9d 	bl	800393c <BSP_LED_Init>

	MENU_draw();						// Draw the menu
 8001002:	f001 fd2d 	bl	8002a60 <MENU_draw>
	MENU_hint();						// Show hint at startup
 8001006:	f001 fdd9 	bl	8002bbc <MENU_hint>

	gyro_disable();						// Disable gyro, use those analog inputs
 800100a:	f000 f931 	bl	8001270 <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 800100e:	f000 fb01 	bl	8001614 <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 8001012:	f000 fb9b 	bl	800174c <MEAS_timer_init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800101c:	4850      	ldr	r0, [pc, #320]	@ (8001160 <main+0x1e8>)
 800101e:	f005 f99f 	bl	8006360 <HAL_GPIO_WritePin>
	//FFT_init();  						// Nach MEAS_timer_init()


	/* Infinite while loop */
	while (1) {							// Infinitely loop in main function
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8001022:	2000      	movs	r0, #0
 8001024:	f002 fcde 	bl	80039e4 <BSP_LED_Toggle>

	    sprintf(msg, "active menu: %d\r\n", active_menu);    // Convert MEAS_data_ready to a string
 8001028:	4b4e      	ldr	r3, [pc, #312]	@ (8001164 <main+0x1ec>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	494d      	ldr	r1, [pc, #308]	@ (8001168 <main+0x1f0>)
 8001032:	4618      	mov	r0, r3
 8001034:	f00a fd9a 	bl	800bb6c <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f988 	bl	8000350 <strlen>
 8001040:	4603      	mov	r3, r0
 8001042:	b29a      	uxth	r2, r3
 8001044:	1d39      	adds	r1, r7, #4
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	4844      	ldr	r0, [pc, #272]	@ (800115c <main+0x1e4>)
 800104c:	f008 fa71 	bl	8009532 <HAL_UART_Transmit>

		if (MEAS_data_ready) {			// Show data if new data available
 8001050:	4b46      	ldr	r3, [pc, #280]	@ (800116c <main+0x1f4>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d019      	beq.n	800108c <main+0x114>
			if(active_menu == MENU_ONE){
 8001058:	4b42      	ldr	r3, [pc, #264]	@ (8001164 <main+0x1ec>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d112      	bne.n	8001086 <main+0x10e>
				sprintf(msg, "Showing data\r\n");    // Convert MEAS_data_ready to a string
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	4943      	ldr	r1, [pc, #268]	@ (8001170 <main+0x1f8>)
 8001064:	4618      	mov	r0, r3
 8001066:	f00a fd81 	bl	800bb6c <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff f96f 	bl	8000350 <strlen>
 8001072:	4603      	mov	r3, r0
 8001074:	b29a      	uxth	r2, r3
 8001076:	1d39      	adds	r1, r7, #4
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	4837      	ldr	r0, [pc, #220]	@ (800115c <main+0x1e4>)
 800107e:	f008 fa58 	bl	8009532 <HAL_UART_Transmit>
				show_data_menu_one();
 8001082:	f001 fc57 	bl	8002934 <show_data_menu_one>
	        }
			MEAS_data_ready = false;
 8001086:	4b39      	ldr	r3, [pc, #228]	@ (800116c <main+0x1f4>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
		}

		if(active_menu == MENU_ZERO){
 800108c:	4b35      	ldr	r3, [pc, #212]	@ (8001164 <main+0x1ec>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d112      	bne.n	80010ba <main+0x142>
		    sprintf(msg, "Showing data\r\n");    // Convert MEAS_data_ready to a string
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	4936      	ldr	r1, [pc, #216]	@ (8001170 <main+0x1f8>)
 8001098:	4618      	mov	r0, r3
 800109a:	f00a fd67 	bl	800bb6c <siprintf>
		    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f955 	bl	8000350 <strlen>
 80010a6:	4603      	mov	r3, r0
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	1d39      	adds	r1, r7, #4
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
 80010b0:	482a      	ldr	r0, [pc, #168]	@ (800115c <main+0x1e4>)
 80010b2:	f008 fa3e 	bl	8009532 <HAL_UART_Transmit>
		    show_data_menu_zero();
 80010b6:	f001 fb4d 	bl	8002754 <show_data_menu_zero>
		}



		MENU_check_transition();
 80010ba:	f001 fdd9 	bl	8002c70 <MENU_check_transition>

		switch (MENU_get_transition()) {	// Handle user menu choice
 80010be:	f001 fdcb 	bl	8002c58 <MENU_get_transition>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b06      	cmp	r3, #6
 80010c6:	d840      	bhi.n	800114a <main+0x1d2>
 80010c8:	a201      	add	r2, pc, #4	@ (adr r2, 80010d0 <main+0x158>)
 80010ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ce:	bf00      	nop
 80010d0:	080010f5 	.word	0x080010f5
 80010d4:	08001105 	.word	0x08001105
 80010d8:	08001123 	.word	0x08001123
 80010dc:	0800112d 	.word	0x0800112d
 80010e0:	08001137 	.word	0x08001137
 80010e4:	08001141 	.word	0x08001141
 80010e8:	080010ed 	.word	0x080010ed
		case MENU_NONE:
            active_menu = MENU_NONE;
 80010ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001164 <main+0x1ec>)
 80010ee:	2206      	movs	r2, #6
 80010f0:	701a      	strb	r2, [r3, #0]
			break;
 80010f2:	e02d      	b.n	8001150 <main+0x1d8>
		case MENU_ZERO:
            active_menu = MENU_ZERO;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <main+0x1ec>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
			ADC1_IN14_ADC2_IN15_dual_init();
 80010fa:	f000 f9df 	bl	80014bc <ADC1_IN14_ADC2_IN15_dual_init>
			ADC1_IN14_ADC2_IN15_dual_start();
 80010fe:	f000 fce3 	bl	8001ac8 <ADC1_IN14_ADC2_IN15_dual_start>
			break;
 8001102:	e025      	b.n	8001150 <main+0x1d8>
		case MENU_ONE:
            active_menu = MENU_ONE;
 8001104:	4b17      	ldr	r3, [pc, #92]	@ (8001164 <main+0x1ec>)
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
        	if (!MEAS_data_ready){
 800110a:	4b18      	ldr	r3, [pc, #96]	@ (800116c <main+0x1f4>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	f083 0301 	eor.w	r3, r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d01a      	beq.n	800114e <main+0x1d6>
        		ADC1_IN14_ADC2_IN15_dual_init();
 8001118:	f000 f9d0 	bl	80014bc <ADC1_IN14_ADC2_IN15_dual_init>
        		ADC1_IN14_ADC2_IN15_dual_start();
 800111c:	f000 fcd4 	bl	8001ac8 <ADC1_IN14_ADC2_IN15_dual_start>
        	}
			break;
 8001120:	e015      	b.n	800114e <main+0x1d6>
		case MENU_TWO:
			ADC3_IN4_DMA_init();
 8001122:	f000 fb49 	bl	80017b8 <ADC3_IN4_DMA_init>
			ADC3_IN4_DMA_start();
 8001126:	f000 fbd7 	bl	80018d8 <ADC3_IN4_DMA_start>
			break;
 800112a:	e011      	b.n	8001150 <main+0x1d8>
		case MENU_THREE:
			ADC1_IN13_ADC2_IN5_dual_init();
 800112c:	f000 fbf6 	bl	800191c <ADC1_IN13_ADC2_IN5_dual_init>
			ADC1_IN13_ADC2_IN5_dual_start();
 8001130:	f000 fca0 	bl	8001a74 <ADC1_IN13_ADC2_IN5_dual_start>
			break;
 8001134:	e00c      	b.n	8001150 <main+0x1d8>
		case MENU_FOUR:
			ADC2_IN13_IN5_scan_init();
 8001136:	f000 fcf1 	bl	8001b1c <ADC2_IN13_IN5_scan_init>
			ADC2_IN13_IN5_scan_start();
 800113a:	f000 fd91 	bl	8001c60 <ADC2_IN13_IN5_scan_start>
			break;
 800113e:	e007      	b.n	8001150 <main+0x1d8>
		case MENU_FIVE:
			ADC3_IN13_IN4_scan_init();
 8001140:	f000 fdb0 	bl	8001ca4 <ADC3_IN13_IN4_scan_init>
			ADC3_IN13_IN4_scan_start();
 8001144:	f000 fe50 	bl	8001de8 <ADC3_IN13_IN4_scan_start>
			break;
 8001148:	e002      	b.n	8001150 <main+0x1d8>
		default:						// Should never occur
			break;
 800114a:	bf00      	nop
 800114c:	e000      	b.n	8001150 <main+0x1d8>
			break;
 800114e:	bf00      	nop
		}

		HAL_Delay(200);					// Wait or sleep
 8001150:	20c8      	movs	r0, #200	@ 0xc8
 8001152:	f004 f9cf 	bl	80054f4 <HAL_Delay>
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8001156:	e764      	b.n	8001022 <main+0xaa>
 8001158:	0800de80 	.word	0x0800de80
 800115c:	20000380 	.word	0x20000380
 8001160:	40020000 	.word	0x40020000
 8001164:	20000000 	.word	0x20000000
 8001168:	0800de90 	.word	0x0800de90
 800116c:	200003c0 	.word	0x200003c0
 8001170:	0800dea4 	.word	0x0800dea4

08001174 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 8001174:	b580      	push	{r7, lr}
 8001176:	b0a0      	sub	sp, #128	@ 0x80
 8001178:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800117e:	2230      	movs	r2, #48	@ 0x30
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f00a fd55 	bl	800bc32 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	2230      	movs	r2, #48	@ 0x30
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f00a fd46 	bl	800bc32 <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001264 <SystemClock_Config+0xf0>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	4a2d      	ldr	r2, [pc, #180]	@ (8001264 <SystemClock_Config+0xf0>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001264 <SystemClock_Config+0xf0>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b28      	ldr	r3, [pc, #160]	@ (8001268 <SystemClock_Config+0xf4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a27      	ldr	r2, [pc, #156]	@ (8001268 <SystemClock_Config+0xf4>)
 80011cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <SystemClock_Config+0xf4>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011de:	2301      	movs	r3, #1
 80011e0:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011e6:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e8:	2302      	movs	r3, #2
 80011ea:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80011f2:	2308      	movs	r3, #8
 80011f4:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 80011f6:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011fa:	677b      	str	r3, [r7, #116]	@ 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001200:	2307      	movs	r3, #7
 8001202:	67fb      	str	r3, [r7, #124]	@ 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001204:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001208:	4618      	mov	r0, r3
 800120a:	f006 fbc5 	bl	8007998 <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800120e:	230f      	movs	r3, #15
 8001210:	63fb      	str	r3, [r7, #60]	@ 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001212:	2302      	movs	r3, #2
 8001214:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800121a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800121e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001220:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001224:	64fb      	str	r3, [r7, #76]	@ 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001226:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800122a:	2105      	movs	r1, #5
 800122c:	4618      	mov	r0, r3
 800122e:	f006 fe21 	bl	8007e74 <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001232:	2308      	movs	r3, #8
 8001234:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001236:	23c0      	movs	r3, #192	@ 0xc0
 8001238:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800123a:	2304      	movs	r3, #4
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800123e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001242:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	4618      	mov	r0, r3
 800124a:	f007 f833 	bl	80082b4 <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 800124e:	4b07      	ldr	r3, [pc, #28]	@ (800126c <SystemClock_Config+0xf8>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	4a06      	ldr	r2, [pc, #24]	@ (800126c <SystemClock_Config+0xf8>)
 8001254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001258:	6053      	str	r3, [r2, #4]
}
 800125a:	bf00      	nop
 800125c:	3780      	adds	r7, #128	@ 0x80
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40007000 	.word	0x40007000
 800126c:	40012300 	.word	0x40012300

08001270 <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4b2a      	ldr	r3, [pc, #168]	@ (8001324 <gyro_disable+0xb4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a29      	ldr	r2, [pc, #164]	@ (8001324 <gyro_disable+0xb4>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b27      	ldr	r3, [pc, #156]	@ (8001324 <gyro_disable+0xb4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;	// Reset mode for PC1
 8001292:	4b25      	ldr	r3, [pc, #148]	@ (8001328 <gyro_disable+0xb8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a24      	ldr	r2, [pc, #144]	@ (8001328 <gyro_disable+0xb8>)
 8001298:	f023 030c 	bic.w	r3, r3, #12
 800129c:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;	// Set PC1 as output
 800129e:	4b22      	ldr	r3, [pc, #136]	@ (8001328 <gyro_disable+0xb8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a21      	ldr	r2, [pc, #132]	@ (8001328 <gyro_disable+0xb8>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 80012aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001328 <gyro_disable+0xb8>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001328 <gyro_disable+0xb8>)
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b4:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 80012b6:	200a      	movs	r0, #10
 80012b8:	f004 f91c 	bl	80054f4 <HAL_Delay>
	GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;	// Analog PC1 = ADC123_IN11
 80012bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <gyro_disable+0xb8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a19      	ldr	r2, [pc, #100]	@ (8001328 <gyro_disable+0xb8>)
 80012c2:	f043 030c 	orr.w	r3, r3, #12
 80012c6:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 80012c8:	2300      	movs	r3, #0
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <gyro_disable+0xb4>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d0:	4a14      	ldr	r2, [pc, #80]	@ (8001324 <gyro_disable+0xb4>)
 80012d2:	f043 0320 	orr.w	r3, r3, #32
 80012d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d8:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <gyro_disable+0xb4>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	f003 0320 	and.w	r3, r3, #32
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;	// Reset speed of PF8
 80012e4:	4b11      	ldr	r3, [pc, #68]	@ (800132c <gyro_disable+0xbc>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	4a10      	ldr	r2, [pc, #64]	@ (800132c <gyro_disable+0xbc>)
 80012ea:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80012ee:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;	// Reset alternate function of PF8
 80012f0:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <gyro_disable+0xbc>)
 80012f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f4:	4a0d      	ldr	r2, [pc, #52]	@ (800132c <gyro_disable+0xbc>)
 80012f6:	f023 030f 	bic.w	r3, r3, #15
 80012fa:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;	// Reset pulup/down of PF8
 80012fc:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <gyro_disable+0xbc>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <gyro_disable+0xbc>)
 8001302:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001306:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 8001308:	200a      	movs	r0, #10
 800130a:	f004 f8f3 	bl	80054f4 <HAL_Delay>
	GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos; // Analog mode PF8 = ADC3_IN4
 800130e:	4b07      	ldr	r3, [pc, #28]	@ (800132c <gyro_disable+0xbc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a06      	ldr	r2, [pc, #24]	@ (800132c <gyro_disable+0xbc>)
 8001314:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8001318:	6013      	str	r3, [r2, #0]
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40020800 	.word	0x40020800
 800132c:	40021400 	.word	0x40021400

08001330 <_close>:


// Default function implementations required to prevent build errors.
__attribute__((weak)) void _close(void){}
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <_lseek>:
__attribute__((weak)) void _lseek(void){}
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <_read>:
__attribute__((weak)) void _read(void){}
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <_write>:
__attribute__((weak)) void _write(void){}
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <MX_USART1_UART_Init+0x4c>)
 800136e:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <MX_USART1_UART_Init+0x50>)
 8001370:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001372:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001374:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001378:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <MX_USART1_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <MX_USART1_UART_Init+0x4c>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <MX_USART1_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <MX_USART1_UART_Init+0x4c>)
 80013a0:	f008 f87a 	bl	8009498 <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013aa:	f000 f807 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000380 	.word	0x20000380
 80013b8:	40011000 	.word	0x40011000

080013bc <Error_Handler>:

void Error_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c0:	b672      	cpsid	i
}
 80013c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <Error_Handler+0x8>

080013c8 <MX_GPIO_Init>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_GPIO_Init(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <MX_GPIO_Init+0x30>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a08      	ldr	r2, [pc, #32]	@ (80013f8 <MX_GPIO_Init+0x30>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <MX_GPIO_Init+0x30>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800

080013fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	db0b      	blt.n	8001426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	f003 021f 	and.w	r2, r3, #31
 8001414:	4907      	ldr	r1, [pc, #28]	@ (8001434 <__NVIC_EnableIRQ+0x38>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	095b      	lsrs	r3, r3, #5
 800141c:	2001      	movs	r0, #1
 800141e:	fa00 f202 	lsl.w	r2, r0, r2
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000e100 	.word	0xe000e100

08001438 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db12      	blt.n	8001470 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	490a      	ldr	r1, [pc, #40]	@ (800147c <__NVIC_DisableIRQ+0x44>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	3320      	adds	r3, #32
 8001460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001464:	f3bf 8f4f 	dsb	sy
}
 8001468:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800146a:	f3bf 8f6f 	isb	sy
}
 800146e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100

08001480 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	2b00      	cmp	r3, #0
 8001490:	db0c      	blt.n	80014ac <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 021f 	and.w	r2, r3, #31
 8001498:	4907      	ldr	r1, [pc, #28]	@ (80014b8 <__NVIC_ClearPendingIRQ+0x38>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	2001      	movs	r0, #1
 80014a2:	fa00 f202 	lsl.w	r2, r0, r2
 80014a6:	3360      	adds	r3, #96	@ 0x60
 80014a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100

080014bc <ADC1_IN14_ADC2_IN15_dual_init>:
//}



void ADC1_IN14_ADC2_IN15_dual_init(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
    MEAS_input_count = 2;                // 2 inputs are converted
 80014c2:	4b4b      	ldr	r3, [pc, #300]	@ (80015f0 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 80014c4:	2202      	movs	r2, #2
 80014c6:	601a      	str	r2, [r3, #0]
    __HAL_RCC_ADC1_CLK_ENABLE();        // Enable Clock for ADC1
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	4b49      	ldr	r3, [pc, #292]	@ (80015f4 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 80014ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d0:	4a48      	ldr	r2, [pc, #288]	@ (80015f4 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 80014d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d8:	4b46      	ldr	r3, [pc, #280]	@ (80015f4 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 80014da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_ADC2_CLK_ENABLE();        // Enable Clock for ADC2
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	4b42      	ldr	r3, [pc, #264]	@ (80015f4 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 80014ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ec:	4a41      	ldr	r2, [pc, #260]	@ (80015f4 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 80014ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f4:	4b3f      	ldr	r3, [pc, #252]	@ (80015f4 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 80014f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]

    // Common ADC configuration
    ADC->CCR |= ADC_CCR_DMA_1;            // Enable DMA mode 2 = dual DMA
 8001500:	4b3d      	ldr	r3, [pc, #244]	@ (80015f8 <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4a3c      	ldr	r2, [pc, #240]	@ (80015f8 <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 8001506:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800150a:	6053      	str	r3, [r2, #4]
    ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2 simultaneous
 800150c:	4b3a      	ldr	r3, [pc, #232]	@ (80015f8 <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4a39      	ldr	r2, [pc, #228]	@ (80015f8 <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 8001512:	f043 0306 	orr.w	r3, r3, #6
 8001516:	6053      	str	r3, [r2, #4]

    // ADC1 configuration
    ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);    // Enable external trigger on rising edge
 8001518:	4b38      	ldr	r3, [pc, #224]	@ (80015fc <ADC1_IN14_ADC2_IN15_dual_init+0x140>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	4a37      	ldr	r2, [pc, #220]	@ (80015fc <ADC1_IN14_ADC2_IN15_dual_init+0x140>)
 800151e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001522:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);   // Timer 2 TRGO event
 8001524:	4b35      	ldr	r3, [pc, #212]	@ (80015fc <ADC1_IN14_ADC2_IN15_dual_init+0x140>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4a34      	ldr	r2, [pc, #208]	@ (80015fc <ADC1_IN14_ADC2_IN15_dual_init+0x140>)
 800152a:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 800152e:	6093      	str	r3, [r2, #8]
    ADC1->SQR3 |= (14UL << ADC_SQR3_SQ1_Pos);   // Input 14 = first conversion (changed from 13)
 8001530:	4b32      	ldr	r3, [pc, #200]	@ (80015fc <ADC1_IN14_ADC2_IN15_dual_init+0x140>)
 8001532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001534:	4a31      	ldr	r2, [pc, #196]	@ (80015fc <ADC1_IN14_ADC2_IN15_dual_init+0x140>)
 8001536:	f043 030e 	orr.w	r3, r3, #14
 800153a:	6353      	str	r3, [r2, #52]	@ 0x34

    // ADC2 configuration
    ADC2->SQR3 |= (15UL << ADC_SQR3_SQ1_Pos);   // Input 15 = first conversion (changed from 5)
 800153c:	4b30      	ldr	r3, [pc, #192]	@ (8001600 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 800153e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001540:	4a2f      	ldr	r2, [pc, #188]	@ (8001600 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8001542:	f043 030f 	orr.w	r3, r3, #15
 8001546:	6353      	str	r3, [r2, #52]	@ 0x34

    // DMA configuration
    __HAL_RCC_DMA2_CLK_ENABLE();        // Enable Clock for DMA2
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	4b29      	ldr	r3, [pc, #164]	@ (80015f4 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001550:	4a28      	ldr	r2, [pc, #160]	@ (80015f4 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 8001552:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001556:	6313      	str	r3, [r2, #48]	@ 0x30
 8001558:	4b26      	ldr	r3, [pc, #152]	@ (80015f4 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
    DMA2_Stream4->CR &= ~DMA_SxCR_EN;    // Disable the DMA stream 4
 8001564:	4b27      	ldr	r3, [pc, #156]	@ (8001604 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a26      	ldr	r2, [pc, #152]	@ (8001604 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 800156a:	f023 0301 	bic.w	r3, r3, #1
 800156e:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }    // Wait for DMA to finish
 8001570:	bf00      	nop
 8001572:	4b24      	ldr	r3, [pc, #144]	@ (8001604 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f9      	bne.n	8001572 <ADC1_IN14_ADC2_IN15_dual_init+0xb6>

    DMA2->HIFCR |= DMA_HIFCR_CTCIF4;    // Clear transfer complete interrupt flag
 800157e:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <ADC1_IN14_ADC2_IN15_dual_init+0x14c>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	4a21      	ldr	r2, [pc, #132]	@ (8001608 <ADC1_IN14_ADC2_IN15_dual_init+0x14c>)
 8001584:	f043 0320 	orr.w	r3, r3, #32
 8001588:	60d3      	str	r3, [r2, #12]
    DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);    // Select channel 0
 800158a:	4b1e      	ldr	r3, [pc, #120]	@ (8001604 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 800158c:	4a1d      	ldr	r2, [pc, #116]	@ (8001604 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_PL_1;        // Priority high
 8001592:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1b      	ldr	r2, [pc, #108]	@ (8001604 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 8001598:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800159c:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;    // Memory data size = 32 bit
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a18      	ldr	r2, [pc, #96]	@ (8001604 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a8:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;    // Peripheral data size = 32 bit
 80015aa:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a15      	ldr	r2, [pc, #84]	@ (8001604 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015b4:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_MINC;        // Increment memory address pointer
 80015b6:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a12      	ldr	r2, [pc, #72]	@ (8001604 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015c0:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_TCIE;        // Transfer complete interrupt enable
 80015c2:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001604 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015c8:	f043 0310 	orr.w	r3, r3, #16
 80015cc:	6013      	str	r3, [r2, #0]

    DMA2_Stream4->NDTR = ADC_NUMS;        // Number of data items to transfer
 80015ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001604 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015d4:	605a      	str	r2, [r3, #4]
    DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;    // Peripheral register address
 80015d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015d8:	4a0c      	ldr	r2, [pc, #48]	@ (800160c <ADC1_IN14_ADC2_IN15_dual_init+0x150>)
 80015da:	609a      	str	r2, [r3, #8]
    DMA2_Stream4->M0AR = (uint32_t)ADC_samples;    // Buffer memory location address
 80015dc:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015de:	4a0c      	ldr	r2, [pc, #48]	@ (8001610 <ADC1_IN14_ADC2_IN15_dual_init+0x154>)
 80015e0:	60da      	str	r2, [r3, #12]
}
 80015e2:	bf00      	nop
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000004 	.word	0x20000004
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40012300 	.word	0x40012300
 80015fc:	40012000 	.word	0x40012000
 8001600:	40012100 	.word	0x40012100
 8001604:	40026470 	.word	0x40026470
 8001608:	40026400 	.word	0x40026400
 800160c:	40012308 	.word	0x40012308
 8001610:	200003c8 	.word	0x200003c8

08001614 <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b2a      	ldr	r3, [pc, #168]	@ (80016c8 <MEAS_GPIO_analog_init+0xb4>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a29      	ldr	r2, [pc, #164]	@ (80016c8 <MEAS_GPIO_analog_init+0xb4>)
 8001624:	f043 0320 	orr.w	r3, r3, #32
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b27      	ldr	r3, [pc, #156]	@ (80016c8 <MEAS_GPIO_analog_init+0xb4>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f003 0320 	and.w	r3, r3, #32
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
	GPIOF->MODER |= (3UL << GPIO_MODER_MODER6_Pos);	// Analog PF6 = ADC3_IN4
 8001636:	4b25      	ldr	r3, [pc, #148]	@ (80016cc <MEAS_GPIO_analog_init+0xb8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a24      	ldr	r2, [pc, #144]	@ (80016cc <MEAS_GPIO_analog_init+0xb8>)
 800163c:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8001640:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	4b20      	ldr	r3, [pc, #128]	@ (80016c8 <MEAS_GPIO_analog_init+0xb4>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a1f      	ldr	r2, [pc, #124]	@ (80016c8 <MEAS_GPIO_analog_init+0xb4>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <MEAS_GPIO_analog_init+0xb4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
	GPIOC->MODER |= (3UL << GPIO_MODER_MODER3_Pos);	// Analog PC3 = ADC123_IN13
 800165e:	4b1c      	ldr	r3, [pc, #112]	@ (80016d0 <MEAS_GPIO_analog_init+0xbc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a1b      	ldr	r2, [pc, #108]	@ (80016d0 <MEAS_GPIO_analog_init+0xbc>)
 8001664:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001668:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <MEAS_GPIO_analog_init+0xb4>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a15      	ldr	r2, [pc, #84]	@ (80016c8 <MEAS_GPIO_analog_init+0xb4>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <MEAS_GPIO_analog_init+0xb4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (3UL << GPIO_MODER_MODER5_Pos);	// Analog PA5 ADC12_IN5
 8001686:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <MEAS_GPIO_analog_init+0xc0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <MEAS_GPIO_analog_init+0xc0>)
 800168c:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8001690:	6013      	str	r3, [r2, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <MEAS_GPIO_analog_init+0xb4>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a0b      	ldr	r2, [pc, #44]	@ (80016c8 <MEAS_GPIO_analog_init+0xb4>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <MEAS_GPIO_analog_init+0xb4>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]
    // Für ADC1_IN14 (PC4) und ADC2_IN15 (PC5)
    GPIOC->MODER |= (3UL << GPIO_MODER_MODER4_Pos) | (3UL << GPIO_MODER_MODER5_Pos);
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <MEAS_GPIO_analog_init+0xbc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a07      	ldr	r2, [pc, #28]	@ (80016d0 <MEAS_GPIO_analog_init+0xbc>)
 80016b4:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 80016b8:	6013      	str	r3, [r2, #0]
}
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40021400 	.word	0x40021400
 80016d0:	40020800 	.word	0x40020800
 80016d4:	40020000 	.word	0x40020000

080016d8 <DAC_increment>:

/** ***************************************************************************
 * @brief Increment the DAC value and write it to the output
 *
 *****************************************************************************/
void DAC_increment(void) {
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
	DAC_sample += 20;				// Increment DAC output
 80016dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <DAC_increment+0x30>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	3314      	adds	r3, #20
 80016e2:	4a09      	ldr	r2, [pc, #36]	@ (8001708 <DAC_increment+0x30>)
 80016e4:	6013      	str	r3, [r2, #0]
	if (DAC_sample >= (1UL << ADC_DAC_RES)) { DAC_sample = 0; }	// Go to 0
 80016e6:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <DAC_increment+0x30>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016ee:	d302      	bcc.n	80016f6 <DAC_increment+0x1e>
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <DAC_increment+0x30>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
	DAC->DHR12R2 = DAC_sample;		// Write new DAC output value
 80016f6:	4a05      	ldr	r2, [pc, #20]	@ (800170c <DAC_increment+0x34>)
 80016f8:	4b03      	ldr	r3, [pc, #12]	@ (8001708 <DAC_increment+0x30>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6153      	str	r3, [r2, #20]
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	20000bc8 	.word	0x20000bc8
 800170c:	40007400 	.word	0x40007400

08001710 <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 8001714:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <ADC_reset+0x38>)
 8001716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001718:	4a0b      	ldr	r2, [pc, #44]	@ (8001748 <ADC_reset+0x38>)
 800171a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800171e:	6253      	str	r3, [r2, #36]	@ 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 8001720:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <ADC_reset+0x38>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001724:	4a08      	ldr	r2, [pc, #32]	@ (8001748 <ADC_reset+0x38>)
 8001726:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800172a:	6253      	str	r3, [r2, #36]	@ 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 800172c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800

0800174c <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <MEAS_timer_init+0x68>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	4a16      	ldr	r2, [pc, #88]	@ (80017b4 <MEAS_timer_init+0x68>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6413      	str	r3, [r2, #64]	@ 0x40
 8001762:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <MEAS_timer_init+0x68>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 800176e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001772:	f240 628f 	movw	r2, #1679	@ 0x68f
 8001776:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 8001778:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800177c:	2209      	movs	r2, #9
 800177e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 8001780:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800178a:	f043 0320 	orr.w	r3, r3, #32
 800178e:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 8001790:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 80017a0:	201c      	movs	r0, #28
 80017a2:	f7ff fe6d 	bl	8001480 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 80017a6:	201c      	movs	r0, #28
 80017a8:	f7ff fe28 	bl	80013fc <__NVIC_EnableIRQ>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40023800 	.word	0x40023800

080017b8 <ADC3_IN4_DMA_init>:
 * to memory without CPU intervention.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input is ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN4_DMA_init(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
	MEAS_input_count = 1;				// Only 1 input is converted
 80017be:	4b3f      	ldr	r3, [pc, #252]	@ (80018bc <ADC3_IN4_DMA_init+0x104>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 80017c4:	2300      	movs	r3, #0
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	4b3d      	ldr	r3, [pc, #244]	@ (80018c0 <ADC3_IN4_DMA_init+0x108>)
 80017ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017cc:	4a3c      	ldr	r2, [pc, #240]	@ (80018c0 <ADC3_IN4_DMA_init+0x108>)
 80017ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80017d4:	4b3a      	ldr	r3, [pc, #232]	@ (80018c0 <ADC3_IN4_DMA_init+0x108>)
 80017d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ1_Pos);	// Input 4 = first conversion
 80017e0:	4b38      	ldr	r3, [pc, #224]	@ (80018c4 <ADC3_IN4_DMA_init+0x10c>)
 80017e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017e4:	4a37      	ldr	r2, [pc, #220]	@ (80018c4 <ADC3_IN4_DMA_init+0x10c>)
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 80017ec:	4b35      	ldr	r3, [pc, #212]	@ (80018c4 <ADC3_IN4_DMA_init+0x10c>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a34      	ldr	r2, [pc, #208]	@ (80018c4 <ADC3_IN4_DMA_init+0x10c>)
 80017f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f6:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 80017f8:	4b32      	ldr	r3, [pc, #200]	@ (80018c4 <ADC3_IN4_DMA_init+0x10c>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	4a31      	ldr	r2, [pc, #196]	@ (80018c4 <ADC3_IN4_DMA_init+0x10c>)
 80017fe:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8001802:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001804:	4b2f      	ldr	r3, [pc, #188]	@ (80018c4 <ADC3_IN4_DMA_init+0x10c>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a2e      	ldr	r2, [pc, #184]	@ (80018c4 <ADC3_IN4_DMA_init+0x10c>)
 800180a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800180e:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001810:	2300      	movs	r3, #0
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	4b2a      	ldr	r3, [pc, #168]	@ (80018c0 <ADC3_IN4_DMA_init+0x108>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001818:	4a29      	ldr	r2, [pc, #164]	@ (80018c0 <ADC3_IN4_DMA_init+0x108>)
 800181a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800181e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001820:	4b27      	ldr	r3, [pc, #156]	@ (80018c0 <ADC3_IN4_DMA_init+0x108>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001824:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 800182c:	4b26      	ldr	r3, [pc, #152]	@ (80018c8 <ADC3_IN4_DMA_init+0x110>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a25      	ldr	r2, [pc, #148]	@ (80018c8 <ADC3_IN4_DMA_init+0x110>)
 8001832:	f023 0301 	bic.w	r3, r3, #1
 8001836:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001838:	bf00      	nop
 800183a:	4b23      	ldr	r3, [pc, #140]	@ (80018c8 <ADC3_IN4_DMA_init+0x110>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f9      	bne.n	800183a <ADC3_IN4_DMA_init+0x82>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 8001846:	4b21      	ldr	r3, [pc, #132]	@ (80018cc <ADC3_IN4_DMA_init+0x114>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	4a20      	ldr	r2, [pc, #128]	@ (80018cc <ADC3_IN4_DMA_init+0x114>)
 800184c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001850:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 8001852:	4b1d      	ldr	r3, [pc, #116]	@ (80018c8 <ADC3_IN4_DMA_init+0x110>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a1c      	ldr	r2, [pc, #112]	@ (80018c8 <ADC3_IN4_DMA_init+0x110>)
 8001858:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800185c:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 800185e:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <ADC3_IN4_DMA_init+0x110>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a19      	ldr	r2, [pc, #100]	@ (80018c8 <ADC3_IN4_DMA_init+0x110>)
 8001864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001868:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 800186a:	4b17      	ldr	r3, [pc, #92]	@ (80018c8 <ADC3_IN4_DMA_init+0x110>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a16      	ldr	r2, [pc, #88]	@ (80018c8 <ADC3_IN4_DMA_init+0x110>)
 8001870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001874:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001876:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <ADC3_IN4_DMA_init+0x110>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a13      	ldr	r2, [pc, #76]	@ (80018c8 <ADC3_IN4_DMA_init+0x110>)
 800187c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001880:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001882:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <ADC3_IN4_DMA_init+0x110>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a10      	ldr	r2, [pc, #64]	@ (80018c8 <ADC3_IN4_DMA_init+0x110>)
 8001888:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800188c:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 800188e:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <ADC3_IN4_DMA_init+0x110>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a0d      	ldr	r2, [pc, #52]	@ (80018c8 <ADC3_IN4_DMA_init+0x110>)
 8001894:	f043 0310 	orr.w	r3, r3, #16
 8001898:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = ADC_NUMS;		// Number of data items to transfer
 800189a:	4b0b      	ldr	r3, [pc, #44]	@ (80018c8 <ADC3_IN4_DMA_init+0x110>)
 800189c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018a0:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 80018a2:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <ADC3_IN4_DMA_init+0x110>)
 80018a4:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <ADC3_IN4_DMA_init+0x118>)
 80018a6:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 80018a8:	4b07      	ldr	r3, [pc, #28]	@ (80018c8 <ADC3_IN4_DMA_init+0x110>)
 80018aa:	4a0a      	ldr	r2, [pc, #40]	@ (80018d4 <ADC3_IN4_DMA_init+0x11c>)
 80018ac:	60da      	str	r2, [r3, #12]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000004 	.word	0x20000004
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40012200 	.word	0x40012200
 80018c8:	40026428 	.word	0x40026428
 80018cc:	40026400 	.word	0x40026400
 80018d0:	4001224c 	.word	0x4001224c
 80018d4:	200003c8 	.word	0x200003c8

080018d8 <ADC3_IN4_DMA_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_IN4_DMA_start(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 80018dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001914 <ADC3_IN4_DMA_start+0x3c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001914 <ADC3_IN4_DMA_start+0x3c>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 80018e8:	2039      	movs	r0, #57	@ 0x39
 80018ea:	f7ff fdc9 	bl	8001480 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 80018ee:	2039      	movs	r0, #57	@ 0x39
 80018f0:	f7ff fd84 	bl	80013fc <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 80018f4:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <ADC3_IN4_DMA_start+0x40>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4a07      	ldr	r2, [pc, #28]	@ (8001918 <ADC3_IN4_DMA_start+0x40>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001900:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6013      	str	r3, [r2, #0]
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40026428 	.word	0x40026428
 8001918:	40012200 	.word	0x40012200

0800191c <ADC1_IN13_ADC2_IN5_dual_init>:
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input used with ADC1 is ADC123_IN13 = GPIO PC3
 * @n The input used with ADC2 is ADC12_IN5 = GPIO PA5
 *****************************************************************************/
void ADC1_IN13_ADC2_IN5_dual_init(void)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 8001922:	4b4b      	ldr	r3, [pc, #300]	@ (8001a50 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8001924:	2202      	movs	r2, #2
 8001926:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC1_CLK_ENABLE();		// Enable Clock for ADC1
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	4b49      	ldr	r3, [pc, #292]	@ (8001a54 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 800192e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001930:	4a48      	ldr	r2, [pc, #288]	@ (8001a54 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 8001932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001936:	6453      	str	r3, [r2, #68]	@ 0x44
 8001938:	4b46      	ldr	r3, [pc, #280]	@ (8001a54 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 800193a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	4b42      	ldr	r3, [pc, #264]	@ (8001a54 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 800194a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194c:	4a41      	ldr	r2, [pc, #260]	@ (8001a54 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 800194e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001952:	6453      	str	r3, [r2, #68]	@ 0x44
 8001954:	4b3f      	ldr	r3, [pc, #252]	@ (8001a54 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 8001956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001958:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
	ADC->CCR |= ADC_CCR_DMA_1;			// Enable DMA mode 2 = dual DMA
 8001960:	4b3d      	ldr	r3, [pc, #244]	@ (8001a58 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4a3c      	ldr	r2, [pc, #240]	@ (8001a58 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8001966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800196a:	6053      	str	r3, [r2, #4]
	ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2 simultan.
 800196c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a58 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	4a39      	ldr	r2, [pc, #228]	@ (8001a58 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8001972:	f043 0306 	orr.w	r3, r3, #6
 8001976:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001978:	4b38      	ldr	r3, [pc, #224]	@ (8001a5c <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a37      	ldr	r2, [pc, #220]	@ (8001a5c <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 800197e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001982:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001984:	4b35      	ldr	r3, [pc, #212]	@ (8001a5c <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	4a34      	ldr	r2, [pc, #208]	@ (8001a5c <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 800198a:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 800198e:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8001990:	4b32      	ldr	r3, [pc, #200]	@ (8001a5c <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 8001992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001994:	4a31      	ldr	r2, [pc, #196]	@ (8001a5c <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 8001996:	f043 030d 	orr.w	r3, r3, #13
 800199a:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->SQR3 |= (5UL << ADC_SQR3_SQ1_Pos);	// Input 5 = first conversion
 800199c:	4b30      	ldr	r3, [pc, #192]	@ (8001a60 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 800199e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001a60 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 80019a2:	f043 0305 	orr.w	r3, r3, #5
 80019a6:	6353      	str	r3, [r2, #52]	@ 0x34
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 80019a8:	2300      	movs	r3, #0
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	4b29      	ldr	r3, [pc, #164]	@ (8001a54 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b0:	4a28      	ldr	r2, [pc, #160]	@ (8001a54 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 80019b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b8:	4b26      	ldr	r3, [pc, #152]	@ (8001a54 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
	DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 4
 80019c4:	4b27      	ldr	r3, [pc, #156]	@ (8001a64 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a26      	ldr	r2, [pc, #152]	@ (8001a64 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 80019ca:	f023 0301 	bic.w	r3, r3, #1
 80019ce:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80019d0:	bf00      	nop
 80019d2:	4b24      	ldr	r3, [pc, #144]	@ (8001a64 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f9      	bne.n	80019d2 <ADC1_IN13_ADC2_IN5_dual_init+0xb6>
	DMA2->HIFCR |= DMA_HIFCR_CTCIF4;	// Clear transfer complete interrupt fl.
 80019de:	4b22      	ldr	r3, [pc, #136]	@ (8001a68 <ADC1_IN13_ADC2_IN5_dual_init+0x14c>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	4a21      	ldr	r2, [pc, #132]	@ (8001a68 <ADC1_IN13_ADC2_IN5_dual_init+0x14c>)
 80019e4:	f043 0320 	orr.w	r3, r3, #32
 80019e8:	60d3      	str	r3, [r2, #12]
	DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);	// Select channel 0
 80019ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001a64 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 80019ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001a64 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PL_1;		// Priority high
 80019f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a64 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019fc:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 80019fe:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a18      	ldr	r2, [pc, #96]	@ (8001a64 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a08:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001a0a:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a15      	ldr	r2, [pc, #84]	@ (8001a64 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a14:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001a16:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a12      	ldr	r2, [pc, #72]	@ (8001a64 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a20:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a0f      	ldr	r2, [pc, #60]	@ (8001a64 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a28:	f043 0310 	orr.w	r3, r3, #16
 8001a2c:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->NDTR = ADC_NUMS;		// Number of data items to transfer
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a34:	605a      	str	r2, [r3, #4]
	DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;	// Peripheral register address
 8001a36:	4b0b      	ldr	r3, [pc, #44]	@ (8001a64 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a38:	4a0c      	ldr	r2, [pc, #48]	@ (8001a6c <ADC1_IN13_ADC2_IN5_dual_init+0x150>)
 8001a3a:	609a      	str	r2, [r3, #8]
	DMA2_Stream4->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001a3c:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a70 <ADC1_IN13_ADC2_IN5_dual_init+0x154>)
 8001a40:	60da      	str	r2, [r3, #12]
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000004 	.word	0x20000004
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40012300 	.word	0x40012300
 8001a5c:	40012000 	.word	0x40012000
 8001a60:	40012100 	.word	0x40012100
 8001a64:	40026470 	.word	0x40026470
 8001a68:	40026400 	.word	0x40026400
 8001a6c:	40012308 	.word	0x40012308
 8001a70:	200003c8 	.word	0x200003c8

08001a74 <ADC1_IN13_ADC2_IN5_dual_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC1_IN13_ADC2_IN5_dual_start(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	DMA2_Stream4->CR |= DMA_SxCR_EN;	// Enable DMA
 8001a78:	4b10      	ldr	r3, [pc, #64]	@ (8001abc <ADC1_IN13_ADC2_IN5_dual_start+0x48>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0f      	ldr	r2, [pc, #60]	@ (8001abc <ADC1_IN13_ADC2_IN5_dual_start+0x48>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);	// Clear pending DMA interrupt
 8001a84:	203c      	movs	r0, #60	@ 0x3c
 8001a86:	f7ff fcfb 	bl	8001480 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);	// Enable DMA interrupt in the NVIC
 8001a8a:	203c      	movs	r0, #60	@ 0x3c
 8001a8c:	f7ff fcb6 	bl	80013fc <__NVIC_EnableIRQ>
	ADC1->CR2 |= ADC_CR2_ADON;			// Enable ADC1
 8001a90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <ADC1_IN13_ADC2_IN5_dual_start+0x4c>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac0 <ADC1_IN13_ADC2_IN5_dual_start+0x4c>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 8001a9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <ADC1_IN13_ADC2_IN5_dual_start+0x50>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	4a08      	ldr	r2, [pc, #32]	@ (8001ac4 <ADC1_IN13_ADC2_IN5_dual_start+0x50>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001aa8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40026470 	.word	0x40026470
 8001ac0:	40012000 	.word	0x40012000
 8001ac4:	40012100 	.word	0x40012100

08001ac8 <ADC1_IN14_ADC2_IN15_dual_start>:

void ADC1_IN14_ADC2_IN15_dual_start(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
    DMA2_Stream4->CR |= DMA_SxCR_EN;          // DMA-Stream aktivieren
 8001acc:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <ADC1_IN14_ADC2_IN15_dual_start+0x48>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0f      	ldr	r2, [pc, #60]	@ (8001b10 <ADC1_IN14_ADC2_IN15_dual_start+0x48>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6013      	str	r3, [r2, #0]
    NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);  // Ausstehende DMA-Interrupts löschen
 8001ad8:	203c      	movs	r0, #60	@ 0x3c
 8001ada:	f7ff fcd1 	bl	8001480 <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(DMA2_Stream4_IRQn);        // DMA-Interrupt im NVIC aktivieren
 8001ade:	203c      	movs	r0, #60	@ 0x3c
 8001ae0:	f7ff fc8c 	bl	80013fc <__NVIC_EnableIRQ>

    ADC1->CR2 |= ADC_CR2_ADON;                // ADC1 einschalten
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <ADC1_IN14_ADC2_IN15_dual_start+0x4c>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8001b14 <ADC1_IN14_ADC2_IN15_dual_start+0x4c>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6093      	str	r3, [r2, #8]
    ADC2->CR2 |= ADC_CR2_ADON;                // ADC2 einschalten
 8001af0:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <ADC1_IN14_ADC2_IN15_dual_start+0x50>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4a08      	ldr	r2, [pc, #32]	@ (8001b18 <ADC1_IN14_ADC2_IN15_dual_start+0x50>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6093      	str	r3, [r2, #8]

    TIM2->CR1 |= TIM_CR1_CEN;                 // Timer starten
 8001afc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40026470 	.word	0x40026470
 8001b14:	40012000 	.word	0x40012000
 8001b18:	40012100 	.word	0x40012100

08001b1c <ADC2_IN13_IN5_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC12_IN5 = GPIO PA5
 *****************************************************************************/
void ADC2_IN13_IN5_scan_init(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 8001b22:	4b48      	ldr	r3, [pc, #288]	@ (8001c44 <ADC2_IN13_IN5_scan_init+0x128>)
 8001b24:	2202      	movs	r2, #2
 8001b26:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 8001b28:	2300      	movs	r3, #0
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	4b46      	ldr	r3, [pc, #280]	@ (8001c48 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b30:	4a45      	ldr	r2, [pc, #276]	@ (8001c48 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001b32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b36:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b38:	4b43      	ldr	r3, [pc, #268]	@ (8001c48 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
	ADC2->SQR1 |= (1UL << ADC_SQR1_L_Pos);			// Convert 2 inputs
 8001b44:	4b41      	ldr	r3, [pc, #260]	@ (8001c4c <ADC2_IN13_IN5_scan_init+0x130>)
 8001b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b48:	4a40      	ldr	r2, [pc, #256]	@ (8001c4c <ADC2_IN13_IN5_scan_init+0x130>)
 8001b4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC2->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8001b50:	4b3e      	ldr	r3, [pc, #248]	@ (8001c4c <ADC2_IN13_IN5_scan_init+0x130>)
 8001b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b54:	4a3d      	ldr	r2, [pc, #244]	@ (8001c4c <ADC2_IN13_IN5_scan_init+0x130>)
 8001b56:	f043 030d 	orr.w	r3, r3, #13
 8001b5a:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->SQR3 |= (5UL << ADC_SQR3_SQ2_Pos);	// Input 5 = second conversion
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c4c <ADC2_IN13_IN5_scan_init+0x130>)
 8001b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b60:	4a3a      	ldr	r2, [pc, #232]	@ (8001c4c <ADC2_IN13_IN5_scan_init+0x130>)
 8001b62:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001b66:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 8001b68:	4b38      	ldr	r3, [pc, #224]	@ (8001c4c <ADC2_IN13_IN5_scan_init+0x130>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	4a37      	ldr	r2, [pc, #220]	@ (8001c4c <ADC2_IN13_IN5_scan_init+0x130>)
 8001b6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b72:	6053      	str	r3, [r2, #4]
	ADC2->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001b74:	4b35      	ldr	r3, [pc, #212]	@ (8001c4c <ADC2_IN13_IN5_scan_init+0x130>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	4a34      	ldr	r2, [pc, #208]	@ (8001c4c <ADC2_IN13_IN5_scan_init+0x130>)
 8001b7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b7e:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001b80:	4b32      	ldr	r3, [pc, #200]	@ (8001c4c <ADC2_IN13_IN5_scan_init+0x130>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	4a31      	ldr	r2, [pc, #196]	@ (8001c4c <ADC2_IN13_IN5_scan_init+0x130>)
 8001b86:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8001b8a:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c4c <ADC2_IN13_IN5_scan_init+0x130>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	4a2e      	ldr	r2, [pc, #184]	@ (8001c4c <ADC2_IN13_IN5_scan_init+0x130>)
 8001b92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b96:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001b98:	2300      	movs	r3, #0
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c48 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba0:	4a29      	ldr	r2, [pc, #164]	@ (8001c48 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001ba2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ba6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba8:	4b27      	ldr	r3, [pc, #156]	@ (8001c48 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 3
 8001bb4:	4b26      	ldr	r3, [pc, #152]	@ (8001c50 <ADC2_IN13_IN5_scan_init+0x134>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a25      	ldr	r2, [pc, #148]	@ (8001c50 <ADC2_IN13_IN5_scan_init+0x134>)
 8001bba:	f023 0301 	bic.w	r3, r3, #1
 8001bbe:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001bc0:	bf00      	nop
 8001bc2:	4b23      	ldr	r3, [pc, #140]	@ (8001c50 <ADC2_IN13_IN5_scan_init+0x134>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f9      	bne.n	8001bc2 <ADC2_IN13_IN5_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF3;	// Clear transfer complete interrupt fl.
 8001bce:	4b21      	ldr	r3, [pc, #132]	@ (8001c54 <ADC2_IN13_IN5_scan_init+0x138>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	4a20      	ldr	r2, [pc, #128]	@ (8001c54 <ADC2_IN13_IN5_scan_init+0x138>)
 8001bd4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001bd8:	6093      	str	r3, [r2, #8]
	DMA2_Stream3->CR |= (1UL << DMA_SxCR_CHSEL_Pos);	// Select channel 1
 8001bda:	4b1d      	ldr	r3, [pc, #116]	@ (8001c50 <ADC2_IN13_IN5_scan_init+0x134>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1c      	ldr	r2, [pc, #112]	@ (8001c50 <ADC2_IN13_IN5_scan_init+0x134>)
 8001be0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001be4:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_PL_1;		// Priority high
 8001be6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c50 <ADC2_IN13_IN5_scan_init+0x134>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a19      	ldr	r2, [pc, #100]	@ (8001c50 <ADC2_IN13_IN5_scan_init+0x134>)
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf0:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8001bf2:	4b17      	ldr	r3, [pc, #92]	@ (8001c50 <ADC2_IN13_IN5_scan_init+0x134>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a16      	ldr	r2, [pc, #88]	@ (8001c50 <ADC2_IN13_IN5_scan_init+0x134>)
 8001bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bfc:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001bfe:	4b14      	ldr	r3, [pc, #80]	@ (8001c50 <ADC2_IN13_IN5_scan_init+0x134>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a13      	ldr	r2, [pc, #76]	@ (8001c50 <ADC2_IN13_IN5_scan_init+0x134>)
 8001c04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c08:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001c0a:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <ADC2_IN13_IN5_scan_init+0x134>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a10      	ldr	r2, [pc, #64]	@ (8001c50 <ADC2_IN13_IN5_scan_init+0x134>)
 8001c10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c14:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8001c16:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <ADC2_IN13_IN5_scan_init+0x134>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8001c50 <ADC2_IN13_IN5_scan_init+0x134>)
 8001c1c:	f043 0310 	orr.w	r3, r3, #16
 8001c20:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 8001c22:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <ADC2_IN13_IN5_scan_init+0x134>)
 8001c24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c28:	605a      	str	r2, [r3, #4]
	DMA2_Stream3->PAR = (uint32_t)&ADC2->DR;	// Peripheral register address
 8001c2a:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <ADC2_IN13_IN5_scan_init+0x134>)
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <ADC2_IN13_IN5_scan_init+0x13c>)
 8001c2e:	609a      	str	r2, [r3, #8]
	DMA2_Stream3->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001c30:	4b07      	ldr	r3, [pc, #28]	@ (8001c50 <ADC2_IN13_IN5_scan_init+0x134>)
 8001c32:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <ADC2_IN13_IN5_scan_init+0x140>)
 8001c34:	60da      	str	r2, [r3, #12]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000004 	.word	0x20000004
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40012100 	.word	0x40012100
 8001c50:	40026458 	.word	0x40026458
 8001c54:	40026400 	.word	0x40026400
 8001c58:	4001214c 	.word	0x4001214c
 8001c5c:	200003c8 	.word	0x200003c8

08001c60 <ADC2_IN13_IN5_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC2_IN13_IN5_scan_start(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
	DMA2_Stream3->CR |= DMA_SxCR_EN;	// Enable DMA
 8001c64:	4b0d      	ldr	r3, [pc, #52]	@ (8001c9c <ADC2_IN13_IN5_scan_start+0x3c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0c      	ldr	r2, [pc, #48]	@ (8001c9c <ADC2_IN13_IN5_scan_start+0x3c>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);	// Clear pending DMA interrupt
 8001c70:	203b      	movs	r0, #59	@ 0x3b
 8001c72:	f7ff fc05 	bl	8001480 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream3_IRQn);	// Enable DMA interrupt in the NVIC
 8001c76:	203b      	movs	r0, #59	@ 0x3b
 8001c78:	f7ff fbc0 	bl	80013fc <__NVIC_EnableIRQ>
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 8001c7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ca0 <ADC2_IN13_IN5_scan_start+0x40>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	4a07      	ldr	r2, [pc, #28]	@ (8001ca0 <ADC2_IN13_IN5_scan_start+0x40>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001c88:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40026458 	.word	0x40026458
 8001ca0:	40012100 	.word	0x40012100

08001ca4 <ADC3_IN13_IN4_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN13_IN4_scan_init(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 8001caa:	4b48      	ldr	r3, [pc, #288]	@ (8001dcc <ADC3_IN13_IN4_scan_init+0x128>)
 8001cac:	2202      	movs	r2, #2
 8001cae:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	4b46      	ldr	r3, [pc, #280]	@ (8001dd0 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb8:	4a45      	ldr	r2, [pc, #276]	@ (8001dd0 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001cba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cbe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc0:	4b43      	ldr	r3, [pc, #268]	@ (8001dd0 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR1 |= (1UL << ADC_SQR1_L_Pos);		// Convert 2 inputs
 8001ccc:	4b41      	ldr	r3, [pc, #260]	@ (8001dd4 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd0:	4a40      	ldr	r2, [pc, #256]	@ (8001dd4 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC3->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8001cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8001dd4 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cdc:	4a3d      	ldr	r2, [pc, #244]	@ (8001dd4 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cde:	f043 030d 	orr.w	r3, r3, #13
 8001ce2:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ2_Pos);	// Input 4 = second conversion
 8001ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8001dd4 <ADC3_IN13_IN4_scan_init+0x130>)
 8001ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce8:	4a3a      	ldr	r2, [pc, #232]	@ (8001dd4 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cee:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 8001cf0:	4b38      	ldr	r3, [pc, #224]	@ (8001dd4 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4a37      	ldr	r2, [pc, #220]	@ (8001dd4 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cfa:	6053      	str	r3, [r2, #4]
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001cfc:	4b35      	ldr	r3, [pc, #212]	@ (8001dd4 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	4a34      	ldr	r2, [pc, #208]	@ (8001dd4 <ADC3_IN13_IN4_scan_init+0x130>)
 8001d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d06:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001d08:	4b32      	ldr	r3, [pc, #200]	@ (8001dd4 <ADC3_IN13_IN4_scan_init+0x130>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4a31      	ldr	r2, [pc, #196]	@ (8001dd4 <ADC3_IN13_IN4_scan_init+0x130>)
 8001d0e:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8001d12:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001d14:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd4 <ADC3_IN13_IN4_scan_init+0x130>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4a2e      	ldr	r2, [pc, #184]	@ (8001dd4 <ADC3_IN13_IN4_scan_init+0x130>)
 8001d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d1e:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001d20:	2300      	movs	r3, #0
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd0 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d28:	4a29      	ldr	r2, [pc, #164]	@ (8001dd0 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001d2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d30:	4b27      	ldr	r3, [pc, #156]	@ (8001dd0 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 8001d3c:	4b26      	ldr	r3, [pc, #152]	@ (8001dd8 <ADC3_IN13_IN4_scan_init+0x134>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a25      	ldr	r2, [pc, #148]	@ (8001dd8 <ADC3_IN13_IN4_scan_init+0x134>)
 8001d42:	f023 0301 	bic.w	r3, r3, #1
 8001d46:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001d48:	bf00      	nop
 8001d4a:	4b23      	ldr	r3, [pc, #140]	@ (8001dd8 <ADC3_IN13_IN4_scan_init+0x134>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f9      	bne.n	8001d4a <ADC3_IN13_IN4_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 8001d56:	4b21      	ldr	r3, [pc, #132]	@ (8001ddc <ADC3_IN13_IN4_scan_init+0x138>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	4a20      	ldr	r2, [pc, #128]	@ (8001ddc <ADC3_IN13_IN4_scan_init+0x138>)
 8001d5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d60:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 8001d62:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd8 <ADC3_IN13_IN4_scan_init+0x134>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd8 <ADC3_IN13_IN4_scan_init+0x134>)
 8001d68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d6c:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <ADC3_IN13_IN4_scan_init+0x134>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a19      	ldr	r2, [pc, #100]	@ (8001dd8 <ADC3_IN13_IN4_scan_init+0x134>)
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d78:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8001d7a:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <ADC3_IN13_IN4_scan_init+0x134>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a16      	ldr	r2, [pc, #88]	@ (8001dd8 <ADC3_IN13_IN4_scan_init+0x134>)
 8001d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d84:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001d86:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <ADC3_IN13_IN4_scan_init+0x134>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a13      	ldr	r2, [pc, #76]	@ (8001dd8 <ADC3_IN13_IN4_scan_init+0x134>)
 8001d8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d90:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001d92:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <ADC3_IN13_IN4_scan_init+0x134>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a10      	ldr	r2, [pc, #64]	@ (8001dd8 <ADC3_IN13_IN4_scan_init+0x134>)
 8001d98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d9c:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <ADC3_IN13_IN4_scan_init+0x134>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd8 <ADC3_IN13_IN4_scan_init+0x134>)
 8001da4:	f043 0310 	orr.w	r3, r3, #16
 8001da8:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 8001daa:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <ADC3_IN13_IN4_scan_init+0x134>)
 8001dac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001db0:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 8001db2:	4b09      	ldr	r3, [pc, #36]	@ (8001dd8 <ADC3_IN13_IN4_scan_init+0x134>)
 8001db4:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <ADC3_IN13_IN4_scan_init+0x13c>)
 8001db6:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001db8:	4b07      	ldr	r3, [pc, #28]	@ (8001dd8 <ADC3_IN13_IN4_scan_init+0x134>)
 8001dba:	4a0a      	ldr	r2, [pc, #40]	@ (8001de4 <ADC3_IN13_IN4_scan_init+0x140>)
 8001dbc:	60da      	str	r2, [r3, #12]

}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000004 	.word	0x20000004
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40012200 	.word	0x40012200
 8001dd8:	40026428 	.word	0x40026428
 8001ddc:	40026400 	.word	0x40026400
 8001de0:	4001224c 	.word	0x4001224c
 8001de4:	200003c8 	.word	0x200003c8

08001de8 <ADC3_IN13_IN4_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_IN13_IN4_scan_start(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 8001dec:	4b0d      	ldr	r3, [pc, #52]	@ (8001e24 <ADC3_IN13_IN4_scan_start+0x3c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0c      	ldr	r2, [pc, #48]	@ (8001e24 <ADC3_IN13_IN4_scan_start+0x3c>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 8001df8:	2039      	movs	r0, #57	@ 0x39
 8001dfa:	f7ff fb41 	bl	8001480 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 8001dfe:	2039      	movs	r0, #57	@ 0x39
 8001e00:	f7ff fafc 	bl	80013fc <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8001e04:	4b08      	ldr	r3, [pc, #32]	@ (8001e28 <ADC3_IN13_IN4_scan_start+0x40>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	4a07      	ldr	r2, [pc, #28]	@ (8001e28 <ADC3_IN13_IN4_scan_start+0x40>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001e10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6013      	str	r3, [r2, #0]
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40026428 	.word	0x40026428
 8001e28:	40012200 	.word	0x40012200

08001e2c <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 8001e30:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	6113      	str	r3, [r2, #16]
	if (DAC_active) {
 8001e40:	4b03      	ldr	r3, [pc, #12]	@ (8001e50 <TIM2_IRQHandler+0x24>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <TIM2_IRQHandler+0x20>
		DAC_increment();
 8001e48:	f7ff fc46 	bl	80016d8 <DAC_increment>
	}
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	200003c1 	.word	0x200003c1

08001e54 <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 8001e58:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <ADC_IRQHandler+0x58>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d020      	beq.n	8001ea6 <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 8001e64:	4911      	ldr	r1, [pc, #68]	@ (8001eac <ADC_IRQHandler+0x58>)
 8001e66:	4b12      	ldr	r3, [pc, #72]	@ (8001eb0 <ADC_IRQHandler+0x5c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	4810      	ldr	r0, [pc, #64]	@ (8001eb0 <ADC_IRQHandler+0x5c>)
 8001e6e:	6002      	str	r2, [r0, #0]
 8001e70:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001e72:	4910      	ldr	r1, [pc, #64]	@ (8001eb4 <ADC_IRQHandler+0x60>)
 8001e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 8001e78:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb0 <ADC_IRQHandler+0x5c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2bff      	cmp	r3, #255	@ 0xff
 8001e7e:	d912      	bls.n	8001ea6 <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 8001e80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e8a:	f023 0301 	bic.w	r3, r3, #1
 8001e8e:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <ADC_IRQHandler+0x58>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4a05      	ldr	r2, [pc, #20]	@ (8001eac <ADC_IRQHandler+0x58>)
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	6093      	str	r3, [r2, #8]
			ADC_reset();
 8001e9c:	f7ff fc38 	bl	8001710 <ADC_reset>
			MEAS_data_ready = true;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <ADC_IRQHandler+0x64>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40012200 	.word	0x40012200
 8001eb0:	200003c4 	.word	0x200003c4
 8001eb4:	200003c8 	.word	0x200003c8
 8001eb8:	200003c0 	.word	0x200003c0

08001ebc <DMA2_Stream1_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF1) {	// Stream1 transfer compl. interrupt f.
 8001ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f34 <DMA2_Stream1_IRQHandler+0x78>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d031      	beq.n	8001f30 <DMA2_Stream1_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream1_IRQn);	// Disable DMA interrupt in the NVIC
 8001ecc:	2039      	movs	r0, #57	@ 0x39
 8001ece:	f7ff fab3 	bl	8001438 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);// Clear pending DMA interrupt
 8001ed2:	2039      	movs	r0, #57	@ 0x39
 8001ed4:	f7ff fad4 	bl	8001480 <__NVIC_ClearPendingIRQ>
		DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8001ed8:	4b17      	ldr	r3, [pc, #92]	@ (8001f38 <DMA2_Stream1_IRQHandler+0x7c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a16      	ldr	r2, [pc, #88]	@ (8001f38 <DMA2_Stream1_IRQHandler+0x7c>)
 8001ede:	f023 0301 	bic.w	r3, r3, #1
 8001ee2:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001ee4:	bf00      	nop
 8001ee6:	4b14      	ldr	r3, [pc, #80]	@ (8001f38 <DMA2_Stream1_IRQHandler+0x7c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f9      	bne.n	8001ee6 <DMA2_Stream1_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF1;// Clear transfer complete interrupt fl.
 8001ef2:	4b10      	ldr	r3, [pc, #64]	@ (8001f34 <DMA2_Stream1_IRQHandler+0x78>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8001f34 <DMA2_Stream1_IRQHandler+0x78>)
 8001ef8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001efc:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001efe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	6013      	str	r3, [r2, #0]
		ADC3->CR2 &= ~ADC_CR2_ADON;		// Disable ADC3
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f3c <DMA2_Stream1_IRQHandler+0x80>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	4a0a      	ldr	r2, [pc, #40]	@ (8001f3c <DMA2_Stream1_IRQHandler+0x80>)
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	6093      	str	r3, [r2, #8]
		ADC3->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 8001f1a:	4b08      	ldr	r3, [pc, #32]	@ (8001f3c <DMA2_Stream1_IRQHandler+0x80>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	4a07      	ldr	r2, [pc, #28]	@ (8001f3c <DMA2_Stream1_IRQHandler+0x80>)
 8001f20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f24:	6093      	str	r3, [r2, #8]
		ADC_reset();
 8001f26:	f7ff fbf3 	bl	8001710 <ADC_reset>
		MEAS_data_ready = true;
 8001f2a:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <DMA2_Stream1_IRQHandler+0x84>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
	}
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40026400 	.word	0x40026400
 8001f38:	40026428 	.word	0x40026428
 8001f3c:	40012200 	.word	0x40012200
 8001f40:	200003c0 	.word	0x200003c0

08001f44 <DMA2_Stream3_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream3_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF3) {	// Stream3 transfer compl. interrupt f.
 8001f48:	4b1c      	ldr	r3, [pc, #112]	@ (8001fbc <DMA2_Stream3_IRQHandler+0x78>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d031      	beq.n	8001fb8 <DMA2_Stream3_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream3_IRQn);	// Disable DMA interrupt in the NVIC
 8001f54:	203b      	movs	r0, #59	@ 0x3b
 8001f56:	f7ff fa6f 	bl	8001438 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);// Clear pending DMA interrupt
 8001f5a:	203b      	movs	r0, #59	@ 0x3b
 8001f5c:	f7ff fa90 	bl	8001480 <__NVIC_ClearPendingIRQ>
		DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8001f60:	4b17      	ldr	r3, [pc, #92]	@ (8001fc0 <DMA2_Stream3_IRQHandler+0x7c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a16      	ldr	r2, [pc, #88]	@ (8001fc0 <DMA2_Stream3_IRQHandler+0x7c>)
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001f6c:	bf00      	nop
 8001f6e:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <DMA2_Stream3_IRQHandler+0x7c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f9      	bne.n	8001f6e <DMA2_Stream3_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF3;// Clear transfer complete interrupt fl.
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <DMA2_Stream3_IRQHandler+0x78>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fbc <DMA2_Stream3_IRQHandler+0x78>)
 8001f80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001f84:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001f86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	6013      	str	r3, [r2, #0]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 8001f96:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <DMA2_Stream3_IRQHandler+0x80>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc4 <DMA2_Stream3_IRQHandler+0x80>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 8001fa2:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <DMA2_Stream3_IRQHandler+0x80>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	4a07      	ldr	r2, [pc, #28]	@ (8001fc4 <DMA2_Stream3_IRQHandler+0x80>)
 8001fa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fac:	6093      	str	r3, [r2, #8]
		ADC_reset();
 8001fae:	f7ff fbaf 	bl	8001710 <ADC_reset>
		MEAS_data_ready = true;
 8001fb2:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <DMA2_Stream3_IRQHandler+0x84>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
	}
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40026400 	.word	0x40026400
 8001fc0:	40026458 	.word	0x40026458
 8001fc4:	40012100 	.word	0x40012100
 8001fc8:	200003c0 	.word	0x200003c0

08001fcc <DMA2_Stream4_IRQHandler>:
 * @note In dual ADC mode two values are combined (packed) in a single uint32_t
 * ADC_CDR[31:0] = ADC2_DR[15:0] | ADC1_DR[15:0]
 * and are therefore extracted before further processing.
 *****************************************************************************/
void DMA2_Stream4_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
	if (DMA2->HISR & DMA_HISR_TCIF4) {	// Stream4 transfer compl. interrupt f.
 8001fd2:	4b30      	ldr	r3, [pc, #192]	@ (8002094 <DMA2_Stream4_IRQHandler+0xc8>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d055      	beq.n	800208a <DMA2_Stream4_IRQHandler+0xbe>
		NVIC_DisableIRQ(DMA2_Stream4_IRQn);	// Disable DMA interrupt in the NVIC
 8001fde:	203c      	movs	r0, #60	@ 0x3c
 8001fe0:	f7ff fa2a 	bl	8001438 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);// Clear pending DMA interrupt
 8001fe4:	203c      	movs	r0, #60	@ 0x3c
 8001fe6:	f7ff fa4b 	bl	8001480 <__NVIC_ClearPendingIRQ>
		DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8001fea:	4b2b      	ldr	r3, [pc, #172]	@ (8002098 <DMA2_Stream4_IRQHandler+0xcc>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a2a      	ldr	r2, [pc, #168]	@ (8002098 <DMA2_Stream4_IRQHandler+0xcc>)
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001ff6:	bf00      	nop
 8001ff8:	4b27      	ldr	r3, [pc, #156]	@ (8002098 <DMA2_Stream4_IRQHandler+0xcc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f9      	bne.n	8001ff8 <DMA2_Stream4_IRQHandler+0x2c>
		DMA2->HIFCR |= DMA_HIFCR_CTCIF4;// Clear transfer complete interrupt fl.
 8002004:	4b23      	ldr	r3, [pc, #140]	@ (8002094 <DMA2_Stream4_IRQHandler+0xc8>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4a22      	ldr	r2, [pc, #136]	@ (8002094 <DMA2_Stream4_IRQHandler+0xc8>)
 800200a:	f043 0320 	orr.w	r3, r3, #32
 800200e:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8002010:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	6013      	str	r3, [r2, #0]
		ADC1->CR2 &= ~ADC_CR2_ADON;		// Disable ADC1
 8002020:	4b1e      	ldr	r3, [pc, #120]	@ (800209c <DMA2_Stream4_IRQHandler+0xd0>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	4a1d      	ldr	r2, [pc, #116]	@ (800209c <DMA2_Stream4_IRQHandler+0xd0>)
 8002026:	f023 0301 	bic.w	r3, r3, #1
 800202a:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 800202c:	4b1c      	ldr	r3, [pc, #112]	@ (80020a0 <DMA2_Stream4_IRQHandler+0xd4>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4a1b      	ldr	r2, [pc, #108]	@ (80020a0 <DMA2_Stream4_IRQHandler+0xd4>)
 8002032:	f023 0301 	bic.w	r3, r3, #1
 8002036:	6093      	str	r3, [r2, #8]
		ADC->CCR &= ~ADC_CCR_DMA_1;		// Disable DMA mode
 8002038:	4b1a      	ldr	r3, [pc, #104]	@ (80020a4 <DMA2_Stream4_IRQHandler+0xd8>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4a19      	ldr	r2, [pc, #100]	@ (80020a4 <DMA2_Stream4_IRQHandler+0xd8>)
 800203e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002042:	6053      	str	r3, [r2, #4]
		/* Extract combined samples */
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 8002044:	23ff      	movs	r3, #255	@ 0xff
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	e017      	b.n	800207a <DMA2_Stream4_IRQHandler+0xae>
			ADC_samples[2*i+1] = (ADC_samples[i] >> 16);
 800204a:	4a17      	ldr	r2, [pc, #92]	@ (80020a8 <DMA2_Stream4_IRQHandler+0xdc>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	3301      	adds	r3, #1
 8002058:	0c12      	lsrs	r2, r2, #16
 800205a:	4913      	ldr	r1, [pc, #76]	@ (80020a8 <DMA2_Stream4_IRQHandler+0xdc>)
 800205c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_samples[2*i]   = (ADC_samples[i] & 0xffff);
 8002060:	4a11      	ldr	r2, [pc, #68]	@ (80020a8 <DMA2_Stream4_IRQHandler+0xdc>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	b292      	uxth	r2, r2
 800206e:	490e      	ldr	r1, [pc, #56]	@ (80020a8 <DMA2_Stream4_IRQHandler+0xdc>)
 8002070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	dae4      	bge.n	800204a <DMA2_Stream4_IRQHandler+0x7e>
		}
		ADC_reset();
 8002080:	f7ff fb46 	bl	8001710 <ADC_reset>
		MEAS_data_ready = true;
 8002084:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <DMA2_Stream4_IRQHandler+0xe0>)
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
	}
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40026400 	.word	0x40026400
 8002098:	40026470 	.word	0x40026470
 800209c:	40012000 	.word	0x40012000
 80020a0:	40012100 	.word	0x40012100
 80020a4:	40012300 	.word	0x40012300
 80020a8:	200003c8 	.word	0x200003c8
 80020ac:	200003c0 	.word	0x200003c0

080020b0 <FMCW_prepareFft>:




void FMCW_prepareFft(void){
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
	// Get FFT array into proper form
	for (int n = 0; n < ADC_NUMS; n++) {
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	e019      	b.n	80020f0 <FMCW_prepareFft+0x40>
			FFT_INOUT[n*2] = Q_samples[n];
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4910      	ldr	r1, [pc, #64]	@ (8002104 <FMCW_prepareFft+0x54>)
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	0092      	lsls	r2, r2, #2
 80020c6:	440a      	add	r2, r1
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	490f      	ldr	r1, [pc, #60]	@ (8002108 <FMCW_prepareFft+0x58>)
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	601a      	str	r2, [r3, #0]
			FFT_INOUT[(n*2)+1] = I_samples[n];
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	3301      	adds	r3, #1
 80020d8:	490c      	ldr	r1, [pc, #48]	@ (800210c <FMCW_prepareFft+0x5c>)
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	0092      	lsls	r2, r2, #2
 80020de:	440a      	add	r2, r1
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	4909      	ldr	r1, [pc, #36]	@ (8002108 <FMCW_prepareFft+0x58>)
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	601a      	str	r2, [r3, #0]
	for (int n = 0; n < ADC_NUMS; n++) {
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3301      	adds	r3, #1
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2bff      	cmp	r3, #255	@ 0xff
 80020f4:	dde2      	ble.n	80020bc <FMCW_prepareFft+0xc>
	}
}
 80020f6:	bf00      	nop
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	20000bcc 	.word	0x20000bcc
 8002108:	200013cc 	.word	0x200013cc
 800210c:	20000fcc 	.word	0x20000fcc

08002110 <FMCW_separateSamples>:

void FMCW_separateSamples(void){
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
	float32_t Q_sum = 0;
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
	float32_t I_sum = 0;
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]

	// Separate Q and I Components of ADC Array
	for (int n = 0; n < ADC_NUMS; n++) {
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	e038      	b.n	800219a <FMCW_separateSamples+0x8a>

		Q_samples[n] = (float32_t)(ADC_samples[n] & 0x0000FFFF);
 8002128:	4a3d      	ldr	r2, [pc, #244]	@ (8002220 <FMCW_separateSamples+0x110>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002130:	b29b      	uxth	r3, r3
 8002132:	ee07 3a90 	vmov	s15, r3
 8002136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800213a:	4a3a      	ldr	r2, [pc, #232]	@ (8002224 <FMCW_separateSamples+0x114>)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	edc3 7a00 	vstr	s15, [r3]


		I_samples[n] = (float32_t)((ADC_samples[n] >> 16) & 0x0000FFFF);
 8002146:	4a36      	ldr	r2, [pc, #216]	@ (8002220 <FMCW_separateSamples+0x110>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	0c1b      	lsrs	r3, r3, #16
 8002150:	ee07 3a90 	vmov	s15, r3
 8002154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002158:	4a33      	ldr	r2, [pc, #204]	@ (8002228 <FMCW_separateSamples+0x118>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	edc3 7a00 	vstr	s15, [r3]
		//float32_t t = (float32_t)n / ADC_FS;
		//Q_samples[n] = (float32_t)100.0*(float32_t)sinf(2 * PI * 1000 * t);  // Sine on Q
		//I_samples[n] = (float32_t)100.0*(float32_t)cosf(2 * PI * 1000 * t);  // Cosine on I

		// Sum of all Q and I values
		Q_sum = Q_sum + Q_samples[n];
 8002164:	4a2f      	ldr	r2, [pc, #188]	@ (8002224 <FMCW_separateSamples+0x114>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	edd3 7a00 	vldr	s15, [r3]
 8002170:	ed97 7a03 	vldr	s14, [r7, #12]
 8002174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002178:	edc7 7a03 	vstr	s15, [r7, #12]
		I_sum = I_sum + I_samples[n];
 800217c:	4a2a      	ldr	r2, [pc, #168]	@ (8002228 <FMCW_separateSamples+0x118>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	ed97 7a02 	vldr	s14, [r7, #8]
 800218c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002190:	edc7 7a02 	vstr	s15, [r7, #8]
	for (int n = 0; n < ADC_NUMS; n++) {
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3301      	adds	r3, #1
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2bff      	cmp	r3, #255	@ 0xff
 800219e:	ddc3      	ble.n	8002128 <FMCW_separateSamples+0x18>
	}

	// Remove DC offset
	Q_sum = Q_sum / ADC_NUMS;
 80021a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80021a4:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800222c <FMCW_separateSamples+0x11c>
 80021a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021ac:	edc7 7a03 	vstr	s15, [r7, #12]
	I_sum = I_sum / ADC_NUMS;
 80021b0:	ed97 7a02 	vldr	s14, [r7, #8]
 80021b4:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800222c <FMCW_separateSamples+0x11c>
 80021b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021bc:	edc7 7a02 	vstr	s15, [r7, #8]

	for (int n = 0; n < ADC_NUMS; n++) {
 80021c0:	2300      	movs	r3, #0
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	e022      	b.n	800220c <FMCW_separateSamples+0xfc>
		Q_samples[n] = Q_samples[n] - Q_sum;
 80021c6:	4a17      	ldr	r2, [pc, #92]	@ (8002224 <FMCW_separateSamples+0x114>)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	ed93 7a00 	vldr	s14, [r3]
 80021d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80021d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021da:	4a12      	ldr	r2, [pc, #72]	@ (8002224 <FMCW_separateSamples+0x114>)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	edc3 7a00 	vstr	s15, [r3]
		I_samples[n] = I_samples[n] - I_sum;
 80021e6:	4a10      	ldr	r2, [pc, #64]	@ (8002228 <FMCW_separateSamples+0x118>)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	ed93 7a00 	vldr	s14, [r3]
 80021f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80021f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021fa:	4a0b      	ldr	r2, [pc, #44]	@ (8002228 <FMCW_separateSamples+0x118>)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	edc3 7a00 	vstr	s15, [r3]
	for (int n = 0; n < ADC_NUMS; n++) {
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	2bff      	cmp	r3, #255	@ 0xff
 8002210:	ddd9      	ble.n	80021c6 <FMCW_separateSamples+0xb6>
	}
}
 8002212:	bf00      	nop
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	200003c8 	.word	0x200003c8
 8002224:	20000bcc 	.word	0x20000bcc
 8002228:	20000fcc 	.word	0x20000fcc
 800222c:	43800000 	.word	0x43800000

08002230 <FMCW_applyHanningWindow>:

void FMCW_applyHanningWindow(void) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
    for (int n = 0; n < ADC_NUMS; n++) {
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	e03f      	b.n	80022bc <FMCW_applyHanningWindow+0x8c>
        float32_t window = 0.5f * (1.0f - arm_cos_f32((2.0f * PI * n) / (ADC_NUMS - 1)));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	ee07 3a90 	vmov	s15, r3
 8002242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002246:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80022cc <FMCW_applyHanningWindow+0x9c>
 800224a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800224e:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80022d0 <FMCW_applyHanningWindow+0xa0>
 8002252:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002256:	eeb0 0a47 	vmov.f32	s0, s14
 800225a:	f008 fc07 	bl	800aa6c <arm_cos_f32>
 800225e:	eef0 7a40 	vmov.f32	s15, s0
 8002262:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800226a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800226e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002272:	edc7 7a00 	vstr	s15, [r7]
        I_samples[n] *= window;
 8002276:	4a17      	ldr	r2, [pc, #92]	@ (80022d4 <FMCW_applyHanningWindow+0xa4>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	ed93 7a00 	vldr	s14, [r3]
 8002282:	edd7 7a00 	vldr	s15, [r7]
 8002286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228a:	4a12      	ldr	r2, [pc, #72]	@ (80022d4 <FMCW_applyHanningWindow+0xa4>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	edc3 7a00 	vstr	s15, [r3]
        Q_samples[n] *= window;
 8002296:	4a10      	ldr	r2, [pc, #64]	@ (80022d8 <FMCW_applyHanningWindow+0xa8>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	ed93 7a00 	vldr	s14, [r3]
 80022a2:	edd7 7a00 	vldr	s15, [r7]
 80022a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022aa:	4a0b      	ldr	r2, [pc, #44]	@ (80022d8 <FMCW_applyHanningWindow+0xa8>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	edc3 7a00 	vstr	s15, [r3]
    for (int n = 0; n < ADC_NUMS; n++) {
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3301      	adds	r3, #1
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2bff      	cmp	r3, #255	@ 0xff
 80022c0:	ddbc      	ble.n	800223c <FMCW_applyHanningWindow+0xc>
    }
}
 80022c2:	bf00      	nop
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40c90fdb 	.word	0x40c90fdb
 80022d0:	437f0000 	.word	0x437f0000
 80022d4:	20000fcc 	.word	0x20000fcc
 80022d8:	20000bcc 	.word	0x20000bcc

080022dc <FMCW_doFft>:

void FMCW_doFft(void){
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
	arm_cfft_instance_f32 cfft_instance;
	arm_cfft_init_f32(&cfft_instance, FFT_SIZE);
 80022e2:	463b      	mov	r3, r7
 80022e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022e8:	4618      	mov	r0, r3
 80022ea:	f002 ffbf 	bl	800526c <arm_cfft_init_f32>
	arm_cfft_f32(&cfft_instance, FFT_INOUT, IFFT_FLAG, DO_BIT_REVERSE);
 80022ee:	4638      	mov	r0, r7
 80022f0:	2301      	movs	r3, #1
 80022f2:	2200      	movs	r2, #0
 80022f4:	4903      	ldr	r1, [pc, #12]	@ (8002304 <FMCW_doFft+0x28>)
 80022f6:	f008 fb3f 	bl	800a978 <arm_cfft_f32>
}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200013cc 	.word	0x200013cc

08002308 <FMCW_convertFftToMagnitude>:

void FMCW_convertFftToMagnitude(void){
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
	 // Convert complex FFT to magnitude
	for (int i = 0; i < FFT_SIZE; i++) {
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	e027      	b.n	8002364 <FMCW_convertFftToMagnitude+0x5c>
		float real = FFT_INOUT[2 * i];
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4a16      	ldr	r2, [pc, #88]	@ (8002374 <FMCW_convertFftToMagnitude+0x6c>)
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60bb      	str	r3, [r7, #8]
		float imag = FFT_INOUT[2 * i + 1];
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	3301      	adds	r3, #1
 8002328:	4a12      	ldr	r2, [pc, #72]	@ (8002374 <FMCW_convertFftToMagnitude+0x6c>)
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	607b      	str	r3, [r7, #4]
		FFT_MAG[i] = sqrtf(real * real + imag * imag);  // or use hypotf(real, imag)
 8002332:	edd7 7a02 	vldr	s15, [r7, #8]
 8002336:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800233a:	edd7 7a01 	vldr	s15, [r7, #4]
 800233e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002346:	eeb0 0a67 	vmov.f32	s0, s15
 800234a:	f00b fd35 	bl	800ddb8 <sqrtf>
 800234e:	eef0 7a40 	vmov.f32	s15, s0
 8002352:	4a09      	ldr	r2, [pc, #36]	@ (8002378 <FMCW_convertFftToMagnitude+0x70>)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < FFT_SIZE; i++) {
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	3301      	adds	r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2bff      	cmp	r3, #255	@ 0xff
 8002368:	ddd4      	ble.n	8002314 <FMCW_convertFftToMagnitude+0xc>
	}
}
 800236a:	bf00      	nop
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200013cc 	.word	0x200013cc
 8002378:	20001bcc 	.word	0x20001bcc

0800237c <FMCW_getPeakMangitudeFrequency>:

float32_t FMCW_getPeakMangitudeFrequency(void) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b092      	sub	sp, #72	@ 0x48
 8002380:	af02      	add	r7, sp, #8
    float32_t max_magnitude = 0.0f;
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int max_index = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	63bb      	str	r3, [r7, #56]	@ 0x38
    int filter = 2;
 800238c:	2302      	movs	r3, #2
 800238e:	633b      	str	r3, [r7, #48]	@ 0x30

    // Find peak magnitude and its index (ignoring edges if needed)
    for (int i = 0; i < FFT_SIZE; i++) {
 8002390:	2300      	movs	r3, #0
 8002392:	637b      	str	r3, [r7, #52]	@ 0x34
 8002394:	e022      	b.n	80023dc <FMCW_getPeakMangitudeFrequency+0x60>
        if ((FFT_MAG[i] > max_magnitude)&&((i < FFT_SIZE/2-filter)||(i > FFT_SIZE/2+filter))) {
 8002396:	4a2b      	ldr	r2, [pc, #172]	@ (8002444 <FMCW_getPeakMangitudeFrequency+0xc8>)
 8002398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	edd3 7a00 	vldr	s15, [r3]
 80023a2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80023a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ae:	d512      	bpl.n	80023d6 <FMCW_getPeakMangitudeFrequency+0x5a>
 80023b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80023b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023b8:	429a      	cmp	r2, r3
 80023ba:	db04      	blt.n	80023c6 <FMCW_getPeakMangitudeFrequency+0x4a>
 80023bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023be:	3380      	adds	r3, #128	@ 0x80
 80023c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023c2:	429a      	cmp	r2, r3
 80023c4:	dd07      	ble.n	80023d6 <FMCW_getPeakMangitudeFrequency+0x5a>
            max_magnitude = FFT_MAG[i];
 80023c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002444 <FMCW_getPeakMangitudeFrequency+0xc8>)
 80023c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            max_index = i;
 80023d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (int i = 0; i < FFT_SIZE; i++) {
 80023d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d8:	3301      	adds	r3, #1
 80023da:	637b      	str	r3, [r7, #52]	@ 0x34
 80023dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023de:	2bff      	cmp	r3, #255	@ 0xff
 80023e0:	ddd9      	ble.n	8002396 <FMCW_getPeakMangitudeFrequency+0x1a>
        }
    }

    // Convert bin index to signed frequency
    int shifted_index = (max_index < FFT_SIZE / 2) ? max_index : (max_index - FFT_SIZE);
 80023e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80023e6:	dd03      	ble.n	80023f0 <FMCW_getPeakMangitudeFrequency+0x74>
 80023e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ea:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80023ee:	e000      	b.n	80023f2 <FMCW_getPeakMangitudeFrequency+0x76>
 80023f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float32_t bin_resolution = (float32_t)ADC_FS / (float32_t)FFT_SIZE;
 80023f4:	4b14      	ldr	r3, [pc, #80]	@ (8002448 <FMCW_getPeakMangitudeFrequency+0xcc>)
 80023f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t max_frequency = shifted_index * bin_resolution;
 80023f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fa:	ee07 3a90 	vmov	s15, r3
 80023fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002402:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Optional: Display on LCD
    char text_[32];
    snprintf(text_, sizeof(text_), "Freq: %+6.1f Hz", max_frequency);
 800240e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002410:	f7fe f90a 	bl	8000628 <__aeabi_f2d>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	1d38      	adds	r0, r7, #4
 800241a:	e9cd 2300 	strd	r2, r3, [sp]
 800241e:	4a0b      	ldr	r2, [pc, #44]	@ (800244c <FMCW_getPeakMangitudeFrequency+0xd0>)
 8002420:	2120      	movs	r1, #32
 8002422:	f009 fb6f 	bl	800bb04 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 210, (uint8_t*)text_, CENTER_MODE);
 8002426:	1d3a      	adds	r2, r7, #4
 8002428:	2301      	movs	r3, #1
 800242a:	21d2      	movs	r1, #210	@ 0xd2
 800242c:	2000      	movs	r0, #0
 800242e:	f002 f821 	bl	8004474 <BSP_LCD_DisplayStringAt>

    return max_frequency;
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	ee07 3a90 	vmov	s15, r3
}
 8002438:	eeb0 0a67 	vmov.f32	s0, s15
 800243c:	3740      	adds	r7, #64	@ 0x40
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20001bcc 	.word	0x20001bcc
 8002448:	419c4000 	.word	0x419c4000
 800244c:	0800deb4 	.word	0x0800deb4

08002450 <FMCW_getRadialVelocity>:

float32_t FMCW_getRadialVelocity(void) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b096      	sub	sp, #88	@ 0x58
 8002454:	af02      	add	r7, sp, #8
    float32_t max_magnitude = 0.0f;
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int max_index = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	64bb      	str	r3, [r7, #72]	@ 0x48
    const float32_t MIN_PEAK_THRESHOLD = 2000.0f; // Adjust based on your signal level
 8002460:	4b58      	ldr	r3, [pc, #352]	@ (80025c4 <FMCW_getRadialVelocity+0x174>)
 8002462:	63bb      	str	r3, [r7, #56]	@ 0x38
    int filter = 2;
 8002464:	2302      	movs	r3, #2
 8002466:	637b      	str	r3, [r7, #52]	@ 0x34
    char text_[32];

        // Find peak magnitude and its index (ignoring edges if needed)
    for (int i = 0; i < FFT_SIZE; i++) {
 8002468:	2300      	movs	r3, #0
 800246a:	647b      	str	r3, [r7, #68]	@ 0x44
 800246c:	e025      	b.n	80024ba <FMCW_getRadialVelocity+0x6a>
    	if ((FFT_MAG[i] > max_magnitude)&&((i < FFT_SIZE/2-filter)||(i > FFT_SIZE/2+filter))&&(i != 0)) {
 800246e:	4a56      	ldr	r2, [pc, #344]	@ (80025c8 <FMCW_getRadialVelocity+0x178>)
 8002470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	edd3 7a00 	vldr	s15, [r3]
 800247a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800247e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002486:	d515      	bpl.n	80024b4 <FMCW_getRadialVelocity+0x64>
 8002488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800248a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800248e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002490:	429a      	cmp	r2, r3
 8002492:	db04      	blt.n	800249e <FMCW_getRadialVelocity+0x4e>
 8002494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002496:	3380      	adds	r3, #128	@ 0x80
 8002498:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800249a:	429a      	cmp	r2, r3
 800249c:	dd0a      	ble.n	80024b4 <FMCW_getRadialVelocity+0x64>
 800249e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d007      	beq.n	80024b4 <FMCW_getRadialVelocity+0x64>
            max_magnitude = FFT_MAG[i];
 80024a4:	4a48      	ldr	r2, [pc, #288]	@ (80025c8 <FMCW_getRadialVelocity+0x178>)
 80024a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
            max_index = i;
 80024b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024b2:	64bb      	str	r3, [r7, #72]	@ 0x48
    for (int i = 0; i < FFT_SIZE; i++) {
 80024b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024b6:	3301      	adds	r3, #1
 80024b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80024ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024bc:	2bff      	cmp	r3, #255	@ 0xff
 80024be:	ddd6      	ble.n	800246e <FMCW_getRadialVelocity+0x1e>
        }
    }

    // If the peak is too small, consider it noise
    if (max_magnitude < MIN_PEAK_THRESHOLD) {
 80024c0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80024c4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80024c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d0:	d508      	bpl.n	80024e4 <FMCW_getRadialVelocity+0x94>
        BSP_LCD_DisplayStringAt(0, 210, (uint8_t*)"No motion", CENTER_MODE);
 80024d2:	2301      	movs	r3, #1
 80024d4:	4a3d      	ldr	r2, [pc, #244]	@ (80025cc <FMCW_getRadialVelocity+0x17c>)
 80024d6:	21d2      	movs	r1, #210	@ 0xd2
 80024d8:	2000      	movs	r0, #0
 80024da:	f001 ffcb 	bl	8004474 <BSP_LCD_DisplayStringAt>
        return 0.0f;
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	e067      	b.n	80025b4 <FMCW_getRadialVelocity+0x164>
    }

    // Shift index to center FFT around 0 Hz
    int bin_centered = (max_index >= FFT_SIZE / 2) ? (max_index - FFT_SIZE) : max_index;
 80024e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80024e8:	dd03      	ble.n	80024f2 <FMCW_getRadialVelocity+0xa2>
 80024ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024ec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80024f0:	e000      	b.n	80024f4 <FMCW_getRadialVelocity+0xa4>
 80024f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024f4:	633b      	str	r3, [r7, #48]	@ 0x30
    float32_t bin_resolution = ADC_FS / (float32_t)FFT_SIZE;
 80024f6:	4b36      	ldr	r3, [pc, #216]	@ (80025d0 <FMCW_getRadialVelocity+0x180>)
 80024f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float32_t doppler_frequency = bin_centered * bin_resolution;
 80024fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fc:	ee07 3a90 	vmov	s15, r3
 8002500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002504:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    // Calculate velocity (λ = c / f_c)
    float32_t lambda = SPEED_OF_LIGHT / FMCW_CARRIER_HZ;
 8002510:	4b30      	ldr	r3, [pc, #192]	@ (80025d4 <FMCW_getRadialVelocity+0x184>)
 8002512:	627b      	str	r3, [r7, #36]	@ 0x24
    float32_t velocity = (doppler_frequency * lambda) / 2.0f;
 8002514:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002518:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800251c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002520:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002524:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002528:	edc7 7a08 	vstr	s15, [r7, #32]

    // Update history buffer
    velocity_history[velocity_index++] = velocity;
 800252c:	4b2a      	ldr	r3, [pc, #168]	@ (80025d8 <FMCW_getRadialVelocity+0x188>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	4929      	ldr	r1, [pc, #164]	@ (80025d8 <FMCW_getRadialVelocity+0x188>)
 8002534:	600a      	str	r2, [r1, #0]
 8002536:	4a29      	ldr	r2, [pc, #164]	@ (80025dc <FMCW_getRadialVelocity+0x18c>)
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	6a3a      	ldr	r2, [r7, #32]
 800253e:	601a      	str	r2, [r3, #0]
    if (velocity_index >= VELOCITY_SMOOTH_WINDOW) velocity_index = 0;
 8002540:	4b25      	ldr	r3, [pc, #148]	@ (80025d8 <FMCW_getRadialVelocity+0x188>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b04      	cmp	r3, #4
 8002546:	d902      	bls.n	800254e <FMCW_getRadialVelocity+0xfe>
 8002548:	4b23      	ldr	r3, [pc, #140]	@ (80025d8 <FMCW_getRadialVelocity+0x188>)
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]

    // Compute average
    float32_t velocity_avg = 0;
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	643b      	str	r3, [r7, #64]	@ 0x40
    for (int i = 0; i < VELOCITY_SMOOTH_WINDOW; i++) {
 8002554:	2300      	movs	r3, #0
 8002556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002558:	e00e      	b.n	8002578 <FMCW_getRadialVelocity+0x128>
        velocity_avg += velocity_history[i];
 800255a:	4a20      	ldr	r2, [pc, #128]	@ (80025dc <FMCW_getRadialVelocity+0x18c>)
 800255c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	edd3 7a00 	vldr	s15, [r3]
 8002566:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800256a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800256e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    for (int i = 0; i < VELOCITY_SMOOTH_WINDOW; i++) {
 8002572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002574:	3301      	adds	r3, #1
 8002576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800257a:	2b04      	cmp	r3, #4
 800257c:	dded      	ble.n	800255a <FMCW_getRadialVelocity+0x10a>
    }
    velocity_avg /= VELOCITY_SMOOTH_WINDOW;
 800257e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002582:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8002586:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800258a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    // Display smoothed velocity
    snprintf(text_, sizeof(text_), "Vel: %6.1f m/s", velocity_avg);
 800258e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002590:	f7fe f84a 	bl	8000628 <__aeabi_f2d>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4638      	mov	r0, r7
 800259a:	e9cd 2300 	strd	r2, r3, [sp]
 800259e:	4a10      	ldr	r2, [pc, #64]	@ (80025e0 <FMCW_getRadialVelocity+0x190>)
 80025a0:	2120      	movs	r1, #32
 80025a2:	f009 faaf 	bl	800bb04 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 240, (uint8_t*)text_, CENTER_MODE);
 80025a6:	463a      	mov	r2, r7
 80025a8:	2301      	movs	r3, #1
 80025aa:	21f0      	movs	r1, #240	@ 0xf0
 80025ac:	2000      	movs	r0, #0
 80025ae:	f001 ff61 	bl	8004474 <BSP_LCD_DisplayStringAt>

    return velocity_avg;
 80025b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

    snprintf(text_, sizeof(text_), "Vel: %6.1f m/s", velocity);
    BSP_LCD_DisplayStringAt(0, 240, (uint8_t*)text_, CENTER_MODE);

    return velocity;*/
}
 80025b4:	ee07 3a90 	vmov	s15, r3
 80025b8:	eeb0 0a67 	vmov.f32	s0, s15
 80025bc:	3750      	adds	r7, #80	@ 0x50
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	44fa0000 	.word	0x44fa0000
 80025c8:	20001bcc 	.word	0x20001bcc
 80025cc:	0800dec4 	.word	0x0800dec4
 80025d0:	419c4000 	.word	0x419c4000
 80025d4:	3c4ccccd 	.word	0x3c4ccccd
 80025d8:	20001fe0 	.word	0x20001fe0
 80025dc:	20001fcc 	.word	0x20001fcc
 80025e0:	0800ded0 	.word	0x0800ded0

080025e4 <FMCW_applyCalibrationFft>:
	BSP_LCD_DisplayStringAt(0, Y_OFFSET + 10, (uint8_t *)"Green: Magnitude (scaled)", CENTER_MODE);

	FFT_data_ready = false;
}

void FMCW_applyCalibrationFft(void){
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
	for(int i = 0; i < ADC_NUMS; i++){
 80025ea:	2300      	movs	r3, #0
 80025ec:	607b      	str	r3, [r7, #4]
 80025ee:	e016      	b.n	800261e <FMCW_applyCalibrationFft+0x3a>
		FFT_MAG[i] = FFT_MAG[i] - FFT_MAG_calibrate[i];
 80025f0:	4a10      	ldr	r2, [pc, #64]	@ (8002634 <FMCW_applyCalibrationFft+0x50>)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	ed93 7a00 	vldr	s14, [r3]
 80025fc:	4a0e      	ldr	r2, [pc, #56]	@ (8002638 <FMCW_applyCalibrationFft+0x54>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	edd3 7a00 	vldr	s15, [r3]
 8002608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800260c:	4a09      	ldr	r2, [pc, #36]	@ (8002634 <FMCW_applyCalibrationFft+0x50>)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < ADC_NUMS; i++){
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3301      	adds	r3, #1
 800261c:	607b      	str	r3, [r7, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2bff      	cmp	r3, #255	@ 0xff
 8002622:	dde5      	ble.n	80025f0 <FMCW_applyCalibrationFft+0xc>
	}
}
 8002624:	bf00      	nop
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20001bcc 	.word	0x20001bcc
 8002638:	20001fe4 	.word	0x20001fe4

0800263c <FMCW_calibrateFft>:

bool FMCW_calibrateFft(void){
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
	static int counter = 0;
	static int number_of_counts = 5;

	switch(calibrate_status){
 8002642:	4b3f      	ldr	r3, [pc, #252]	@ (8002740 <FMCW_calibrateFft+0x104>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d06b      	beq.n	8002722 <FMCW_calibrateFft+0xe6>
 800264a:	2b02      	cmp	r3, #2
 800264c:	d865      	bhi.n	800271a <FMCW_calibrateFft+0xde>
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <FMCW_calibrateFft+0x1c>
 8002652:	2b01      	cmp	r3, #1
 8002654:	d017      	beq.n	8002686 <FMCW_calibrateFft+0x4a>
 8002656:	e060      	b.n	800271a <FMCW_calibrateFft+0xde>

	case 0:		// Start calibration
		counter = 0;
 8002658:	4b3a      	ldr	r3, [pc, #232]	@ (8002744 <FMCW_calibrateFft+0x108>)
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < FFT_SIZE; i++){
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	e00c      	b.n	800267e <FMCW_calibrateFft+0x42>
			FFT_MAG[i] = 0.0f;
 8002664:	4a38      	ldr	r2, [pc, #224]	@ (8002748 <FMCW_calibrateFft+0x10c>)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
			calibrate_status = 1;
 8002672:	4b33      	ldr	r3, [pc, #204]	@ (8002740 <FMCW_calibrateFft+0x104>)
 8002674:	2201      	movs	r2, #1
 8002676:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < FFT_SIZE; i++){
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3301      	adds	r3, #1
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2bff      	cmp	r3, #255	@ 0xff
 8002682:	ddef      	ble.n	8002664 <FMCW_calibrateFft+0x28>
		}
		break;
 8002684:	e04e      	b.n	8002724 <FMCW_calibrateFft+0xe8>

	case 1: 	// Calibration in progress
		if(counter < number_of_counts){
 8002686:	4b2f      	ldr	r3, [pc, #188]	@ (8002744 <FMCW_calibrateFft+0x108>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4b30      	ldr	r3, [pc, #192]	@ (800274c <FMCW_calibrateFft+0x110>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	da22      	bge.n	80026d8 <FMCW_calibrateFft+0x9c>
			for(int i = 0; i < FFT_SIZE; i++){
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	e016      	b.n	80026c6 <FMCW_calibrateFft+0x8a>
				FFT_MAG_calibrate[i] = FFT_MAG_calibrate[i] + FFT_MAG[i];
 8002698:	4a2d      	ldr	r2, [pc, #180]	@ (8002750 <FMCW_calibrateFft+0x114>)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	ed93 7a00 	vldr	s14, [r3]
 80026a4:	4a28      	ldr	r2, [pc, #160]	@ (8002748 <FMCW_calibrateFft+0x10c>)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	edd3 7a00 	vldr	s15, [r3]
 80026b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b4:	4a26      	ldr	r2, [pc, #152]	@ (8002750 <FMCW_calibrateFft+0x114>)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < FFT_SIZE; i++){
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	3301      	adds	r3, #1
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2bff      	cmp	r3, #255	@ 0xff
 80026ca:	dde5      	ble.n	8002698 <FMCW_calibrateFft+0x5c>
			}
			counter++;
 80026cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002744 <FMCW_calibrateFft+0x108>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	3301      	adds	r3, #1
 80026d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002744 <FMCW_calibrateFft+0x108>)
 80026d4:	6013      	str	r3, [r2, #0]
				FFT_MAG_calibrate[i] = FFT_MAG_calibrate[i] / number_of_counts;

			}
			calibrate_status = 2;
		}
		break;
 80026d6:	e025      	b.n	8002724 <FMCW_calibrateFft+0xe8>
			for(int i = 0; i < ADC_NUMS; i++){
 80026d8:	2300      	movs	r3, #0
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	e016      	b.n	800270c <FMCW_calibrateFft+0xd0>
				FFT_MAG_calibrate[i] = FFT_MAG_calibrate[i] / number_of_counts;
 80026de:	4a1c      	ldr	r2, [pc, #112]	@ (8002750 <FMCW_calibrateFft+0x114>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	edd3 6a00 	vldr	s13, [r3]
 80026ea:	4b18      	ldr	r3, [pc, #96]	@ (800274c <FMCW_calibrateFft+0x110>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	ee07 3a90 	vmov	s15, r3
 80026f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026fa:	4a15      	ldr	r2, [pc, #84]	@ (8002750 <FMCW_calibrateFft+0x114>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < ADC_NUMS; i++){
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3301      	adds	r3, #1
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2bff      	cmp	r3, #255	@ 0xff
 8002710:	dde5      	ble.n	80026de <FMCW_calibrateFft+0xa2>
			calibrate_status = 2;
 8002712:	4b0b      	ldr	r3, [pc, #44]	@ (8002740 <FMCW_calibrateFft+0x104>)
 8002714:	2202      	movs	r2, #2
 8002716:	601a      	str	r2, [r3, #0]
		break;
 8002718:	e004      	b.n	8002724 <FMCW_calibrateFft+0xe8>
	case 2:

		break;

	default:
		calibrate_status = 0;
 800271a:	4b09      	ldr	r3, [pc, #36]	@ (8002740 <FMCW_calibrateFft+0x104>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
		break;
 8002720:	e000      	b.n	8002724 <FMCW_calibrateFft+0xe8>
		break;
 8002722:	bf00      	nop

	}


	// return 1
	if(calibrate_status == 2){
 8002724:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <FMCW_calibrateFft+0x104>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d101      	bne.n	8002730 <FMCW_calibrateFft+0xf4>
		return 1;
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <FMCW_calibrateFft+0xf6>
	} else{
		return 0;
 8002730:	2300      	movs	r3, #0
	}

}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	200023e4 	.word	0x200023e4
 8002744:	200023e8 	.word	0x200023e8
 8002748:	20001bcc 	.word	0x20001bcc
 800274c:	20000008 	.word	0x20000008
 8002750:	20001fe4 	.word	0x20001fe4

08002754 <show_data_menu_zero>:

void show_data_menu_zero(void)
{
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b08d      	sub	sp, #52	@ 0x34
 8002758:	af00      	add	r7, sp, #0
    const uint32_t Y_OFFSET = 260;
 800275a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800275e:	61fb      	str	r3, [r7, #28]
    const uint32_t X_SIZE = 240;
 8002760:	23f0      	movs	r3, #240	@ 0xf0
 8002762:	61bb      	str	r3, [r7, #24]
    const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;
 8002764:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	fbb2 f3f3 	udiv	r3, r2, r3
 800276e:	3301      	adds	r3, #1
 8002770:	617b      	str	r3, [r7, #20]
    uint32_t data;
    uint32_t data_last;

    /* Clear the display */
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002772:	f04f 30ff 	mov.w	r0, #4294967295
 8002776:	f001 fdc5 	bl	8004304 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET + 1);
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	b29a      	uxth	r2, r3
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	b29b      	uxth	r3, r3
 8002782:	3301      	adds	r3, #1
 8002784:	b29b      	uxth	r3, r3
 8002786:	2100      	movs	r1, #0
 8002788:	2000      	movs	r0, #0
 800278a:	f001 fffb 	bl	8004784 <BSP_LCD_FillRect>

    /* Write first 2 samples as numbers */
    BSP_LCD_SetFont(&Font24);
 800278e:	4861      	ldr	r0, [pc, #388]	@ (8002914 <show_data_menu_zero+0x1c0>)
 8002790:	f001 fdea 	bl	8004368 <BSP_LCD_SetFont>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	f001 fdcc 	bl	8004334 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800279c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80027a0:	f001 fdb0 	bl	8004304 <BSP_LCD_SetTextColor>
    char text[16];
    snprintf(text, 15, "1. sample %4d", (int)(ADC_samples[0]));
 80027a4:	4b5c      	ldr	r3, [pc, #368]	@ (8002918 <show_data_menu_zero+0x1c4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4638      	mov	r0, r7
 80027aa:	4a5c      	ldr	r2, [pc, #368]	@ (800291c <show_data_menu_zero+0x1c8>)
 80027ac:	210f      	movs	r1, #15
 80027ae:	f009 f9a9 	bl	800bb04 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 50, (uint8_t *)text, LEFT_MODE);
 80027b2:	463a      	mov	r2, r7
 80027b4:	2303      	movs	r3, #3
 80027b6:	2132      	movs	r1, #50	@ 0x32
 80027b8:	2000      	movs	r0, #0
 80027ba:	f001 fe5b 	bl	8004474 <BSP_LCD_DisplayStringAt>
    snprintf(text, 15, "2. sample %4d", (int)(ADC_samples[1]));
 80027be:	4b56      	ldr	r3, [pc, #344]	@ (8002918 <show_data_menu_zero+0x1c4>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4638      	mov	r0, r7
 80027c4:	4a56      	ldr	r2, [pc, #344]	@ (8002920 <show_data_menu_zero+0x1cc>)
 80027c6:	210f      	movs	r1, #15
 80027c8:	f009 f99c 	bl	800bb04 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 80, (uint8_t *)text, LEFT_MODE);
 80027cc:	463a      	mov	r2, r7
 80027ce:	2303      	movs	r3, #3
 80027d0:	2150      	movs	r1, #80	@ 0x50
 80027d2:	2000      	movs	r0, #0
 80027d4:	f001 fe4e 	bl	8004474 <BSP_LCD_DisplayStringAt>

    /* Draw the values of input channel 1 as a curve */
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80027d8:	4852      	ldr	r0, [pc, #328]	@ (8002924 <show_data_menu_zero+0x1d0>)
 80027da:	f001 fd93 	bl	8004304 <BSP_LCD_SetTextColor>
    data = ADC_samples[MEAS_input_count * 0] / f;
 80027de:	4b4e      	ldr	r3, [pc, #312]	@ (8002918 <show_data_menu_zero+0x1c4>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (uint32_t i = 1; i < ADC_NUMS; i++) {
 80027ea:	2301      	movs	r3, #1
 80027ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027ee:	e02e      	b.n	800284e <show_data_menu_zero+0xfa>
        data_last = data;
 80027f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f2:	613b      	str	r3, [r7, #16]
        data = (ADC_samples[MEAS_input_count * i]) / f;
 80027f4:	4b4c      	ldr	r3, [pc, #304]	@ (8002928 <show_data_menu_zero+0x1d4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027fa:	fb02 f303 	mul.w	r3, r2, r3
 80027fe:	4a46      	ldr	r2, [pc, #280]	@ (8002918 <show_data_menu_zero+0x1c4>)
 8002800:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fbb2 f3f3 	udiv	r3, r2, r3
 800280a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (data > Y_OFFSET) data = Y_OFFSET;
 800280c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	429a      	cmp	r2, r3
 8002812:	d901      	bls.n	8002818 <show_data_menu_zero+0xc4>
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i, Y_OFFSET - data);
 8002818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281a:	3b01      	subs	r3, #1
 800281c:	b29b      	uxth	r3, r3
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	b298      	uxth	r0, r3
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	b29a      	uxth	r2, r3
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	b29b      	uxth	r3, r3
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	b299      	uxth	r1, r3
 800282e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002830:	b29b      	uxth	r3, r3
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	b29c      	uxth	r4, r3
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	b29a      	uxth	r2, r3
 800283a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800283c:	b29b      	uxth	r3, r3
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	b29b      	uxth	r3, r3
 8002842:	4622      	mov	r2, r4
 8002844:	f001 fed4 	bl	80045f0 <BSP_LCD_DrawLine>
    for (uint32_t i = 1; i < ADC_NUMS; i++) {
 8002848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284a:	3301      	adds	r3, #1
 800284c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800284e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002850:	2bff      	cmp	r3, #255	@ 0xff
 8002852:	d9cd      	bls.n	80027f0 <show_data_menu_zero+0x9c>
    }

    /* Draw the values of input channel 2 (if present) as a curve */
    if (MEAS_input_count == 2) {
 8002854:	4b34      	ldr	r3, [pc, #208]	@ (8002928 <show_data_menu_zero+0x1d4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d13e      	bne.n	80028da <show_data_menu_zero+0x186>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800285c:	4833      	ldr	r0, [pc, #204]	@ (800292c <show_data_menu_zero+0x1d8>)
 800285e:	f001 fd51 	bl	8004304 <BSP_LCD_SetTextColor>
        data = ADC_samples[MEAS_input_count * 0 + 1] / f;
 8002862:	4b2d      	ldr	r3, [pc, #180]	@ (8002918 <show_data_menu_zero+0x1c4>)
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	fbb2 f3f3 	udiv	r3, r2, r3
 800286c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (uint32_t i = 1; i < ADC_NUMS; i++) {
 800286e:	2301      	movs	r3, #1
 8002870:	627b      	str	r3, [r7, #36]	@ 0x24
 8002872:	e02f      	b.n	80028d4 <show_data_menu_zero+0x180>
            data_last = data;
 8002874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002876:	613b      	str	r3, [r7, #16]
            data = (ADC_samples[MEAS_input_count * i + 1]) / f;
 8002878:	4b2b      	ldr	r3, [pc, #172]	@ (8002928 <show_data_menu_zero+0x1d4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	3301      	adds	r3, #1
 8002884:	4a24      	ldr	r2, [pc, #144]	@ (8002918 <show_data_menu_zero+0x1c4>)
 8002886:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002890:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (data > Y_OFFSET) data = Y_OFFSET;
 8002892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	429a      	cmp	r2, r3
 8002898:	d901      	bls.n	800289e <show_data_menu_zero+0x14a>
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i, Y_OFFSET - data);
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	b298      	uxth	r0, r3
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	b299      	uxth	r1, r3
 80028b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	b29c      	uxth	r4, r3
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	b29a      	uxth	r2, r3
 80028c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	4622      	mov	r2, r4
 80028ca:	f001 fe91 	bl	80045f0 <BSP_LCD_DrawLine>
        for (uint32_t i = 1; i < ADC_NUMS; i++) {
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	3301      	adds	r3, #1
 80028d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	2bff      	cmp	r3, #255	@ 0xff
 80028d8:	d9cc      	bls.n	8002874 <show_data_menu_zero+0x120>
        }
    }

/* Clear buffer and flag */
	for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80028da:	2300      	movs	r3, #0
 80028dc:	623b      	str	r3, [r7, #32]
 80028de:	e00f      	b.n	8002900 <show_data_menu_zero+0x1ac>
		ADC_samples[2 * i] = 0;
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002918 <show_data_menu_zero+0x1c4>)
 80028e6:	2100      	movs	r1, #0
 80028e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		ADC_samples[2 * i + 1] = 0;
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	3301      	adds	r3, #1
 80028f2:	4a09      	ldr	r2, [pc, #36]	@ (8002918 <show_data_menu_zero+0x1c4>)
 80028f4:	2100      	movs	r1, #0
 80028f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	3301      	adds	r3, #1
 80028fe:	623b      	str	r3, [r7, #32]
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	2bff      	cmp	r3, #255	@ 0xff
 8002904:	d9ec      	bls.n	80028e0 <show_data_menu_zero+0x18c>
	}
	ADC_sample_count = 0;
 8002906:	4b0a      	ldr	r3, [pc, #40]	@ (8002930 <show_data_menu_zero+0x1dc>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
}
 800290c:	bf00      	nop
 800290e:	3734      	adds	r7, #52	@ 0x34
 8002910:	46bd      	mov	sp, r7
 8002912:	bd90      	pop	{r4, r7, pc}
 8002914:	20000178 	.word	0x20000178
 8002918:	200003c8 	.word	0x200003c8
 800291c:	0800defc 	.word	0x0800defc
 8002920:	0800df0c 	.word	0x0800df0c
 8002924:	ff0000ff 	.word	0xff0000ff
 8002928:	20000004 	.word	0x20000004
 800292c:	ffff0000 	.word	0xffff0000
 8002930:	200003c4 	.word	0x200003c4

08002934 <show_data_menu_one>:

void show_data_menu_one(void) {
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0


	FMCW_separateSamples();       // Split and DC correct I/Q
 800293a:	f7ff fbe9 	bl	8002110 <FMCW_separateSamples>
    FMCW_applyHanningWindow();    // Optional: Hanning window
 800293e:	f7ff fc77 	bl	8002230 <FMCW_applyHanningWindow>
    FMCW_prepareFft();            // Format I/Q as complex array
 8002942:	f7ff fbb5 	bl	80020b0 <FMCW_prepareFft>
    FMCW_doFft();                 // Run FFT
 8002946:	f7ff fcc9 	bl	80022dc <FMCW_doFft>
    FMCW_convertFftToMagnitude(); // Get magnitudes
 800294a:	f7ff fcdd 	bl	8002308 <FMCW_convertFftToMagnitude>
    FMCW_calibrateFft();
 800294e:	f7ff fe75 	bl	800263c <FMCW_calibrateFft>


    // LCD plotting (FFT magnitude like in menu_zero)
    const uint32_t Y_OFFSET = 260;
 8002952:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002956:	60bb      	str	r3, [r7, #8]
    const uint32_t X_SIZE = 240;
 8002958:	23f0      	movs	r3, #240	@ 0xf0
 800295a:	607b      	str	r3, [r7, #4]
    const uint32_t f = 300; // scaling factor for amplitude, adjust as needed
 800295c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002960:	603b      	str	r3, [r7, #0]
    uint32_t data, data_last;


    // Clear LCD
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002962:	f04f 30ff 	mov.w	r0, #4294967295
 8002966:	f001 fccd 	bl	8004304 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET + 1);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	b29a      	uxth	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	b29b      	uxth	r3, r3
 8002972:	3301      	adds	r3, #1
 8002974:	b29b      	uxth	r3, r3
 8002976:	2100      	movs	r1, #0
 8002978:	2000      	movs	r0, #0
 800297a:	f001 ff03 	bl	8004784 <BSP_LCD_FillRect>

    // Draw FFT magnitude as blue line
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800297e:	4834      	ldr	r0, [pc, #208]	@ (8002a50 <show_data_menu_one+0x11c>)
 8002980:	f001 fcc0 	bl	8004304 <BSP_LCD_SetTextColor>
    data = (uint32_t)(FFT_MAG[0] / f);
 8002984:	4b33      	ldr	r3, [pc, #204]	@ (8002a54 <show_data_menu_one+0x120>)
 8002986:	edd3 6a00 	vldr	s13, [r3]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	ee07 3a90 	vmov	s15, r3
 8002990:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800299c:	ee17 3a90 	vmov	r3, s15
 80029a0:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 1; i < FFT_SIZE; i++) {
 80029a2:	2301      	movs	r3, #1
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	e03f      	b.n	8002a28 <show_data_menu_one+0xf4>
        data_last = data;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	613b      	str	r3, [r7, #16]
        data = (uint32_t)(FFT_MAG[i] / f);
 80029ac:	4a29      	ldr	r2, [pc, #164]	@ (8002a54 <show_data_menu_one+0x120>)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	edd3 6a00 	vldr	s13, [r3]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	ee07 3a90 	vmov	s15, r3
 80029be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029ca:	ee17 3a90 	vmov	r3, s15
 80029ce:	617b      	str	r3, [r7, #20]
        if (data > Y_OFFSET) data = Y_OFFSET;
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d901      	bls.n	80029dc <show_data_menu_one+0xa8>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	617b      	str	r3, [r7, #20]
        if (data_last > Y_OFFSET) data_last = Y_OFFSET;
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d901      	bls.n	80029e8 <show_data_menu_one+0xb4>
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	613b      	str	r3, [r7, #16]
        BSP_LCD_DrawLine(3 * (i - 1), Y_OFFSET - data_last, 3 * i, Y_OFFSET - data);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	0052      	lsls	r2, r2, #1
 80029f0:	4413      	add	r3, r2
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b03      	subs	r3, #3
 80029f6:	b298      	uxth	r0, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	b299      	uxth	r1, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	0052      	lsls	r2, r2, #1
 8002a0c:	4413      	add	r3, r2
 8002a0e:	b29c      	uxth	r4, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	4622      	mov	r2, r4
 8002a1e:	f001 fde7 	bl	80045f0 <BSP_LCD_DrawLine>
    for (uint32_t i = 1; i < FFT_SIZE; i++) {
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	3301      	adds	r3, #1
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2bff      	cmp	r3, #255	@ 0xff
 8002a2c:	d9bc      	bls.n	80029a8 <show_data_menu_one+0x74>
    }

    // Optional: Display peak frequency and velocity
    FMCW_getPeakMangitudeFrequency();  // Also shows frequency on LCD
 8002a2e:	f7ff fca5 	bl	800237c <FMCW_getPeakMangitudeFrequency>
    if(calibrate_status == 2){
 8002a32:	4b09      	ldr	r3, [pc, #36]	@ (8002a58 <show_data_menu_one+0x124>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d106      	bne.n	8002a48 <show_data_menu_one+0x114>
    	FMCW_applyCalibrationFft();
 8002a3a:	f7ff fdd3 	bl	80025e4 <FMCW_applyCalibrationFft>
    	FMCW_getRadialVelocity();
 8002a3e:	f7ff fd07 	bl	8002450 <FMCW_getRadialVelocity>
    	//FMCW_show_fft_magnitude_scaled(0.001);
    	//FMCW_getPeakMangitudeFrequency();
    	MEAS_data_ready = false;
 8002a42:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <show_data_menu_one+0x128>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]


    }
}
 8002a48:	bf00      	nop
 8002a4a:	371c      	adds	r7, #28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd90      	pop	{r4, r7, pc}
 8002a50:	ff0000ff 	.word	0xff0000ff
 8002a54:	20001bcc 	.word	0x20001bcc
 8002a58:	200023e4 	.word	0x200023e4
 8002a5c:	200003c0 	.word	0x200003c0

08002a60 <MENU_draw>:
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(void)
{
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(MENU_FONT);
 8002a66:	4852      	ldr	r0, [pc, #328]	@ (8002bb0 <MENU_draw+0x150>)
 8002a68:	f001 fc7e 	bl	8004368 <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MENU_Y;
 8002a6c:	f001 fbca 	bl	8004204 <BSP_LCD_GetYSize>
 8002a70:	4603      	mov	r3, r0
 8002a72:	3b28      	subs	r3, #40	@ 0x28
 8002a74:	613b      	str	r3, [r7, #16]
	m = MENU_MARGIN;
 8002a76:	2302      	movs	r3, #2
 8002a78:	60fb      	str	r3, [r7, #12]
	w = BSP_LCD_GetXSize()/MENU_ENTRY_COUNT;
 8002a7a:	f001 fbb7 	bl	80041ec <BSP_LCD_GetXSize>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4a4c      	ldr	r2, [pc, #304]	@ (8002bb4 <MENU_draw+0x154>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	60bb      	str	r3, [r7, #8]
	h = MENU_HEIGHT;
 8002a8a:	2328      	movs	r3, #40	@ 0x28
 8002a8c:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	e084      	b.n	8002b9e <MENU_draw+0x13e>
		x = i*w;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	fb02 f303 	mul.w	r3, r2, r3
 8002a9c:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(MENU_entry[i].back_color);
 8002a9e:	4946      	ldr	r1, [pc, #280]	@ (8002bb8 <MENU_draw+0x158>)
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	440b      	add	r3, r1
 8002aac:	3324      	adds	r3, #36	@ 0x24
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f001 fc27 	bl	8004304 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	b298      	uxth	r0, r3
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	b299      	uxth	r1, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	b29c      	uxth	r4, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	4622      	mov	r2, r4
 8002af0:	f001 fe48 	bl	8004784 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(MENU_entry[i].back_color);
 8002af4:	4930      	ldr	r1, [pc, #192]	@ (8002bb8 <MENU_draw+0x158>)
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	440b      	add	r3, r1
 8002b02:	3324      	adds	r3, #36	@ 0x24
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f001 fc14 	bl	8004334 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(MENU_entry[i].text_color);
 8002b0c:	492a      	ldr	r1, [pc, #168]	@ (8002bb8 <MENU_draw+0x158>)
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	440b      	add	r3, r1
 8002b1a:	3320      	adds	r3, #32
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f001 fbf0 	bl	8004304 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	0052      	lsls	r2, r2, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	b298      	uxth	r0, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	0052      	lsls	r2, r2, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line1, LEFT_MODE);
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4a18      	ldr	r2, [pc, #96]	@ (8002bb8 <MENU_draw+0x158>)
 8002b58:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	f001 fc8a 	bl	8004474 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	0052      	lsls	r2, r2, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	4413      	add	r3, r2
 8002b72:	b298      	uxth	r0, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	085b      	lsrs	r3, r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line2, LEFT_MODE);
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	3310      	adds	r3, #16
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb8 <MENU_draw+0x158>)
 8002b90:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 8002b92:	2303      	movs	r3, #3
 8002b94:	f001 fc6e 	bl	8004474 <BSP_LCD_DisplayStringAt>
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2b05      	cmp	r3, #5
 8002ba2:	f67f af77 	bls.w	8002a94 <MENU_draw+0x34>
	}
}
 8002ba6:	bf00      	nop
 8002ba8:	bf00      	nop
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd90      	pop	{r4, r7, pc}
 8002bb0:	20000188 	.word	0x20000188
 8002bb4:	aaaaaaab 	.word	0xaaaaaaab
 8002bb8:	20000010 	.word	0x20000010

08002bbc <MENU_hint>:
/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_hint(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	f001 fbb6 	bl	8004334 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002bc8:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002bcc:	f001 fb9a 	bl	8004304 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 8002bd0:	4818      	ldr	r0, [pc, #96]	@ (8002c34 <MENU_hint+0x78>)
 8002bd2:	f001 fbc9 	bl	8004368 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"KEK-CODE", LEFT_MODE);
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	4a17      	ldr	r2, [pc, #92]	@ (8002c38 <MENU_hint+0x7c>)
 8002bda:	210a      	movs	r1, #10
 8002bdc:	2005      	movs	r0, #5
 8002bde:	f001 fc49 	bl	8004474 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 8002be2:	4816      	ldr	r0, [pc, #88]	@ (8002c3c <MENU_hint+0x80>)
 8002be4:	f001 fbc0 	bl	8004368 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Touch a menu item", LEFT_MODE);
 8002be8:	2303      	movs	r3, #3
 8002bea:	4a15      	ldr	r2, [pc, #84]	@ (8002c40 <MENU_hint+0x84>)
 8002bec:	213c      	movs	r1, #60	@ 0x3c
 8002bee:	2005      	movs	r0, #5
 8002bf0:	f001 fc40 	bl	8004474 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 80, (uint8_t *)"to start an ADC demo", LEFT_MODE);
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	4a13      	ldr	r2, [pc, #76]	@ (8002c44 <MENU_hint+0x88>)
 8002bf8:	2150      	movs	r1, #80	@ 0x50
 8002bfa:	2005      	movs	r0, #5
 8002bfc:	f001 fc3a 	bl	8004474 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 110, (uint8_t *)"Switch DAC on/off", LEFT_MODE);
 8002c00:	2303      	movs	r3, #3
 8002c02:	4a11      	ldr	r2, [pc, #68]	@ (8002c48 <MENU_hint+0x8c>)
 8002c04:	216e      	movs	r1, #110	@ 0x6e
 8002c06:	2005      	movs	r0, #5
 8002c08:	f001 fc34 	bl	8004474 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 130, (uint8_t *)"with blue pushbutton", LEFT_MODE);
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	4a0f      	ldr	r2, [pc, #60]	@ (8002c4c <MENU_hint+0x90>)
 8002c10:	2182      	movs	r1, #130	@ 0x82
 8002c12:	2005      	movs	r0, #5
 8002c14:	f001 fc2e 	bl	8004474 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"(c) hhrt@zhaw.ch", LEFT_MODE);
 8002c18:	2303      	movs	r3, #3
 8002c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8002c50 <MENU_hint+0x94>)
 8002c1c:	21a0      	movs	r1, #160	@ 0xa0
 8002c1e:	2005      	movs	r0, #5
 8002c20:	f001 fc28 	bl	8004474 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"Version 27.09.2022", LEFT_MODE);
 8002c24:	2303      	movs	r3, #3
 8002c26:	4a0b      	ldr	r2, [pc, #44]	@ (8002c54 <MENU_hint+0x98>)
 8002c28:	21a0      	movs	r1, #160	@ 0xa0
 8002c2a:	2005      	movs	r0, #5
 8002c2c:	f001 fc22 	bl	8004474 <BSP_LCD_DisplayStringAt>
}
 8002c30:	bf00      	nop
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000178 	.word	0x20000178
 8002c38:	0800df1c 	.word	0x0800df1c
 8002c3c:	20000180 	.word	0x20000180
 8002c40:	0800df28 	.word	0x0800df28
 8002c44:	0800df3c 	.word	0x0800df3c
 8002c48:	0800df54 	.word	0x0800df54
 8002c4c:	0800df68 	.word	0x0800df68
 8002c50:	0800df80 	.word	0x0800df80
 8002c54:	0800df94 	.word	0x0800df94

08002c58 <MENU_get_transition>:
	MENU_transition = MENU_NONE;
	return item;
}*/

MENU_item_t MENU_get_transition(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
	/*
	MENU_item_t item = MENU_transition;
	MENU_transition = MENU_NONE;
	return item;
	*/
	return MENU_transition;
 8002c5c:	4b03      	ldr	r3, [pc, #12]	@ (8002c6c <MENU_get_transition+0x14>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	2000000c 	.word	0x2000000c

08002c70 <MENU_check_transition>:
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/

void MENU_check_transition(void)
{
 8002c70:	b598      	push	{r3, r4, r7, lr}
 8002c72:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 8002c74:	482f      	ldr	r0, [pc, #188]	@ (8002d34 <MENU_check_transition+0xc4>)
 8002c76:	f002 fa3b 	bl	80050f0 <BSP_TS_GetState>

// Evalboard revision E (blue) has an inverted y-axis in the touch controller
#ifdef EVAL_REV_E
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8002c7a:	f001 fac3 	bl	8004204 <BSP_LCD_GetYSize>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	4b2c      	ldr	r3, [pc, #176]	@ (8002d34 <MENU_check_transition+0xc4>)
 8002c84:	889b      	ldrh	r3, [r3, #4]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002d34 <MENU_check_transition+0xc4>)
 8002c8c:	809a      	strh	r2, [r3, #4]
#endif
	// Invert x- and y-axis if LCD ist flipped
#ifdef FLIPPED_LCD
	TS_State.X = BSP_LCD_GetXSize() - TS_State.X;	// Invert the x-axis
 8002c8e:	f001 faad 	bl	80041ec <BSP_LCD_GetXSize>
 8002c92:	4603      	mov	r3, r0
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	4b27      	ldr	r3, [pc, #156]	@ (8002d34 <MENU_check_transition+0xc4>)
 8002c98:	885b      	ldrh	r3, [r3, #2]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	4b25      	ldr	r3, [pc, #148]	@ (8002d34 <MENU_check_transition+0xc4>)
 8002ca0:	805a      	strh	r2, [r3, #2]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8002ca2:	f001 faaf 	bl	8004204 <BSP_LCD_GetYSize>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	4b22      	ldr	r3, [pc, #136]	@ (8002d34 <MENU_check_transition+0xc4>)
 8002cac:	889b      	ldrh	r3, [r3, #4]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	4b20      	ldr	r3, [pc, #128]	@ (8002d34 <MENU_check_transition+0xc4>)
 8002cb4:	809a      	strh	r2, [r3, #4]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
#endif
#ifdef EVAL_REV_E
#endif
*/
	if (TS_State.TouchDetected) {		// If a touch was detected
 8002cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d34 <MENU_check_transition+0xc4>)
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d037      	beq.n	8002d2e <MENU_check_transition+0xbe>
					MENU_transition = item_old;
				}
			}
		}*/

        item_old = item_new;           // Update old item
 8002cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d38 <MENU_check_transition+0xc8>)
 8002cc0:	781a      	ldrb	r2, [r3, #0]
 8002cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d3c <MENU_check_transition+0xcc>)
 8002cc4:	701a      	strb	r2, [r3, #0]
        if ((MENU_Y < TS_State.Y) && (MENU_Y + MENU_HEIGHT > TS_State.Y)) {
 8002cc6:	f001 fa9d 	bl	8004204 <BSP_LCD_GetYSize>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	3b28      	subs	r3, #40	@ 0x28
 8002cce:	4a19      	ldr	r2, [pc, #100]	@ (8002d34 <MENU_check_transition+0xc4>)
 8002cd0:	8892      	ldrh	r2, [r2, #4]
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d22b      	bcs.n	8002d2e <MENU_check_transition+0xbe>
 8002cd6:	f001 fa95 	bl	8004204 <BSP_LCD_GetYSize>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	4a15      	ldr	r2, [pc, #84]	@ (8002d34 <MENU_check_transition+0xc4>)
 8002cde:	8892      	ldrh	r2, [r2, #4]
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d924      	bls.n	8002d2e <MENU_check_transition+0xbe>
            item_new = TS_State.X / (BSP_LCD_GetXSize() / MENU_ENTRY_COUNT);
 8002ce4:	4b13      	ldr	r3, [pc, #76]	@ (8002d34 <MENU_check_transition+0xc4>)
 8002ce6:	885b      	ldrh	r3, [r3, #2]
 8002ce8:	461c      	mov	r4, r3
 8002cea:	f001 fa7f 	bl	80041ec <BSP_LCD_GetXSize>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4a13      	ldr	r2, [pc, #76]	@ (8002d40 <MENU_check_transition+0xd0>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	fbb4 f3f3 	udiv	r3, r4, r3
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8002d38 <MENU_check_transition+0xc8>)
 8002d00:	701a      	strb	r2, [r3, #0]
            if ((item_new < 0) || (item_new >= MENU_ENTRY_COUNT)) {
 8002d02:	4b0d      	ldr	r3, [pc, #52]	@ (8002d38 <MENU_check_transition+0xc8>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b05      	cmp	r3, #5
 8002d08:	d902      	bls.n	8002d10 <MENU_check_transition+0xa0>
                item_new = MENU_NONE;  // Out of bounds
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <MENU_check_transition+0xc8>)
 8002d0c:	2206      	movs	r2, #6
 8002d0e:	701a      	strb	r2, [r3, #0]
            }
            if (item_new == item_old) { // Handle same menu item touch
 8002d10:	4b09      	ldr	r3, [pc, #36]	@ (8002d38 <MENU_check_transition+0xc8>)
 8002d12:	781a      	ldrb	r2, [r3, #0]
 8002d14:	4b09      	ldr	r3, [pc, #36]	@ (8002d3c <MENU_check_transition+0xcc>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d104      	bne.n	8002d26 <MENU_check_transition+0xb6>
                MENU_transition = item_old;
 8002d1c:	4b07      	ldr	r3, [pc, #28]	@ (8002d3c <MENU_check_transition+0xcc>)
 8002d1e:	781a      	ldrb	r2, [r3, #0]
 8002d20:	4b08      	ldr	r3, [pc, #32]	@ (8002d44 <MENU_check_transition+0xd4>)
 8002d22:	701a      	strb	r2, [r3, #0]
	} else {
//		sprintf(msg, "No touch detected\r\n");
//		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	}

}
 8002d24:	e003      	b.n	8002d2e <MENU_check_transition+0xbe>
                MENU_transition = item_new;
 8002d26:	4b04      	ldr	r3, [pc, #16]	@ (8002d38 <MENU_check_transition+0xc8>)
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	4b06      	ldr	r3, [pc, #24]	@ (8002d44 <MENU_check_transition+0xd4>)
 8002d2c:	701a      	strb	r2, [r3, #0]
}
 8002d2e:	bf00      	nop
 8002d30:	bd98      	pop	{r3, r4, r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200023ec 	.word	0x200023ec
 8002d38:	20000100 	.word	0x20000100
 8002d3c:	20000101 	.word	0x20000101
 8002d40:	aaaaaaab 	.word	0xaaaaaaab
 8002d44:	2000000c 	.word	0x2000000c

08002d48 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 8002d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d88 <EXTI15_10_IRQHandler+0x40>)
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d014      	beq.n	8002d82 <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8002d58:	4b0b      	ldr	r3, [pc, #44]	@ (8002d88 <EXTI15_10_IRQHandler+0x40>)
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d88 <EXTI15_10_IRQHandler+0x40>)
 8002d5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d62:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 8002d64:	f002 f9b8 	bl	80050d8 <BSP_TS_ITGetStatus>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 8002d6e:	f002 fa71 	bl	8005254 <BSP_TS_ITClear>
			MENU_check_transition();
 8002d72:	f7ff ff7d 	bl	8002c70 <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8002d76:	4b04      	ldr	r3, [pc, #16]	@ (8002d88 <EXTI15_10_IRQHandler+0x40>)
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	4a03      	ldr	r2, [pc, #12]	@ (8002d88 <EXTI15_10_IRQHandler+0x40>)
 8002d7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d80:	6153      	str	r3, [r2, #20]
	}
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40013c00 	.word	0x40013c00

08002d8c <__NVIC_EnableIRQ>:
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	db0b      	blt.n	8002db6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	f003 021f 	and.w	r2, r3, #31
 8002da4:	4907      	ldr	r1, [pc, #28]	@ (8002dc4 <__NVIC_EnableIRQ+0x38>)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	2001      	movs	r0, #1
 8002dae:	fa00 f202 	lsl.w	r2, r0, r2
 8002db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	e000e100 	.word	0xe000e100

08002dc8 <__NVIC_ClearPendingIRQ>:
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	db0c      	blt.n	8002df4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	f003 021f 	and.w	r2, r3, #31
 8002de0:	4907      	ldr	r1, [pc, #28]	@ (8002e00 <__NVIC_ClearPendingIRQ+0x38>)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	2001      	movs	r0, #1
 8002dea:	fa00 f202 	lsl.w	r2, r0, r2
 8002dee:	3360      	adds	r3, #96	@ 0x60
 8002df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e000e100 	.word	0xe000e100

08002e04 <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	607b      	str	r3, [r7, #4]
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e3c <PB_init+0x38>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	4a0a      	ldr	r2, [pc, #40]	@ (8002e3c <PB_init+0x38>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e1a:	4b08      	ldr	r3, [pc, #32]	@ (8002e3c <PB_init+0x38>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8002e26:	4b06      	ldr	r3, [pc, #24]	@ (8002e40 <PB_init+0x3c>)
 8002e28:	4a05      	ldr	r2, [pc, #20]	@ (8002e40 <PB_init+0x3c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6013      	str	r3, [r2, #0]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40020000 	.word	0x40020000

08002e44 <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	607b      	str	r3, [r7, #4]
 8002e4e:	4b13      	ldr	r3, [pc, #76]	@ (8002e9c <PB_enableIRQ+0x58>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e52:	4a12      	ldr	r2, [pc, #72]	@ (8002e9c <PB_enableIRQ+0x58>)
 8002e54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e5a:	4b10      	ldr	r3, [pc, #64]	@ (8002e9c <PB_enableIRQ+0x58>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e62:	607b      	str	r3, [r7, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 8002e66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea0 <PB_enableIRQ+0x5c>)
 8002e68:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea0 <PB_enableIRQ+0x5c>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea4 <PB_enableIRQ+0x60>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea4 <PB_enableIRQ+0x60>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <PB_enableIRQ+0x60>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a09      	ldr	r2, [pc, #36]	@ (8002ea4 <PB_enableIRQ+0x60>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 8002e86:	2006      	movs	r0, #6
 8002e88:	f7ff ff9e 	bl	8002dc8 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8002e8c:	2006      	movs	r0, #6
 8002e8e:	f7ff ff7d 	bl	8002d8c <__NVIC_EnableIRQ>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40013800 	.word	0x40013800
 8002ea4:	40013c00 	.word	0x40013c00

08002ea8 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 8002eac:	4b09      	ldr	r3, [pc, #36]	@ (8002ed4 <EXTI0_IRQHandler+0x2c>)
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8002eb8:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <EXTI0_IRQHandler+0x2c>)
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	4a05      	ldr	r2, [pc, #20]	@ (8002ed4 <EXTI0_IRQHandler+0x2c>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8002ec4:	4b04      	ldr	r3, [pc, #16]	@ (8002ed8 <EXTI0_IRQHandler+0x30>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
	}
}
 8002eca:	bf00      	nop
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	40013c00 	.word	0x40013c00
 8002ed8:	200023f4 	.word	0x200023f4

08002edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	607b      	str	r3, [r7, #4]
 8002ee6:	4b10      	ldr	r3, [pc, #64]	@ (8002f28 <HAL_MspInit+0x4c>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eea:	4a0f      	ldr	r2, [pc, #60]	@ (8002f28 <HAL_MspInit+0x4c>)
 8002eec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f28 <HAL_MspInit+0x4c>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002efa:	607b      	str	r3, [r7, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	603b      	str	r3, [r7, #0]
 8002f02:	4b09      	ldr	r3, [pc, #36]	@ (8002f28 <HAL_MspInit+0x4c>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	4a08      	ldr	r2, [pc, #32]	@ (8002f28 <HAL_MspInit+0x4c>)
 8002f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f0e:	4b06      	ldr	r3, [pc, #24]	@ (8002f28 <HAL_MspInit+0x4c>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40023800 	.word	0x40023800

08002f2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08a      	sub	sp, #40	@ 0x28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f34:	f107 0314 	add.w	r3, r7, #20
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc0 <HAL_UART_MspInit+0x94>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d134      	bne.n	8002fb8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc4 <HAL_UART_MspInit+0x98>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f56:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc4 <HAL_UART_MspInit+0x98>)
 8002f58:	f043 0310 	orr.w	r3, r3, #16
 8002f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f5e:	4b19      	ldr	r3, [pc, #100]	@ (8002fc4 <HAL_UART_MspInit+0x98>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	4b15      	ldr	r3, [pc, #84]	@ (8002fc4 <HAL_UART_MspInit+0x98>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f72:	4a14      	ldr	r2, [pc, #80]	@ (8002fc4 <HAL_UART_MspInit+0x98>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f7a:	4b12      	ldr	r3, [pc, #72]	@ (8002fc4 <HAL_UART_MspInit+0x98>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f86:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f94:	2303      	movs	r3, #3
 8002f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f98:	2307      	movs	r3, #7
 8002f9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9c:	f107 0314 	add.w	r3, r7, #20
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4809      	ldr	r0, [pc, #36]	@ (8002fc8 <HAL_UART_MspInit+0x9c>)
 8002fa4:	f003 f830 	bl	8006008 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2100      	movs	r1, #0
 8002fac:	2025      	movs	r0, #37	@ 0x25
 8002fae:	f002 fba0 	bl	80056f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fb2:	2025      	movs	r0, #37	@ 0x25
 8002fb4:	f002 fbb9 	bl	800572a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002fb8:	bf00      	nop
 8002fba:	3728      	adds	r7, #40	@ 0x28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40011000 	.word	0x40011000
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40020000 	.word	0x40020000

08002fcc <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 8002fde:	bf00      	nop
 8002fe0:	e7fd      	b.n	8002fde <HardFault_Handler+0x4>

08002fe2 <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 8002fe6:	bf00      	nop
 8002fe8:	e7fd      	b.n	8002fe6 <MemManage_Handler+0x4>

08002fea <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 8002fee:	bf00      	nop
 8002ff0:	e7fd      	b.n	8002fee <BusFault_Handler+0x4>

08002ff2 <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 8002ff6:	bf00      	nop
 8002ff8:	e7fd      	b.n	8002ff6 <UsageFault_Handler+0x4>

08002ffa <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	af00      	add	r7, sp, #0
}
 8002ffe:	bf00      	nop
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0
}
 800301a:	bf00      	nop
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8003028:	f002 fa44 	bl	80054b4 <HAL_IncTick>
}
 800302c:	bf00      	nop
 800302e:	bd80      	pop	{r7, pc}

08003030 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003034:	4b16      	ldr	r3, [pc, #88]	@ (8003090 <SystemInit+0x60>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800303a:	4a15      	ldr	r2, [pc, #84]	@ (8003090 <SystemInit+0x60>)
 800303c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003040:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003044:	4b13      	ldr	r3, [pc, #76]	@ (8003094 <SystemInit+0x64>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a12      	ldr	r2, [pc, #72]	@ (8003094 <SystemInit+0x64>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003050:	4b10      	ldr	r3, [pc, #64]	@ (8003094 <SystemInit+0x64>)
 8003052:	2200      	movs	r2, #0
 8003054:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003056:	4b0f      	ldr	r3, [pc, #60]	@ (8003094 <SystemInit+0x64>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a0e      	ldr	r2, [pc, #56]	@ (8003094 <SystemInit+0x64>)
 800305c:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8003060:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003064:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003066:	4b0b      	ldr	r3, [pc, #44]	@ (8003094 <SystemInit+0x64>)
 8003068:	4a0b      	ldr	r2, [pc, #44]	@ (8003098 <SystemInit+0x68>)
 800306a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800306c:	4b09      	ldr	r3, [pc, #36]	@ (8003094 <SystemInit+0x64>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a08      	ldr	r2, [pc, #32]	@ (8003094 <SystemInit+0x64>)
 8003072:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003076:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003078:	4b06      	ldr	r3, [pc, #24]	@ (8003094 <SystemInit+0x64>)
 800307a:	2200      	movs	r2, #0
 800307c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800307e:	4b04      	ldr	r3, [pc, #16]	@ (8003090 <SystemInit+0x60>)
 8003080:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003084:	609a      	str	r2, [r3, #8]
#endif
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	e000ed00 	.word	0xe000ed00
 8003094:	40023800 	.word	0x40023800
 8003098:	24003010 	.word	0x24003010

0800309c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800309c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030d4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80030a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80030a2:	e003      	b.n	80030ac <LoopCopyDataInit>

080030a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80030a4:	4b0c      	ldr	r3, [pc, #48]	@ (80030d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80030a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80030a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80030aa:	3104      	adds	r1, #4

080030ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030ac:	480b      	ldr	r0, [pc, #44]	@ (80030dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030ae:	4b0c      	ldr	r3, [pc, #48]	@ (80030e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80030b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80030b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030b4:	d3f6      	bcc.n	80030a4 <CopyDataInit>
  ldr  r2, =_sbss
 80030b6:	4a0b      	ldr	r2, [pc, #44]	@ (80030e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80030b8:	e002      	b.n	80030c0 <LoopFillZerobss>

080030ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80030ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030bc:	f842 3b04 	str.w	r3, [r2], #4

080030c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030c0:	4b09      	ldr	r3, [pc, #36]	@ (80030e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030c4:	d3f9      	bcc.n	80030ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030c6:	f7ff ffb3 	bl	8003030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ca:	f008 fe05 	bl	800bcd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030ce:	f7fd ff53 	bl	8000f78 <main>
  bx  lr    
 80030d2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80030d4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80030d8:	08026b48 	.word	0x08026b48
  ldr  r0, =_sdata
 80030dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030e0:	20000364 	.word	0x20000364
  ldr  r2, =_sbss
 80030e4:	20000364 	.word	0x20000364
  ldr  r3, = _ebss
 80030e8:	2000280c 	.word	0x2000280c

080030ec <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030ec:	e7fe      	b.n	80030ec <CAN1_RX0_IRQHandler>

080030ee <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80030f2:	f000 feb9 	bl	8003e68 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80030f6:	20ca      	movs	r0, #202	@ 0xca
 80030f8:	f000 f95d 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80030fc:	20c3      	movs	r0, #195	@ 0xc3
 80030fe:	f000 f967 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8003102:	2008      	movs	r0, #8
 8003104:	f000 f964 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8003108:	2050      	movs	r0, #80	@ 0x50
 800310a:	f000 f961 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800310e:	20cf      	movs	r0, #207	@ 0xcf
 8003110:	f000 f951 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003114:	2000      	movs	r0, #0
 8003116:	f000 f95b 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800311a:	20c1      	movs	r0, #193	@ 0xc1
 800311c:	f000 f958 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8003120:	2030      	movs	r0, #48	@ 0x30
 8003122:	f000 f955 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8003126:	20ed      	movs	r0, #237	@ 0xed
 8003128:	f000 f945 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800312c:	2064      	movs	r0, #100	@ 0x64
 800312e:	f000 f94f 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8003132:	2003      	movs	r0, #3
 8003134:	f000 f94c 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8003138:	2012      	movs	r0, #18
 800313a:	f000 f949 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800313e:	2081      	movs	r0, #129	@ 0x81
 8003140:	f000 f946 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8003144:	20e8      	movs	r0, #232	@ 0xe8
 8003146:	f000 f936 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800314a:	2085      	movs	r0, #133	@ 0x85
 800314c:	f000 f940 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003150:	2000      	movs	r0, #0
 8003152:	f000 f93d 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8003156:	2078      	movs	r0, #120	@ 0x78
 8003158:	f000 f93a 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800315c:	20cb      	movs	r0, #203	@ 0xcb
 800315e:	f000 f92a 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8003162:	2039      	movs	r0, #57	@ 0x39
 8003164:	f000 f934 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8003168:	202c      	movs	r0, #44	@ 0x2c
 800316a:	f000 f931 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800316e:	2000      	movs	r0, #0
 8003170:	f000 f92e 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8003174:	2034      	movs	r0, #52	@ 0x34
 8003176:	f000 f92b 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800317a:	2002      	movs	r0, #2
 800317c:	f000 f928 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8003180:	20f7      	movs	r0, #247	@ 0xf7
 8003182:	f000 f918 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8003186:	2020      	movs	r0, #32
 8003188:	f000 f922 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800318c:	20ea      	movs	r0, #234	@ 0xea
 800318e:	f000 f912 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003192:	2000      	movs	r0, #0
 8003194:	f000 f91c 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003198:	2000      	movs	r0, #0
 800319a:	f000 f919 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800319e:	20b1      	movs	r0, #177	@ 0xb1
 80031a0:	f000 f909 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f000 f913 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80031aa:	201b      	movs	r0, #27
 80031ac:	f000 f910 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80031b0:	20b6      	movs	r0, #182	@ 0xb6
 80031b2:	f000 f900 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80031b6:	200a      	movs	r0, #10
 80031b8:	f000 f90a 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80031bc:	20a2      	movs	r0, #162	@ 0xa2
 80031be:	f000 f907 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80031c2:	20c0      	movs	r0, #192	@ 0xc0
 80031c4:	f000 f8f7 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80031c8:	2010      	movs	r0, #16
 80031ca:	f000 f901 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80031ce:	20c1      	movs	r0, #193	@ 0xc1
 80031d0:	f000 f8f1 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80031d4:	2010      	movs	r0, #16
 80031d6:	f000 f8fb 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80031da:	20c5      	movs	r0, #197	@ 0xc5
 80031dc:	f000 f8eb 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80031e0:	2045      	movs	r0, #69	@ 0x45
 80031e2:	f000 f8f5 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80031e6:	2015      	movs	r0, #21
 80031e8:	f000 f8f2 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80031ec:	20c7      	movs	r0, #199	@ 0xc7
 80031ee:	f000 f8e2 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80031f2:	2090      	movs	r0, #144	@ 0x90
 80031f4:	f000 f8ec 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80031f8:	2036      	movs	r0, #54	@ 0x36
 80031fa:	f000 f8dc 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80031fe:	20c8      	movs	r0, #200	@ 0xc8
 8003200:	f000 f8e6 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8003204:	20f2      	movs	r0, #242	@ 0xf2
 8003206:	f000 f8d6 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800320a:	2000      	movs	r0, #0
 800320c:	f000 f8e0 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8003210:	20b0      	movs	r0, #176	@ 0xb0
 8003212:	f000 f8d0 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8003216:	20c2      	movs	r0, #194	@ 0xc2
 8003218:	f000 f8da 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800321c:	20b6      	movs	r0, #182	@ 0xb6
 800321e:	f000 f8ca 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8003222:	200a      	movs	r0, #10
 8003224:	f000 f8d4 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8003228:	20a7      	movs	r0, #167	@ 0xa7
 800322a:	f000 f8d1 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800322e:	2027      	movs	r0, #39	@ 0x27
 8003230:	f000 f8ce 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8003234:	2004      	movs	r0, #4
 8003236:	f000 f8cb 	bl	80033d0 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800323a:	202a      	movs	r0, #42	@ 0x2a
 800323c:	f000 f8bb 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003240:	2000      	movs	r0, #0
 8003242:	f000 f8c5 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003246:	2000      	movs	r0, #0
 8003248:	f000 f8c2 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800324c:	2000      	movs	r0, #0
 800324e:	f000 f8bf 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8003252:	20ef      	movs	r0, #239	@ 0xef
 8003254:	f000 f8bc 	bl	80033d0 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8003258:	202b      	movs	r0, #43	@ 0x2b
 800325a:	f000 f8ac 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800325e:	2000      	movs	r0, #0
 8003260:	f000 f8b6 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003264:	2000      	movs	r0, #0
 8003266:	f000 f8b3 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800326a:	2001      	movs	r0, #1
 800326c:	f000 f8b0 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8003270:	203f      	movs	r0, #63	@ 0x3f
 8003272:	f000 f8ad 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8003276:	20f6      	movs	r0, #246	@ 0xf6
 8003278:	f000 f89d 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800327c:	2001      	movs	r0, #1
 800327e:	f000 f8a7 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003282:	2000      	movs	r0, #0
 8003284:	f000 f8a4 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8003288:	2006      	movs	r0, #6
 800328a:	f000 f8a1 	bl	80033d0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800328e:	202c      	movs	r0, #44	@ 0x2c
 8003290:	f000 f891 	bl	80033b6 <ili9341_WriteReg>
  LCD_Delay(200);
 8003294:	20c8      	movs	r0, #200	@ 0xc8
 8003296:	f000 fed5 	bl	8004044 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800329a:	2026      	movs	r0, #38	@ 0x26
 800329c:	f000 f88b 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80032a0:	2001      	movs	r0, #1
 80032a2:	f000 f895 	bl	80033d0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80032a6:	20e0      	movs	r0, #224	@ 0xe0
 80032a8:	f000 f885 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80032ac:	200f      	movs	r0, #15
 80032ae:	f000 f88f 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80032b2:	2029      	movs	r0, #41	@ 0x29
 80032b4:	f000 f88c 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80032b8:	2024      	movs	r0, #36	@ 0x24
 80032ba:	f000 f889 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80032be:	200c      	movs	r0, #12
 80032c0:	f000 f886 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80032c4:	200e      	movs	r0, #14
 80032c6:	f000 f883 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80032ca:	2009      	movs	r0, #9
 80032cc:	f000 f880 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80032d0:	204e      	movs	r0, #78	@ 0x4e
 80032d2:	f000 f87d 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80032d6:	2078      	movs	r0, #120	@ 0x78
 80032d8:	f000 f87a 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80032dc:	203c      	movs	r0, #60	@ 0x3c
 80032de:	f000 f877 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80032e2:	2009      	movs	r0, #9
 80032e4:	f000 f874 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80032e8:	2013      	movs	r0, #19
 80032ea:	f000 f871 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80032ee:	2005      	movs	r0, #5
 80032f0:	f000 f86e 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80032f4:	2017      	movs	r0, #23
 80032f6:	f000 f86b 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80032fa:	2011      	movs	r0, #17
 80032fc:	f000 f868 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003300:	2000      	movs	r0, #0
 8003302:	f000 f865 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8003306:	20e1      	movs	r0, #225	@ 0xe1
 8003308:	f000 f855 	bl	80033b6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800330c:	2000      	movs	r0, #0
 800330e:	f000 f85f 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8003312:	2016      	movs	r0, #22
 8003314:	f000 f85c 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8003318:	201b      	movs	r0, #27
 800331a:	f000 f859 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800331e:	2004      	movs	r0, #4
 8003320:	f000 f856 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003324:	2011      	movs	r0, #17
 8003326:	f000 f853 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800332a:	2007      	movs	r0, #7
 800332c:	f000 f850 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8003330:	2031      	movs	r0, #49	@ 0x31
 8003332:	f000 f84d 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8003336:	2033      	movs	r0, #51	@ 0x33
 8003338:	f000 f84a 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800333c:	2042      	movs	r0, #66	@ 0x42
 800333e:	f000 f847 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8003342:	2005      	movs	r0, #5
 8003344:	f000 f844 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003348:	200c      	movs	r0, #12
 800334a:	f000 f841 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800334e:	200a      	movs	r0, #10
 8003350:	f000 f83e 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8003354:	2028      	movs	r0, #40	@ 0x28
 8003356:	f000 f83b 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800335a:	202f      	movs	r0, #47	@ 0x2f
 800335c:	f000 f838 	bl	80033d0 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8003360:	200f      	movs	r0, #15
 8003362:	f000 f835 	bl	80033d0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8003366:	2011      	movs	r0, #17
 8003368:	f000 f825 	bl	80033b6 <ili9341_WriteReg>
  LCD_Delay(200);
 800336c:	20c8      	movs	r0, #200	@ 0xc8
 800336e:	f000 fe69 	bl	8004044 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8003372:	2029      	movs	r0, #41	@ 0x29
 8003374:	f000 f81f 	bl	80033b6 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8003378:	202c      	movs	r0, #44	@ 0x2c
 800337a:	f000 f81c 	bl	80033b6 <ili9341_WriteReg>
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}

08003382 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8003386:	f000 fd6f 	bl	8003e68 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800338a:	2103      	movs	r1, #3
 800338c:	20d3      	movs	r0, #211	@ 0xd3
 800338e:	f000 f82c 	bl	80033ea <ili9341_ReadData>
 8003392:	4603      	mov	r3, r0
 8003394:	b29b      	uxth	r3, r3
}
 8003396:	4618      	mov	r0, r3
 8003398:	bd80      	pop	{r7, pc}

0800339a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800339e:	2029      	movs	r0, #41	@ 0x29
 80033a0:	f000 f809 	bl	80033b6 <ili9341_WriteReg>
}
 80033a4:	bf00      	nop
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80033ac:	2028      	movs	r0, #40	@ 0x28
 80033ae:	f000 f802 	bl	80033b6 <ili9341_WriteReg>
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	4603      	mov	r3, r0
 80033be:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fdea 	bl	8003f9c <LCD_IO_WriteReg>
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fdbb 	bl	8003f58 <LCD_IO_WriteData>
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	4603      	mov	r3, r0
 80033f2:	460a      	mov	r2, r1
 80033f4:	80fb      	strh	r3, [r7, #6]
 80033f6:	4613      	mov	r3, r2
 80033f8:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80033fa:	797a      	ldrb	r2, [r7, #5]
 80033fc:	88fb      	ldrh	r3, [r7, #6]
 80033fe:	4611      	mov	r1, r2
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fded 	bl	8003fe0 <LCD_IO_ReadData>
 8003406:	4603      	mov	r3, r0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8003414:	23f0      	movs	r3, #240	@ 0xf0
}
 8003416:	4618      	mov	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8003424:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
	...

08003434 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fa59 	bl	80038f8 <stmpe811_GetInstance>
 8003446:	4603      	mov	r3, r0
 8003448:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2bff      	cmp	r3, #255	@ 0xff
 800344e:	d112      	bne.n	8003476 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8003450:	2000      	movs	r0, #0
 8003452:	f000 fa51 	bl	80038f8 <stmpe811_GetInstance>
 8003456:	4603      	mov	r3, r0
 8003458:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 800345a:	7bbb      	ldrb	r3, [r7, #14]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d80a      	bhi.n	8003476 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8003460:	7bbb      	ldrb	r3, [r7, #14]
 8003462:	88fa      	ldrh	r2, [r7, #6]
 8003464:	b2d1      	uxtb	r1, r2
 8003466:	4a06      	ldr	r2, [pc, #24]	@ (8003480 <stmpe811_Init+0x4c>)
 8003468:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 800346a:	f000 fdf6 	bl	800405a <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800346e:	88fb      	ldrh	r3, [r7, #6]
 8003470:	4618      	mov	r0, r3
 8003472:	f000 f807 	bl	8003484 <stmpe811_Reset>
    }
  }
}
 8003476:	bf00      	nop
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	200023f8 	.word	0x200023f8

08003484 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2202      	movs	r2, #2
 8003494:	2103      	movs	r1, #3
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fdeb 	bl	8004072 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 800349c:	200a      	movs	r0, #10
 800349e:	f000 fe24 	bl	80040ea <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2200      	movs	r2, #0
 80034a8:	2103      	movs	r1, #3
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fde1 	bl	8004072 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 80034b0:	2002      	movs	r0, #2
 80034b2:	f000 fe1a 	bl	80040ea <IOE_Delay>
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80034be:	b590      	push	{r4, r7, lr}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	4603      	mov	r3, r0
 80034c6:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 80034c8:	f000 fdc7 	bl	800405a <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fde0 	bl	8004098 <IOE_Read>
 80034d8:	4603      	mov	r3, r0
 80034da:	021b      	lsls	r3, r3, #8
 80034dc:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2101      	movs	r1, #1
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fdd7 	bl	8004098 <IOE_Read>
 80034ea:	4603      	mov	r3, r0
 80034ec:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80034ee:	4323      	orrs	r3, r4
 80034f0:	b21b      	sxth	r3, r3
 80034f2:	b29b      	uxth	r3, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd90      	pop	{r4, r7, pc}

080034fc <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2109      	movs	r1, #9
 8003510:	4618      	mov	r0, r3
 8003512:	f000 fdc1 	bl	8004098 <IOE_Read>
 8003516:	4603      	mov	r3, r0
 8003518:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	7bfa      	ldrb	r2, [r7, #15]
 8003528:	2109      	movs	r1, #9
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fda1 	bl	8004072 <IOE_Write>
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2109      	movs	r1, #9
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fda3 	bl	8004098 <IOE_Read>
 8003552:	4603      	mov	r3, r0
 8003554:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	7bfa      	ldrb	r2, [r7, #15]
 8003564:	2109      	movs	r1, #9
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fd83 	bl	8004072 <IOE_Write>
    
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	460a      	mov	r2, r1
 800357e:	80fb      	strh	r3, [r7, #6]
 8003580:	4613      	mov	r3, r2
 8003582:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003584:	2300      	movs	r3, #0
 8003586:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	210a      	movs	r1, #10
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fd82 	bl	8004098 <IOE_Read>
 8003594:	4603      	mov	r3, r0
 8003596:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	797b      	ldrb	r3, [r7, #5]
 800359c:	4313      	orrs	r3, r2
 800359e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	7bfa      	ldrb	r2, [r7, #15]
 80035a6:	210a      	movs	r1, #10
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fd62 	bl	8004072 <IOE_Write>
}
 80035ae:	bf00      	nop
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	4603      	mov	r3, r0
 80035be:	460a      	mov	r2, r1
 80035c0:	80fb      	strh	r3, [r7, #6]
 80035c2:	4613      	mov	r3, r2
 80035c4:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	210a      	movs	r1, #10
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fd61 	bl	8004098 <IOE_Read>
 80035d6:	4603      	mov	r3, r0
 80035d8:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 80035da:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80035de:	43db      	mvns	r3, r3
 80035e0:	b25a      	sxtb	r2, r3
 80035e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035e6:	4013      	ands	r3, r2
 80035e8:	b25b      	sxtb	r3, r3
 80035ea:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	210a      	movs	r1, #10
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fd3c 	bl	8004072 <IOE_Write>
}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	4603      	mov	r3, r0
 800360a:	460a      	mov	r2, r1
 800360c:	80fb      	strh	r3, [r7, #6]
 800360e:	4613      	mov	r3, r2
 8003610:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	210b      	movs	r1, #11
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fd3d 	bl	8004098 <IOE_Read>
 800361e:	4603      	mov	r3, r0
 8003620:	461a      	mov	r2, r3
 8003622:	797b      	ldrb	r3, [r7, #5]
 8003624:	4013      	ands	r3, r2
 8003626:	b2db      	uxtb	r3, r3
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	460a      	mov	r2, r1
 800363a:	80fb      	strh	r3, [r7, #6]
 800363c:	4613      	mov	r3, r2
 800363e:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	797a      	ldrb	r2, [r7, #5]
 8003646:	210b      	movs	r1, #11
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fd12 	bl	8004072 <IOE_Write>
}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	4603      	mov	r3, r0
 800365e:	6039      	str	r1, [r7, #0]
 8003660:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2117      	movs	r1, #23
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fd13 	bl	8004098 <IOE_Read>
 8003672:	4603      	mov	r3, r0
 8003674:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	b25b      	sxtb	r3, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	b25a      	sxtb	r2, r3
 800367e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003682:	4013      	ands	r3, r2
 8003684:	b25b      	sxtb	r3, r3
 8003686:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8003688:	88fb      	ldrh	r3, [r7, #6]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	7bfa      	ldrb	r2, [r7, #15]
 800368e:	2117      	movs	r1, #23
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fcee 	bl	8004072 <IOE_Write>
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	4603      	mov	r3, r0
 80036a6:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80036a8:	88fb      	ldrh	r3, [r7, #6]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2104      	movs	r1, #4
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fcf2 	bl	8004098 <IOE_Read>
 80036b4:	4603      	mov	r3, r0
 80036b6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	f023 0304 	bic.w	r3, r3, #4
 80036be:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80036c0:	88fb      	ldrh	r3, [r7, #6]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	7bfa      	ldrb	r2, [r7, #15]
 80036c6:	2104      	movs	r1, #4
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fcd2 	bl	8004072 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	21f0      	movs	r1, #240	@ 0xf0
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff ffbf 	bl	8003656 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	f023 0303 	bic.w	r3, r3, #3
 80036de:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	7bfa      	ldrb	r2, [r7, #15]
 80036e6:	2104      	movs	r1, #4
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fcc2 	bl	8004072 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80036ee:	88fb      	ldrh	r3, [r7, #6]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2249      	movs	r2, #73	@ 0x49
 80036f4:	2120      	movs	r1, #32
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fcbb 	bl	8004072 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80036fc:	2002      	movs	r0, #2
 80036fe:	f000 fcf4 	bl	80040ea <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8003702:	88fb      	ldrh	r3, [r7, #6]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2201      	movs	r2, #1
 8003708:	2121      	movs	r1, #33	@ 0x21
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fcb1 	bl	8004072 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	229a      	movs	r2, #154	@ 0x9a
 8003716:	2141      	movs	r1, #65	@ 0x41
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fcaa 	bl	8004072 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800371e:	88fb      	ldrh	r3, [r7, #6]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2201      	movs	r2, #1
 8003724:	214a      	movs	r1, #74	@ 0x4a
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fca3 	bl	8004072 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800372c:	88fb      	ldrh	r3, [r7, #6]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2201      	movs	r2, #1
 8003732:	214b      	movs	r1, #75	@ 0x4b
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fc9c 	bl	8004072 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2200      	movs	r2, #0
 8003740:	214b      	movs	r1, #75	@ 0x4b
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fc95 	bl	8004072 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2201      	movs	r2, #1
 800374e:	2156      	movs	r1, #86	@ 0x56
 8003750:	4618      	mov	r0, r3
 8003752:	f000 fc8e 	bl	8004072 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2201      	movs	r2, #1
 800375c:	2158      	movs	r1, #88	@ 0x58
 800375e:	4618      	mov	r0, r3
 8003760:	f000 fc87 	bl	8004072 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2201      	movs	r2, #1
 800376a:	2140      	movs	r1, #64	@ 0x40
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fc80 	bl	8004072 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8003772:	88fb      	ldrh	r3, [r7, #6]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	22ff      	movs	r2, #255	@ 0xff
 8003778:	210b      	movs	r1, #11
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fc79 	bl	8004072 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8003780:	2002      	movs	r0, #2
 8003782:	f000 fcb2 	bl	80040ea <IOE_Delay>
}
 8003786:	bf00      	nop
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	4603      	mov	r3, r0
 8003796:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2140      	movs	r1, #64	@ 0x40
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fc78 	bl	8004098 <IOE_Read>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ae:	2b80      	cmp	r3, #128	@ 0x80
 80037b0:	bf0c      	ite	eq
 80037b2:	2301      	moveq	r3, #1
 80037b4:	2300      	movne	r3, #0
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80037ba:	7bbb      	ldrb	r3, [r7, #14]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00b      	beq.n	80037d8 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80037c0:	88fb      	ldrh	r3, [r7, #6]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	214c      	movs	r1, #76	@ 0x4c
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fc66 	bl	8004098 <IOE_Read>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d010      	beq.n	80037f4 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80037d2:	2301      	movs	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
 80037d6:	e00d      	b.n	80037f4 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80037d8:	88fb      	ldrh	r3, [r7, #6]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2201      	movs	r2, #1
 80037de:	214b      	movs	r1, #75	@ 0x4b
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fc46 	bl	8004072 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2200      	movs	r2, #0
 80037ec:	214b      	movs	r1, #75	@ 0x4b
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fc3f 	bl	8004072 <IOE_Write>
  }
  
  return ret;
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b086      	sub	sp, #24
 8003802:	af00      	add	r7, sp, #0
 8003804:	4603      	mov	r3, r0
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	607a      	str	r2, [r7, #4]
 800380a:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 800380c:	89fb      	ldrh	r3, [r7, #14]
 800380e:	b2d8      	uxtb	r0, r3
 8003810:	f107 0210 	add.w	r2, r7, #16
 8003814:	2304      	movs	r3, #4
 8003816:	21d7      	movs	r1, #215	@ 0xd7
 8003818:	f000 fc51 	bl	80040be <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 800381c:	7c3b      	ldrb	r3, [r7, #16]
 800381e:	061a      	lsls	r2, r3, #24
 8003820:	7c7b      	ldrb	r3, [r7, #17]
 8003822:	041b      	lsls	r3, r3, #16
 8003824:	431a      	orrs	r2, r3
 8003826:	7cbb      	ldrb	r3, [r7, #18]
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	4313      	orrs	r3, r2
 800382c:	7cfa      	ldrb	r2, [r7, #19]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	0d1b      	lsrs	r3, r3, #20
 8003836:	b29a      	uxth	r2, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	0a1b      	lsrs	r3, r3, #8
 8003840:	b29b      	uxth	r3, r3
 8003842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003846:	b29a      	uxth	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800384c:	89fb      	ldrh	r3, [r7, #14]
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2201      	movs	r2, #1
 8003852:	214b      	movs	r1, #75	@ 0x4b
 8003854:	4618      	mov	r0, r3
 8003856:	f000 fc0c 	bl	8004072 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800385a:	89fb      	ldrh	r3, [r7, #14]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2200      	movs	r2, #0
 8003860:	214b      	movs	r1, #75	@ 0x4b
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fc05 	bl	8004072 <IOE_Write>
}
 8003868:	bf00      	nop
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800387a:	f000 fbf4 	bl	8004066 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	211f      	movs	r1, #31
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff fe76 	bl	8003574 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8003888:	88fb      	ldrh	r3, [r7, #6]
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff fe36 	bl	80034fc <stmpe811_EnableGlobalIT>
}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff fe47 	bl	8003538 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	211f      	movs	r1, #31
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff fe81 	bl	80035b6 <stmpe811_DisableITSource>
}
 80038b4:	bf00      	nop
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	211f      	movs	r1, #31
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fe99 	bl	8003602 <stmpe811_ReadGITStatus>
 80038d0:	4603      	mov	r3, r0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	4603      	mov	r3, r0
 80038e2:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	211f      	movs	r1, #31
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fea1 	bl	8003630 <stmpe811_ClearGlobalIT>
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8003906:	2300      	movs	r3, #0
 8003908:	73fb      	strb	r3, [r7, #15]
 800390a:	e00b      	b.n	8003924 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	4a0a      	ldr	r2, [pc, #40]	@ (8003938 <stmpe811_GetInstance+0x40>)
 8003910:	5cd3      	ldrb	r3, [r2, r3]
 8003912:	461a      	mov	r2, r3
 8003914:	88fb      	ldrh	r3, [r7, #6]
 8003916:	4293      	cmp	r3, r2
 8003918:	d101      	bne.n	800391e <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	e006      	b.n	800392c <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	3301      	adds	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d9f0      	bls.n	800390c <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800392a:	23ff      	movs	r3, #255	@ 0xff
}
 800392c:	4618      	mov	r0, r3
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	200023f8 	.word	0x200023f8

0800393c <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	@ 0x28
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10e      	bne.n	800396a <BSP_LED_Init+0x2e>
 800394c:	2300      	movs	r3, #0
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	4b21      	ldr	r3, [pc, #132]	@ (80039d8 <BSP_LED_Init+0x9c>)
 8003952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003954:	4a20      	ldr	r2, [pc, #128]	@ (80039d8 <BSP_LED_Init+0x9c>)
 8003956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800395a:	6313      	str	r3, [r2, #48]	@ 0x30
 800395c:	4b1e      	ldr	r3, [pc, #120]	@ (80039d8 <BSP_LED_Init+0x9c>)
 800395e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	e010      	b.n	800398c <BSP_LED_Init+0x50>
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d10d      	bne.n	800398c <BSP_LED_Init+0x50>
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	4b18      	ldr	r3, [pc, #96]	@ (80039d8 <BSP_LED_Init+0x9c>)
 8003976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003978:	4a17      	ldr	r2, [pc, #92]	@ (80039d8 <BSP_LED_Init+0x9c>)
 800397a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800397e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003980:	4b15      	ldr	r3, [pc, #84]	@ (80039d8 <BSP_LED_Init+0x9c>)
 8003982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	4a13      	ldr	r2, [pc, #76]	@ (80039dc <BSP_LED_Init+0xa0>)
 8003990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003996:	2301      	movs	r3, #1
 8003998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800399a:	2301      	movs	r3, #1
 800399c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800399e:	2302      	movs	r3, #2
 80039a0:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80039a2:	79fb      	ldrb	r3, [r7, #7]
 80039a4:	4a0e      	ldr	r2, [pc, #56]	@ (80039e0 <BSP_LED_Init+0xa4>)
 80039a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039aa:	f107 0214 	add.w	r2, r7, #20
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f002 fb29 	bl	8006008 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	4a09      	ldr	r2, [pc, #36]	@ (80039e0 <BSP_LED_Init+0xa4>)
 80039ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	4a06      	ldr	r2, [pc, #24]	@ (80039dc <BSP_LED_Init+0xa0>)
 80039c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039c6:	2200      	movs	r2, #0
 80039c8:	4619      	mov	r1, r3
 80039ca:	f002 fcc9 	bl	8006360 <HAL_GPIO_WritePin>
}
 80039ce:	bf00      	nop
 80039d0:	3728      	adds	r7, #40	@ 0x28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800
 80039dc:	0800dfc0 	.word	0x0800dfc0
 80039e0:	20000168 	.word	0x20000168

080039e4 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	4a07      	ldr	r2, [pc, #28]	@ (8003a10 <BSP_LED_Toggle+0x2c>)
 80039f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	4906      	ldr	r1, [pc, #24]	@ (8003a14 <BSP_LED_Toggle+0x30>)
 80039fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80039fe:	4619      	mov	r1, r3
 8003a00:	4610      	mov	r0, r2
 8003a02:	f002 fcc6 	bl	8006392 <HAL_GPIO_TogglePin>
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000168 	.word	0x20000168
 8003a14:	0800dfc0 	.word	0x0800dfc0

08003a18 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	@ 0x28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a33      	ldr	r2, [pc, #204]	@ (8003af4 <I2Cx_MspInit+0xdc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d15f      	bne.n	8003aea <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	4b32      	ldr	r3, [pc, #200]	@ (8003af8 <I2Cx_MspInit+0xe0>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a32:	4a31      	ldr	r2, [pc, #196]	@ (8003af8 <I2Cx_MspInit+0xe0>)
 8003a34:	f043 0304 	orr.w	r3, r3, #4
 8003a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8003af8 <I2Cx_MspInit+0xe0>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8003af8 <I2Cx_MspInit+0xe0>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8003af8 <I2Cx_MspInit+0xe0>)
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a56:	4b28      	ldr	r3, [pc, #160]	@ (8003af8 <I2Cx_MspInit+0xe0>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8003a62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8003a68:	2312      	movs	r3, #18
 8003a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8003a70:	2302      	movs	r3, #2
 8003a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003a74:	2304      	movs	r3, #4
 8003a76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003a78:	f107 0314 	add.w	r3, r7, #20
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	481f      	ldr	r0, [pc, #124]	@ (8003afc <I2Cx_MspInit+0xe4>)
 8003a80:	f002 fac2 	bl	8006008 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8003a84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a88:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003a8a:	f107 0314 	add.w	r3, r7, #20
 8003a8e:	4619      	mov	r1, r3
 8003a90:	481b      	ldr	r0, [pc, #108]	@ (8003b00 <I2Cx_MspInit+0xe8>)
 8003a92:	f002 fab9 	bl	8006008 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	4b17      	ldr	r3, [pc, #92]	@ (8003af8 <I2Cx_MspInit+0xe0>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	4a16      	ldr	r2, [pc, #88]	@ (8003af8 <I2Cx_MspInit+0xe0>)
 8003aa0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aa6:	4b14      	ldr	r3, [pc, #80]	@ (8003af8 <I2Cx_MspInit+0xe0>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8003ab2:	4b11      	ldr	r3, [pc, #68]	@ (8003af8 <I2Cx_MspInit+0xe0>)
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	4a10      	ldr	r2, [pc, #64]	@ (8003af8 <I2Cx_MspInit+0xe0>)
 8003ab8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003abc:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8003abe:	4b0e      	ldr	r3, [pc, #56]	@ (8003af8 <I2Cx_MspInit+0xe0>)
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	4a0d      	ldr	r2, [pc, #52]	@ (8003af8 <I2Cx_MspInit+0xe0>)
 8003ac4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003ac8:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003aca:	2200      	movs	r2, #0
 8003acc:	210f      	movs	r1, #15
 8003ace:	2048      	movs	r0, #72	@ 0x48
 8003ad0:	f001 fe0f 	bl	80056f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003ad4:	2048      	movs	r0, #72	@ 0x48
 8003ad6:	f001 fe28 	bl	800572a <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003ada:	2200      	movs	r2, #0
 8003adc:	210f      	movs	r1, #15
 8003ade:	2049      	movs	r0, #73	@ 0x49
 8003ae0:	f001 fe07 	bl	80056f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8003ae4:	2049      	movs	r0, #73	@ 0x49
 8003ae6:	f001 fe20 	bl	800572a <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8003aea:	bf00      	nop
 8003aec:	3728      	adds	r7, #40	@ 0x28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40005c00 	.word	0x40005c00
 8003af8:	40023800 	.word	0x40023800
 8003afc:	40020000 	.word	0x40020000
 8003b00:	40020800 	.word	0x40020800

08003b04 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8003b08:	4814      	ldr	r0, [pc, #80]	@ (8003b5c <I2Cx_Init+0x58>)
 8003b0a:	f003 f905 	bl	8006d18 <HAL_I2C_GetState>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d121      	bne.n	8003b58 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8003b14:	4b11      	ldr	r3, [pc, #68]	@ (8003b5c <I2Cx_Init+0x58>)
 8003b16:	4a12      	ldr	r2, [pc, #72]	@ (8003b60 <I2Cx_Init+0x5c>)
 8003b18:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8003b1a:	4b10      	ldr	r3, [pc, #64]	@ (8003b5c <I2Cx_Init+0x58>)
 8003b1c:	4a11      	ldr	r2, [pc, #68]	@ (8003b64 <I2Cx_Init+0x60>)
 8003b1e:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8003b20:	4b0e      	ldr	r3, [pc, #56]	@ (8003b5c <I2Cx_Init+0x58>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8003b26:	4b0d      	ldr	r3, [pc, #52]	@ (8003b5c <I2Cx_Init+0x58>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b5c <I2Cx_Init+0x58>)
 8003b2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003b32:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8003b34:	4b09      	ldr	r3, [pc, #36]	@ (8003b5c <I2Cx_Init+0x58>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8003b3a:	4b08      	ldr	r3, [pc, #32]	@ (8003b5c <I2Cx_Init+0x58>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8003b40:	4b06      	ldr	r3, [pc, #24]	@ (8003b5c <I2Cx_Init+0x58>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8003b46:	4b05      	ldr	r3, [pc, #20]	@ (8003b5c <I2Cx_Init+0x58>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8003b4c:	4803      	ldr	r0, [pc, #12]	@ (8003b5c <I2Cx_Init+0x58>)
 8003b4e:	f7ff ff63 	bl	8003a18 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8003b52:	4802      	ldr	r0, [pc, #8]	@ (8003b5c <I2Cx_Init+0x58>)
 8003b54:	f002 fc38 	bl	80063c8 <HAL_I2C_Init>
  }
}
 8003b58:	bf00      	nop
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	200023fc 	.word	0x200023fc
 8003b60:	40005c00 	.word	0x40005c00
 8003b64:	000186a0 	.word	0x000186a0

08003b68 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	603b      	str	r3, [r7, #0]
 8003b72:	4b13      	ldr	r3, [pc, #76]	@ (8003bc0 <I2Cx_ITConfig+0x58>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b76:	4a12      	ldr	r2, [pc, #72]	@ (8003bc0 <I2Cx_ITConfig+0x58>)
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b7e:	4b10      	ldr	r3, [pc, #64]	@ (8003bc0 <I2Cx_ITConfig+0x58>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	603b      	str	r3, [r7, #0]
 8003b88:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8003b8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8003b90:	2301      	movs	r3, #1
 8003b92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003b94:	2300      	movs	r3, #0
 8003b96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8003b98:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <I2Cx_ITConfig+0x5c>)
 8003b9a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8003b9c:	1d3b      	adds	r3, r7, #4
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4809      	ldr	r0, [pc, #36]	@ (8003bc8 <I2Cx_ITConfig+0x60>)
 8003ba2:	f002 fa31 	bl	8006008 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	210f      	movs	r1, #15
 8003baa:	2028      	movs	r0, #40	@ 0x28
 8003bac:	f001 fda1 	bl	80056f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8003bb0:	2028      	movs	r0, #40	@ 0x28
 8003bb2:	f001 fdba 	bl	800572a <HAL_NVIC_EnableIRQ>
}
 8003bb6:	bf00      	nop
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	10210000 	.word	0x10210000
 8003bc8:	40020000 	.word	0x40020000

08003bcc <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af04      	add	r7, sp, #16
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	71fb      	strb	r3, [r7, #7]
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	71bb      	strb	r3, [r7, #6]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	b299      	uxth	r1, r3
 8003be6:	79bb      	ldrb	r3, [r7, #6]
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	4b0b      	ldr	r3, [pc, #44]	@ (8003c18 <I2Cx_WriteData+0x4c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	9302      	str	r3, [sp, #8]
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	9301      	str	r3, [sp, #4]
 8003bf4:	1d7b      	adds	r3, r7, #5
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	4808      	ldr	r0, [pc, #32]	@ (8003c1c <I2Cx_WriteData+0x50>)
 8003bfc:	f002 fd6c 	bl	80066d8 <HAL_I2C_Mem_Write>
 8003c00:	4603      	mov	r3, r0
 8003c02:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003c0a:	f000 f863 	bl	8003cd4 <I2Cx_Error>
  }        
}
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000170 	.word	0x20000170
 8003c1c:	200023fc 	.word	0x200023fc

08003c20 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af04      	add	r7, sp, #16
 8003c26:	4603      	mov	r3, r0
 8003c28:	460a      	mov	r2, r1
 8003c2a:	71fb      	strb	r3, [r7, #7]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8003c38:	79fb      	ldrb	r3, [r7, #7]
 8003c3a:	b299      	uxth	r1, r3
 8003c3c:	79bb      	ldrb	r3, [r7, #6]
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	4b0b      	ldr	r3, [pc, #44]	@ (8003c70 <I2Cx_ReadData+0x50>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	9302      	str	r3, [sp, #8]
 8003c46:	2301      	movs	r3, #1
 8003c48:	9301      	str	r3, [sp, #4]
 8003c4a:	f107 030e 	add.w	r3, r7, #14
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	2301      	movs	r3, #1
 8003c52:	4808      	ldr	r0, [pc, #32]	@ (8003c74 <I2Cx_ReadData+0x54>)
 8003c54:	f002 fe3a 	bl	80068cc <HAL_I2C_Mem_Read>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003c62:	f000 f837 	bl	8003cd4 <I2Cx_Error>
  
  }
  return value;
 8003c66:	7bbb      	ldrb	r3, [r7, #14]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20000170 	.word	0x20000170
 8003c74:	200023fc 	.word	0x200023fc

08003c78 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af04      	add	r7, sp, #16
 8003c7e:	603a      	str	r2, [r7, #0]
 8003c80:	461a      	mov	r2, r3
 8003c82:	4603      	mov	r3, r0
 8003c84:	71fb      	strb	r3, [r7, #7]
 8003c86:	460b      	mov	r3, r1
 8003c88:	71bb      	strb	r3, [r7, #6]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	b299      	uxth	r1, r3
 8003c96:	79bb      	ldrb	r3, [r7, #6]
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003ccc <I2Cx_ReadBuffer+0x54>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	9302      	str	r3, [sp, #8]
 8003ca0:	88bb      	ldrh	r3, [r7, #4]
 8003ca2:	9301      	str	r3, [sp, #4]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	2301      	movs	r3, #1
 8003caa:	4809      	ldr	r0, [pc, #36]	@ (8003cd0 <I2Cx_ReadBuffer+0x58>)
 8003cac:	f002 fe0e 	bl	80068cc <HAL_I2C_Mem_Read>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	e002      	b.n	8003cc4 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003cbe:	f000 f809 	bl	8003cd4 <I2Cx_Error>

    return 1;
 8003cc2:	2301      	movs	r3, #1
  }
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20000170 	.word	0x20000170
 8003cd0:	200023fc 	.word	0x200023fc

08003cd4 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003cd8:	4803      	ldr	r0, [pc, #12]	@ (8003ce8 <I2Cx_Error+0x14>)
 8003cda:	f002 fcb9 	bl	8006650 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8003cde:	f7ff ff11 	bl	8003b04 <I2Cx_Init>
}
 8003ce2:	bf00      	nop
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	200023fc 	.word	0x200023fc

08003cec <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003cf0:	4819      	ldr	r0, [pc, #100]	@ (8003d58 <SPIx_Init+0x6c>)
 8003cf2:	f005 fab2 	bl	800925a <HAL_SPI_GetState>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d12b      	bne.n	8003d54 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003cfc:	4b16      	ldr	r3, [pc, #88]	@ (8003d58 <SPIx_Init+0x6c>)
 8003cfe:	4a17      	ldr	r2, [pc, #92]	@ (8003d5c <SPIx_Init+0x70>)
 8003d00:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003d02:	4b15      	ldr	r3, [pc, #84]	@ (8003d58 <SPIx_Init+0x6c>)
 8003d04:	2218      	movs	r2, #24
 8003d06:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003d08:	4b13      	ldr	r3, [pc, #76]	@ (8003d58 <SPIx_Init+0x6c>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003d0e:	4b12      	ldr	r3, [pc, #72]	@ (8003d58 <SPIx_Init+0x6c>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003d14:	4b10      	ldr	r3, [pc, #64]	@ (8003d58 <SPIx_Init+0x6c>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d58 <SPIx_Init+0x6c>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003d20:	4b0d      	ldr	r3, [pc, #52]	@ (8003d58 <SPIx_Init+0x6c>)
 8003d22:	2207      	movs	r2, #7
 8003d24:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003d26:	4b0c      	ldr	r3, [pc, #48]	@ (8003d58 <SPIx_Init+0x6c>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d58 <SPIx_Init+0x6c>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003d32:	4b09      	ldr	r3, [pc, #36]	@ (8003d58 <SPIx_Init+0x6c>)
 8003d34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d38:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003d3a:	4b07      	ldr	r3, [pc, #28]	@ (8003d58 <SPIx_Init+0x6c>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003d40:	4b05      	ldr	r3, [pc, #20]	@ (8003d58 <SPIx_Init+0x6c>)
 8003d42:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d46:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8003d48:	4803      	ldr	r0, [pc, #12]	@ (8003d58 <SPIx_Init+0x6c>)
 8003d4a:	f000 f853 	bl	8003df4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003d4e:	4802      	ldr	r0, [pc, #8]	@ (8003d58 <SPIx_Init+0x6c>)
 8003d50:	f004 fcf9 	bl	8008746 <HAL_SPI_Init>
  } 
}
 8003d54:	bf00      	nop
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	20002450 	.word	0x20002450
 8003d5c:	40015000 	.word	0x40015000

08003d60 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	4b09      	ldr	r3, [pc, #36]	@ (8003d98 <SPIx_Read+0x38>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f107 0108 	add.w	r1, r7, #8
 8003d7a:	4808      	ldr	r0, [pc, #32]	@ (8003d9c <SPIx_Read+0x3c>)
 8003d7c:	f004 fee0 	bl	8008b40 <HAL_SPI_Receive>
 8003d80:	4603      	mov	r3, r0
 8003d82:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003d8a:	f000 f827 	bl	8003ddc <SPIx_Error>
  }
  
  return readvalue;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	20000174 	.word	0x20000174
 8003d9c:	20002450 	.word	0x20002450

08003da0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8003dae:	4b09      	ldr	r3, [pc, #36]	@ (8003dd4 <SPIx_Write+0x34>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	1db9      	adds	r1, r7, #6
 8003db4:	2201      	movs	r2, #1
 8003db6:	4808      	ldr	r0, [pc, #32]	@ (8003dd8 <SPIx_Write+0x38>)
 8003db8:	f004 fd6c 	bl	8008894 <HAL_SPI_Transmit>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003dc6:	f000 f809 	bl	8003ddc <SPIx_Error>
  }
}
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000174 	.word	0x20000174
 8003dd8:	20002450 	.word	0x20002450

08003ddc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003de0:	4803      	ldr	r0, [pc, #12]	@ (8003df0 <SPIx_Error+0x14>)
 8003de2:	f004 fd1b 	bl	800881c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003de6:	f7ff ff81 	bl	8003cec <SPIx_Init>
}
 8003dea:	bf00      	nop
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	20002450 	.word	0x20002450

08003df4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08a      	sub	sp, #40	@ 0x28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	4b17      	ldr	r3, [pc, #92]	@ (8003e60 <SPIx_MspInit+0x6c>)
 8003e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e04:	4a16      	ldr	r2, [pc, #88]	@ (8003e60 <SPIx_MspInit+0x6c>)
 8003e06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e0c:	4b14      	ldr	r3, [pc, #80]	@ (8003e60 <SPIx_MspInit+0x6c>)
 8003e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	4b10      	ldr	r3, [pc, #64]	@ (8003e60 <SPIx_MspInit+0x6c>)
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e20:	4a0f      	ldr	r2, [pc, #60]	@ (8003e60 <SPIx_MspInit+0x6c>)
 8003e22:	f043 0320 	orr.w	r3, r3, #32
 8003e26:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e28:	4b0d      	ldr	r3, [pc, #52]	@ (8003e60 <SPIx_MspInit+0x6c>)
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003e34:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003e42:	2301      	movs	r3, #1
 8003e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003e46:	2305      	movs	r3, #5
 8003e48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8003e4a:	f107 0314 	add.w	r3, r7, #20
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4804      	ldr	r0, [pc, #16]	@ (8003e64 <SPIx_MspInit+0x70>)
 8003e52:	f002 f8d9 	bl	8006008 <HAL_GPIO_Init>
}
 8003e56:	bf00      	nop
 8003e58:	3728      	adds	r7, #40	@ 0x28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40023800 	.word	0x40023800
 8003e64:	40021400 	.word	0x40021400

08003e68 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8003e6e:	4b36      	ldr	r3, [pc, #216]	@ (8003f48 <LCD_IO_Init+0xe0>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d164      	bne.n	8003f40 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8003e76:	4b34      	ldr	r3, [pc, #208]	@ (8003f48 <LCD_IO_Init+0xe0>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60bb      	str	r3, [r7, #8]
 8003e80:	4b32      	ldr	r3, [pc, #200]	@ (8003f4c <LCD_IO_Init+0xe4>)
 8003e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e84:	4a31      	ldr	r2, [pc, #196]	@ (8003f4c <LCD_IO_Init+0xe4>)
 8003e86:	f043 0308 	orr.w	r3, r3, #8
 8003e8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e8c:	4b2f      	ldr	r3, [pc, #188]	@ (8003f4c <LCD_IO_Init+0xe4>)
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003e98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003eaa:	f107 030c 	add.w	r3, r7, #12
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4827      	ldr	r0, [pc, #156]	@ (8003f50 <LCD_IO_Init+0xe8>)
 8003eb2:	f002 f8a9 	bl	8006008 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	607b      	str	r3, [r7, #4]
 8003eba:	4b24      	ldr	r3, [pc, #144]	@ (8003f4c <LCD_IO_Init+0xe4>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebe:	4a23      	ldr	r2, [pc, #140]	@ (8003f4c <LCD_IO_Init+0xe4>)
 8003ec0:	f043 0308 	orr.w	r3, r3, #8
 8003ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ec6:	4b21      	ldr	r3, [pc, #132]	@ (8003f4c <LCD_IO_Init+0xe4>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	607b      	str	r3, [r7, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003ed2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ed6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003ee4:	f107 030c 	add.w	r3, r7, #12
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4819      	ldr	r0, [pc, #100]	@ (8003f50 <LCD_IO_Init+0xe8>)
 8003eec:	f002 f88c 	bl	8006008 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	4b15      	ldr	r3, [pc, #84]	@ (8003f4c <LCD_IO_Init+0xe4>)
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef8:	4a14      	ldr	r2, [pc, #80]	@ (8003f4c <LCD_IO_Init+0xe4>)
 8003efa:	f043 0304 	orr.w	r3, r3, #4
 8003efe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f00:	4b12      	ldr	r3, [pc, #72]	@ (8003f4c <LCD_IO_Init+0xe4>)
 8003f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	603b      	str	r3, [r7, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003f10:	2301      	movs	r3, #1
 8003f12:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003f18:	2302      	movs	r3, #2
 8003f1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003f1c:	f107 030c 	add.w	r3, r7, #12
 8003f20:	4619      	mov	r1, r3
 8003f22:	480c      	ldr	r0, [pc, #48]	@ (8003f54 <LCD_IO_Init+0xec>)
 8003f24:	f002 f870 	bl	8006008 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2104      	movs	r1, #4
 8003f2c:	4809      	ldr	r0, [pc, #36]	@ (8003f54 <LCD_IO_Init+0xec>)
 8003f2e:	f002 fa17 	bl	8006360 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003f32:	2201      	movs	r2, #1
 8003f34:	2104      	movs	r1, #4
 8003f36:	4807      	ldr	r0, [pc, #28]	@ (8003f54 <LCD_IO_Init+0xec>)
 8003f38:	f002 fa12 	bl	8006360 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8003f3c:	f7ff fed6 	bl	8003cec <SPIx_Init>
  }
}
 8003f40:	bf00      	nop
 8003f42:	3720      	adds	r7, #32
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	200024a8 	.word	0x200024a8
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	40020c00 	.word	0x40020c00
 8003f54:	40020800 	.word	0x40020800

08003f58 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003f62:	2201      	movs	r2, #1
 8003f64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f68:	480a      	ldr	r0, [pc, #40]	@ (8003f94 <LCD_IO_WriteData+0x3c>)
 8003f6a:	f002 f9f9 	bl	8006360 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2104      	movs	r1, #4
 8003f72:	4809      	ldr	r0, [pc, #36]	@ (8003f98 <LCD_IO_WriteData+0x40>)
 8003f74:	f002 f9f4 	bl	8006360 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003f78:	88fb      	ldrh	r3, [r7, #6]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff ff10 	bl	8003da0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003f80:	2201      	movs	r2, #1
 8003f82:	2104      	movs	r1, #4
 8003f84:	4804      	ldr	r0, [pc, #16]	@ (8003f98 <LCD_IO_WriteData+0x40>)
 8003f86:	f002 f9eb 	bl	8006360 <HAL_GPIO_WritePin>
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40020c00 	.word	0x40020c00
 8003f98:	40020800 	.word	0x40020800

08003f9c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003fac:	480a      	ldr	r0, [pc, #40]	@ (8003fd8 <LCD_IO_WriteReg+0x3c>)
 8003fae:	f002 f9d7 	bl	8006360 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2104      	movs	r1, #4
 8003fb6:	4809      	ldr	r0, [pc, #36]	@ (8003fdc <LCD_IO_WriteReg+0x40>)
 8003fb8:	f002 f9d2 	bl	8006360 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff feed 	bl	8003da0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	2104      	movs	r1, #4
 8003fca:	4804      	ldr	r0, [pc, #16]	@ (8003fdc <LCD_IO_WriteReg+0x40>)
 8003fcc:	f002 f9c8 	bl	8006360 <HAL_GPIO_WritePin>
}
 8003fd0:	bf00      	nop
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40020c00 	.word	0x40020c00
 8003fdc:	40020800 	.word	0x40020800

08003fe0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	460a      	mov	r2, r1
 8003fea:	80fb      	strh	r3, [r7, #6]
 8003fec:	4613      	mov	r3, r2
 8003fee:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2104      	movs	r1, #4
 8003ff8:	4810      	ldr	r0, [pc, #64]	@ (800403c <LCD_IO_ReadData+0x5c>)
 8003ffa:	f002 f9b1 	bl	8006360 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003ffe:	2200      	movs	r2, #0
 8004000:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004004:	480e      	ldr	r0, [pc, #56]	@ (8004040 <LCD_IO_ReadData+0x60>)
 8004006:	f002 f9ab 	bl	8006360 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff fec7 	bl	8003da0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8004012:	797b      	ldrb	r3, [r7, #5]
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff fea3 	bl	8003d60 <SPIx_Read>
 800401a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800401c:	2201      	movs	r2, #1
 800401e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004022:	4807      	ldr	r0, [pc, #28]	@ (8004040 <LCD_IO_ReadData+0x60>)
 8004024:	f002 f99c 	bl	8006360 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004028:	2201      	movs	r2, #1
 800402a:	2104      	movs	r1, #4
 800402c:	4803      	ldr	r0, [pc, #12]	@ (800403c <LCD_IO_ReadData+0x5c>)
 800402e:	f002 f997 	bl	8006360 <HAL_GPIO_WritePin>
  
  return readvalue;
 8004032:	68fb      	ldr	r3, [r7, #12]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40020800 	.word	0x40020800
 8004040:	40020c00 	.word	0x40020c00

08004044 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f001 fa51 	bl	80054f4 <HAL_Delay>
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 800405a:	b580      	push	{r7, lr}
 800405c:	af00      	add	r7, sp, #0
  I2Cx_Init();
 800405e:	f7ff fd51 	bl	8003b04 <I2Cx_Init>
}
 8004062:	bf00      	nop
 8004064:	bd80      	pop	{r7, pc}

08004066 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 800406a:	f7ff fd7d 	bl	8003b68 <I2Cx_ITConfig>
}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}

08004072 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	4603      	mov	r3, r0
 800407a:	71fb      	strb	r3, [r7, #7]
 800407c:	460b      	mov	r3, r1
 800407e:	71bb      	strb	r3, [r7, #6]
 8004080:	4613      	mov	r3, r2
 8004082:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8004084:	797a      	ldrb	r2, [r7, #5]
 8004086:	79b9      	ldrb	r1, [r7, #6]
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff fd9e 	bl	8003bcc <I2Cx_WriteData>
}
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	460a      	mov	r2, r1
 80040a2:	71fb      	strb	r3, [r7, #7]
 80040a4:	4613      	mov	r3, r2
 80040a6:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80040a8:	79ba      	ldrb	r2, [r7, #6]
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	4611      	mov	r1, r2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff fdb6 	bl	8003c20 <I2Cx_ReadData>
 80040b4:	4603      	mov	r3, r0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	603a      	str	r2, [r7, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	4603      	mov	r3, r0
 80040ca:	71fb      	strb	r3, [r7, #7]
 80040cc:	460b      	mov	r3, r1
 80040ce:	71bb      	strb	r3, [r7, #6]
 80040d0:	4613      	mov	r3, r2
 80040d2:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 80040d4:	88bb      	ldrh	r3, [r7, #4]
 80040d6:	79b9      	ldrb	r1, [r7, #6]
 80040d8:	79f8      	ldrb	r0, [r7, #7]
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	f7ff fdcc 	bl	8003c78 <I2Cx_ReadBuffer>
 80040e0:	4603      	mov	r3, r0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f001 f9fe 	bl	80054f4 <HAL_Delay>
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <BSP_LCD_Init_Flipped>:
/**
 * @brief  Initializes the LCD for flipped operation.
 * LCD orientation is rotated by 180°.
 * @retval LCD state
 */
uint8_t BSP_LCD_Init_Flipped(void){
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
	flippedLcd = true;
 8004104:	4b03      	ldr	r3, [pc, #12]	@ (8004114 <BSP_LCD_Init_Flipped+0x14>)
 8004106:	2201      	movs	r2, #1
 8004108:	701a      	strb	r2, [r3, #0]
	return BSP_LCD_Init();
 800410a:	f000 f805 	bl	8004118 <BSP_LCD_Init>
 800410e:	4603      	mov	r3, r0
}
 8004110:	4618      	mov	r0, r3
 8004112:	bd80      	pop	{r7, pc}
 8004114:	200025e4 	.word	0x200025e4

08004118 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 800411c:	4b2d      	ldr	r3, [pc, #180]	@ (80041d4 <BSP_LCD_Init+0xbc>)
 800411e:	4a2e      	ldr	r2, [pc, #184]	@ (80041d8 <BSP_LCD_Init+0xc0>)
 8004120:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8004122:	4b2c      	ldr	r3, [pc, #176]	@ (80041d4 <BSP_LCD_Init+0xbc>)
 8004124:	2209      	movs	r2, #9
 8004126:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8004128:	4b2a      	ldr	r3, [pc, #168]	@ (80041d4 <BSP_LCD_Init+0xbc>)
 800412a:	2201      	movs	r2, #1
 800412c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800412e:	4b29      	ldr	r3, [pc, #164]	@ (80041d4 <BSP_LCD_Init+0xbc>)
 8004130:	221d      	movs	r2, #29
 8004132:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8004134:	4b27      	ldr	r3, [pc, #156]	@ (80041d4 <BSP_LCD_Init+0xbc>)
 8004136:	2203      	movs	r2, #3
 8004138:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800413a:	4b26      	ldr	r3, [pc, #152]	@ (80041d4 <BSP_LCD_Init+0xbc>)
 800413c:	f240 120d 	movw	r2, #269	@ 0x10d
 8004140:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8004142:	4b24      	ldr	r3, [pc, #144]	@ (80041d4 <BSP_LCD_Init+0xbc>)
 8004144:	f240 1243 	movw	r2, #323	@ 0x143
 8004148:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800414a:	4b22      	ldr	r3, [pc, #136]	@ (80041d4 <BSP_LCD_Init+0xbc>)
 800414c:	f240 1217 	movw	r2, #279	@ 0x117
 8004150:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8004152:	4b20      	ldr	r3, [pc, #128]	@ (80041d4 <BSP_LCD_Init+0xbc>)
 8004154:	f240 1247 	movw	r2, #327	@ 0x147
 8004158:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800415a:	4b1e      	ldr	r3, [pc, #120]	@ (80041d4 <BSP_LCD_Init+0xbc>)
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8004162:	4b1c      	ldr	r3, [pc, #112]	@ (80041d4 <BSP_LCD_Init+0xbc>)
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800416a:	4b1a      	ldr	r3, [pc, #104]	@ (80041d4 <BSP_LCD_Init+0xbc>)
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004172:	4b1a      	ldr	r3, [pc, #104]	@ (80041dc <BSP_LCD_Init+0xc4>)
 8004174:	2208      	movs	r2, #8
 8004176:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8004178:	4b18      	ldr	r3, [pc, #96]	@ (80041dc <BSP_LCD_Init+0xc4>)
 800417a:	22c0      	movs	r2, #192	@ 0xc0
 800417c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800417e:	4b17      	ldr	r3, [pc, #92]	@ (80041dc <BSP_LCD_Init+0xc4>)
 8004180:	2204      	movs	r2, #4
 8004182:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8004184:	4b15      	ldr	r3, [pc, #84]	@ (80041dc <BSP_LCD_Init+0xc4>)
 8004186:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800418a:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800418c:	4813      	ldr	r0, [pc, #76]	@ (80041dc <BSP_LCD_Init+0xc4>)
 800418e:	f004 f891 	bl	80082b4 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004192:	4b10      	ldr	r3, [pc, #64]	@ (80041d4 <BSP_LCD_Init+0xbc>)
 8004194:	2200      	movs	r2, #0
 8004196:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8004198:	4b0e      	ldr	r3, [pc, #56]	@ (80041d4 <BSP_LCD_Init+0xbc>)
 800419a:	2200      	movs	r2, #0
 800419c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800419e:	4b0d      	ldr	r3, [pc, #52]	@ (80041d4 <BSP_LCD_Init+0xbc>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80041a4:	4b0b      	ldr	r3, [pc, #44]	@ (80041d4 <BSP_LCD_Init+0xbc>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80041aa:	f000 fb7d 	bl	80048a8 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80041ae:	4809      	ldr	r0, [pc, #36]	@ (80041d4 <BSP_LCD_Init+0xbc>)
 80041b0:	f003 f918 	bl	80073e4 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80041b4:	4b0a      	ldr	r3, [pc, #40]	@ (80041e0 <BSP_LCD_Init+0xc8>)
 80041b6:	4a0b      	ldr	r2, [pc, #44]	@ (80041e4 <BSP_LCD_Init+0xcc>)
 80041b8:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80041ba:	4b09      	ldr	r3, [pc, #36]	@ (80041e0 <BSP_LCD_Init+0xc8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80041c2:	f000 fd85 	bl	8004cd0 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80041c6:	4808      	ldr	r0, [pc, #32]	@ (80041e8 <BSP_LCD_Init+0xd0>)
 80041c8:	f000 f8ce 	bl	8004368 <BSP_LCD_SetFont>

  return LCD_OK;
 80041cc:	2300      	movs	r3, #0
}  
 80041ce:	4618      	mov	r0, r3
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	200024ac 	.word	0x200024ac
 80041d8:	40016800 	.word	0x40016800
 80041dc:	20002594 	.word	0x20002594
 80041e0:	200025e0 	.word	0x200025e0
 80041e4:	20000108 	.word	0x20000108
 80041e8:	20000178 	.word	0x20000178

080041ec <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80041f0:	4b03      	ldr	r3, [pc, #12]	@ (8004200 <BSP_LCD_GetXSize+0x14>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f6:	4798      	blx	r3
 80041f8:	4603      	mov	r3, r0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	200025e0 	.word	0x200025e0

08004204 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8004208:	4b03      	ldr	r3, [pc, #12]	@ (8004218 <BSP_LCD_GetYSize+0x14>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420e:	4798      	blx	r3
 8004210:	4603      	mov	r3, r0
}
 8004212:	4618      	mov	r0, r3
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	200025e0 	.word	0x200025e0

0800421c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800421c:	b580      	push	{r7, lr}
 800421e:	b090      	sub	sp, #64	@ 0x40
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	6039      	str	r1, [r7, #0]
 8004226:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8004228:	2300      	movs	r3, #0
 800422a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800422c:	f7ff ffde 	bl	80041ec <BSP_LCD_GetXSize>
 8004230:	4603      	mov	r3, r0
 8004232:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004238:	f7ff ffe4 	bl	8004204 <BSP_LCD_GetYSize>
 800423c:	4603      	mov	r3, r0
 800423e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004240:	2300      	movs	r3, #0
 8004242:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8004248:	23ff      	movs	r3, #255	@ 0xff
 800424a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8004256:	2300      	movs	r3, #0
 8004258:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 800425c:	2300      	movs	r3, #0
 800425e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004262:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004266:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004268:	2307      	movs	r3, #7
 800426a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800426c:	f7ff ffbe 	bl	80041ec <BSP_LCD_GetXSize>
 8004270:	4603      	mov	r3, r0
 8004272:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8004274:	f7ff ffc6 	bl	8004204 <BSP_LCD_GetYSize>
 8004278:	4603      	mov	r3, r0
 800427a:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800427c:	88fa      	ldrh	r2, [r7, #6]
 800427e:	f107 030c 	add.w	r3, r7, #12
 8004282:	4619      	mov	r1, r3
 8004284:	4814      	ldr	r0, [pc, #80]	@ (80042d8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004286:	f003 f987 	bl	8007598 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800428a:	88fa      	ldrh	r2, [r7, #6]
 800428c:	4913      	ldr	r1, [pc, #76]	@ (80042dc <BSP_LCD_LayerDefaultInit+0xc0>)
 800428e:	4613      	mov	r3, r2
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	4413      	add	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	3304      	adds	r3, #4
 800429a:	f04f 32ff 	mov.w	r2, #4294967295
 800429e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80042a0:	88fa      	ldrh	r2, [r7, #6]
 80042a2:	490e      	ldr	r1, [pc, #56]	@ (80042dc <BSP_LCD_LayerDefaultInit+0xc0>)
 80042a4:	4613      	mov	r3, r2
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	3308      	adds	r3, #8
 80042b0:	4a0b      	ldr	r2, [pc, #44]	@ (80042e0 <BSP_LCD_LayerDefaultInit+0xc4>)
 80042b2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80042b4:	88fa      	ldrh	r2, [r7, #6]
 80042b6:	4909      	ldr	r1, [pc, #36]	@ (80042dc <BSP_LCD_LayerDefaultInit+0xc0>)
 80042b8:	4613      	mov	r3, r2
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80042c6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80042c8:	4803      	ldr	r0, [pc, #12]	@ (80042d8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80042ca:	f003 f9a3 	bl	8007614 <HAL_LTDC_EnableDither>
}
 80042ce:	bf00      	nop
 80042d0:	3740      	adds	r7, #64	@ 0x40
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	200024ac 	.word	0x200024ac
 80042dc:	200025c8 	.word	0x200025c8
 80042e0:	20000178 	.word	0x20000178

080042e4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80042ec:	4a04      	ldr	r2, [pc, #16]	@ (8004300 <BSP_LCD_SelectLayer+0x1c>)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6013      	str	r3, [r2, #0]
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	200025c4 	.word	0x200025c4

08004304 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800430c:	4b07      	ldr	r3, [pc, #28]	@ (800432c <BSP_LCD_SetTextColor+0x28>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4907      	ldr	r1, [pc, #28]	@ (8004330 <BSP_LCD_SetTextColor+0x2c>)
 8004312:	4613      	mov	r3, r2
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	601a      	str	r2, [r3, #0]
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	200025c4 	.word	0x200025c4
 8004330:	200025c8 	.word	0x200025c8

08004334 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800433c:	4b08      	ldr	r3, [pc, #32]	@ (8004360 <BSP_LCD_SetBackColor+0x2c>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	4908      	ldr	r1, [pc, #32]	@ (8004364 <BSP_LCD_SetBackColor+0x30>)
 8004342:	4613      	mov	r3, r2
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	3304      	adds	r3, #4
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	601a      	str	r2, [r3, #0]
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	200025c4 	.word	0x200025c4
 8004364:	200025c8 	.word	0x200025c8

08004368 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8004370:	4b08      	ldr	r3, [pc, #32]	@ (8004394 <BSP_LCD_SetFont+0x2c>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4908      	ldr	r1, [pc, #32]	@ (8004398 <BSP_LCD_SetFont+0x30>)
 8004376:	4613      	mov	r3, r2
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	440b      	add	r3, r1
 8004380:	3308      	adds	r3, #8
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	601a      	str	r2, [r3, #0]
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	200025c4 	.word	0x200025c4
 8004398:	200025c8 	.word	0x200025c8

0800439c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800439c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800439e:	b085      	sub	sp, #20
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80043a4:	4b0f      	ldr	r3, [pc, #60]	@ (80043e4 <BSP_LCD_Clear+0x48>)
 80043a6:	681c      	ldr	r4, [r3, #0]
 80043a8:	4b0e      	ldr	r3, [pc, #56]	@ (80043e4 <BSP_LCD_Clear+0x48>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a0e      	ldr	r2, [pc, #56]	@ (80043e8 <BSP_LCD_Clear+0x4c>)
 80043ae:	2134      	movs	r1, #52	@ 0x34
 80043b0:	fb01 f303 	mul.w	r3, r1, r3
 80043b4:	4413      	add	r3, r2
 80043b6:	335c      	adds	r3, #92	@ 0x5c
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	461e      	mov	r6, r3
 80043bc:	f7ff ff16 	bl	80041ec <BSP_LCD_GetXSize>
 80043c0:	4605      	mov	r5, r0
 80043c2:	f7ff ff1f 	bl	8004204 <BSP_LCD_GetYSize>
 80043c6:	4602      	mov	r2, r0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	9301      	str	r3, [sp, #4]
 80043cc:	2300      	movs	r3, #0
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	4613      	mov	r3, r2
 80043d2:	462a      	mov	r2, r5
 80043d4:	4631      	mov	r1, r6
 80043d6:	4620      	mov	r0, r4
 80043d8:	f000 fc42 	bl	8004c60 <FillBuffer>
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043e4:	200025c4 	.word	0x200025c4
 80043e8:	200024ac 	.word	0x200024ac

080043ec <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80043ec:	b590      	push	{r4, r7, lr}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	4603      	mov	r3, r0
 80043f4:	80fb      	strh	r3, [r7, #6]
 80043f6:	460b      	mov	r3, r1
 80043f8:	80bb      	strh	r3, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80043fe:	4b1b      	ldr	r3, [pc, #108]	@ (800446c <BSP_LCD_DisplayChar+0x80>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	491b      	ldr	r1, [pc, #108]	@ (8004470 <BSP_LCD_DisplayChar+0x84>)
 8004404:	4613      	mov	r3, r2
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	3308      	adds	r3, #8
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6819      	ldr	r1, [r3, #0]
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800441a:	4b14      	ldr	r3, [pc, #80]	@ (800446c <BSP_LCD_DisplayChar+0x80>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	4c14      	ldr	r4, [pc, #80]	@ (8004470 <BSP_LCD_DisplayChar+0x84>)
 8004420:	4613      	mov	r3, r2
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4423      	add	r3, r4
 800442a:	3308      	adds	r3, #8
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004430:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004434:	4b0d      	ldr	r3, [pc, #52]	@ (800446c <BSP_LCD_DisplayChar+0x80>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	4c0d      	ldr	r4, [pc, #52]	@ (8004470 <BSP_LCD_DisplayChar+0x84>)
 800443a:	4613      	mov	r3, r2
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	4413      	add	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4423      	add	r3, r4
 8004444:	3308      	adds	r3, #8
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	889b      	ldrh	r3, [r3, #4]
 800444a:	3307      	adds	r3, #7
 800444c:	2b00      	cmp	r3, #0
 800444e:	da00      	bge.n	8004452 <BSP_LCD_DisplayChar+0x66>
 8004450:	3307      	adds	r3, #7
 8004452:	10db      	asrs	r3, r3, #3
 8004454:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004458:	18ca      	adds	r2, r1, r3
 800445a:	88b9      	ldrh	r1, [r7, #4]
 800445c:	88fb      	ldrh	r3, [r7, #6]
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fb44 	bl	8004aec <DrawChar>
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	bd90      	pop	{r4, r7, pc}
 800446c:	200025c4 	.word	0x200025c4
 8004470:	200025c8 	.word	0x200025c8

08004474 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8004474:	b5b0      	push	{r4, r5, r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af00      	add	r7, sp, #0
 800447a:	60ba      	str	r2, [r7, #8]
 800447c:	461a      	mov	r2, r3
 800447e:	4603      	mov	r3, r0
 8004480:	81fb      	strh	r3, [r7, #14]
 8004482:	460b      	mov	r3, r1
 8004484:	81bb      	strh	r3, [r7, #12]
 8004486:	4613      	mov	r3, r2
 8004488:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800448a:	2301      	movs	r3, #1
 800448c:	83fb      	strh	r3, [r7, #30]
 800448e:	2300      	movs	r3, #0
 8004490:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8004492:	2300      	movs	r3, #0
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	2300      	movs	r3, #0
 8004498:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800449e:	e002      	b.n	80044a6 <BSP_LCD_DisplayStringAt+0x32>
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	3301      	adds	r3, #1
 80044a4:	61bb      	str	r3, [r7, #24]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	617a      	str	r2, [r7, #20]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f6      	bne.n	80044a0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80044b2:	f7ff fe9b 	bl	80041ec <BSP_LCD_GetXSize>
 80044b6:	4601      	mov	r1, r0
 80044b8:	4b4b      	ldr	r3, [pc, #300]	@ (80045e8 <BSP_LCD_DisplayStringAt+0x174>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	484b      	ldr	r0, [pc, #300]	@ (80045ec <BSP_LCD_DisplayStringAt+0x178>)
 80044be:	4613      	mov	r3, r2
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4403      	add	r3, r0
 80044c8:	3308      	adds	r3, #8
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	889b      	ldrh	r3, [r3, #4]
 80044ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80044d2:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d01c      	beq.n	8004514 <BSP_LCD_DisplayStringAt+0xa0>
 80044da:	2b03      	cmp	r3, #3
 80044dc:	dc33      	bgt.n	8004546 <BSP_LCD_DisplayStringAt+0xd2>
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d002      	beq.n	80044e8 <BSP_LCD_DisplayStringAt+0x74>
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d019      	beq.n	800451a <BSP_LCD_DisplayStringAt+0xa6>
 80044e6:	e02e      	b.n	8004546 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	1ad1      	subs	r1, r2, r3
 80044ee:	4b3e      	ldr	r3, [pc, #248]	@ (80045e8 <BSP_LCD_DisplayStringAt+0x174>)
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	483e      	ldr	r0, [pc, #248]	@ (80045ec <BSP_LCD_DisplayStringAt+0x178>)
 80044f4:	4613      	mov	r3, r2
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4403      	add	r3, r0
 80044fe:	3308      	adds	r3, #8
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	889b      	ldrh	r3, [r3, #4]
 8004504:	fb01 f303 	mul.w	r3, r1, r3
 8004508:	085b      	lsrs	r3, r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	89fb      	ldrh	r3, [r7, #14]
 800450e:	4413      	add	r3, r2
 8004510:	83fb      	strh	r3, [r7, #30]
      break;
 8004512:	e01b      	b.n	800454c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8004514:	89fb      	ldrh	r3, [r7, #14]
 8004516:	83fb      	strh	r3, [r7, #30]
      break;
 8004518:	e018      	b.n	800454c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	b299      	uxth	r1, r3
 8004522:	4b31      	ldr	r3, [pc, #196]	@ (80045e8 <BSP_LCD_DisplayStringAt+0x174>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4831      	ldr	r0, [pc, #196]	@ (80045ec <BSP_LCD_DisplayStringAt+0x178>)
 8004528:	4613      	mov	r3, r2
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4403      	add	r3, r0
 8004532:	3308      	adds	r3, #8
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	889b      	ldrh	r3, [r3, #4]
 8004538:	fb11 f303 	smulbb	r3, r1, r3
 800453c:	b29a      	uxth	r2, r3
 800453e:	89fb      	ldrh	r3, [r7, #14]
 8004540:	4413      	add	r3, r2
 8004542:	83fb      	strh	r3, [r7, #30]
      break;
 8004544:	e002      	b.n	800454c <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8004546:	89fb      	ldrh	r3, [r7, #14]
 8004548:	83fb      	strh	r3, [r7, #30]
      break;
 800454a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800454c:	e01a      	b.n	8004584 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	781a      	ldrb	r2, [r3, #0]
 8004552:	89b9      	ldrh	r1, [r7, #12]
 8004554:	8bfb      	ldrh	r3, [r7, #30]
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff ff48 	bl	80043ec <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800455c:	4b22      	ldr	r3, [pc, #136]	@ (80045e8 <BSP_LCD_DisplayStringAt+0x174>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	4922      	ldr	r1, [pc, #136]	@ (80045ec <BSP_LCD_DisplayStringAt+0x178>)
 8004562:	4613      	mov	r3, r2
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	3308      	adds	r3, #8
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	889a      	ldrh	r2, [r3, #4]
 8004572:	8bfb      	ldrh	r3, [r7, #30]
 8004574:	4413      	add	r3, r2
 8004576:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	3301      	adds	r3, #1
 800457c:	60bb      	str	r3, [r7, #8]
    i++;
 800457e:	8bbb      	ldrh	r3, [r7, #28]
 8004580:	3301      	adds	r3, #1
 8004582:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	bf14      	ite	ne
 800458c:	2301      	movne	r3, #1
 800458e:	2300      	moveq	r3, #0
 8004590:	b2dc      	uxtb	r4, r3
 8004592:	f7ff fe2b 	bl	80041ec <BSP_LCD_GetXSize>
 8004596:	8bb9      	ldrh	r1, [r7, #28]
 8004598:	4b13      	ldr	r3, [pc, #76]	@ (80045e8 <BSP_LCD_DisplayStringAt+0x174>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	4d13      	ldr	r5, [pc, #76]	@ (80045ec <BSP_LCD_DisplayStringAt+0x178>)
 800459e:	4613      	mov	r3, r2
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	442b      	add	r3, r5
 80045a8:	3308      	adds	r3, #8
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	889b      	ldrh	r3, [r3, #4]
 80045ae:	fb01 f303 	mul.w	r3, r1, r3
 80045b2:	1ac3      	subs	r3, r0, r3
 80045b4:	b299      	uxth	r1, r3
 80045b6:	4b0c      	ldr	r3, [pc, #48]	@ (80045e8 <BSP_LCD_DisplayStringAt+0x174>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	480c      	ldr	r0, [pc, #48]	@ (80045ec <BSP_LCD_DisplayStringAt+0x178>)
 80045bc:	4613      	mov	r3, r2
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	4413      	add	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4403      	add	r3, r0
 80045c6:	3308      	adds	r3, #8
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	889b      	ldrh	r3, [r3, #4]
 80045cc:	4299      	cmp	r1, r3
 80045ce:	bf2c      	ite	cs
 80045d0:	2301      	movcs	r3, #1
 80045d2:	2300      	movcc	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	4023      	ands	r3, r4
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1b7      	bne.n	800454e <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80045de:	bf00      	nop
 80045e0:	bf00      	nop
 80045e2:	3720      	adds	r7, #32
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bdb0      	pop	{r4, r5, r7, pc}
 80045e8:	200025c4 	.word	0x200025c4
 80045ec:	200025c8 	.word	0x200025c8

080045f0 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80045f0:	b590      	push	{r4, r7, lr}
 80045f2:	b08b      	sub	sp, #44	@ 0x2c
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	4604      	mov	r4, r0
 80045f8:	4608      	mov	r0, r1
 80045fa:	4611      	mov	r1, r2
 80045fc:	461a      	mov	r2, r3
 80045fe:	4623      	mov	r3, r4
 8004600:	80fb      	strh	r3, [r7, #6]
 8004602:	4603      	mov	r3, r0
 8004604:	80bb      	strh	r3, [r7, #4]
 8004606:	460b      	mov	r3, r1
 8004608:	807b      	strh	r3, [r7, #2]
 800460a:	4613      	mov	r3, r2
 800460c:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 800460e:	2300      	movs	r3, #0
 8004610:	823b      	strh	r3, [r7, #16]
 8004612:	2300      	movs	r3, #0
 8004614:	81fb      	strh	r3, [r7, #14]
 8004616:	2300      	movs	r3, #0
 8004618:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800461a:	2300      	movs	r3, #0
 800461c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800461e:	2300      	movs	r3, #0
 8004620:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004622:	2300      	movs	r3, #0
 8004624:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8004626:	2300      	movs	r3, #0
 8004628:	83fb      	strh	r3, [r7, #30]
 800462a:	2300      	movs	r3, #0
 800462c:	83bb      	strh	r3, [r7, #28]
 800462e:	2300      	movs	r3, #0
 8004630:	837b      	strh	r3, [r7, #26]
 8004632:	2300      	movs	r3, #0
 8004634:	833b      	strh	r3, [r7, #24]
 8004636:	2300      	movs	r3, #0
 8004638:	82fb      	strh	r3, [r7, #22]
 800463a:	2300      	movs	r3, #0
 800463c:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 800463e:	2300      	movs	r3, #0
 8004640:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8004642:	887a      	ldrh	r2, [r7, #2]
 8004644:	88fb      	ldrh	r3, [r7, #6]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	bfb8      	it	lt
 800464c:	425b      	neglt	r3, r3
 800464e:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8004650:	883a      	ldrh	r2, [r7, #0]
 8004652:	88bb      	ldrh	r3, [r7, #4]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	bfb8      	it	lt
 800465a:	425b      	neglt	r3, r3
 800465c:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	84fb      	strh	r3, [r7, #38]	@ 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8004662:	88bb      	ldrh	r3, [r7, #4]
 8004664:	84bb      	strh	r3, [r7, #36]	@ 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8004666:	887a      	ldrh	r2, [r7, #2]
 8004668:	88fb      	ldrh	r3, [r7, #6]
 800466a:	429a      	cmp	r2, r3
 800466c:	d304      	bcc.n	8004678 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 800466e:	2301      	movs	r3, #1
 8004670:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = 1;
 8004672:	2301      	movs	r3, #1
 8004674:	843b      	strh	r3, [r7, #32]
 8004676:	e005      	b.n	8004684 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8004678:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800467c:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = -1;
 800467e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004682:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8004684:	883a      	ldrh	r2, [r7, #0]
 8004686:	88bb      	ldrh	r3, [r7, #4]
 8004688:	429a      	cmp	r2, r3
 800468a:	d304      	bcc.n	8004696 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 800468c:	2301      	movs	r3, #1
 800468e:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8004690:	2301      	movs	r3, #1
 8004692:	83bb      	strh	r3, [r7, #28]
 8004694:	e005      	b.n	80046a2 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8004696:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800469a:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 800469c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046a0:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80046a2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80046a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	db10      	blt.n	80046d0 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80046ae:	2300      	movs	r3, #0
 80046b0:	847b      	strh	r3, [r7, #34]	@ 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80046b2:	2300      	movs	r3, #0
 80046b4:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80046b6:	8a3b      	ldrh	r3, [r7, #16]
 80046b8:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80046ba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80046be:	0fda      	lsrs	r2, r3, #31
 80046c0:	4413      	add	r3, r2
 80046c2:	105b      	asrs	r3, r3, #1
 80046c4:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 80046c6:	89fb      	ldrh	r3, [r7, #14]
 80046c8:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 80046ca:	8a3b      	ldrh	r3, [r7, #16]
 80046cc:	82bb      	strh	r3, [r7, #20]
 80046ce:	e00f      	b.n	80046f0 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80046d0:	2300      	movs	r3, #0
 80046d2:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80046d4:	2300      	movs	r3, #0
 80046d6:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80046d8:	89fb      	ldrh	r3, [r7, #14]
 80046da:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80046dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80046e0:	0fda      	lsrs	r2, r3, #31
 80046e2:	4413      	add	r3, r2
 80046e4:	105b      	asrs	r3, r3, #1
 80046e6:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 80046e8:	8a3b      	ldrh	r3, [r7, #16]
 80046ea:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 80046ec:	89fb      	ldrh	r3, [r7, #14]
 80046ee:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80046f0:	2300      	movs	r3, #0
 80046f2:	827b      	strh	r3, [r7, #18]
 80046f4:	e037      	b.n	8004766 <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80046f6:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80046f8:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80046fa:	4b20      	ldr	r3, [pc, #128]	@ (800477c <BSP_LCD_DrawLine+0x18c>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	4c20      	ldr	r4, [pc, #128]	@ (8004780 <BSP_LCD_DrawLine+0x190>)
 8004700:	4613      	mov	r3, r2
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	4413      	add	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4423      	add	r3, r4
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	f000 f9a1 	bl	8004a54 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8004712:	8b3a      	ldrh	r2, [r7, #24]
 8004714:	8afb      	ldrh	r3, [r7, #22]
 8004716:	4413      	add	r3, r2
 8004718:	b29b      	uxth	r3, r3
 800471a:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 800471c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004720:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004724:	429a      	cmp	r2, r3
 8004726:	db0e      	blt.n	8004746 <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8004728:	8b3a      	ldrh	r2, [r7, #24]
 800472a:	8b7b      	ldrh	r3, [r7, #26]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	b29b      	uxth	r3, r3
 8004730:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8004732:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004734:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004736:	4413      	add	r3, r2
 8004738:	b29b      	uxth	r3, r3
 800473a:	84fb      	strh	r3, [r7, #38]	@ 0x26
      y += yinc1;                             /* Change the y as appropriate */
 800473c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800473e:	8bfb      	ldrh	r3, [r7, #30]
 8004740:	4413      	add	r3, r2
 8004742:	b29b      	uxth	r3, r3
 8004744:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8004746:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004748:	8c3b      	ldrh	r3, [r7, #32]
 800474a:	4413      	add	r3, r2
 800474c:	b29b      	uxth	r3, r3
 800474e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8004750:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004752:	8bbb      	ldrh	r3, [r7, #28]
 8004754:	4413      	add	r3, r2
 8004756:	b29b      	uxth	r3, r3
 8004758:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800475a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800475e:	b29b      	uxth	r3, r3
 8004760:	3301      	adds	r3, #1
 8004762:	b29b      	uxth	r3, r3
 8004764:	827b      	strh	r3, [r7, #18]
 8004766:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800476a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800476e:	429a      	cmp	r2, r3
 8004770:	ddc1      	ble.n	80046f6 <BSP_LCD_DrawLine+0x106>
  }
}
 8004772:	bf00      	nop
 8004774:	bf00      	nop
 8004776:	372c      	adds	r7, #44	@ 0x2c
 8004778:	46bd      	mov	sp, r7
 800477a:	bd90      	pop	{r4, r7, pc}
 800477c:	200025c4 	.word	0x200025c4
 8004780:	200025c8 	.word	0x200025c8

08004784 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004788:	b086      	sub	sp, #24
 800478a:	af02      	add	r7, sp, #8
 800478c:	4604      	mov	r4, r0
 800478e:	4608      	mov	r0, r1
 8004790:	4611      	mov	r1, r2
 8004792:	461a      	mov	r2, r3
 8004794:	4623      	mov	r3, r4
 8004796:	80fb      	strh	r3, [r7, #6]
 8004798:	4603      	mov	r3, r0
 800479a:	80bb      	strh	r3, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	807b      	strh	r3, [r7, #2]
 80047a0:	4613      	mov	r3, r2
 80047a2:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80047a8:	4b33      	ldr	r3, [pc, #204]	@ (8004878 <BSP_LCD_FillRect+0xf4>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	4933      	ldr	r1, [pc, #204]	@ (800487c <BSP_LCD_FillRect+0xf8>)
 80047ae:	4613      	mov	r3, r2
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fda2 	bl	8004304 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 80047c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004880 <BSP_LCD_FillRect+0xfc>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d022      	beq.n	800480e <BSP_LCD_FillRect+0x8a>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +BSP_LCD_GetXSize()*BSP_LCD_GetYSize()); //Rotate by 180°
 80047c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004878 <BSP_LCD_FillRect+0xf4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a2d      	ldr	r2, [pc, #180]	@ (8004884 <BSP_LCD_FillRect+0x100>)
 80047ce:	2134      	movs	r1, #52	@ 0x34
 80047d0:	fb01 f303 	mul.w	r3, r1, r3
 80047d4:	4413      	add	r3, r2
 80047d6:	335c      	adds	r3, #92	@ 0x5c
 80047d8:	681c      	ldr	r4, [r3, #0]
 80047da:	f7ff fd07 	bl	80041ec <BSP_LCD_GetXSize>
 80047de:	4603      	mov	r3, r0
 80047e0:	425b      	negs	r3, r3
 80047e2:	88b9      	ldrh	r1, [r7, #4]
 80047e4:	883a      	ldrh	r2, [r7, #0]
 80047e6:	440a      	add	r2, r1
 80047e8:	fb02 f503 	mul.w	r5, r2, r3
 80047ec:	f7ff fcfe 	bl	80041ec <BSP_LCD_GetXSize>
 80047f0:	4606      	mov	r6, r0
 80047f2:	f7ff fd07 	bl	8004204 <BSP_LCD_GetYSize>
 80047f6:	4603      	mov	r3, r0
 80047f8:	fb06 f303 	mul.w	r3, r6, r3
 80047fc:	442b      	add	r3, r5
 80047fe:	88f9      	ldrh	r1, [r7, #6]
 8004800:	887a      	ldrh	r2, [r7, #2]
 8004802:	440a      	add	r2, r1
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4423      	add	r3, r4
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	e013      	b.n	8004836 <BSP_LCD_FillRect+0xb2>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800480e:	4b1a      	ldr	r3, [pc, #104]	@ (8004878 <BSP_LCD_FillRect+0xf4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a1c      	ldr	r2, [pc, #112]	@ (8004884 <BSP_LCD_FillRect+0x100>)
 8004814:	2134      	movs	r1, #52	@ 0x34
 8004816:	fb01 f303 	mul.w	r3, r1, r3
 800481a:	4413      	add	r3, r2
 800481c:	335c      	adds	r3, #92	@ 0x5c
 800481e:	681c      	ldr	r4, [r3, #0]
 8004820:	f7ff fce4 	bl	80041ec <BSP_LCD_GetXSize>
 8004824:	4602      	mov	r2, r0
 8004826:	88bb      	ldrh	r3, [r7, #4]
 8004828:	fb03 f202 	mul.w	r2, r3, r2
 800482c:	88fb      	ldrh	r3, [r7, #6]
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4423      	add	r3, r4
 8004834:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8004836:	4b10      	ldr	r3, [pc, #64]	@ (8004878 <BSP_LCD_FillRect+0xf4>)
 8004838:	681c      	ldr	r4, [r3, #0]
 800483a:	68fd      	ldr	r5, [r7, #12]
 800483c:	887e      	ldrh	r6, [r7, #2]
 800483e:	f8b7 8000 	ldrh.w	r8, [r7]
 8004842:	f7ff fcd3 	bl	80041ec <BSP_LCD_GetXSize>
 8004846:	4602      	mov	r2, r0
 8004848:	887b      	ldrh	r3, [r7, #2]
 800484a:	1ad1      	subs	r1, r2, r3
 800484c:	4b0a      	ldr	r3, [pc, #40]	@ (8004878 <BSP_LCD_FillRect+0xf4>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	480a      	ldr	r0, [pc, #40]	@ (800487c <BSP_LCD_FillRect+0xf8>)
 8004852:	4613      	mov	r3, r2
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	4413      	add	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4403      	add	r3, r0
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	9301      	str	r3, [sp, #4]
 8004860:	9100      	str	r1, [sp, #0]
 8004862:	4643      	mov	r3, r8
 8004864:	4632      	mov	r2, r6
 8004866:	4629      	mov	r1, r5
 8004868:	4620      	mov	r0, r4
 800486a:	f000 f9f9 	bl	8004c60 <FillBuffer>
}
 800486e:	bf00      	nop
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004878:	200025c4 	.word	0x200025c4
 800487c:	200025c8 	.word	0x200025c8
 8004880:	200025e4 	.word	0x200025e4
 8004884:	200024ac 	.word	0x200024ac

08004888 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 800488c:	4b05      	ldr	r3, [pc, #20]	@ (80048a4 <BSP_LCD_DisplayOn+0x1c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8004896:	4b03      	ldr	r3, [pc, #12]	@ (80048a4 <BSP_LCD_DisplayOn+0x1c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4798      	blx	r3
  }
}
 800489e:	bf00      	nop
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	200025e0 	.word	0x200025e0

080048a8 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08e      	sub	sp, #56	@ 0x38
 80048ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80048ae:	2300      	movs	r3, #0
 80048b0:	623b      	str	r3, [r7, #32]
 80048b2:	4b61      	ldr	r3, [pc, #388]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 80048b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b6:	4a60      	ldr	r2, [pc, #384]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 80048b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80048be:	4b5e      	ldr	r3, [pc, #376]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 80048c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048c6:	623b      	str	r3, [r7, #32]
 80048c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	4b5a      	ldr	r3, [pc, #360]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 80048d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d2:	4a59      	ldr	r2, [pc, #356]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 80048d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80048d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80048da:	4b57      	ldr	r3, [pc, #348]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048e2:	61fb      	str	r3, [r7, #28]
 80048e4:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e6:	2300      	movs	r3, #0
 80048e8:	61bb      	str	r3, [r7, #24]
 80048ea:	4b53      	ldr	r3, [pc, #332]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 80048ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ee:	4a52      	ldr	r2, [pc, #328]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80048f6:	4b50      	ldr	r3, [pc, #320]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 80048f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	61bb      	str	r3, [r7, #24]
 8004900:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	4b4c      	ldr	r3, [pc, #304]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490a:	4a4b      	ldr	r2, [pc, #300]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 800490c:	f043 0302 	orr.w	r3, r3, #2
 8004910:	6313      	str	r3, [r2, #48]	@ 0x30
 8004912:	4b49      	ldr	r3, [pc, #292]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800491e:	2300      	movs	r3, #0
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	4b45      	ldr	r3, [pc, #276]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004926:	4a44      	ldr	r2, [pc, #272]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 8004928:	f043 0304 	orr.w	r3, r3, #4
 800492c:	6313      	str	r3, [r2, #48]	@ 0x30
 800492e:	4b42      	ldr	r3, [pc, #264]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	613b      	str	r3, [r7, #16]
 8004938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004942:	4a3d      	ldr	r2, [pc, #244]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 8004944:	f043 0308 	orr.w	r3, r3, #8
 8004948:	6313      	str	r3, [r2, #48]	@ 0x30
 800494a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004956:	2300      	movs	r3, #0
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	4b37      	ldr	r3, [pc, #220]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 800495c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495e:	4a36      	ldr	r2, [pc, #216]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 8004960:	f043 0320 	orr.w	r3, r3, #32
 8004964:	6313      	str	r3, [r2, #48]	@ 0x30
 8004966:	4b34      	ldr	r3, [pc, #208]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	60bb      	str	r3, [r7, #8]
 8004970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004972:	2300      	movs	r3, #0
 8004974:	607b      	str	r3, [r7, #4]
 8004976:	4b30      	ldr	r3, [pc, #192]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497a:	4a2f      	ldr	r2, [pc, #188]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 800497c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004980:	6313      	str	r3, [r2, #48]	@ 0x30
 8004982:	4b2d      	ldr	r3, [pc, #180]	@ (8004a38 <BSP_LCD_MspInit+0x190>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498a:	607b      	str	r3, [r7, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800498e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8004992:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004994:	2302      	movs	r3, #2
 8004996:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004998:	2300      	movs	r3, #0
 800499a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800499c:	2302      	movs	r3, #2
 800499e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80049a0:	230e      	movs	r3, #14
 80049a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80049a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049a8:	4619      	mov	r1, r3
 80049aa:	4824      	ldr	r0, [pc, #144]	@ (8004a3c <BSP_LCD_MspInit+0x194>)
 80049ac:	f001 fb2c 	bl	8006008 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80049b0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80049b4:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80049b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049ba:	4619      	mov	r1, r3
 80049bc:	4820      	ldr	r0, [pc, #128]	@ (8004a40 <BSP_LCD_MspInit+0x198>)
 80049be:	f001 fb23 	bl	8006008 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80049c2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80049c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80049c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049cc:	4619      	mov	r1, r3
 80049ce:	481d      	ldr	r0, [pc, #116]	@ (8004a44 <BSP_LCD_MspInit+0x19c>)
 80049d0:	f001 fb1a 	bl	8006008 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80049d4:	2348      	movs	r3, #72	@ 0x48
 80049d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80049d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049dc:	4619      	mov	r1, r3
 80049de:	481a      	ldr	r0, [pc, #104]	@ (8004a48 <BSP_LCD_MspInit+0x1a0>)
 80049e0:	f001 fb12 	bl	8006008 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80049e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80049ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049ee:	4619      	mov	r1, r3
 80049f0:	4816      	ldr	r0, [pc, #88]	@ (8004a4c <BSP_LCD_MspInit+0x1a4>)
 80049f2:	f001 fb09 	bl	8006008 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80049f6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80049fa:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80049fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a00:	4619      	mov	r1, r3
 8004a02:	4813      	ldr	r0, [pc, #76]	@ (8004a50 <BSP_LCD_MspInit+0x1a8>)
 8004a04:	f001 fb00 	bl	8006008 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8004a0c:	2309      	movs	r3, #9
 8004a0e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004a10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a14:	4619      	mov	r1, r3
 8004a16:	480a      	ldr	r0, [pc, #40]	@ (8004a40 <BSP_LCD_MspInit+0x198>)
 8004a18:	f001 faf6 	bl	8006008 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8004a1c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004a20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004a22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a26:	4619      	mov	r1, r3
 8004a28:	4809      	ldr	r0, [pc, #36]	@ (8004a50 <BSP_LCD_MspInit+0x1a8>)
 8004a2a:	f001 faed 	bl	8006008 <HAL_GPIO_Init>
}
 8004a2e:	bf00      	nop
 8004a30:	3738      	adds	r7, #56	@ 0x38
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	40020000 	.word	0x40020000
 8004a40:	40020400 	.word	0x40020400
 8004a44:	40020800 	.word	0x40020800
 8004a48:	40020c00 	.word	0x40020c00
 8004a4c:	40021400 	.word	0x40021400
 8004a50:	40021800 	.word	0x40021800

08004a54 <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004a54:	b5b0      	push	{r4, r5, r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	603a      	str	r2, [r7, #0]
 8004a5e:	80fb      	strh	r3, [r7, #6]
 8004a60:	460b      	mov	r3, r1
 8004a62:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 8004a64:	4b1e      	ldr	r3, [pc, #120]	@ (8004ae0 <BSP_LCD_DrawPixel+0x8c>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01f      	beq.n	8004aac <BSP_LCD_DrawPixel+0x58>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (BSP_LCD_GetXSize()*BSP_LCD_GetYSize() - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 8004a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ae4 <BSP_LCD_DrawPixel+0x90>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a1d      	ldr	r2, [pc, #116]	@ (8004ae8 <BSP_LCD_DrawPixel+0x94>)
 8004a72:	2134      	movs	r1, #52	@ 0x34
 8004a74:	fb01 f303 	mul.w	r3, r1, r3
 8004a78:	4413      	add	r3, r2
 8004a7a:	335c      	adds	r3, #92	@ 0x5c
 8004a7c:	681c      	ldr	r4, [r3, #0]
 8004a7e:	f7ff fbb5 	bl	80041ec <BSP_LCD_GetXSize>
 8004a82:	4605      	mov	r5, r0
 8004a84:	f7ff fbbe 	bl	8004204 <BSP_LCD_GetYSize>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	fb03 f205 	mul.w	r2, r3, r5
 8004a8e:	88fb      	ldrh	r3, [r7, #6]
 8004a90:	1ad5      	subs	r5, r2, r3
 8004a92:	f7ff fbab 	bl	80041ec <BSP_LCD_GetXSize>
 8004a96:	4602      	mov	r2, r0
 8004a98:	88bb      	ldrh	r3, [r7, #4]
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
 8004a9e:	1aeb      	subs	r3, r5, r3
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4423      	add	r3, r4
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8004aaa:	e015      	b.n	8004ad8 <BSP_LCD_DrawPixel+0x84>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004aac:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae4 <BSP_LCD_DrawPixel+0x90>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ae8 <BSP_LCD_DrawPixel+0x94>)
 8004ab2:	2134      	movs	r1, #52	@ 0x34
 8004ab4:	fb01 f303 	mul.w	r3, r1, r3
 8004ab8:	4413      	add	r3, r2
 8004aba:	335c      	adds	r3, #92	@ 0x5c
 8004abc:	681c      	ldr	r4, [r3, #0]
 8004abe:	88bd      	ldrh	r5, [r7, #4]
 8004ac0:	f7ff fb94 	bl	80041ec <BSP_LCD_GetXSize>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	fb03 f205 	mul.w	r2, r3, r5
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4423      	add	r3, r4
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	6013      	str	r3, [r2, #0]
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae0:	200025e4 	.word	0x200025e4
 8004ae4:	200025c4 	.word	0x200025c4
 8004ae8:	200024ac 	.word	0x200024ac

08004aec <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	4603      	mov	r3, r0
 8004af4:	603a      	str	r2, [r7, #0]
 8004af6:	80fb      	strh	r3, [r7, #6]
 8004af8:	460b      	mov	r3, r1
 8004afa:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	61fb      	str	r3, [r7, #28]
 8004b00:	2300      	movs	r3, #0
 8004b02:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8004b08:	4b53      	ldr	r3, [pc, #332]	@ (8004c58 <DrawChar+0x16c>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	4953      	ldr	r1, [pc, #332]	@ (8004c5c <DrawChar+0x170>)
 8004b0e:	4613      	mov	r3, r2
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	3308      	adds	r3, #8
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	88db      	ldrh	r3, [r3, #6]
 8004b1e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004b20:	4b4d      	ldr	r3, [pc, #308]	@ (8004c58 <DrawChar+0x16c>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	494d      	ldr	r1, [pc, #308]	@ (8004c5c <DrawChar+0x170>)
 8004b26:	4613      	mov	r3, r2
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	4413      	add	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	440b      	add	r3, r1
 8004b30:	3308      	adds	r3, #8
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	889b      	ldrh	r3, [r3, #4]
 8004b36:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8004b38:	8a3b      	ldrh	r3, [r7, #16]
 8004b3a:	3307      	adds	r3, #7
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	da00      	bge.n	8004b42 <DrawChar+0x56>
 8004b40:	3307      	adds	r3, #7
 8004b42:	10db      	asrs	r3, r3, #3
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	8a3b      	ldrh	r3, [r7, #16]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8004b52:	2300      	movs	r3, #0
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	e076      	b.n	8004c46 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004b58:	8a3b      	ldrh	r3, [r7, #16]
 8004b5a:	3307      	adds	r3, #7
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	da00      	bge.n	8004b62 <DrawChar+0x76>
 8004b60:	3307      	adds	r3, #7
 8004b62:	10db      	asrs	r3, r3, #3
 8004b64:	461a      	mov	r2, r3
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	fb02 f303 	mul.w	r3, r2, r3
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	4413      	add	r3, r2
 8004b70:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8004b72:	8a3b      	ldrh	r3, [r7, #16]
 8004b74:	3307      	adds	r3, #7
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	da00      	bge.n	8004b7c <DrawChar+0x90>
 8004b7a:	3307      	adds	r3, #7
 8004b7c:	10db      	asrs	r3, r3, #3
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d002      	beq.n	8004b88 <DrawChar+0x9c>
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d004      	beq.n	8004b90 <DrawChar+0xa4>
 8004b86:	e00c      	b.n	8004ba2 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	617b      	str	r3, [r7, #20]
      break;
 8004b8e:	e016      	b.n	8004bbe <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	021b      	lsls	r3, r3, #8
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	3201      	adds	r2, #1
 8004b9a:	7812      	ldrb	r2, [r2, #0]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
      break;
 8004ba0:	e00d      	b.n	8004bbe <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	041a      	lsls	r2, r3, #16
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	3301      	adds	r3, #1
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	3202      	adds	r2, #2
 8004bb6:	7812      	ldrb	r2, [r2, #0]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]
      break;
 8004bbc:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61bb      	str	r3, [r7, #24]
 8004bc2:	e036      	b.n	8004c32 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004bc4:	8a3a      	ldrh	r2, [r7, #16]
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	1ad2      	subs	r2, r2, r3
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	4413      	add	r3, r2
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d012      	beq.n	8004c06 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	88fb      	ldrh	r3, [r7, #6]
 8004be6:	4413      	add	r3, r2
 8004be8:	b298      	uxth	r0, r3
 8004bea:	4b1b      	ldr	r3, [pc, #108]	@ (8004c58 <DrawChar+0x16c>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	491b      	ldr	r1, [pc, #108]	@ (8004c5c <DrawChar+0x170>)
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	88bb      	ldrh	r3, [r7, #4]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	f7ff ff28 	bl	8004a54 <BSP_LCD_DrawPixel>
 8004c04:	e012      	b.n	8004c2c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	88fb      	ldrh	r3, [r7, #6]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	b298      	uxth	r0, r3
 8004c10:	4b11      	ldr	r3, [pc, #68]	@ (8004c58 <DrawChar+0x16c>)
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	4911      	ldr	r1, [pc, #68]	@ (8004c5c <DrawChar+0x170>)
 8004c16:	4613      	mov	r3, r2
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	4413      	add	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	3304      	adds	r3, #4
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	88bb      	ldrh	r3, [r7, #4]
 8004c26:	4619      	mov	r1, r3
 8004c28:	f7ff ff14 	bl	8004a54 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	8a3b      	ldrh	r3, [r7, #16]
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d3c4      	bcc.n	8004bc4 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8004c3a:	88bb      	ldrh	r3, [r7, #4]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	3301      	adds	r3, #1
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	8a7b      	ldrh	r3, [r7, #18]
 8004c48:	69fa      	ldr	r2, [r7, #28]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d384      	bcc.n	8004b58 <DrawChar+0x6c>
  }
}
 8004c4e:	bf00      	nop
 8004c50:	bf00      	nop
 8004c52:	3720      	adds	r7, #32
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	200025c4 	.word	0x200025c4
 8004c5c:	200025c8 	.word	0x200025c8

08004c60 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af02      	add	r7, sp, #8
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8004c6e:	4b16      	ldr	r3, [pc, #88]	@ (8004cc8 <FillBuffer+0x68>)
 8004c70:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004c74:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004c76:	4b14      	ldr	r3, [pc, #80]	@ (8004cc8 <FillBuffer+0x68>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8004c7c:	4a12      	ldr	r2, [pc, #72]	@ (8004cc8 <FillBuffer+0x68>)
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8004c82:	4b11      	ldr	r3, [pc, #68]	@ (8004cc8 <FillBuffer+0x68>)
 8004c84:	4a11      	ldr	r2, [pc, #68]	@ (8004ccc <FillBuffer+0x6c>)
 8004c86:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8004c88:	480f      	ldr	r0, [pc, #60]	@ (8004cc8 <FillBuffer+0x68>)
 8004c8a:	f000 ff27 	bl	8005adc <HAL_DMA2D_Init>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d115      	bne.n	8004cc0 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8004c94:	68f9      	ldr	r1, [r7, #12]
 8004c96:	480c      	ldr	r0, [pc, #48]	@ (8004cc8 <FillBuffer+0x68>)
 8004c98:	f001 f888 	bl	8005dac <HAL_DMA2D_ConfigLayer>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10e      	bne.n	8004cc0 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69f9      	ldr	r1, [r7, #28]
 8004cac:	4806      	ldr	r0, [pc, #24]	@ (8004cc8 <FillBuffer+0x68>)
 8004cae:	f000 ff68 	bl	8005b82 <HAL_DMA2D_Start>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d103      	bne.n	8004cc0 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004cb8:	210a      	movs	r1, #10
 8004cba:	4803      	ldr	r0, [pc, #12]	@ (8004cc8 <FillBuffer+0x68>)
 8004cbc:	f000 ff8c 	bl	8005bd8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004cc0:	bf00      	nop
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	20002554 	.word	0x20002554
 8004ccc:	4002b000 	.word	0x4002b000

08004cd0 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004cd4:	4b29      	ldr	r3, [pc, #164]	@ (8004d7c <BSP_SDRAM_Init+0xac>)
 8004cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8004d80 <BSP_SDRAM_Init+0xb0>)
 8004cd8:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004cda:	4b2a      	ldr	r3, [pc, #168]	@ (8004d84 <BSP_SDRAM_Init+0xb4>)
 8004cdc:	2202      	movs	r2, #2
 8004cde:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004ce0:	4b28      	ldr	r3, [pc, #160]	@ (8004d84 <BSP_SDRAM_Init+0xb4>)
 8004ce2:	2207      	movs	r2, #7
 8004ce4:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8004ce6:	4b27      	ldr	r3, [pc, #156]	@ (8004d84 <BSP_SDRAM_Init+0xb4>)
 8004ce8:	2204      	movs	r2, #4
 8004cea:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004cec:	4b25      	ldr	r3, [pc, #148]	@ (8004d84 <BSP_SDRAM_Init+0xb4>)
 8004cee:	2207      	movs	r2, #7
 8004cf0:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8004cf2:	4b24      	ldr	r3, [pc, #144]	@ (8004d84 <BSP_SDRAM_Init+0xb4>)
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8004cf8:	4b22      	ldr	r3, [pc, #136]	@ (8004d84 <BSP_SDRAM_Init+0xb4>)
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8004cfe:	4b21      	ldr	r3, [pc, #132]	@ (8004d84 <BSP_SDRAM_Init+0xb4>)
 8004d00:	2202      	movs	r2, #2
 8004d02:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004d04:	4b1d      	ldr	r3, [pc, #116]	@ (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004d10:	4b1a      	ldr	r3, [pc, #104]	@ (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d12:	2204      	movs	r2, #4
 8004d14:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004d16:	4b19      	ldr	r3, [pc, #100]	@ (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d18:	2210      	movs	r2, #16
 8004d1a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004d1c:	4b17      	ldr	r3, [pc, #92]	@ (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d1e:	2240      	movs	r2, #64	@ 0x40
 8004d20:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8004d22:	4b16      	ldr	r3, [pc, #88]	@ (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d24:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004d28:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004d2a:	4b14      	ldr	r3, [pc, #80]	@ (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004d30:	4b12      	ldr	r3, [pc, #72]	@ (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d36:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8004d38:	4b10      	ldr	r3, [pc, #64]	@ (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8004d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004d44:	629a      	str	r2, [r3, #40]	@ 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8004d46:	2100      	movs	r1, #0
 8004d48:	480c      	ldr	r0, [pc, #48]	@ (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d4a:	f000 f87f 	bl	8004e4c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8004d4e:	490d      	ldr	r1, [pc, #52]	@ (8004d84 <BSP_SDRAM_Init+0xb4>)
 8004d50:	480a      	ldr	r0, [pc, #40]	@ (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d52:	f003 fc6f 	bl	8008634 <HAL_SDRAM_Init>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d88 <BSP_SDRAM_Init+0xb8>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	e002      	b.n	8004d6a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004d64:	4b08      	ldr	r3, [pc, #32]	@ (8004d88 <BSP_SDRAM_Init+0xb8>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004d6a:	f240 506a 	movw	r0, #1386	@ 0x56a
 8004d6e:	f000 f80d 	bl	8004d8c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004d72:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <BSP_SDRAM_Init+0xb8>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	200025e8 	.word	0x200025e8
 8004d80:	a0000140 	.word	0xa0000140
 8004d84:	2000261c 	.word	0x2000261c
 8004d88:	20000190 	.word	0x20000190

08004d8c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004d98:	4b2a      	ldr	r3, [pc, #168]	@ (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004d9e:	4b29      	ldr	r3, [pc, #164]	@ (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004da0:	2208      	movs	r2, #8
 8004da2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004da4:	4b27      	ldr	r3, [pc, #156]	@ (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004daa:	4b26      	ldr	r3, [pc, #152]	@ (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004db0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004db4:	4923      	ldr	r1, [pc, #140]	@ (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004db6:	4824      	ldr	r0, [pc, #144]	@ (8004e48 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004db8:	f003 fc7a 	bl	80086b0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004dbc:	2001      	movs	r0, #1
 8004dbe:	f000 fb99 	bl	80054f4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8004dc2:	4b20      	ldr	r3, [pc, #128]	@ (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dca:	2208      	movs	r2, #8
 8004dcc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004dce:	4b1d      	ldr	r3, [pc, #116]	@ (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8004dda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004dde:	4919      	ldr	r1, [pc, #100]	@ (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004de0:	4819      	ldr	r0, [pc, #100]	@ (8004e48 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004de2:	f003 fc65 	bl	80086b0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004de6:	4b17      	ldr	r3, [pc, #92]	@ (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004de8:	2203      	movs	r2, #3
 8004dea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004dec:	4b15      	ldr	r3, [pc, #84]	@ (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dee:	2208      	movs	r2, #8
 8004df0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8004df2:	4b14      	ldr	r3, [pc, #80]	@ (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004df4:	2204      	movs	r2, #4
 8004df6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004df8:	4b12      	ldr	r3, [pc, #72]	@ (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004dfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e02:	4910      	ldr	r1, [pc, #64]	@ (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e04:	4810      	ldr	r0, [pc, #64]	@ (8004e48 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004e06:	f003 fc53 	bl	80086b0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8004e0a:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8004e0e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004e10:	4b0c      	ldr	r3, [pc, #48]	@ (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e12:	2204      	movs	r2, #4
 8004e14:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004e16:	4b0b      	ldr	r3, [pc, #44]	@ (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e18:	2208      	movs	r2, #8
 8004e1a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004e1c:	4b09      	ldr	r3, [pc, #36]	@ (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4a07      	ldr	r2, [pc, #28]	@ (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e26:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004e28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e2c:	4905      	ldr	r1, [pc, #20]	@ (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e2e:	4806      	ldr	r0, [pc, #24]	@ (8004e48 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004e30:	f003 fc3e 	bl	80086b0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4804      	ldr	r0, [pc, #16]	@ (8004e48 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004e38:	f003 fc65 	bl	8008706 <HAL_SDRAM_ProgramRefreshRate>
}
 8004e3c:	bf00      	nop
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	20002638 	.word	0x20002638
 8004e48:	200025e8 	.word	0x200025e8

08004e4c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b090      	sub	sp, #64	@ 0x40
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 80ec 	beq.w	8005036 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e62:	4b77      	ldr	r3, [pc, #476]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e66:	4a76      	ldr	r2, [pc, #472]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	6393      	str	r3, [r2, #56]	@ 0x38
 8004e6e:	4b74      	ldr	r3, [pc, #464]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e7e:	4b70      	ldr	r3, [pc, #448]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e82:	4a6f      	ldr	r2, [pc, #444]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004e84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e8a:	4b6d      	ldr	r3, [pc, #436]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e96:	2300      	movs	r3, #0
 8004e98:	623b      	str	r3, [r7, #32]
 8004e9a:	4b69      	ldr	r3, [pc, #420]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9e:	4a68      	ldr	r2, [pc, #416]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004ea0:	f043 0302 	orr.w	r3, r3, #2
 8004ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ea6:	4b66      	ldr	r3, [pc, #408]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	623b      	str	r3, [r7, #32]
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	4b62      	ldr	r3, [pc, #392]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eba:	4a61      	ldr	r2, [pc, #388]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004ebc:	f043 0304 	orr.w	r3, r3, #4
 8004ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ec2:	4b5f      	ldr	r3, [pc, #380]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	61fb      	str	r3, [r7, #28]
 8004ecc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61bb      	str	r3, [r7, #24]
 8004ed2:	4b5b      	ldr	r3, [pc, #364]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed6:	4a5a      	ldr	r2, [pc, #360]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004ed8:	f043 0308 	orr.w	r3, r3, #8
 8004edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ede:	4b58      	ldr	r3, [pc, #352]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	61bb      	str	r3, [r7, #24]
 8004ee8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004eea:	2300      	movs	r3, #0
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	4b54      	ldr	r3, [pc, #336]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef2:	4a53      	ldr	r2, [pc, #332]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004ef4:	f043 0310 	orr.w	r3, r3, #16
 8004ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004efa:	4b51      	ldr	r3, [pc, #324]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efe:	f003 0310 	and.w	r3, r3, #16
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004f06:	2300      	movs	r3, #0
 8004f08:	613b      	str	r3, [r7, #16]
 8004f0a:	4b4d      	ldr	r3, [pc, #308]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0e:	4a4c      	ldr	r2, [pc, #304]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004f10:	f043 0320 	orr.w	r3, r3, #32
 8004f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f16:	4b4a      	ldr	r3, [pc, #296]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1a:	f003 0320 	and.w	r3, r3, #32
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	4b46      	ldr	r3, [pc, #280]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2a:	4a45      	ldr	r2, [pc, #276]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f32:	4b43      	ldr	r3, [pc, #268]	@ (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8004f3e:	2302      	movs	r3, #2
 8004f40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004f42:	2302      	movs	r3, #2
 8004f44:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004f4a:	230c      	movs	r3, #12
 8004f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8004f4e:	2360      	movs	r3, #96	@ 0x60
 8004f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8004f52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f56:	4619      	mov	r1, r3
 8004f58:	483a      	ldr	r0, [pc, #232]	@ (8005044 <BSP_SDRAM_MspInit+0x1f8>)
 8004f5a:	f001 f855 	bl	8006008 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8004f5e:	2301      	movs	r3, #1
 8004f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8004f62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f66:	4619      	mov	r1, r3
 8004f68:	4837      	ldr	r0, [pc, #220]	@ (8005048 <BSP_SDRAM_MspInit+0x1fc>)
 8004f6a:	f001 f84d 	bl	8006008 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8004f6e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004f74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4834      	ldr	r0, [pc, #208]	@ (800504c <BSP_SDRAM_MspInit+0x200>)
 8004f7c:	f001 f844 	bl	8006008 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004f80:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004f86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4830      	ldr	r0, [pc, #192]	@ (8005050 <BSP_SDRAM_MspInit+0x204>)
 8004f8e:	f001 f83b 	bl	8006008 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8004f92:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004f98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	482d      	ldr	r0, [pc, #180]	@ (8005054 <BSP_SDRAM_MspInit+0x208>)
 8004fa0:	f001 f832 	bl	8006008 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004fa4:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004faa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4829      	ldr	r0, [pc, #164]	@ (8005058 <BSP_SDRAM_MspInit+0x20c>)
 8004fb2:	f001 f829 	bl	8006008 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004fb6:	4b29      	ldr	r3, [pc, #164]	@ (800505c <BSP_SDRAM_MspInit+0x210>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004fbc:	4b27      	ldr	r3, [pc, #156]	@ (800505c <BSP_SDRAM_MspInit+0x210>)
 8004fbe:	2280      	movs	r2, #128	@ 0x80
 8004fc0:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004fc2:	4b26      	ldr	r3, [pc, #152]	@ (800505c <BSP_SDRAM_MspInit+0x210>)
 8004fc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fc8:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004fca:	4b24      	ldr	r3, [pc, #144]	@ (800505c <BSP_SDRAM_MspInit+0x210>)
 8004fcc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004fd0:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004fd2:	4b22      	ldr	r3, [pc, #136]	@ (800505c <BSP_SDRAM_MspInit+0x210>)
 8004fd4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004fd8:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004fda:	4b20      	ldr	r3, [pc, #128]	@ (800505c <BSP_SDRAM_MspInit+0x210>)
 8004fdc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004fe0:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8004fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800505c <BSP_SDRAM_MspInit+0x210>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800505c <BSP_SDRAM_MspInit+0x210>)
 8004fea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004fee:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800505c <BSP_SDRAM_MspInit+0x210>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	625a      	str	r2, [r3, #36]	@ 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004ff6:	4b19      	ldr	r3, [pc, #100]	@ (800505c <BSP_SDRAM_MspInit+0x210>)
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	629a      	str	r2, [r3, #40]	@ 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004ffc:	4b17      	ldr	r3, [pc, #92]	@ (800505c <BSP_SDRAM_MspInit+0x210>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005002:	4b16      	ldr	r3, [pc, #88]	@ (800505c <BSP_SDRAM_MspInit+0x210>)
 8005004:	2200      	movs	r2, #0
 8005006:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8005008:	4b14      	ldr	r3, [pc, #80]	@ (800505c <BSP_SDRAM_MspInit+0x210>)
 800500a:	4a15      	ldr	r2, [pc, #84]	@ (8005060 <BSP_SDRAM_MspInit+0x214>)
 800500c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a12      	ldr	r2, [pc, #72]	@ (800505c <BSP_SDRAM_MspInit+0x210>)
 8005012:	631a      	str	r2, [r3, #48]	@ 0x30
 8005014:	4a11      	ldr	r2, [pc, #68]	@ (800505c <BSP_SDRAM_MspInit+0x210>)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800501a:	4810      	ldr	r0, [pc, #64]	@ (800505c <BSP_SDRAM_MspInit+0x210>)
 800501c:	f000 fc4e 	bl	80058bc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8005020:	480e      	ldr	r0, [pc, #56]	@ (800505c <BSP_SDRAM_MspInit+0x210>)
 8005022:	f000 fb9d 	bl	8005760 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8005026:	2200      	movs	r2, #0
 8005028:	210f      	movs	r1, #15
 800502a:	2038      	movs	r0, #56	@ 0x38
 800502c:	f000 fb61 	bl	80056f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005030:	2038      	movs	r0, #56	@ 0x38
 8005032:	f000 fb7a 	bl	800572a <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8005036:	bf00      	nop
 8005038:	3740      	adds	r7, #64	@ 0x40
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40023800 	.word	0x40023800
 8005044:	40020400 	.word	0x40020400
 8005048:	40020800 	.word	0x40020800
 800504c:	40020c00 	.word	0x40020c00
 8005050:	40021000 	.word	0x40021000
 8005054:	40021400 	.word	0x40021400
 8005058:	40021800 	.word	0x40021800
 800505c:	20002648 	.word	0x20002648
 8005060:	40026410 	.word	0x40026410

08005064 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	4603      	mov	r3, r0
 800506c:	460a      	mov	r2, r1
 800506e:	80fb      	strh	r3, [r7, #6]
 8005070:	4613      	mov	r3, r2
 8005072:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8005078:	4a13      	ldr	r2, [pc, #76]	@ (80050c8 <BSP_TS_Init+0x64>)
 800507a:	88fb      	ldrh	r3, [r7, #6]
 800507c:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 800507e:	4a13      	ldr	r2, [pc, #76]	@ (80050cc <BSP_TS_Init+0x68>)
 8005080:	88bb      	ldrh	r3, [r7, #4]
 8005082:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8005084:	4b12      	ldr	r3, [pc, #72]	@ (80050d0 <BSP_TS_Init+0x6c>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2082      	movs	r0, #130	@ 0x82
 800508a:	4798      	blx	r3
 800508c:	4603      	mov	r3, r0
 800508e:	461a      	mov	r2, r3
 8005090:	f640 0311 	movw	r3, #2065	@ 0x811
 8005094:	429a      	cmp	r2, r3
 8005096:	d104      	bne.n	80050a2 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8005098:	4b0e      	ldr	r3, [pc, #56]	@ (80050d4 <BSP_TS_Init+0x70>)
 800509a:	4a0d      	ldr	r2, [pc, #52]	@ (80050d0 <BSP_TS_Init+0x6c>)
 800509c:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 800509e:	2300      	movs	r3, #0
 80050a0:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d109      	bne.n	80050bc <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 80050a8:	4b0a      	ldr	r3, [pc, #40]	@ (80050d4 <BSP_TS_Init+0x70>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2082      	movs	r0, #130	@ 0x82
 80050b0:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 80050b2:	4b08      	ldr	r3, [pc, #32]	@ (80050d4 <BSP_TS_Init+0x70>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	2082      	movs	r0, #130	@ 0x82
 80050ba:	4798      	blx	r3
  }

  return ret;
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	200026ac 	.word	0x200026ac
 80050cc:	200026ae 	.word	0x200026ae
 80050d0:	20000140 	.word	0x20000140
 80050d4:	200026a8 	.word	0x200026a8

080050d8 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 80050dc:	4b03      	ldr	r3, [pc, #12]	@ (80050ec <BSP_TS_ITGetStatus+0x14>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	2082      	movs	r0, #130	@ 0x82
 80050e4:	4798      	blx	r3
 80050e6:	4603      	mov	r3, r0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	200026a8 	.word	0x200026a8

080050f0 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80050f8:	4b4f      	ldr	r3, [pc, #316]	@ (8005238 <BSP_TS_GetState+0x148>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2082      	movs	r0, #130	@ 0x82
 8005100:	4798      	blx	r3
 8005102:	4603      	mov	r3, r0
 8005104:	461a      	mov	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 808d 	beq.w	800522e <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8005114:	4b48      	ldr	r3, [pc, #288]	@ (8005238 <BSP_TS_GetState+0x148>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	f107 020c 	add.w	r2, r7, #12
 800511e:	f107 010e 	add.w	r1, r7, #14
 8005122:	2082      	movs	r0, #130	@ 0x82
 8005124:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8005126:	89bb      	ldrh	r3, [r7, #12]
 8005128:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800512c:	b29b      	uxth	r3, r3
 800512e:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8005130:	89bb      	ldrh	r3, [r7, #12]
 8005132:	4a42      	ldr	r2, [pc, #264]	@ (800523c <BSP_TS_GetState+0x14c>)
 8005134:	fba2 2303 	umull	r2, r3, r2, r3
 8005138:	08db      	lsrs	r3, r3, #3
 800513a:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 800513c:	8abb      	ldrh	r3, [r7, #20]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d102      	bne.n	8005148 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8005142:	2300      	movs	r3, #0
 8005144:	82bb      	strh	r3, [r7, #20]
 8005146:	e008      	b.n	800515a <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8005148:	4b3d      	ldr	r3, [pc, #244]	@ (8005240 <BSP_TS_GetState+0x150>)
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	8aba      	ldrh	r2, [r7, #20]
 800514e:	429a      	cmp	r2, r3
 8005150:	d903      	bls.n	800515a <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8005152:	4b3b      	ldr	r3, [pc, #236]	@ (8005240 <BSP_TS_GetState+0x150>)
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	3b01      	subs	r3, #1
 8005158:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 800515a:	8abb      	ldrh	r3, [r7, #20]
 800515c:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 800515e:	89fb      	ldrh	r3, [r7, #14]
 8005160:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8005164:	4293      	cmp	r3, r2
 8005166:	d806      	bhi.n	8005176 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8005168:	89fb      	ldrh	r3, [r7, #14]
 800516a:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 800516e:	330e      	adds	r3, #14
 8005170:	b29b      	uxth	r3, r3
 8005172:	81fb      	strh	r3, [r7, #14]
 8005174:	e005      	b.n	8005182 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8005176:	89fb      	ldrh	r3, [r7, #14]
 8005178:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800517c:	3308      	adds	r3, #8
 800517e:	b29b      	uxth	r3, r3
 8005180:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8005182:	89fb      	ldrh	r3, [r7, #14]
 8005184:	4a2f      	ldr	r2, [pc, #188]	@ (8005244 <BSP_TS_GetState+0x154>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	08db      	lsrs	r3, r3, #3
 800518c:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 800518e:	8afb      	ldrh	r3, [r7, #22]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d102      	bne.n	800519a <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	82fb      	strh	r3, [r7, #22]
 8005198:	e008      	b.n	80051ac <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800519a:	4b2b      	ldr	r3, [pc, #172]	@ (8005248 <BSP_TS_GetState+0x158>)
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	8afa      	ldrh	r2, [r7, #22]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d903      	bls.n	80051ac <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 80051a4:	4b28      	ldr	r3, [pc, #160]	@ (8005248 <BSP_TS_GetState+0x158>)
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 80051ac:	8afb      	ldrh	r3, [r7, #22]
 80051ae:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 80051b0:	89fb      	ldrh	r3, [r7, #14]
 80051b2:	461a      	mov	r2, r3
 80051b4:	4b25      	ldr	r3, [pc, #148]	@ (800524c <BSP_TS_GetState+0x15c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d906      	bls.n	80051ca <BSP_TS_GetState+0xda>
 80051bc:	89fa      	ldrh	r2, [r7, #14]
 80051be:	4b23      	ldr	r3, [pc, #140]	@ (800524c <BSP_TS_GetState+0x15c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	e005      	b.n	80051d6 <BSP_TS_GetState+0xe6>
 80051ca:	4b20      	ldr	r3, [pc, #128]	@ (800524c <BSP_TS_GetState+0x15c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	89fb      	ldrh	r3, [r7, #14]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 80051d8:	89bb      	ldrh	r3, [r7, #12]
 80051da:	461a      	mov	r2, r3
 80051dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005250 <BSP_TS_GetState+0x160>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d906      	bls.n	80051f2 <BSP_TS_GetState+0x102>
 80051e4:	89ba      	ldrh	r2, [r7, #12]
 80051e6:	4b1a      	ldr	r3, [pc, #104]	@ (8005250 <BSP_TS_GetState+0x160>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	e005      	b.n	80051fe <BSP_TS_GetState+0x10e>
 80051f2:	4b17      	ldr	r3, [pc, #92]	@ (8005250 <BSP_TS_GetState+0x160>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	89bb      	ldrh	r3, [r7, #12]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8005200:	8a7a      	ldrh	r2, [r7, #18]
 8005202:	8a3b      	ldrh	r3, [r7, #16]
 8005204:	4413      	add	r3, r2
 8005206:	2b05      	cmp	r3, #5
 8005208:	dd07      	ble.n	800521a <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800520a:	89fb      	ldrh	r3, [r7, #14]
 800520c:	461a      	mov	r2, r3
 800520e:	4b0f      	ldr	r3, [pc, #60]	@ (800524c <BSP_TS_GetState+0x15c>)
 8005210:	601a      	str	r2, [r3, #0]
      _y = y; 
 8005212:	89bb      	ldrh	r3, [r7, #12]
 8005214:	461a      	mov	r2, r3
 8005216:	4b0e      	ldr	r3, [pc, #56]	@ (8005250 <BSP_TS_GetState+0x160>)
 8005218:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 800521a:	4b0c      	ldr	r3, [pc, #48]	@ (800524c <BSP_TS_GetState+0x15c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	b29a      	uxth	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8005224:	4b0a      	ldr	r3, [pc, #40]	@ (8005250 <BSP_TS_GetState+0x160>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	b29a      	uxth	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	809a      	strh	r2, [r3, #4]
  }
}
 800522e:	bf00      	nop
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	200026a8 	.word	0x200026a8
 800523c:	ba2e8ba3 	.word	0xba2e8ba3
 8005240:	200026ae 	.word	0x200026ae
 8005244:	88888889 	.word	0x88888889
 8005248:	200026ac 	.word	0x200026ac
 800524c:	200026b0 	.word	0x200026b0
 8005250:	200026b4 	.word	0x200026b4

08005254 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 8005258:	4b03      	ldr	r3, [pc, #12]	@ (8005268 <BSP_TS_ITClear+0x14>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	2082      	movs	r0, #130	@ 0x82
 8005260:	4798      	blx	r3
}
 8005262:	bf00      	nop
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	200026a8 	.word	0x200026a8

0800526c <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	460b      	mov	r3, r1
 8005276:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 8005278:	2300      	movs	r3, #0
 800527a:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	887a      	ldrh	r2, [r7, #2]
 8005280:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005290:	d02c      	beq.n	80052ec <arm_cfft_init_f32+0x80>
 8005292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005296:	f300 809e 	bgt.w	80053d6 <arm_cfft_init_f32+0x16a>
 800529a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800529e:	d032      	beq.n	8005306 <arm_cfft_init_f32+0x9a>
 80052a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052a4:	f300 8097 	bgt.w	80053d6 <arm_cfft_init_f32+0x16a>
 80052a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ac:	d038      	beq.n	8005320 <arm_cfft_init_f32+0xb4>
 80052ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052b2:	f300 8090 	bgt.w	80053d6 <arm_cfft_init_f32+0x16a>
 80052b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052ba:	d03e      	beq.n	800533a <arm_cfft_init_f32+0xce>
 80052bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052c0:	f300 8089 	bgt.w	80053d6 <arm_cfft_init_f32+0x16a>
 80052c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052c8:	d044      	beq.n	8005354 <arm_cfft_init_f32+0xe8>
 80052ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ce:	f300 8082 	bgt.w	80053d6 <arm_cfft_init_f32+0x16a>
 80052d2:	2b80      	cmp	r3, #128	@ 0x80
 80052d4:	d04b      	beq.n	800536e <arm_cfft_init_f32+0x102>
 80052d6:	2b80      	cmp	r3, #128	@ 0x80
 80052d8:	dc7d      	bgt.n	80053d6 <arm_cfft_init_f32+0x16a>
 80052da:	2b40      	cmp	r3, #64	@ 0x40
 80052dc:	d054      	beq.n	8005388 <arm_cfft_init_f32+0x11c>
 80052de:	2b40      	cmp	r3, #64	@ 0x40
 80052e0:	dc79      	bgt.n	80053d6 <arm_cfft_init_f32+0x16a>
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d06a      	beq.n	80053bc <arm_cfft_init_f32+0x150>
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	d05b      	beq.n	80053a2 <arm_cfft_init_f32+0x136>
 80052ea:	e074      	b.n	80053d6 <arm_cfft_init_f32+0x16a>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 80052ec:	4b3f      	ldr	r3, [pc, #252]	@ (80053ec <arm_cfft_init_f32+0x180>)
 80052ee:	899a      	ldrh	r2, [r3, #12]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	819a      	strh	r2, [r3, #12]
 80052f4:	4b3d      	ldr	r3, [pc, #244]	@ (80053ec <arm_cfft_init_f32+0x180>)
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	609a      	str	r2, [r3, #8]
 80052fc:	4b3b      	ldr	r3, [pc, #236]	@ (80053ec <arm_cfft_init_f32+0x180>)
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	605a      	str	r2, [r3, #4]
            break;
 8005304:	e06a      	b.n	80053dc <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 8005306:	4b3a      	ldr	r3, [pc, #232]	@ (80053f0 <arm_cfft_init_f32+0x184>)
 8005308:	899a      	ldrh	r2, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	819a      	strh	r2, [r3, #12]
 800530e:	4b38      	ldr	r3, [pc, #224]	@ (80053f0 <arm_cfft_init_f32+0x184>)
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	609a      	str	r2, [r3, #8]
 8005316:	4b36      	ldr	r3, [pc, #216]	@ (80053f0 <arm_cfft_init_f32+0x184>)
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	605a      	str	r2, [r3, #4]

            break;
 800531e:	e05d      	b.n	80053dc <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 8005320:	4b34      	ldr	r3, [pc, #208]	@ (80053f4 <arm_cfft_init_f32+0x188>)
 8005322:	899a      	ldrh	r2, [r3, #12]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	819a      	strh	r2, [r3, #12]
 8005328:	4b32      	ldr	r3, [pc, #200]	@ (80053f4 <arm_cfft_init_f32+0x188>)
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	609a      	str	r2, [r3, #8]
 8005330:	4b30      	ldr	r3, [pc, #192]	@ (80053f4 <arm_cfft_init_f32+0x188>)
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	605a      	str	r2, [r3, #4]

            break;
 8005338:	e050      	b.n	80053dc <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 800533a:	4b2f      	ldr	r3, [pc, #188]	@ (80053f8 <arm_cfft_init_f32+0x18c>)
 800533c:	899a      	ldrh	r2, [r3, #12]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	819a      	strh	r2, [r3, #12]
 8005342:	4b2d      	ldr	r3, [pc, #180]	@ (80053f8 <arm_cfft_init_f32+0x18c>)
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	609a      	str	r2, [r3, #8]
 800534a:	4b2b      	ldr	r3, [pc, #172]	@ (80053f8 <arm_cfft_init_f32+0x18c>)
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	605a      	str	r2, [r3, #4]
            break;
 8005352:	e043      	b.n	80053dc <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 8005354:	4b29      	ldr	r3, [pc, #164]	@ (80053fc <arm_cfft_init_f32+0x190>)
 8005356:	899a      	ldrh	r2, [r3, #12]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	819a      	strh	r2, [r3, #12]
 800535c:	4b27      	ldr	r3, [pc, #156]	@ (80053fc <arm_cfft_init_f32+0x190>)
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	609a      	str	r2, [r3, #8]
 8005364:	4b25      	ldr	r3, [pc, #148]	@ (80053fc <arm_cfft_init_f32+0x190>)
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	605a      	str	r2, [r3, #4]
            break;
 800536c:	e036      	b.n	80053dc <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 800536e:	4b24      	ldr	r3, [pc, #144]	@ (8005400 <arm_cfft_init_f32+0x194>)
 8005370:	899a      	ldrh	r2, [r3, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	819a      	strh	r2, [r3, #12]
 8005376:	4b22      	ldr	r3, [pc, #136]	@ (8005400 <arm_cfft_init_f32+0x194>)
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	609a      	str	r2, [r3, #8]
 800537e:	4b20      	ldr	r3, [pc, #128]	@ (8005400 <arm_cfft_init_f32+0x194>)
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	605a      	str	r2, [r3, #4]
            break;
 8005386:	e029      	b.n	80053dc <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 8005388:	4b1e      	ldr	r3, [pc, #120]	@ (8005404 <arm_cfft_init_f32+0x198>)
 800538a:	899a      	ldrh	r2, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	819a      	strh	r2, [r3, #12]
 8005390:	4b1c      	ldr	r3, [pc, #112]	@ (8005404 <arm_cfft_init_f32+0x198>)
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	609a      	str	r2, [r3, #8]
 8005398:	4b1a      	ldr	r3, [pc, #104]	@ (8005404 <arm_cfft_init_f32+0x198>)
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	605a      	str	r2, [r3, #4]
            break;
 80053a0:	e01c      	b.n	80053dc <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 80053a2:	4b19      	ldr	r3, [pc, #100]	@ (8005408 <arm_cfft_init_f32+0x19c>)
 80053a4:	899a      	ldrh	r2, [r3, #12]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	819a      	strh	r2, [r3, #12]
 80053aa:	4b17      	ldr	r3, [pc, #92]	@ (8005408 <arm_cfft_init_f32+0x19c>)
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	609a      	str	r2, [r3, #8]
 80053b2:	4b15      	ldr	r3, [pc, #84]	@ (8005408 <arm_cfft_init_f32+0x19c>)
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	605a      	str	r2, [r3, #4]
            break;
 80053ba:	e00f      	b.n	80053dc <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 80053bc:	4b13      	ldr	r3, [pc, #76]	@ (800540c <arm_cfft_init_f32+0x1a0>)
 80053be:	899a      	ldrh	r2, [r3, #12]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	819a      	strh	r2, [r3, #12]
 80053c4:	4b11      	ldr	r3, [pc, #68]	@ (800540c <arm_cfft_init_f32+0x1a0>)
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	609a      	str	r2, [r3, #8]
 80053cc:	4b0f      	ldr	r3, [pc, #60]	@ (800540c <arm_cfft_init_f32+0x1a0>)
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	605a      	str	r2, [r3, #4]
            break;
 80053d4:	e002      	b.n	80053dc <arm_cfft_init_f32+0x170>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 80053d6:	23ff      	movs	r3, #255	@ 0xff
 80053d8:	73fb      	strb	r3, [r7, #15]
            break;
 80053da:	bf00      	nop
        }


        return (status);
 80053dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	08010b08 	.word	0x08010b08
 80053f0:	08010b38 	.word	0x08010b38
 80053f4:	08010ad8 	.word	0x08010ad8
 80053f8:	08010b18 	.word	0x08010b18
 80053fc:	08010b48 	.word	0x08010b48
 8005400:	08010af8 	.word	0x08010af8
 8005404:	08010ae8 	.word	0x08010ae8
 8005408:	08010b58 	.word	0x08010b58
 800540c:	08010b28 	.word	0x08010b28

08005410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005414:	4b0e      	ldr	r3, [pc, #56]	@ (8005450 <HAL_Init+0x40>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a0d      	ldr	r2, [pc, #52]	@ (8005450 <HAL_Init+0x40>)
 800541a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800541e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005420:	4b0b      	ldr	r3, [pc, #44]	@ (8005450 <HAL_Init+0x40>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a0a      	ldr	r2, [pc, #40]	@ (8005450 <HAL_Init+0x40>)
 8005426:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800542a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800542c:	4b08      	ldr	r3, [pc, #32]	@ (8005450 <HAL_Init+0x40>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a07      	ldr	r2, [pc, #28]	@ (8005450 <HAL_Init+0x40>)
 8005432:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005438:	2003      	movs	r0, #3
 800543a:	f000 f94f 	bl	80056dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800543e:	200f      	movs	r0, #15
 8005440:	f000 f808 	bl	8005454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005444:	f7fd fd4a 	bl	8002edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	40023c00 	.word	0x40023c00

08005454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800545c:	4b12      	ldr	r3, [pc, #72]	@ (80054a8 <HAL_InitTick+0x54>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	4b12      	ldr	r3, [pc, #72]	@ (80054ac <HAL_InitTick+0x58>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	4619      	mov	r1, r3
 8005466:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800546a:	fbb3 f3f1 	udiv	r3, r3, r1
 800546e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005472:	4618      	mov	r0, r3
 8005474:	f000 f967 	bl	8005746 <HAL_SYSTICK_Config>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e00e      	b.n	80054a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b0f      	cmp	r3, #15
 8005486:	d80a      	bhi.n	800549e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005488:	2200      	movs	r2, #0
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	f04f 30ff 	mov.w	r0, #4294967295
 8005490:	f000 f92f 	bl	80056f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005494:	4a06      	ldr	r2, [pc, #24]	@ (80054b0 <HAL_InitTick+0x5c>)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	e000      	b.n	80054a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20000104 	.word	0x20000104
 80054ac:	20000198 	.word	0x20000198
 80054b0:	20000194 	.word	0x20000194

080054b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054b8:	4b06      	ldr	r3, [pc, #24]	@ (80054d4 <HAL_IncTick+0x20>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	461a      	mov	r2, r3
 80054be:	4b06      	ldr	r3, [pc, #24]	@ (80054d8 <HAL_IncTick+0x24>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4413      	add	r3, r2
 80054c4:	4a04      	ldr	r2, [pc, #16]	@ (80054d8 <HAL_IncTick+0x24>)
 80054c6:	6013      	str	r3, [r2, #0]
}
 80054c8:	bf00      	nop
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	20000198 	.word	0x20000198
 80054d8:	200026b8 	.word	0x200026b8

080054dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  return uwTick;
 80054e0:	4b03      	ldr	r3, [pc, #12]	@ (80054f0 <HAL_GetTick+0x14>)
 80054e2:	681b      	ldr	r3, [r3, #0]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	200026b8 	.word	0x200026b8

080054f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054fc:	f7ff ffee 	bl	80054dc <HAL_GetTick>
 8005500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550c:	d005      	beq.n	800551a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800550e:	4b0a      	ldr	r3, [pc, #40]	@ (8005538 <HAL_Delay+0x44>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800551a:	bf00      	nop
 800551c:	f7ff ffde 	bl	80054dc <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	429a      	cmp	r2, r3
 800552a:	d8f7      	bhi.n	800551c <HAL_Delay+0x28>
  {
  }
}
 800552c:	bf00      	nop
 800552e:	bf00      	nop
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000198 	.word	0x20000198

0800553c <__NVIC_SetPriorityGrouping>:
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800554c:	4b0c      	ldr	r3, [pc, #48]	@ (8005580 <__NVIC_SetPriorityGrouping+0x44>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005558:	4013      	ands	r3, r2
 800555a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005564:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800556c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800556e:	4a04      	ldr	r2, [pc, #16]	@ (8005580 <__NVIC_SetPriorityGrouping+0x44>)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	60d3      	str	r3, [r2, #12]
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	e000ed00 	.word	0xe000ed00

08005584 <__NVIC_GetPriorityGrouping>:
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005588:	4b04      	ldr	r3, [pc, #16]	@ (800559c <__NVIC_GetPriorityGrouping+0x18>)
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	0a1b      	lsrs	r3, r3, #8
 800558e:	f003 0307 	and.w	r3, r3, #7
}
 8005592:	4618      	mov	r0, r3
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	e000ed00 	.word	0xe000ed00

080055a0 <__NVIC_EnableIRQ>:
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	4603      	mov	r3, r0
 80055a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	db0b      	blt.n	80055ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	f003 021f 	and.w	r2, r3, #31
 80055b8:	4907      	ldr	r1, [pc, #28]	@ (80055d8 <__NVIC_EnableIRQ+0x38>)
 80055ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	2001      	movs	r0, #1
 80055c2:	fa00 f202 	lsl.w	r2, r0, r2
 80055c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	e000e100 	.word	0xe000e100

080055dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	6039      	str	r1, [r7, #0]
 80055e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	db0a      	blt.n	8005606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	490c      	ldr	r1, [pc, #48]	@ (8005628 <__NVIC_SetPriority+0x4c>)
 80055f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055fa:	0112      	lsls	r2, r2, #4
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	440b      	add	r3, r1
 8005600:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005604:	e00a      	b.n	800561c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	b2da      	uxtb	r2, r3
 800560a:	4908      	ldr	r1, [pc, #32]	@ (800562c <__NVIC_SetPriority+0x50>)
 800560c:	79fb      	ldrb	r3, [r7, #7]
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	3b04      	subs	r3, #4
 8005614:	0112      	lsls	r2, r2, #4
 8005616:	b2d2      	uxtb	r2, r2
 8005618:	440b      	add	r3, r1
 800561a:	761a      	strb	r2, [r3, #24]
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	e000e100 	.word	0xe000e100
 800562c:	e000ed00 	.word	0xe000ed00

08005630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005630:	b480      	push	{r7}
 8005632:	b089      	sub	sp, #36	@ 0x24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	f1c3 0307 	rsb	r3, r3, #7
 800564a:	2b04      	cmp	r3, #4
 800564c:	bf28      	it	cs
 800564e:	2304      	movcs	r3, #4
 8005650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	3304      	adds	r3, #4
 8005656:	2b06      	cmp	r3, #6
 8005658:	d902      	bls.n	8005660 <NVIC_EncodePriority+0x30>
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	3b03      	subs	r3, #3
 800565e:	e000      	b.n	8005662 <NVIC_EncodePriority+0x32>
 8005660:	2300      	movs	r3, #0
 8005662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005664:	f04f 32ff 	mov.w	r2, #4294967295
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	fa02 f303 	lsl.w	r3, r2, r3
 800566e:	43da      	mvns	r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	401a      	ands	r2, r3
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005678:	f04f 31ff 	mov.w	r1, #4294967295
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	fa01 f303 	lsl.w	r3, r1, r3
 8005682:	43d9      	mvns	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005688:	4313      	orrs	r3, r2
         );
}
 800568a:	4618      	mov	r0, r3
 800568c:	3724      	adds	r7, #36	@ 0x24
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
	...

08005698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056a8:	d301      	bcc.n	80056ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056aa:	2301      	movs	r3, #1
 80056ac:	e00f      	b.n	80056ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056ae:	4a0a      	ldr	r2, [pc, #40]	@ (80056d8 <SysTick_Config+0x40>)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056b6:	210f      	movs	r1, #15
 80056b8:	f04f 30ff 	mov.w	r0, #4294967295
 80056bc:	f7ff ff8e 	bl	80055dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056c0:	4b05      	ldr	r3, [pc, #20]	@ (80056d8 <SysTick_Config+0x40>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056c6:	4b04      	ldr	r3, [pc, #16]	@ (80056d8 <SysTick_Config+0x40>)
 80056c8:	2207      	movs	r2, #7
 80056ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	e000e010 	.word	0xe000e010

080056dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff ff29 	bl	800553c <__NVIC_SetPriorityGrouping>
}
 80056ea:	bf00      	nop
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b086      	sub	sp, #24
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	4603      	mov	r3, r0
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	607a      	str	r2, [r7, #4]
 80056fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005700:	2300      	movs	r3, #0
 8005702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005704:	f7ff ff3e 	bl	8005584 <__NVIC_GetPriorityGrouping>
 8005708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	6978      	ldr	r0, [r7, #20]
 8005710:	f7ff ff8e 	bl	8005630 <NVIC_EncodePriority>
 8005714:	4602      	mov	r2, r0
 8005716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800571a:	4611      	mov	r1, r2
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff ff5d 	bl	80055dc <__NVIC_SetPriority>
}
 8005722:	bf00      	nop
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b082      	sub	sp, #8
 800572e:	af00      	add	r7, sp, #0
 8005730:	4603      	mov	r3, r0
 8005732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff ff31 	bl	80055a0 <__NVIC_EnableIRQ>
}
 800573e:	bf00      	nop
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff ffa2 	bl	8005698 <SysTick_Config>
 8005754:	4603      	mov	r3, r0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800576c:	f7ff feb6 	bl	80054dc <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e099      	b.n	80058b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0201 	bic.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800579c:	e00f      	b.n	80057be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800579e:	f7ff fe9d 	bl	80054dc <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b05      	cmp	r3, #5
 80057aa:	d908      	bls.n	80057be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2220      	movs	r2, #32
 80057b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2203      	movs	r2, #3
 80057b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e078      	b.n	80058b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e8      	bne.n	800579e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	4b38      	ldr	r3, [pc, #224]	@ (80058b8 <HAL_DMA_Init+0x158>)
 80057d8:	4013      	ands	r3, r2
 80057da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005802:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	4313      	orrs	r3, r2
 800580e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005814:	2b04      	cmp	r3, #4
 8005816:	d107      	bne.n	8005828 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005820:	4313      	orrs	r3, r2
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f023 0307 	bic.w	r3, r3, #7
 800583e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584e:	2b04      	cmp	r3, #4
 8005850:	d117      	bne.n	8005882 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4313      	orrs	r3, r2
 800585a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00e      	beq.n	8005882 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f8bd 	bl	80059e4 <DMA_CheckFifoParam>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d008      	beq.n	8005882 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2240      	movs	r2, #64	@ 0x40
 8005874:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800587e:	2301      	movs	r3, #1
 8005880:	e016      	b.n	80058b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f874 	bl	8005978 <DMA_CalcBaseAndBitshift>
 8005890:	4603      	mov	r3, r0
 8005892:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005898:	223f      	movs	r2, #63	@ 0x3f
 800589a:	409a      	lsls	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	f010803f 	.word	0xf010803f

080058bc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e050      	b.n	8005970 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d101      	bne.n	80058de <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80058da:	2302      	movs	r3, #2
 80058dc:	e048      	b.n	8005970 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0201 	bic.w	r2, r2, #1
 80058ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2200      	movs	r2, #0
 80058f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2200      	movs	r2, #0
 80058fc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2200      	movs	r2, #0
 8005904:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2200      	movs	r2, #0
 800590c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2200      	movs	r2, #0
 8005914:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2221      	movs	r2, #33	@ 0x21
 800591c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f82a 	bl	8005978 <DMA_CalcBaseAndBitshift>
 8005924:	4603      	mov	r3, r0
 8005926:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005950:	223f      	movs	r2, #63	@ 0x3f
 8005952:	409a      	lsls	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	b2db      	uxtb	r3, r3
 8005986:	3b10      	subs	r3, #16
 8005988:	4a14      	ldr	r2, [pc, #80]	@ (80059dc <DMA_CalcBaseAndBitshift+0x64>)
 800598a:	fba2 2303 	umull	r2, r3, r2, r3
 800598e:	091b      	lsrs	r3, r3, #4
 8005990:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005992:	4a13      	ldr	r2, [pc, #76]	@ (80059e0 <DMA_CalcBaseAndBitshift+0x68>)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d909      	bls.n	80059ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80059ae:	f023 0303 	bic.w	r3, r3, #3
 80059b2:	1d1a      	adds	r2, r3, #4
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80059b8:	e007      	b.n	80059ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80059c2:	f023 0303 	bic.w	r3, r3, #3
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	aaaaaaab 	.word	0xaaaaaaab
 80059e0:	08010ad0 	.word	0x08010ad0

080059e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d11f      	bne.n	8005a3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	d856      	bhi.n	8005ab2 <DMA_CheckFifoParam+0xce>
 8005a04:	a201      	add	r2, pc, #4	@ (adr r2, 8005a0c <DMA_CheckFifoParam+0x28>)
 8005a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0a:	bf00      	nop
 8005a0c:	08005a1d 	.word	0x08005a1d
 8005a10:	08005a2f 	.word	0x08005a2f
 8005a14:	08005a1d 	.word	0x08005a1d
 8005a18:	08005ab3 	.word	0x08005ab3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d046      	beq.n	8005ab6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a2c:	e043      	b.n	8005ab6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a32:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005a36:	d140      	bne.n	8005aba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a3c:	e03d      	b.n	8005aba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a46:	d121      	bne.n	8005a8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b03      	cmp	r3, #3
 8005a4c:	d837      	bhi.n	8005abe <DMA_CheckFifoParam+0xda>
 8005a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a54 <DMA_CheckFifoParam+0x70>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005a65 	.word	0x08005a65
 8005a58:	08005a6b 	.word	0x08005a6b
 8005a5c:	08005a65 	.word	0x08005a65
 8005a60:	08005a7d 	.word	0x08005a7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	73fb      	strb	r3, [r7, #15]
      break;
 8005a68:	e030      	b.n	8005acc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d025      	beq.n	8005ac2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a7a:	e022      	b.n	8005ac2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a80:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005a84:	d11f      	bne.n	8005ac6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005a8a:	e01c      	b.n	8005ac6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d903      	bls.n	8005a9a <DMA_CheckFifoParam+0xb6>
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b03      	cmp	r3, #3
 8005a96:	d003      	beq.n	8005aa0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a98:	e018      	b.n	8005acc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8005a9e:	e015      	b.n	8005acc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00e      	beq.n	8005aca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	73fb      	strb	r3, [r7, #15]
      break;
 8005ab0:	e00b      	b.n	8005aca <DMA_CheckFifoParam+0xe6>
      break;
 8005ab2:	bf00      	nop
 8005ab4:	e00a      	b.n	8005acc <DMA_CheckFifoParam+0xe8>
      break;
 8005ab6:	bf00      	nop
 8005ab8:	e008      	b.n	8005acc <DMA_CheckFifoParam+0xe8>
      break;
 8005aba:	bf00      	nop
 8005abc:	e006      	b.n	8005acc <DMA_CheckFifoParam+0xe8>
      break;
 8005abe:	bf00      	nop
 8005ac0:	e004      	b.n	8005acc <DMA_CheckFifoParam+0xe8>
      break;
 8005ac2:	bf00      	nop
 8005ac4:	e002      	b.n	8005acc <DMA_CheckFifoParam+0xe8>
      break;   
 8005ac6:	bf00      	nop
 8005ac8:	e000      	b.n	8005acc <DMA_CheckFifoParam+0xe8>
      break;
 8005aca:	bf00      	nop
    }
  } 
  
  return status; 
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop

08005adc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e03b      	b.n	8005b66 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f833 	bl	8005b6e <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b2c:	f023 0107 	bic.w	r1, r3, #7
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b42:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005b46:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	68d1      	ldr	r1, [r2, #12]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6812      	ldr	r2, [r2, #0]
 8005b52:	430b      	orrs	r3, r1
 8005b54:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b086      	sub	sp, #24
 8005b86:	af02      	add	r7, sp, #8
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	607a      	str	r2, [r7, #4]
 8005b8e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d101      	bne.n	8005b9e <HAL_DMA2D_Start+0x1c>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e018      	b.n	8005bd0 <HAL_DMA2D_Start+0x4e>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2202      	movs	r2, #2
 8005baa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	68b9      	ldr	r1, [r7, #8]
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 f989 	bl	8005ed0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0201 	orr.w	r2, r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d056      	beq.n	8005ca2 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8005bf4:	f7ff fc72 	bl	80054dc <HAL_GetTick>
 8005bf8:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005bfa:	e04b      	b.n	8005c94 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d023      	beq.n	8005c56 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f003 0320 	and.w	r3, r3, #32
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1c:	f043 0202 	orr.w	r2, r3, #2
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d005      	beq.n	8005c3a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c32:	f043 0201 	orr.w	r2, r3, #1
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2221      	movs	r2, #33	@ 0x21
 8005c40:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2204      	movs	r2, #4
 8005c46:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e0a5      	b.n	8005da2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5c:	d01a      	beq.n	8005c94 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005c5e:	f7ff fc3d 	bl	80054dc <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d302      	bcc.n	8005c74 <HAL_DMA2D_PollForTransfer+0x9c>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10f      	bne.n	8005c94 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c78:	f043 0220 	orr.w	r2, r3, #32
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2203      	movs	r2, #3
 8005c84:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e086      	b.n	8005da2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0ac      	beq.n	8005bfc <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	f003 0320 	and.w	r3, r3, #32
 8005cac:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d061      	beq.n	8005d88 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cc4:	f7ff fc0a 	bl	80054dc <HAL_GetTick>
 8005cc8:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005cca:	e056      	b.n	8005d7a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d02e      	beq.n	8005d3c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f003 0308 	and.w	r3, r3, #8
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d005      	beq.n	8005cf4 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cec:	f043 0204 	orr.w	r2, r3, #4
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d005      	beq.n	8005d0a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d02:	f043 0202 	orr.w	r2, r3, #2
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d005      	beq.n	8005d20 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d18:	f043 0201 	orr.w	r2, r3, #1
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2229      	movs	r2, #41	@ 0x29
 8005d26:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2204      	movs	r2, #4
 8005d2c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e032      	b.n	8005da2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d42:	d01a      	beq.n	8005d7a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005d44:	f7ff fbca 	bl	80054dc <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d302      	bcc.n	8005d5a <HAL_DMA2D_PollForTransfer+0x182>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10f      	bne.n	8005d7a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d5e:	f043 0220 	orr.w	r2, r3, #32
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2203      	movs	r2, #3
 8005d6a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e013      	b.n	8005da2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0a1      	beq.n	8005ccc <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2212      	movs	r2, #18
 8005d8e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_DMA2D_ConfigLayer+0x20>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e079      	b.n	8005ec0 <HAL_DMA2D_ConfigLayer+0x114>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	3318      	adds	r3, #24
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	4413      	add	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	041b      	lsls	r3, r3, #16
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005df6:	4b35      	ldr	r3, [pc, #212]	@ (8005ecc <HAL_DMA2D_ConfigLayer+0x120>)
 8005df8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b0a      	cmp	r3, #10
 8005e00:	d003      	beq.n	8005e0a <HAL_DMA2D_ConfigLayer+0x5e>
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	2b09      	cmp	r3, #9
 8005e08:	d107      	bne.n	8005e1a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	e005      	b.n	8005e26 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	061b      	lsls	r3, r3, #24
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d120      	bne.n	8005e6e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	43db      	mvns	r3, r3
 8005e36:	ea02 0103 	and.w	r1, r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	6812      	ldr	r2, [r2, #0]
 8005e4c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	2b0a      	cmp	r3, #10
 8005e54:	d003      	beq.n	8005e5e <HAL_DMA2D_ConfigLayer+0xb2>
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2b09      	cmp	r3, #9
 8005e5c:	d127      	bne.n	8005eae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005e6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e6c:	e01f      	b.n	8005eae <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69da      	ldr	r2, [r3, #28]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	43db      	mvns	r3, r3
 8005e78:	ea02 0103 	and.w	r1, r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	6812      	ldr	r2, [r2, #0]
 8005e8e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2b0a      	cmp	r3, #10
 8005e96:	d003      	beq.n	8005ea0 <HAL_DMA2D_ConfigLayer+0xf4>
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b09      	cmp	r3, #9
 8005e9e:	d106      	bne.n	8005eae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005eac:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	ff03000f 	.word	0xff03000f

08005ed0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b08b      	sub	sp, #44	@ 0x2c
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee4:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	041a      	lsls	r2, r3, #16
 8005eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f08:	d174      	bne.n	8005ff4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005f10:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f18:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005f20:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d108      	bne.n	8005f42 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	431a      	orrs	r2, r3
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f40:	e053      	b.n	8005fea <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d106      	bne.n	8005f58 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f56:	e048      	b.n	8005fea <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d111      	bne.n	8005f84 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	0cdb      	lsrs	r3, r3, #19
 8005f64:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	0a9b      	lsrs	r3, r3, #10
 8005f6a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	08db      	lsrs	r3, r3, #3
 8005f70:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	02db      	lsls	r3, r3, #11
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f82:	e032      	b.n	8005fea <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d117      	bne.n	8005fbc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	0fdb      	lsrs	r3, r3, #31
 8005f90:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	0cdb      	lsrs	r3, r3, #19
 8005f96:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	0adb      	lsrs	r3, r3, #11
 8005f9c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	08db      	lsrs	r3, r3, #3
 8005fa2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	029b      	lsls	r3, r3, #10
 8005fac:	431a      	orrs	r2, r3
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	03db      	lsls	r3, r3, #15
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fba:	e016      	b.n	8005fea <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	0f1b      	lsrs	r3, r3, #28
 8005fc0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	0d1b      	lsrs	r3, r3, #20
 8005fc6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	0b1b      	lsrs	r3, r3, #12
 8005fcc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	091b      	lsrs	r3, r3, #4
 8005fd2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	011a      	lsls	r2, r3, #4
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	021b      	lsls	r3, r3, #8
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	031b      	lsls	r3, r3, #12
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ff0:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005ff2:	e003      	b.n	8005ffc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	60da      	str	r2, [r3, #12]
}
 8005ffc:	bf00      	nop
 8005ffe:	372c      	adds	r7, #44	@ 0x2c
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006008:	b480      	push	{r7}
 800600a:	b089      	sub	sp, #36	@ 0x24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006012:	2300      	movs	r3, #0
 8006014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006016:	2300      	movs	r3, #0
 8006018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800601a:	2300      	movs	r3, #0
 800601c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800601e:	2300      	movs	r3, #0
 8006020:	61fb      	str	r3, [r7, #28]
 8006022:	e177      	b.n	8006314 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006024:	2201      	movs	r2, #1
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	4013      	ands	r3, r2
 8006036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	429a      	cmp	r2, r3
 800603e:	f040 8166 	bne.w	800630e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d00b      	beq.n	8006062 <HAL_GPIO_Init+0x5a>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2b02      	cmp	r3, #2
 8006050:	d007      	beq.n	8006062 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006056:	2b11      	cmp	r3, #17
 8006058:	d003      	beq.n	8006062 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2b12      	cmp	r3, #18
 8006060:	d130      	bne.n	80060c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	2203      	movs	r2, #3
 800606e:	fa02 f303 	lsl.w	r3, r2, r3
 8006072:	43db      	mvns	r3, r3
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	4013      	ands	r3, r2
 8006078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	fa02 f303 	lsl.w	r3, r2, r3
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	4313      	orrs	r3, r2
 800608a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006098:	2201      	movs	r2, #1
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	fa02 f303 	lsl.w	r3, r2, r3
 80060a0:	43db      	mvns	r3, r3
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	4013      	ands	r3, r2
 80060a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	091b      	lsrs	r3, r3, #4
 80060ae:	f003 0201 	and.w	r2, r3, #1
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	fa02 f303 	lsl.w	r3, r2, r3
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	2203      	movs	r2, #3
 80060d0:	fa02 f303 	lsl.w	r3, r2, r3
 80060d4:	43db      	mvns	r3, r3
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	4013      	ands	r3, r2
 80060da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	005b      	lsls	r3, r3, #1
 80060e4:	fa02 f303 	lsl.w	r3, r2, r3
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d003      	beq.n	8006104 <HAL_GPIO_Init+0xfc>
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2b12      	cmp	r3, #18
 8006102:	d123      	bne.n	800614c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	08da      	lsrs	r2, r3, #3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3208      	adds	r2, #8
 800610c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006110:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	f003 0307 	and.w	r3, r3, #7
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	220f      	movs	r2, #15
 800611c:	fa02 f303 	lsl.w	r3, r2, r3
 8006120:	43db      	mvns	r3, r3
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	4013      	ands	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	691a      	ldr	r2, [r3, #16]
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	f003 0307 	and.w	r3, r3, #7
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	fa02 f303 	lsl.w	r3, r2, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	4313      	orrs	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	08da      	lsrs	r2, r3, #3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3208      	adds	r2, #8
 8006146:	69b9      	ldr	r1, [r7, #24]
 8006148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	2203      	movs	r2, #3
 8006158:	fa02 f303 	lsl.w	r3, r2, r3
 800615c:	43db      	mvns	r3, r3
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	4013      	ands	r3, r2
 8006162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f003 0203 	and.w	r2, r3, #3
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	fa02 f303 	lsl.w	r3, r2, r3
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	4313      	orrs	r3, r2
 8006178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 80c0 	beq.w	800630e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800618e:	2300      	movs	r3, #0
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	4b66      	ldr	r3, [pc, #408]	@ (800632c <HAL_GPIO_Init+0x324>)
 8006194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006196:	4a65      	ldr	r2, [pc, #404]	@ (800632c <HAL_GPIO_Init+0x324>)
 8006198:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800619c:	6453      	str	r3, [r2, #68]	@ 0x44
 800619e:	4b63      	ldr	r3, [pc, #396]	@ (800632c <HAL_GPIO_Init+0x324>)
 80061a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061a6:	60fb      	str	r3, [r7, #12]
 80061a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061aa:	4a61      	ldr	r2, [pc, #388]	@ (8006330 <HAL_GPIO_Init+0x328>)
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	089b      	lsrs	r3, r3, #2
 80061b0:	3302      	adds	r3, #2
 80061b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	220f      	movs	r2, #15
 80061c2:	fa02 f303 	lsl.w	r3, r2, r3
 80061c6:	43db      	mvns	r3, r3
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	4013      	ands	r3, r2
 80061cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a58      	ldr	r2, [pc, #352]	@ (8006334 <HAL_GPIO_Init+0x32c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d037      	beq.n	8006246 <HAL_GPIO_Init+0x23e>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a57      	ldr	r2, [pc, #348]	@ (8006338 <HAL_GPIO_Init+0x330>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d031      	beq.n	8006242 <HAL_GPIO_Init+0x23a>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a56      	ldr	r2, [pc, #344]	@ (800633c <HAL_GPIO_Init+0x334>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d02b      	beq.n	800623e <HAL_GPIO_Init+0x236>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a55      	ldr	r2, [pc, #340]	@ (8006340 <HAL_GPIO_Init+0x338>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d025      	beq.n	800623a <HAL_GPIO_Init+0x232>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a54      	ldr	r2, [pc, #336]	@ (8006344 <HAL_GPIO_Init+0x33c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d01f      	beq.n	8006236 <HAL_GPIO_Init+0x22e>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a53      	ldr	r2, [pc, #332]	@ (8006348 <HAL_GPIO_Init+0x340>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d019      	beq.n	8006232 <HAL_GPIO_Init+0x22a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a52      	ldr	r2, [pc, #328]	@ (800634c <HAL_GPIO_Init+0x344>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d013      	beq.n	800622e <HAL_GPIO_Init+0x226>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a51      	ldr	r2, [pc, #324]	@ (8006350 <HAL_GPIO_Init+0x348>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d00d      	beq.n	800622a <HAL_GPIO_Init+0x222>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a50      	ldr	r2, [pc, #320]	@ (8006354 <HAL_GPIO_Init+0x34c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d007      	beq.n	8006226 <HAL_GPIO_Init+0x21e>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a4f      	ldr	r2, [pc, #316]	@ (8006358 <HAL_GPIO_Init+0x350>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d101      	bne.n	8006222 <HAL_GPIO_Init+0x21a>
 800621e:	2309      	movs	r3, #9
 8006220:	e012      	b.n	8006248 <HAL_GPIO_Init+0x240>
 8006222:	230a      	movs	r3, #10
 8006224:	e010      	b.n	8006248 <HAL_GPIO_Init+0x240>
 8006226:	2308      	movs	r3, #8
 8006228:	e00e      	b.n	8006248 <HAL_GPIO_Init+0x240>
 800622a:	2307      	movs	r3, #7
 800622c:	e00c      	b.n	8006248 <HAL_GPIO_Init+0x240>
 800622e:	2306      	movs	r3, #6
 8006230:	e00a      	b.n	8006248 <HAL_GPIO_Init+0x240>
 8006232:	2305      	movs	r3, #5
 8006234:	e008      	b.n	8006248 <HAL_GPIO_Init+0x240>
 8006236:	2304      	movs	r3, #4
 8006238:	e006      	b.n	8006248 <HAL_GPIO_Init+0x240>
 800623a:	2303      	movs	r3, #3
 800623c:	e004      	b.n	8006248 <HAL_GPIO_Init+0x240>
 800623e:	2302      	movs	r3, #2
 8006240:	e002      	b.n	8006248 <HAL_GPIO_Init+0x240>
 8006242:	2301      	movs	r3, #1
 8006244:	e000      	b.n	8006248 <HAL_GPIO_Init+0x240>
 8006246:	2300      	movs	r3, #0
 8006248:	69fa      	ldr	r2, [r7, #28]
 800624a:	f002 0203 	and.w	r2, r2, #3
 800624e:	0092      	lsls	r2, r2, #2
 8006250:	4093      	lsls	r3, r2
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	4313      	orrs	r3, r2
 8006256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006258:	4935      	ldr	r1, [pc, #212]	@ (8006330 <HAL_GPIO_Init+0x328>)
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	089b      	lsrs	r3, r3, #2
 800625e:	3302      	adds	r3, #2
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006266:	4b3d      	ldr	r3, [pc, #244]	@ (800635c <HAL_GPIO_Init+0x354>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	43db      	mvns	r3, r3
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	4013      	ands	r3, r2
 8006274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	4313      	orrs	r3, r2
 8006288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800628a:	4a34      	ldr	r2, [pc, #208]	@ (800635c <HAL_GPIO_Init+0x354>)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006290:	4b32      	ldr	r3, [pc, #200]	@ (800635c <HAL_GPIO_Init+0x354>)
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	43db      	mvns	r3, r3
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	4013      	ands	r3, r2
 800629e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062b4:	4a29      	ldr	r2, [pc, #164]	@ (800635c <HAL_GPIO_Init+0x354>)
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062ba:	4b28      	ldr	r3, [pc, #160]	@ (800635c <HAL_GPIO_Init+0x354>)
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	43db      	mvns	r3, r3
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	4013      	ands	r3, r2
 80062c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062de:	4a1f      	ldr	r2, [pc, #124]	@ (800635c <HAL_GPIO_Init+0x354>)
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062e4:	4b1d      	ldr	r3, [pc, #116]	@ (800635c <HAL_GPIO_Init+0x354>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	43db      	mvns	r3, r3
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	4013      	ands	r3, r2
 80062f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	4313      	orrs	r3, r2
 8006306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006308:	4a14      	ldr	r2, [pc, #80]	@ (800635c <HAL_GPIO_Init+0x354>)
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	3301      	adds	r3, #1
 8006312:	61fb      	str	r3, [r7, #28]
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	2b0f      	cmp	r3, #15
 8006318:	f67f ae84 	bls.w	8006024 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800631c:	bf00      	nop
 800631e:	bf00      	nop
 8006320:	3724      	adds	r7, #36	@ 0x24
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	40023800 	.word	0x40023800
 8006330:	40013800 	.word	0x40013800
 8006334:	40020000 	.word	0x40020000
 8006338:	40020400 	.word	0x40020400
 800633c:	40020800 	.word	0x40020800
 8006340:	40020c00 	.word	0x40020c00
 8006344:	40021000 	.word	0x40021000
 8006348:	40021400 	.word	0x40021400
 800634c:	40021800 	.word	0x40021800
 8006350:	40021c00 	.word	0x40021c00
 8006354:	40022000 	.word	0x40022000
 8006358:	40022400 	.word	0x40022400
 800635c:	40013c00 	.word	0x40013c00

08006360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	807b      	strh	r3, [r7, #2]
 800636c:	4613      	mov	r3, r2
 800636e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006370:	787b      	ldrb	r3, [r7, #1]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006376:	887a      	ldrh	r2, [r7, #2]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800637c:	e003      	b.n	8006386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800637e:	887b      	ldrh	r3, [r7, #2]
 8006380:	041a      	lsls	r2, r3, #16
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	619a      	str	r2, [r3, #24]
}
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	695a      	ldr	r2, [r3, #20]
 80063a2:	887b      	ldrh	r3, [r7, #2]
 80063a4:	401a      	ands	r2, r3
 80063a6:	887b      	ldrh	r3, [r7, #2]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d104      	bne.n	80063b6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063ac:	887b      	ldrh	r3, [r7, #2]
 80063ae:	041a      	lsls	r2, r3, #16
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80063b4:	e002      	b.n	80063bc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80063b6:	887a      	ldrh	r2, [r7, #2]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	619a      	str	r2, [r3, #24]
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e12b      	b.n	8006632 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f95d 	bl	80066ae <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2224      	movs	r2, #36	@ 0x24
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 0201 	bic.w	r2, r2, #1
 800640a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800641a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800642a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800642c:	f001 ff1a 	bl	8008264 <HAL_RCC_GetPCLK1Freq>
 8006430:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	4a81      	ldr	r2, [pc, #516]	@ (800663c <HAL_I2C_Init+0x274>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d807      	bhi.n	800644c <HAL_I2C_Init+0x84>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4a80      	ldr	r2, [pc, #512]	@ (8006640 <HAL_I2C_Init+0x278>)
 8006440:	4293      	cmp	r3, r2
 8006442:	bf94      	ite	ls
 8006444:	2301      	movls	r3, #1
 8006446:	2300      	movhi	r3, #0
 8006448:	b2db      	uxtb	r3, r3
 800644a:	e006      	b.n	800645a <HAL_I2C_Init+0x92>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4a7d      	ldr	r2, [pc, #500]	@ (8006644 <HAL_I2C_Init+0x27c>)
 8006450:	4293      	cmp	r3, r2
 8006452:	bf94      	ite	ls
 8006454:	2301      	movls	r3, #1
 8006456:	2300      	movhi	r3, #0
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e0e7      	b.n	8006632 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	4a78      	ldr	r2, [pc, #480]	@ (8006648 <HAL_I2C_Init+0x280>)
 8006466:	fba2 2303 	umull	r2, r3, r2, r3
 800646a:	0c9b      	lsrs	r3, r3, #18
 800646c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	430a      	orrs	r2, r1
 8006480:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	4a6a      	ldr	r2, [pc, #424]	@ (800663c <HAL_I2C_Init+0x274>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d802      	bhi.n	800649c <HAL_I2C_Init+0xd4>
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	3301      	adds	r3, #1
 800649a:	e009      	b.n	80064b0 <HAL_I2C_Init+0xe8>
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80064a2:	fb02 f303 	mul.w	r3, r2, r3
 80064a6:	4a69      	ldr	r2, [pc, #420]	@ (800664c <HAL_I2C_Init+0x284>)
 80064a8:	fba2 2303 	umull	r2, r3, r2, r3
 80064ac:	099b      	lsrs	r3, r3, #6
 80064ae:	3301      	adds	r3, #1
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	6812      	ldr	r2, [r2, #0]
 80064b4:	430b      	orrs	r3, r1
 80064b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80064c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	495c      	ldr	r1, [pc, #368]	@ (800663c <HAL_I2C_Init+0x274>)
 80064cc:	428b      	cmp	r3, r1
 80064ce:	d819      	bhi.n	8006504 <HAL_I2C_Init+0x13c>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	1e59      	subs	r1, r3, #1
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	fbb1 f3f3 	udiv	r3, r1, r3
 80064de:	1c59      	adds	r1, r3, #1
 80064e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80064e4:	400b      	ands	r3, r1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <HAL_I2C_Init+0x138>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	1e59      	subs	r1, r3, #1
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80064f8:	3301      	adds	r3, #1
 80064fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064fe:	e051      	b.n	80065a4 <HAL_I2C_Init+0x1dc>
 8006500:	2304      	movs	r3, #4
 8006502:	e04f      	b.n	80065a4 <HAL_I2C_Init+0x1dc>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d111      	bne.n	8006530 <HAL_I2C_Init+0x168>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	1e58      	subs	r0, r3, #1
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6859      	ldr	r1, [r3, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	440b      	add	r3, r1
 800651a:	fbb0 f3f3 	udiv	r3, r0, r3
 800651e:	3301      	adds	r3, #1
 8006520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006524:	2b00      	cmp	r3, #0
 8006526:	bf0c      	ite	eq
 8006528:	2301      	moveq	r3, #1
 800652a:	2300      	movne	r3, #0
 800652c:	b2db      	uxtb	r3, r3
 800652e:	e012      	b.n	8006556 <HAL_I2C_Init+0x18e>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	1e58      	subs	r0, r3, #1
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6859      	ldr	r1, [r3, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	440b      	add	r3, r1
 800653e:	0099      	lsls	r1, r3, #2
 8006540:	440b      	add	r3, r1
 8006542:	fbb0 f3f3 	udiv	r3, r0, r3
 8006546:	3301      	adds	r3, #1
 8006548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800654c:	2b00      	cmp	r3, #0
 800654e:	bf0c      	ite	eq
 8006550:	2301      	moveq	r3, #1
 8006552:	2300      	movne	r3, #0
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <HAL_I2C_Init+0x196>
 800655a:	2301      	movs	r3, #1
 800655c:	e022      	b.n	80065a4 <HAL_I2C_Init+0x1dc>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10e      	bne.n	8006584 <HAL_I2C_Init+0x1bc>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	1e58      	subs	r0, r3, #1
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6859      	ldr	r1, [r3, #4]
 800656e:	460b      	mov	r3, r1
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	440b      	add	r3, r1
 8006574:	fbb0 f3f3 	udiv	r3, r0, r3
 8006578:	3301      	adds	r3, #1
 800657a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800657e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006582:	e00f      	b.n	80065a4 <HAL_I2C_Init+0x1dc>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	1e58      	subs	r0, r3, #1
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6859      	ldr	r1, [r3, #4]
 800658c:	460b      	mov	r3, r1
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	440b      	add	r3, r1
 8006592:	0099      	lsls	r1, r3, #2
 8006594:	440b      	add	r3, r1
 8006596:	fbb0 f3f3 	udiv	r3, r0, r3
 800659a:	3301      	adds	r3, #1
 800659c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065a4:	6879      	ldr	r1, [r7, #4]
 80065a6:	6809      	ldr	r1, [r1, #0]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	69da      	ldr	r2, [r3, #28]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80065d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	6911      	ldr	r1, [r2, #16]
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	68d2      	ldr	r2, [r2, #12]
 80065de:	4311      	orrs	r1, r2
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6812      	ldr	r2, [r2, #0]
 80065e4:	430b      	orrs	r3, r1
 80065e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	695a      	ldr	r2, [r3, #20]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0201 	orr.w	r2, r2, #1
 8006612:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2220      	movs	r2, #32
 800661e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	000186a0 	.word	0x000186a0
 8006640:	001e847f 	.word	0x001e847f
 8006644:	003d08ff 	.word	0x003d08ff
 8006648:	431bde83 	.word	0x431bde83
 800664c:	10624dd3 	.word	0x10624dd3

08006650 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e021      	b.n	80066a6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2224      	movs	r2, #36	@ 0x24
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0201 	bic.w	r2, r2, #1
 8006678:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f821 	bl	80066c2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80066ca:	bf00      	nop
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
	...

080066d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af02      	add	r7, sp, #8
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	4608      	mov	r0, r1
 80066e2:	4611      	mov	r1, r2
 80066e4:	461a      	mov	r2, r3
 80066e6:	4603      	mov	r3, r0
 80066e8:	817b      	strh	r3, [r7, #10]
 80066ea:	460b      	mov	r3, r1
 80066ec:	813b      	strh	r3, [r7, #8]
 80066ee:	4613      	mov	r3, r2
 80066f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066f2:	f7fe fef3 	bl	80054dc <HAL_GetTick>
 80066f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b20      	cmp	r3, #32
 8006702:	f040 80d9 	bne.w	80068b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	2319      	movs	r3, #25
 800670c:	2201      	movs	r2, #1
 800670e:	496d      	ldr	r1, [pc, #436]	@ (80068c4 <HAL_I2C_Mem_Write+0x1ec>)
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f000 fc89 	bl	8007028 <I2C_WaitOnFlagUntilTimeout>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800671c:	2302      	movs	r3, #2
 800671e:	e0cc      	b.n	80068ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006726:	2b01      	cmp	r3, #1
 8006728:	d101      	bne.n	800672e <HAL_I2C_Mem_Write+0x56>
 800672a:	2302      	movs	r3, #2
 800672c:	e0c5      	b.n	80068ba <HAL_I2C_Mem_Write+0x1e2>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b01      	cmp	r3, #1
 8006742:	d007      	beq.n	8006754 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0201 	orr.w	r2, r2, #1
 8006752:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006762:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2221      	movs	r2, #33	@ 0x21
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2240      	movs	r2, #64	@ 0x40
 8006770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6a3a      	ldr	r2, [r7, #32]
 800677e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006784:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800678a:	b29a      	uxth	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4a4d      	ldr	r2, [pc, #308]	@ (80068c8 <HAL_I2C_Mem_Write+0x1f0>)
 8006794:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006796:	88f8      	ldrh	r0, [r7, #6]
 8006798:	893a      	ldrh	r2, [r7, #8]
 800679a:	8979      	ldrh	r1, [r7, #10]
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	9301      	str	r3, [sp, #4]
 80067a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	4603      	mov	r3, r0
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 fac4 	bl	8006d34 <I2C_RequestMemoryWrite>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d052      	beq.n	8006858 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e081      	b.n	80068ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 fd0a 	bl	80071d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00d      	beq.n	80067e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	d107      	bne.n	80067de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e06b      	b.n	80068ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e6:	781a      	ldrb	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006808:	b29b      	uxth	r3, r3
 800680a:	3b01      	subs	r3, #1
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b04      	cmp	r3, #4
 800681e:	d11b      	bne.n	8006858 <HAL_I2C_Mem_Write+0x180>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006824:	2b00      	cmp	r3, #0
 8006826:	d017      	beq.n	8006858 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682c:	781a      	ldrb	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006842:	3b01      	subs	r3, #1
 8006844:	b29a      	uxth	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800684e:	b29b      	uxth	r3, r3
 8006850:	3b01      	subs	r3, #1
 8006852:	b29a      	uxth	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1aa      	bne.n	80067b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 fcf6 	bl	8007256 <I2C_WaitOnBTFFlagUntilTimeout>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00d      	beq.n	800688c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006874:	2b04      	cmp	r3, #4
 8006876:	d107      	bne.n	8006888 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006886:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e016      	b.n	80068ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800689a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2220      	movs	r2, #32
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	e000      	b.n	80068ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80068b8:	2302      	movs	r3, #2
  }
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	00100002 	.word	0x00100002
 80068c8:	ffff0000 	.word	0xffff0000

080068cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08c      	sub	sp, #48	@ 0x30
 80068d0:	af02      	add	r7, sp, #8
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	4608      	mov	r0, r1
 80068d6:	4611      	mov	r1, r2
 80068d8:	461a      	mov	r2, r3
 80068da:	4603      	mov	r3, r0
 80068dc:	817b      	strh	r3, [r7, #10]
 80068de:	460b      	mov	r3, r1
 80068e0:	813b      	strh	r3, [r7, #8]
 80068e2:	4613      	mov	r3, r2
 80068e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068e6:	f7fe fdf9 	bl	80054dc <HAL_GetTick>
 80068ea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b20      	cmp	r3, #32
 80068f6:	f040 8208 	bne.w	8006d0a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	2319      	movs	r3, #25
 8006900:	2201      	movs	r2, #1
 8006902:	497b      	ldr	r1, [pc, #492]	@ (8006af0 <HAL_I2C_Mem_Read+0x224>)
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 fb8f 	bl	8007028 <I2C_WaitOnFlagUntilTimeout>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006910:	2302      	movs	r3, #2
 8006912:	e1fb      	b.n	8006d0c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800691a:	2b01      	cmp	r3, #1
 800691c:	d101      	bne.n	8006922 <HAL_I2C_Mem_Read+0x56>
 800691e:	2302      	movs	r3, #2
 8006920:	e1f4      	b.n	8006d0c <HAL_I2C_Mem_Read+0x440>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b01      	cmp	r3, #1
 8006936:	d007      	beq.n	8006948 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 0201 	orr.w	r2, r2, #1
 8006946:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006956:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2222      	movs	r2, #34	@ 0x22
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2240      	movs	r2, #64	@ 0x40
 8006964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006972:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006978:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800697e:	b29a      	uxth	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4a5b      	ldr	r2, [pc, #364]	@ (8006af4 <HAL_I2C_Mem_Read+0x228>)
 8006988:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800698a:	88f8      	ldrh	r0, [r7, #6]
 800698c:	893a      	ldrh	r2, [r7, #8]
 800698e:	8979      	ldrh	r1, [r7, #10]
 8006990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006992:	9301      	str	r3, [sp, #4]
 8006994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	4603      	mov	r3, r0
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 fa5e 	bl	8006e5c <I2C_RequestMemoryRead>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e1b0      	b.n	8006d0c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d113      	bne.n	80069da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069b2:	2300      	movs	r3, #0
 80069b4:	623b      	str	r3, [r7, #32]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	695b      	ldr	r3, [r3, #20]
 80069bc:	623b      	str	r3, [r7, #32]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	623b      	str	r3, [r7, #32]
 80069c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069d6:	601a      	str	r2, [r3, #0]
 80069d8:	e184      	b.n	8006ce4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d11b      	bne.n	8006a1a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069f2:	2300      	movs	r3, #0
 80069f4:	61fb      	str	r3, [r7, #28]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	61fb      	str	r3, [r7, #28]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	61fb      	str	r3, [r7, #28]
 8006a06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	e164      	b.n	8006ce4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d11b      	bne.n	8006a5a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a42:	2300      	movs	r3, #0
 8006a44:	61bb      	str	r3, [r7, #24]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	61bb      	str	r3, [r7, #24]
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	e144      	b.n	8006ce4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	617b      	str	r3, [r7, #20]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	617b      	str	r3, [r7, #20]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	617b      	str	r3, [r7, #20]
 8006a6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006a70:	e138      	b.n	8006ce4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	f200 80f1 	bhi.w	8006c5e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d123      	bne.n	8006acc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a86:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 fc25 	bl	80072d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e139      	b.n	8006d0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	691a      	ldr	r2, [r3, #16]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006aca:	e10b      	b.n	8006ce4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d14e      	bne.n	8006b72 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ada:	2200      	movs	r2, #0
 8006adc:	4906      	ldr	r1, [pc, #24]	@ (8006af8 <HAL_I2C_Mem_Read+0x22c>)
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 faa2 	bl	8007028 <I2C_WaitOnFlagUntilTimeout>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d008      	beq.n	8006afc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e10e      	b.n	8006d0c <HAL_I2C_Mem_Read+0x440>
 8006aee:	bf00      	nop
 8006af0:	00100002 	.word	0x00100002
 8006af4:	ffff0000 	.word	0xffff0000
 8006af8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691a      	ldr	r2, [r3, #16]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	3b01      	subs	r3, #1
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b48:	b2d2      	uxtb	r2, r2
 8006b4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006b70:	e0b8      	b.n	8006ce4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b78:	2200      	movs	r2, #0
 8006b7a:	4966      	ldr	r1, [pc, #408]	@ (8006d14 <HAL_I2C_Mem_Read+0x448>)
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 fa53 	bl	8007028 <I2C_WaitOnFlagUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e0bf      	b.n	8006d0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	691a      	ldr	r2, [r3, #16]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	494f      	ldr	r1, [pc, #316]	@ (8006d14 <HAL_I2C_Mem_Read+0x448>)
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 fa25 	bl	8007028 <I2C_WaitOnFlagUntilTimeout>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e091      	b.n	8006d0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	691a      	ldr	r2, [r3, #16]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c02:	b2d2      	uxtb	r2, r2
 8006c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0a:	1c5a      	adds	r2, r3, #1
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	3b01      	subs	r3, #1
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	691a      	ldr	r2, [r3, #16]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c34:	b2d2      	uxtb	r2, r2
 8006c36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c46:	3b01      	subs	r3, #1
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	3b01      	subs	r3, #1
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006c5c:	e042      	b.n	8006ce4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c60:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f000 fb38 	bl	80072d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e04c      	b.n	8006d0c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	691a      	ldr	r2, [r3, #16]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7c:	b2d2      	uxtb	r2, r2
 8006c7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c84:	1c5a      	adds	r2, r3, #1
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	f003 0304 	and.w	r3, r3, #4
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	d118      	bne.n	8006ce4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	691a      	ldr	r2, [r3, #16]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cbc:	b2d2      	uxtb	r2, r2
 8006cbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f47f aec2 	bne.w	8006a72 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	e000      	b.n	8006d0c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006d0a:	2302      	movs	r3, #2
  }
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3728      	adds	r7, #40	@ 0x28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	00010004 	.word	0x00010004

08006d18 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d26:	b2db      	uxtb	r3, r3
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b088      	sub	sp, #32
 8006d38:	af02      	add	r7, sp, #8
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	4608      	mov	r0, r1
 8006d3e:	4611      	mov	r1, r2
 8006d40:	461a      	mov	r2, r3
 8006d42:	4603      	mov	r3, r0
 8006d44:	817b      	strh	r3, [r7, #10]
 8006d46:	460b      	mov	r3, r1
 8006d48:	813b      	strh	r3, [r7, #8]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	6a3b      	ldr	r3, [r7, #32]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 f95c 	bl	8007028 <I2C_WaitOnFlagUntilTimeout>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00c      	beq.n	8006d90 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e05f      	b.n	8006e50 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d90:	897b      	ldrh	r3, [r7, #10]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	461a      	mov	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006d9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da2:	6a3a      	ldr	r2, [r7, #32]
 8006da4:	492c      	ldr	r1, [pc, #176]	@ (8006e58 <I2C_RequestMemoryWrite+0x124>)
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 f995 	bl	80070d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e04c      	b.n	8006e50 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006db6:	2300      	movs	r3, #0
 8006db8:	617b      	str	r3, [r7, #20]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	617b      	str	r3, [r7, #20]
 8006dca:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dce:	6a39      	ldr	r1, [r7, #32]
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 f9ff 	bl	80071d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00d      	beq.n	8006df8 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de0:	2b04      	cmp	r3, #4
 8006de2:	d107      	bne.n	8006df4 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006df2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e02b      	b.n	8006e50 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006df8:	88fb      	ldrh	r3, [r7, #6]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d105      	bne.n	8006e0a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006dfe:	893b      	ldrh	r3, [r7, #8]
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	611a      	str	r2, [r3, #16]
 8006e08:	e021      	b.n	8006e4e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e0a:	893b      	ldrh	r3, [r7, #8]
 8006e0c:	0a1b      	lsrs	r3, r3, #8
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e1a:	6a39      	ldr	r1, [r7, #32]
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 f9d9 	bl	80071d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00d      	beq.n	8006e44 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2c:	2b04      	cmp	r3, #4
 8006e2e:	d107      	bne.n	8006e40 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e005      	b.n	8006e50 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e44:	893b      	ldrh	r3, [r7, #8]
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	00010002 	.word	0x00010002

08006e5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b088      	sub	sp, #32
 8006e60:	af02      	add	r7, sp, #8
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	4608      	mov	r0, r1
 8006e66:	4611      	mov	r1, r2
 8006e68:	461a      	mov	r2, r3
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	817b      	strh	r3, [r7, #10]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	813b      	strh	r3, [r7, #8]
 8006e72:	4613      	mov	r3, r2
 8006e74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006e84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 f8c0 	bl	8007028 <I2C_WaitOnFlagUntilTimeout>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00c      	beq.n	8006ec8 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ec2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e0a9      	b.n	800701c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ec8:	897b      	ldrh	r3, [r7, #10]
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	461a      	mov	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ed6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	6a3a      	ldr	r2, [r7, #32]
 8006edc:	4951      	ldr	r1, [pc, #324]	@ (8007024 <I2C_RequestMemoryRead+0x1c8>)
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f000 f8f9 	bl	80070d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e096      	b.n	800701c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eee:	2300      	movs	r3, #0
 8006ef0:	617b      	str	r3, [r7, #20]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	617b      	str	r3, [r7, #20]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f06:	6a39      	ldr	r1, [r7, #32]
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 f963 	bl	80071d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00d      	beq.n	8006f30 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f18:	2b04      	cmp	r3, #4
 8006f1a:	d107      	bne.n	8006f2c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e075      	b.n	800701c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f30:	88fb      	ldrh	r3, [r7, #6]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d105      	bne.n	8006f42 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f36:	893b      	ldrh	r3, [r7, #8]
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	611a      	str	r2, [r3, #16]
 8006f40:	e021      	b.n	8006f86 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f42:	893b      	ldrh	r3, [r7, #8]
 8006f44:	0a1b      	lsrs	r3, r3, #8
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f52:	6a39      	ldr	r1, [r7, #32]
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 f93d 	bl	80071d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00d      	beq.n	8006f7c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d107      	bne.n	8006f78 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e04f      	b.n	800701c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f7c:	893b      	ldrh	r3, [r7, #8]
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f88:	6a39      	ldr	r1, [r7, #32]
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 f922 	bl	80071d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00d      	beq.n	8006fb2 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f9a:	2b04      	cmp	r3, #4
 8006f9c:	d107      	bne.n	8006fae <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e034      	b.n	800701c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 f82a 	bl	8007028 <I2C_WaitOnFlagUntilTimeout>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00c      	beq.n	8006ff4 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e013      	b.n	800701c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ff4:	897b      	ldrh	r3, [r7, #10]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	f043 0301 	orr.w	r3, r3, #1
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007006:	6a3a      	ldr	r2, [r7, #32]
 8007008:	4906      	ldr	r1, [pc, #24]	@ (8007024 <I2C_RequestMemoryRead+0x1c8>)
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f000 f863 	bl	80070d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e000      	b.n	800701c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3718      	adds	r7, #24
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	00010002 	.word	0x00010002

08007028 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	603b      	str	r3, [r7, #0]
 8007034:	4613      	mov	r3, r2
 8007036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007038:	e025      	b.n	8007086 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007040:	d021      	beq.n	8007086 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007042:	f7fe fa4b 	bl	80054dc <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	429a      	cmp	r2, r3
 8007050:	d302      	bcc.n	8007058 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d116      	bne.n	8007086 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2220      	movs	r2, #32
 8007062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007072:	f043 0220 	orr.w	r2, r3, #32
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e023      	b.n	80070ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	0c1b      	lsrs	r3, r3, #16
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b01      	cmp	r3, #1
 800708e:	d10d      	bne.n	80070ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	43da      	mvns	r2, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	4013      	ands	r3, r2
 800709c:	b29b      	uxth	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	bf0c      	ite	eq
 80070a2:	2301      	moveq	r3, #1
 80070a4:	2300      	movne	r3, #0
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	461a      	mov	r2, r3
 80070aa:	e00c      	b.n	80070c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	43da      	mvns	r2, r3
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	4013      	ands	r3, r2
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	bf0c      	ite	eq
 80070be:	2301      	moveq	r3, #1
 80070c0:	2300      	movne	r3, #0
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	461a      	mov	r2, r3
 80070c6:	79fb      	ldrb	r3, [r7, #7]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d0b6      	beq.n	800703a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	607a      	str	r2, [r7, #4]
 80070e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80070e4:	e051      	b.n	800718a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070f4:	d123      	bne.n	800713e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007104:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800710e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2220      	movs	r2, #32
 800711a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712a:	f043 0204 	orr.w	r2, r3, #4
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e046      	b.n	80071cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007144:	d021      	beq.n	800718a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007146:	f7fe f9c9 	bl	80054dc <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	429a      	cmp	r2, r3
 8007154:	d302      	bcc.n	800715c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d116      	bne.n	800718a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2220      	movs	r2, #32
 8007166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007176:	f043 0220 	orr.w	r2, r3, #32
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e020      	b.n	80071cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	0c1b      	lsrs	r3, r3, #16
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b01      	cmp	r3, #1
 8007192:	d10c      	bne.n	80071ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	43da      	mvns	r2, r3
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	4013      	ands	r3, r2
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	bf14      	ite	ne
 80071a6:	2301      	movne	r3, #1
 80071a8:	2300      	moveq	r3, #0
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	e00b      	b.n	80071c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	43da      	mvns	r2, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	4013      	ands	r3, r2
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	bf14      	ite	ne
 80071c0:	2301      	movne	r3, #1
 80071c2:	2300      	moveq	r3, #0
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d18d      	bne.n	80070e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071e0:	e02d      	b.n	800723e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 f8ce 	bl	8007384 <I2C_IsAcknowledgeFailed>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e02d      	b.n	800724e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f8:	d021      	beq.n	800723e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071fa:	f7fe f96f 	bl	80054dc <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	429a      	cmp	r2, r3
 8007208:	d302      	bcc.n	8007210 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d116      	bne.n	800723e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2220      	movs	r2, #32
 800721a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722a:	f043 0220 	orr.w	r2, r3, #32
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e007      	b.n	800724e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007248:	2b80      	cmp	r3, #128	@ 0x80
 800724a:	d1ca      	bne.n	80071e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b084      	sub	sp, #16
 800725a:	af00      	add	r7, sp, #0
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007262:	e02d      	b.n	80072c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 f88d 	bl	8007384 <I2C_IsAcknowledgeFailed>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e02d      	b.n	80072d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727a:	d021      	beq.n	80072c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800727c:	f7fe f92e 	bl	80054dc <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	429a      	cmp	r2, r3
 800728a:	d302      	bcc.n	8007292 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d116      	bne.n	80072c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2220      	movs	r2, #32
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ac:	f043 0220 	orr.w	r2, r3, #32
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e007      	b.n	80072d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	f003 0304 	and.w	r3, r3, #4
 80072ca:	2b04      	cmp	r3, #4
 80072cc:	d1ca      	bne.n	8007264 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80072e4:	e042      	b.n	800736c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	f003 0310 	and.w	r3, r3, #16
 80072f0:	2b10      	cmp	r3, #16
 80072f2:	d119      	bne.n	8007328 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f06f 0210 	mvn.w	r2, #16
 80072fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2220      	movs	r2, #32
 8007308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e029      	b.n	800737c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007328:	f7fe f8d8 	bl	80054dc <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	429a      	cmp	r2, r3
 8007336:	d302      	bcc.n	800733e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d116      	bne.n	800736c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2220      	movs	r2, #32
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007358:	f043 0220 	orr.w	r2, r3, #32
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e007      	b.n	800737c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007376:	2b40      	cmp	r3, #64	@ 0x40
 8007378:	d1b5      	bne.n	80072e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800739a:	d11b      	bne.n	80073d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80073a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2220      	movs	r2, #32
 80073b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c0:	f043 0204 	orr.w	r2, r3, #4
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e000      	b.n	80073d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
	...

080073e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e0bf      	b.n	8007576 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d106      	bne.n	8007410 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f8ba 	bl	8007584 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2202      	movs	r2, #2
 8007414:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699a      	ldr	r2, [r3, #24]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007426:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6999      	ldr	r1, [r3, #24]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800743c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6899      	ldr	r1, [r3, #8]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	4b4a      	ldr	r3, [pc, #296]	@ (8007580 <HAL_LTDC_Init+0x19c>)
 8007458:	400b      	ands	r3, r1
 800745a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	041b      	lsls	r3, r3, #16
 8007462:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6899      	ldr	r1, [r3, #8]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	699a      	ldr	r2, [r3, #24]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	431a      	orrs	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68d9      	ldr	r1, [r3, #12]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	4b3e      	ldr	r3, [pc, #248]	@ (8007580 <HAL_LTDC_Init+0x19c>)
 8007486:	400b      	ands	r3, r1
 8007488:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	69db      	ldr	r3, [r3, #28]
 800748e:	041b      	lsls	r3, r3, #16
 8007490:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68d9      	ldr	r1, [r3, #12]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a1a      	ldr	r2, [r3, #32]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	430a      	orrs	r2, r1
 80074a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6919      	ldr	r1, [r3, #16]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	4b33      	ldr	r3, [pc, #204]	@ (8007580 <HAL_LTDC_Init+0x19c>)
 80074b4:	400b      	ands	r3, r1
 80074b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074bc:	041b      	lsls	r3, r3, #16
 80074be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6919      	ldr	r1, [r3, #16]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	431a      	orrs	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6959      	ldr	r1, [r3, #20]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	4b27      	ldr	r3, [pc, #156]	@ (8007580 <HAL_LTDC_Init+0x19c>)
 80074e2:	400b      	ands	r3, r1
 80074e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ea:	041b      	lsls	r3, r3, #16
 80074ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6959      	ldr	r1, [r3, #20]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	431a      	orrs	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	430a      	orrs	r2, r1
 8007502:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800750a:	021b      	lsls	r3, r3, #8
 800750c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007514:	041b      	lsls	r3, r3, #16
 8007516:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007526:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	4313      	orrs	r3, r2
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0206 	orr.w	r2, r2, #6
 8007552:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	699a      	ldr	r2, [r3, #24]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0201 	orr.w	r2, r2, #1
 8007562:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	f000f800 	.word	0xf000f800

08007584 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007598:	b5b0      	push	{r4, r5, r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d101      	bne.n	80075b2 <HAL_LTDC_ConfigLayer+0x1a>
 80075ae:	2302      	movs	r3, #2
 80075b0:	e02c      	b.n	800760c <HAL_LTDC_ConfigLayer+0x74>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2202      	movs	r2, #2
 80075be:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2134      	movs	r1, #52	@ 0x34
 80075c8:	fb01 f303 	mul.w	r3, r1, r3
 80075cc:	4413      	add	r3, r2
 80075ce:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	4614      	mov	r4, r2
 80075d6:	461d      	mov	r5, r3
 80075d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	68b9      	ldr	r1, [r7, #8]
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f000 f83b 	bl	8007668 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2201      	movs	r2, #1
 80075f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bdb0      	pop	{r4, r5, r7, pc}

08007614 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007622:	2b01      	cmp	r3, #1
 8007624:	d101      	bne.n	800762a <HAL_LTDC_EnableDither+0x16>
 8007626:	2302      	movs	r3, #2
 8007628:	e016      	b.n	8007658 <HAL_LTDC_EnableDither+0x44>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2202      	movs	r2, #2
 8007636:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800763a:	4b0a      	ldr	r3, [pc, #40]	@ (8007664 <HAL_LTDC_EnableDither+0x50>)
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	4a09      	ldr	r2, [pc, #36]	@ (8007664 <HAL_LTDC_EnableDither+0x50>)
 8007640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007644:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	40016800 	.word	0x40016800

08007668 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007668:	b480      	push	{r7}
 800766a:	b089      	sub	sp, #36	@ 0x24
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	0c1b      	lsrs	r3, r3, #16
 8007680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007684:	4413      	add	r3, r2
 8007686:	041b      	lsls	r3, r3, #16
 8007688:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	01db      	lsls	r3, r3, #7
 8007694:	4413      	add	r3, r2
 8007696:	3384      	adds	r3, #132	@ 0x84
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	6812      	ldr	r2, [r2, #0]
 800769e:	4611      	mov	r1, r2
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	01d2      	lsls	r2, r2, #7
 80076a4:	440a      	add	r2, r1
 80076a6:	3284      	adds	r2, #132	@ 0x84
 80076a8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80076ac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	0c1b      	lsrs	r3, r3, #16
 80076ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076be:	4413      	add	r3, r2
 80076c0:	1c5a      	adds	r2, r3, #1
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4619      	mov	r1, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	01db      	lsls	r3, r3, #7
 80076cc:	440b      	add	r3, r1
 80076ce:	3384      	adds	r3, #132	@ 0x84
 80076d0:	4619      	mov	r1, r3
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	68da      	ldr	r2, [r3, #12]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076e6:	4413      	add	r3, r2
 80076e8:	041b      	lsls	r3, r3, #16
 80076ea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	461a      	mov	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	01db      	lsls	r3, r3, #7
 80076f6:	4413      	add	r3, r2
 80076f8:	3384      	adds	r3, #132	@ 0x84
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	6812      	ldr	r2, [r2, #0]
 8007700:	4611      	mov	r1, r2
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	01d2      	lsls	r2, r2, #7
 8007706:	440a      	add	r2, r1
 8007708:	3284      	adds	r2, #132	@ 0x84
 800770a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800770e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800771e:	4413      	add	r3, r2
 8007720:	1c5a      	adds	r2, r3, #1
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4619      	mov	r1, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	01db      	lsls	r3, r3, #7
 800772c:	440b      	add	r3, r1
 800772e:	3384      	adds	r3, #132	@ 0x84
 8007730:	4619      	mov	r1, r3
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	4313      	orrs	r3, r2
 8007736:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	461a      	mov	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	01db      	lsls	r3, r3, #7
 8007742:	4413      	add	r3, r2
 8007744:	3384      	adds	r3, #132	@ 0x84
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	6812      	ldr	r2, [r2, #0]
 800774c:	4611      	mov	r1, r2
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	01d2      	lsls	r2, r2, #7
 8007752:	440a      	add	r2, r1
 8007754:	3284      	adds	r2, #132	@ 0x84
 8007756:	f023 0307 	bic.w	r3, r3, #7
 800775a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	01db      	lsls	r3, r3, #7
 8007766:	4413      	add	r3, r2
 8007768:	3384      	adds	r3, #132	@ 0x84
 800776a:	461a      	mov	r2, r3
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007778:	021b      	lsls	r3, r3, #8
 800777a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007782:	041b      	lsls	r3, r3, #16
 8007784:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	061b      	lsls	r3, r3, #24
 800778c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	01db      	lsls	r3, r3, #7
 8007798:	4413      	add	r3, r2
 800779a:	3384      	adds	r3, #132	@ 0x84
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	01db      	lsls	r3, r3, #7
 80077a8:	4413      	add	r3, r2
 80077aa:	3384      	adds	r3, #132	@ 0x84
 80077ac:	461a      	mov	r2, r3
 80077ae:	2300      	movs	r3, #0
 80077b0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80077b8:	461a      	mov	r2, r3
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	431a      	orrs	r2, r3
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	431a      	orrs	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4619      	mov	r1, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	01db      	lsls	r3, r3, #7
 80077cc:	440b      	add	r3, r1
 80077ce:	3384      	adds	r3, #132	@ 0x84
 80077d0:	4619      	mov	r1, r3
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	461a      	mov	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	01db      	lsls	r3, r3, #7
 80077e2:	4413      	add	r3, r2
 80077e4:	3384      	adds	r3, #132	@ 0x84
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	6812      	ldr	r2, [r2, #0]
 80077ec:	4611      	mov	r1, r2
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	01d2      	lsls	r2, r2, #7
 80077f2:	440a      	add	r2, r1
 80077f4:	3284      	adds	r2, #132	@ 0x84
 80077f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80077fa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	461a      	mov	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	01db      	lsls	r3, r3, #7
 8007806:	4413      	add	r3, r2
 8007808:	3384      	adds	r3, #132	@ 0x84
 800780a:	461a      	mov	r2, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	01db      	lsls	r3, r3, #7
 800781c:	4413      	add	r3, r2
 800781e:	3384      	adds	r3, #132	@ 0x84
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	6812      	ldr	r2, [r2, #0]
 8007826:	4611      	mov	r1, r2
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	01d2      	lsls	r2, r2, #7
 800782c:	440a      	add	r2, r1
 800782e:	3284      	adds	r2, #132	@ 0x84
 8007830:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007834:	f023 0307 	bic.w	r3, r3, #7
 8007838:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	69da      	ldr	r2, [r3, #28]
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	68f9      	ldr	r1, [r7, #12]
 8007844:	6809      	ldr	r1, [r1, #0]
 8007846:	4608      	mov	r0, r1
 8007848:	6879      	ldr	r1, [r7, #4]
 800784a:	01c9      	lsls	r1, r1, #7
 800784c:	4401      	add	r1, r0
 800784e:	3184      	adds	r1, #132	@ 0x84
 8007850:	4313      	orrs	r3, r2
 8007852:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	01db      	lsls	r3, r3, #7
 800785e:	4413      	add	r3, r2
 8007860:	3384      	adds	r3, #132	@ 0x84
 8007862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	461a      	mov	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	01db      	lsls	r3, r3, #7
 800786e:	4413      	add	r3, r2
 8007870:	3384      	adds	r3, #132	@ 0x84
 8007872:	461a      	mov	r2, r3
 8007874:	2300      	movs	r3, #0
 8007876:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	461a      	mov	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	01db      	lsls	r3, r3, #7
 8007882:	4413      	add	r3, r2
 8007884:	3384      	adds	r3, #132	@ 0x84
 8007886:	461a      	mov	r2, r3
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800788c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d102      	bne.n	800789c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007896:	2304      	movs	r3, #4
 8007898:	61fb      	str	r3, [r7, #28]
 800789a:	e01b      	b.n	80078d4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d102      	bne.n	80078aa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80078a4:	2303      	movs	r3, #3
 80078a6:	61fb      	str	r3, [r7, #28]
 80078a8:	e014      	b.n	80078d4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	2b04      	cmp	r3, #4
 80078b0:	d00b      	beq.n	80078ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d007      	beq.n	80078ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d003      	beq.n	80078ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80078c6:	2b07      	cmp	r3, #7
 80078c8:	d102      	bne.n	80078d0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80078ca:	2302      	movs	r3, #2
 80078cc:	61fb      	str	r3, [r7, #28]
 80078ce:	e001      	b.n	80078d4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80078d0:	2301      	movs	r3, #1
 80078d2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	461a      	mov	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	01db      	lsls	r3, r3, #7
 80078de:	4413      	add	r3, r2
 80078e0:	3384      	adds	r3, #132	@ 0x84
 80078e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	6812      	ldr	r2, [r2, #0]
 80078e8:	4611      	mov	r1, r2
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	01d2      	lsls	r2, r2, #7
 80078ee:	440a      	add	r2, r1
 80078f0:	3284      	adds	r2, #132	@ 0x84
 80078f2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80078f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078fc:	69fa      	ldr	r2, [r7, #28]
 80078fe:	fb02 f303 	mul.w	r3, r2, r3
 8007902:	041a      	lsls	r2, r3, #16
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	6859      	ldr	r1, [r3, #4]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	1acb      	subs	r3, r1, r3
 800790e:	69f9      	ldr	r1, [r7, #28]
 8007910:	fb01 f303 	mul.w	r3, r1, r3
 8007914:	3303      	adds	r3, #3
 8007916:	68f9      	ldr	r1, [r7, #12]
 8007918:	6809      	ldr	r1, [r1, #0]
 800791a:	4608      	mov	r0, r1
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	01c9      	lsls	r1, r1, #7
 8007920:	4401      	add	r1, r0
 8007922:	3184      	adds	r1, #132	@ 0x84
 8007924:	4313      	orrs	r3, r2
 8007926:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	461a      	mov	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	01db      	lsls	r3, r3, #7
 8007932:	4413      	add	r3, r2
 8007934:	3384      	adds	r3, #132	@ 0x84
 8007936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	6812      	ldr	r2, [r2, #0]
 800793c:	4611      	mov	r1, r2
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	01d2      	lsls	r2, r2, #7
 8007942:	440a      	add	r2, r1
 8007944:	3284      	adds	r2, #132	@ 0x84
 8007946:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800794a:	f023 0307 	bic.w	r3, r3, #7
 800794e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	461a      	mov	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	01db      	lsls	r3, r3, #7
 800795a:	4413      	add	r3, r2
 800795c:	3384      	adds	r3, #132	@ 0x84
 800795e:	461a      	mov	r2, r3
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007964:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	01db      	lsls	r3, r3, #7
 8007970:	4413      	add	r3, r2
 8007972:	3384      	adds	r3, #132	@ 0x84
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	6812      	ldr	r2, [r2, #0]
 800797a:	4611      	mov	r1, r2
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	01d2      	lsls	r2, r2, #7
 8007980:	440a      	add	r2, r1
 8007982:	3284      	adds	r2, #132	@ 0x84
 8007984:	f043 0301 	orr.w	r3, r3, #1
 8007988:	6013      	str	r3, [r2, #0]
}
 800798a:	bf00      	nop
 800798c:	3724      	adds	r7, #36	@ 0x24
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
	...

08007998 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b086      	sub	sp, #24
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e25e      	b.n	8007e68 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d075      	beq.n	8007aa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80079b6:	4b88      	ldr	r3, [pc, #544]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f003 030c 	and.w	r3, r3, #12
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d00c      	beq.n	80079dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079c2:	4b85      	ldr	r3, [pc, #532]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80079ca:	2b08      	cmp	r3, #8
 80079cc:	d112      	bne.n	80079f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079ce:	4b82      	ldr	r3, [pc, #520]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079da:	d10b      	bne.n	80079f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079dc:	4b7e      	ldr	r3, [pc, #504]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d05b      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x108>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d157      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e239      	b.n	8007e68 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079fc:	d106      	bne.n	8007a0c <HAL_RCC_OscConfig+0x74>
 80079fe:	4b76      	ldr	r3, [pc, #472]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a75      	ldr	r2, [pc, #468]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	e01d      	b.n	8007a48 <HAL_RCC_OscConfig+0xb0>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a14:	d10c      	bne.n	8007a30 <HAL_RCC_OscConfig+0x98>
 8007a16:	4b70      	ldr	r3, [pc, #448]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a6f      	ldr	r2, [pc, #444]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007a1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	4b6d      	ldr	r3, [pc, #436]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a6c      	ldr	r2, [pc, #432]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a2c:	6013      	str	r3, [r2, #0]
 8007a2e:	e00b      	b.n	8007a48 <HAL_RCC_OscConfig+0xb0>
 8007a30:	4b69      	ldr	r3, [pc, #420]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a68      	ldr	r2, [pc, #416]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a3a:	6013      	str	r3, [r2, #0]
 8007a3c:	4b66      	ldr	r3, [pc, #408]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a65      	ldr	r2, [pc, #404]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007a42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d013      	beq.n	8007a78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a50:	f7fd fd44 	bl	80054dc <HAL_GetTick>
 8007a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a56:	e008      	b.n	8007a6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a58:	f7fd fd40 	bl	80054dc <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b64      	cmp	r3, #100	@ 0x64
 8007a64:	d901      	bls.n	8007a6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e1fe      	b.n	8007e68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a6a:	4b5b      	ldr	r3, [pc, #364]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0f0      	beq.n	8007a58 <HAL_RCC_OscConfig+0xc0>
 8007a76:	e014      	b.n	8007aa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a78:	f7fd fd30 	bl	80054dc <HAL_GetTick>
 8007a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a7e:	e008      	b.n	8007a92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a80:	f7fd fd2c 	bl	80054dc <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	2b64      	cmp	r3, #100	@ 0x64
 8007a8c:	d901      	bls.n	8007a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e1ea      	b.n	8007e68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a92:	4b51      	ldr	r3, [pc, #324]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1f0      	bne.n	8007a80 <HAL_RCC_OscConfig+0xe8>
 8007a9e:	e000      	b.n	8007aa2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d063      	beq.n	8007b76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007aae:	4b4a      	ldr	r3, [pc, #296]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f003 030c 	and.w	r3, r3, #12
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00b      	beq.n	8007ad2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007aba:	4b47      	ldr	r3, [pc, #284]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ac2:	2b08      	cmp	r3, #8
 8007ac4:	d11c      	bne.n	8007b00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ac6:	4b44      	ldr	r3, [pc, #272]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d116      	bne.n	8007b00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ad2:	4b41      	ldr	r3, [pc, #260]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d005      	beq.n	8007aea <HAL_RCC_OscConfig+0x152>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d001      	beq.n	8007aea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e1be      	b.n	8007e68 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007aea:	4b3b      	ldr	r3, [pc, #236]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	00db      	lsls	r3, r3, #3
 8007af8:	4937      	ldr	r1, [pc, #220]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007afa:	4313      	orrs	r3, r2
 8007afc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007afe:	e03a      	b.n	8007b76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d020      	beq.n	8007b4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b08:	4b34      	ldr	r3, [pc, #208]	@ (8007bdc <HAL_RCC_OscConfig+0x244>)
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b0e:	f7fd fce5 	bl	80054dc <HAL_GetTick>
 8007b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b14:	e008      	b.n	8007b28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b16:	f7fd fce1 	bl	80054dc <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d901      	bls.n	8007b28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e19f      	b.n	8007e68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b28:	4b2b      	ldr	r3, [pc, #172]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0302 	and.w	r3, r3, #2
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d0f0      	beq.n	8007b16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b34:	4b28      	ldr	r3, [pc, #160]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	00db      	lsls	r3, r3, #3
 8007b42:	4925      	ldr	r1, [pc, #148]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	600b      	str	r3, [r1, #0]
 8007b48:	e015      	b.n	8007b76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b4a:	4b24      	ldr	r3, [pc, #144]	@ (8007bdc <HAL_RCC_OscConfig+0x244>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b50:	f7fd fcc4 	bl	80054dc <HAL_GetTick>
 8007b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b56:	e008      	b.n	8007b6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b58:	f7fd fcc0 	bl	80054dc <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d901      	bls.n	8007b6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e17e      	b.n	8007e68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0302 	and.w	r3, r3, #2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1f0      	bne.n	8007b58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0308 	and.w	r3, r3, #8
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d036      	beq.n	8007bf0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d016      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b8a:	4b15      	ldr	r3, [pc, #84]	@ (8007be0 <HAL_RCC_OscConfig+0x248>)
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b90:	f7fd fca4 	bl	80054dc <HAL_GetTick>
 8007b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b96:	e008      	b.n	8007baa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b98:	f7fd fca0 	bl	80054dc <HAL_GetTick>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d901      	bls.n	8007baa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e15e      	b.n	8007e68 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007baa:	4b0b      	ldr	r3, [pc, #44]	@ (8007bd8 <HAL_RCC_OscConfig+0x240>)
 8007bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bae:	f003 0302 	and.w	r3, r3, #2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0f0      	beq.n	8007b98 <HAL_RCC_OscConfig+0x200>
 8007bb6:	e01b      	b.n	8007bf0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bb8:	4b09      	ldr	r3, [pc, #36]	@ (8007be0 <HAL_RCC_OscConfig+0x248>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bbe:	f7fd fc8d 	bl	80054dc <HAL_GetTick>
 8007bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bc4:	e00e      	b.n	8007be4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bc6:	f7fd fc89 	bl	80054dc <HAL_GetTick>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d907      	bls.n	8007be4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e147      	b.n	8007e68 <HAL_RCC_OscConfig+0x4d0>
 8007bd8:	40023800 	.word	0x40023800
 8007bdc:	42470000 	.word	0x42470000
 8007be0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007be4:	4b88      	ldr	r3, [pc, #544]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1ea      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0304 	and.w	r3, r3, #4
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 8097 	beq.w	8007d2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c02:	4b81      	ldr	r3, [pc, #516]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10f      	bne.n	8007c2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60bb      	str	r3, [r7, #8]
 8007c12:	4b7d      	ldr	r3, [pc, #500]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c16:	4a7c      	ldr	r2, [pc, #496]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c1e:	4b7a      	ldr	r3, [pc, #488]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c26:	60bb      	str	r3, [r7, #8]
 8007c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c2e:	4b77      	ldr	r3, [pc, #476]	@ (8007e0c <HAL_RCC_OscConfig+0x474>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d118      	bne.n	8007c6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c3a:	4b74      	ldr	r3, [pc, #464]	@ (8007e0c <HAL_RCC_OscConfig+0x474>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a73      	ldr	r2, [pc, #460]	@ (8007e0c <HAL_RCC_OscConfig+0x474>)
 8007c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c46:	f7fd fc49 	bl	80054dc <HAL_GetTick>
 8007c4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c4c:	e008      	b.n	8007c60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c4e:	f7fd fc45 	bl	80054dc <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e103      	b.n	8007e68 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c60:	4b6a      	ldr	r3, [pc, #424]	@ (8007e0c <HAL_RCC_OscConfig+0x474>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d0f0      	beq.n	8007c4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d106      	bne.n	8007c82 <HAL_RCC_OscConfig+0x2ea>
 8007c74:	4b64      	ldr	r3, [pc, #400]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c78:	4a63      	ldr	r2, [pc, #396]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007c7a:	f043 0301 	orr.w	r3, r3, #1
 8007c7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c80:	e01c      	b.n	8007cbc <HAL_RCC_OscConfig+0x324>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	2b05      	cmp	r3, #5
 8007c88:	d10c      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x30c>
 8007c8a:	4b5f      	ldr	r3, [pc, #380]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c8e:	4a5e      	ldr	r2, [pc, #376]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007c90:	f043 0304 	orr.w	r3, r3, #4
 8007c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c96:	4b5c      	ldr	r3, [pc, #368]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c9a:	4a5b      	ldr	r2, [pc, #364]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007c9c:	f043 0301 	orr.w	r3, r3, #1
 8007ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ca2:	e00b      	b.n	8007cbc <HAL_RCC_OscConfig+0x324>
 8007ca4:	4b58      	ldr	r3, [pc, #352]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ca8:	4a57      	ldr	r2, [pc, #348]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007caa:	f023 0301 	bic.w	r3, r3, #1
 8007cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cb0:	4b55      	ldr	r3, [pc, #340]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cb4:	4a54      	ldr	r2, [pc, #336]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007cb6:	f023 0304 	bic.w	r3, r3, #4
 8007cba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d015      	beq.n	8007cf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cc4:	f7fd fc0a 	bl	80054dc <HAL_GetTick>
 8007cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cca:	e00a      	b.n	8007ce2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ccc:	f7fd fc06 	bl	80054dc <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d901      	bls.n	8007ce2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e0c2      	b.n	8007e68 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ce2:	4b49      	ldr	r3, [pc, #292]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ce6:	f003 0302 	and.w	r3, r3, #2
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d0ee      	beq.n	8007ccc <HAL_RCC_OscConfig+0x334>
 8007cee:	e014      	b.n	8007d1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cf0:	f7fd fbf4 	bl	80054dc <HAL_GetTick>
 8007cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cf6:	e00a      	b.n	8007d0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cf8:	f7fd fbf0 	bl	80054dc <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d901      	bls.n	8007d0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e0ac      	b.n	8007e68 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d12:	f003 0302 	and.w	r3, r3, #2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1ee      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d105      	bne.n	8007d2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d20:	4b39      	ldr	r3, [pc, #228]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d24:	4a38      	ldr	r2, [pc, #224]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007d26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f000 8098 	beq.w	8007e66 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d36:	4b34      	ldr	r3, [pc, #208]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f003 030c 	and.w	r3, r3, #12
 8007d3e:	2b08      	cmp	r3, #8
 8007d40:	d05c      	beq.n	8007dfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d141      	bne.n	8007dce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d4a:	4b31      	ldr	r3, [pc, #196]	@ (8007e10 <HAL_RCC_OscConfig+0x478>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d50:	f7fd fbc4 	bl	80054dc <HAL_GetTick>
 8007d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d56:	e008      	b.n	8007d6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d58:	f7fd fbc0 	bl	80054dc <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d901      	bls.n	8007d6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e07e      	b.n	8007e68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d6a:	4b27      	ldr	r3, [pc, #156]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1f0      	bne.n	8007d58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	69da      	ldr	r2, [r3, #28]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d84:	019b      	lsls	r3, r3, #6
 8007d86:	431a      	orrs	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d8c:	085b      	lsrs	r3, r3, #1
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	041b      	lsls	r3, r3, #16
 8007d92:	431a      	orrs	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d98:	061b      	lsls	r3, r3, #24
 8007d9a:	491b      	ldr	r1, [pc, #108]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007da0:	4b1b      	ldr	r3, [pc, #108]	@ (8007e10 <HAL_RCC_OscConfig+0x478>)
 8007da2:	2201      	movs	r2, #1
 8007da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007da6:	f7fd fb99 	bl	80054dc <HAL_GetTick>
 8007daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dac:	e008      	b.n	8007dc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dae:	f7fd fb95 	bl	80054dc <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d901      	bls.n	8007dc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e053      	b.n	8007e68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dc0:	4b11      	ldr	r3, [pc, #68]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d0f0      	beq.n	8007dae <HAL_RCC_OscConfig+0x416>
 8007dcc:	e04b      	b.n	8007e66 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dce:	4b10      	ldr	r3, [pc, #64]	@ (8007e10 <HAL_RCC_OscConfig+0x478>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dd4:	f7fd fb82 	bl	80054dc <HAL_GetTick>
 8007dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dda:	e008      	b.n	8007dee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ddc:	f7fd fb7e 	bl	80054dc <HAL_GetTick>
 8007de0:	4602      	mov	r2, r0
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d901      	bls.n	8007dee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e03c      	b.n	8007e68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dee:	4b06      	ldr	r3, [pc, #24]	@ (8007e08 <HAL_RCC_OscConfig+0x470>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1f0      	bne.n	8007ddc <HAL_RCC_OscConfig+0x444>
 8007dfa:	e034      	b.n	8007e66 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d107      	bne.n	8007e14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e02f      	b.n	8007e68 <HAL_RCC_OscConfig+0x4d0>
 8007e08:	40023800 	.word	0x40023800
 8007e0c:	40007000 	.word	0x40007000
 8007e10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e14:	4b16      	ldr	r3, [pc, #88]	@ (8007e70 <HAL_RCC_OscConfig+0x4d8>)
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	69db      	ldr	r3, [r3, #28]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d11c      	bne.n	8007e62 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d115      	bne.n	8007e62 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d10d      	bne.n	8007e62 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d106      	bne.n	8007e62 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d001      	beq.n	8007e66 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e000      	b.n	8007e68 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	40023800 	.word	0x40023800

08007e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d101      	bne.n	8007e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e0cc      	b.n	8008022 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e88:	4b68      	ldr	r3, [pc, #416]	@ (800802c <HAL_RCC_ClockConfig+0x1b8>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 030f 	and.w	r3, r3, #15
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d90c      	bls.n	8007eb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e96:	4b65      	ldr	r3, [pc, #404]	@ (800802c <HAL_RCC_ClockConfig+0x1b8>)
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	b2d2      	uxtb	r2, r2
 8007e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e9e:	4b63      	ldr	r3, [pc, #396]	@ (800802c <HAL_RCC_ClockConfig+0x1b8>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 030f 	and.w	r3, r3, #15
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d001      	beq.n	8007eb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e0b8      	b.n	8008022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0302 	and.w	r3, r3, #2
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d020      	beq.n	8007efe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0304 	and.w	r3, r3, #4
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d005      	beq.n	8007ed4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ec8:	4b59      	ldr	r3, [pc, #356]	@ (8008030 <HAL_RCC_ClockConfig+0x1bc>)
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	4a58      	ldr	r2, [pc, #352]	@ (8008030 <HAL_RCC_ClockConfig+0x1bc>)
 8007ece:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007ed2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0308 	and.w	r3, r3, #8
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d005      	beq.n	8007eec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ee0:	4b53      	ldr	r3, [pc, #332]	@ (8008030 <HAL_RCC_ClockConfig+0x1bc>)
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	4a52      	ldr	r2, [pc, #328]	@ (8008030 <HAL_RCC_ClockConfig+0x1bc>)
 8007ee6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007eea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007eec:	4b50      	ldr	r3, [pc, #320]	@ (8008030 <HAL_RCC_ClockConfig+0x1bc>)
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	494d      	ldr	r1, [pc, #308]	@ (8008030 <HAL_RCC_ClockConfig+0x1bc>)
 8007efa:	4313      	orrs	r3, r2
 8007efc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d044      	beq.n	8007f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d107      	bne.n	8007f22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f12:	4b47      	ldr	r3, [pc, #284]	@ (8008030 <HAL_RCC_ClockConfig+0x1bc>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d119      	bne.n	8007f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e07f      	b.n	8008022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d003      	beq.n	8007f32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	d107      	bne.n	8007f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f32:	4b3f      	ldr	r3, [pc, #252]	@ (8008030 <HAL_RCC_ClockConfig+0x1bc>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d109      	bne.n	8007f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e06f      	b.n	8008022 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f42:	4b3b      	ldr	r3, [pc, #236]	@ (8008030 <HAL_RCC_ClockConfig+0x1bc>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 0302 	and.w	r3, r3, #2
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e067      	b.n	8008022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f52:	4b37      	ldr	r3, [pc, #220]	@ (8008030 <HAL_RCC_ClockConfig+0x1bc>)
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f023 0203 	bic.w	r2, r3, #3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	4934      	ldr	r1, [pc, #208]	@ (8008030 <HAL_RCC_ClockConfig+0x1bc>)
 8007f60:	4313      	orrs	r3, r2
 8007f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f64:	f7fd faba 	bl	80054dc <HAL_GetTick>
 8007f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f6a:	e00a      	b.n	8007f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f6c:	f7fd fab6 	bl	80054dc <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d901      	bls.n	8007f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e04f      	b.n	8008022 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f82:	4b2b      	ldr	r3, [pc, #172]	@ (8008030 <HAL_RCC_ClockConfig+0x1bc>)
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f003 020c 	and.w	r2, r3, #12
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d1eb      	bne.n	8007f6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f94:	4b25      	ldr	r3, [pc, #148]	@ (800802c <HAL_RCC_ClockConfig+0x1b8>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 030f 	and.w	r3, r3, #15
 8007f9c:	683a      	ldr	r2, [r7, #0]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d20c      	bcs.n	8007fbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fa2:	4b22      	ldr	r3, [pc, #136]	@ (800802c <HAL_RCC_ClockConfig+0x1b8>)
 8007fa4:	683a      	ldr	r2, [r7, #0]
 8007fa6:	b2d2      	uxtb	r2, r2
 8007fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007faa:	4b20      	ldr	r3, [pc, #128]	@ (800802c <HAL_RCC_ClockConfig+0x1b8>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 030f 	and.w	r3, r3, #15
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d001      	beq.n	8007fbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e032      	b.n	8008022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0304 	and.w	r3, r3, #4
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d008      	beq.n	8007fda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fc8:	4b19      	ldr	r3, [pc, #100]	@ (8008030 <HAL_RCC_ClockConfig+0x1bc>)
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	4916      	ldr	r1, [pc, #88]	@ (8008030 <HAL_RCC_ClockConfig+0x1bc>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0308 	and.w	r3, r3, #8
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d009      	beq.n	8007ffa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007fe6:	4b12      	ldr	r3, [pc, #72]	@ (8008030 <HAL_RCC_ClockConfig+0x1bc>)
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	00db      	lsls	r3, r3, #3
 8007ff4:	490e      	ldr	r1, [pc, #56]	@ (8008030 <HAL_RCC_ClockConfig+0x1bc>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ffa:	f000 f821 	bl	8008040 <HAL_RCC_GetSysClockFreq>
 8007ffe:	4602      	mov	r2, r0
 8008000:	4b0b      	ldr	r3, [pc, #44]	@ (8008030 <HAL_RCC_ClockConfig+0x1bc>)
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	091b      	lsrs	r3, r3, #4
 8008006:	f003 030f 	and.w	r3, r3, #15
 800800a:	490a      	ldr	r1, [pc, #40]	@ (8008034 <HAL_RCC_ClockConfig+0x1c0>)
 800800c:	5ccb      	ldrb	r3, [r1, r3]
 800800e:	fa22 f303 	lsr.w	r3, r2, r3
 8008012:	4a09      	ldr	r2, [pc, #36]	@ (8008038 <HAL_RCC_ClockConfig+0x1c4>)
 8008014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008016:	4b09      	ldr	r3, [pc, #36]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4618      	mov	r0, r3
 800801c:	f7fd fa1a 	bl	8005454 <HAL_InitTick>

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	40023c00 	.word	0x40023c00
 8008030:	40023800 	.word	0x40023800
 8008034:	0800dfa8 	.word	0x0800dfa8
 8008038:	20000104 	.word	0x20000104
 800803c:	20000194 	.word	0x20000194

08008040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008044:	b094      	sub	sp, #80	@ 0x50
 8008046:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008048:	2300      	movs	r3, #0
 800804a:	647b      	str	r3, [r7, #68]	@ 0x44
 800804c:	2300      	movs	r3, #0
 800804e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008050:	2300      	movs	r3, #0
 8008052:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008054:	2300      	movs	r3, #0
 8008056:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008058:	4b79      	ldr	r3, [pc, #484]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x200>)
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f003 030c 	and.w	r3, r3, #12
 8008060:	2b08      	cmp	r3, #8
 8008062:	d00d      	beq.n	8008080 <HAL_RCC_GetSysClockFreq+0x40>
 8008064:	2b08      	cmp	r3, #8
 8008066:	f200 80e1 	bhi.w	800822c <HAL_RCC_GetSysClockFreq+0x1ec>
 800806a:	2b00      	cmp	r3, #0
 800806c:	d002      	beq.n	8008074 <HAL_RCC_GetSysClockFreq+0x34>
 800806e:	2b04      	cmp	r3, #4
 8008070:	d003      	beq.n	800807a <HAL_RCC_GetSysClockFreq+0x3a>
 8008072:	e0db      	b.n	800822c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008074:	4b73      	ldr	r3, [pc, #460]	@ (8008244 <HAL_RCC_GetSysClockFreq+0x204>)
 8008076:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8008078:	e0db      	b.n	8008232 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800807a:	4b73      	ldr	r3, [pc, #460]	@ (8008248 <HAL_RCC_GetSysClockFreq+0x208>)
 800807c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800807e:	e0d8      	b.n	8008232 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008080:	4b6f      	ldr	r3, [pc, #444]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x200>)
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008088:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800808a:	4b6d      	ldr	r3, [pc, #436]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x200>)
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d063      	beq.n	800815e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008096:	4b6a      	ldr	r3, [pc, #424]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x200>)
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	099b      	lsrs	r3, r3, #6
 800809c:	2200      	movs	r2, #0
 800809e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80080a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80080aa:	2300      	movs	r3, #0
 80080ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80080b2:	4622      	mov	r2, r4
 80080b4:	462b      	mov	r3, r5
 80080b6:	f04f 0000 	mov.w	r0, #0
 80080ba:	f04f 0100 	mov.w	r1, #0
 80080be:	0159      	lsls	r1, r3, #5
 80080c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080c4:	0150      	lsls	r0, r2, #5
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	4621      	mov	r1, r4
 80080cc:	1a51      	subs	r1, r2, r1
 80080ce:	6139      	str	r1, [r7, #16]
 80080d0:	4629      	mov	r1, r5
 80080d2:	eb63 0301 	sbc.w	r3, r3, r1
 80080d6:	617b      	str	r3, [r7, #20]
 80080d8:	f04f 0200 	mov.w	r2, #0
 80080dc:	f04f 0300 	mov.w	r3, #0
 80080e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080e4:	4659      	mov	r1, fp
 80080e6:	018b      	lsls	r3, r1, #6
 80080e8:	4651      	mov	r1, sl
 80080ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80080ee:	4651      	mov	r1, sl
 80080f0:	018a      	lsls	r2, r1, #6
 80080f2:	4651      	mov	r1, sl
 80080f4:	ebb2 0801 	subs.w	r8, r2, r1
 80080f8:	4659      	mov	r1, fp
 80080fa:	eb63 0901 	sbc.w	r9, r3, r1
 80080fe:	f04f 0200 	mov.w	r2, #0
 8008102:	f04f 0300 	mov.w	r3, #0
 8008106:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800810a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800810e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008112:	4690      	mov	r8, r2
 8008114:	4699      	mov	r9, r3
 8008116:	4623      	mov	r3, r4
 8008118:	eb18 0303 	adds.w	r3, r8, r3
 800811c:	60bb      	str	r3, [r7, #8]
 800811e:	462b      	mov	r3, r5
 8008120:	eb49 0303 	adc.w	r3, r9, r3
 8008124:	60fb      	str	r3, [r7, #12]
 8008126:	f04f 0200 	mov.w	r2, #0
 800812a:	f04f 0300 	mov.w	r3, #0
 800812e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008132:	4629      	mov	r1, r5
 8008134:	024b      	lsls	r3, r1, #9
 8008136:	4621      	mov	r1, r4
 8008138:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800813c:	4621      	mov	r1, r4
 800813e:	024a      	lsls	r2, r1, #9
 8008140:	4610      	mov	r0, r2
 8008142:	4619      	mov	r1, r3
 8008144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008146:	2200      	movs	r2, #0
 8008148:	62bb      	str	r3, [r7, #40]	@ 0x28
 800814a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800814c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008150:	f7f8 fd9a 	bl	8000c88 <__aeabi_uldivmod>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	4613      	mov	r3, r2
 800815a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800815c:	e058      	b.n	8008210 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800815e:	4b38      	ldr	r3, [pc, #224]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x200>)
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	099b      	lsrs	r3, r3, #6
 8008164:	2200      	movs	r2, #0
 8008166:	4618      	mov	r0, r3
 8008168:	4611      	mov	r1, r2
 800816a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800816e:	623b      	str	r3, [r7, #32]
 8008170:	2300      	movs	r3, #0
 8008172:	627b      	str	r3, [r7, #36]	@ 0x24
 8008174:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008178:	4642      	mov	r2, r8
 800817a:	464b      	mov	r3, r9
 800817c:	f04f 0000 	mov.w	r0, #0
 8008180:	f04f 0100 	mov.w	r1, #0
 8008184:	0159      	lsls	r1, r3, #5
 8008186:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800818a:	0150      	lsls	r0, r2, #5
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	4641      	mov	r1, r8
 8008192:	ebb2 0a01 	subs.w	sl, r2, r1
 8008196:	4649      	mov	r1, r9
 8008198:	eb63 0b01 	sbc.w	fp, r3, r1
 800819c:	f04f 0200 	mov.w	r2, #0
 80081a0:	f04f 0300 	mov.w	r3, #0
 80081a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80081a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80081ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80081b0:	ebb2 040a 	subs.w	r4, r2, sl
 80081b4:	eb63 050b 	sbc.w	r5, r3, fp
 80081b8:	f04f 0200 	mov.w	r2, #0
 80081bc:	f04f 0300 	mov.w	r3, #0
 80081c0:	00eb      	lsls	r3, r5, #3
 80081c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081c6:	00e2      	lsls	r2, r4, #3
 80081c8:	4614      	mov	r4, r2
 80081ca:	461d      	mov	r5, r3
 80081cc:	4643      	mov	r3, r8
 80081ce:	18e3      	adds	r3, r4, r3
 80081d0:	603b      	str	r3, [r7, #0]
 80081d2:	464b      	mov	r3, r9
 80081d4:	eb45 0303 	adc.w	r3, r5, r3
 80081d8:	607b      	str	r3, [r7, #4]
 80081da:	f04f 0200 	mov.w	r2, #0
 80081de:	f04f 0300 	mov.w	r3, #0
 80081e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80081e6:	4629      	mov	r1, r5
 80081e8:	028b      	lsls	r3, r1, #10
 80081ea:	4621      	mov	r1, r4
 80081ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80081f0:	4621      	mov	r1, r4
 80081f2:	028a      	lsls	r2, r1, #10
 80081f4:	4610      	mov	r0, r2
 80081f6:	4619      	mov	r1, r3
 80081f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081fa:	2200      	movs	r2, #0
 80081fc:	61bb      	str	r3, [r7, #24]
 80081fe:	61fa      	str	r2, [r7, #28]
 8008200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008204:	f7f8 fd40 	bl	8000c88 <__aeabi_uldivmod>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4613      	mov	r3, r2
 800820e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008210:	4b0b      	ldr	r3, [pc, #44]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x200>)
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	0c1b      	lsrs	r3, r3, #16
 8008216:	f003 0303 	and.w	r3, r3, #3
 800821a:	3301      	adds	r3, #1
 800821c:	005b      	lsls	r3, r3, #1
 800821e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8008220:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008224:	fbb2 f3f3 	udiv	r3, r2, r3
 8008228:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800822a:	e002      	b.n	8008232 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800822c:	4b05      	ldr	r3, [pc, #20]	@ (8008244 <HAL_RCC_GetSysClockFreq+0x204>)
 800822e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008232:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008234:	4618      	mov	r0, r3
 8008236:	3750      	adds	r7, #80	@ 0x50
 8008238:	46bd      	mov	sp, r7
 800823a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800823e:	bf00      	nop
 8008240:	40023800 	.word	0x40023800
 8008244:	00f42400 	.word	0x00f42400
 8008248:	007a1200 	.word	0x007a1200

0800824c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800824c:	b480      	push	{r7}
 800824e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008250:	4b03      	ldr	r3, [pc, #12]	@ (8008260 <HAL_RCC_GetHCLKFreq+0x14>)
 8008252:	681b      	ldr	r3, [r3, #0]
}
 8008254:	4618      	mov	r0, r3
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	20000104 	.word	0x20000104

08008264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008268:	f7ff fff0 	bl	800824c <HAL_RCC_GetHCLKFreq>
 800826c:	4602      	mov	r2, r0
 800826e:	4b05      	ldr	r3, [pc, #20]	@ (8008284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	0a9b      	lsrs	r3, r3, #10
 8008274:	f003 0307 	and.w	r3, r3, #7
 8008278:	4903      	ldr	r1, [pc, #12]	@ (8008288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800827a:	5ccb      	ldrb	r3, [r1, r3]
 800827c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008280:	4618      	mov	r0, r3
 8008282:	bd80      	pop	{r7, pc}
 8008284:	40023800 	.word	0x40023800
 8008288:	0800dfb8 	.word	0x0800dfb8

0800828c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008290:	f7ff ffdc 	bl	800824c <HAL_RCC_GetHCLKFreq>
 8008294:	4602      	mov	r2, r0
 8008296:	4b05      	ldr	r3, [pc, #20]	@ (80082ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	0b5b      	lsrs	r3, r3, #13
 800829c:	f003 0307 	and.w	r3, r3, #7
 80082a0:	4903      	ldr	r1, [pc, #12]	@ (80082b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082a2:	5ccb      	ldrb	r3, [r1, r3]
 80082a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	40023800 	.word	0x40023800
 80082b0:	0800dfb8 	.word	0x0800dfb8

080082b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80082c0:	2300      	movs	r3, #0
 80082c2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 0301 	and.w	r3, r3, #1
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10b      	bne.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d105      	bne.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d075      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80082e8:	4b91      	ldr	r3, [pc, #580]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80082ee:	f7fd f8f5 	bl	80054dc <HAL_GetTick>
 80082f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082f4:	e008      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80082f6:	f7fd f8f1 	bl	80054dc <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	2b02      	cmp	r3, #2
 8008302:	d901      	bls.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e189      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008308:	4b8a      	ldr	r3, [pc, #552]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1f0      	bne.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	2b00      	cmp	r3, #0
 800831e:	d009      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	019a      	lsls	r2, r3, #6
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	071b      	lsls	r3, r3, #28
 800832c:	4981      	ldr	r1, [pc, #516]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800832e:	4313      	orrs	r3, r2
 8008330:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0302 	and.w	r3, r3, #2
 800833c:	2b00      	cmp	r3, #0
 800833e:	d01f      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008340:	4b7c      	ldr	r3, [pc, #496]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008342:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008346:	0f1b      	lsrs	r3, r3, #28
 8008348:	f003 0307 	and.w	r3, r3, #7
 800834c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	019a      	lsls	r2, r3, #6
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	061b      	lsls	r3, r3, #24
 800835a:	431a      	orrs	r2, r3
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	071b      	lsls	r3, r3, #28
 8008360:	4974      	ldr	r1, [pc, #464]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008362:	4313      	orrs	r3, r2
 8008364:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008368:	4b72      	ldr	r3, [pc, #456]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800836a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800836e:	f023 021f 	bic.w	r2, r3, #31
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	3b01      	subs	r3, #1
 8008378:	496e      	ldr	r1, [pc, #440]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800837a:	4313      	orrs	r3, r2
 800837c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00d      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	019a      	lsls	r2, r3, #6
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	061b      	lsls	r3, r3, #24
 8008398:	431a      	orrs	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	071b      	lsls	r3, r3, #28
 80083a0:	4964      	ldr	r1, [pc, #400]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80083a8:	4b61      	ldr	r3, [pc, #388]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80083aa:	2201      	movs	r2, #1
 80083ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80083ae:	f7fd f895 	bl	80054dc <HAL_GetTick>
 80083b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80083b4:	e008      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80083b6:	f7fd f891 	bl	80054dc <HAL_GetTick>
 80083ba:	4602      	mov	r2, r0
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d901      	bls.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e129      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80083c8:	4b5a      	ldr	r3, [pc, #360]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d0f0      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 0304 	and.w	r3, r3, #4
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d105      	bne.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d079      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80083ec:	4b52      	ldr	r3, [pc, #328]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80083ee:	2200      	movs	r2, #0
 80083f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80083f2:	f7fd f873 	bl	80054dc <HAL_GetTick>
 80083f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80083f8:	e008      	b.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80083fa:	f7fd f86f 	bl	80054dc <HAL_GetTick>
 80083fe:	4602      	mov	r2, r0
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	2b02      	cmp	r3, #2
 8008406:	d901      	bls.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e107      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800840c:	4b49      	ldr	r3, [pc, #292]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008418:	d0ef      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0304 	and.w	r3, r3, #4
 8008422:	2b00      	cmp	r3, #0
 8008424:	d020      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008426:	4b43      	ldr	r3, [pc, #268]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800842c:	0f1b      	lsrs	r3, r3, #28
 800842e:	f003 0307 	and.w	r3, r3, #7
 8008432:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	019a      	lsls	r2, r3, #6
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	061b      	lsls	r3, r3, #24
 8008440:	431a      	orrs	r2, r3
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	071b      	lsls	r3, r3, #28
 8008446:	493b      	ldr	r1, [pc, #236]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008448:	4313      	orrs	r3, r2
 800844a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800844e:	4b39      	ldr	r3, [pc, #228]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008450:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008454:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a1b      	ldr	r3, [r3, #32]
 800845c:	3b01      	subs	r3, #1
 800845e:	021b      	lsls	r3, r3, #8
 8008460:	4934      	ldr	r1, [pc, #208]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008462:	4313      	orrs	r3, r2
 8008464:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 0308 	and.w	r3, r3, #8
 8008470:	2b00      	cmp	r3, #0
 8008472:	d01e      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008474:	4b2f      	ldr	r3, [pc, #188]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800847a:	0e1b      	lsrs	r3, r3, #24
 800847c:	f003 030f 	and.w	r3, r3, #15
 8008480:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	019a      	lsls	r2, r3, #6
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	061b      	lsls	r3, r3, #24
 800848c:	431a      	orrs	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	071b      	lsls	r3, r3, #28
 8008494:	4927      	ldr	r1, [pc, #156]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008496:	4313      	orrs	r3, r2
 8008498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800849c:	4b25      	ldr	r3, [pc, #148]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800849e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084a2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084aa:	4922      	ldr	r1, [pc, #136]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084ac:	4313      	orrs	r3, r2
 80084ae:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80084b2:	4b21      	ldr	r3, [pc, #132]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80084b4:	2201      	movs	r2, #1
 80084b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80084b8:	f7fd f810 	bl	80054dc <HAL_GetTick>
 80084bc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80084be:	e008      	b.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80084c0:	f7fd f80c 	bl	80054dc <HAL_GetTick>
 80084c4:	4602      	mov	r2, r0
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d901      	bls.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e0a4      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80084d2:	4b18      	ldr	r3, [pc, #96]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084de:	d1ef      	bne.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 0320 	and.w	r3, r3, #32
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f000 808b 	beq.w	8008604 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80084ee:	2300      	movs	r3, #0
 80084f0:	60fb      	str	r3, [r7, #12]
 80084f2:	4b10      	ldr	r3, [pc, #64]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f6:	4a0f      	ldr	r2, [pc, #60]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80084fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008506:	60fb      	str	r3, [r7, #12]
 8008508:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800850a:	4b0c      	ldr	r3, [pc, #48]	@ (800853c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a0b      	ldr	r2, [pc, #44]	@ (800853c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008514:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008516:	f7fc ffe1 	bl	80054dc <HAL_GetTick>
 800851a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800851c:	e010      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800851e:	f7fc ffdd 	bl	80054dc <HAL_GetTick>
 8008522:	4602      	mov	r2, r0
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	2b02      	cmp	r3, #2
 800852a:	d909      	bls.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800852c:	2303      	movs	r3, #3
 800852e:	e075      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008530:	42470068 	.word	0x42470068
 8008534:	40023800 	.word	0x40023800
 8008538:	42470070 	.word	0x42470070
 800853c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008540:	4b38      	ldr	r3, [pc, #224]	@ (8008624 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008548:	2b00      	cmp	r3, #0
 800854a:	d0e8      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800854c:	4b36      	ldr	r3, [pc, #216]	@ (8008628 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800854e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008550:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008554:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d02f      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008560:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	429a      	cmp	r2, r3
 8008568:	d028      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800856a:	4b2f      	ldr	r3, [pc, #188]	@ (8008628 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800856c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800856e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008572:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008574:	4b2d      	ldr	r3, [pc, #180]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008576:	2201      	movs	r2, #1
 8008578:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800857a:	4b2c      	ldr	r3, [pc, #176]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800857c:	2200      	movs	r2, #0
 800857e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008580:	4a29      	ldr	r2, [pc, #164]	@ (8008628 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008586:	4b28      	ldr	r3, [pc, #160]	@ (8008628 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b01      	cmp	r3, #1
 8008590:	d114      	bne.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008592:	f7fc ffa3 	bl	80054dc <HAL_GetTick>
 8008596:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008598:	e00a      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800859a:	f7fc ff9f 	bl	80054dc <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d901      	bls.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e035      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085b0:	4b1d      	ldr	r3, [pc, #116]	@ (8008628 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d0ee      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085c8:	d10d      	bne.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80085ca:	4b17      	ldr	r3, [pc, #92]	@ (8008628 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80085da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085de:	4912      	ldr	r1, [pc, #72]	@ (8008628 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085e0:	4313      	orrs	r3, r2
 80085e2:	608b      	str	r3, [r1, #8]
 80085e4:	e005      	b.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80085e6:	4b10      	ldr	r3, [pc, #64]	@ (8008628 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	4a0f      	ldr	r2, [pc, #60]	@ (8008628 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085ec:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80085f0:	6093      	str	r3, [r2, #8]
 80085f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008628 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085f4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085fe:	490a      	ldr	r1, [pc, #40]	@ (8008628 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008600:	4313      	orrs	r3, r2
 8008602:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0310 	and.w	r3, r3, #16
 800860c:	2b00      	cmp	r3, #0
 800860e:	d004      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8008616:	4b06      	ldr	r3, [pc, #24]	@ (8008630 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008618:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	40007000 	.word	0x40007000
 8008628:	40023800 	.word	0x40023800
 800862c:	42470e40 	.word	0x42470e40
 8008630:	424711e0 	.word	0x424711e0

08008634 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d101      	bne.n	8008648 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	e025      	b.n	8008694 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800864e:	b2db      	uxtb	r3, r3
 8008650:	2b00      	cmp	r3, #0
 8008652:	d106      	bne.n	8008662 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f81d 	bl	800869c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2202      	movs	r2, #2
 8008666:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	3304      	adds	r3, #4
 8008672:	4619      	mov	r1, r3
 8008674:	4610      	mov	r0, r2
 8008676:	f001 fd0f 	bl	800a098 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6818      	ldr	r0, [r3, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	461a      	mov	r2, r3
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	f001 fd7a 	bl	800a17e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d101      	bne.n	80086cc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80086c8:	2302      	movs	r3, #2
 80086ca:	e018      	b.n	80086fe <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2202      	movs	r2, #2
 80086d0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	68b9      	ldr	r1, [r7, #8]
 80086dc:	4618      	mov	r0, r3
 80086de:	f001 fdcd 	bl	800a27c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d104      	bne.n	80086f4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2205      	movs	r2, #5
 80086ee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80086f2:	e003      	b.n	80086fc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }
  
  return HAL_OK;  
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008716:	b2db      	uxtb	r3, r3
 8008718:	2b02      	cmp	r3, #2
 800871a:	d101      	bne.n	8008720 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800871c:	2302      	movs	r3, #2
 800871e:	e00e      	b.n	800873e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2202      	movs	r2, #2
 8008724:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	4618      	mov	r0, r3
 8008730:	f001 fde0 	bl	800a2f4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;   
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3708      	adds	r7, #8
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b082      	sub	sp, #8
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e05d      	b.n	8008814 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800875e:	b2db      	uxtb	r3, r3
 8008760:	2b00      	cmp	r3, #0
 8008762:	d106      	bne.n	8008772 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f87d 	bl	800886c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2202      	movs	r2, #2
 8008776:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008788:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	431a      	orrs	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	431a      	orrs	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	431a      	orrs	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	695b      	ldr	r3, [r3, #20]
 80087a4:	431a      	orrs	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	699b      	ldr	r3, [r3, #24]
 80087aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087ae:	431a      	orrs	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	431a      	orrs	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	ea42 0103 	orr.w	r1, r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	0c1b      	lsrs	r3, r3, #16
 80087d0:	f003 0104 	and.w	r1, r3, #4
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	430a      	orrs	r2, r1
 80087de:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087e8:	d104      	bne.n	80087f4 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80087f2:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	69da      	ldr	r2, [r3, #28]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008802:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d101      	bne.n	800882e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e01a      	b.n	8008864 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2202      	movs	r2, #2
 8008832:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008844:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f81a 	bl	8008880 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b088      	sub	sp, #32
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	603b      	str	r3, [r7, #0]
 80088a0:	4613      	mov	r3, r2
 80088a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d101      	bne.n	80088b6 <HAL_SPI_Transmit+0x22>
 80088b2:	2302      	movs	r3, #2
 80088b4:	e140      	b.n	8008b38 <HAL_SPI_Transmit+0x2a4>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088be:	f7fc fe0d 	bl	80054dc <HAL_GetTick>
 80088c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80088c4:	88fb      	ldrh	r3, [r7, #6]
 80088c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d002      	beq.n	80088da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80088d4:	2302      	movs	r3, #2
 80088d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80088d8:	e125      	b.n	8008b26 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d002      	beq.n	80088e6 <HAL_SPI_Transmit+0x52>
 80088e0:	88fb      	ldrh	r3, [r7, #6]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d102      	bne.n	80088ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80088ea:	e11c      	b.n	8008b26 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2203      	movs	r2, #3
 80088f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	88fa      	ldrh	r2, [r7, #6]
 8008904:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	88fa      	ldrh	r2, [r7, #6]
 800890a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008932:	d107      	bne.n	8008944 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008942:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800894c:	d10f      	bne.n	800896e <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800895c:	601a      	str	r2, [r3, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800896c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008978:	2b40      	cmp	r3, #64	@ 0x40
 800897a:	d007      	beq.n	800898c <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800898a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008994:	d14b      	bne.n	8008a2e <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <HAL_SPI_Transmit+0x110>
 800899e:	8afb      	ldrh	r3, [r7, #22]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d13e      	bne.n	8008a22 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089a8:	881a      	ldrh	r2, [r3, #0]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089b4:	1c9a      	adds	r2, r3, #2
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089be:	b29b      	uxth	r3, r3
 80089c0:	3b01      	subs	r3, #1
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80089c8:	e02b      	b.n	8008a22 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d112      	bne.n	80089fe <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089dc:	881a      	ldrh	r2, [r3, #0]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089e8:	1c9a      	adds	r2, r3, #2
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	3b01      	subs	r3, #1
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80089fc:	e011      	b.n	8008a22 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089fe:	f7fc fd6d 	bl	80054dc <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	683a      	ldr	r2, [r7, #0]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d803      	bhi.n	8008a16 <HAL_SPI_Transmit+0x182>
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a14:	d102      	bne.n	8008a1c <HAL_SPI_Transmit+0x188>
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d102      	bne.n	8008a22 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008a20:	e081      	b.n	8008b26 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1ce      	bne.n	80089ca <HAL_SPI_Transmit+0x136>
 8008a2c:	e04c      	b.n	8008ac8 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d002      	beq.n	8008a3c <HAL_SPI_Transmit+0x1a8>
 8008a36:	8afb      	ldrh	r3, [r7, #22]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d140      	bne.n	8008abe <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	330c      	adds	r3, #12
 8008a46:	7812      	ldrb	r2, [r2, #0]
 8008a48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a4e:	1c5a      	adds	r2, r3, #1
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008a62:	e02c      	b.n	8008abe <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d113      	bne.n	8008a9a <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	330c      	adds	r3, #12
 8008a7c:	7812      	ldrb	r2, [r2, #0]
 8008a7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a84:	1c5a      	adds	r2, r3, #1
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	3b01      	subs	r3, #1
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008a98:	e011      	b.n	8008abe <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a9a:	f7fc fd1f 	bl	80054dc <HAL_GetTick>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	683a      	ldr	r2, [r7, #0]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d803      	bhi.n	8008ab2 <HAL_SPI_Transmit+0x21e>
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab0:	d102      	bne.n	8008ab8 <HAL_SPI_Transmit+0x224>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d102      	bne.n	8008abe <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008abc:	e033      	b.n	8008b26 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1cd      	bne.n	8008a64 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008acc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ad0:	d107      	bne.n	8008ae2 <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008ae0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ae2:	69ba      	ldr	r2, [r7, #24]
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f000 fc94 	bl	8009414 <SPI_EndRxTxTransaction>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2220      	movs	r2, #32
 8008af6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10a      	bne.n	8008b16 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b00:	2300      	movs	r3, #0
 8008b02:	613b      	str	r3, [r7, #16]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	613b      	str	r3, [r7, #16]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	613b      	str	r3, [r7, #16]
 8008b14:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d002      	beq.n	8008b24 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	77fb      	strb	r3, [r7, #31]
 8008b22:	e000      	b.n	8008b26 <HAL_SPI_Transmit+0x292>
  }

error:
 8008b24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008b36:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3720      	adds	r7, #32
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b088      	sub	sp, #32
 8008b44:	af02      	add	r7, sp, #8
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	603b      	str	r3, [r7, #0]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b5c:	d112      	bne.n	8008b84 <HAL_SPI_Receive+0x44>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10e      	bne.n	8008b84 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2204      	movs	r2, #4
 8008b6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008b6e:	88fa      	ldrh	r2, [r7, #6]
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	4613      	mov	r3, r2
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	68b9      	ldr	r1, [r7, #8]
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f000 f95f 	bl	8008e3e <HAL_SPI_TransmitReceive>
 8008b80:	4603      	mov	r3, r0
 8008b82:	e158      	b.n	8008e36 <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d101      	bne.n	8008b92 <HAL_SPI_Receive+0x52>
 8008b8e:	2302      	movs	r3, #2
 8008b90:	e151      	b.n	8008e36 <HAL_SPI_Receive+0x2f6>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b9a:	f7fc fc9f 	bl	80054dc <HAL_GetTick>
 8008b9e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d002      	beq.n	8008bb2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008bac:	2302      	movs	r3, #2
 8008bae:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008bb0:	e138      	b.n	8008e24 <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d002      	beq.n	8008bbe <HAL_SPI_Receive+0x7e>
 8008bb8:	88fb      	ldrh	r3, [r7, #6]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d102      	bne.n	8008bc4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008bc2:	e12f      	b.n	8008e24 <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2204      	movs	r2, #4
 8008bc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	88fa      	ldrh	r2, [r7, #6]
 8008bdc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	88fa      	ldrh	r2, [r7, #6]
 8008be2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c0a:	d116      	bne.n	8008c3a <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008c1a:	601a      	str	r2, [r3, #0]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c2a:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	3b01      	subs	r3, #1
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c42:	d107      	bne.n	8008c54 <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008c52:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c5e:	2b40      	cmp	r3, #64	@ 0x40
 8008c60:	d007      	beq.n	8008c72 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c70:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d162      	bne.n	8008d40 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008c7a:	e02e      	b.n	8008cda <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d115      	bne.n	8008cb6 <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f103 020c 	add.w	r2, r3, #12
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c96:	7812      	ldrb	r2, [r2, #0]
 8008c98:	b2d2      	uxtb	r2, r2
 8008c9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca0:	1c5a      	adds	r2, r3, #1
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	3b01      	subs	r3, #1
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008cb4:	e011      	b.n	8008cda <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cb6:	f7fc fc11 	bl	80054dc <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d803      	bhi.n	8008cce <HAL_SPI_Receive+0x18e>
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ccc:	d102      	bne.n	8008cd4 <HAL_SPI_Receive+0x194>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d102      	bne.n	8008cda <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008cd8:	e0a4      	b.n	8008e24 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1cb      	bne.n	8008c7c <HAL_SPI_Receive+0x13c>
 8008ce4:	e031      	b.n	8008d4a <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	f003 0301 	and.w	r3, r3, #1
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d113      	bne.n	8008d1c <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68da      	ldr	r2, [r3, #12]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cfe:	b292      	uxth	r2, r2
 8008d00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d06:	1c9a      	adds	r2, r3, #2
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	3b01      	subs	r3, #1
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008d1a:	e011      	b.n	8008d40 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d1c:	f7fc fbde 	bl	80054dc <HAL_GetTick>
 8008d20:	4602      	mov	r2, r0
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	683a      	ldr	r2, [r7, #0]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d803      	bhi.n	8008d34 <HAL_SPI_Receive+0x1f4>
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d32:	d102      	bne.n	8008d3a <HAL_SPI_Receive+0x1fa>
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d102      	bne.n	8008d40 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008d3e:	e071      	b.n	8008e24 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1cd      	bne.n	8008ce6 <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d52:	d142      	bne.n	8008dda <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008d62:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f000 fa81 	bl	8009276 <SPI_WaitFlagStateUntilTimeout>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d002      	beq.n	8008d80 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	75fb      	strb	r3, [r7, #23]
      goto error;
 8008d7e:	e051      	b.n	8008e24 <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d88:	d107      	bne.n	8008d9a <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68da      	ldr	r2, [r3, #12]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d94:	b292      	uxth	r2, r2
 8008d96:	801a      	strh	r2, [r3, #0]
 8008d98:	e008      	b.n	8008dac <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f103 020c 	add.w	r2, r3, #12
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da6:	7812      	ldrb	r2, [r2, #0]
 8008da8:	b2d2      	uxtb	r2, r2
 8008daa:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	2201      	movs	r2, #1
 8008db4:	2101      	movs	r1, #1
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f000 fa5d 	bl	8009276 <SPI_WaitFlagStateUntilTimeout>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d008      	beq.n	8008dd4 <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dc6:	f043 0202 	orr.w	r2, r3, #2
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	75fb      	strb	r3, [r7, #23]
      goto error;
 8008dd2:	e027      	b.n	8008e24 <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f000 fab3 	bl	800934a <SPI_EndRxTransaction>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d002      	beq.n	8008df0 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2220      	movs	r2, #32
 8008dee:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	f003 0310 	and.w	r3, r3, #16
 8008dfa:	2b10      	cmp	r3, #16
 8008dfc:	d10a      	bne.n	8008e14 <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e02:	f043 0202 	orr.w	r2, r3, #2
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8008e12:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d002      	beq.n	8008e22 <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	75fb      	strb	r3, [r7, #23]
 8008e20:	e000      	b.n	8008e24 <HAL_SPI_Receive+0x2e4>
  }

error :
 8008e22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b08e      	sub	sp, #56	@ 0x38
 8008e42:	af02      	add	r7, sp, #8
 8008e44:	60f8      	str	r0, [r7, #12]
 8008e46:	60b9      	str	r1, [r7, #8]
 8008e48:	607a      	str	r2, [r7, #4]
 8008e4a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d101      	bne.n	8008e64 <HAL_SPI_TransmitReceive+0x26>
 8008e60:	2302      	movs	r3, #2
 8008e62:	e1f6      	b.n	8009252 <HAL_SPI_TransmitReceive+0x414>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e6c:	f7fc fb36 	bl	80054dc <HAL_GetTick>
 8008e70:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008e78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008e82:	887b      	ldrh	r3, [r7, #2]
 8008e84:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008e86:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d00f      	beq.n	8008eae <HAL_SPI_TransmitReceive+0x70>
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e94:	d107      	bne.n	8008ea6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d103      	bne.n	8008ea6 <HAL_SPI_TransmitReceive+0x68>
 8008e9e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008ea2:	2b04      	cmp	r3, #4
 8008ea4:	d003      	beq.n	8008eae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008ea6:	2302      	movs	r3, #2
 8008ea8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008eac:	e1c7      	b.n	800923e <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d005      	beq.n	8008ec0 <HAL_SPI_TransmitReceive+0x82>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d002      	beq.n	8008ec0 <HAL_SPI_TransmitReceive+0x82>
 8008eba:	887b      	ldrh	r3, [r7, #2]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d103      	bne.n	8008ec8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008ec6:	e1ba      	b.n	800923e <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b04      	cmp	r3, #4
 8008ed2:	d003      	beq.n	8008edc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2205      	movs	r2, #5
 8008ed8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	887a      	ldrh	r2, [r7, #2]
 8008eec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	887a      	ldrh	r2, [r7, #2]
 8008ef2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	887a      	ldrh	r2, [r7, #2]
 8008efe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	887a      	ldrh	r2, [r7, #2]
 8008f04:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f1a:	d10f      	bne.n	8008f3c <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f2a:	601a      	str	r2, [r3, #0]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f3a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f46:	2b40      	cmp	r3, #64	@ 0x40
 8008f48:	d007      	beq.n	8008f5a <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f62:	f040 808b 	bne.w	800907c <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d002      	beq.n	8008f74 <HAL_SPI_TransmitReceive+0x136>
 8008f6e:	8b7b      	ldrh	r3, [r7, #26]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d178      	bne.n	8009066 <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f78:	881a      	ldrh	r2, [r3, #0]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f84:	1c9a      	adds	r2, r3, #2
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	3b01      	subs	r3, #1
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f98:	e065      	b.n	8009066 <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	f003 0302 	and.w	r3, r3, #2
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d12d      	bne.n	8009004 <HAL_SPI_TransmitReceive+0x1c6>
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d028      	beq.n	8009004 <HAL_SPI_TransmitReceive+0x1c6>
 8008fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d125      	bne.n	8009004 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fbc:	881a      	ldrh	r2, [r3, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fc8:	1c9a      	adds	r2, r3, #2
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d10c      	bne.n	8009004 <HAL_SPI_TransmitReceive+0x1c6>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ff2:	d107      	bne.n	8009004 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009002:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	f003 0301 	and.w	r3, r3, #1
 800900e:	2b01      	cmp	r3, #1
 8009010:	d119      	bne.n	8009046 <HAL_SPI_TransmitReceive+0x208>
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009016:	b29b      	uxth	r3, r3
 8009018:	2b00      	cmp	r3, #0
 800901a:	d014      	beq.n	8009046 <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68da      	ldr	r2, [r3, #12]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009026:	b292      	uxth	r2, r2
 8009028:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800902e:	1c9a      	adds	r2, r3, #2
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009038:	b29b      	uxth	r3, r3
 800903a:	3b01      	subs	r3, #1
 800903c:	b29a      	uxth	r2, r3
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009042:	2301      	movs	r3, #1
 8009044:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009046:	f7fc fa49 	bl	80054dc <HAL_GetTick>
 800904a:	4602      	mov	r2, r0
 800904c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009052:	429a      	cmp	r2, r3
 8009054:	d807      	bhi.n	8009066 <HAL_SPI_TransmitReceive+0x228>
 8009056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800905c:	d003      	beq.n	8009066 <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 800905e:	2303      	movs	r3, #3
 8009060:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8009064:	e0eb      	b.n	800923e <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800906a:	b29b      	uxth	r3, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	d194      	bne.n	8008f9a <HAL_SPI_TransmitReceive+0x15c>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009074:	b29b      	uxth	r3, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	d18f      	bne.n	8008f9a <HAL_SPI_TransmitReceive+0x15c>
 800907a:	e08e      	b.n	800919a <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <HAL_SPI_TransmitReceive+0x24c>
 8009084:	8b7b      	ldrh	r3, [r7, #26]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d17d      	bne.n	8009186 <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	330c      	adds	r3, #12
 8009094:	7812      	ldrb	r2, [r2, #0]
 8009096:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800909c:	1c5a      	adds	r2, r3, #1
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	3b01      	subs	r3, #1
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090b0:	e069      	b.n	8009186 <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	f003 0302 	and.w	r3, r3, #2
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d12e      	bne.n	800911e <HAL_SPI_TransmitReceive+0x2e0>
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d029      	beq.n	800911e <HAL_SPI_TransmitReceive+0x2e0>
 80090ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d126      	bne.n	800911e <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	330c      	adds	r3, #12
 80090da:	7812      	ldrb	r2, [r2, #0]
 80090dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090e2:	1c5a      	adds	r2, r3, #1
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	3b01      	subs	r3, #1
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80090f6:	2300      	movs	r3, #0
 80090f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090fe:	b29b      	uxth	r3, r3
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10c      	bne.n	800911e <HAL_SPI_TransmitReceive+0x2e0>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009108:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800910c:	d107      	bne.n	800911e <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800911c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	f003 0301 	and.w	r3, r3, #1
 8009128:	2b01      	cmp	r3, #1
 800912a:	d119      	bne.n	8009160 <HAL_SPI_TransmitReceive+0x322>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009130:	b29b      	uxth	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	d014      	beq.n	8009160 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68da      	ldr	r2, [r3, #12]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009140:	b2d2      	uxtb	r2, r2
 8009142:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009148:	1c5a      	adds	r2, r3, #1
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009152:	b29b      	uxth	r3, r3
 8009154:	3b01      	subs	r3, #1
 8009156:	b29a      	uxth	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800915c:	2301      	movs	r3, #1
 800915e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009160:	f7fc f9bc 	bl	80054dc <HAL_GetTick>
 8009164:	4602      	mov	r2, r0
 8009166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800916c:	429a      	cmp	r2, r3
 800916e:	d803      	bhi.n	8009178 <HAL_SPI_TransmitReceive+0x33a>
 8009170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009176:	d102      	bne.n	800917e <HAL_SPI_TransmitReceive+0x340>
 8009178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917a:	2b00      	cmp	r3, #0
 800917c:	d103      	bne.n	8009186 <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8009184:	e05b      	b.n	800923e <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800918a:	b29b      	uxth	r3, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	d190      	bne.n	80090b2 <HAL_SPI_TransmitReceive+0x274>
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009194:	b29b      	uxth	r3, r3
 8009196:	2b00      	cmp	r3, #0
 8009198:	d18b      	bne.n	80090b2 <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800919e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091a2:	d117      	bne.n	80091d4 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80091a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091aa:	2201      	movs	r2, #1
 80091ac:	2101      	movs	r1, #1
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f000 f861 	bl	8009276 <SPI_WaitFlagStateUntilTimeout>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d009      	beq.n	80091ce <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091be:	f043 0202 	orr.w	r2, r3, #2
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      goto error;
 80091cc:	e037      	b.n	800923e <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	f003 0310 	and.w	r3, r3, #16
 80091de:	2b10      	cmp	r3, #16
 80091e0:	d10d      	bne.n	80091fe <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091e6:	f043 0202 	orr.w	r2, r3, #2
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80091f6:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009200:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f000 f906 	bl	8009414 <SPI_EndRxTxTransaction>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d006      	beq.n	800921c <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2220      	movs	r2, #32
 8009218:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800921a:	e010      	b.n	800923e <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10b      	bne.n	800923c <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009224:	2300      	movs	r3, #0
 8009226:	617b      	str	r3, [r7, #20]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	617b      	str	r3, [r7, #20]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	617b      	str	r3, [r7, #20]
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	e000      	b.n	800923e <HAL_SPI_TransmitReceive+0x400>
  }

error :
 800923c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2201      	movs	r2, #1
 8009242:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800924e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8009252:	4618      	mov	r0, r3
 8009254:	3730      	adds	r7, #48	@ 0x30
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800925a:	b480      	push	{r7}
 800925c:	b083      	sub	sp, #12
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009268:	b2db      	uxtb	r3, r3
}
 800926a:	4618      	mov	r0, r3
 800926c:	370c      	adds	r7, #12
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b084      	sub	sp, #16
 800927a:	af00      	add	r7, sp, #0
 800927c:	60f8      	str	r0, [r7, #12]
 800927e:	60b9      	str	r1, [r7, #8]
 8009280:	603b      	str	r3, [r7, #0]
 8009282:	4613      	mov	r3, r2
 8009284:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009286:	e04c      	b.n	8009322 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800928e:	d048      	beq.n	8009322 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009290:	f7fc f924 	bl	80054dc <HAL_GetTick>
 8009294:	4602      	mov	r2, r0
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	429a      	cmp	r2, r3
 800929e:	d902      	bls.n	80092a6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d13d      	bne.n	8009322 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80092b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092be:	d111      	bne.n	80092e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092c8:	d004      	beq.n	80092d4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092d2:	d107      	bne.n	80092e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092ec:	d10f      	bne.n	800930e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800930c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800931e:	2303      	movs	r3, #3
 8009320:	e00f      	b.n	8009342 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	689a      	ldr	r2, [r3, #8]
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	4013      	ands	r3, r2
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	429a      	cmp	r2, r3
 8009330:	bf0c      	ite	eq
 8009332:	2301      	moveq	r3, #1
 8009334:	2300      	movne	r3, #0
 8009336:	b2db      	uxtb	r3, r3
 8009338:	461a      	mov	r2, r3
 800933a:	79fb      	ldrb	r3, [r7, #7]
 800933c:	429a      	cmp	r2, r3
 800933e:	d1a3      	bne.n	8009288 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b086      	sub	sp, #24
 800934e:	af02      	add	r7, sp, #8
 8009350:	60f8      	str	r0, [r7, #12]
 8009352:	60b9      	str	r1, [r7, #8]
 8009354:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800935e:	d111      	bne.n	8009384 <SPI_EndRxTransaction+0x3a>
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009368:	d004      	beq.n	8009374 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009372:	d107      	bne.n	8009384 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009382:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800938c:	d12a      	bne.n	80093e4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009396:	d012      	beq.n	80093be <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	2200      	movs	r2, #0
 80093a0:	2180      	movs	r1, #128	@ 0x80
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f7ff ff67 	bl	8009276 <SPI_WaitFlagStateUntilTimeout>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d02d      	beq.n	800940a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093b2:	f043 0220 	orr.w	r2, r3, #32
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e026      	b.n	800940c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2200      	movs	r2, #0
 80093c6:	2101      	movs	r1, #1
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f7ff ff54 	bl	8009276 <SPI_WaitFlagStateUntilTimeout>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d01a      	beq.n	800940a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093d8:	f043 0220 	orr.w	r2, r3, #32
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e013      	b.n	800940c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	2200      	movs	r2, #0
 80093ec:	2101      	movs	r1, #1
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f7ff ff41 	bl	8009276 <SPI_WaitFlagStateUntilTimeout>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d007      	beq.n	800940a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093fe:	f043 0220 	orr.w	r2, r3, #32
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	e000      	b.n	800940c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b088      	sub	sp, #32
 8009418:	af02      	add	r7, sp, #8
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009420:	4b1b      	ldr	r3, [pc, #108]	@ (8009490 <SPI_EndRxTxTransaction+0x7c>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a1b      	ldr	r2, [pc, #108]	@ (8009494 <SPI_EndRxTxTransaction+0x80>)
 8009426:	fba2 2303 	umull	r2, r3, r2, r3
 800942a:	0d5b      	lsrs	r3, r3, #21
 800942c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009430:	fb02 f303 	mul.w	r3, r2, r3
 8009434:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800943e:	d112      	bne.n	8009466 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2200      	movs	r2, #0
 8009448:	2180      	movs	r1, #128	@ 0x80
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f7ff ff13 	bl	8009276 <SPI_WaitFlagStateUntilTimeout>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d016      	beq.n	8009484 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800945a:	f043 0220 	orr.w	r2, r3, #32
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e00f      	b.n	8009486 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00a      	beq.n	8009482 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	3b01      	subs	r3, #1
 8009470:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800947c:	2b80      	cmp	r3, #128	@ 0x80
 800947e:	d0f2      	beq.n	8009466 <SPI_EndRxTxTransaction+0x52>
 8009480:	e000      	b.n	8009484 <SPI_EndRxTxTransaction+0x70>
        break;
 8009482:	bf00      	nop
  }

  return HAL_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3718      	adds	r7, #24
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	20000104 	.word	0x20000104
 8009494:	165e9f81 	.word	0x165e9f81

08009498 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e03f      	b.n	800952a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d106      	bne.n	80094c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7f9 fd34 	bl	8002f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2224      	movs	r2, #36	@ 0x24
 80094c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68da      	ldr	r2, [r3, #12]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80094da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f90b 	bl	80096f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	691a      	ldr	r2, [r3, #16]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80094f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	695a      	ldr	r2, [r3, #20]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009500:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68da      	ldr	r2, [r3, #12]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009510:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2220      	movs	r2, #32
 800951c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2220      	movs	r2, #32
 8009524:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b088      	sub	sp, #32
 8009536:	af02      	add	r7, sp, #8
 8009538:	60f8      	str	r0, [r7, #12]
 800953a:	60b9      	str	r1, [r7, #8]
 800953c:	603b      	str	r3, [r7, #0]
 800953e:	4613      	mov	r3, r2
 8009540:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8009542:	2300      	movs	r3, #0
 8009544:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2b20      	cmp	r3, #32
 8009550:	f040 8083 	bne.w	800965a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d002      	beq.n	8009560 <HAL_UART_Transmit+0x2e>
 800955a:	88fb      	ldrh	r3, [r7, #6]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d101      	bne.n	8009564 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e07b      	b.n	800965c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800956a:	2b01      	cmp	r3, #1
 800956c:	d101      	bne.n	8009572 <HAL_UART_Transmit+0x40>
 800956e:	2302      	movs	r3, #2
 8009570:	e074      	b.n	800965c <HAL_UART_Transmit+0x12a>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2201      	movs	r2, #1
 8009576:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2221      	movs	r2, #33	@ 0x21
 8009584:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009588:	f7fb ffa8 	bl	80054dc <HAL_GetTick>
 800958c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	88fa      	ldrh	r2, [r7, #6]
 8009592:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	88fa      	ldrh	r2, [r7, #6]
 8009598:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 80095a2:	e042      	b.n	800962a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	3b01      	subs	r3, #1
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095ba:	d122      	bne.n	8009602 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	2200      	movs	r2, #0
 80095c4:	2180      	movs	r1, #128	@ 0x80
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f000 f84c 	bl	8009664 <UART_WaitOnFlagUntilTimeout>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e042      	b.n	800965c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	881b      	ldrh	r3, [r3, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095e8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d103      	bne.n	80095fa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	3302      	adds	r3, #2
 80095f6:	60bb      	str	r3, [r7, #8]
 80095f8:	e017      	b.n	800962a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	3301      	adds	r3, #1
 80095fe:	60bb      	str	r3, [r7, #8]
 8009600:	e013      	b.n	800962a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2200      	movs	r2, #0
 800960a:	2180      	movs	r1, #128	@ 0x80
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 f829 	bl	8009664 <UART_WaitOnFlagUntilTimeout>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d001      	beq.n	800961c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8009618:	2303      	movs	r3, #3
 800961a:	e01f      	b.n	800965c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	1c5a      	adds	r2, r3, #1
 8009620:	60ba      	str	r2, [r7, #8]
 8009622:	781a      	ldrb	r2, [r3, #0]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800962e:	b29b      	uxth	r3, r3
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1b7      	bne.n	80095a4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	2200      	movs	r2, #0
 800963c:	2140      	movs	r1, #64	@ 0x40
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f000 f810 	bl	8009664 <UART_WaitOnFlagUntilTimeout>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d001      	beq.n	800964e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800964a:	2303      	movs	r3, #3
 800964c:	e006      	b.n	800965c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2220      	movs	r2, #32
 8009652:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 8009656:	2300      	movs	r3, #0
 8009658:	e000      	b.n	800965c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800965a:	2302      	movs	r3, #2
  }
}
 800965c:	4618      	mov	r0, r3
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	603b      	str	r3, [r7, #0]
 8009670:	4613      	mov	r3, r2
 8009672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009674:	e02c      	b.n	80096d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800967c:	d028      	beq.n	80096d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d007      	beq.n	8009694 <UART_WaitOnFlagUntilTimeout+0x30>
 8009684:	f7fb ff2a 	bl	80054dc <HAL_GetTick>
 8009688:	4602      	mov	r2, r0
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	69ba      	ldr	r2, [r7, #24]
 8009690:	429a      	cmp	r2, r3
 8009692:	d21d      	bcs.n	80096d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68da      	ldr	r2, [r3, #12]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80096a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	695a      	ldr	r2, [r3, #20]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f022 0201 	bic.w	r2, r2, #1
 80096b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2220      	movs	r2, #32
 80096b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2220      	movs	r2, #32
 80096c0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 80096cc:	2303      	movs	r3, #3
 80096ce:	e00f      	b.n	80096f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	4013      	ands	r3, r2
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	429a      	cmp	r2, r3
 80096de:	bf0c      	ite	eq
 80096e0:	2301      	moveq	r3, #1
 80096e2:	2300      	movne	r3, #0
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	461a      	mov	r2, r3
 80096e8:	79fb      	ldrb	r3, [r7, #7]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d0c3      	beq.n	8009676 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096fc:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8009700:	af00      	add	r7, sp, #0
 8009702:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009706:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009712:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009716:	68d9      	ldr	r1, [r3, #12]
 8009718:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	ea40 0301 	orr.w	r3, r0, r1
 8009722:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009724:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009728:	689a      	ldr	r2, [r3, #8]
 800972a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	431a      	orrs	r2, r3
 8009732:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009736:	695b      	ldr	r3, [r3, #20]
 8009738:	431a      	orrs	r2, r3
 800973a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800973e:	69db      	ldr	r3, [r3, #28]
 8009740:	4313      	orrs	r3, r2
 8009742:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 8009746:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009752:	f021 010c 	bic.w	r1, r1, #12
 8009756:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8009760:	430b      	orrs	r3, r1
 8009762:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009764:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	695b      	ldr	r3, [r3, #20]
 800976c:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009770:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009774:	6999      	ldr	r1, [r3, #24]
 8009776:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	ea40 0301 	orr.w	r3, r0, r1
 8009780:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009782:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009786:	69db      	ldr	r3, [r3, #28]
 8009788:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800978c:	f040 824a 	bne.w	8009c24 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009790:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	4b96      	ldr	r3, [pc, #600]	@ (80099f0 <UART_SetConfig+0x2f8>)
 8009798:	429a      	cmp	r2, r3
 800979a:	d006      	beq.n	80097aa <UART_SetConfig+0xb2>
 800979c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	4b94      	ldr	r3, [pc, #592]	@ (80099f4 <UART_SetConfig+0x2fc>)
 80097a4:	429a      	cmp	r2, r3
 80097a6:	f040 8129 	bne.w	80099fc <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80097aa:	f7fe fd6f 	bl	800828c <HAL_RCC_GetPCLK2Freq>
 80097ae:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80097b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80097b6:	2200      	movs	r2, #0
 80097b8:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 80097bc:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 80097c0:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 80097c4:	4622      	mov	r2, r4
 80097c6:	462b      	mov	r3, r5
 80097c8:	1891      	adds	r1, r2, r2
 80097ca:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80097ce:	415b      	adcs	r3, r3
 80097d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80097d4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80097d8:	4621      	mov	r1, r4
 80097da:	1851      	adds	r1, r2, r1
 80097dc:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80097e0:	4629      	mov	r1, r5
 80097e2:	414b      	adcs	r3, r1
 80097e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80097e8:	f04f 0200 	mov.w	r2, #0
 80097ec:	f04f 0300 	mov.w	r3, #0
 80097f0:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 80097f4:	4649      	mov	r1, r9
 80097f6:	00cb      	lsls	r3, r1, #3
 80097f8:	4641      	mov	r1, r8
 80097fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097fe:	4641      	mov	r1, r8
 8009800:	00ca      	lsls	r2, r1, #3
 8009802:	4610      	mov	r0, r2
 8009804:	4619      	mov	r1, r3
 8009806:	4603      	mov	r3, r0
 8009808:	4622      	mov	r2, r4
 800980a:	189b      	adds	r3, r3, r2
 800980c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8009810:	462b      	mov	r3, r5
 8009812:	460a      	mov	r2, r1
 8009814:	eb42 0303 	adc.w	r3, r2, r3
 8009818:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 800981c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8009828:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 800982c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 8009830:	460b      	mov	r3, r1
 8009832:	18db      	adds	r3, r3, r3
 8009834:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009838:	4613      	mov	r3, r2
 800983a:	eb42 0303 	adc.w	r3, r2, r3
 800983e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009842:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8009846:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 800984a:	f7f7 fa1d 	bl	8000c88 <__aeabi_uldivmod>
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	4b69      	ldr	r3, [pc, #420]	@ (80099f8 <UART_SetConfig+0x300>)
 8009854:	fba3 2302 	umull	r2, r3, r3, r2
 8009858:	095b      	lsrs	r3, r3, #5
 800985a:	011c      	lsls	r4, r3, #4
 800985c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009860:	2200      	movs	r2, #0
 8009862:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8009866:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800986a:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 800986e:	4642      	mov	r2, r8
 8009870:	464b      	mov	r3, r9
 8009872:	1891      	adds	r1, r2, r2
 8009874:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8009878:	415b      	adcs	r3, r3
 800987a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800987e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8009882:	4641      	mov	r1, r8
 8009884:	1851      	adds	r1, r2, r1
 8009886:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800988a:	4649      	mov	r1, r9
 800988c:	414b      	adcs	r3, r1
 800988e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009892:	f04f 0200 	mov.w	r2, #0
 8009896:	f04f 0300 	mov.w	r3, #0
 800989a:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 800989e:	4659      	mov	r1, fp
 80098a0:	00cb      	lsls	r3, r1, #3
 80098a2:	4651      	mov	r1, sl
 80098a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098a8:	4651      	mov	r1, sl
 80098aa:	00ca      	lsls	r2, r1, #3
 80098ac:	4610      	mov	r0, r2
 80098ae:	4619      	mov	r1, r3
 80098b0:	4603      	mov	r3, r0
 80098b2:	4642      	mov	r2, r8
 80098b4:	189b      	adds	r3, r3, r2
 80098b6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80098ba:	464b      	mov	r3, r9
 80098bc:	460a      	mov	r2, r1
 80098be:	eb42 0303 	adc.w	r3, r2, r3
 80098c2:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80098c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80098d2:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 80098d6:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 80098da:	460b      	mov	r3, r1
 80098dc:	18db      	adds	r3, r3, r3
 80098de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80098e2:	4613      	mov	r3, r2
 80098e4:	eb42 0303 	adc.w	r3, r2, r3
 80098e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80098ec:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80098f0:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 80098f4:	f7f7 f9c8 	bl	8000c88 <__aeabi_uldivmod>
 80098f8:	4602      	mov	r2, r0
 80098fa:	460b      	mov	r3, r1
 80098fc:	4611      	mov	r1, r2
 80098fe:	4b3e      	ldr	r3, [pc, #248]	@ (80099f8 <UART_SetConfig+0x300>)
 8009900:	fba3 2301 	umull	r2, r3, r3, r1
 8009904:	095b      	lsrs	r3, r3, #5
 8009906:	2264      	movs	r2, #100	@ 0x64
 8009908:	fb02 f303 	mul.w	r3, r2, r3
 800990c:	1acb      	subs	r3, r1, r3
 800990e:	00db      	lsls	r3, r3, #3
 8009910:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009914:	4b38      	ldr	r3, [pc, #224]	@ (80099f8 <UART_SetConfig+0x300>)
 8009916:	fba3 2302 	umull	r2, r3, r3, r2
 800991a:	095b      	lsrs	r3, r3, #5
 800991c:	005b      	lsls	r3, r3, #1
 800991e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009922:	441c      	add	r4, r3
 8009924:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009928:	2200      	movs	r2, #0
 800992a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800992e:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8009932:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8009936:	4642      	mov	r2, r8
 8009938:	464b      	mov	r3, r9
 800993a:	1891      	adds	r1, r2, r2
 800993c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8009940:	415b      	adcs	r3, r3
 8009942:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009946:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800994a:	4641      	mov	r1, r8
 800994c:	1851      	adds	r1, r2, r1
 800994e:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8009952:	4649      	mov	r1, r9
 8009954:	414b      	adcs	r3, r1
 8009956:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800995a:	f04f 0200 	mov.w	r2, #0
 800995e:	f04f 0300 	mov.w	r3, #0
 8009962:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 8009966:	4659      	mov	r1, fp
 8009968:	00cb      	lsls	r3, r1, #3
 800996a:	4651      	mov	r1, sl
 800996c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009970:	4651      	mov	r1, sl
 8009972:	00ca      	lsls	r2, r1, #3
 8009974:	4610      	mov	r0, r2
 8009976:	4619      	mov	r1, r3
 8009978:	4603      	mov	r3, r0
 800997a:	4642      	mov	r2, r8
 800997c:	189b      	adds	r3, r3, r2
 800997e:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8009982:	464b      	mov	r3, r9
 8009984:	460a      	mov	r2, r1
 8009986:	eb42 0303 	adc.w	r3, r2, r3
 800998a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800998e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 800999a:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 800999e:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 80099a2:	460b      	mov	r3, r1
 80099a4:	18db      	adds	r3, r3, r3
 80099a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80099aa:	4613      	mov	r3, r2
 80099ac:	eb42 0303 	adc.w	r3, r2, r3
 80099b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80099b4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80099b8:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 80099bc:	f7f7 f964 	bl	8000c88 <__aeabi_uldivmod>
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
 80099c4:	4b0c      	ldr	r3, [pc, #48]	@ (80099f8 <UART_SetConfig+0x300>)
 80099c6:	fba3 1302 	umull	r1, r3, r3, r2
 80099ca:	095b      	lsrs	r3, r3, #5
 80099cc:	2164      	movs	r1, #100	@ 0x64
 80099ce:	fb01 f303 	mul.w	r3, r1, r3
 80099d2:	1ad3      	subs	r3, r2, r3
 80099d4:	00db      	lsls	r3, r3, #3
 80099d6:	3332      	adds	r3, #50	@ 0x32
 80099d8:	4a07      	ldr	r2, [pc, #28]	@ (80099f8 <UART_SetConfig+0x300>)
 80099da:	fba2 2303 	umull	r2, r3, r2, r3
 80099de:	095b      	lsrs	r3, r3, #5
 80099e0:	f003 0207 	and.w	r2, r3, #7
 80099e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4422      	add	r2, r4
 80099ec:	609a      	str	r2, [r3, #8]
 80099ee:	e34a      	b.n	800a086 <UART_SetConfig+0x98e>
 80099f0:	40011000 	.word	0x40011000
 80099f4:	40011400 	.word	0x40011400
 80099f8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80099fc:	f7fe fc32 	bl	8008264 <HAL_RCC_GetPCLK1Freq>
 8009a00:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a04:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8009a0e:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8009a12:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 8009a16:	4622      	mov	r2, r4
 8009a18:	462b      	mov	r3, r5
 8009a1a:	1891      	adds	r1, r2, r2
 8009a1c:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8009a20:	415b      	adcs	r3, r3
 8009a22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a26:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009a2a:	4621      	mov	r1, r4
 8009a2c:	eb12 0a01 	adds.w	sl, r2, r1
 8009a30:	4629      	mov	r1, r5
 8009a32:	eb43 0b01 	adc.w	fp, r3, r1
 8009a36:	f04f 0200 	mov.w	r2, #0
 8009a3a:	f04f 0300 	mov.w	r3, #0
 8009a3e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009a42:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009a46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a4a:	4692      	mov	sl, r2
 8009a4c:	469b      	mov	fp, r3
 8009a4e:	4623      	mov	r3, r4
 8009a50:	eb1a 0303 	adds.w	r3, sl, r3
 8009a54:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8009a58:	462b      	mov	r3, r5
 8009a5a:	eb4b 0303 	adc.w	r3, fp, r3
 8009a5e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8009a62:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8009a6e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8009a72:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 8009a76:	460b      	mov	r3, r1
 8009a78:	18db      	adds	r3, r3, r3
 8009a7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a7e:	4613      	mov	r3, r2
 8009a80:	eb42 0303 	adc.w	r3, r2, r3
 8009a84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a88:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8009a8c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8009a90:	f7f7 f8fa 	bl	8000c88 <__aeabi_uldivmod>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	4b61      	ldr	r3, [pc, #388]	@ (8009c20 <UART_SetConfig+0x528>)
 8009a9a:	fba3 2302 	umull	r2, r3, r3, r2
 8009a9e:	095b      	lsrs	r3, r3, #5
 8009aa0:	011c      	lsls	r4, r3, #4
 8009aa2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8009aac:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8009ab0:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 8009ab4:	4642      	mov	r2, r8
 8009ab6:	464b      	mov	r3, r9
 8009ab8:	1891      	adds	r1, r2, r2
 8009aba:	67b9      	str	r1, [r7, #120]	@ 0x78
 8009abc:	415b      	adcs	r3, r3
 8009abe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009ac0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8009ac4:	4641      	mov	r1, r8
 8009ac6:	1851      	adds	r1, r2, r1
 8009ac8:	6739      	str	r1, [r7, #112]	@ 0x70
 8009aca:	4649      	mov	r1, r9
 8009acc:	414b      	adcs	r3, r1
 8009ace:	677b      	str	r3, [r7, #116]	@ 0x74
 8009ad0:	f04f 0200 	mov.w	r2, #0
 8009ad4:	f04f 0300 	mov.w	r3, #0
 8009ad8:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 8009adc:	4659      	mov	r1, fp
 8009ade:	00cb      	lsls	r3, r1, #3
 8009ae0:	4651      	mov	r1, sl
 8009ae2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ae6:	4651      	mov	r1, sl
 8009ae8:	00ca      	lsls	r2, r1, #3
 8009aea:	4610      	mov	r0, r2
 8009aec:	4619      	mov	r1, r3
 8009aee:	4603      	mov	r3, r0
 8009af0:	4642      	mov	r2, r8
 8009af2:	189b      	adds	r3, r3, r2
 8009af4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8009af8:	464b      	mov	r3, r9
 8009afa:	460a      	mov	r2, r1
 8009afc:	eb42 0303 	adc.w	r3, r2, r3
 8009b00:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8009b04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8009b10:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8009b14:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 8009b18:	460b      	mov	r3, r1
 8009b1a:	18db      	adds	r3, r3, r3
 8009b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b1e:	4613      	mov	r3, r2
 8009b20:	eb42 0303 	adc.w	r3, r2, r3
 8009b24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b26:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009b2a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8009b2e:	f7f7 f8ab 	bl	8000c88 <__aeabi_uldivmod>
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	4611      	mov	r1, r2
 8009b38:	4b39      	ldr	r3, [pc, #228]	@ (8009c20 <UART_SetConfig+0x528>)
 8009b3a:	fba3 2301 	umull	r2, r3, r3, r1
 8009b3e:	095b      	lsrs	r3, r3, #5
 8009b40:	2264      	movs	r2, #100	@ 0x64
 8009b42:	fb02 f303 	mul.w	r3, r2, r3
 8009b46:	1acb      	subs	r3, r1, r3
 8009b48:	00db      	lsls	r3, r3, #3
 8009b4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009b4e:	4b34      	ldr	r3, [pc, #208]	@ (8009c20 <UART_SetConfig+0x528>)
 8009b50:	fba3 2302 	umull	r2, r3, r3, r2
 8009b54:	095b      	lsrs	r3, r3, #5
 8009b56:	005b      	lsls	r3, r3, #1
 8009b58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009b5c:	441c      	add	r4, r3
 8009b5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009b62:	2200      	movs	r2, #0
 8009b64:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8009b68:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8009b6c:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 8009b70:	4642      	mov	r2, r8
 8009b72:	464b      	mov	r3, r9
 8009b74:	1891      	adds	r1, r2, r2
 8009b76:	6639      	str	r1, [r7, #96]	@ 0x60
 8009b78:	415b      	adcs	r3, r3
 8009b7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b7c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009b80:	4641      	mov	r1, r8
 8009b82:	1851      	adds	r1, r2, r1
 8009b84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009b86:	4649      	mov	r1, r9
 8009b88:	414b      	adcs	r3, r1
 8009b8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b8c:	f04f 0200 	mov.w	r2, #0
 8009b90:	f04f 0300 	mov.w	r3, #0
 8009b94:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8009b98:	4659      	mov	r1, fp
 8009b9a:	00cb      	lsls	r3, r1, #3
 8009b9c:	4651      	mov	r1, sl
 8009b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ba2:	4651      	mov	r1, sl
 8009ba4:	00ca      	lsls	r2, r1, #3
 8009ba6:	4610      	mov	r0, r2
 8009ba8:	4619      	mov	r1, r3
 8009baa:	4603      	mov	r3, r0
 8009bac:	4642      	mov	r2, r8
 8009bae:	189b      	adds	r3, r3, r2
 8009bb0:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8009bb4:	464b      	mov	r3, r9
 8009bb6:	460a      	mov	r2, r1
 8009bb8:	eb42 0303 	adc.w	r3, r2, r3
 8009bbc:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8009bc0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8009bcc:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8009bd0:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	18db      	adds	r3, r3, r3
 8009bd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8009bda:	4613      	mov	r3, r2
 8009bdc:	eb42 0303 	adc.w	r3, r2, r3
 8009be0:	657b      	str	r3, [r7, #84]	@ 0x54
 8009be2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009be6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8009bea:	f7f7 f84d 	bl	8000c88 <__aeabi_uldivmod>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8009c20 <UART_SetConfig+0x528>)
 8009bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8009bf8:	095b      	lsrs	r3, r3, #5
 8009bfa:	2164      	movs	r1, #100	@ 0x64
 8009bfc:	fb01 f303 	mul.w	r3, r1, r3
 8009c00:	1ad3      	subs	r3, r2, r3
 8009c02:	00db      	lsls	r3, r3, #3
 8009c04:	3332      	adds	r3, #50	@ 0x32
 8009c06:	4a06      	ldr	r2, [pc, #24]	@ (8009c20 <UART_SetConfig+0x528>)
 8009c08:	fba2 2303 	umull	r2, r3, r2, r3
 8009c0c:	095b      	lsrs	r3, r3, #5
 8009c0e:	f003 0207 	and.w	r2, r3, #7
 8009c12:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4422      	add	r2, r4
 8009c1a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009c1c:	e233      	b.n	800a086 <UART_SetConfig+0x98e>
 8009c1e:	bf00      	nop
 8009c20:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	4b8d      	ldr	r3, [pc, #564]	@ (8009e60 <UART_SetConfig+0x768>)
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d006      	beq.n	8009c3e <UART_SetConfig+0x546>
 8009c30:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	4b8b      	ldr	r3, [pc, #556]	@ (8009e64 <UART_SetConfig+0x76c>)
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	f040 8117 	bne.w	8009e6c <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c3e:	f7fe fb25 	bl	800828c <HAL_RCC_GetPCLK2Freq>
 8009c42:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c46:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8009c50:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8009c54:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8009c58:	4622      	mov	r2, r4
 8009c5a:	462b      	mov	r3, r5
 8009c5c:	1891      	adds	r1, r2, r2
 8009c5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009c60:	415b      	adcs	r3, r3
 8009c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009c68:	4621      	mov	r1, r4
 8009c6a:	eb12 0801 	adds.w	r8, r2, r1
 8009c6e:	4629      	mov	r1, r5
 8009c70:	eb43 0901 	adc.w	r9, r3, r1
 8009c74:	f04f 0200 	mov.w	r2, #0
 8009c78:	f04f 0300 	mov.w	r3, #0
 8009c7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c88:	4690      	mov	r8, r2
 8009c8a:	4699      	mov	r9, r3
 8009c8c:	4623      	mov	r3, r4
 8009c8e:	eb18 0303 	adds.w	r3, r8, r3
 8009c92:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8009c96:	462b      	mov	r3, r5
 8009c98:	eb49 0303 	adc.w	r3, r9, r3
 8009c9c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8009ca0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8009cac:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8009cb0:	f04f 0200 	mov.w	r2, #0
 8009cb4:	f04f 0300 	mov.w	r3, #0
 8009cb8:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	008b      	lsls	r3, r1, #2
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	008a      	lsls	r2, r1, #2
 8009cca:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8009cce:	f7f6 ffdb 	bl	8000c88 <__aeabi_uldivmod>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	4b64      	ldr	r3, [pc, #400]	@ (8009e68 <UART_SetConfig+0x770>)
 8009cd8:	fba3 2302 	umull	r2, r3, r3, r2
 8009cdc:	095b      	lsrs	r3, r3, #5
 8009cde:	011c      	lsls	r4, r3, #4
 8009ce0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8009cea:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8009cee:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 8009cf2:	4642      	mov	r2, r8
 8009cf4:	464b      	mov	r3, r9
 8009cf6:	1891      	adds	r1, r2, r2
 8009cf8:	6439      	str	r1, [r7, #64]	@ 0x40
 8009cfa:	415b      	adcs	r3, r3
 8009cfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009d02:	4641      	mov	r1, r8
 8009d04:	1851      	adds	r1, r2, r1
 8009d06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009d08:	4649      	mov	r1, r9
 8009d0a:	414b      	adcs	r3, r1
 8009d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d0e:	f04f 0200 	mov.w	r2, #0
 8009d12:	f04f 0300 	mov.w	r3, #0
 8009d16:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8009d1a:	4659      	mov	r1, fp
 8009d1c:	00cb      	lsls	r3, r1, #3
 8009d1e:	4651      	mov	r1, sl
 8009d20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d24:	4651      	mov	r1, sl
 8009d26:	00ca      	lsls	r2, r1, #3
 8009d28:	4610      	mov	r0, r2
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	4642      	mov	r2, r8
 8009d30:	189b      	adds	r3, r3, r2
 8009d32:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8009d36:	464b      	mov	r3, r9
 8009d38:	460a      	mov	r2, r1
 8009d3a:	eb42 0303 	adc.w	r3, r2, r3
 8009d3e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8009d42:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8009d4e:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8009d52:	f04f 0200 	mov.w	r2, #0
 8009d56:	f04f 0300 	mov.w	r3, #0
 8009d5a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8009d5e:	4649      	mov	r1, r9
 8009d60:	008b      	lsls	r3, r1, #2
 8009d62:	4641      	mov	r1, r8
 8009d64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d68:	4641      	mov	r1, r8
 8009d6a:	008a      	lsls	r2, r1, #2
 8009d6c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8009d70:	f7f6 ff8a 	bl	8000c88 <__aeabi_uldivmod>
 8009d74:	4602      	mov	r2, r0
 8009d76:	460b      	mov	r3, r1
 8009d78:	4611      	mov	r1, r2
 8009d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8009e68 <UART_SetConfig+0x770>)
 8009d7c:	fba3 2301 	umull	r2, r3, r3, r1
 8009d80:	095b      	lsrs	r3, r3, #5
 8009d82:	2264      	movs	r2, #100	@ 0x64
 8009d84:	fb02 f303 	mul.w	r3, r2, r3
 8009d88:	1acb      	subs	r3, r1, r3
 8009d8a:	011b      	lsls	r3, r3, #4
 8009d8c:	3332      	adds	r3, #50	@ 0x32
 8009d8e:	4a36      	ldr	r2, [pc, #216]	@ (8009e68 <UART_SetConfig+0x770>)
 8009d90:	fba2 2303 	umull	r2, r3, r2, r3
 8009d94:	095b      	lsrs	r3, r3, #5
 8009d96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009d9a:	441c      	add	r4, r3
 8009d9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009da0:	2200      	movs	r2, #0
 8009da2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009da6:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8009daa:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 8009dae:	4642      	mov	r2, r8
 8009db0:	464b      	mov	r3, r9
 8009db2:	1891      	adds	r1, r2, r2
 8009db4:	6339      	str	r1, [r7, #48]	@ 0x30
 8009db6:	415b      	adcs	r3, r3
 8009db8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8009dbe:	4641      	mov	r1, r8
 8009dc0:	1851      	adds	r1, r2, r1
 8009dc2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009dc4:	4649      	mov	r1, r9
 8009dc6:	414b      	adcs	r3, r1
 8009dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009dca:	f04f 0200 	mov.w	r2, #0
 8009dce:	f04f 0300 	mov.w	r3, #0
 8009dd2:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8009dd6:	4659      	mov	r1, fp
 8009dd8:	00cb      	lsls	r3, r1, #3
 8009dda:	4651      	mov	r1, sl
 8009ddc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009de0:	4651      	mov	r1, sl
 8009de2:	00ca      	lsls	r2, r1, #3
 8009de4:	4610      	mov	r0, r2
 8009de6:	4619      	mov	r1, r3
 8009de8:	4603      	mov	r3, r0
 8009dea:	4642      	mov	r2, r8
 8009dec:	189b      	adds	r3, r3, r2
 8009dee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8009df2:	464b      	mov	r3, r9
 8009df4:	460a      	mov	r2, r1
 8009df6:	eb42 0303 	adc.w	r3, r2, r3
 8009dfa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8009dfe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8009e0a:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8009e0e:	f04f 0200 	mov.w	r2, #0
 8009e12:	f04f 0300 	mov.w	r3, #0
 8009e16:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	008b      	lsls	r3, r1, #2
 8009e1e:	4641      	mov	r1, r8
 8009e20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e24:	4641      	mov	r1, r8
 8009e26:	008a      	lsls	r2, r1, #2
 8009e28:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8009e2c:	f7f6 ff2c 	bl	8000c88 <__aeabi_uldivmod>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4b0c      	ldr	r3, [pc, #48]	@ (8009e68 <UART_SetConfig+0x770>)
 8009e36:	fba3 1302 	umull	r1, r3, r3, r2
 8009e3a:	095b      	lsrs	r3, r3, #5
 8009e3c:	2164      	movs	r1, #100	@ 0x64
 8009e3e:	fb01 f303 	mul.w	r3, r1, r3
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	011b      	lsls	r3, r3, #4
 8009e46:	3332      	adds	r3, #50	@ 0x32
 8009e48:	4a07      	ldr	r2, [pc, #28]	@ (8009e68 <UART_SetConfig+0x770>)
 8009e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e4e:	095b      	lsrs	r3, r3, #5
 8009e50:	f003 020f 	and.w	r2, r3, #15
 8009e54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4422      	add	r2, r4
 8009e5c:	609a      	str	r2, [r3, #8]
 8009e5e:	e112      	b.n	800a086 <UART_SetConfig+0x98e>
 8009e60:	40011000 	.word	0x40011000
 8009e64:	40011400 	.word	0x40011400
 8009e68:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8009e6c:	f7fe f9fa 	bl	8008264 <HAL_RCC_GetPCLK1Freq>
 8009e70:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e74:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8009e7e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8009e82:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 8009e86:	4642      	mov	r2, r8
 8009e88:	464b      	mov	r3, r9
 8009e8a:	1891      	adds	r1, r2, r2
 8009e8c:	6239      	str	r1, [r7, #32]
 8009e8e:	415b      	adcs	r3, r3
 8009e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e96:	4641      	mov	r1, r8
 8009e98:	1854      	adds	r4, r2, r1
 8009e9a:	4649      	mov	r1, r9
 8009e9c:	eb43 0501 	adc.w	r5, r3, r1
 8009ea0:	f04f 0200 	mov.w	r2, #0
 8009ea4:	f04f 0300 	mov.w	r3, #0
 8009ea8:	00eb      	lsls	r3, r5, #3
 8009eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009eae:	00e2      	lsls	r2, r4, #3
 8009eb0:	4614      	mov	r4, r2
 8009eb2:	461d      	mov	r5, r3
 8009eb4:	4643      	mov	r3, r8
 8009eb6:	18e3      	adds	r3, r4, r3
 8009eb8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8009ebc:	464b      	mov	r3, r9
 8009ebe:	eb45 0303 	adc.w	r3, r5, r3
 8009ec2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8009ec6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009ed2:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8009ed6:	f04f 0200 	mov.w	r2, #0
 8009eda:	f04f 0300 	mov.w	r3, #0
 8009ede:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8009ee2:	4629      	mov	r1, r5
 8009ee4:	008b      	lsls	r3, r1, #2
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009eec:	4621      	mov	r1, r4
 8009eee:	008a      	lsls	r2, r1, #2
 8009ef0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8009ef4:	f7f6 fec8 	bl	8000c88 <__aeabi_uldivmod>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	460b      	mov	r3, r1
 8009efc:	4b65      	ldr	r3, [pc, #404]	@ (800a094 <UART_SetConfig+0x99c>)
 8009efe:	fba3 2302 	umull	r2, r3, r3, r2
 8009f02:	095b      	lsrs	r3, r3, #5
 8009f04:	011c      	lsls	r4, r3, #4
 8009f06:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009f10:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8009f14:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8009f18:	4642      	mov	r2, r8
 8009f1a:	464b      	mov	r3, r9
 8009f1c:	1891      	adds	r1, r2, r2
 8009f1e:	61b9      	str	r1, [r7, #24]
 8009f20:	415b      	adcs	r3, r3
 8009f22:	61fb      	str	r3, [r7, #28]
 8009f24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f28:	4641      	mov	r1, r8
 8009f2a:	1851      	adds	r1, r2, r1
 8009f2c:	6139      	str	r1, [r7, #16]
 8009f2e:	4649      	mov	r1, r9
 8009f30:	414b      	adcs	r3, r1
 8009f32:	617b      	str	r3, [r7, #20]
 8009f34:	f04f 0200 	mov.w	r2, #0
 8009f38:	f04f 0300 	mov.w	r3, #0
 8009f3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f40:	4659      	mov	r1, fp
 8009f42:	00cb      	lsls	r3, r1, #3
 8009f44:	4651      	mov	r1, sl
 8009f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f4a:	4651      	mov	r1, sl
 8009f4c:	00ca      	lsls	r2, r1, #3
 8009f4e:	4610      	mov	r0, r2
 8009f50:	4619      	mov	r1, r3
 8009f52:	4603      	mov	r3, r0
 8009f54:	4642      	mov	r2, r8
 8009f56:	189b      	adds	r3, r3, r2
 8009f58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009f5c:	464b      	mov	r3, r9
 8009f5e:	460a      	mov	r2, r1
 8009f60:	eb42 0303 	adc.w	r3, r2, r3
 8009f64:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009f68:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009f74:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8009f78:	f04f 0200 	mov.w	r2, #0
 8009f7c:	f04f 0300 	mov.w	r3, #0
 8009f80:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8009f84:	4649      	mov	r1, r9
 8009f86:	008b      	lsls	r3, r1, #2
 8009f88:	4641      	mov	r1, r8
 8009f8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f8e:	4641      	mov	r1, r8
 8009f90:	008a      	lsls	r2, r1, #2
 8009f92:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8009f96:	f7f6 fe77 	bl	8000c88 <__aeabi_uldivmod>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	4b3c      	ldr	r3, [pc, #240]	@ (800a094 <UART_SetConfig+0x99c>)
 8009fa2:	fba3 2301 	umull	r2, r3, r3, r1
 8009fa6:	095b      	lsrs	r3, r3, #5
 8009fa8:	2264      	movs	r2, #100	@ 0x64
 8009faa:	fb02 f303 	mul.w	r3, r2, r3
 8009fae:	1acb      	subs	r3, r1, r3
 8009fb0:	011b      	lsls	r3, r3, #4
 8009fb2:	3332      	adds	r3, #50	@ 0x32
 8009fb4:	4a37      	ldr	r2, [pc, #220]	@ (800a094 <UART_SetConfig+0x99c>)
 8009fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8009fba:	095b      	lsrs	r3, r3, #5
 8009fbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009fc0:	441c      	add	r4, r3
 8009fc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009fcc:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009fd0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8009fd4:	4642      	mov	r2, r8
 8009fd6:	464b      	mov	r3, r9
 8009fd8:	1891      	adds	r1, r2, r2
 8009fda:	60b9      	str	r1, [r7, #8]
 8009fdc:	415b      	adcs	r3, r3
 8009fde:	60fb      	str	r3, [r7, #12]
 8009fe0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009fe4:	4641      	mov	r1, r8
 8009fe6:	1851      	adds	r1, r2, r1
 8009fe8:	6039      	str	r1, [r7, #0]
 8009fea:	4649      	mov	r1, r9
 8009fec:	414b      	adcs	r3, r1
 8009fee:	607b      	str	r3, [r7, #4]
 8009ff0:	f04f 0200 	mov.w	r2, #0
 8009ff4:	f04f 0300 	mov.w	r3, #0
 8009ff8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009ffc:	4659      	mov	r1, fp
 8009ffe:	00cb      	lsls	r3, r1, #3
 800a000:	4651      	mov	r1, sl
 800a002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a006:	4651      	mov	r1, sl
 800a008:	00ca      	lsls	r2, r1, #3
 800a00a:	4610      	mov	r0, r2
 800a00c:	4619      	mov	r1, r3
 800a00e:	4603      	mov	r3, r0
 800a010:	4642      	mov	r2, r8
 800a012:	189b      	adds	r3, r3, r2
 800a014:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a018:	464b      	mov	r3, r9
 800a01a:	460a      	mov	r2, r1
 800a01c:	eb42 0303 	adc.w	r3, r2, r3
 800a020:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a024:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a030:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a034:	f04f 0200 	mov.w	r2, #0
 800a038:	f04f 0300 	mov.w	r3, #0
 800a03c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800a040:	4649      	mov	r1, r9
 800a042:	008b      	lsls	r3, r1, #2
 800a044:	4641      	mov	r1, r8
 800a046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a04a:	4641      	mov	r1, r8
 800a04c:	008a      	lsls	r2, r1, #2
 800a04e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a052:	f7f6 fe19 	bl	8000c88 <__aeabi_uldivmod>
 800a056:	4602      	mov	r2, r0
 800a058:	460b      	mov	r3, r1
 800a05a:	4b0e      	ldr	r3, [pc, #56]	@ (800a094 <UART_SetConfig+0x99c>)
 800a05c:	fba3 1302 	umull	r1, r3, r3, r2
 800a060:	095b      	lsrs	r3, r3, #5
 800a062:	2164      	movs	r1, #100	@ 0x64
 800a064:	fb01 f303 	mul.w	r3, r1, r3
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	011b      	lsls	r3, r3, #4
 800a06c:	3332      	adds	r3, #50	@ 0x32
 800a06e:	4a09      	ldr	r2, [pc, #36]	@ (800a094 <UART_SetConfig+0x99c>)
 800a070:	fba2 2303 	umull	r2, r3, r2, r3
 800a074:	095b      	lsrs	r3, r3, #5
 800a076:	f003 020f 	and.w	r2, r3, #15
 800a07a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4422      	add	r2, r4
 800a082:	609a      	str	r2, [r3, #8]
}
 800a084:	e7ff      	b.n	800a086 <UART_SetConfig+0x98e>
 800a086:	bf00      	nop
 800a088:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800a08c:	46bd      	mov	sp, r7
 800a08e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a092:	bf00      	nop
 800a094:	51eb851f 	.word	0x51eb851f

0800a098 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d029      	beq.n	800a106 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a0be:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a0c2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a0cc:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800a0d2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800a0d8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800a0de:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800a0e4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800a0ea:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800a0f0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                                               Init->ReadBurst          |\
 800a0f6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	601a      	str	r2, [r3, #0]
 800a104:	e034      	b.n	800a170 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a112:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a11c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 800a122:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a124:	68fa      	ldr	r2, [r7, #12]
 800a126:	4313      	orrs	r3, r2
 800a128:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a136:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a13a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a144:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800a14a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800a150:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800a156:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800a15c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	4313      	orrs	r3, r2
 800a162:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3714      	adds	r7, #20
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr

0800a17e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a17e:	b480      	push	{r7}
 800a180:	b087      	sub	sp, #28
 800a182:	af00      	add	r7, sp, #0
 800a184:	60f8      	str	r0, [r7, #12]
 800a186:	60b9      	str	r1, [r7, #8]
 800a188:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800a18a:	2300      	movs	r3, #0
 800a18c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800a18e:	2300      	movs	r3, #0
 800a190:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b01      	cmp	r3, #1
 800a196:	d02e      	beq.n	800a1f6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a1a4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a1b4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a1be:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a1c8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a1d2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	695b      	ldr	r3, [r3, #20]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a1dc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	699b      	ldr	r3, [r3, #24]
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	697a      	ldr	r2, [r7, #20]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	697a      	ldr	r2, [r7, #20]
 800a1f2:	609a      	str	r2, [r3, #8]
 800a1f4:	e03b      	b.n	800a26e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a202:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a206:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	3b01      	subs	r3, #1
 800a20e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	3b01      	subs	r3, #1
 800a216:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a218:	4313      	orrs	r3, r2
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a22c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	3b01      	subs	r3, #1
 800a23a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a23c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	3b01      	subs	r3, #1
 800a244:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a246:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a250:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	699b      	ldr	r3, [r3, #24]
 800a256:	3b01      	subs	r3, #1
 800a258:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a25a:	4313      	orrs	r3, r2
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	4313      	orrs	r3, r2
 800a260:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	697a      	ldr	r2, [r7, #20]
 800a266:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	371c      	adds	r7, #28
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b086      	sub	sp, #24
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800a288:	2300      	movs	r3, #0
 800a28a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800a28c:	2300      	movs	r3, #0
 800a28e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a298:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a2a2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800a2b4:	f7fb f912 	bl	80054dc <HAL_GetTick>
 800a2b8:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a2ba:	e010      	b.n	800a2de <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c2:	d00c      	beq.n	800a2de <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d007      	beq.n	800a2da <FMC_SDRAM_SendCommand+0x5e>
 800a2ca:	f7fb f907 	bl	80054dc <HAL_GetTick>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d201      	bcs.n	800a2de <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	e006      	b.n	800a2ec <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	699b      	ldr	r3, [r3, #24]
 800a2e2:	f003 0320 	and.w	r3, r3, #32
 800a2e6:	2b20      	cmp	r3, #32
 800a2e8:	d0e8      	beq.n	800a2bc <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800a2ea:	2300      	movs	r3, #0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3718      	adds	r7, #24
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	695a      	ldr	r2, [r3, #20]
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	005b      	lsls	r3, r3, #1
 800a306:	431a      	orrs	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	370c      	adds	r7, #12
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr
	...

0800a31c <arm_cfft_radix8by2_f32>:
 800a31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a320:	ed2d 8b08 	vpush	{d8-d11}
 800a324:	4607      	mov	r7, r0
 800a326:	4608      	mov	r0, r1
 800a328:	f8b7 e000 	ldrh.w	lr, [r7]
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800a332:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800a336:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800a33a:	f000 80b0 	beq.w	800a49e <arm_cfft_radix8by2_f32+0x182>
 800a33e:	008b      	lsls	r3, r1, #2
 800a340:	3310      	adds	r3, #16
 800a342:	18c6      	adds	r6, r0, r3
 800a344:	3210      	adds	r2, #16
 800a346:	4443      	add	r3, r8
 800a348:	f100 0510 	add.w	r5, r0, #16
 800a34c:	f108 0410 	add.w	r4, r8, #16
 800a350:	ed54 1a04 	vldr	s3, [r4, #-16]
 800a354:	ed54 6a03 	vldr	s13, [r4, #-12]
 800a358:	ed13 4a04 	vldr	s8, [r3, #-16]
 800a35c:	ed53 3a03 	vldr	s7, [r3, #-12]
 800a360:	ed53 5a02 	vldr	s11, [r3, #-8]
 800a364:	ed13 5a01 	vldr	s10, [r3, #-4]
 800a368:	ed14 0a02 	vldr	s0, [r4, #-8]
 800a36c:	ed54 7a01 	vldr	s15, [r4, #-4]
 800a370:	ed16 2a04 	vldr	s4, [r6, #-16]
 800a374:	ed56 2a03 	vldr	s5, [r6, #-12]
 800a378:	ed15 6a03 	vldr	s12, [r5, #-12]
 800a37c:	ed15 7a01 	vldr	s14, [r5, #-4]
 800a380:	ed15 3a04 	vldr	s6, [r5, #-16]
 800a384:	ed56 0a02 	vldr	s1, [r6, #-8]
 800a388:	ed16 1a01 	vldr	s2, [r6, #-4]
 800a38c:	ed55 4a02 	vldr	s9, [r5, #-8]
 800a390:	ee73 ba21 	vadd.f32	s23, s6, s3
 800a394:	ee36 ba26 	vadd.f32	s22, s12, s13
 800a398:	ee37 aa27 	vadd.f32	s20, s14, s15
 800a39c:	ee72 9a04 	vadd.f32	s19, s4, s8
 800a3a0:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800a3a4:	ee31 8a05 	vadd.f32	s16, s2, s10
 800a3a8:	ee74 aa80 	vadd.f32	s21, s9, s0
 800a3ac:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800a3b0:	ed45 ba04 	vstr	s23, [r5, #-16]
 800a3b4:	ed05 ba03 	vstr	s22, [r5, #-12]
 800a3b8:	ed45 aa02 	vstr	s21, [r5, #-8]
 800a3bc:	ed05 aa01 	vstr	s20, [r5, #-4]
 800a3c0:	ed06 8a01 	vstr	s16, [r6, #-4]
 800a3c4:	ed46 9a04 	vstr	s19, [r6, #-16]
 800a3c8:	ed06 9a03 	vstr	s18, [r6, #-12]
 800a3cc:	ed46 8a02 	vstr	s17, [r6, #-8]
 800a3d0:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a3d4:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800a3d8:	ed12 6a03 	vldr	s12, [r2, #-12]
 800a3dc:	ed52 2a04 	vldr	s5, [r2, #-16]
 800a3e0:	ee33 3a61 	vsub.f32	s6, s6, s3
 800a3e4:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a3e8:	ee26 8a86 	vmul.f32	s16, s13, s12
 800a3ec:	ee24 2a06 	vmul.f32	s4, s8, s12
 800a3f0:	ee63 1a22 	vmul.f32	s3, s6, s5
 800a3f4:	ee24 4a22 	vmul.f32	s8, s8, s5
 800a3f8:	ee23 3a06 	vmul.f32	s6, s6, s12
 800a3fc:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800a400:	ee23 6a86 	vmul.f32	s12, s7, s12
 800a404:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800a408:	ee36 6a04 	vadd.f32	s12, s12, s8
 800a40c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800a410:	ee72 3a63 	vsub.f32	s7, s4, s7
 800a414:	ee71 2a88 	vadd.f32	s5, s3, s16
 800a418:	ed44 6a03 	vstr	s13, [r4, #-12]
 800a41c:	ed44 2a04 	vstr	s5, [r4, #-16]
 800a420:	ed43 3a04 	vstr	s7, [r3, #-16]
 800a424:	ed03 6a03 	vstr	s12, [r3, #-12]
 800a428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a42c:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800a430:	ed12 7a01 	vldr	s14, [r2, #-4]
 800a434:	ed52 5a02 	vldr	s11, [r2, #-8]
 800a438:	ee35 6a41 	vsub.f32	s12, s10, s2
 800a43c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800a440:	ee67 3a87 	vmul.f32	s7, s15, s14
 800a444:	ee26 5a87 	vmul.f32	s10, s13, s14
 800a448:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800a44c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a450:	ee64 4a87 	vmul.f32	s9, s9, s14
 800a454:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a458:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a45c:	ee26 6a25 	vmul.f32	s12, s12, s11
 800a460:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a464:	ee74 5a23 	vadd.f32	s11, s8, s7
 800a468:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a46c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a470:	f1be 0e01 	subs.w	lr, lr, #1
 800a474:	ed44 5a02 	vstr	s11, [r4, #-8]
 800a478:	f105 0510 	add.w	r5, r5, #16
 800a47c:	ed44 7a01 	vstr	s15, [r4, #-4]
 800a480:	f106 0610 	add.w	r6, r6, #16
 800a484:	ed03 6a02 	vstr	s12, [r3, #-8]
 800a488:	ed03 7a01 	vstr	s14, [r3, #-4]
 800a48c:	f102 0210 	add.w	r2, r2, #16
 800a490:	f104 0410 	add.w	r4, r4, #16
 800a494:	f103 0310 	add.w	r3, r3, #16
 800a498:	f47f af5a 	bne.w	800a350 <arm_cfft_radix8by2_f32+0x34>
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	b28c      	uxth	r4, r1
 800a4a0:	4621      	mov	r1, r4
 800a4a2:	2302      	movs	r3, #2
 800a4a4:	f000 fb22 	bl	800aaec <arm_radix8_butterfly_f32>
 800a4a8:	ecbd 8b08 	vpop	{d8-d11}
 800a4ac:	4621      	mov	r1, r4
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	4640      	mov	r0, r8
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b8:	f000 bb18 	b.w	800aaec <arm_radix8_butterfly_f32>

0800a4bc <arm_cfft_radix8by4_f32>:
 800a4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c0:	ed2d 8b0a 	vpush	{d8-d12}
 800a4c4:	8802      	ldrh	r2, [r0, #0]
 800a4c6:	ed91 6a00 	vldr	s12, [r1]
 800a4ca:	b08f      	sub	sp, #60	@ 0x3c
 800a4cc:	460f      	mov	r7, r1
 800a4ce:	0852      	lsrs	r2, r2, #1
 800a4d0:	6841      	ldr	r1, [r0, #4]
 800a4d2:	900c      	str	r0, [sp, #48]	@ 0x30
 800a4d4:	0093      	lsls	r3, r2, #2
 800a4d6:	4638      	mov	r0, r7
 800a4d8:	4418      	add	r0, r3
 800a4da:	4606      	mov	r6, r0
 800a4dc:	9009      	str	r0, [sp, #36]	@ 0x24
 800a4de:	4418      	add	r0, r3
 800a4e0:	edd0 6a00 	vldr	s13, [r0]
 800a4e4:	ed96 4a00 	vldr	s8, [r6]
 800a4e8:	edd6 2a01 	vldr	s5, [r6, #4]
 800a4ec:	edd0 7a01 	vldr	s15, [r0, #4]
 800a4f0:	900a      	str	r0, [sp, #40]	@ 0x28
 800a4f2:	ee76 5a26 	vadd.f32	s11, s12, s13
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	4625      	mov	r5, r4
 800a4fa:	441c      	add	r4, r3
 800a4fc:	edd4 4a00 	vldr	s9, [r4]
 800a500:	ed97 7a01 	vldr	s14, [r7, #4]
 800a504:	ed94 3a01 	vldr	s6, [r4, #4]
 800a508:	9401      	str	r4, [sp, #4]
 800a50a:	ee35 5a84 	vadd.f32	s10, s11, s8
 800a50e:	4630      	mov	r0, r6
 800a510:	ee35 5a24 	vadd.f32	s10, s10, s9
 800a514:	463e      	mov	r6, r7
 800a516:	ee15 ea10 	vmov	lr, s10
 800a51a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a51e:	f846 eb08 	str.w	lr, [r6], #8
 800a522:	ee37 6a27 	vadd.f32	s12, s14, s15
 800a526:	ed90 5a01 	vldr	s10, [r0, #4]
 800a52a:	9605      	str	r6, [sp, #20]
 800a52c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a530:	9e01      	ldr	r6, [sp, #4]
 800a532:	9707      	str	r7, [sp, #28]
 800a534:	ee76 3aa2 	vadd.f32	s7, s13, s5
 800a538:	ed96 2a01 	vldr	s4, [r6, #4]
 800a53c:	ee36 7a05 	vadd.f32	s14, s12, s10
 800a540:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800a544:	ee37 5ac4 	vsub.f32	s10, s15, s8
 800a548:	ee77 7a84 	vadd.f32	s15, s15, s8
 800a54c:	ee33 4ac3 	vsub.f32	s8, s7, s6
 800a550:	4604      	mov	r4, r0
 800a552:	46a3      	mov	fp, r4
 800a554:	ee37 7a02 	vadd.f32	s14, s14, s4
 800a558:	ee35 5a24 	vadd.f32	s10, s10, s9
 800a55c:	ee14 8a10 	vmov	r8, s8
 800a560:	46a4      	mov	ip, r4
 800a562:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800a566:	ed87 7a01 	vstr	s14, [r7, #4]
 800a56a:	f84b 8b08 	str.w	r8, [fp], #8
 800a56e:	f1ac 0704 	sub.w	r7, ip, #4
 800a572:	ed8c 5a01 	vstr	s10, [ip, #4]
 800a576:	f101 0c08 	add.w	ip, r1, #8
 800a57a:	462c      	mov	r4, r5
 800a57c:	f8cd c010 	str.w	ip, [sp, #16]
 800a580:	ee15 ca90 	vmov	ip, s11
 800a584:	ee36 6a62 	vsub.f32	s12, s12, s5
 800a588:	f844 cb08 	str.w	ip, [r4], #8
 800a58c:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800a590:	ee36 6a43 	vsub.f32	s12, s12, s6
 800a594:	9406      	str	r4, [sp, #24]
 800a596:	ee76 6a83 	vadd.f32	s13, s13, s6
 800a59a:	f101 0410 	add.w	r4, r1, #16
 800a59e:	0852      	lsrs	r2, r2, #1
 800a5a0:	9402      	str	r4, [sp, #8]
 800a5a2:	ed85 6a01 	vstr	s12, [r5, #4]
 800a5a6:	462c      	mov	r4, r5
 800a5a8:	f101 0518 	add.w	r5, r1, #24
 800a5ac:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a5ae:	46b2      	mov	sl, r6
 800a5b0:	9503      	str	r5, [sp, #12]
 800a5b2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a5b6:	3a02      	subs	r2, #2
 800a5b8:	ee16 5a90 	vmov	r5, s13
 800a5bc:	46b6      	mov	lr, r6
 800a5be:	4630      	mov	r0, r6
 800a5c0:	0852      	lsrs	r2, r2, #1
 800a5c2:	f84a 5b08 	str.w	r5, [sl], #8
 800a5c6:	f1a0 0604 	sub.w	r6, r0, #4
 800a5ca:	edce 7a01 	vstr	s15, [lr, #4]
 800a5ce:	9208      	str	r2, [sp, #32]
 800a5d0:	f000 8130 	beq.w	800a834 <arm_cfft_radix8by4_f32+0x378>
 800a5d4:	4691      	mov	r9, r2
 800a5d6:	9a07      	ldr	r2, [sp, #28]
 800a5d8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a5dc:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 800a5e0:	3b08      	subs	r3, #8
 800a5e2:	f102 0510 	add.w	r5, r2, #16
 800a5e6:	f101 0c20 	add.w	ip, r1, #32
 800a5ea:	f1a4 020c 	sub.w	r2, r4, #12
 800a5ee:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800a5f2:	4433      	add	r3, r6
 800a5f4:	3410      	adds	r4, #16
 800a5f6:	4650      	mov	r0, sl
 800a5f8:	4659      	mov	r1, fp
 800a5fa:	ed55 3a02 	vldr	s7, [r5, #-8]
 800a5fe:	ed14 5a02 	vldr	s10, [r4, #-8]
 800a602:	ed91 7a00 	vldr	s14, [r1]
 800a606:	edd0 7a00 	vldr	s15, [r0]
 800a60a:	ed54 5a01 	vldr	s11, [r4, #-4]
 800a60e:	ed15 4a01 	vldr	s8, [r5, #-4]
 800a612:	edd0 6a01 	vldr	s13, [r0, #4]
 800a616:	ed91 6a01 	vldr	s12, [r1, #4]
 800a61a:	ee33 8a85 	vadd.f32	s16, s7, s10
 800a61e:	ee34 0a25 	vadd.f32	s0, s8, s11
 800a622:	ee78 4a07 	vadd.f32	s9, s16, s14
 800a626:	ee74 5a65 	vsub.f32	s11, s8, s11
 800a62a:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800a62e:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800a632:	ed45 4a02 	vstr	s9, [r5, #-8]
 800a636:	edd1 4a01 	vldr	s9, [r1, #4]
 800a63a:	ed90 4a01 	vldr	s8, [r0, #4]
 800a63e:	ee70 4a24 	vadd.f32	s9, s0, s9
 800a642:	ee75 aa06 	vadd.f32	s21, s10, s12
 800a646:	ee74 4a84 	vadd.f32	s9, s9, s8
 800a64a:	ee35 aac7 	vsub.f32	s20, s11, s14
 800a64e:	ed45 4a01 	vstr	s9, [r5, #-4]
 800a652:	edd6 1a00 	vldr	s3, [r6]
 800a656:	edd7 0a00 	vldr	s1, [r7]
 800a65a:	ed92 4a02 	vldr	s8, [r2, #8]
 800a65e:	edd3 3a02 	vldr	s7, [r3, #8]
 800a662:	ed93 2a01 	vldr	s4, [r3, #4]
 800a666:	ed16 1a01 	vldr	s2, [r6, #-4]
 800a66a:	edd2 2a01 	vldr	s5, [r2, #4]
 800a66e:	ed57 9a01 	vldr	s19, [r7, #-4]
 800a672:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800a676:	ee39 3a81 	vadd.f32	s6, s19, s2
 800a67a:	ee74 8a84 	vadd.f32	s17, s9, s8
 800a67e:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800a682:	ee78 8aa3 	vadd.f32	s17, s17, s7
 800a686:	ee7a aae6 	vsub.f32	s21, s21, s13
 800a68a:	ee18 aa90 	vmov	sl, s17
 800a68e:	f847 a908 	str.w	sl, [r7], #-8
 800a692:	edd2 8a01 	vldr	s17, [r2, #4]
 800a696:	ed93 9a01 	vldr	s18, [r3, #4]
 800a69a:	ee73 8a28 	vadd.f32	s17, s6, s17
 800a69e:	ee3a aa27 	vadd.f32	s20, s20, s15
 800a6a2:	ee78 8a89 	vadd.f32	s17, s17, s18
 800a6a6:	ee74 0a63 	vsub.f32	s1, s8, s7
 800a6aa:	edc7 8a01 	vstr	s17, [r7, #4]
 800a6ae:	ed18 ba02 	vldr	s22, [r8, #-8]
 800a6b2:	ed58 8a01 	vldr	s17, [r8, #-4]
 800a6b6:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800a6ba:	ee6a ba28 	vmul.f32	s23, s20, s17
 800a6be:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800a6c2:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800a6c6:	ee31 9a20 	vadd.f32	s18, s2, s1
 800a6ca:	ee79 9a82 	vadd.f32	s19, s19, s4
 800a6ce:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800a6d2:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800a6d6:	ee69 baa8 	vmul.f32	s23, s19, s17
 800a6da:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800a6de:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800a6e2:	ee69 8a28 	vmul.f32	s17, s18, s17
 800a6e6:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800a6ea:	ee1c aa10 	vmov	sl, s24
 800a6ee:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800a6f2:	f841 ab08 	str.w	sl, [r1], #8
 800a6f6:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800a6fa:	ee3b bacb 	vsub.f32	s22, s23, s22
 800a6fe:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800a702:	ee33 3a62 	vsub.f32	s6, s6, s5
 800a706:	ed01 aa01 	vstr	s20, [r1, #-4]
 800a70a:	edc2 8a01 	vstr	s17, [r2, #4]
 800a70e:	ed82 ba02 	vstr	s22, [r2, #8]
 800a712:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800a716:	ee74 3a63 	vsub.f32	s7, s8, s7
 800a71a:	ee38 8a47 	vsub.f32	s16, s16, s14
 800a71e:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800a722:	ee30 0a46 	vsub.f32	s0, s0, s12
 800a726:	ee33 3a42 	vsub.f32	s6, s6, s4
 800a72a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800a72e:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a732:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800a736:	ee63 8a04 	vmul.f32	s17, s6, s8
 800a73a:	ee28 aa24 	vmul.f32	s20, s16, s9
 800a73e:	ee60 9a04 	vmul.f32	s19, s0, s8
 800a742:	ee28 8a04 	vmul.f32	s16, s16, s8
 800a746:	ee20 0a24 	vmul.f32	s0, s0, s9
 800a74a:	ee63 3a84 	vmul.f32	s7, s7, s8
 800a74e:	ee39 4a68 	vsub.f32	s8, s18, s17
 800a752:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800a756:	ee14 aa10 	vmov	sl, s8
 800a75a:	ee30 0a48 	vsub.f32	s0, s0, s16
 800a75e:	ee63 4a24 	vmul.f32	s9, s6, s9
 800a762:	ed44 9a02 	vstr	s19, [r4, #-8]
 800a766:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800a76a:	ed04 0a01 	vstr	s0, [r4, #-4]
 800a76e:	f846 a908 	str.w	sl, [r6], #-8
 800a772:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a776:	ee35 7a87 	vadd.f32	s14, s11, s14
 800a77a:	edc6 3a01 	vstr	s7, [r6, #4]
 800a77e:	ee76 6a26 	vadd.f32	s13, s12, s13
 800a782:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a786:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 800a78a:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 800a78e:	ee67 5a86 	vmul.f32	s11, s15, s12
 800a792:	ee26 5a87 	vmul.f32	s10, s13, s14
 800a796:	ee72 2a62 	vsub.f32	s5, s4, s5
 800a79a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800a79e:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800a7a2:	ee75 5a25 	vadd.f32	s11, s10, s11
 800a7a6:	ee62 0a86 	vmul.f32	s1, s5, s12
 800a7aa:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a7ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a7b2:	ee21 6a06 	vmul.f32	s12, s2, s12
 800a7b6:	ee62 2a87 	vmul.f32	s5, s5, s14
 800a7ba:	ee21 1a07 	vmul.f32	s2, s2, s14
 800a7be:	ee15 aa90 	vmov	sl, s11
 800a7c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a7c6:	f840 ab08 	str.w	sl, [r0], #8
 800a7ca:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800a7ce:	ee76 2a22 	vadd.f32	s5, s12, s5
 800a7d2:	f1b9 0901 	subs.w	r9, r9, #1
 800a7d6:	ed40 7a01 	vstr	s15, [r0, #-4]
 800a7da:	f105 0508 	add.w	r5, r5, #8
 800a7de:	ed83 1a02 	vstr	s2, [r3, #8]
 800a7e2:	edc3 2a01 	vstr	s5, [r3, #4]
 800a7e6:	f108 0808 	add.w	r8, r8, #8
 800a7ea:	f1a2 0208 	sub.w	r2, r2, #8
 800a7ee:	f10c 0c10 	add.w	ip, ip, #16
 800a7f2:	f104 0408 	add.w	r4, r4, #8
 800a7f6:	f10e 0e18 	add.w	lr, lr, #24
 800a7fa:	f1a3 0308 	sub.w	r3, r3, #8
 800a7fe:	f47f aefc 	bne.w	800a5fa <arm_cfft_radix8by4_f32+0x13e>
 800a802:	9908      	ldr	r1, [sp, #32]
 800a804:	9802      	ldr	r0, [sp, #8]
 800a806:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 800a80a:	00cb      	lsls	r3, r1, #3
 800a80c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a810:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a814:	9102      	str	r1, [sp, #8]
 800a816:	9905      	ldr	r1, [sp, #20]
 800a818:	4419      	add	r1, r3
 800a81a:	9105      	str	r1, [sp, #20]
 800a81c:	9904      	ldr	r1, [sp, #16]
 800a81e:	4419      	add	r1, r3
 800a820:	9104      	str	r1, [sp, #16]
 800a822:	9906      	ldr	r1, [sp, #24]
 800a824:	449b      	add	fp, r3
 800a826:	4419      	add	r1, r3
 800a828:	449a      	add	sl, r3
 800a82a:	9b03      	ldr	r3, [sp, #12]
 800a82c:	9106      	str	r1, [sp, #24]
 800a82e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a832:	9303      	str	r3, [sp, #12]
 800a834:	9a05      	ldr	r2, [sp, #20]
 800a836:	9806      	ldr	r0, [sp, #24]
 800a838:	ed92 4a00 	vldr	s8, [r2]
 800a83c:	ed90 7a00 	vldr	s14, [r0]
 800a840:	ed9b 3a00 	vldr	s6, [fp]
 800a844:	edda 3a00 	vldr	s7, [sl]
 800a848:	edd2 4a01 	vldr	s9, [r2, #4]
 800a84c:	edd0 6a01 	vldr	s13, [r0, #4]
 800a850:	ed9a 2a01 	vldr	s4, [sl, #4]
 800a854:	eddb 7a01 	vldr	s15, [fp, #4]
 800a858:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 800a85c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a85e:	ee34 6a07 	vadd.f32	s12, s8, s14
 800a862:	ee74 5aa6 	vadd.f32	s11, s9, s13
 800a866:	ee36 5a03 	vadd.f32	s10, s12, s6
 800a86a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800a86e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a872:	ee34 7a47 	vsub.f32	s14, s8, s14
 800a876:	ed82 5a00 	vstr	s10, [r2]
 800a87a:	ed9b 5a01 	vldr	s10, [fp, #4]
 800a87e:	edda 4a01 	vldr	s9, [sl, #4]
 800a882:	ee35 5a85 	vadd.f32	s10, s11, s10
 800a886:	ee37 4a27 	vadd.f32	s8, s14, s15
 800a88a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800a88e:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800a892:	ed82 5a01 	vstr	s10, [r2, #4]
 800a896:	9a04      	ldr	r2, [sp, #16]
 800a898:	ee34 5aa3 	vadd.f32	s10, s9, s7
 800a89c:	edd2 1a00 	vldr	s3, [r2]
 800a8a0:	edd2 2a01 	vldr	s5, [r2, #4]
 800a8a4:	9a02      	ldr	r2, [sp, #8]
 800a8a6:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a8aa:	ee36 6a43 	vsub.f32	s12, s12, s6
 800a8ae:	ee64 4a21 	vmul.f32	s9, s8, s3
 800a8b2:	ee24 4a22 	vmul.f32	s8, s8, s5
 800a8b6:	ee65 2a22 	vmul.f32	s5, s10, s5
 800a8ba:	ee25 5a21 	vmul.f32	s10, s10, s3
 800a8be:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800a8c2:	ee35 5a44 	vsub.f32	s10, s10, s8
 800a8c6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a8ca:	edcb 2a00 	vstr	s5, [fp]
 800a8ce:	ed8b 5a01 	vstr	s10, [fp, #4]
 800a8d2:	ed92 4a01 	vldr	s8, [r2, #4]
 800a8d6:	ed92 5a00 	vldr	s10, [r2]
 800a8da:	9a03      	ldr	r2, [sp, #12]
 800a8dc:	ee36 6a63 	vsub.f32	s12, s12, s7
 800a8e0:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800a8e4:	ee66 4a05 	vmul.f32	s9, s12, s10
 800a8e8:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a8ec:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a8f0:	ee65 5a84 	vmul.f32	s11, s11, s8
 800a8f4:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a8f8:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800a8fc:	ee76 6a83 	vadd.f32	s13, s13, s6
 800a900:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a904:	ed80 6a01 	vstr	s12, [r0, #4]
 800a908:	edc0 5a00 	vstr	s11, [r0]
 800a90c:	edd2 5a01 	vldr	s11, [r2, #4]
 800a910:	9807      	ldr	r0, [sp, #28]
 800a912:	ee77 7a02 	vadd.f32	s15, s14, s4
 800a916:	ee36 7ae3 	vsub.f32	s14, s13, s7
 800a91a:	edd2 6a00 	vldr	s13, [r2]
 800a91e:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800a922:	ee67 6a26 	vmul.f32	s13, s14, s13
 800a926:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a92a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a92e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a932:	ee36 7a07 	vadd.f32	s14, s12, s14
 800a936:	edca 7a01 	vstr	s15, [sl, #4]
 800a93a:	ed8a 7a00 	vstr	s14, [sl]
 800a93e:	6872      	ldr	r2, [r6, #4]
 800a940:	4621      	mov	r1, r4
 800a942:	2304      	movs	r3, #4
 800a944:	f000 f8d2 	bl	800aaec <arm_radix8_butterfly_f32>
 800a948:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a94a:	6872      	ldr	r2, [r6, #4]
 800a94c:	4621      	mov	r1, r4
 800a94e:	2304      	movs	r3, #4
 800a950:	f000 f8cc 	bl	800aaec <arm_radix8_butterfly_f32>
 800a954:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a956:	6872      	ldr	r2, [r6, #4]
 800a958:	4621      	mov	r1, r4
 800a95a:	2304      	movs	r3, #4
 800a95c:	f000 f8c6 	bl	800aaec <arm_radix8_butterfly_f32>
 800a960:	6872      	ldr	r2, [r6, #4]
 800a962:	9801      	ldr	r0, [sp, #4]
 800a964:	4621      	mov	r1, r4
 800a966:	2304      	movs	r3, #4
 800a968:	b00f      	add	sp, #60	@ 0x3c
 800a96a:	ecbd 8b0a 	vpop	{d8-d12}
 800a96e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a972:	f000 b8bb 	b.w	800aaec <arm_radix8_butterfly_f32>
 800a976:	bf00      	nop

0800a978 <arm_cfft_f32>:
 800a978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a97c:	2a01      	cmp	r2, #1
 800a97e:	4606      	mov	r6, r0
 800a980:	4617      	mov	r7, r2
 800a982:	460c      	mov	r4, r1
 800a984:	4698      	mov	r8, r3
 800a986:	8805      	ldrh	r5, [r0, #0]
 800a988:	d054      	beq.n	800aa34 <arm_cfft_f32+0xbc>
 800a98a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800a98e:	d04c      	beq.n	800aa2a <arm_cfft_f32+0xb2>
 800a990:	d916      	bls.n	800a9c0 <arm_cfft_f32+0x48>
 800a992:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800a996:	d01a      	beq.n	800a9ce <arm_cfft_f32+0x56>
 800a998:	d95c      	bls.n	800aa54 <arm_cfft_f32+0xdc>
 800a99a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800a99e:	d044      	beq.n	800aa2a <arm_cfft_f32+0xb2>
 800a9a0:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800a9a4:	d105      	bne.n	800a9b2 <arm_cfft_f32+0x3a>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	6872      	ldr	r2, [r6, #4]
 800a9aa:	4629      	mov	r1, r5
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	f000 f89d 	bl	800aaec <arm_radix8_butterfly_f32>
 800a9b2:	f1b8 0f00 	cmp.w	r8, #0
 800a9b6:	d111      	bne.n	800a9dc <arm_cfft_f32+0x64>
 800a9b8:	2f01      	cmp	r7, #1
 800a9ba:	d016      	beq.n	800a9ea <arm_cfft_f32+0x72>
 800a9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c0:	2d20      	cmp	r5, #32
 800a9c2:	d032      	beq.n	800aa2a <arm_cfft_f32+0xb2>
 800a9c4:	d94a      	bls.n	800aa5c <arm_cfft_f32+0xe4>
 800a9c6:	2d40      	cmp	r5, #64	@ 0x40
 800a9c8:	d0ed      	beq.n	800a9a6 <arm_cfft_f32+0x2e>
 800a9ca:	2d80      	cmp	r5, #128	@ 0x80
 800a9cc:	d1f1      	bne.n	800a9b2 <arm_cfft_f32+0x3a>
 800a9ce:	4621      	mov	r1, r4
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	f7ff fca3 	bl	800a31c <arm_cfft_radix8by2_f32>
 800a9d6:	f1b8 0f00 	cmp.w	r8, #0
 800a9da:	d0ed      	beq.n	800a9b8 <arm_cfft_f32+0x40>
 800a9dc:	68b2      	ldr	r2, [r6, #8]
 800a9de:	89b1      	ldrh	r1, [r6, #12]
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f7f5 fc05 	bl	80001f0 <arm_bitreversal_32>
 800a9e6:	2f01      	cmp	r7, #1
 800a9e8:	d1e8      	bne.n	800a9bc <arm_cfft_f32+0x44>
 800a9ea:	ee07 5a90 	vmov	s15, r5
 800a9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a9f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a9fa:	2d00      	cmp	r5, #0
 800a9fc:	d0de      	beq.n	800a9bc <arm_cfft_f32+0x44>
 800a9fe:	f104 0108 	add.w	r1, r4, #8
 800aa02:	2300      	movs	r3, #0
 800aa04:	3301      	adds	r3, #1
 800aa06:	429d      	cmp	r5, r3
 800aa08:	f101 0108 	add.w	r1, r1, #8
 800aa0c:	ed11 7a04 	vldr	s14, [r1, #-16]
 800aa10:	ed51 7a03 	vldr	s15, [r1, #-12]
 800aa14:	ee27 7a26 	vmul.f32	s14, s14, s13
 800aa18:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800aa1c:	ed01 7a04 	vstr	s14, [r1, #-16]
 800aa20:	ed41 7a03 	vstr	s15, [r1, #-12]
 800aa24:	d1ee      	bne.n	800aa04 <arm_cfft_f32+0x8c>
 800aa26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	f7ff fd45 	bl	800a4bc <arm_cfft_radix8by4_f32>
 800aa32:	e7be      	b.n	800a9b2 <arm_cfft_f32+0x3a>
 800aa34:	b1ad      	cbz	r5, 800aa62 <arm_cfft_f32+0xea>
 800aa36:	f101 030c 	add.w	r3, r1, #12
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800aa40:	3201      	adds	r2, #1
 800aa42:	eef1 7a67 	vneg.f32	s15, s15
 800aa46:	4295      	cmp	r5, r2
 800aa48:	ed43 7a02 	vstr	s15, [r3, #-8]
 800aa4c:	f103 0308 	add.w	r3, r3, #8
 800aa50:	d1f4      	bne.n	800aa3c <arm_cfft_f32+0xc4>
 800aa52:	e79a      	b.n	800a98a <arm_cfft_f32+0x12>
 800aa54:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800aa58:	d0a5      	beq.n	800a9a6 <arm_cfft_f32+0x2e>
 800aa5a:	e7aa      	b.n	800a9b2 <arm_cfft_f32+0x3a>
 800aa5c:	2d10      	cmp	r5, #16
 800aa5e:	d0b6      	beq.n	800a9ce <arm_cfft_f32+0x56>
 800aa60:	e7a7      	b.n	800a9b2 <arm_cfft_f32+0x3a>
 800aa62:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800aa66:	d894      	bhi.n	800a992 <arm_cfft_f32+0x1a>
 800aa68:	e7aa      	b.n	800a9c0 <arm_cfft_f32+0x48>
 800aa6a:	bf00      	nop

0800aa6c <arm_cos_f32>:
 800aa6c:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800aae0 <arm_cos_f32+0x74>
 800aa70:	ee20 0a27 	vmul.f32	s0, s0, s15
 800aa74:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800aa78:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aa7c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aa80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa84:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800aa88:	d504      	bpl.n	800aa94 <arm_cos_f32+0x28>
 800aa8a:	ee17 3a90 	vmov	r3, s15
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	ee07 3a90 	vmov	s15, r3
 800aa94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa98:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800aae4 <arm_cos_f32+0x78>
 800aa9c:	4a12      	ldr	r2, [pc, #72]	@ (800aae8 <arm_cos_f32+0x7c>)
 800aa9e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aaa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aaa6:	ee20 0a26 	vmul.f32	s0, s0, s13
 800aaaa:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800aaae:	ee17 3a90 	vmov	r3, s15
 800aab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aab6:	ee07 3a90 	vmov	s15, r3
 800aaba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aabe:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800aac2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800aac6:	edd1 6a01 	vldr	s13, [r1, #4]
 800aaca:	ed91 0a00 	vldr	s0, [r1]
 800aace:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aad2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800aad6:	ee27 0a00 	vmul.f32	s0, s14, s0
 800aada:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aade:	4770      	bx	lr
 800aae0:	3e22f983 	.word	0x3e22f983
 800aae4:	44000000 	.word	0x44000000
 800aae8:	080183f0 	.word	0x080183f0

0800aaec <arm_radix8_butterfly_f32>:
 800aaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf0:	ed2d 8b10 	vpush	{d8-d15}
 800aaf4:	461c      	mov	r4, r3
 800aaf6:	b09d      	sub	sp, #116	@ 0x74
 800aaf8:	4603      	mov	r3, r0
 800aafa:	3304      	adds	r3, #4
 800aafc:	ed9f bac4 	vldr	s22, [pc, #784]	@ 800ae10 <arm_radix8_butterfly_f32+0x324>
 800ab00:	9019      	str	r0, [sp, #100]	@ 0x64
 800ab02:	921a      	str	r2, [sp, #104]	@ 0x68
 800ab04:	468b      	mov	fp, r1
 800ab06:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ab08:	468a      	mov	sl, r1
 800ab0a:	46a1      	mov	r9, r4
 800ab0c:	4607      	mov	r7, r0
 800ab0e:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800ab12:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800ab16:	eb03 0508 	add.w	r5, r3, r8
 800ab1a:	195c      	adds	r4, r3, r5
 800ab1c:	00de      	lsls	r6, r3, #3
 800ab1e:	191a      	adds	r2, r3, r4
 800ab20:	9600      	str	r6, [sp, #0]
 800ab22:	1898      	adds	r0, r3, r2
 800ab24:	4619      	mov	r1, r3
 800ab26:	9e00      	ldr	r6, [sp, #0]
 800ab28:	9311      	str	r3, [sp, #68]	@ 0x44
 800ab2a:	4401      	add	r1, r0
 800ab2c:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800ab30:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800ab34:	19be      	adds	r6, r7, r6
 800ab36:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800ab3a:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800ab3e:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 800ab42:	9f00      	ldr	r7, [sp, #0]
 800ab44:	011b      	lsls	r3, r3, #4
 800ab46:	eb06 0e07 	add.w	lr, r6, r7
 800ab4a:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 800ab4c:	9302      	str	r3, [sp, #8]
 800ab4e:	3204      	adds	r2, #4
 800ab50:	3104      	adds	r1, #4
 800ab52:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ab56:	f04f 0c00 	mov.w	ip, #0
 800ab5a:	edde 7a00 	vldr	s15, [lr]
 800ab5e:	edd6 6a00 	vldr	s13, [r6]
 800ab62:	ed95 2a00 	vldr	s4, [r5]
 800ab66:	ed17 aa01 	vldr	s20, [r7, #-4]
 800ab6a:	edd4 4a00 	vldr	s9, [r4]
 800ab6e:	ed90 5a00 	vldr	s10, [r0]
 800ab72:	ed12 7a01 	vldr	s14, [r2, #-4]
 800ab76:	ed51 0a01 	vldr	s1, [r1, #-4]
 800ab7a:	ee77 8a85 	vadd.f32	s17, s15, s10
 800ab7e:	ee76 3a87 	vadd.f32	s7, s13, s14
 800ab82:	ee32 4a20 	vadd.f32	s8, s4, s1
 800ab86:	ee3a 3a24 	vadd.f32	s6, s20, s9
 800ab8a:	ee33 6a84 	vadd.f32	s12, s7, s8
 800ab8e:	ee73 5a28 	vadd.f32	s11, s6, s17
 800ab92:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ab96:	ee75 6a86 	vadd.f32	s13, s11, s12
 800ab9a:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800ab9e:	ed47 6a01 	vstr	s13, [r7, #-4]
 800aba2:	edc4 5a00 	vstr	s11, [r4]
 800aba6:	ed92 9a00 	vldr	s18, [r2]
 800abaa:	ed95 1a01 	vldr	s2, [r5, #4]
 800abae:	edd6 5a01 	vldr	s11, [r6, #4]
 800abb2:	ed91 6a00 	vldr	s12, [r1]
 800abb6:	edd7 2a00 	vldr	s5, [r7]
 800abba:	edd4 1a01 	vldr	s3, [r4, #4]
 800abbe:	edde 6a01 	vldr	s13, [lr, #4]
 800abc2:	edd0 9a01 	vldr	s19, [r0, #4]
 800abc6:	ee72 0a60 	vsub.f32	s1, s4, s1
 800abca:	ee71 aa46 	vsub.f32	s21, s2, s12
 800abce:	ee35 2ac9 	vsub.f32	s4, s11, s18
 800abd2:	ee37 0a60 	vsub.f32	s0, s14, s1
 800abd6:	ee32 8a2a 	vadd.f32	s16, s4, s21
 800abda:	ee37 7a20 	vadd.f32	s14, s14, s1
 800abde:	ee32 2a6a 	vsub.f32	s4, s4, s21
 800abe2:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800abe6:	ee75 5a89 	vadd.f32	s11, s11, s18
 800abea:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800abee:	ee7a 4a64 	vsub.f32	s9, s20, s9
 800abf2:	ee31 6a06 	vadd.f32	s12, s2, s12
 800abf6:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800abfa:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800abfe:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800ac02:	ee72 1ae1 	vsub.f32	s3, s5, s3
 800ac06:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800ac0a:	ee62 2a0b 	vmul.f32	s5, s4, s22
 800ac0e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800ac12:	ee33 3a68 	vsub.f32	s6, s6, s17
 800ac16:	ee36 0a88 	vadd.f32	s0, s13, s16
 800ac1a:	ee75 8a86 	vadd.f32	s17, s11, s12
 800ac1e:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800ac22:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800ac26:	ee74 6ae0 	vsub.f32	s13, s9, s1
 800ac2a:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800ac2e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800ac32:	ee75 4a27 	vadd.f32	s9, s10, s15
 800ac36:	ee71 5a49 	vsub.f32	s11, s2, s18
 800ac3a:	ee31 2a09 	vadd.f32	s4, s2, s18
 800ac3e:	ee75 7a67 	vsub.f32	s15, s10, s15
 800ac42:	ee31 1aa2 	vadd.f32	s2, s3, s5
 800ac46:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800ac4a:	ee73 0a06 	vadd.f32	s1, s6, s12
 800ac4e:	ee75 1ac4 	vsub.f32	s3, s11, s8
 800ac52:	ee36 5a87 	vadd.f32	s10, s13, s14
 800ac56:	ee32 8a28 	vadd.f32	s16, s4, s17
 800ac5a:	ee33 6a46 	vsub.f32	s12, s6, s12
 800ac5e:	ee34 4a25 	vadd.f32	s8, s8, s11
 800ac62:	ee33 3a80 	vadd.f32	s6, s7, s0
 800ac66:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ac6a:	ee71 5a64 	vsub.f32	s11, s2, s9
 800ac6e:	ee72 6ae7 	vsub.f32	s13, s5, s15
 800ac72:	ee32 2a68 	vsub.f32	s4, s4, s17
 800ac76:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800ac7a:	ee74 4a81 	vadd.f32	s9, s9, s2
 800ac7e:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800ac82:	44dc      	add	ip, fp
 800ac84:	45e2      	cmp	sl, ip
 800ac86:	ed87 8a00 	vstr	s16, [r7]
 800ac8a:	ed84 2a01 	vstr	s4, [r4, #4]
 800ac8e:	441f      	add	r7, r3
 800ac90:	edce 0a00 	vstr	s1, [lr]
 800ac94:	441c      	add	r4, r3
 800ac96:	ed80 6a00 	vstr	s12, [r0]
 800ac9a:	edce 1a01 	vstr	s3, [lr, #4]
 800ac9e:	ed80 4a01 	vstr	s8, [r0, #4]
 800aca2:	449e      	add	lr, r3
 800aca4:	ed86 3a00 	vstr	s6, [r6]
 800aca8:	4418      	add	r0, r3
 800acaa:	ed41 3a01 	vstr	s7, [r1, #-4]
 800acae:	ed02 5a01 	vstr	s10, [r2, #-4]
 800acb2:	ed85 7a00 	vstr	s14, [r5]
 800acb6:	edc6 5a01 	vstr	s11, [r6, #4]
 800acba:	edc1 4a00 	vstr	s9, [r1]
 800acbe:	441e      	add	r6, r3
 800acc0:	edc2 6a00 	vstr	s13, [r2]
 800acc4:	4419      	add	r1, r3
 800acc6:	edc5 7a01 	vstr	s15, [r5, #4]
 800acca:	441a      	add	r2, r3
 800accc:	441d      	add	r5, r3
 800acce:	f63f af44 	bhi.w	800ab5a <arm_radix8_butterfly_f32+0x6e>
 800acd2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800acd4:	2a07      	cmp	r2, #7
 800acd6:	f240 81f5 	bls.w	800b0c4 <arm_radix8_butterfly_f32+0x5d8>
 800acda:	f108 0101 	add.w	r1, r8, #1
 800acde:	188f      	adds	r7, r1, r2
 800ace0:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 800ace4:	19d6      	adds	r6, r2, r7
 800ace6:	eb08 0c09 	add.w	ip, r8, r9
 800acea:	1994      	adds	r4, r2, r6
 800acec:	eb0c 0e09 	add.w	lr, ip, r9
 800acf0:	4610      	mov	r0, r2
 800acf2:	9701      	str	r7, [sp, #4]
 800acf4:	4420      	add	r0, r4
 800acf6:	eb0e 0709 	add.w	r7, lr, r9
 800acfa:	1815      	adds	r5, r2, r0
 800acfc:	eb07 0209 	add.w	r2, r7, r9
 800ad00:	9203      	str	r2, [sp, #12]
 800ad02:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ad04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ad08:	9117      	str	r1, [sp, #92]	@ 0x5c
 800ad0a:	440a      	add	r2, r1
 800ad0c:	9900      	ldr	r1, [sp, #0]
 800ad0e:	3108      	adds	r1, #8
 800ad10:	9100      	str	r1, [sp, #0]
 800ad12:	9902      	ldr	r1, [sp, #8]
 800ad14:	3108      	adds	r1, #8
 800ad16:	9102      	str	r1, [sp, #8]
 800ad18:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800ad1a:	00ff      	lsls	r7, r7, #3
 800ad1c:	9715      	str	r7, [sp, #84]	@ 0x54
 800ad1e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800ad22:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ad26:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800ad2a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800ad2c:	9903      	ldr	r1, [sp, #12]
 800ad2e:	19d7      	adds	r7, r2, r7
 800ad30:	00c9      	lsls	r1, r1, #3
 800ad32:	9114      	str	r1, [sp, #80]	@ 0x50
 800ad34:	9710      	str	r7, [sp, #64]	@ 0x40
 800ad36:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800ad38:	9f00      	ldr	r7, [sp, #0]
 800ad3a:	19cf      	adds	r7, r1, r7
 800ad3c:	970d      	str	r7, [sp, #52]	@ 0x34
 800ad3e:	9f02      	ldr	r7, [sp, #8]
 800ad40:	19cf      	adds	r7, r1, r7
 800ad42:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800ad46:	970c      	str	r7, [sp, #48]	@ 0x30
 800ad48:	9f01      	ldr	r7, [sp, #4]
 800ad4a:	f8cd e058 	str.w	lr, [sp, #88]	@ 0x58
 800ad4e:	3504      	adds	r5, #4
 800ad50:	3004      	adds	r0, #4
 800ad52:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 800ad56:	9508      	str	r5, [sp, #32]
 800ad58:	9009      	str	r0, [sp, #36]	@ 0x24
 800ad5a:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 800ad5c:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800ad5e:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 800ad62:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800ad66:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 800ad6a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800ad6c:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
 800ad70:	1945      	adds	r5, r0, r5
 800ad72:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800ad76:	460f      	mov	r7, r1
 800ad78:	3404      	adds	r4, #4
 800ad7a:	4641      	mov	r1, r8
 800ad7c:	1841      	adds	r1, r0, r1
 800ad7e:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
 800ad82:	940a      	str	r4, [sp, #40]	@ 0x28
 800ad84:	eb00 0c06 	add.w	ip, r0, r6
 800ad88:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 800ad8c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ad8e:	9506      	str	r5, [sp, #24]
 800ad90:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800ad92:	9105      	str	r1, [sp, #20]
 800ad94:	4639      	mov	r1, r7
 800ad96:	1905      	adds	r5, r0, r4
 800ad98:	3108      	adds	r1, #8
 800ad9a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800ad9c:	9507      	str	r5, [sp, #28]
 800ad9e:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ada0:	ea4f 1509 	mov.w	r5, r9, lsl #4
 800ada4:	2101      	movs	r1, #1
 800ada6:	eb00 0e06 	add.w	lr, r0, r6
 800adaa:	9518      	str	r5, [sp, #96]	@ 0x60
 800adac:	9404      	str	r4, [sp, #16]
 800adae:	9103      	str	r1, [sp, #12]
 800adb0:	4620      	mov	r0, r4
 800adb2:	4689      	mov	r9, r1
 800adb4:	9e06      	ldr	r6, [sp, #24]
 800adb6:	ed90 fa00 	vldr	s30, [r0]
 800adba:	edd6 7a01 	vldr	s15, [r6, #4]
 800adbe:	edd0 ba01 	vldr	s23, [r0, #4]
 800adc2:	edcd 7a00 	vstr	s15, [sp]
 800adc6:	a80d      	add	r0, sp, #52	@ 0x34
 800adc8:	edde 7a01 	vldr	s15, [lr, #4]
 800adcc:	9c05      	ldr	r4, [sp, #20]
 800adce:	9d07      	ldr	r5, [sp, #28]
 800add0:	edd2 fa00 	vldr	s31, [r2]
 800add4:	ed92 ca01 	vldr	s24, [r2, #4]
 800add8:	edcd 7a01 	vstr	s15, [sp, #4]
 800addc:	c807      	ldmia	r0, {r0, r1, r2}
 800adde:	eddc 7a01 	vldr	s15, [ip, #4]
 800ade2:	edd4 ea00 	vldr	s29, [r4]
 800ade6:	ed95 ea00 	vldr	s28, [r5]
 800adea:	edd6 da00 	vldr	s27, [r6]
 800adee:	edd4 aa01 	vldr	s21, [r4, #4]
 800adf2:	ed95 aa01 	vldr	s20, [r5, #4]
 800adf6:	ed9e da00 	vldr	s26, [lr]
 800adfa:	eddc ca00 	vldr	s25, [ip]
 800adfe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae02:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800ae04:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ae06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ae08:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800ae0a:	edcd 7a02 	vstr	s15, [sp, #8]
 800ae0e:	e001      	b.n	800ae14 <arm_radix8_butterfly_f32+0x328>
 800ae10:	3f3504f3 	.word	0x3f3504f3
 800ae14:	ed16 6a01 	vldr	s12, [r6, #-4]
 800ae18:	ed91 5a00 	vldr	s10, [r1]
 800ae1c:	ed57 9a01 	vldr	s19, [r7, #-4]
 800ae20:	edd5 7a00 	vldr	s15, [r5]
 800ae24:	ed18 7a01 	vldr	s14, [r8, #-4]
 800ae28:	edd2 3a00 	vldr	s7, [r2]
 800ae2c:	ed94 3a00 	vldr	s6, [r4]
 800ae30:	ed90 2a00 	vldr	s4, [r0]
 800ae34:	ed92 0a01 	vldr	s0, [r2, #4]
 800ae38:	ee33 8a85 	vadd.f32	s16, s7, s10
 800ae3c:	ee32 1a06 	vadd.f32	s2, s4, s12
 800ae40:	ee33 4a29 	vadd.f32	s8, s6, s19
 800ae44:	ee77 4a87 	vadd.f32	s9, s15, s14
 800ae48:	ee78 1a04 	vadd.f32	s3, s16, s8
 800ae4c:	ee71 6a24 	vadd.f32	s13, s2, s9
 800ae50:	ee32 2a46 	vsub.f32	s4, s4, s12
 800ae54:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800ae58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae5c:	ed82 6a00 	vstr	s12, [r2]
 800ae60:	edd5 8a01 	vldr	s17, [r5, #4]
 800ae64:	ed90 9a01 	vldr	s18, [r0, #4]
 800ae68:	edd6 2a00 	vldr	s5, [r6]
 800ae6c:	ed98 7a00 	vldr	s14, [r8]
 800ae70:	edd4 0a01 	vldr	s1, [r4, #4]
 800ae74:	ed91 6a01 	vldr	s12, [r1, #4]
 800ae78:	edd7 5a00 	vldr	s11, [r7]
 800ae7c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800ae80:	ee33 3a69 	vsub.f32	s6, s6, s19
 800ae84:	ee39 5a62 	vsub.f32	s10, s18, s5
 800ae88:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800ae8c:	ee38 4a44 	vsub.f32	s8, s16, s8
 800ae90:	ee38 7a87 	vadd.f32	s14, s17, s14
 800ae94:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800ae98:	ee79 2a22 	vadd.f32	s5, s18, s5
 800ae9c:	ee75 8a69 	vsub.f32	s17, s10, s19
 800aea0:	ee32 9a27 	vadd.f32	s18, s4, s15
 800aea4:	ee35 5a29 	vadd.f32	s10, s10, s19
 800aea8:	ee72 7a67 	vsub.f32	s15, s4, s15
 800aeac:	ee30 2a06 	vadd.f32	s4, s0, s12
 800aeb0:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800aeb4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800aeb8:	ee32 9a08 	vadd.f32	s18, s4, s16
 800aebc:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800aec0:	ee32 2a48 	vsub.f32	s4, s4, s16
 800aec4:	ee71 4a64 	vsub.f32	s9, s2, s9
 800aec8:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800aecc:	ee32 1a87 	vadd.f32	s2, s5, s14
 800aed0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800aed4:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800aed8:	ee30 6a46 	vsub.f32	s12, s0, s12
 800aedc:	ee73 0a29 	vadd.f32	s1, s6, s19
 800aee0:	ee36 0a28 	vadd.f32	s0, s12, s17
 800aee4:	ee33 3a69 	vsub.f32	s6, s6, s19
 800aee8:	ee32 7a64 	vsub.f32	s14, s4, s9
 800aeec:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800aef0:	ee36 6a68 	vsub.f32	s12, s12, s17
 800aef4:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800aef8:	ee75 8a85 	vadd.f32	s17, s11, s10
 800aefc:	ee74 3a22 	vadd.f32	s7, s8, s5
 800af00:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800af04:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800af08:	ee79 1a41 	vsub.f32	s3, s18, s2
 800af0c:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800af10:	ee76 5a43 	vsub.f32	s11, s12, s6
 800af14:	ee74 2a62 	vsub.f32	s5, s8, s5
 800af18:	ee74 4a82 	vadd.f32	s9, s9, s4
 800af1c:	ee30 4a60 	vsub.f32	s8, s0, s1
 800af20:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800af24:	ee30 0a80 	vadd.f32	s0, s1, s0
 800af28:	ee77 9a85 	vadd.f32	s19, s15, s10
 800af2c:	ee33 6a06 	vadd.f32	s12, s6, s12
 800af30:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800af34:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800af38:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800af3c:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800af40:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800af44:	ee39 1a01 	vadd.f32	s2, s18, s2
 800af48:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800af4c:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800af50:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800af54:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800af58:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800af5c:	ee35 3a03 	vadd.f32	s6, s10, s6
 800af60:	ee72 6a66 	vsub.f32	s13, s4, s13
 800af64:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800af68:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800af6c:	ed9d 4a02 	vldr	s8, [sp, #8]
 800af70:	ed82 1a01 	vstr	s2, [r2, #4]
 800af74:	ee77 3a63 	vsub.f32	s7, s14, s7
 800af78:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800af7c:	ed9d 7a01 	vldr	s14, [sp, #4]
 800af80:	ed81 3a00 	vstr	s6, [r1]
 800af84:	ee30 9a89 	vadd.f32	s18, s1, s18
 800af88:	ee32 2a05 	vadd.f32	s4, s4, s10
 800af8c:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800af90:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800af94:	ee67 2a22 	vmul.f32	s5, s14, s5
 800af98:	ee64 1a00 	vmul.f32	s3, s8, s0
 800af9c:	ee27 7a24 	vmul.f32	s14, s14, s9
 800afa0:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800afa4:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800afa8:	ee64 8a28 	vmul.f32	s17, s8, s17
 800afac:	ed9d 4a00 	vldr	s8, [sp]
 800afb0:	edc1 6a01 	vstr	s13, [r1, #4]
 800afb4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800afb8:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800afbc:	ee64 9a29 	vmul.f32	s19, s8, s19
 800afc0:	ee24 4a25 	vmul.f32	s8, s8, s11
 800afc4:	ee30 7a87 	vadd.f32	s14, s1, s14
 800afc8:	ee74 4a84 	vadd.f32	s9, s9, s8
 800afcc:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800afd0:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800afd4:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800afd8:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800afdc:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800afe0:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800afe4:	ee75 1a21 	vadd.f32	s3, s10, s3
 800afe8:	ee30 0a68 	vsub.f32	s0, s0, s17
 800afec:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800aff0:	ee70 0a84 	vadd.f32	s1, s1, s8
 800aff4:	ee36 6a67 	vsub.f32	s12, s12, s15
 800aff8:	44d9      	add	r9, fp
 800affa:	45ca      	cmp	sl, r9
 800affc:	ed84 9a00 	vstr	s18, [r4]
 800b000:	edc4 3a01 	vstr	s7, [r4, #4]
 800b004:	441a      	add	r2, r3
 800b006:	ed07 7a01 	vstr	s14, [r7, #-4]
 800b00a:	edc7 2a00 	vstr	s5, [r7]
 800b00e:	4419      	add	r1, r3
 800b010:	ed80 2a00 	vstr	s4, [r0]
 800b014:	ed80 8a01 	vstr	s16, [r0, #4]
 800b018:	441c      	add	r4, r3
 800b01a:	ed48 1a01 	vstr	s3, [r8, #-4]
 800b01e:	ed88 0a00 	vstr	s0, [r8]
 800b022:	441f      	add	r7, r3
 800b024:	ed46 4a01 	vstr	s9, [r6, #-4]
 800b028:	4418      	add	r0, r3
 800b02a:	edc6 9a00 	vstr	s19, [r6]
 800b02e:	4498      	add	r8, r3
 800b030:	edc5 0a00 	vstr	s1, [r5]
 800b034:	ed85 6a01 	vstr	s12, [r5, #4]
 800b038:	441e      	add	r6, r3
 800b03a:	441d      	add	r5, r3
 800b03c:	f63f aeea 	bhi.w	800ae14 <arm_radix8_butterfly_f32+0x328>
 800b040:	9a03      	ldr	r2, [sp, #12]
 800b042:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800b044:	3201      	adds	r2, #1
 800b046:	4611      	mov	r1, r2
 800b048:	9203      	str	r2, [sp, #12]
 800b04a:	9a04      	ldr	r2, [sp, #16]
 800b04c:	4402      	add	r2, r0
 800b04e:	9204      	str	r2, [sp, #16]
 800b050:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800b052:	9a05      	ldr	r2, [sp, #20]
 800b054:	4402      	add	r2, r0
 800b056:	9205      	str	r2, [sp, #20]
 800b058:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b05a:	9a07      	ldr	r2, [sp, #28]
 800b05c:	4402      	add	r2, r0
 800b05e:	9207      	str	r2, [sp, #28]
 800b060:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800b062:	9a06      	ldr	r2, [sp, #24]
 800b064:	4402      	add	r2, r0
 800b066:	9206      	str	r2, [sp, #24]
 800b068:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b06a:	4496      	add	lr, r2
 800b06c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b06e:	4494      	add	ip, r2
 800b070:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b072:	3208      	adds	r2, #8
 800b074:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b076:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b078:	3208      	adds	r2, #8
 800b07a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b07c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b07e:	3208      	adds	r2, #8
 800b080:	920d      	str	r2, [sp, #52]	@ 0x34
 800b082:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b084:	3208      	adds	r2, #8
 800b086:	920c      	str	r2, [sp, #48]	@ 0x30
 800b088:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b08a:	3208      	adds	r2, #8
 800b08c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b08e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b090:	3208      	adds	r2, #8
 800b092:	920a      	str	r2, [sp, #40]	@ 0x28
 800b094:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b096:	3208      	adds	r2, #8
 800b098:	9209      	str	r2, [sp, #36]	@ 0x24
 800b09a:	9a08      	ldr	r2, [sp, #32]
 800b09c:	3208      	adds	r2, #8
 800b09e:	9208      	str	r2, [sp, #32]
 800b0a0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800b0a2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800b0a4:	4288      	cmp	r0, r1
 800b0a6:	4622      	mov	r2, r4
 800b0a8:	d007      	beq.n	800b0ba <arm_radix8_butterfly_f32+0x5ce>
 800b0aa:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800b0ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	4401      	add	r1, r0
 800b0b4:	9110      	str	r1, [sp, #64]	@ 0x40
 800b0b6:	9804      	ldr	r0, [sp, #16]
 800b0b8:	e67c      	b.n	800adb4 <arm_radix8_butterfly_f32+0x2c8>
 800b0ba:	4683      	mov	fp, r0
 800b0bc:	f8bd 905c 	ldrh.w	r9, [sp, #92]	@ 0x5c
 800b0c0:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 800b0c2:	e524      	b.n	800ab0e <arm_radix8_butterfly_f32+0x22>
 800b0c4:	b01d      	add	sp, #116	@ 0x74
 800b0c6:	ecbd 8b10 	vpop	{d8-d15}
 800b0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ce:	bf00      	nop

0800b0d0 <__cvt>:
 800b0d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0d4:	ec57 6b10 	vmov	r6, r7, d0
 800b0d8:	2f00      	cmp	r7, #0
 800b0da:	460c      	mov	r4, r1
 800b0dc:	4619      	mov	r1, r3
 800b0de:	463b      	mov	r3, r7
 800b0e0:	bfbb      	ittet	lt
 800b0e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b0e6:	461f      	movlt	r7, r3
 800b0e8:	2300      	movge	r3, #0
 800b0ea:	232d      	movlt	r3, #45	@ 0x2d
 800b0ec:	700b      	strb	r3, [r1, #0]
 800b0ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b0f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b0f4:	4691      	mov	r9, r2
 800b0f6:	f023 0820 	bic.w	r8, r3, #32
 800b0fa:	bfbc      	itt	lt
 800b0fc:	4632      	movlt	r2, r6
 800b0fe:	4616      	movlt	r6, r2
 800b100:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b104:	d005      	beq.n	800b112 <__cvt+0x42>
 800b106:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b10a:	d100      	bne.n	800b10e <__cvt+0x3e>
 800b10c:	3401      	adds	r4, #1
 800b10e:	2102      	movs	r1, #2
 800b110:	e000      	b.n	800b114 <__cvt+0x44>
 800b112:	2103      	movs	r1, #3
 800b114:	ab03      	add	r3, sp, #12
 800b116:	9301      	str	r3, [sp, #4]
 800b118:	ab02      	add	r3, sp, #8
 800b11a:	9300      	str	r3, [sp, #0]
 800b11c:	ec47 6b10 	vmov	d0, r6, r7
 800b120:	4653      	mov	r3, sl
 800b122:	4622      	mov	r2, r4
 800b124:	f000 fe88 	bl	800be38 <_dtoa_r>
 800b128:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b12c:	4605      	mov	r5, r0
 800b12e:	d119      	bne.n	800b164 <__cvt+0x94>
 800b130:	f019 0f01 	tst.w	r9, #1
 800b134:	d00e      	beq.n	800b154 <__cvt+0x84>
 800b136:	eb00 0904 	add.w	r9, r0, r4
 800b13a:	2200      	movs	r2, #0
 800b13c:	2300      	movs	r3, #0
 800b13e:	4630      	mov	r0, r6
 800b140:	4639      	mov	r1, r7
 800b142:	f7f5 fd31 	bl	8000ba8 <__aeabi_dcmpeq>
 800b146:	b108      	cbz	r0, 800b14c <__cvt+0x7c>
 800b148:	f8cd 900c 	str.w	r9, [sp, #12]
 800b14c:	2230      	movs	r2, #48	@ 0x30
 800b14e:	9b03      	ldr	r3, [sp, #12]
 800b150:	454b      	cmp	r3, r9
 800b152:	d31e      	bcc.n	800b192 <__cvt+0xc2>
 800b154:	9b03      	ldr	r3, [sp, #12]
 800b156:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b158:	1b5b      	subs	r3, r3, r5
 800b15a:	4628      	mov	r0, r5
 800b15c:	6013      	str	r3, [r2, #0]
 800b15e:	b004      	add	sp, #16
 800b160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b164:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b168:	eb00 0904 	add.w	r9, r0, r4
 800b16c:	d1e5      	bne.n	800b13a <__cvt+0x6a>
 800b16e:	7803      	ldrb	r3, [r0, #0]
 800b170:	2b30      	cmp	r3, #48	@ 0x30
 800b172:	d10a      	bne.n	800b18a <__cvt+0xba>
 800b174:	2200      	movs	r2, #0
 800b176:	2300      	movs	r3, #0
 800b178:	4630      	mov	r0, r6
 800b17a:	4639      	mov	r1, r7
 800b17c:	f7f5 fd14 	bl	8000ba8 <__aeabi_dcmpeq>
 800b180:	b918      	cbnz	r0, 800b18a <__cvt+0xba>
 800b182:	f1c4 0401 	rsb	r4, r4, #1
 800b186:	f8ca 4000 	str.w	r4, [sl]
 800b18a:	f8da 3000 	ldr.w	r3, [sl]
 800b18e:	4499      	add	r9, r3
 800b190:	e7d3      	b.n	800b13a <__cvt+0x6a>
 800b192:	1c59      	adds	r1, r3, #1
 800b194:	9103      	str	r1, [sp, #12]
 800b196:	701a      	strb	r2, [r3, #0]
 800b198:	e7d9      	b.n	800b14e <__cvt+0x7e>

0800b19a <__exponent>:
 800b19a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b19c:	2900      	cmp	r1, #0
 800b19e:	bfba      	itte	lt
 800b1a0:	4249      	neglt	r1, r1
 800b1a2:	232d      	movlt	r3, #45	@ 0x2d
 800b1a4:	232b      	movge	r3, #43	@ 0x2b
 800b1a6:	2909      	cmp	r1, #9
 800b1a8:	7002      	strb	r2, [r0, #0]
 800b1aa:	7043      	strb	r3, [r0, #1]
 800b1ac:	dd29      	ble.n	800b202 <__exponent+0x68>
 800b1ae:	f10d 0307 	add.w	r3, sp, #7
 800b1b2:	461d      	mov	r5, r3
 800b1b4:	270a      	movs	r7, #10
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	fbb1 f6f7 	udiv	r6, r1, r7
 800b1bc:	fb07 1416 	mls	r4, r7, r6, r1
 800b1c0:	3430      	adds	r4, #48	@ 0x30
 800b1c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b1c6:	460c      	mov	r4, r1
 800b1c8:	2c63      	cmp	r4, #99	@ 0x63
 800b1ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800b1ce:	4631      	mov	r1, r6
 800b1d0:	dcf1      	bgt.n	800b1b6 <__exponent+0x1c>
 800b1d2:	3130      	adds	r1, #48	@ 0x30
 800b1d4:	1e94      	subs	r4, r2, #2
 800b1d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b1da:	1c41      	adds	r1, r0, #1
 800b1dc:	4623      	mov	r3, r4
 800b1de:	42ab      	cmp	r3, r5
 800b1e0:	d30a      	bcc.n	800b1f8 <__exponent+0x5e>
 800b1e2:	f10d 0309 	add.w	r3, sp, #9
 800b1e6:	1a9b      	subs	r3, r3, r2
 800b1e8:	42ac      	cmp	r4, r5
 800b1ea:	bf88      	it	hi
 800b1ec:	2300      	movhi	r3, #0
 800b1ee:	3302      	adds	r3, #2
 800b1f0:	4403      	add	r3, r0
 800b1f2:	1a18      	subs	r0, r3, r0
 800b1f4:	b003      	add	sp, #12
 800b1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b1fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b200:	e7ed      	b.n	800b1de <__exponent+0x44>
 800b202:	2330      	movs	r3, #48	@ 0x30
 800b204:	3130      	adds	r1, #48	@ 0x30
 800b206:	7083      	strb	r3, [r0, #2]
 800b208:	70c1      	strb	r1, [r0, #3]
 800b20a:	1d03      	adds	r3, r0, #4
 800b20c:	e7f1      	b.n	800b1f2 <__exponent+0x58>
	...

0800b210 <_printf_float>:
 800b210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b214:	b08d      	sub	sp, #52	@ 0x34
 800b216:	460c      	mov	r4, r1
 800b218:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b21c:	4616      	mov	r6, r2
 800b21e:	461f      	mov	r7, r3
 800b220:	4605      	mov	r5, r0
 800b222:	f000 fd0f 	bl	800bc44 <_localeconv_r>
 800b226:	6803      	ldr	r3, [r0, #0]
 800b228:	9304      	str	r3, [sp, #16]
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7f5 f890 	bl	8000350 <strlen>
 800b230:	2300      	movs	r3, #0
 800b232:	930a      	str	r3, [sp, #40]	@ 0x28
 800b234:	f8d8 3000 	ldr.w	r3, [r8]
 800b238:	9005      	str	r0, [sp, #20]
 800b23a:	3307      	adds	r3, #7
 800b23c:	f023 0307 	bic.w	r3, r3, #7
 800b240:	f103 0208 	add.w	r2, r3, #8
 800b244:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b248:	f8d4 b000 	ldr.w	fp, [r4]
 800b24c:	f8c8 2000 	str.w	r2, [r8]
 800b250:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b254:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b258:	9307      	str	r3, [sp, #28]
 800b25a:	f8cd 8018 	str.w	r8, [sp, #24]
 800b25e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b262:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b266:	4b9c      	ldr	r3, [pc, #624]	@ (800b4d8 <_printf_float+0x2c8>)
 800b268:	f04f 32ff 	mov.w	r2, #4294967295
 800b26c:	f7f5 fcce 	bl	8000c0c <__aeabi_dcmpun>
 800b270:	bb70      	cbnz	r0, 800b2d0 <_printf_float+0xc0>
 800b272:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b276:	4b98      	ldr	r3, [pc, #608]	@ (800b4d8 <_printf_float+0x2c8>)
 800b278:	f04f 32ff 	mov.w	r2, #4294967295
 800b27c:	f7f5 fca8 	bl	8000bd0 <__aeabi_dcmple>
 800b280:	bb30      	cbnz	r0, 800b2d0 <_printf_float+0xc0>
 800b282:	2200      	movs	r2, #0
 800b284:	2300      	movs	r3, #0
 800b286:	4640      	mov	r0, r8
 800b288:	4649      	mov	r1, r9
 800b28a:	f7f5 fc97 	bl	8000bbc <__aeabi_dcmplt>
 800b28e:	b110      	cbz	r0, 800b296 <_printf_float+0x86>
 800b290:	232d      	movs	r3, #45	@ 0x2d
 800b292:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b296:	4a91      	ldr	r2, [pc, #580]	@ (800b4dc <_printf_float+0x2cc>)
 800b298:	4b91      	ldr	r3, [pc, #580]	@ (800b4e0 <_printf_float+0x2d0>)
 800b29a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b29e:	bf94      	ite	ls
 800b2a0:	4690      	movls	r8, r2
 800b2a2:	4698      	movhi	r8, r3
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	6123      	str	r3, [r4, #16]
 800b2a8:	f02b 0304 	bic.w	r3, fp, #4
 800b2ac:	6023      	str	r3, [r4, #0]
 800b2ae:	f04f 0900 	mov.w	r9, #0
 800b2b2:	9700      	str	r7, [sp, #0]
 800b2b4:	4633      	mov	r3, r6
 800b2b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b2b8:	4621      	mov	r1, r4
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	f000 f9d2 	bl	800b664 <_printf_common>
 800b2c0:	3001      	adds	r0, #1
 800b2c2:	f040 808d 	bne.w	800b3e0 <_printf_float+0x1d0>
 800b2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ca:	b00d      	add	sp, #52	@ 0x34
 800b2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2d0:	4642      	mov	r2, r8
 800b2d2:	464b      	mov	r3, r9
 800b2d4:	4640      	mov	r0, r8
 800b2d6:	4649      	mov	r1, r9
 800b2d8:	f7f5 fc98 	bl	8000c0c <__aeabi_dcmpun>
 800b2dc:	b140      	cbz	r0, 800b2f0 <_printf_float+0xe0>
 800b2de:	464b      	mov	r3, r9
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	bfbc      	itt	lt
 800b2e4:	232d      	movlt	r3, #45	@ 0x2d
 800b2e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b2ea:	4a7e      	ldr	r2, [pc, #504]	@ (800b4e4 <_printf_float+0x2d4>)
 800b2ec:	4b7e      	ldr	r3, [pc, #504]	@ (800b4e8 <_printf_float+0x2d8>)
 800b2ee:	e7d4      	b.n	800b29a <_printf_float+0x8a>
 800b2f0:	6863      	ldr	r3, [r4, #4]
 800b2f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b2f6:	9206      	str	r2, [sp, #24]
 800b2f8:	1c5a      	adds	r2, r3, #1
 800b2fa:	d13b      	bne.n	800b374 <_printf_float+0x164>
 800b2fc:	2306      	movs	r3, #6
 800b2fe:	6063      	str	r3, [r4, #4]
 800b300:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b304:	2300      	movs	r3, #0
 800b306:	6022      	str	r2, [r4, #0]
 800b308:	9303      	str	r3, [sp, #12]
 800b30a:	ab0a      	add	r3, sp, #40	@ 0x28
 800b30c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b310:	ab09      	add	r3, sp, #36	@ 0x24
 800b312:	9300      	str	r3, [sp, #0]
 800b314:	6861      	ldr	r1, [r4, #4]
 800b316:	ec49 8b10 	vmov	d0, r8, r9
 800b31a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b31e:	4628      	mov	r0, r5
 800b320:	f7ff fed6 	bl	800b0d0 <__cvt>
 800b324:	9b06      	ldr	r3, [sp, #24]
 800b326:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b328:	2b47      	cmp	r3, #71	@ 0x47
 800b32a:	4680      	mov	r8, r0
 800b32c:	d129      	bne.n	800b382 <_printf_float+0x172>
 800b32e:	1cc8      	adds	r0, r1, #3
 800b330:	db02      	blt.n	800b338 <_printf_float+0x128>
 800b332:	6863      	ldr	r3, [r4, #4]
 800b334:	4299      	cmp	r1, r3
 800b336:	dd41      	ble.n	800b3bc <_printf_float+0x1ac>
 800b338:	f1aa 0a02 	sub.w	sl, sl, #2
 800b33c:	fa5f fa8a 	uxtb.w	sl, sl
 800b340:	3901      	subs	r1, #1
 800b342:	4652      	mov	r2, sl
 800b344:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b348:	9109      	str	r1, [sp, #36]	@ 0x24
 800b34a:	f7ff ff26 	bl	800b19a <__exponent>
 800b34e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b350:	1813      	adds	r3, r2, r0
 800b352:	2a01      	cmp	r2, #1
 800b354:	4681      	mov	r9, r0
 800b356:	6123      	str	r3, [r4, #16]
 800b358:	dc02      	bgt.n	800b360 <_printf_float+0x150>
 800b35a:	6822      	ldr	r2, [r4, #0]
 800b35c:	07d2      	lsls	r2, r2, #31
 800b35e:	d501      	bpl.n	800b364 <_printf_float+0x154>
 800b360:	3301      	adds	r3, #1
 800b362:	6123      	str	r3, [r4, #16]
 800b364:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d0a2      	beq.n	800b2b2 <_printf_float+0xa2>
 800b36c:	232d      	movs	r3, #45	@ 0x2d
 800b36e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b372:	e79e      	b.n	800b2b2 <_printf_float+0xa2>
 800b374:	9a06      	ldr	r2, [sp, #24]
 800b376:	2a47      	cmp	r2, #71	@ 0x47
 800b378:	d1c2      	bne.n	800b300 <_printf_float+0xf0>
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d1c0      	bne.n	800b300 <_printf_float+0xf0>
 800b37e:	2301      	movs	r3, #1
 800b380:	e7bd      	b.n	800b2fe <_printf_float+0xee>
 800b382:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b386:	d9db      	bls.n	800b340 <_printf_float+0x130>
 800b388:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b38c:	d118      	bne.n	800b3c0 <_printf_float+0x1b0>
 800b38e:	2900      	cmp	r1, #0
 800b390:	6863      	ldr	r3, [r4, #4]
 800b392:	dd0b      	ble.n	800b3ac <_printf_float+0x19c>
 800b394:	6121      	str	r1, [r4, #16]
 800b396:	b913      	cbnz	r3, 800b39e <_printf_float+0x18e>
 800b398:	6822      	ldr	r2, [r4, #0]
 800b39a:	07d0      	lsls	r0, r2, #31
 800b39c:	d502      	bpl.n	800b3a4 <_printf_float+0x194>
 800b39e:	3301      	adds	r3, #1
 800b3a0:	440b      	add	r3, r1
 800b3a2:	6123      	str	r3, [r4, #16]
 800b3a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b3a6:	f04f 0900 	mov.w	r9, #0
 800b3aa:	e7db      	b.n	800b364 <_printf_float+0x154>
 800b3ac:	b913      	cbnz	r3, 800b3b4 <_printf_float+0x1a4>
 800b3ae:	6822      	ldr	r2, [r4, #0]
 800b3b0:	07d2      	lsls	r2, r2, #31
 800b3b2:	d501      	bpl.n	800b3b8 <_printf_float+0x1a8>
 800b3b4:	3302      	adds	r3, #2
 800b3b6:	e7f4      	b.n	800b3a2 <_printf_float+0x192>
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e7f2      	b.n	800b3a2 <_printf_float+0x192>
 800b3bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b3c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3c2:	4299      	cmp	r1, r3
 800b3c4:	db05      	blt.n	800b3d2 <_printf_float+0x1c2>
 800b3c6:	6823      	ldr	r3, [r4, #0]
 800b3c8:	6121      	str	r1, [r4, #16]
 800b3ca:	07d8      	lsls	r0, r3, #31
 800b3cc:	d5ea      	bpl.n	800b3a4 <_printf_float+0x194>
 800b3ce:	1c4b      	adds	r3, r1, #1
 800b3d0:	e7e7      	b.n	800b3a2 <_printf_float+0x192>
 800b3d2:	2900      	cmp	r1, #0
 800b3d4:	bfd4      	ite	le
 800b3d6:	f1c1 0202 	rsble	r2, r1, #2
 800b3da:	2201      	movgt	r2, #1
 800b3dc:	4413      	add	r3, r2
 800b3de:	e7e0      	b.n	800b3a2 <_printf_float+0x192>
 800b3e0:	6823      	ldr	r3, [r4, #0]
 800b3e2:	055a      	lsls	r2, r3, #21
 800b3e4:	d407      	bmi.n	800b3f6 <_printf_float+0x1e6>
 800b3e6:	6923      	ldr	r3, [r4, #16]
 800b3e8:	4642      	mov	r2, r8
 800b3ea:	4631      	mov	r1, r6
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	47b8      	blx	r7
 800b3f0:	3001      	adds	r0, #1
 800b3f2:	d12b      	bne.n	800b44c <_printf_float+0x23c>
 800b3f4:	e767      	b.n	800b2c6 <_printf_float+0xb6>
 800b3f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b3fa:	f240 80dd 	bls.w	800b5b8 <_printf_float+0x3a8>
 800b3fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b402:	2200      	movs	r2, #0
 800b404:	2300      	movs	r3, #0
 800b406:	f7f5 fbcf 	bl	8000ba8 <__aeabi_dcmpeq>
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d033      	beq.n	800b476 <_printf_float+0x266>
 800b40e:	4a37      	ldr	r2, [pc, #220]	@ (800b4ec <_printf_float+0x2dc>)
 800b410:	2301      	movs	r3, #1
 800b412:	4631      	mov	r1, r6
 800b414:	4628      	mov	r0, r5
 800b416:	47b8      	blx	r7
 800b418:	3001      	adds	r0, #1
 800b41a:	f43f af54 	beq.w	800b2c6 <_printf_float+0xb6>
 800b41e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b422:	4543      	cmp	r3, r8
 800b424:	db02      	blt.n	800b42c <_printf_float+0x21c>
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	07d8      	lsls	r0, r3, #31
 800b42a:	d50f      	bpl.n	800b44c <_printf_float+0x23c>
 800b42c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b430:	4631      	mov	r1, r6
 800b432:	4628      	mov	r0, r5
 800b434:	47b8      	blx	r7
 800b436:	3001      	adds	r0, #1
 800b438:	f43f af45 	beq.w	800b2c6 <_printf_float+0xb6>
 800b43c:	f04f 0900 	mov.w	r9, #0
 800b440:	f108 38ff 	add.w	r8, r8, #4294967295
 800b444:	f104 0a1a 	add.w	sl, r4, #26
 800b448:	45c8      	cmp	r8, r9
 800b44a:	dc09      	bgt.n	800b460 <_printf_float+0x250>
 800b44c:	6823      	ldr	r3, [r4, #0]
 800b44e:	079b      	lsls	r3, r3, #30
 800b450:	f100 8103 	bmi.w	800b65a <_printf_float+0x44a>
 800b454:	68e0      	ldr	r0, [r4, #12]
 800b456:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b458:	4298      	cmp	r0, r3
 800b45a:	bfb8      	it	lt
 800b45c:	4618      	movlt	r0, r3
 800b45e:	e734      	b.n	800b2ca <_printf_float+0xba>
 800b460:	2301      	movs	r3, #1
 800b462:	4652      	mov	r2, sl
 800b464:	4631      	mov	r1, r6
 800b466:	4628      	mov	r0, r5
 800b468:	47b8      	blx	r7
 800b46a:	3001      	adds	r0, #1
 800b46c:	f43f af2b 	beq.w	800b2c6 <_printf_float+0xb6>
 800b470:	f109 0901 	add.w	r9, r9, #1
 800b474:	e7e8      	b.n	800b448 <_printf_float+0x238>
 800b476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b478:	2b00      	cmp	r3, #0
 800b47a:	dc39      	bgt.n	800b4f0 <_printf_float+0x2e0>
 800b47c:	4a1b      	ldr	r2, [pc, #108]	@ (800b4ec <_printf_float+0x2dc>)
 800b47e:	2301      	movs	r3, #1
 800b480:	4631      	mov	r1, r6
 800b482:	4628      	mov	r0, r5
 800b484:	47b8      	blx	r7
 800b486:	3001      	adds	r0, #1
 800b488:	f43f af1d 	beq.w	800b2c6 <_printf_float+0xb6>
 800b48c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b490:	ea59 0303 	orrs.w	r3, r9, r3
 800b494:	d102      	bne.n	800b49c <_printf_float+0x28c>
 800b496:	6823      	ldr	r3, [r4, #0]
 800b498:	07d9      	lsls	r1, r3, #31
 800b49a:	d5d7      	bpl.n	800b44c <_printf_float+0x23c>
 800b49c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4a0:	4631      	mov	r1, r6
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	47b8      	blx	r7
 800b4a6:	3001      	adds	r0, #1
 800b4a8:	f43f af0d 	beq.w	800b2c6 <_printf_float+0xb6>
 800b4ac:	f04f 0a00 	mov.w	sl, #0
 800b4b0:	f104 0b1a 	add.w	fp, r4, #26
 800b4b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4b6:	425b      	negs	r3, r3
 800b4b8:	4553      	cmp	r3, sl
 800b4ba:	dc01      	bgt.n	800b4c0 <_printf_float+0x2b0>
 800b4bc:	464b      	mov	r3, r9
 800b4be:	e793      	b.n	800b3e8 <_printf_float+0x1d8>
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	465a      	mov	r2, fp
 800b4c4:	4631      	mov	r1, r6
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	47b8      	blx	r7
 800b4ca:	3001      	adds	r0, #1
 800b4cc:	f43f aefb 	beq.w	800b2c6 <_printf_float+0xb6>
 800b4d0:	f10a 0a01 	add.w	sl, sl, #1
 800b4d4:	e7ee      	b.n	800b4b4 <_printf_float+0x2a4>
 800b4d6:	bf00      	nop
 800b4d8:	7fefffff 	.word	0x7fefffff
 800b4dc:	080267c4 	.word	0x080267c4
 800b4e0:	080267c8 	.word	0x080267c8
 800b4e4:	080267cc 	.word	0x080267cc
 800b4e8:	080267d0 	.word	0x080267d0
 800b4ec:	080267d4 	.word	0x080267d4
 800b4f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b4f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b4f6:	4553      	cmp	r3, sl
 800b4f8:	bfa8      	it	ge
 800b4fa:	4653      	movge	r3, sl
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	4699      	mov	r9, r3
 800b500:	dc36      	bgt.n	800b570 <_printf_float+0x360>
 800b502:	f04f 0b00 	mov.w	fp, #0
 800b506:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b50a:	f104 021a 	add.w	r2, r4, #26
 800b50e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b510:	9306      	str	r3, [sp, #24]
 800b512:	eba3 0309 	sub.w	r3, r3, r9
 800b516:	455b      	cmp	r3, fp
 800b518:	dc31      	bgt.n	800b57e <_printf_float+0x36e>
 800b51a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b51c:	459a      	cmp	sl, r3
 800b51e:	dc3a      	bgt.n	800b596 <_printf_float+0x386>
 800b520:	6823      	ldr	r3, [r4, #0]
 800b522:	07da      	lsls	r2, r3, #31
 800b524:	d437      	bmi.n	800b596 <_printf_float+0x386>
 800b526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b528:	ebaa 0903 	sub.w	r9, sl, r3
 800b52c:	9b06      	ldr	r3, [sp, #24]
 800b52e:	ebaa 0303 	sub.w	r3, sl, r3
 800b532:	4599      	cmp	r9, r3
 800b534:	bfa8      	it	ge
 800b536:	4699      	movge	r9, r3
 800b538:	f1b9 0f00 	cmp.w	r9, #0
 800b53c:	dc33      	bgt.n	800b5a6 <_printf_float+0x396>
 800b53e:	f04f 0800 	mov.w	r8, #0
 800b542:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b546:	f104 0b1a 	add.w	fp, r4, #26
 800b54a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b54c:	ebaa 0303 	sub.w	r3, sl, r3
 800b550:	eba3 0309 	sub.w	r3, r3, r9
 800b554:	4543      	cmp	r3, r8
 800b556:	f77f af79 	ble.w	800b44c <_printf_float+0x23c>
 800b55a:	2301      	movs	r3, #1
 800b55c:	465a      	mov	r2, fp
 800b55e:	4631      	mov	r1, r6
 800b560:	4628      	mov	r0, r5
 800b562:	47b8      	blx	r7
 800b564:	3001      	adds	r0, #1
 800b566:	f43f aeae 	beq.w	800b2c6 <_printf_float+0xb6>
 800b56a:	f108 0801 	add.w	r8, r8, #1
 800b56e:	e7ec      	b.n	800b54a <_printf_float+0x33a>
 800b570:	4642      	mov	r2, r8
 800b572:	4631      	mov	r1, r6
 800b574:	4628      	mov	r0, r5
 800b576:	47b8      	blx	r7
 800b578:	3001      	adds	r0, #1
 800b57a:	d1c2      	bne.n	800b502 <_printf_float+0x2f2>
 800b57c:	e6a3      	b.n	800b2c6 <_printf_float+0xb6>
 800b57e:	2301      	movs	r3, #1
 800b580:	4631      	mov	r1, r6
 800b582:	4628      	mov	r0, r5
 800b584:	9206      	str	r2, [sp, #24]
 800b586:	47b8      	blx	r7
 800b588:	3001      	adds	r0, #1
 800b58a:	f43f ae9c 	beq.w	800b2c6 <_printf_float+0xb6>
 800b58e:	9a06      	ldr	r2, [sp, #24]
 800b590:	f10b 0b01 	add.w	fp, fp, #1
 800b594:	e7bb      	b.n	800b50e <_printf_float+0x2fe>
 800b596:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b59a:	4631      	mov	r1, r6
 800b59c:	4628      	mov	r0, r5
 800b59e:	47b8      	blx	r7
 800b5a0:	3001      	adds	r0, #1
 800b5a2:	d1c0      	bne.n	800b526 <_printf_float+0x316>
 800b5a4:	e68f      	b.n	800b2c6 <_printf_float+0xb6>
 800b5a6:	9a06      	ldr	r2, [sp, #24]
 800b5a8:	464b      	mov	r3, r9
 800b5aa:	4442      	add	r2, r8
 800b5ac:	4631      	mov	r1, r6
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	47b8      	blx	r7
 800b5b2:	3001      	adds	r0, #1
 800b5b4:	d1c3      	bne.n	800b53e <_printf_float+0x32e>
 800b5b6:	e686      	b.n	800b2c6 <_printf_float+0xb6>
 800b5b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b5bc:	f1ba 0f01 	cmp.w	sl, #1
 800b5c0:	dc01      	bgt.n	800b5c6 <_printf_float+0x3b6>
 800b5c2:	07db      	lsls	r3, r3, #31
 800b5c4:	d536      	bpl.n	800b634 <_printf_float+0x424>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	4642      	mov	r2, r8
 800b5ca:	4631      	mov	r1, r6
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	47b8      	blx	r7
 800b5d0:	3001      	adds	r0, #1
 800b5d2:	f43f ae78 	beq.w	800b2c6 <_printf_float+0xb6>
 800b5d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5da:	4631      	mov	r1, r6
 800b5dc:	4628      	mov	r0, r5
 800b5de:	47b8      	blx	r7
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	f43f ae70 	beq.w	800b2c6 <_printf_float+0xb6>
 800b5e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b5f2:	f7f5 fad9 	bl	8000ba8 <__aeabi_dcmpeq>
 800b5f6:	b9c0      	cbnz	r0, 800b62a <_printf_float+0x41a>
 800b5f8:	4653      	mov	r3, sl
 800b5fa:	f108 0201 	add.w	r2, r8, #1
 800b5fe:	4631      	mov	r1, r6
 800b600:	4628      	mov	r0, r5
 800b602:	47b8      	blx	r7
 800b604:	3001      	adds	r0, #1
 800b606:	d10c      	bne.n	800b622 <_printf_float+0x412>
 800b608:	e65d      	b.n	800b2c6 <_printf_float+0xb6>
 800b60a:	2301      	movs	r3, #1
 800b60c:	465a      	mov	r2, fp
 800b60e:	4631      	mov	r1, r6
 800b610:	4628      	mov	r0, r5
 800b612:	47b8      	blx	r7
 800b614:	3001      	adds	r0, #1
 800b616:	f43f ae56 	beq.w	800b2c6 <_printf_float+0xb6>
 800b61a:	f108 0801 	add.w	r8, r8, #1
 800b61e:	45d0      	cmp	r8, sl
 800b620:	dbf3      	blt.n	800b60a <_printf_float+0x3fa>
 800b622:	464b      	mov	r3, r9
 800b624:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b628:	e6df      	b.n	800b3ea <_printf_float+0x1da>
 800b62a:	f04f 0800 	mov.w	r8, #0
 800b62e:	f104 0b1a 	add.w	fp, r4, #26
 800b632:	e7f4      	b.n	800b61e <_printf_float+0x40e>
 800b634:	2301      	movs	r3, #1
 800b636:	4642      	mov	r2, r8
 800b638:	e7e1      	b.n	800b5fe <_printf_float+0x3ee>
 800b63a:	2301      	movs	r3, #1
 800b63c:	464a      	mov	r2, r9
 800b63e:	4631      	mov	r1, r6
 800b640:	4628      	mov	r0, r5
 800b642:	47b8      	blx	r7
 800b644:	3001      	adds	r0, #1
 800b646:	f43f ae3e 	beq.w	800b2c6 <_printf_float+0xb6>
 800b64a:	f108 0801 	add.w	r8, r8, #1
 800b64e:	68e3      	ldr	r3, [r4, #12]
 800b650:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b652:	1a5b      	subs	r3, r3, r1
 800b654:	4543      	cmp	r3, r8
 800b656:	dcf0      	bgt.n	800b63a <_printf_float+0x42a>
 800b658:	e6fc      	b.n	800b454 <_printf_float+0x244>
 800b65a:	f04f 0800 	mov.w	r8, #0
 800b65e:	f104 0919 	add.w	r9, r4, #25
 800b662:	e7f4      	b.n	800b64e <_printf_float+0x43e>

0800b664 <_printf_common>:
 800b664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b668:	4616      	mov	r6, r2
 800b66a:	4698      	mov	r8, r3
 800b66c:	688a      	ldr	r2, [r1, #8]
 800b66e:	690b      	ldr	r3, [r1, #16]
 800b670:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b674:	4293      	cmp	r3, r2
 800b676:	bfb8      	it	lt
 800b678:	4613      	movlt	r3, r2
 800b67a:	6033      	str	r3, [r6, #0]
 800b67c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b680:	4607      	mov	r7, r0
 800b682:	460c      	mov	r4, r1
 800b684:	b10a      	cbz	r2, 800b68a <_printf_common+0x26>
 800b686:	3301      	adds	r3, #1
 800b688:	6033      	str	r3, [r6, #0]
 800b68a:	6823      	ldr	r3, [r4, #0]
 800b68c:	0699      	lsls	r1, r3, #26
 800b68e:	bf42      	ittt	mi
 800b690:	6833      	ldrmi	r3, [r6, #0]
 800b692:	3302      	addmi	r3, #2
 800b694:	6033      	strmi	r3, [r6, #0]
 800b696:	6825      	ldr	r5, [r4, #0]
 800b698:	f015 0506 	ands.w	r5, r5, #6
 800b69c:	d106      	bne.n	800b6ac <_printf_common+0x48>
 800b69e:	f104 0a19 	add.w	sl, r4, #25
 800b6a2:	68e3      	ldr	r3, [r4, #12]
 800b6a4:	6832      	ldr	r2, [r6, #0]
 800b6a6:	1a9b      	subs	r3, r3, r2
 800b6a8:	42ab      	cmp	r3, r5
 800b6aa:	dc26      	bgt.n	800b6fa <_printf_common+0x96>
 800b6ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b6b0:	6822      	ldr	r2, [r4, #0]
 800b6b2:	3b00      	subs	r3, #0
 800b6b4:	bf18      	it	ne
 800b6b6:	2301      	movne	r3, #1
 800b6b8:	0692      	lsls	r2, r2, #26
 800b6ba:	d42b      	bmi.n	800b714 <_printf_common+0xb0>
 800b6bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b6c0:	4641      	mov	r1, r8
 800b6c2:	4638      	mov	r0, r7
 800b6c4:	47c8      	blx	r9
 800b6c6:	3001      	adds	r0, #1
 800b6c8:	d01e      	beq.n	800b708 <_printf_common+0xa4>
 800b6ca:	6823      	ldr	r3, [r4, #0]
 800b6cc:	6922      	ldr	r2, [r4, #16]
 800b6ce:	f003 0306 	and.w	r3, r3, #6
 800b6d2:	2b04      	cmp	r3, #4
 800b6d4:	bf02      	ittt	eq
 800b6d6:	68e5      	ldreq	r5, [r4, #12]
 800b6d8:	6833      	ldreq	r3, [r6, #0]
 800b6da:	1aed      	subeq	r5, r5, r3
 800b6dc:	68a3      	ldr	r3, [r4, #8]
 800b6de:	bf0c      	ite	eq
 800b6e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6e4:	2500      	movne	r5, #0
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	bfc4      	itt	gt
 800b6ea:	1a9b      	subgt	r3, r3, r2
 800b6ec:	18ed      	addgt	r5, r5, r3
 800b6ee:	2600      	movs	r6, #0
 800b6f0:	341a      	adds	r4, #26
 800b6f2:	42b5      	cmp	r5, r6
 800b6f4:	d11a      	bne.n	800b72c <_printf_common+0xc8>
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	e008      	b.n	800b70c <_printf_common+0xa8>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	4652      	mov	r2, sl
 800b6fe:	4641      	mov	r1, r8
 800b700:	4638      	mov	r0, r7
 800b702:	47c8      	blx	r9
 800b704:	3001      	adds	r0, #1
 800b706:	d103      	bne.n	800b710 <_printf_common+0xac>
 800b708:	f04f 30ff 	mov.w	r0, #4294967295
 800b70c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b710:	3501      	adds	r5, #1
 800b712:	e7c6      	b.n	800b6a2 <_printf_common+0x3e>
 800b714:	18e1      	adds	r1, r4, r3
 800b716:	1c5a      	adds	r2, r3, #1
 800b718:	2030      	movs	r0, #48	@ 0x30
 800b71a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b71e:	4422      	add	r2, r4
 800b720:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b724:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b728:	3302      	adds	r3, #2
 800b72a:	e7c7      	b.n	800b6bc <_printf_common+0x58>
 800b72c:	2301      	movs	r3, #1
 800b72e:	4622      	mov	r2, r4
 800b730:	4641      	mov	r1, r8
 800b732:	4638      	mov	r0, r7
 800b734:	47c8      	blx	r9
 800b736:	3001      	adds	r0, #1
 800b738:	d0e6      	beq.n	800b708 <_printf_common+0xa4>
 800b73a:	3601      	adds	r6, #1
 800b73c:	e7d9      	b.n	800b6f2 <_printf_common+0x8e>
	...

0800b740 <_printf_i>:
 800b740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b744:	7e0f      	ldrb	r7, [r1, #24]
 800b746:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b748:	2f78      	cmp	r7, #120	@ 0x78
 800b74a:	4691      	mov	r9, r2
 800b74c:	4680      	mov	r8, r0
 800b74e:	460c      	mov	r4, r1
 800b750:	469a      	mov	sl, r3
 800b752:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b756:	d807      	bhi.n	800b768 <_printf_i+0x28>
 800b758:	2f62      	cmp	r7, #98	@ 0x62
 800b75a:	d80a      	bhi.n	800b772 <_printf_i+0x32>
 800b75c:	2f00      	cmp	r7, #0
 800b75e:	f000 80d2 	beq.w	800b906 <_printf_i+0x1c6>
 800b762:	2f58      	cmp	r7, #88	@ 0x58
 800b764:	f000 80b9 	beq.w	800b8da <_printf_i+0x19a>
 800b768:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b76c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b770:	e03a      	b.n	800b7e8 <_printf_i+0xa8>
 800b772:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b776:	2b15      	cmp	r3, #21
 800b778:	d8f6      	bhi.n	800b768 <_printf_i+0x28>
 800b77a:	a101      	add	r1, pc, #4	@ (adr r1, 800b780 <_printf_i+0x40>)
 800b77c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b780:	0800b7d9 	.word	0x0800b7d9
 800b784:	0800b7ed 	.word	0x0800b7ed
 800b788:	0800b769 	.word	0x0800b769
 800b78c:	0800b769 	.word	0x0800b769
 800b790:	0800b769 	.word	0x0800b769
 800b794:	0800b769 	.word	0x0800b769
 800b798:	0800b7ed 	.word	0x0800b7ed
 800b79c:	0800b769 	.word	0x0800b769
 800b7a0:	0800b769 	.word	0x0800b769
 800b7a4:	0800b769 	.word	0x0800b769
 800b7a8:	0800b769 	.word	0x0800b769
 800b7ac:	0800b8ed 	.word	0x0800b8ed
 800b7b0:	0800b817 	.word	0x0800b817
 800b7b4:	0800b8a7 	.word	0x0800b8a7
 800b7b8:	0800b769 	.word	0x0800b769
 800b7bc:	0800b769 	.word	0x0800b769
 800b7c0:	0800b90f 	.word	0x0800b90f
 800b7c4:	0800b769 	.word	0x0800b769
 800b7c8:	0800b817 	.word	0x0800b817
 800b7cc:	0800b769 	.word	0x0800b769
 800b7d0:	0800b769 	.word	0x0800b769
 800b7d4:	0800b8af 	.word	0x0800b8af
 800b7d8:	6833      	ldr	r3, [r6, #0]
 800b7da:	1d1a      	adds	r2, r3, #4
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	6032      	str	r2, [r6, #0]
 800b7e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	e09d      	b.n	800b928 <_printf_i+0x1e8>
 800b7ec:	6833      	ldr	r3, [r6, #0]
 800b7ee:	6820      	ldr	r0, [r4, #0]
 800b7f0:	1d19      	adds	r1, r3, #4
 800b7f2:	6031      	str	r1, [r6, #0]
 800b7f4:	0606      	lsls	r6, r0, #24
 800b7f6:	d501      	bpl.n	800b7fc <_printf_i+0xbc>
 800b7f8:	681d      	ldr	r5, [r3, #0]
 800b7fa:	e003      	b.n	800b804 <_printf_i+0xc4>
 800b7fc:	0645      	lsls	r5, r0, #25
 800b7fe:	d5fb      	bpl.n	800b7f8 <_printf_i+0xb8>
 800b800:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b804:	2d00      	cmp	r5, #0
 800b806:	da03      	bge.n	800b810 <_printf_i+0xd0>
 800b808:	232d      	movs	r3, #45	@ 0x2d
 800b80a:	426d      	negs	r5, r5
 800b80c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b810:	4859      	ldr	r0, [pc, #356]	@ (800b978 <_printf_i+0x238>)
 800b812:	230a      	movs	r3, #10
 800b814:	e011      	b.n	800b83a <_printf_i+0xfa>
 800b816:	6821      	ldr	r1, [r4, #0]
 800b818:	6833      	ldr	r3, [r6, #0]
 800b81a:	0608      	lsls	r0, r1, #24
 800b81c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b820:	d402      	bmi.n	800b828 <_printf_i+0xe8>
 800b822:	0649      	lsls	r1, r1, #25
 800b824:	bf48      	it	mi
 800b826:	b2ad      	uxthmi	r5, r5
 800b828:	2f6f      	cmp	r7, #111	@ 0x6f
 800b82a:	4853      	ldr	r0, [pc, #332]	@ (800b978 <_printf_i+0x238>)
 800b82c:	6033      	str	r3, [r6, #0]
 800b82e:	bf14      	ite	ne
 800b830:	230a      	movne	r3, #10
 800b832:	2308      	moveq	r3, #8
 800b834:	2100      	movs	r1, #0
 800b836:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b83a:	6866      	ldr	r6, [r4, #4]
 800b83c:	60a6      	str	r6, [r4, #8]
 800b83e:	2e00      	cmp	r6, #0
 800b840:	bfa2      	ittt	ge
 800b842:	6821      	ldrge	r1, [r4, #0]
 800b844:	f021 0104 	bicge.w	r1, r1, #4
 800b848:	6021      	strge	r1, [r4, #0]
 800b84a:	b90d      	cbnz	r5, 800b850 <_printf_i+0x110>
 800b84c:	2e00      	cmp	r6, #0
 800b84e:	d04b      	beq.n	800b8e8 <_printf_i+0x1a8>
 800b850:	4616      	mov	r6, r2
 800b852:	fbb5 f1f3 	udiv	r1, r5, r3
 800b856:	fb03 5711 	mls	r7, r3, r1, r5
 800b85a:	5dc7      	ldrb	r7, [r0, r7]
 800b85c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b860:	462f      	mov	r7, r5
 800b862:	42bb      	cmp	r3, r7
 800b864:	460d      	mov	r5, r1
 800b866:	d9f4      	bls.n	800b852 <_printf_i+0x112>
 800b868:	2b08      	cmp	r3, #8
 800b86a:	d10b      	bne.n	800b884 <_printf_i+0x144>
 800b86c:	6823      	ldr	r3, [r4, #0]
 800b86e:	07df      	lsls	r7, r3, #31
 800b870:	d508      	bpl.n	800b884 <_printf_i+0x144>
 800b872:	6923      	ldr	r3, [r4, #16]
 800b874:	6861      	ldr	r1, [r4, #4]
 800b876:	4299      	cmp	r1, r3
 800b878:	bfde      	ittt	le
 800b87a:	2330      	movle	r3, #48	@ 0x30
 800b87c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b880:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b884:	1b92      	subs	r2, r2, r6
 800b886:	6122      	str	r2, [r4, #16]
 800b888:	f8cd a000 	str.w	sl, [sp]
 800b88c:	464b      	mov	r3, r9
 800b88e:	aa03      	add	r2, sp, #12
 800b890:	4621      	mov	r1, r4
 800b892:	4640      	mov	r0, r8
 800b894:	f7ff fee6 	bl	800b664 <_printf_common>
 800b898:	3001      	adds	r0, #1
 800b89a:	d14a      	bne.n	800b932 <_printf_i+0x1f2>
 800b89c:	f04f 30ff 	mov.w	r0, #4294967295
 800b8a0:	b004      	add	sp, #16
 800b8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8a6:	6823      	ldr	r3, [r4, #0]
 800b8a8:	f043 0320 	orr.w	r3, r3, #32
 800b8ac:	6023      	str	r3, [r4, #0]
 800b8ae:	4833      	ldr	r0, [pc, #204]	@ (800b97c <_printf_i+0x23c>)
 800b8b0:	2778      	movs	r7, #120	@ 0x78
 800b8b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b8b6:	6823      	ldr	r3, [r4, #0]
 800b8b8:	6831      	ldr	r1, [r6, #0]
 800b8ba:	061f      	lsls	r7, r3, #24
 800b8bc:	f851 5b04 	ldr.w	r5, [r1], #4
 800b8c0:	d402      	bmi.n	800b8c8 <_printf_i+0x188>
 800b8c2:	065f      	lsls	r7, r3, #25
 800b8c4:	bf48      	it	mi
 800b8c6:	b2ad      	uxthmi	r5, r5
 800b8c8:	6031      	str	r1, [r6, #0]
 800b8ca:	07d9      	lsls	r1, r3, #31
 800b8cc:	bf44      	itt	mi
 800b8ce:	f043 0320 	orrmi.w	r3, r3, #32
 800b8d2:	6023      	strmi	r3, [r4, #0]
 800b8d4:	b11d      	cbz	r5, 800b8de <_printf_i+0x19e>
 800b8d6:	2310      	movs	r3, #16
 800b8d8:	e7ac      	b.n	800b834 <_printf_i+0xf4>
 800b8da:	4827      	ldr	r0, [pc, #156]	@ (800b978 <_printf_i+0x238>)
 800b8dc:	e7e9      	b.n	800b8b2 <_printf_i+0x172>
 800b8de:	6823      	ldr	r3, [r4, #0]
 800b8e0:	f023 0320 	bic.w	r3, r3, #32
 800b8e4:	6023      	str	r3, [r4, #0]
 800b8e6:	e7f6      	b.n	800b8d6 <_printf_i+0x196>
 800b8e8:	4616      	mov	r6, r2
 800b8ea:	e7bd      	b.n	800b868 <_printf_i+0x128>
 800b8ec:	6833      	ldr	r3, [r6, #0]
 800b8ee:	6825      	ldr	r5, [r4, #0]
 800b8f0:	6961      	ldr	r1, [r4, #20]
 800b8f2:	1d18      	adds	r0, r3, #4
 800b8f4:	6030      	str	r0, [r6, #0]
 800b8f6:	062e      	lsls	r6, r5, #24
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	d501      	bpl.n	800b900 <_printf_i+0x1c0>
 800b8fc:	6019      	str	r1, [r3, #0]
 800b8fe:	e002      	b.n	800b906 <_printf_i+0x1c6>
 800b900:	0668      	lsls	r0, r5, #25
 800b902:	d5fb      	bpl.n	800b8fc <_printf_i+0x1bc>
 800b904:	8019      	strh	r1, [r3, #0]
 800b906:	2300      	movs	r3, #0
 800b908:	6123      	str	r3, [r4, #16]
 800b90a:	4616      	mov	r6, r2
 800b90c:	e7bc      	b.n	800b888 <_printf_i+0x148>
 800b90e:	6833      	ldr	r3, [r6, #0]
 800b910:	1d1a      	adds	r2, r3, #4
 800b912:	6032      	str	r2, [r6, #0]
 800b914:	681e      	ldr	r6, [r3, #0]
 800b916:	6862      	ldr	r2, [r4, #4]
 800b918:	2100      	movs	r1, #0
 800b91a:	4630      	mov	r0, r6
 800b91c:	f7f4 fcc8 	bl	80002b0 <memchr>
 800b920:	b108      	cbz	r0, 800b926 <_printf_i+0x1e6>
 800b922:	1b80      	subs	r0, r0, r6
 800b924:	6060      	str	r0, [r4, #4]
 800b926:	6863      	ldr	r3, [r4, #4]
 800b928:	6123      	str	r3, [r4, #16]
 800b92a:	2300      	movs	r3, #0
 800b92c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b930:	e7aa      	b.n	800b888 <_printf_i+0x148>
 800b932:	6923      	ldr	r3, [r4, #16]
 800b934:	4632      	mov	r2, r6
 800b936:	4649      	mov	r1, r9
 800b938:	4640      	mov	r0, r8
 800b93a:	47d0      	blx	sl
 800b93c:	3001      	adds	r0, #1
 800b93e:	d0ad      	beq.n	800b89c <_printf_i+0x15c>
 800b940:	6823      	ldr	r3, [r4, #0]
 800b942:	079b      	lsls	r3, r3, #30
 800b944:	d413      	bmi.n	800b96e <_printf_i+0x22e>
 800b946:	68e0      	ldr	r0, [r4, #12]
 800b948:	9b03      	ldr	r3, [sp, #12]
 800b94a:	4298      	cmp	r0, r3
 800b94c:	bfb8      	it	lt
 800b94e:	4618      	movlt	r0, r3
 800b950:	e7a6      	b.n	800b8a0 <_printf_i+0x160>
 800b952:	2301      	movs	r3, #1
 800b954:	4632      	mov	r2, r6
 800b956:	4649      	mov	r1, r9
 800b958:	4640      	mov	r0, r8
 800b95a:	47d0      	blx	sl
 800b95c:	3001      	adds	r0, #1
 800b95e:	d09d      	beq.n	800b89c <_printf_i+0x15c>
 800b960:	3501      	adds	r5, #1
 800b962:	68e3      	ldr	r3, [r4, #12]
 800b964:	9903      	ldr	r1, [sp, #12]
 800b966:	1a5b      	subs	r3, r3, r1
 800b968:	42ab      	cmp	r3, r5
 800b96a:	dcf2      	bgt.n	800b952 <_printf_i+0x212>
 800b96c:	e7eb      	b.n	800b946 <_printf_i+0x206>
 800b96e:	2500      	movs	r5, #0
 800b970:	f104 0619 	add.w	r6, r4, #25
 800b974:	e7f5      	b.n	800b962 <_printf_i+0x222>
 800b976:	bf00      	nop
 800b978:	080267d6 	.word	0x080267d6
 800b97c:	080267e7 	.word	0x080267e7

0800b980 <std>:
 800b980:	2300      	movs	r3, #0
 800b982:	b510      	push	{r4, lr}
 800b984:	4604      	mov	r4, r0
 800b986:	e9c0 3300 	strd	r3, r3, [r0]
 800b98a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b98e:	6083      	str	r3, [r0, #8]
 800b990:	8181      	strh	r1, [r0, #12]
 800b992:	6643      	str	r3, [r0, #100]	@ 0x64
 800b994:	81c2      	strh	r2, [r0, #14]
 800b996:	6183      	str	r3, [r0, #24]
 800b998:	4619      	mov	r1, r3
 800b99a:	2208      	movs	r2, #8
 800b99c:	305c      	adds	r0, #92	@ 0x5c
 800b99e:	f000 f948 	bl	800bc32 <memset>
 800b9a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b9d8 <std+0x58>)
 800b9a4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b9a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b9dc <std+0x5c>)
 800b9a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b9aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b9e0 <std+0x60>)
 800b9ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b9ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b9e4 <std+0x64>)
 800b9b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b9b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b9e8 <std+0x68>)
 800b9b4:	6224      	str	r4, [r4, #32]
 800b9b6:	429c      	cmp	r4, r3
 800b9b8:	d006      	beq.n	800b9c8 <std+0x48>
 800b9ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b9be:	4294      	cmp	r4, r2
 800b9c0:	d002      	beq.n	800b9c8 <std+0x48>
 800b9c2:	33d0      	adds	r3, #208	@ 0xd0
 800b9c4:	429c      	cmp	r4, r3
 800b9c6:	d105      	bne.n	800b9d4 <std+0x54>
 800b9c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9d0:	f000 b9a6 	b.w	800bd20 <__retarget_lock_init_recursive>
 800b9d4:	bd10      	pop	{r4, pc}
 800b9d6:	bf00      	nop
 800b9d8:	0800bbad 	.word	0x0800bbad
 800b9dc:	0800bbcf 	.word	0x0800bbcf
 800b9e0:	0800bc07 	.word	0x0800bc07
 800b9e4:	0800bc2b 	.word	0x0800bc2b
 800b9e8:	200026bc 	.word	0x200026bc

0800b9ec <stdio_exit_handler>:
 800b9ec:	4a02      	ldr	r2, [pc, #8]	@ (800b9f8 <stdio_exit_handler+0xc>)
 800b9ee:	4903      	ldr	r1, [pc, #12]	@ (800b9fc <stdio_exit_handler+0x10>)
 800b9f0:	4803      	ldr	r0, [pc, #12]	@ (800ba00 <stdio_exit_handler+0x14>)
 800b9f2:	f000 b869 	b.w	800bac8 <_fwalk_sglue>
 800b9f6:	bf00      	nop
 800b9f8:	2000019c 	.word	0x2000019c
 800b9fc:	0800d67d 	.word	0x0800d67d
 800ba00:	200001ac 	.word	0x200001ac

0800ba04 <cleanup_stdio>:
 800ba04:	6841      	ldr	r1, [r0, #4]
 800ba06:	4b0c      	ldr	r3, [pc, #48]	@ (800ba38 <cleanup_stdio+0x34>)
 800ba08:	4299      	cmp	r1, r3
 800ba0a:	b510      	push	{r4, lr}
 800ba0c:	4604      	mov	r4, r0
 800ba0e:	d001      	beq.n	800ba14 <cleanup_stdio+0x10>
 800ba10:	f001 fe34 	bl	800d67c <_fflush_r>
 800ba14:	68a1      	ldr	r1, [r4, #8]
 800ba16:	4b09      	ldr	r3, [pc, #36]	@ (800ba3c <cleanup_stdio+0x38>)
 800ba18:	4299      	cmp	r1, r3
 800ba1a:	d002      	beq.n	800ba22 <cleanup_stdio+0x1e>
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f001 fe2d 	bl	800d67c <_fflush_r>
 800ba22:	68e1      	ldr	r1, [r4, #12]
 800ba24:	4b06      	ldr	r3, [pc, #24]	@ (800ba40 <cleanup_stdio+0x3c>)
 800ba26:	4299      	cmp	r1, r3
 800ba28:	d004      	beq.n	800ba34 <cleanup_stdio+0x30>
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba30:	f001 be24 	b.w	800d67c <_fflush_r>
 800ba34:	bd10      	pop	{r4, pc}
 800ba36:	bf00      	nop
 800ba38:	200026bc 	.word	0x200026bc
 800ba3c:	20002724 	.word	0x20002724
 800ba40:	2000278c 	.word	0x2000278c

0800ba44 <global_stdio_init.part.0>:
 800ba44:	b510      	push	{r4, lr}
 800ba46:	4b0b      	ldr	r3, [pc, #44]	@ (800ba74 <global_stdio_init.part.0+0x30>)
 800ba48:	4c0b      	ldr	r4, [pc, #44]	@ (800ba78 <global_stdio_init.part.0+0x34>)
 800ba4a:	4a0c      	ldr	r2, [pc, #48]	@ (800ba7c <global_stdio_init.part.0+0x38>)
 800ba4c:	601a      	str	r2, [r3, #0]
 800ba4e:	4620      	mov	r0, r4
 800ba50:	2200      	movs	r2, #0
 800ba52:	2104      	movs	r1, #4
 800ba54:	f7ff ff94 	bl	800b980 <std>
 800ba58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	2109      	movs	r1, #9
 800ba60:	f7ff ff8e 	bl	800b980 <std>
 800ba64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ba68:	2202      	movs	r2, #2
 800ba6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba6e:	2112      	movs	r1, #18
 800ba70:	f7ff bf86 	b.w	800b980 <std>
 800ba74:	200027f4 	.word	0x200027f4
 800ba78:	200026bc 	.word	0x200026bc
 800ba7c:	0800b9ed 	.word	0x0800b9ed

0800ba80 <__sfp_lock_acquire>:
 800ba80:	4801      	ldr	r0, [pc, #4]	@ (800ba88 <__sfp_lock_acquire+0x8>)
 800ba82:	f000 b94e 	b.w	800bd22 <__retarget_lock_acquire_recursive>
 800ba86:	bf00      	nop
 800ba88:	200027fd 	.word	0x200027fd

0800ba8c <__sfp_lock_release>:
 800ba8c:	4801      	ldr	r0, [pc, #4]	@ (800ba94 <__sfp_lock_release+0x8>)
 800ba8e:	f000 b949 	b.w	800bd24 <__retarget_lock_release_recursive>
 800ba92:	bf00      	nop
 800ba94:	200027fd 	.word	0x200027fd

0800ba98 <__sinit>:
 800ba98:	b510      	push	{r4, lr}
 800ba9a:	4604      	mov	r4, r0
 800ba9c:	f7ff fff0 	bl	800ba80 <__sfp_lock_acquire>
 800baa0:	6a23      	ldr	r3, [r4, #32]
 800baa2:	b11b      	cbz	r3, 800baac <__sinit+0x14>
 800baa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baa8:	f7ff bff0 	b.w	800ba8c <__sfp_lock_release>
 800baac:	4b04      	ldr	r3, [pc, #16]	@ (800bac0 <__sinit+0x28>)
 800baae:	6223      	str	r3, [r4, #32]
 800bab0:	4b04      	ldr	r3, [pc, #16]	@ (800bac4 <__sinit+0x2c>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d1f5      	bne.n	800baa4 <__sinit+0xc>
 800bab8:	f7ff ffc4 	bl	800ba44 <global_stdio_init.part.0>
 800babc:	e7f2      	b.n	800baa4 <__sinit+0xc>
 800babe:	bf00      	nop
 800bac0:	0800ba05 	.word	0x0800ba05
 800bac4:	200027f4 	.word	0x200027f4

0800bac8 <_fwalk_sglue>:
 800bac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bacc:	4607      	mov	r7, r0
 800bace:	4688      	mov	r8, r1
 800bad0:	4614      	mov	r4, r2
 800bad2:	2600      	movs	r6, #0
 800bad4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bad8:	f1b9 0901 	subs.w	r9, r9, #1
 800badc:	d505      	bpl.n	800baea <_fwalk_sglue+0x22>
 800bade:	6824      	ldr	r4, [r4, #0]
 800bae0:	2c00      	cmp	r4, #0
 800bae2:	d1f7      	bne.n	800bad4 <_fwalk_sglue+0xc>
 800bae4:	4630      	mov	r0, r6
 800bae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baea:	89ab      	ldrh	r3, [r5, #12]
 800baec:	2b01      	cmp	r3, #1
 800baee:	d907      	bls.n	800bb00 <_fwalk_sglue+0x38>
 800baf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800baf4:	3301      	adds	r3, #1
 800baf6:	d003      	beq.n	800bb00 <_fwalk_sglue+0x38>
 800baf8:	4629      	mov	r1, r5
 800bafa:	4638      	mov	r0, r7
 800bafc:	47c0      	blx	r8
 800bafe:	4306      	orrs	r6, r0
 800bb00:	3568      	adds	r5, #104	@ 0x68
 800bb02:	e7e9      	b.n	800bad8 <_fwalk_sglue+0x10>

0800bb04 <sniprintf>:
 800bb04:	b40c      	push	{r2, r3}
 800bb06:	b530      	push	{r4, r5, lr}
 800bb08:	4b17      	ldr	r3, [pc, #92]	@ (800bb68 <sniprintf+0x64>)
 800bb0a:	1e0c      	subs	r4, r1, #0
 800bb0c:	681d      	ldr	r5, [r3, #0]
 800bb0e:	b09d      	sub	sp, #116	@ 0x74
 800bb10:	da08      	bge.n	800bb24 <sniprintf+0x20>
 800bb12:	238b      	movs	r3, #139	@ 0x8b
 800bb14:	602b      	str	r3, [r5, #0]
 800bb16:	f04f 30ff 	mov.w	r0, #4294967295
 800bb1a:	b01d      	add	sp, #116	@ 0x74
 800bb1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb20:	b002      	add	sp, #8
 800bb22:	4770      	bx	lr
 800bb24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bb28:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bb2c:	bf14      	ite	ne
 800bb2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bb32:	4623      	moveq	r3, r4
 800bb34:	9304      	str	r3, [sp, #16]
 800bb36:	9307      	str	r3, [sp, #28]
 800bb38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bb3c:	9002      	str	r0, [sp, #8]
 800bb3e:	9006      	str	r0, [sp, #24]
 800bb40:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb44:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bb46:	ab21      	add	r3, sp, #132	@ 0x84
 800bb48:	a902      	add	r1, sp, #8
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	9301      	str	r3, [sp, #4]
 800bb4e:	f001 fc15 	bl	800d37c <_svfiprintf_r>
 800bb52:	1c43      	adds	r3, r0, #1
 800bb54:	bfbc      	itt	lt
 800bb56:	238b      	movlt	r3, #139	@ 0x8b
 800bb58:	602b      	strlt	r3, [r5, #0]
 800bb5a:	2c00      	cmp	r4, #0
 800bb5c:	d0dd      	beq.n	800bb1a <sniprintf+0x16>
 800bb5e:	9b02      	ldr	r3, [sp, #8]
 800bb60:	2200      	movs	r2, #0
 800bb62:	701a      	strb	r2, [r3, #0]
 800bb64:	e7d9      	b.n	800bb1a <sniprintf+0x16>
 800bb66:	bf00      	nop
 800bb68:	200001a8 	.word	0x200001a8

0800bb6c <siprintf>:
 800bb6c:	b40e      	push	{r1, r2, r3}
 800bb6e:	b500      	push	{lr}
 800bb70:	b09c      	sub	sp, #112	@ 0x70
 800bb72:	ab1d      	add	r3, sp, #116	@ 0x74
 800bb74:	9002      	str	r0, [sp, #8]
 800bb76:	9006      	str	r0, [sp, #24]
 800bb78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bb7c:	4809      	ldr	r0, [pc, #36]	@ (800bba4 <siprintf+0x38>)
 800bb7e:	9107      	str	r1, [sp, #28]
 800bb80:	9104      	str	r1, [sp, #16]
 800bb82:	4909      	ldr	r1, [pc, #36]	@ (800bba8 <siprintf+0x3c>)
 800bb84:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb88:	9105      	str	r1, [sp, #20]
 800bb8a:	6800      	ldr	r0, [r0, #0]
 800bb8c:	9301      	str	r3, [sp, #4]
 800bb8e:	a902      	add	r1, sp, #8
 800bb90:	f001 fbf4 	bl	800d37c <_svfiprintf_r>
 800bb94:	9b02      	ldr	r3, [sp, #8]
 800bb96:	2200      	movs	r2, #0
 800bb98:	701a      	strb	r2, [r3, #0]
 800bb9a:	b01c      	add	sp, #112	@ 0x70
 800bb9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bba0:	b003      	add	sp, #12
 800bba2:	4770      	bx	lr
 800bba4:	200001a8 	.word	0x200001a8
 800bba8:	ffff0208 	.word	0xffff0208

0800bbac <__sread>:
 800bbac:	b510      	push	{r4, lr}
 800bbae:	460c      	mov	r4, r1
 800bbb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbb4:	f000 f86c 	bl	800bc90 <_read_r>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	bfab      	itete	ge
 800bbbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bbbe:	89a3      	ldrhlt	r3, [r4, #12]
 800bbc0:	181b      	addge	r3, r3, r0
 800bbc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bbc6:	bfac      	ite	ge
 800bbc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bbca:	81a3      	strhlt	r3, [r4, #12]
 800bbcc:	bd10      	pop	{r4, pc}

0800bbce <__swrite>:
 800bbce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbd2:	461f      	mov	r7, r3
 800bbd4:	898b      	ldrh	r3, [r1, #12]
 800bbd6:	05db      	lsls	r3, r3, #23
 800bbd8:	4605      	mov	r5, r0
 800bbda:	460c      	mov	r4, r1
 800bbdc:	4616      	mov	r6, r2
 800bbde:	d505      	bpl.n	800bbec <__swrite+0x1e>
 800bbe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbe4:	2302      	movs	r3, #2
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	f000 f840 	bl	800bc6c <_lseek_r>
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbf2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bbf6:	81a3      	strh	r3, [r4, #12]
 800bbf8:	4632      	mov	r2, r6
 800bbfa:	463b      	mov	r3, r7
 800bbfc:	4628      	mov	r0, r5
 800bbfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc02:	f000 b857 	b.w	800bcb4 <_write_r>

0800bc06 <__sseek>:
 800bc06:	b510      	push	{r4, lr}
 800bc08:	460c      	mov	r4, r1
 800bc0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc0e:	f000 f82d 	bl	800bc6c <_lseek_r>
 800bc12:	1c43      	adds	r3, r0, #1
 800bc14:	89a3      	ldrh	r3, [r4, #12]
 800bc16:	bf15      	itete	ne
 800bc18:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bc1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bc1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bc22:	81a3      	strheq	r3, [r4, #12]
 800bc24:	bf18      	it	ne
 800bc26:	81a3      	strhne	r3, [r4, #12]
 800bc28:	bd10      	pop	{r4, pc}

0800bc2a <__sclose>:
 800bc2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc2e:	f000 b80d 	b.w	800bc4c <_close_r>

0800bc32 <memset>:
 800bc32:	4402      	add	r2, r0
 800bc34:	4603      	mov	r3, r0
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d100      	bne.n	800bc3c <memset+0xa>
 800bc3a:	4770      	bx	lr
 800bc3c:	f803 1b01 	strb.w	r1, [r3], #1
 800bc40:	e7f9      	b.n	800bc36 <memset+0x4>
	...

0800bc44 <_localeconv_r>:
 800bc44:	4800      	ldr	r0, [pc, #0]	@ (800bc48 <_localeconv_r+0x4>)
 800bc46:	4770      	bx	lr
 800bc48:	200002e8 	.word	0x200002e8

0800bc4c <_close_r>:
 800bc4c:	b538      	push	{r3, r4, r5, lr}
 800bc4e:	4d06      	ldr	r5, [pc, #24]	@ (800bc68 <_close_r+0x1c>)
 800bc50:	2300      	movs	r3, #0
 800bc52:	4604      	mov	r4, r0
 800bc54:	4608      	mov	r0, r1
 800bc56:	602b      	str	r3, [r5, #0]
 800bc58:	f7f5 fb6a 	bl	8001330 <_close>
 800bc5c:	1c43      	adds	r3, r0, #1
 800bc5e:	d102      	bne.n	800bc66 <_close_r+0x1a>
 800bc60:	682b      	ldr	r3, [r5, #0]
 800bc62:	b103      	cbz	r3, 800bc66 <_close_r+0x1a>
 800bc64:	6023      	str	r3, [r4, #0]
 800bc66:	bd38      	pop	{r3, r4, r5, pc}
 800bc68:	200027f8 	.word	0x200027f8

0800bc6c <_lseek_r>:
 800bc6c:	b538      	push	{r3, r4, r5, lr}
 800bc6e:	4d07      	ldr	r5, [pc, #28]	@ (800bc8c <_lseek_r+0x20>)
 800bc70:	4604      	mov	r4, r0
 800bc72:	4608      	mov	r0, r1
 800bc74:	4611      	mov	r1, r2
 800bc76:	2200      	movs	r2, #0
 800bc78:	602a      	str	r2, [r5, #0]
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	f7f5 fb5f 	bl	800133e <_lseek>
 800bc80:	1c43      	adds	r3, r0, #1
 800bc82:	d102      	bne.n	800bc8a <_lseek_r+0x1e>
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	b103      	cbz	r3, 800bc8a <_lseek_r+0x1e>
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	bd38      	pop	{r3, r4, r5, pc}
 800bc8c:	200027f8 	.word	0x200027f8

0800bc90 <_read_r>:
 800bc90:	b538      	push	{r3, r4, r5, lr}
 800bc92:	4d07      	ldr	r5, [pc, #28]	@ (800bcb0 <_read_r+0x20>)
 800bc94:	4604      	mov	r4, r0
 800bc96:	4608      	mov	r0, r1
 800bc98:	4611      	mov	r1, r2
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	602a      	str	r2, [r5, #0]
 800bc9e:	461a      	mov	r2, r3
 800bca0:	f7f5 fb54 	bl	800134c <_read>
 800bca4:	1c43      	adds	r3, r0, #1
 800bca6:	d102      	bne.n	800bcae <_read_r+0x1e>
 800bca8:	682b      	ldr	r3, [r5, #0]
 800bcaa:	b103      	cbz	r3, 800bcae <_read_r+0x1e>
 800bcac:	6023      	str	r3, [r4, #0]
 800bcae:	bd38      	pop	{r3, r4, r5, pc}
 800bcb0:	200027f8 	.word	0x200027f8

0800bcb4 <_write_r>:
 800bcb4:	b538      	push	{r3, r4, r5, lr}
 800bcb6:	4d07      	ldr	r5, [pc, #28]	@ (800bcd4 <_write_r+0x20>)
 800bcb8:	4604      	mov	r4, r0
 800bcba:	4608      	mov	r0, r1
 800bcbc:	4611      	mov	r1, r2
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	602a      	str	r2, [r5, #0]
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	f7f5 fb49 	bl	800135a <_write>
 800bcc8:	1c43      	adds	r3, r0, #1
 800bcca:	d102      	bne.n	800bcd2 <_write_r+0x1e>
 800bccc:	682b      	ldr	r3, [r5, #0]
 800bcce:	b103      	cbz	r3, 800bcd2 <_write_r+0x1e>
 800bcd0:	6023      	str	r3, [r4, #0]
 800bcd2:	bd38      	pop	{r3, r4, r5, pc}
 800bcd4:	200027f8 	.word	0x200027f8

0800bcd8 <__libc_init_array>:
 800bcd8:	b570      	push	{r4, r5, r6, lr}
 800bcda:	4d0d      	ldr	r5, [pc, #52]	@ (800bd10 <__libc_init_array+0x38>)
 800bcdc:	4c0d      	ldr	r4, [pc, #52]	@ (800bd14 <__libc_init_array+0x3c>)
 800bcde:	1b64      	subs	r4, r4, r5
 800bce0:	10a4      	asrs	r4, r4, #2
 800bce2:	2600      	movs	r6, #0
 800bce4:	42a6      	cmp	r6, r4
 800bce6:	d109      	bne.n	800bcfc <__libc_init_array+0x24>
 800bce8:	4d0b      	ldr	r5, [pc, #44]	@ (800bd18 <__libc_init_array+0x40>)
 800bcea:	4c0c      	ldr	r4, [pc, #48]	@ (800bd1c <__libc_init_array+0x44>)
 800bcec:	f002 f8bc 	bl	800de68 <_init>
 800bcf0:	1b64      	subs	r4, r4, r5
 800bcf2:	10a4      	asrs	r4, r4, #2
 800bcf4:	2600      	movs	r6, #0
 800bcf6:	42a6      	cmp	r6, r4
 800bcf8:	d105      	bne.n	800bd06 <__libc_init_array+0x2e>
 800bcfa:	bd70      	pop	{r4, r5, r6, pc}
 800bcfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd00:	4798      	blx	r3
 800bd02:	3601      	adds	r6, #1
 800bd04:	e7ee      	b.n	800bce4 <__libc_init_array+0xc>
 800bd06:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd0a:	4798      	blx	r3
 800bd0c:	3601      	adds	r6, #1
 800bd0e:	e7f2      	b.n	800bcf6 <__libc_init_array+0x1e>
 800bd10:	08026b40 	.word	0x08026b40
 800bd14:	08026b40 	.word	0x08026b40
 800bd18:	08026b40 	.word	0x08026b40
 800bd1c:	08026b44 	.word	0x08026b44

0800bd20 <__retarget_lock_init_recursive>:
 800bd20:	4770      	bx	lr

0800bd22 <__retarget_lock_acquire_recursive>:
 800bd22:	4770      	bx	lr

0800bd24 <__retarget_lock_release_recursive>:
 800bd24:	4770      	bx	lr

0800bd26 <quorem>:
 800bd26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd2a:	6903      	ldr	r3, [r0, #16]
 800bd2c:	690c      	ldr	r4, [r1, #16]
 800bd2e:	42a3      	cmp	r3, r4
 800bd30:	4607      	mov	r7, r0
 800bd32:	db7e      	blt.n	800be32 <quorem+0x10c>
 800bd34:	3c01      	subs	r4, #1
 800bd36:	f101 0814 	add.w	r8, r1, #20
 800bd3a:	00a3      	lsls	r3, r4, #2
 800bd3c:	f100 0514 	add.w	r5, r0, #20
 800bd40:	9300      	str	r3, [sp, #0]
 800bd42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd46:	9301      	str	r3, [sp, #4]
 800bd48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd50:	3301      	adds	r3, #1
 800bd52:	429a      	cmp	r2, r3
 800bd54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd58:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd5c:	d32e      	bcc.n	800bdbc <quorem+0x96>
 800bd5e:	f04f 0a00 	mov.w	sl, #0
 800bd62:	46c4      	mov	ip, r8
 800bd64:	46ae      	mov	lr, r5
 800bd66:	46d3      	mov	fp, sl
 800bd68:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd6c:	b298      	uxth	r0, r3
 800bd6e:	fb06 a000 	mla	r0, r6, r0, sl
 800bd72:	0c02      	lsrs	r2, r0, #16
 800bd74:	0c1b      	lsrs	r3, r3, #16
 800bd76:	fb06 2303 	mla	r3, r6, r3, r2
 800bd7a:	f8de 2000 	ldr.w	r2, [lr]
 800bd7e:	b280      	uxth	r0, r0
 800bd80:	b292      	uxth	r2, r2
 800bd82:	1a12      	subs	r2, r2, r0
 800bd84:	445a      	add	r2, fp
 800bd86:	f8de 0000 	ldr.w	r0, [lr]
 800bd8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bd94:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bd98:	b292      	uxth	r2, r2
 800bd9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bd9e:	45e1      	cmp	r9, ip
 800bda0:	f84e 2b04 	str.w	r2, [lr], #4
 800bda4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bda8:	d2de      	bcs.n	800bd68 <quorem+0x42>
 800bdaa:	9b00      	ldr	r3, [sp, #0]
 800bdac:	58eb      	ldr	r3, [r5, r3]
 800bdae:	b92b      	cbnz	r3, 800bdbc <quorem+0x96>
 800bdb0:	9b01      	ldr	r3, [sp, #4]
 800bdb2:	3b04      	subs	r3, #4
 800bdb4:	429d      	cmp	r5, r3
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	d32f      	bcc.n	800be1a <quorem+0xf4>
 800bdba:	613c      	str	r4, [r7, #16]
 800bdbc:	4638      	mov	r0, r7
 800bdbe:	f001 f979 	bl	800d0b4 <__mcmp>
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	db25      	blt.n	800be12 <quorem+0xec>
 800bdc6:	4629      	mov	r1, r5
 800bdc8:	2000      	movs	r0, #0
 800bdca:	f858 2b04 	ldr.w	r2, [r8], #4
 800bdce:	f8d1 c000 	ldr.w	ip, [r1]
 800bdd2:	fa1f fe82 	uxth.w	lr, r2
 800bdd6:	fa1f f38c 	uxth.w	r3, ip
 800bdda:	eba3 030e 	sub.w	r3, r3, lr
 800bdde:	4403      	add	r3, r0
 800bde0:	0c12      	lsrs	r2, r2, #16
 800bde2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bde6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdf0:	45c1      	cmp	r9, r8
 800bdf2:	f841 3b04 	str.w	r3, [r1], #4
 800bdf6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bdfa:	d2e6      	bcs.n	800bdca <quorem+0xa4>
 800bdfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be04:	b922      	cbnz	r2, 800be10 <quorem+0xea>
 800be06:	3b04      	subs	r3, #4
 800be08:	429d      	cmp	r5, r3
 800be0a:	461a      	mov	r2, r3
 800be0c:	d30b      	bcc.n	800be26 <quorem+0x100>
 800be0e:	613c      	str	r4, [r7, #16]
 800be10:	3601      	adds	r6, #1
 800be12:	4630      	mov	r0, r6
 800be14:	b003      	add	sp, #12
 800be16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1a:	6812      	ldr	r2, [r2, #0]
 800be1c:	3b04      	subs	r3, #4
 800be1e:	2a00      	cmp	r2, #0
 800be20:	d1cb      	bne.n	800bdba <quorem+0x94>
 800be22:	3c01      	subs	r4, #1
 800be24:	e7c6      	b.n	800bdb4 <quorem+0x8e>
 800be26:	6812      	ldr	r2, [r2, #0]
 800be28:	3b04      	subs	r3, #4
 800be2a:	2a00      	cmp	r2, #0
 800be2c:	d1ef      	bne.n	800be0e <quorem+0xe8>
 800be2e:	3c01      	subs	r4, #1
 800be30:	e7ea      	b.n	800be08 <quorem+0xe2>
 800be32:	2000      	movs	r0, #0
 800be34:	e7ee      	b.n	800be14 <quorem+0xee>
	...

0800be38 <_dtoa_r>:
 800be38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be3c:	69c7      	ldr	r7, [r0, #28]
 800be3e:	b099      	sub	sp, #100	@ 0x64
 800be40:	ed8d 0b02 	vstr	d0, [sp, #8]
 800be44:	ec55 4b10 	vmov	r4, r5, d0
 800be48:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800be4a:	9109      	str	r1, [sp, #36]	@ 0x24
 800be4c:	4683      	mov	fp, r0
 800be4e:	920e      	str	r2, [sp, #56]	@ 0x38
 800be50:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be52:	b97f      	cbnz	r7, 800be74 <_dtoa_r+0x3c>
 800be54:	2010      	movs	r0, #16
 800be56:	f000 fdfd 	bl	800ca54 <malloc>
 800be5a:	4602      	mov	r2, r0
 800be5c:	f8cb 001c 	str.w	r0, [fp, #28]
 800be60:	b920      	cbnz	r0, 800be6c <_dtoa_r+0x34>
 800be62:	4ba7      	ldr	r3, [pc, #668]	@ (800c100 <_dtoa_r+0x2c8>)
 800be64:	21ef      	movs	r1, #239	@ 0xef
 800be66:	48a7      	ldr	r0, [pc, #668]	@ (800c104 <_dtoa_r+0x2cc>)
 800be68:	f001 fc68 	bl	800d73c <__assert_func>
 800be6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800be70:	6007      	str	r7, [r0, #0]
 800be72:	60c7      	str	r7, [r0, #12]
 800be74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be78:	6819      	ldr	r1, [r3, #0]
 800be7a:	b159      	cbz	r1, 800be94 <_dtoa_r+0x5c>
 800be7c:	685a      	ldr	r2, [r3, #4]
 800be7e:	604a      	str	r2, [r1, #4]
 800be80:	2301      	movs	r3, #1
 800be82:	4093      	lsls	r3, r2
 800be84:	608b      	str	r3, [r1, #8]
 800be86:	4658      	mov	r0, fp
 800be88:	f000 feda 	bl	800cc40 <_Bfree>
 800be8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be90:	2200      	movs	r2, #0
 800be92:	601a      	str	r2, [r3, #0]
 800be94:	1e2b      	subs	r3, r5, #0
 800be96:	bfb9      	ittee	lt
 800be98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800be9c:	9303      	strlt	r3, [sp, #12]
 800be9e:	2300      	movge	r3, #0
 800bea0:	6033      	strge	r3, [r6, #0]
 800bea2:	9f03      	ldr	r7, [sp, #12]
 800bea4:	4b98      	ldr	r3, [pc, #608]	@ (800c108 <_dtoa_r+0x2d0>)
 800bea6:	bfbc      	itt	lt
 800bea8:	2201      	movlt	r2, #1
 800beaa:	6032      	strlt	r2, [r6, #0]
 800beac:	43bb      	bics	r3, r7
 800beae:	d112      	bne.n	800bed6 <_dtoa_r+0x9e>
 800beb0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800beb2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800beb6:	6013      	str	r3, [r2, #0]
 800beb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bebc:	4323      	orrs	r3, r4
 800bebe:	f000 854d 	beq.w	800c95c <_dtoa_r+0xb24>
 800bec2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bec4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c11c <_dtoa_r+0x2e4>
 800bec8:	2b00      	cmp	r3, #0
 800beca:	f000 854f 	beq.w	800c96c <_dtoa_r+0xb34>
 800bece:	f10a 0303 	add.w	r3, sl, #3
 800bed2:	f000 bd49 	b.w	800c968 <_dtoa_r+0xb30>
 800bed6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800beda:	2200      	movs	r2, #0
 800bedc:	ec51 0b17 	vmov	r0, r1, d7
 800bee0:	2300      	movs	r3, #0
 800bee2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bee6:	f7f4 fe5f 	bl	8000ba8 <__aeabi_dcmpeq>
 800beea:	4680      	mov	r8, r0
 800beec:	b158      	cbz	r0, 800bf06 <_dtoa_r+0xce>
 800beee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bef0:	2301      	movs	r3, #1
 800bef2:	6013      	str	r3, [r2, #0]
 800bef4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bef6:	b113      	cbz	r3, 800befe <_dtoa_r+0xc6>
 800bef8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800befa:	4b84      	ldr	r3, [pc, #528]	@ (800c10c <_dtoa_r+0x2d4>)
 800befc:	6013      	str	r3, [r2, #0]
 800befe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c120 <_dtoa_r+0x2e8>
 800bf02:	f000 bd33 	b.w	800c96c <_dtoa_r+0xb34>
 800bf06:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bf0a:	aa16      	add	r2, sp, #88	@ 0x58
 800bf0c:	a917      	add	r1, sp, #92	@ 0x5c
 800bf0e:	4658      	mov	r0, fp
 800bf10:	f001 f980 	bl	800d214 <__d2b>
 800bf14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bf18:	4681      	mov	r9, r0
 800bf1a:	2e00      	cmp	r6, #0
 800bf1c:	d077      	beq.n	800c00e <_dtoa_r+0x1d6>
 800bf1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf20:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bf24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bf30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bf34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bf38:	4619      	mov	r1, r3
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	4b74      	ldr	r3, [pc, #464]	@ (800c110 <_dtoa_r+0x2d8>)
 800bf3e:	f7f4 fa13 	bl	8000368 <__aeabi_dsub>
 800bf42:	a369      	add	r3, pc, #420	@ (adr r3, 800c0e8 <_dtoa_r+0x2b0>)
 800bf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf48:	f7f4 fbc6 	bl	80006d8 <__aeabi_dmul>
 800bf4c:	a368      	add	r3, pc, #416	@ (adr r3, 800c0f0 <_dtoa_r+0x2b8>)
 800bf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf52:	f7f4 fa0b 	bl	800036c <__adddf3>
 800bf56:	4604      	mov	r4, r0
 800bf58:	4630      	mov	r0, r6
 800bf5a:	460d      	mov	r5, r1
 800bf5c:	f7f4 fb52 	bl	8000604 <__aeabi_i2d>
 800bf60:	a365      	add	r3, pc, #404	@ (adr r3, 800c0f8 <_dtoa_r+0x2c0>)
 800bf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf66:	f7f4 fbb7 	bl	80006d8 <__aeabi_dmul>
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	4620      	mov	r0, r4
 800bf70:	4629      	mov	r1, r5
 800bf72:	f7f4 f9fb 	bl	800036c <__adddf3>
 800bf76:	4604      	mov	r4, r0
 800bf78:	460d      	mov	r5, r1
 800bf7a:	f7f4 fe5d 	bl	8000c38 <__aeabi_d2iz>
 800bf7e:	2200      	movs	r2, #0
 800bf80:	4607      	mov	r7, r0
 800bf82:	2300      	movs	r3, #0
 800bf84:	4620      	mov	r0, r4
 800bf86:	4629      	mov	r1, r5
 800bf88:	f7f4 fe18 	bl	8000bbc <__aeabi_dcmplt>
 800bf8c:	b140      	cbz	r0, 800bfa0 <_dtoa_r+0x168>
 800bf8e:	4638      	mov	r0, r7
 800bf90:	f7f4 fb38 	bl	8000604 <__aeabi_i2d>
 800bf94:	4622      	mov	r2, r4
 800bf96:	462b      	mov	r3, r5
 800bf98:	f7f4 fe06 	bl	8000ba8 <__aeabi_dcmpeq>
 800bf9c:	b900      	cbnz	r0, 800bfa0 <_dtoa_r+0x168>
 800bf9e:	3f01      	subs	r7, #1
 800bfa0:	2f16      	cmp	r7, #22
 800bfa2:	d851      	bhi.n	800c048 <_dtoa_r+0x210>
 800bfa4:	4b5b      	ldr	r3, [pc, #364]	@ (800c114 <_dtoa_r+0x2dc>)
 800bfa6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfb2:	f7f4 fe03 	bl	8000bbc <__aeabi_dcmplt>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	d048      	beq.n	800c04c <_dtoa_r+0x214>
 800bfba:	3f01      	subs	r7, #1
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	9312      	str	r3, [sp, #72]	@ 0x48
 800bfc0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bfc2:	1b9b      	subs	r3, r3, r6
 800bfc4:	1e5a      	subs	r2, r3, #1
 800bfc6:	bf44      	itt	mi
 800bfc8:	f1c3 0801 	rsbmi	r8, r3, #1
 800bfcc:	2300      	movmi	r3, #0
 800bfce:	9208      	str	r2, [sp, #32]
 800bfd0:	bf54      	ite	pl
 800bfd2:	f04f 0800 	movpl.w	r8, #0
 800bfd6:	9308      	strmi	r3, [sp, #32]
 800bfd8:	2f00      	cmp	r7, #0
 800bfda:	db39      	blt.n	800c050 <_dtoa_r+0x218>
 800bfdc:	9b08      	ldr	r3, [sp, #32]
 800bfde:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bfe0:	443b      	add	r3, r7
 800bfe2:	9308      	str	r3, [sp, #32]
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfea:	2b09      	cmp	r3, #9
 800bfec:	d864      	bhi.n	800c0b8 <_dtoa_r+0x280>
 800bfee:	2b05      	cmp	r3, #5
 800bff0:	bfc4      	itt	gt
 800bff2:	3b04      	subgt	r3, #4
 800bff4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bff8:	f1a3 0302 	sub.w	r3, r3, #2
 800bffc:	bfcc      	ite	gt
 800bffe:	2400      	movgt	r4, #0
 800c000:	2401      	movle	r4, #1
 800c002:	2b03      	cmp	r3, #3
 800c004:	d863      	bhi.n	800c0ce <_dtoa_r+0x296>
 800c006:	e8df f003 	tbb	[pc, r3]
 800c00a:	372a      	.short	0x372a
 800c00c:	5535      	.short	0x5535
 800c00e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c012:	441e      	add	r6, r3
 800c014:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c018:	2b20      	cmp	r3, #32
 800c01a:	bfc1      	itttt	gt
 800c01c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c020:	409f      	lslgt	r7, r3
 800c022:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c026:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c02a:	bfd6      	itet	le
 800c02c:	f1c3 0320 	rsble	r3, r3, #32
 800c030:	ea47 0003 	orrgt.w	r0, r7, r3
 800c034:	fa04 f003 	lslle.w	r0, r4, r3
 800c038:	f7f4 fad4 	bl	80005e4 <__aeabi_ui2d>
 800c03c:	2201      	movs	r2, #1
 800c03e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c042:	3e01      	subs	r6, #1
 800c044:	9214      	str	r2, [sp, #80]	@ 0x50
 800c046:	e777      	b.n	800bf38 <_dtoa_r+0x100>
 800c048:	2301      	movs	r3, #1
 800c04a:	e7b8      	b.n	800bfbe <_dtoa_r+0x186>
 800c04c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c04e:	e7b7      	b.n	800bfc0 <_dtoa_r+0x188>
 800c050:	427b      	negs	r3, r7
 800c052:	930a      	str	r3, [sp, #40]	@ 0x28
 800c054:	2300      	movs	r3, #0
 800c056:	eba8 0807 	sub.w	r8, r8, r7
 800c05a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c05c:	e7c4      	b.n	800bfe8 <_dtoa_r+0x1b0>
 800c05e:	2300      	movs	r3, #0
 800c060:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c062:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c064:	2b00      	cmp	r3, #0
 800c066:	dc35      	bgt.n	800c0d4 <_dtoa_r+0x29c>
 800c068:	2301      	movs	r3, #1
 800c06a:	9300      	str	r3, [sp, #0]
 800c06c:	9307      	str	r3, [sp, #28]
 800c06e:	461a      	mov	r2, r3
 800c070:	920e      	str	r2, [sp, #56]	@ 0x38
 800c072:	e00b      	b.n	800c08c <_dtoa_r+0x254>
 800c074:	2301      	movs	r3, #1
 800c076:	e7f3      	b.n	800c060 <_dtoa_r+0x228>
 800c078:	2300      	movs	r3, #0
 800c07a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c07c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c07e:	18fb      	adds	r3, r7, r3
 800c080:	9300      	str	r3, [sp, #0]
 800c082:	3301      	adds	r3, #1
 800c084:	2b01      	cmp	r3, #1
 800c086:	9307      	str	r3, [sp, #28]
 800c088:	bfb8      	it	lt
 800c08a:	2301      	movlt	r3, #1
 800c08c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c090:	2100      	movs	r1, #0
 800c092:	2204      	movs	r2, #4
 800c094:	f102 0514 	add.w	r5, r2, #20
 800c098:	429d      	cmp	r5, r3
 800c09a:	d91f      	bls.n	800c0dc <_dtoa_r+0x2a4>
 800c09c:	6041      	str	r1, [r0, #4]
 800c09e:	4658      	mov	r0, fp
 800c0a0:	f000 fd8e 	bl	800cbc0 <_Balloc>
 800c0a4:	4682      	mov	sl, r0
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	d13c      	bne.n	800c124 <_dtoa_r+0x2ec>
 800c0aa:	4b1b      	ldr	r3, [pc, #108]	@ (800c118 <_dtoa_r+0x2e0>)
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	f240 11af 	movw	r1, #431	@ 0x1af
 800c0b2:	e6d8      	b.n	800be66 <_dtoa_r+0x2e>
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e7e0      	b.n	800c07a <_dtoa_r+0x242>
 800c0b8:	2401      	movs	r4, #1
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0be:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c0c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0c4:	9300      	str	r3, [sp, #0]
 800c0c6:	9307      	str	r3, [sp, #28]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	2312      	movs	r3, #18
 800c0cc:	e7d0      	b.n	800c070 <_dtoa_r+0x238>
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0d2:	e7f5      	b.n	800c0c0 <_dtoa_r+0x288>
 800c0d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0d6:	9300      	str	r3, [sp, #0]
 800c0d8:	9307      	str	r3, [sp, #28]
 800c0da:	e7d7      	b.n	800c08c <_dtoa_r+0x254>
 800c0dc:	3101      	adds	r1, #1
 800c0de:	0052      	lsls	r2, r2, #1
 800c0e0:	e7d8      	b.n	800c094 <_dtoa_r+0x25c>
 800c0e2:	bf00      	nop
 800c0e4:	f3af 8000 	nop.w
 800c0e8:	636f4361 	.word	0x636f4361
 800c0ec:	3fd287a7 	.word	0x3fd287a7
 800c0f0:	8b60c8b3 	.word	0x8b60c8b3
 800c0f4:	3fc68a28 	.word	0x3fc68a28
 800c0f8:	509f79fb 	.word	0x509f79fb
 800c0fc:	3fd34413 	.word	0x3fd34413
 800c100:	08026805 	.word	0x08026805
 800c104:	0802681c 	.word	0x0802681c
 800c108:	7ff00000 	.word	0x7ff00000
 800c10c:	080267d5 	.word	0x080267d5
 800c110:	3ff80000 	.word	0x3ff80000
 800c114:	08026918 	.word	0x08026918
 800c118:	08026874 	.word	0x08026874
 800c11c:	08026801 	.word	0x08026801
 800c120:	080267d4 	.word	0x080267d4
 800c124:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c128:	6018      	str	r0, [r3, #0]
 800c12a:	9b07      	ldr	r3, [sp, #28]
 800c12c:	2b0e      	cmp	r3, #14
 800c12e:	f200 80a4 	bhi.w	800c27a <_dtoa_r+0x442>
 800c132:	2c00      	cmp	r4, #0
 800c134:	f000 80a1 	beq.w	800c27a <_dtoa_r+0x442>
 800c138:	2f00      	cmp	r7, #0
 800c13a:	dd33      	ble.n	800c1a4 <_dtoa_r+0x36c>
 800c13c:	4bad      	ldr	r3, [pc, #692]	@ (800c3f4 <_dtoa_r+0x5bc>)
 800c13e:	f007 020f 	and.w	r2, r7, #15
 800c142:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c146:	ed93 7b00 	vldr	d7, [r3]
 800c14a:	05f8      	lsls	r0, r7, #23
 800c14c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c150:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c154:	d516      	bpl.n	800c184 <_dtoa_r+0x34c>
 800c156:	4ba8      	ldr	r3, [pc, #672]	@ (800c3f8 <_dtoa_r+0x5c0>)
 800c158:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c15c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c160:	f7f4 fbe4 	bl	800092c <__aeabi_ddiv>
 800c164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c168:	f004 040f 	and.w	r4, r4, #15
 800c16c:	2603      	movs	r6, #3
 800c16e:	4da2      	ldr	r5, [pc, #648]	@ (800c3f8 <_dtoa_r+0x5c0>)
 800c170:	b954      	cbnz	r4, 800c188 <_dtoa_r+0x350>
 800c172:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c17a:	f7f4 fbd7 	bl	800092c <__aeabi_ddiv>
 800c17e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c182:	e028      	b.n	800c1d6 <_dtoa_r+0x39e>
 800c184:	2602      	movs	r6, #2
 800c186:	e7f2      	b.n	800c16e <_dtoa_r+0x336>
 800c188:	07e1      	lsls	r1, r4, #31
 800c18a:	d508      	bpl.n	800c19e <_dtoa_r+0x366>
 800c18c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c190:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c194:	f7f4 faa0 	bl	80006d8 <__aeabi_dmul>
 800c198:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c19c:	3601      	adds	r6, #1
 800c19e:	1064      	asrs	r4, r4, #1
 800c1a0:	3508      	adds	r5, #8
 800c1a2:	e7e5      	b.n	800c170 <_dtoa_r+0x338>
 800c1a4:	f000 80d2 	beq.w	800c34c <_dtoa_r+0x514>
 800c1a8:	427c      	negs	r4, r7
 800c1aa:	4b92      	ldr	r3, [pc, #584]	@ (800c3f4 <_dtoa_r+0x5bc>)
 800c1ac:	4d92      	ldr	r5, [pc, #584]	@ (800c3f8 <_dtoa_r+0x5c0>)
 800c1ae:	f004 020f 	and.w	r2, r4, #15
 800c1b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1be:	f7f4 fa8b 	bl	80006d8 <__aeabi_dmul>
 800c1c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1c6:	1124      	asrs	r4, r4, #4
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	2602      	movs	r6, #2
 800c1cc:	2c00      	cmp	r4, #0
 800c1ce:	f040 80b2 	bne.w	800c336 <_dtoa_r+0x4fe>
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d1d3      	bne.n	800c17e <_dtoa_r+0x346>
 800c1d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c1d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f000 80b7 	beq.w	800c350 <_dtoa_r+0x518>
 800c1e2:	4b86      	ldr	r3, [pc, #536]	@ (800c3fc <_dtoa_r+0x5c4>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	4629      	mov	r1, r5
 800c1ea:	f7f4 fce7 	bl	8000bbc <__aeabi_dcmplt>
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	f000 80ae 	beq.w	800c350 <_dtoa_r+0x518>
 800c1f4:	9b07      	ldr	r3, [sp, #28]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	f000 80aa 	beq.w	800c350 <_dtoa_r+0x518>
 800c1fc:	9b00      	ldr	r3, [sp, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	dd37      	ble.n	800c272 <_dtoa_r+0x43a>
 800c202:	1e7b      	subs	r3, r7, #1
 800c204:	9304      	str	r3, [sp, #16]
 800c206:	4620      	mov	r0, r4
 800c208:	4b7d      	ldr	r3, [pc, #500]	@ (800c400 <_dtoa_r+0x5c8>)
 800c20a:	2200      	movs	r2, #0
 800c20c:	4629      	mov	r1, r5
 800c20e:	f7f4 fa63 	bl	80006d8 <__aeabi_dmul>
 800c212:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c216:	9c00      	ldr	r4, [sp, #0]
 800c218:	3601      	adds	r6, #1
 800c21a:	4630      	mov	r0, r6
 800c21c:	f7f4 f9f2 	bl	8000604 <__aeabi_i2d>
 800c220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c224:	f7f4 fa58 	bl	80006d8 <__aeabi_dmul>
 800c228:	4b76      	ldr	r3, [pc, #472]	@ (800c404 <_dtoa_r+0x5cc>)
 800c22a:	2200      	movs	r2, #0
 800c22c:	f7f4 f89e 	bl	800036c <__adddf3>
 800c230:	4605      	mov	r5, r0
 800c232:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c236:	2c00      	cmp	r4, #0
 800c238:	f040 808d 	bne.w	800c356 <_dtoa_r+0x51e>
 800c23c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c240:	4b71      	ldr	r3, [pc, #452]	@ (800c408 <_dtoa_r+0x5d0>)
 800c242:	2200      	movs	r2, #0
 800c244:	f7f4 f890 	bl	8000368 <__aeabi_dsub>
 800c248:	4602      	mov	r2, r0
 800c24a:	460b      	mov	r3, r1
 800c24c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c250:	462a      	mov	r2, r5
 800c252:	4633      	mov	r3, r6
 800c254:	f7f4 fcd0 	bl	8000bf8 <__aeabi_dcmpgt>
 800c258:	2800      	cmp	r0, #0
 800c25a:	f040 828b 	bne.w	800c774 <_dtoa_r+0x93c>
 800c25e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c262:	462a      	mov	r2, r5
 800c264:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c268:	f7f4 fca8 	bl	8000bbc <__aeabi_dcmplt>
 800c26c:	2800      	cmp	r0, #0
 800c26e:	f040 8128 	bne.w	800c4c2 <_dtoa_r+0x68a>
 800c272:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c276:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c27a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	f2c0 815a 	blt.w	800c536 <_dtoa_r+0x6fe>
 800c282:	2f0e      	cmp	r7, #14
 800c284:	f300 8157 	bgt.w	800c536 <_dtoa_r+0x6fe>
 800c288:	4b5a      	ldr	r3, [pc, #360]	@ (800c3f4 <_dtoa_r+0x5bc>)
 800c28a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c28e:	ed93 7b00 	vldr	d7, [r3]
 800c292:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c294:	2b00      	cmp	r3, #0
 800c296:	ed8d 7b00 	vstr	d7, [sp]
 800c29a:	da03      	bge.n	800c2a4 <_dtoa_r+0x46c>
 800c29c:	9b07      	ldr	r3, [sp, #28]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	f340 8101 	ble.w	800c4a6 <_dtoa_r+0x66e>
 800c2a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c2a8:	4656      	mov	r6, sl
 800c2aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	f7f4 fb3b 	bl	800092c <__aeabi_ddiv>
 800c2b6:	f7f4 fcbf 	bl	8000c38 <__aeabi_d2iz>
 800c2ba:	4680      	mov	r8, r0
 800c2bc:	f7f4 f9a2 	bl	8000604 <__aeabi_i2d>
 800c2c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2c4:	f7f4 fa08 	bl	80006d8 <__aeabi_dmul>
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	4629      	mov	r1, r5
 800c2d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c2d4:	f7f4 f848 	bl	8000368 <__aeabi_dsub>
 800c2d8:	f806 4b01 	strb.w	r4, [r6], #1
 800c2dc:	9d07      	ldr	r5, [sp, #28]
 800c2de:	eba6 040a 	sub.w	r4, r6, sl
 800c2e2:	42a5      	cmp	r5, r4
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	f040 8117 	bne.w	800c51a <_dtoa_r+0x6e2>
 800c2ec:	f7f4 f83e 	bl	800036c <__adddf3>
 800c2f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	460d      	mov	r5, r1
 800c2f8:	f7f4 fc7e 	bl	8000bf8 <__aeabi_dcmpgt>
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	f040 80f9 	bne.w	800c4f4 <_dtoa_r+0x6bc>
 800c302:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c306:	4620      	mov	r0, r4
 800c308:	4629      	mov	r1, r5
 800c30a:	f7f4 fc4d 	bl	8000ba8 <__aeabi_dcmpeq>
 800c30e:	b118      	cbz	r0, 800c318 <_dtoa_r+0x4e0>
 800c310:	f018 0f01 	tst.w	r8, #1
 800c314:	f040 80ee 	bne.w	800c4f4 <_dtoa_r+0x6bc>
 800c318:	4649      	mov	r1, r9
 800c31a:	4658      	mov	r0, fp
 800c31c:	f000 fc90 	bl	800cc40 <_Bfree>
 800c320:	2300      	movs	r3, #0
 800c322:	7033      	strb	r3, [r6, #0]
 800c324:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c326:	3701      	adds	r7, #1
 800c328:	601f      	str	r7, [r3, #0]
 800c32a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f000 831d 	beq.w	800c96c <_dtoa_r+0xb34>
 800c332:	601e      	str	r6, [r3, #0]
 800c334:	e31a      	b.n	800c96c <_dtoa_r+0xb34>
 800c336:	07e2      	lsls	r2, r4, #31
 800c338:	d505      	bpl.n	800c346 <_dtoa_r+0x50e>
 800c33a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c33e:	f7f4 f9cb 	bl	80006d8 <__aeabi_dmul>
 800c342:	3601      	adds	r6, #1
 800c344:	2301      	movs	r3, #1
 800c346:	1064      	asrs	r4, r4, #1
 800c348:	3508      	adds	r5, #8
 800c34a:	e73f      	b.n	800c1cc <_dtoa_r+0x394>
 800c34c:	2602      	movs	r6, #2
 800c34e:	e742      	b.n	800c1d6 <_dtoa_r+0x39e>
 800c350:	9c07      	ldr	r4, [sp, #28]
 800c352:	9704      	str	r7, [sp, #16]
 800c354:	e761      	b.n	800c21a <_dtoa_r+0x3e2>
 800c356:	4b27      	ldr	r3, [pc, #156]	@ (800c3f4 <_dtoa_r+0x5bc>)
 800c358:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c35a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c35e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c362:	4454      	add	r4, sl
 800c364:	2900      	cmp	r1, #0
 800c366:	d053      	beq.n	800c410 <_dtoa_r+0x5d8>
 800c368:	4928      	ldr	r1, [pc, #160]	@ (800c40c <_dtoa_r+0x5d4>)
 800c36a:	2000      	movs	r0, #0
 800c36c:	f7f4 fade 	bl	800092c <__aeabi_ddiv>
 800c370:	4633      	mov	r3, r6
 800c372:	462a      	mov	r2, r5
 800c374:	f7f3 fff8 	bl	8000368 <__aeabi_dsub>
 800c378:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c37c:	4656      	mov	r6, sl
 800c37e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c382:	f7f4 fc59 	bl	8000c38 <__aeabi_d2iz>
 800c386:	4605      	mov	r5, r0
 800c388:	f7f4 f93c 	bl	8000604 <__aeabi_i2d>
 800c38c:	4602      	mov	r2, r0
 800c38e:	460b      	mov	r3, r1
 800c390:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c394:	f7f3 ffe8 	bl	8000368 <__aeabi_dsub>
 800c398:	3530      	adds	r5, #48	@ 0x30
 800c39a:	4602      	mov	r2, r0
 800c39c:	460b      	mov	r3, r1
 800c39e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c3a2:	f806 5b01 	strb.w	r5, [r6], #1
 800c3a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c3aa:	f7f4 fc07 	bl	8000bbc <__aeabi_dcmplt>
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	d171      	bne.n	800c496 <_dtoa_r+0x65e>
 800c3b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3b6:	4911      	ldr	r1, [pc, #68]	@ (800c3fc <_dtoa_r+0x5c4>)
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	f7f3 ffd5 	bl	8000368 <__aeabi_dsub>
 800c3be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c3c2:	f7f4 fbfb 	bl	8000bbc <__aeabi_dcmplt>
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	f040 8095 	bne.w	800c4f6 <_dtoa_r+0x6be>
 800c3cc:	42a6      	cmp	r6, r4
 800c3ce:	f43f af50 	beq.w	800c272 <_dtoa_r+0x43a>
 800c3d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c3d6:	4b0a      	ldr	r3, [pc, #40]	@ (800c400 <_dtoa_r+0x5c8>)
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f7f4 f97d 	bl	80006d8 <__aeabi_dmul>
 800c3de:	4b08      	ldr	r3, [pc, #32]	@ (800c400 <_dtoa_r+0x5c8>)
 800c3e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3ea:	f7f4 f975 	bl	80006d8 <__aeabi_dmul>
 800c3ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3f2:	e7c4      	b.n	800c37e <_dtoa_r+0x546>
 800c3f4:	08026918 	.word	0x08026918
 800c3f8:	080268f0 	.word	0x080268f0
 800c3fc:	3ff00000 	.word	0x3ff00000
 800c400:	40240000 	.word	0x40240000
 800c404:	401c0000 	.word	0x401c0000
 800c408:	40140000 	.word	0x40140000
 800c40c:	3fe00000 	.word	0x3fe00000
 800c410:	4631      	mov	r1, r6
 800c412:	4628      	mov	r0, r5
 800c414:	f7f4 f960 	bl	80006d8 <__aeabi_dmul>
 800c418:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c41c:	9415      	str	r4, [sp, #84]	@ 0x54
 800c41e:	4656      	mov	r6, sl
 800c420:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c424:	f7f4 fc08 	bl	8000c38 <__aeabi_d2iz>
 800c428:	4605      	mov	r5, r0
 800c42a:	f7f4 f8eb 	bl	8000604 <__aeabi_i2d>
 800c42e:	4602      	mov	r2, r0
 800c430:	460b      	mov	r3, r1
 800c432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c436:	f7f3 ff97 	bl	8000368 <__aeabi_dsub>
 800c43a:	3530      	adds	r5, #48	@ 0x30
 800c43c:	f806 5b01 	strb.w	r5, [r6], #1
 800c440:	4602      	mov	r2, r0
 800c442:	460b      	mov	r3, r1
 800c444:	42a6      	cmp	r6, r4
 800c446:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c44a:	f04f 0200 	mov.w	r2, #0
 800c44e:	d124      	bne.n	800c49a <_dtoa_r+0x662>
 800c450:	4bac      	ldr	r3, [pc, #688]	@ (800c704 <_dtoa_r+0x8cc>)
 800c452:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c456:	f7f3 ff89 	bl	800036c <__adddf3>
 800c45a:	4602      	mov	r2, r0
 800c45c:	460b      	mov	r3, r1
 800c45e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c462:	f7f4 fbc9 	bl	8000bf8 <__aeabi_dcmpgt>
 800c466:	2800      	cmp	r0, #0
 800c468:	d145      	bne.n	800c4f6 <_dtoa_r+0x6be>
 800c46a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c46e:	49a5      	ldr	r1, [pc, #660]	@ (800c704 <_dtoa_r+0x8cc>)
 800c470:	2000      	movs	r0, #0
 800c472:	f7f3 ff79 	bl	8000368 <__aeabi_dsub>
 800c476:	4602      	mov	r2, r0
 800c478:	460b      	mov	r3, r1
 800c47a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c47e:	f7f4 fb9d 	bl	8000bbc <__aeabi_dcmplt>
 800c482:	2800      	cmp	r0, #0
 800c484:	f43f aef5 	beq.w	800c272 <_dtoa_r+0x43a>
 800c488:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c48a:	1e73      	subs	r3, r6, #1
 800c48c:	9315      	str	r3, [sp, #84]	@ 0x54
 800c48e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c492:	2b30      	cmp	r3, #48	@ 0x30
 800c494:	d0f8      	beq.n	800c488 <_dtoa_r+0x650>
 800c496:	9f04      	ldr	r7, [sp, #16]
 800c498:	e73e      	b.n	800c318 <_dtoa_r+0x4e0>
 800c49a:	4b9b      	ldr	r3, [pc, #620]	@ (800c708 <_dtoa_r+0x8d0>)
 800c49c:	f7f4 f91c 	bl	80006d8 <__aeabi_dmul>
 800c4a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4a4:	e7bc      	b.n	800c420 <_dtoa_r+0x5e8>
 800c4a6:	d10c      	bne.n	800c4c2 <_dtoa_r+0x68a>
 800c4a8:	4b98      	ldr	r3, [pc, #608]	@ (800c70c <_dtoa_r+0x8d4>)
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4b0:	f7f4 f912 	bl	80006d8 <__aeabi_dmul>
 800c4b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4b8:	f7f4 fb94 	bl	8000be4 <__aeabi_dcmpge>
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	f000 8157 	beq.w	800c770 <_dtoa_r+0x938>
 800c4c2:	2400      	movs	r4, #0
 800c4c4:	4625      	mov	r5, r4
 800c4c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4c8:	43db      	mvns	r3, r3
 800c4ca:	9304      	str	r3, [sp, #16]
 800c4cc:	4656      	mov	r6, sl
 800c4ce:	2700      	movs	r7, #0
 800c4d0:	4621      	mov	r1, r4
 800c4d2:	4658      	mov	r0, fp
 800c4d4:	f000 fbb4 	bl	800cc40 <_Bfree>
 800c4d8:	2d00      	cmp	r5, #0
 800c4da:	d0dc      	beq.n	800c496 <_dtoa_r+0x65e>
 800c4dc:	b12f      	cbz	r7, 800c4ea <_dtoa_r+0x6b2>
 800c4de:	42af      	cmp	r7, r5
 800c4e0:	d003      	beq.n	800c4ea <_dtoa_r+0x6b2>
 800c4e2:	4639      	mov	r1, r7
 800c4e4:	4658      	mov	r0, fp
 800c4e6:	f000 fbab 	bl	800cc40 <_Bfree>
 800c4ea:	4629      	mov	r1, r5
 800c4ec:	4658      	mov	r0, fp
 800c4ee:	f000 fba7 	bl	800cc40 <_Bfree>
 800c4f2:	e7d0      	b.n	800c496 <_dtoa_r+0x65e>
 800c4f4:	9704      	str	r7, [sp, #16]
 800c4f6:	4633      	mov	r3, r6
 800c4f8:	461e      	mov	r6, r3
 800c4fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4fe:	2a39      	cmp	r2, #57	@ 0x39
 800c500:	d107      	bne.n	800c512 <_dtoa_r+0x6da>
 800c502:	459a      	cmp	sl, r3
 800c504:	d1f8      	bne.n	800c4f8 <_dtoa_r+0x6c0>
 800c506:	9a04      	ldr	r2, [sp, #16]
 800c508:	3201      	adds	r2, #1
 800c50a:	9204      	str	r2, [sp, #16]
 800c50c:	2230      	movs	r2, #48	@ 0x30
 800c50e:	f88a 2000 	strb.w	r2, [sl]
 800c512:	781a      	ldrb	r2, [r3, #0]
 800c514:	3201      	adds	r2, #1
 800c516:	701a      	strb	r2, [r3, #0]
 800c518:	e7bd      	b.n	800c496 <_dtoa_r+0x65e>
 800c51a:	4b7b      	ldr	r3, [pc, #492]	@ (800c708 <_dtoa_r+0x8d0>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	f7f4 f8db 	bl	80006d8 <__aeabi_dmul>
 800c522:	2200      	movs	r2, #0
 800c524:	2300      	movs	r3, #0
 800c526:	4604      	mov	r4, r0
 800c528:	460d      	mov	r5, r1
 800c52a:	f7f4 fb3d 	bl	8000ba8 <__aeabi_dcmpeq>
 800c52e:	2800      	cmp	r0, #0
 800c530:	f43f aebb 	beq.w	800c2aa <_dtoa_r+0x472>
 800c534:	e6f0      	b.n	800c318 <_dtoa_r+0x4e0>
 800c536:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c538:	2a00      	cmp	r2, #0
 800c53a:	f000 80db 	beq.w	800c6f4 <_dtoa_r+0x8bc>
 800c53e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c540:	2a01      	cmp	r2, #1
 800c542:	f300 80bf 	bgt.w	800c6c4 <_dtoa_r+0x88c>
 800c546:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c548:	2a00      	cmp	r2, #0
 800c54a:	f000 80b7 	beq.w	800c6bc <_dtoa_r+0x884>
 800c54e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c552:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c554:	4646      	mov	r6, r8
 800c556:	9a08      	ldr	r2, [sp, #32]
 800c558:	2101      	movs	r1, #1
 800c55a:	441a      	add	r2, r3
 800c55c:	4658      	mov	r0, fp
 800c55e:	4498      	add	r8, r3
 800c560:	9208      	str	r2, [sp, #32]
 800c562:	f000 fc21 	bl	800cda8 <__i2b>
 800c566:	4605      	mov	r5, r0
 800c568:	b15e      	cbz	r6, 800c582 <_dtoa_r+0x74a>
 800c56a:	9b08      	ldr	r3, [sp, #32]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	dd08      	ble.n	800c582 <_dtoa_r+0x74a>
 800c570:	42b3      	cmp	r3, r6
 800c572:	9a08      	ldr	r2, [sp, #32]
 800c574:	bfa8      	it	ge
 800c576:	4633      	movge	r3, r6
 800c578:	eba8 0803 	sub.w	r8, r8, r3
 800c57c:	1af6      	subs	r6, r6, r3
 800c57e:	1ad3      	subs	r3, r2, r3
 800c580:	9308      	str	r3, [sp, #32]
 800c582:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c584:	b1f3      	cbz	r3, 800c5c4 <_dtoa_r+0x78c>
 800c586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c588:	2b00      	cmp	r3, #0
 800c58a:	f000 80b7 	beq.w	800c6fc <_dtoa_r+0x8c4>
 800c58e:	b18c      	cbz	r4, 800c5b4 <_dtoa_r+0x77c>
 800c590:	4629      	mov	r1, r5
 800c592:	4622      	mov	r2, r4
 800c594:	4658      	mov	r0, fp
 800c596:	f000 fcc7 	bl	800cf28 <__pow5mult>
 800c59a:	464a      	mov	r2, r9
 800c59c:	4601      	mov	r1, r0
 800c59e:	4605      	mov	r5, r0
 800c5a0:	4658      	mov	r0, fp
 800c5a2:	f000 fc17 	bl	800cdd4 <__multiply>
 800c5a6:	4649      	mov	r1, r9
 800c5a8:	9004      	str	r0, [sp, #16]
 800c5aa:	4658      	mov	r0, fp
 800c5ac:	f000 fb48 	bl	800cc40 <_Bfree>
 800c5b0:	9b04      	ldr	r3, [sp, #16]
 800c5b2:	4699      	mov	r9, r3
 800c5b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5b6:	1b1a      	subs	r2, r3, r4
 800c5b8:	d004      	beq.n	800c5c4 <_dtoa_r+0x78c>
 800c5ba:	4649      	mov	r1, r9
 800c5bc:	4658      	mov	r0, fp
 800c5be:	f000 fcb3 	bl	800cf28 <__pow5mult>
 800c5c2:	4681      	mov	r9, r0
 800c5c4:	2101      	movs	r1, #1
 800c5c6:	4658      	mov	r0, fp
 800c5c8:	f000 fbee 	bl	800cda8 <__i2b>
 800c5cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5ce:	4604      	mov	r4, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f000 81cf 	beq.w	800c974 <_dtoa_r+0xb3c>
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	4601      	mov	r1, r0
 800c5da:	4658      	mov	r0, fp
 800c5dc:	f000 fca4 	bl	800cf28 <__pow5mult>
 800c5e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	4604      	mov	r4, r0
 800c5e6:	f300 8095 	bgt.w	800c714 <_dtoa_r+0x8dc>
 800c5ea:	9b02      	ldr	r3, [sp, #8]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f040 8087 	bne.w	800c700 <_dtoa_r+0x8c8>
 800c5f2:	9b03      	ldr	r3, [sp, #12]
 800c5f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f040 8089 	bne.w	800c710 <_dtoa_r+0x8d8>
 800c5fe:	9b03      	ldr	r3, [sp, #12]
 800c600:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c604:	0d1b      	lsrs	r3, r3, #20
 800c606:	051b      	lsls	r3, r3, #20
 800c608:	b12b      	cbz	r3, 800c616 <_dtoa_r+0x7de>
 800c60a:	9b08      	ldr	r3, [sp, #32]
 800c60c:	3301      	adds	r3, #1
 800c60e:	9308      	str	r3, [sp, #32]
 800c610:	f108 0801 	add.w	r8, r8, #1
 800c614:	2301      	movs	r3, #1
 800c616:	930a      	str	r3, [sp, #40]	@ 0x28
 800c618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	f000 81b0 	beq.w	800c980 <_dtoa_r+0xb48>
 800c620:	6923      	ldr	r3, [r4, #16]
 800c622:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c626:	6918      	ldr	r0, [r3, #16]
 800c628:	f000 fb72 	bl	800cd10 <__hi0bits>
 800c62c:	f1c0 0020 	rsb	r0, r0, #32
 800c630:	9b08      	ldr	r3, [sp, #32]
 800c632:	4418      	add	r0, r3
 800c634:	f010 001f 	ands.w	r0, r0, #31
 800c638:	d077      	beq.n	800c72a <_dtoa_r+0x8f2>
 800c63a:	f1c0 0320 	rsb	r3, r0, #32
 800c63e:	2b04      	cmp	r3, #4
 800c640:	dd6b      	ble.n	800c71a <_dtoa_r+0x8e2>
 800c642:	9b08      	ldr	r3, [sp, #32]
 800c644:	f1c0 001c 	rsb	r0, r0, #28
 800c648:	4403      	add	r3, r0
 800c64a:	4480      	add	r8, r0
 800c64c:	4406      	add	r6, r0
 800c64e:	9308      	str	r3, [sp, #32]
 800c650:	f1b8 0f00 	cmp.w	r8, #0
 800c654:	dd05      	ble.n	800c662 <_dtoa_r+0x82a>
 800c656:	4649      	mov	r1, r9
 800c658:	4642      	mov	r2, r8
 800c65a:	4658      	mov	r0, fp
 800c65c:	f000 fcbe 	bl	800cfdc <__lshift>
 800c660:	4681      	mov	r9, r0
 800c662:	9b08      	ldr	r3, [sp, #32]
 800c664:	2b00      	cmp	r3, #0
 800c666:	dd05      	ble.n	800c674 <_dtoa_r+0x83c>
 800c668:	4621      	mov	r1, r4
 800c66a:	461a      	mov	r2, r3
 800c66c:	4658      	mov	r0, fp
 800c66e:	f000 fcb5 	bl	800cfdc <__lshift>
 800c672:	4604      	mov	r4, r0
 800c674:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c676:	2b00      	cmp	r3, #0
 800c678:	d059      	beq.n	800c72e <_dtoa_r+0x8f6>
 800c67a:	4621      	mov	r1, r4
 800c67c:	4648      	mov	r0, r9
 800c67e:	f000 fd19 	bl	800d0b4 <__mcmp>
 800c682:	2800      	cmp	r0, #0
 800c684:	da53      	bge.n	800c72e <_dtoa_r+0x8f6>
 800c686:	1e7b      	subs	r3, r7, #1
 800c688:	9304      	str	r3, [sp, #16]
 800c68a:	4649      	mov	r1, r9
 800c68c:	2300      	movs	r3, #0
 800c68e:	220a      	movs	r2, #10
 800c690:	4658      	mov	r0, fp
 800c692:	f000 faf7 	bl	800cc84 <__multadd>
 800c696:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c698:	4681      	mov	r9, r0
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	f000 8172 	beq.w	800c984 <_dtoa_r+0xb4c>
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	4629      	mov	r1, r5
 800c6a4:	220a      	movs	r2, #10
 800c6a6:	4658      	mov	r0, fp
 800c6a8:	f000 faec 	bl	800cc84 <__multadd>
 800c6ac:	9b00      	ldr	r3, [sp, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	4605      	mov	r5, r0
 800c6b2:	dc67      	bgt.n	800c784 <_dtoa_r+0x94c>
 800c6b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6b6:	2b02      	cmp	r3, #2
 800c6b8:	dc41      	bgt.n	800c73e <_dtoa_r+0x906>
 800c6ba:	e063      	b.n	800c784 <_dtoa_r+0x94c>
 800c6bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c6be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c6c2:	e746      	b.n	800c552 <_dtoa_r+0x71a>
 800c6c4:	9b07      	ldr	r3, [sp, #28]
 800c6c6:	1e5c      	subs	r4, r3, #1
 800c6c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6ca:	42a3      	cmp	r3, r4
 800c6cc:	bfbf      	itttt	lt
 800c6ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c6d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c6d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c6d4:	1ae3      	sublt	r3, r4, r3
 800c6d6:	bfb4      	ite	lt
 800c6d8:	18d2      	addlt	r2, r2, r3
 800c6da:	1b1c      	subge	r4, r3, r4
 800c6dc:	9b07      	ldr	r3, [sp, #28]
 800c6de:	bfbc      	itt	lt
 800c6e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c6e2:	2400      	movlt	r4, #0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	bfb5      	itete	lt
 800c6e8:	eba8 0603 	sublt.w	r6, r8, r3
 800c6ec:	9b07      	ldrge	r3, [sp, #28]
 800c6ee:	2300      	movlt	r3, #0
 800c6f0:	4646      	movge	r6, r8
 800c6f2:	e730      	b.n	800c556 <_dtoa_r+0x71e>
 800c6f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c6f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c6f8:	4646      	mov	r6, r8
 800c6fa:	e735      	b.n	800c568 <_dtoa_r+0x730>
 800c6fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c6fe:	e75c      	b.n	800c5ba <_dtoa_r+0x782>
 800c700:	2300      	movs	r3, #0
 800c702:	e788      	b.n	800c616 <_dtoa_r+0x7de>
 800c704:	3fe00000 	.word	0x3fe00000
 800c708:	40240000 	.word	0x40240000
 800c70c:	40140000 	.word	0x40140000
 800c710:	9b02      	ldr	r3, [sp, #8]
 800c712:	e780      	b.n	800c616 <_dtoa_r+0x7de>
 800c714:	2300      	movs	r3, #0
 800c716:	930a      	str	r3, [sp, #40]	@ 0x28
 800c718:	e782      	b.n	800c620 <_dtoa_r+0x7e8>
 800c71a:	d099      	beq.n	800c650 <_dtoa_r+0x818>
 800c71c:	9a08      	ldr	r2, [sp, #32]
 800c71e:	331c      	adds	r3, #28
 800c720:	441a      	add	r2, r3
 800c722:	4498      	add	r8, r3
 800c724:	441e      	add	r6, r3
 800c726:	9208      	str	r2, [sp, #32]
 800c728:	e792      	b.n	800c650 <_dtoa_r+0x818>
 800c72a:	4603      	mov	r3, r0
 800c72c:	e7f6      	b.n	800c71c <_dtoa_r+0x8e4>
 800c72e:	9b07      	ldr	r3, [sp, #28]
 800c730:	9704      	str	r7, [sp, #16]
 800c732:	2b00      	cmp	r3, #0
 800c734:	dc20      	bgt.n	800c778 <_dtoa_r+0x940>
 800c736:	9300      	str	r3, [sp, #0]
 800c738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c73a:	2b02      	cmp	r3, #2
 800c73c:	dd1e      	ble.n	800c77c <_dtoa_r+0x944>
 800c73e:	9b00      	ldr	r3, [sp, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	f47f aec0 	bne.w	800c4c6 <_dtoa_r+0x68e>
 800c746:	4621      	mov	r1, r4
 800c748:	2205      	movs	r2, #5
 800c74a:	4658      	mov	r0, fp
 800c74c:	f000 fa9a 	bl	800cc84 <__multadd>
 800c750:	4601      	mov	r1, r0
 800c752:	4604      	mov	r4, r0
 800c754:	4648      	mov	r0, r9
 800c756:	f000 fcad 	bl	800d0b4 <__mcmp>
 800c75a:	2800      	cmp	r0, #0
 800c75c:	f77f aeb3 	ble.w	800c4c6 <_dtoa_r+0x68e>
 800c760:	4656      	mov	r6, sl
 800c762:	2331      	movs	r3, #49	@ 0x31
 800c764:	f806 3b01 	strb.w	r3, [r6], #1
 800c768:	9b04      	ldr	r3, [sp, #16]
 800c76a:	3301      	adds	r3, #1
 800c76c:	9304      	str	r3, [sp, #16]
 800c76e:	e6ae      	b.n	800c4ce <_dtoa_r+0x696>
 800c770:	9c07      	ldr	r4, [sp, #28]
 800c772:	9704      	str	r7, [sp, #16]
 800c774:	4625      	mov	r5, r4
 800c776:	e7f3      	b.n	800c760 <_dtoa_r+0x928>
 800c778:	9b07      	ldr	r3, [sp, #28]
 800c77a:	9300      	str	r3, [sp, #0]
 800c77c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f000 8104 	beq.w	800c98c <_dtoa_r+0xb54>
 800c784:	2e00      	cmp	r6, #0
 800c786:	dd05      	ble.n	800c794 <_dtoa_r+0x95c>
 800c788:	4629      	mov	r1, r5
 800c78a:	4632      	mov	r2, r6
 800c78c:	4658      	mov	r0, fp
 800c78e:	f000 fc25 	bl	800cfdc <__lshift>
 800c792:	4605      	mov	r5, r0
 800c794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c796:	2b00      	cmp	r3, #0
 800c798:	d05a      	beq.n	800c850 <_dtoa_r+0xa18>
 800c79a:	6869      	ldr	r1, [r5, #4]
 800c79c:	4658      	mov	r0, fp
 800c79e:	f000 fa0f 	bl	800cbc0 <_Balloc>
 800c7a2:	4606      	mov	r6, r0
 800c7a4:	b928      	cbnz	r0, 800c7b2 <_dtoa_r+0x97a>
 800c7a6:	4b84      	ldr	r3, [pc, #528]	@ (800c9b8 <_dtoa_r+0xb80>)
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c7ae:	f7ff bb5a 	b.w	800be66 <_dtoa_r+0x2e>
 800c7b2:	692a      	ldr	r2, [r5, #16]
 800c7b4:	3202      	adds	r2, #2
 800c7b6:	0092      	lsls	r2, r2, #2
 800c7b8:	f105 010c 	add.w	r1, r5, #12
 800c7bc:	300c      	adds	r0, #12
 800c7be:	f000 ffaf 	bl	800d720 <memcpy>
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	4631      	mov	r1, r6
 800c7c6:	4658      	mov	r0, fp
 800c7c8:	f000 fc08 	bl	800cfdc <__lshift>
 800c7cc:	f10a 0301 	add.w	r3, sl, #1
 800c7d0:	9307      	str	r3, [sp, #28]
 800c7d2:	9b00      	ldr	r3, [sp, #0]
 800c7d4:	4453      	add	r3, sl
 800c7d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7d8:	9b02      	ldr	r3, [sp, #8]
 800c7da:	f003 0301 	and.w	r3, r3, #1
 800c7de:	462f      	mov	r7, r5
 800c7e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7e2:	4605      	mov	r5, r0
 800c7e4:	9b07      	ldr	r3, [sp, #28]
 800c7e6:	4621      	mov	r1, r4
 800c7e8:	3b01      	subs	r3, #1
 800c7ea:	4648      	mov	r0, r9
 800c7ec:	9300      	str	r3, [sp, #0]
 800c7ee:	f7ff fa9a 	bl	800bd26 <quorem>
 800c7f2:	4639      	mov	r1, r7
 800c7f4:	9002      	str	r0, [sp, #8]
 800c7f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c7fa:	4648      	mov	r0, r9
 800c7fc:	f000 fc5a 	bl	800d0b4 <__mcmp>
 800c800:	462a      	mov	r2, r5
 800c802:	9008      	str	r0, [sp, #32]
 800c804:	4621      	mov	r1, r4
 800c806:	4658      	mov	r0, fp
 800c808:	f000 fc70 	bl	800d0ec <__mdiff>
 800c80c:	68c2      	ldr	r2, [r0, #12]
 800c80e:	4606      	mov	r6, r0
 800c810:	bb02      	cbnz	r2, 800c854 <_dtoa_r+0xa1c>
 800c812:	4601      	mov	r1, r0
 800c814:	4648      	mov	r0, r9
 800c816:	f000 fc4d 	bl	800d0b4 <__mcmp>
 800c81a:	4602      	mov	r2, r0
 800c81c:	4631      	mov	r1, r6
 800c81e:	4658      	mov	r0, fp
 800c820:	920e      	str	r2, [sp, #56]	@ 0x38
 800c822:	f000 fa0d 	bl	800cc40 <_Bfree>
 800c826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c828:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c82a:	9e07      	ldr	r6, [sp, #28]
 800c82c:	ea43 0102 	orr.w	r1, r3, r2
 800c830:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c832:	4319      	orrs	r1, r3
 800c834:	d110      	bne.n	800c858 <_dtoa_r+0xa20>
 800c836:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c83a:	d029      	beq.n	800c890 <_dtoa_r+0xa58>
 800c83c:	9b08      	ldr	r3, [sp, #32]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	dd02      	ble.n	800c848 <_dtoa_r+0xa10>
 800c842:	9b02      	ldr	r3, [sp, #8]
 800c844:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c848:	9b00      	ldr	r3, [sp, #0]
 800c84a:	f883 8000 	strb.w	r8, [r3]
 800c84e:	e63f      	b.n	800c4d0 <_dtoa_r+0x698>
 800c850:	4628      	mov	r0, r5
 800c852:	e7bb      	b.n	800c7cc <_dtoa_r+0x994>
 800c854:	2201      	movs	r2, #1
 800c856:	e7e1      	b.n	800c81c <_dtoa_r+0x9e4>
 800c858:	9b08      	ldr	r3, [sp, #32]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	db04      	blt.n	800c868 <_dtoa_r+0xa30>
 800c85e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c860:	430b      	orrs	r3, r1
 800c862:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c864:	430b      	orrs	r3, r1
 800c866:	d120      	bne.n	800c8aa <_dtoa_r+0xa72>
 800c868:	2a00      	cmp	r2, #0
 800c86a:	dded      	ble.n	800c848 <_dtoa_r+0xa10>
 800c86c:	4649      	mov	r1, r9
 800c86e:	2201      	movs	r2, #1
 800c870:	4658      	mov	r0, fp
 800c872:	f000 fbb3 	bl	800cfdc <__lshift>
 800c876:	4621      	mov	r1, r4
 800c878:	4681      	mov	r9, r0
 800c87a:	f000 fc1b 	bl	800d0b4 <__mcmp>
 800c87e:	2800      	cmp	r0, #0
 800c880:	dc03      	bgt.n	800c88a <_dtoa_r+0xa52>
 800c882:	d1e1      	bne.n	800c848 <_dtoa_r+0xa10>
 800c884:	f018 0f01 	tst.w	r8, #1
 800c888:	d0de      	beq.n	800c848 <_dtoa_r+0xa10>
 800c88a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c88e:	d1d8      	bne.n	800c842 <_dtoa_r+0xa0a>
 800c890:	9a00      	ldr	r2, [sp, #0]
 800c892:	2339      	movs	r3, #57	@ 0x39
 800c894:	7013      	strb	r3, [r2, #0]
 800c896:	4633      	mov	r3, r6
 800c898:	461e      	mov	r6, r3
 800c89a:	3b01      	subs	r3, #1
 800c89c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c8a0:	2a39      	cmp	r2, #57	@ 0x39
 800c8a2:	d052      	beq.n	800c94a <_dtoa_r+0xb12>
 800c8a4:	3201      	adds	r2, #1
 800c8a6:	701a      	strb	r2, [r3, #0]
 800c8a8:	e612      	b.n	800c4d0 <_dtoa_r+0x698>
 800c8aa:	2a00      	cmp	r2, #0
 800c8ac:	dd07      	ble.n	800c8be <_dtoa_r+0xa86>
 800c8ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c8b2:	d0ed      	beq.n	800c890 <_dtoa_r+0xa58>
 800c8b4:	9a00      	ldr	r2, [sp, #0]
 800c8b6:	f108 0301 	add.w	r3, r8, #1
 800c8ba:	7013      	strb	r3, [r2, #0]
 800c8bc:	e608      	b.n	800c4d0 <_dtoa_r+0x698>
 800c8be:	9b07      	ldr	r3, [sp, #28]
 800c8c0:	9a07      	ldr	r2, [sp, #28]
 800c8c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c8c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d028      	beq.n	800c91e <_dtoa_r+0xae6>
 800c8cc:	4649      	mov	r1, r9
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	220a      	movs	r2, #10
 800c8d2:	4658      	mov	r0, fp
 800c8d4:	f000 f9d6 	bl	800cc84 <__multadd>
 800c8d8:	42af      	cmp	r7, r5
 800c8da:	4681      	mov	r9, r0
 800c8dc:	f04f 0300 	mov.w	r3, #0
 800c8e0:	f04f 020a 	mov.w	r2, #10
 800c8e4:	4639      	mov	r1, r7
 800c8e6:	4658      	mov	r0, fp
 800c8e8:	d107      	bne.n	800c8fa <_dtoa_r+0xac2>
 800c8ea:	f000 f9cb 	bl	800cc84 <__multadd>
 800c8ee:	4607      	mov	r7, r0
 800c8f0:	4605      	mov	r5, r0
 800c8f2:	9b07      	ldr	r3, [sp, #28]
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	9307      	str	r3, [sp, #28]
 800c8f8:	e774      	b.n	800c7e4 <_dtoa_r+0x9ac>
 800c8fa:	f000 f9c3 	bl	800cc84 <__multadd>
 800c8fe:	4629      	mov	r1, r5
 800c900:	4607      	mov	r7, r0
 800c902:	2300      	movs	r3, #0
 800c904:	220a      	movs	r2, #10
 800c906:	4658      	mov	r0, fp
 800c908:	f000 f9bc 	bl	800cc84 <__multadd>
 800c90c:	4605      	mov	r5, r0
 800c90e:	e7f0      	b.n	800c8f2 <_dtoa_r+0xaba>
 800c910:	9b00      	ldr	r3, [sp, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	bfcc      	ite	gt
 800c916:	461e      	movgt	r6, r3
 800c918:	2601      	movle	r6, #1
 800c91a:	4456      	add	r6, sl
 800c91c:	2700      	movs	r7, #0
 800c91e:	4649      	mov	r1, r9
 800c920:	2201      	movs	r2, #1
 800c922:	4658      	mov	r0, fp
 800c924:	f000 fb5a 	bl	800cfdc <__lshift>
 800c928:	4621      	mov	r1, r4
 800c92a:	4681      	mov	r9, r0
 800c92c:	f000 fbc2 	bl	800d0b4 <__mcmp>
 800c930:	2800      	cmp	r0, #0
 800c932:	dcb0      	bgt.n	800c896 <_dtoa_r+0xa5e>
 800c934:	d102      	bne.n	800c93c <_dtoa_r+0xb04>
 800c936:	f018 0f01 	tst.w	r8, #1
 800c93a:	d1ac      	bne.n	800c896 <_dtoa_r+0xa5e>
 800c93c:	4633      	mov	r3, r6
 800c93e:	461e      	mov	r6, r3
 800c940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c944:	2a30      	cmp	r2, #48	@ 0x30
 800c946:	d0fa      	beq.n	800c93e <_dtoa_r+0xb06>
 800c948:	e5c2      	b.n	800c4d0 <_dtoa_r+0x698>
 800c94a:	459a      	cmp	sl, r3
 800c94c:	d1a4      	bne.n	800c898 <_dtoa_r+0xa60>
 800c94e:	9b04      	ldr	r3, [sp, #16]
 800c950:	3301      	adds	r3, #1
 800c952:	9304      	str	r3, [sp, #16]
 800c954:	2331      	movs	r3, #49	@ 0x31
 800c956:	f88a 3000 	strb.w	r3, [sl]
 800c95a:	e5b9      	b.n	800c4d0 <_dtoa_r+0x698>
 800c95c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c95e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c9bc <_dtoa_r+0xb84>
 800c962:	b11b      	cbz	r3, 800c96c <_dtoa_r+0xb34>
 800c964:	f10a 0308 	add.w	r3, sl, #8
 800c968:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c96a:	6013      	str	r3, [r2, #0]
 800c96c:	4650      	mov	r0, sl
 800c96e:	b019      	add	sp, #100	@ 0x64
 800c970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c976:	2b01      	cmp	r3, #1
 800c978:	f77f ae37 	ble.w	800c5ea <_dtoa_r+0x7b2>
 800c97c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c97e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c980:	2001      	movs	r0, #1
 800c982:	e655      	b.n	800c630 <_dtoa_r+0x7f8>
 800c984:	9b00      	ldr	r3, [sp, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	f77f aed6 	ble.w	800c738 <_dtoa_r+0x900>
 800c98c:	4656      	mov	r6, sl
 800c98e:	4621      	mov	r1, r4
 800c990:	4648      	mov	r0, r9
 800c992:	f7ff f9c8 	bl	800bd26 <quorem>
 800c996:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c99a:	f806 8b01 	strb.w	r8, [r6], #1
 800c99e:	9b00      	ldr	r3, [sp, #0]
 800c9a0:	eba6 020a 	sub.w	r2, r6, sl
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	ddb3      	ble.n	800c910 <_dtoa_r+0xad8>
 800c9a8:	4649      	mov	r1, r9
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	220a      	movs	r2, #10
 800c9ae:	4658      	mov	r0, fp
 800c9b0:	f000 f968 	bl	800cc84 <__multadd>
 800c9b4:	4681      	mov	r9, r0
 800c9b6:	e7ea      	b.n	800c98e <_dtoa_r+0xb56>
 800c9b8:	08026874 	.word	0x08026874
 800c9bc:	080267f8 	.word	0x080267f8

0800c9c0 <_free_r>:
 800c9c0:	b538      	push	{r3, r4, r5, lr}
 800c9c2:	4605      	mov	r5, r0
 800c9c4:	2900      	cmp	r1, #0
 800c9c6:	d041      	beq.n	800ca4c <_free_r+0x8c>
 800c9c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9cc:	1f0c      	subs	r4, r1, #4
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	bfb8      	it	lt
 800c9d2:	18e4      	addlt	r4, r4, r3
 800c9d4:	f000 f8e8 	bl	800cba8 <__malloc_lock>
 800c9d8:	4a1d      	ldr	r2, [pc, #116]	@ (800ca50 <_free_r+0x90>)
 800c9da:	6813      	ldr	r3, [r2, #0]
 800c9dc:	b933      	cbnz	r3, 800c9ec <_free_r+0x2c>
 800c9de:	6063      	str	r3, [r4, #4]
 800c9e0:	6014      	str	r4, [r2, #0]
 800c9e2:	4628      	mov	r0, r5
 800c9e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9e8:	f000 b8e4 	b.w	800cbb4 <__malloc_unlock>
 800c9ec:	42a3      	cmp	r3, r4
 800c9ee:	d908      	bls.n	800ca02 <_free_r+0x42>
 800c9f0:	6820      	ldr	r0, [r4, #0]
 800c9f2:	1821      	adds	r1, r4, r0
 800c9f4:	428b      	cmp	r3, r1
 800c9f6:	bf01      	itttt	eq
 800c9f8:	6819      	ldreq	r1, [r3, #0]
 800c9fa:	685b      	ldreq	r3, [r3, #4]
 800c9fc:	1809      	addeq	r1, r1, r0
 800c9fe:	6021      	streq	r1, [r4, #0]
 800ca00:	e7ed      	b.n	800c9de <_free_r+0x1e>
 800ca02:	461a      	mov	r2, r3
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	b10b      	cbz	r3, 800ca0c <_free_r+0x4c>
 800ca08:	42a3      	cmp	r3, r4
 800ca0a:	d9fa      	bls.n	800ca02 <_free_r+0x42>
 800ca0c:	6811      	ldr	r1, [r2, #0]
 800ca0e:	1850      	adds	r0, r2, r1
 800ca10:	42a0      	cmp	r0, r4
 800ca12:	d10b      	bne.n	800ca2c <_free_r+0x6c>
 800ca14:	6820      	ldr	r0, [r4, #0]
 800ca16:	4401      	add	r1, r0
 800ca18:	1850      	adds	r0, r2, r1
 800ca1a:	4283      	cmp	r3, r0
 800ca1c:	6011      	str	r1, [r2, #0]
 800ca1e:	d1e0      	bne.n	800c9e2 <_free_r+0x22>
 800ca20:	6818      	ldr	r0, [r3, #0]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	6053      	str	r3, [r2, #4]
 800ca26:	4408      	add	r0, r1
 800ca28:	6010      	str	r0, [r2, #0]
 800ca2a:	e7da      	b.n	800c9e2 <_free_r+0x22>
 800ca2c:	d902      	bls.n	800ca34 <_free_r+0x74>
 800ca2e:	230c      	movs	r3, #12
 800ca30:	602b      	str	r3, [r5, #0]
 800ca32:	e7d6      	b.n	800c9e2 <_free_r+0x22>
 800ca34:	6820      	ldr	r0, [r4, #0]
 800ca36:	1821      	adds	r1, r4, r0
 800ca38:	428b      	cmp	r3, r1
 800ca3a:	bf04      	itt	eq
 800ca3c:	6819      	ldreq	r1, [r3, #0]
 800ca3e:	685b      	ldreq	r3, [r3, #4]
 800ca40:	6063      	str	r3, [r4, #4]
 800ca42:	bf04      	itt	eq
 800ca44:	1809      	addeq	r1, r1, r0
 800ca46:	6021      	streq	r1, [r4, #0]
 800ca48:	6054      	str	r4, [r2, #4]
 800ca4a:	e7ca      	b.n	800c9e2 <_free_r+0x22>
 800ca4c:	bd38      	pop	{r3, r4, r5, pc}
 800ca4e:	bf00      	nop
 800ca50:	20002804 	.word	0x20002804

0800ca54 <malloc>:
 800ca54:	4b02      	ldr	r3, [pc, #8]	@ (800ca60 <malloc+0xc>)
 800ca56:	4601      	mov	r1, r0
 800ca58:	6818      	ldr	r0, [r3, #0]
 800ca5a:	f000 b825 	b.w	800caa8 <_malloc_r>
 800ca5e:	bf00      	nop
 800ca60:	200001a8 	.word	0x200001a8

0800ca64 <sbrk_aligned>:
 800ca64:	b570      	push	{r4, r5, r6, lr}
 800ca66:	4e0f      	ldr	r6, [pc, #60]	@ (800caa4 <sbrk_aligned+0x40>)
 800ca68:	460c      	mov	r4, r1
 800ca6a:	6831      	ldr	r1, [r6, #0]
 800ca6c:	4605      	mov	r5, r0
 800ca6e:	b911      	cbnz	r1, 800ca76 <sbrk_aligned+0x12>
 800ca70:	f000 fe46 	bl	800d700 <_sbrk_r>
 800ca74:	6030      	str	r0, [r6, #0]
 800ca76:	4621      	mov	r1, r4
 800ca78:	4628      	mov	r0, r5
 800ca7a:	f000 fe41 	bl	800d700 <_sbrk_r>
 800ca7e:	1c43      	adds	r3, r0, #1
 800ca80:	d103      	bne.n	800ca8a <sbrk_aligned+0x26>
 800ca82:	f04f 34ff 	mov.w	r4, #4294967295
 800ca86:	4620      	mov	r0, r4
 800ca88:	bd70      	pop	{r4, r5, r6, pc}
 800ca8a:	1cc4      	adds	r4, r0, #3
 800ca8c:	f024 0403 	bic.w	r4, r4, #3
 800ca90:	42a0      	cmp	r0, r4
 800ca92:	d0f8      	beq.n	800ca86 <sbrk_aligned+0x22>
 800ca94:	1a21      	subs	r1, r4, r0
 800ca96:	4628      	mov	r0, r5
 800ca98:	f000 fe32 	bl	800d700 <_sbrk_r>
 800ca9c:	3001      	adds	r0, #1
 800ca9e:	d1f2      	bne.n	800ca86 <sbrk_aligned+0x22>
 800caa0:	e7ef      	b.n	800ca82 <sbrk_aligned+0x1e>
 800caa2:	bf00      	nop
 800caa4:	20002800 	.word	0x20002800

0800caa8 <_malloc_r>:
 800caa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caac:	1ccd      	adds	r5, r1, #3
 800caae:	f025 0503 	bic.w	r5, r5, #3
 800cab2:	3508      	adds	r5, #8
 800cab4:	2d0c      	cmp	r5, #12
 800cab6:	bf38      	it	cc
 800cab8:	250c      	movcc	r5, #12
 800caba:	2d00      	cmp	r5, #0
 800cabc:	4606      	mov	r6, r0
 800cabe:	db01      	blt.n	800cac4 <_malloc_r+0x1c>
 800cac0:	42a9      	cmp	r1, r5
 800cac2:	d904      	bls.n	800cace <_malloc_r+0x26>
 800cac4:	230c      	movs	r3, #12
 800cac6:	6033      	str	r3, [r6, #0]
 800cac8:	2000      	movs	r0, #0
 800caca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cace:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cba4 <_malloc_r+0xfc>
 800cad2:	f000 f869 	bl	800cba8 <__malloc_lock>
 800cad6:	f8d8 3000 	ldr.w	r3, [r8]
 800cada:	461c      	mov	r4, r3
 800cadc:	bb44      	cbnz	r4, 800cb30 <_malloc_r+0x88>
 800cade:	4629      	mov	r1, r5
 800cae0:	4630      	mov	r0, r6
 800cae2:	f7ff ffbf 	bl	800ca64 <sbrk_aligned>
 800cae6:	1c43      	adds	r3, r0, #1
 800cae8:	4604      	mov	r4, r0
 800caea:	d158      	bne.n	800cb9e <_malloc_r+0xf6>
 800caec:	f8d8 4000 	ldr.w	r4, [r8]
 800caf0:	4627      	mov	r7, r4
 800caf2:	2f00      	cmp	r7, #0
 800caf4:	d143      	bne.n	800cb7e <_malloc_r+0xd6>
 800caf6:	2c00      	cmp	r4, #0
 800caf8:	d04b      	beq.n	800cb92 <_malloc_r+0xea>
 800cafa:	6823      	ldr	r3, [r4, #0]
 800cafc:	4639      	mov	r1, r7
 800cafe:	4630      	mov	r0, r6
 800cb00:	eb04 0903 	add.w	r9, r4, r3
 800cb04:	f000 fdfc 	bl	800d700 <_sbrk_r>
 800cb08:	4581      	cmp	r9, r0
 800cb0a:	d142      	bne.n	800cb92 <_malloc_r+0xea>
 800cb0c:	6821      	ldr	r1, [r4, #0]
 800cb0e:	1a6d      	subs	r5, r5, r1
 800cb10:	4629      	mov	r1, r5
 800cb12:	4630      	mov	r0, r6
 800cb14:	f7ff ffa6 	bl	800ca64 <sbrk_aligned>
 800cb18:	3001      	adds	r0, #1
 800cb1a:	d03a      	beq.n	800cb92 <_malloc_r+0xea>
 800cb1c:	6823      	ldr	r3, [r4, #0]
 800cb1e:	442b      	add	r3, r5
 800cb20:	6023      	str	r3, [r4, #0]
 800cb22:	f8d8 3000 	ldr.w	r3, [r8]
 800cb26:	685a      	ldr	r2, [r3, #4]
 800cb28:	bb62      	cbnz	r2, 800cb84 <_malloc_r+0xdc>
 800cb2a:	f8c8 7000 	str.w	r7, [r8]
 800cb2e:	e00f      	b.n	800cb50 <_malloc_r+0xa8>
 800cb30:	6822      	ldr	r2, [r4, #0]
 800cb32:	1b52      	subs	r2, r2, r5
 800cb34:	d420      	bmi.n	800cb78 <_malloc_r+0xd0>
 800cb36:	2a0b      	cmp	r2, #11
 800cb38:	d917      	bls.n	800cb6a <_malloc_r+0xc2>
 800cb3a:	1961      	adds	r1, r4, r5
 800cb3c:	42a3      	cmp	r3, r4
 800cb3e:	6025      	str	r5, [r4, #0]
 800cb40:	bf18      	it	ne
 800cb42:	6059      	strne	r1, [r3, #4]
 800cb44:	6863      	ldr	r3, [r4, #4]
 800cb46:	bf08      	it	eq
 800cb48:	f8c8 1000 	streq.w	r1, [r8]
 800cb4c:	5162      	str	r2, [r4, r5]
 800cb4e:	604b      	str	r3, [r1, #4]
 800cb50:	4630      	mov	r0, r6
 800cb52:	f000 f82f 	bl	800cbb4 <__malloc_unlock>
 800cb56:	f104 000b 	add.w	r0, r4, #11
 800cb5a:	1d23      	adds	r3, r4, #4
 800cb5c:	f020 0007 	bic.w	r0, r0, #7
 800cb60:	1ac2      	subs	r2, r0, r3
 800cb62:	bf1c      	itt	ne
 800cb64:	1a1b      	subne	r3, r3, r0
 800cb66:	50a3      	strne	r3, [r4, r2]
 800cb68:	e7af      	b.n	800caca <_malloc_r+0x22>
 800cb6a:	6862      	ldr	r2, [r4, #4]
 800cb6c:	42a3      	cmp	r3, r4
 800cb6e:	bf0c      	ite	eq
 800cb70:	f8c8 2000 	streq.w	r2, [r8]
 800cb74:	605a      	strne	r2, [r3, #4]
 800cb76:	e7eb      	b.n	800cb50 <_malloc_r+0xa8>
 800cb78:	4623      	mov	r3, r4
 800cb7a:	6864      	ldr	r4, [r4, #4]
 800cb7c:	e7ae      	b.n	800cadc <_malloc_r+0x34>
 800cb7e:	463c      	mov	r4, r7
 800cb80:	687f      	ldr	r7, [r7, #4]
 800cb82:	e7b6      	b.n	800caf2 <_malloc_r+0x4a>
 800cb84:	461a      	mov	r2, r3
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	42a3      	cmp	r3, r4
 800cb8a:	d1fb      	bne.n	800cb84 <_malloc_r+0xdc>
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	6053      	str	r3, [r2, #4]
 800cb90:	e7de      	b.n	800cb50 <_malloc_r+0xa8>
 800cb92:	230c      	movs	r3, #12
 800cb94:	6033      	str	r3, [r6, #0]
 800cb96:	4630      	mov	r0, r6
 800cb98:	f000 f80c 	bl	800cbb4 <__malloc_unlock>
 800cb9c:	e794      	b.n	800cac8 <_malloc_r+0x20>
 800cb9e:	6005      	str	r5, [r0, #0]
 800cba0:	e7d6      	b.n	800cb50 <_malloc_r+0xa8>
 800cba2:	bf00      	nop
 800cba4:	20002804 	.word	0x20002804

0800cba8 <__malloc_lock>:
 800cba8:	4801      	ldr	r0, [pc, #4]	@ (800cbb0 <__malloc_lock+0x8>)
 800cbaa:	f7ff b8ba 	b.w	800bd22 <__retarget_lock_acquire_recursive>
 800cbae:	bf00      	nop
 800cbb0:	200027fc 	.word	0x200027fc

0800cbb4 <__malloc_unlock>:
 800cbb4:	4801      	ldr	r0, [pc, #4]	@ (800cbbc <__malloc_unlock+0x8>)
 800cbb6:	f7ff b8b5 	b.w	800bd24 <__retarget_lock_release_recursive>
 800cbba:	bf00      	nop
 800cbbc:	200027fc 	.word	0x200027fc

0800cbc0 <_Balloc>:
 800cbc0:	b570      	push	{r4, r5, r6, lr}
 800cbc2:	69c6      	ldr	r6, [r0, #28]
 800cbc4:	4604      	mov	r4, r0
 800cbc6:	460d      	mov	r5, r1
 800cbc8:	b976      	cbnz	r6, 800cbe8 <_Balloc+0x28>
 800cbca:	2010      	movs	r0, #16
 800cbcc:	f7ff ff42 	bl	800ca54 <malloc>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	61e0      	str	r0, [r4, #28]
 800cbd4:	b920      	cbnz	r0, 800cbe0 <_Balloc+0x20>
 800cbd6:	4b18      	ldr	r3, [pc, #96]	@ (800cc38 <_Balloc+0x78>)
 800cbd8:	4818      	ldr	r0, [pc, #96]	@ (800cc3c <_Balloc+0x7c>)
 800cbda:	216b      	movs	r1, #107	@ 0x6b
 800cbdc:	f000 fdae 	bl	800d73c <__assert_func>
 800cbe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbe4:	6006      	str	r6, [r0, #0]
 800cbe6:	60c6      	str	r6, [r0, #12]
 800cbe8:	69e6      	ldr	r6, [r4, #28]
 800cbea:	68f3      	ldr	r3, [r6, #12]
 800cbec:	b183      	cbz	r3, 800cc10 <_Balloc+0x50>
 800cbee:	69e3      	ldr	r3, [r4, #28]
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cbf6:	b9b8      	cbnz	r0, 800cc28 <_Balloc+0x68>
 800cbf8:	2101      	movs	r1, #1
 800cbfa:	fa01 f605 	lsl.w	r6, r1, r5
 800cbfe:	1d72      	adds	r2, r6, #5
 800cc00:	0092      	lsls	r2, r2, #2
 800cc02:	4620      	mov	r0, r4
 800cc04:	f000 fdb8 	bl	800d778 <_calloc_r>
 800cc08:	b160      	cbz	r0, 800cc24 <_Balloc+0x64>
 800cc0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc0e:	e00e      	b.n	800cc2e <_Balloc+0x6e>
 800cc10:	2221      	movs	r2, #33	@ 0x21
 800cc12:	2104      	movs	r1, #4
 800cc14:	4620      	mov	r0, r4
 800cc16:	f000 fdaf 	bl	800d778 <_calloc_r>
 800cc1a:	69e3      	ldr	r3, [r4, #28]
 800cc1c:	60f0      	str	r0, [r6, #12]
 800cc1e:	68db      	ldr	r3, [r3, #12]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d1e4      	bne.n	800cbee <_Balloc+0x2e>
 800cc24:	2000      	movs	r0, #0
 800cc26:	bd70      	pop	{r4, r5, r6, pc}
 800cc28:	6802      	ldr	r2, [r0, #0]
 800cc2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cc2e:	2300      	movs	r3, #0
 800cc30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc34:	e7f7      	b.n	800cc26 <_Balloc+0x66>
 800cc36:	bf00      	nop
 800cc38:	08026805 	.word	0x08026805
 800cc3c:	08026885 	.word	0x08026885

0800cc40 <_Bfree>:
 800cc40:	b570      	push	{r4, r5, r6, lr}
 800cc42:	69c6      	ldr	r6, [r0, #28]
 800cc44:	4605      	mov	r5, r0
 800cc46:	460c      	mov	r4, r1
 800cc48:	b976      	cbnz	r6, 800cc68 <_Bfree+0x28>
 800cc4a:	2010      	movs	r0, #16
 800cc4c:	f7ff ff02 	bl	800ca54 <malloc>
 800cc50:	4602      	mov	r2, r0
 800cc52:	61e8      	str	r0, [r5, #28]
 800cc54:	b920      	cbnz	r0, 800cc60 <_Bfree+0x20>
 800cc56:	4b09      	ldr	r3, [pc, #36]	@ (800cc7c <_Bfree+0x3c>)
 800cc58:	4809      	ldr	r0, [pc, #36]	@ (800cc80 <_Bfree+0x40>)
 800cc5a:	218f      	movs	r1, #143	@ 0x8f
 800cc5c:	f000 fd6e 	bl	800d73c <__assert_func>
 800cc60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc64:	6006      	str	r6, [r0, #0]
 800cc66:	60c6      	str	r6, [r0, #12]
 800cc68:	b13c      	cbz	r4, 800cc7a <_Bfree+0x3a>
 800cc6a:	69eb      	ldr	r3, [r5, #28]
 800cc6c:	6862      	ldr	r2, [r4, #4]
 800cc6e:	68db      	ldr	r3, [r3, #12]
 800cc70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc74:	6021      	str	r1, [r4, #0]
 800cc76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc7a:	bd70      	pop	{r4, r5, r6, pc}
 800cc7c:	08026805 	.word	0x08026805
 800cc80:	08026885 	.word	0x08026885

0800cc84 <__multadd>:
 800cc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc88:	690d      	ldr	r5, [r1, #16]
 800cc8a:	4607      	mov	r7, r0
 800cc8c:	460c      	mov	r4, r1
 800cc8e:	461e      	mov	r6, r3
 800cc90:	f101 0c14 	add.w	ip, r1, #20
 800cc94:	2000      	movs	r0, #0
 800cc96:	f8dc 3000 	ldr.w	r3, [ip]
 800cc9a:	b299      	uxth	r1, r3
 800cc9c:	fb02 6101 	mla	r1, r2, r1, r6
 800cca0:	0c1e      	lsrs	r6, r3, #16
 800cca2:	0c0b      	lsrs	r3, r1, #16
 800cca4:	fb02 3306 	mla	r3, r2, r6, r3
 800cca8:	b289      	uxth	r1, r1
 800ccaa:	3001      	adds	r0, #1
 800ccac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ccb0:	4285      	cmp	r5, r0
 800ccb2:	f84c 1b04 	str.w	r1, [ip], #4
 800ccb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ccba:	dcec      	bgt.n	800cc96 <__multadd+0x12>
 800ccbc:	b30e      	cbz	r6, 800cd02 <__multadd+0x7e>
 800ccbe:	68a3      	ldr	r3, [r4, #8]
 800ccc0:	42ab      	cmp	r3, r5
 800ccc2:	dc19      	bgt.n	800ccf8 <__multadd+0x74>
 800ccc4:	6861      	ldr	r1, [r4, #4]
 800ccc6:	4638      	mov	r0, r7
 800ccc8:	3101      	adds	r1, #1
 800ccca:	f7ff ff79 	bl	800cbc0 <_Balloc>
 800ccce:	4680      	mov	r8, r0
 800ccd0:	b928      	cbnz	r0, 800ccde <__multadd+0x5a>
 800ccd2:	4602      	mov	r2, r0
 800ccd4:	4b0c      	ldr	r3, [pc, #48]	@ (800cd08 <__multadd+0x84>)
 800ccd6:	480d      	ldr	r0, [pc, #52]	@ (800cd0c <__multadd+0x88>)
 800ccd8:	21ba      	movs	r1, #186	@ 0xba
 800ccda:	f000 fd2f 	bl	800d73c <__assert_func>
 800ccde:	6922      	ldr	r2, [r4, #16]
 800cce0:	3202      	adds	r2, #2
 800cce2:	f104 010c 	add.w	r1, r4, #12
 800cce6:	0092      	lsls	r2, r2, #2
 800cce8:	300c      	adds	r0, #12
 800ccea:	f000 fd19 	bl	800d720 <memcpy>
 800ccee:	4621      	mov	r1, r4
 800ccf0:	4638      	mov	r0, r7
 800ccf2:	f7ff ffa5 	bl	800cc40 <_Bfree>
 800ccf6:	4644      	mov	r4, r8
 800ccf8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ccfc:	3501      	adds	r5, #1
 800ccfe:	615e      	str	r6, [r3, #20]
 800cd00:	6125      	str	r5, [r4, #16]
 800cd02:	4620      	mov	r0, r4
 800cd04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd08:	08026874 	.word	0x08026874
 800cd0c:	08026885 	.word	0x08026885

0800cd10 <__hi0bits>:
 800cd10:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cd14:	4603      	mov	r3, r0
 800cd16:	bf36      	itet	cc
 800cd18:	0403      	lslcc	r3, r0, #16
 800cd1a:	2000      	movcs	r0, #0
 800cd1c:	2010      	movcc	r0, #16
 800cd1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd22:	bf3c      	itt	cc
 800cd24:	021b      	lslcc	r3, r3, #8
 800cd26:	3008      	addcc	r0, #8
 800cd28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd2c:	bf3c      	itt	cc
 800cd2e:	011b      	lslcc	r3, r3, #4
 800cd30:	3004      	addcc	r0, #4
 800cd32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd36:	bf3c      	itt	cc
 800cd38:	009b      	lslcc	r3, r3, #2
 800cd3a:	3002      	addcc	r0, #2
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	db05      	blt.n	800cd4c <__hi0bits+0x3c>
 800cd40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd44:	f100 0001 	add.w	r0, r0, #1
 800cd48:	bf08      	it	eq
 800cd4a:	2020      	moveq	r0, #32
 800cd4c:	4770      	bx	lr

0800cd4e <__lo0bits>:
 800cd4e:	6803      	ldr	r3, [r0, #0]
 800cd50:	4602      	mov	r2, r0
 800cd52:	f013 0007 	ands.w	r0, r3, #7
 800cd56:	d00b      	beq.n	800cd70 <__lo0bits+0x22>
 800cd58:	07d9      	lsls	r1, r3, #31
 800cd5a:	d421      	bmi.n	800cda0 <__lo0bits+0x52>
 800cd5c:	0798      	lsls	r0, r3, #30
 800cd5e:	bf49      	itett	mi
 800cd60:	085b      	lsrmi	r3, r3, #1
 800cd62:	089b      	lsrpl	r3, r3, #2
 800cd64:	2001      	movmi	r0, #1
 800cd66:	6013      	strmi	r3, [r2, #0]
 800cd68:	bf5c      	itt	pl
 800cd6a:	6013      	strpl	r3, [r2, #0]
 800cd6c:	2002      	movpl	r0, #2
 800cd6e:	4770      	bx	lr
 800cd70:	b299      	uxth	r1, r3
 800cd72:	b909      	cbnz	r1, 800cd78 <__lo0bits+0x2a>
 800cd74:	0c1b      	lsrs	r3, r3, #16
 800cd76:	2010      	movs	r0, #16
 800cd78:	b2d9      	uxtb	r1, r3
 800cd7a:	b909      	cbnz	r1, 800cd80 <__lo0bits+0x32>
 800cd7c:	3008      	adds	r0, #8
 800cd7e:	0a1b      	lsrs	r3, r3, #8
 800cd80:	0719      	lsls	r1, r3, #28
 800cd82:	bf04      	itt	eq
 800cd84:	091b      	lsreq	r3, r3, #4
 800cd86:	3004      	addeq	r0, #4
 800cd88:	0799      	lsls	r1, r3, #30
 800cd8a:	bf04      	itt	eq
 800cd8c:	089b      	lsreq	r3, r3, #2
 800cd8e:	3002      	addeq	r0, #2
 800cd90:	07d9      	lsls	r1, r3, #31
 800cd92:	d403      	bmi.n	800cd9c <__lo0bits+0x4e>
 800cd94:	085b      	lsrs	r3, r3, #1
 800cd96:	f100 0001 	add.w	r0, r0, #1
 800cd9a:	d003      	beq.n	800cda4 <__lo0bits+0x56>
 800cd9c:	6013      	str	r3, [r2, #0]
 800cd9e:	4770      	bx	lr
 800cda0:	2000      	movs	r0, #0
 800cda2:	4770      	bx	lr
 800cda4:	2020      	movs	r0, #32
 800cda6:	4770      	bx	lr

0800cda8 <__i2b>:
 800cda8:	b510      	push	{r4, lr}
 800cdaa:	460c      	mov	r4, r1
 800cdac:	2101      	movs	r1, #1
 800cdae:	f7ff ff07 	bl	800cbc0 <_Balloc>
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	b928      	cbnz	r0, 800cdc2 <__i2b+0x1a>
 800cdb6:	4b05      	ldr	r3, [pc, #20]	@ (800cdcc <__i2b+0x24>)
 800cdb8:	4805      	ldr	r0, [pc, #20]	@ (800cdd0 <__i2b+0x28>)
 800cdba:	f240 1145 	movw	r1, #325	@ 0x145
 800cdbe:	f000 fcbd 	bl	800d73c <__assert_func>
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	6144      	str	r4, [r0, #20]
 800cdc6:	6103      	str	r3, [r0, #16]
 800cdc8:	bd10      	pop	{r4, pc}
 800cdca:	bf00      	nop
 800cdcc:	08026874 	.word	0x08026874
 800cdd0:	08026885 	.word	0x08026885

0800cdd4 <__multiply>:
 800cdd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdd8:	4614      	mov	r4, r2
 800cdda:	690a      	ldr	r2, [r1, #16]
 800cddc:	6923      	ldr	r3, [r4, #16]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	bfa8      	it	ge
 800cde2:	4623      	movge	r3, r4
 800cde4:	460f      	mov	r7, r1
 800cde6:	bfa4      	itt	ge
 800cde8:	460c      	movge	r4, r1
 800cdea:	461f      	movge	r7, r3
 800cdec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cdf0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cdf4:	68a3      	ldr	r3, [r4, #8]
 800cdf6:	6861      	ldr	r1, [r4, #4]
 800cdf8:	eb0a 0609 	add.w	r6, sl, r9
 800cdfc:	42b3      	cmp	r3, r6
 800cdfe:	b085      	sub	sp, #20
 800ce00:	bfb8      	it	lt
 800ce02:	3101      	addlt	r1, #1
 800ce04:	f7ff fedc 	bl	800cbc0 <_Balloc>
 800ce08:	b930      	cbnz	r0, 800ce18 <__multiply+0x44>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	4b44      	ldr	r3, [pc, #272]	@ (800cf20 <__multiply+0x14c>)
 800ce0e:	4845      	ldr	r0, [pc, #276]	@ (800cf24 <__multiply+0x150>)
 800ce10:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ce14:	f000 fc92 	bl	800d73c <__assert_func>
 800ce18:	f100 0514 	add.w	r5, r0, #20
 800ce1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce20:	462b      	mov	r3, r5
 800ce22:	2200      	movs	r2, #0
 800ce24:	4543      	cmp	r3, r8
 800ce26:	d321      	bcc.n	800ce6c <__multiply+0x98>
 800ce28:	f107 0114 	add.w	r1, r7, #20
 800ce2c:	f104 0214 	add.w	r2, r4, #20
 800ce30:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ce34:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ce38:	9302      	str	r3, [sp, #8]
 800ce3a:	1b13      	subs	r3, r2, r4
 800ce3c:	3b15      	subs	r3, #21
 800ce3e:	f023 0303 	bic.w	r3, r3, #3
 800ce42:	3304      	adds	r3, #4
 800ce44:	f104 0715 	add.w	r7, r4, #21
 800ce48:	42ba      	cmp	r2, r7
 800ce4a:	bf38      	it	cc
 800ce4c:	2304      	movcc	r3, #4
 800ce4e:	9301      	str	r3, [sp, #4]
 800ce50:	9b02      	ldr	r3, [sp, #8]
 800ce52:	9103      	str	r1, [sp, #12]
 800ce54:	428b      	cmp	r3, r1
 800ce56:	d80c      	bhi.n	800ce72 <__multiply+0x9e>
 800ce58:	2e00      	cmp	r6, #0
 800ce5a:	dd03      	ble.n	800ce64 <__multiply+0x90>
 800ce5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d05b      	beq.n	800cf1c <__multiply+0x148>
 800ce64:	6106      	str	r6, [r0, #16]
 800ce66:	b005      	add	sp, #20
 800ce68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce6c:	f843 2b04 	str.w	r2, [r3], #4
 800ce70:	e7d8      	b.n	800ce24 <__multiply+0x50>
 800ce72:	f8b1 a000 	ldrh.w	sl, [r1]
 800ce76:	f1ba 0f00 	cmp.w	sl, #0
 800ce7a:	d024      	beq.n	800cec6 <__multiply+0xf2>
 800ce7c:	f104 0e14 	add.w	lr, r4, #20
 800ce80:	46a9      	mov	r9, r5
 800ce82:	f04f 0c00 	mov.w	ip, #0
 800ce86:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce8a:	f8d9 3000 	ldr.w	r3, [r9]
 800ce8e:	fa1f fb87 	uxth.w	fp, r7
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	fb0a 330b 	mla	r3, sl, fp, r3
 800ce98:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ce9c:	f8d9 7000 	ldr.w	r7, [r9]
 800cea0:	4463      	add	r3, ip
 800cea2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cea6:	fb0a c70b 	mla	r7, sl, fp, ip
 800ceaa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ceb4:	4572      	cmp	r2, lr
 800ceb6:	f849 3b04 	str.w	r3, [r9], #4
 800ceba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cebe:	d8e2      	bhi.n	800ce86 <__multiply+0xb2>
 800cec0:	9b01      	ldr	r3, [sp, #4]
 800cec2:	f845 c003 	str.w	ip, [r5, r3]
 800cec6:	9b03      	ldr	r3, [sp, #12]
 800cec8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cecc:	3104      	adds	r1, #4
 800cece:	f1b9 0f00 	cmp.w	r9, #0
 800ced2:	d021      	beq.n	800cf18 <__multiply+0x144>
 800ced4:	682b      	ldr	r3, [r5, #0]
 800ced6:	f104 0c14 	add.w	ip, r4, #20
 800ceda:	46ae      	mov	lr, r5
 800cedc:	f04f 0a00 	mov.w	sl, #0
 800cee0:	f8bc b000 	ldrh.w	fp, [ip]
 800cee4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cee8:	fb09 770b 	mla	r7, r9, fp, r7
 800ceec:	4457      	add	r7, sl
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cef4:	f84e 3b04 	str.w	r3, [lr], #4
 800cef8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cefc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf00:	f8be 3000 	ldrh.w	r3, [lr]
 800cf04:	fb09 330a 	mla	r3, r9, sl, r3
 800cf08:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cf0c:	4562      	cmp	r2, ip
 800cf0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf12:	d8e5      	bhi.n	800cee0 <__multiply+0x10c>
 800cf14:	9f01      	ldr	r7, [sp, #4]
 800cf16:	51eb      	str	r3, [r5, r7]
 800cf18:	3504      	adds	r5, #4
 800cf1a:	e799      	b.n	800ce50 <__multiply+0x7c>
 800cf1c:	3e01      	subs	r6, #1
 800cf1e:	e79b      	b.n	800ce58 <__multiply+0x84>
 800cf20:	08026874 	.word	0x08026874
 800cf24:	08026885 	.word	0x08026885

0800cf28 <__pow5mult>:
 800cf28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf2c:	4615      	mov	r5, r2
 800cf2e:	f012 0203 	ands.w	r2, r2, #3
 800cf32:	4607      	mov	r7, r0
 800cf34:	460e      	mov	r6, r1
 800cf36:	d007      	beq.n	800cf48 <__pow5mult+0x20>
 800cf38:	4c25      	ldr	r4, [pc, #148]	@ (800cfd0 <__pow5mult+0xa8>)
 800cf3a:	3a01      	subs	r2, #1
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf42:	f7ff fe9f 	bl	800cc84 <__multadd>
 800cf46:	4606      	mov	r6, r0
 800cf48:	10ad      	asrs	r5, r5, #2
 800cf4a:	d03d      	beq.n	800cfc8 <__pow5mult+0xa0>
 800cf4c:	69fc      	ldr	r4, [r7, #28]
 800cf4e:	b97c      	cbnz	r4, 800cf70 <__pow5mult+0x48>
 800cf50:	2010      	movs	r0, #16
 800cf52:	f7ff fd7f 	bl	800ca54 <malloc>
 800cf56:	4602      	mov	r2, r0
 800cf58:	61f8      	str	r0, [r7, #28]
 800cf5a:	b928      	cbnz	r0, 800cf68 <__pow5mult+0x40>
 800cf5c:	4b1d      	ldr	r3, [pc, #116]	@ (800cfd4 <__pow5mult+0xac>)
 800cf5e:	481e      	ldr	r0, [pc, #120]	@ (800cfd8 <__pow5mult+0xb0>)
 800cf60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cf64:	f000 fbea 	bl	800d73c <__assert_func>
 800cf68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf6c:	6004      	str	r4, [r0, #0]
 800cf6e:	60c4      	str	r4, [r0, #12]
 800cf70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cf74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf78:	b94c      	cbnz	r4, 800cf8e <__pow5mult+0x66>
 800cf7a:	f240 2171 	movw	r1, #625	@ 0x271
 800cf7e:	4638      	mov	r0, r7
 800cf80:	f7ff ff12 	bl	800cda8 <__i2b>
 800cf84:	2300      	movs	r3, #0
 800cf86:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf8a:	4604      	mov	r4, r0
 800cf8c:	6003      	str	r3, [r0, #0]
 800cf8e:	f04f 0900 	mov.w	r9, #0
 800cf92:	07eb      	lsls	r3, r5, #31
 800cf94:	d50a      	bpl.n	800cfac <__pow5mult+0x84>
 800cf96:	4631      	mov	r1, r6
 800cf98:	4622      	mov	r2, r4
 800cf9a:	4638      	mov	r0, r7
 800cf9c:	f7ff ff1a 	bl	800cdd4 <__multiply>
 800cfa0:	4631      	mov	r1, r6
 800cfa2:	4680      	mov	r8, r0
 800cfa4:	4638      	mov	r0, r7
 800cfa6:	f7ff fe4b 	bl	800cc40 <_Bfree>
 800cfaa:	4646      	mov	r6, r8
 800cfac:	106d      	asrs	r5, r5, #1
 800cfae:	d00b      	beq.n	800cfc8 <__pow5mult+0xa0>
 800cfb0:	6820      	ldr	r0, [r4, #0]
 800cfb2:	b938      	cbnz	r0, 800cfc4 <__pow5mult+0x9c>
 800cfb4:	4622      	mov	r2, r4
 800cfb6:	4621      	mov	r1, r4
 800cfb8:	4638      	mov	r0, r7
 800cfba:	f7ff ff0b 	bl	800cdd4 <__multiply>
 800cfbe:	6020      	str	r0, [r4, #0]
 800cfc0:	f8c0 9000 	str.w	r9, [r0]
 800cfc4:	4604      	mov	r4, r0
 800cfc6:	e7e4      	b.n	800cf92 <__pow5mult+0x6a>
 800cfc8:	4630      	mov	r0, r6
 800cfca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfce:	bf00      	nop
 800cfd0:	080268e0 	.word	0x080268e0
 800cfd4:	08026805 	.word	0x08026805
 800cfd8:	08026885 	.word	0x08026885

0800cfdc <__lshift>:
 800cfdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfe0:	460c      	mov	r4, r1
 800cfe2:	6849      	ldr	r1, [r1, #4]
 800cfe4:	6923      	ldr	r3, [r4, #16]
 800cfe6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cfea:	68a3      	ldr	r3, [r4, #8]
 800cfec:	4607      	mov	r7, r0
 800cfee:	4691      	mov	r9, r2
 800cff0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cff4:	f108 0601 	add.w	r6, r8, #1
 800cff8:	42b3      	cmp	r3, r6
 800cffa:	db0b      	blt.n	800d014 <__lshift+0x38>
 800cffc:	4638      	mov	r0, r7
 800cffe:	f7ff fddf 	bl	800cbc0 <_Balloc>
 800d002:	4605      	mov	r5, r0
 800d004:	b948      	cbnz	r0, 800d01a <__lshift+0x3e>
 800d006:	4602      	mov	r2, r0
 800d008:	4b28      	ldr	r3, [pc, #160]	@ (800d0ac <__lshift+0xd0>)
 800d00a:	4829      	ldr	r0, [pc, #164]	@ (800d0b0 <__lshift+0xd4>)
 800d00c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d010:	f000 fb94 	bl	800d73c <__assert_func>
 800d014:	3101      	adds	r1, #1
 800d016:	005b      	lsls	r3, r3, #1
 800d018:	e7ee      	b.n	800cff8 <__lshift+0x1c>
 800d01a:	2300      	movs	r3, #0
 800d01c:	f100 0114 	add.w	r1, r0, #20
 800d020:	f100 0210 	add.w	r2, r0, #16
 800d024:	4618      	mov	r0, r3
 800d026:	4553      	cmp	r3, sl
 800d028:	db33      	blt.n	800d092 <__lshift+0xb6>
 800d02a:	6920      	ldr	r0, [r4, #16]
 800d02c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d030:	f104 0314 	add.w	r3, r4, #20
 800d034:	f019 091f 	ands.w	r9, r9, #31
 800d038:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d03c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d040:	d02b      	beq.n	800d09a <__lshift+0xbe>
 800d042:	f1c9 0e20 	rsb	lr, r9, #32
 800d046:	468a      	mov	sl, r1
 800d048:	2200      	movs	r2, #0
 800d04a:	6818      	ldr	r0, [r3, #0]
 800d04c:	fa00 f009 	lsl.w	r0, r0, r9
 800d050:	4310      	orrs	r0, r2
 800d052:	f84a 0b04 	str.w	r0, [sl], #4
 800d056:	f853 2b04 	ldr.w	r2, [r3], #4
 800d05a:	459c      	cmp	ip, r3
 800d05c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d060:	d8f3      	bhi.n	800d04a <__lshift+0x6e>
 800d062:	ebac 0304 	sub.w	r3, ip, r4
 800d066:	3b15      	subs	r3, #21
 800d068:	f023 0303 	bic.w	r3, r3, #3
 800d06c:	3304      	adds	r3, #4
 800d06e:	f104 0015 	add.w	r0, r4, #21
 800d072:	4584      	cmp	ip, r0
 800d074:	bf38      	it	cc
 800d076:	2304      	movcc	r3, #4
 800d078:	50ca      	str	r2, [r1, r3]
 800d07a:	b10a      	cbz	r2, 800d080 <__lshift+0xa4>
 800d07c:	f108 0602 	add.w	r6, r8, #2
 800d080:	3e01      	subs	r6, #1
 800d082:	4638      	mov	r0, r7
 800d084:	612e      	str	r6, [r5, #16]
 800d086:	4621      	mov	r1, r4
 800d088:	f7ff fdda 	bl	800cc40 <_Bfree>
 800d08c:	4628      	mov	r0, r5
 800d08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d092:	f842 0f04 	str.w	r0, [r2, #4]!
 800d096:	3301      	adds	r3, #1
 800d098:	e7c5      	b.n	800d026 <__lshift+0x4a>
 800d09a:	3904      	subs	r1, #4
 800d09c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d0a4:	459c      	cmp	ip, r3
 800d0a6:	d8f9      	bhi.n	800d09c <__lshift+0xc0>
 800d0a8:	e7ea      	b.n	800d080 <__lshift+0xa4>
 800d0aa:	bf00      	nop
 800d0ac:	08026874 	.word	0x08026874
 800d0b0:	08026885 	.word	0x08026885

0800d0b4 <__mcmp>:
 800d0b4:	690a      	ldr	r2, [r1, #16]
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	6900      	ldr	r0, [r0, #16]
 800d0ba:	1a80      	subs	r0, r0, r2
 800d0bc:	b530      	push	{r4, r5, lr}
 800d0be:	d10e      	bne.n	800d0de <__mcmp+0x2a>
 800d0c0:	3314      	adds	r3, #20
 800d0c2:	3114      	adds	r1, #20
 800d0c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d0c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d0cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d0d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d0d4:	4295      	cmp	r5, r2
 800d0d6:	d003      	beq.n	800d0e0 <__mcmp+0x2c>
 800d0d8:	d205      	bcs.n	800d0e6 <__mcmp+0x32>
 800d0da:	f04f 30ff 	mov.w	r0, #4294967295
 800d0de:	bd30      	pop	{r4, r5, pc}
 800d0e0:	42a3      	cmp	r3, r4
 800d0e2:	d3f3      	bcc.n	800d0cc <__mcmp+0x18>
 800d0e4:	e7fb      	b.n	800d0de <__mcmp+0x2a>
 800d0e6:	2001      	movs	r0, #1
 800d0e8:	e7f9      	b.n	800d0de <__mcmp+0x2a>
	...

0800d0ec <__mdiff>:
 800d0ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f0:	4689      	mov	r9, r1
 800d0f2:	4606      	mov	r6, r0
 800d0f4:	4611      	mov	r1, r2
 800d0f6:	4648      	mov	r0, r9
 800d0f8:	4614      	mov	r4, r2
 800d0fa:	f7ff ffdb 	bl	800d0b4 <__mcmp>
 800d0fe:	1e05      	subs	r5, r0, #0
 800d100:	d112      	bne.n	800d128 <__mdiff+0x3c>
 800d102:	4629      	mov	r1, r5
 800d104:	4630      	mov	r0, r6
 800d106:	f7ff fd5b 	bl	800cbc0 <_Balloc>
 800d10a:	4602      	mov	r2, r0
 800d10c:	b928      	cbnz	r0, 800d11a <__mdiff+0x2e>
 800d10e:	4b3f      	ldr	r3, [pc, #252]	@ (800d20c <__mdiff+0x120>)
 800d110:	f240 2137 	movw	r1, #567	@ 0x237
 800d114:	483e      	ldr	r0, [pc, #248]	@ (800d210 <__mdiff+0x124>)
 800d116:	f000 fb11 	bl	800d73c <__assert_func>
 800d11a:	2301      	movs	r3, #1
 800d11c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d120:	4610      	mov	r0, r2
 800d122:	b003      	add	sp, #12
 800d124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d128:	bfbc      	itt	lt
 800d12a:	464b      	movlt	r3, r9
 800d12c:	46a1      	movlt	r9, r4
 800d12e:	4630      	mov	r0, r6
 800d130:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d134:	bfba      	itte	lt
 800d136:	461c      	movlt	r4, r3
 800d138:	2501      	movlt	r5, #1
 800d13a:	2500      	movge	r5, #0
 800d13c:	f7ff fd40 	bl	800cbc0 <_Balloc>
 800d140:	4602      	mov	r2, r0
 800d142:	b918      	cbnz	r0, 800d14c <__mdiff+0x60>
 800d144:	4b31      	ldr	r3, [pc, #196]	@ (800d20c <__mdiff+0x120>)
 800d146:	f240 2145 	movw	r1, #581	@ 0x245
 800d14a:	e7e3      	b.n	800d114 <__mdiff+0x28>
 800d14c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d150:	6926      	ldr	r6, [r4, #16]
 800d152:	60c5      	str	r5, [r0, #12]
 800d154:	f109 0310 	add.w	r3, r9, #16
 800d158:	f109 0514 	add.w	r5, r9, #20
 800d15c:	f104 0e14 	add.w	lr, r4, #20
 800d160:	f100 0b14 	add.w	fp, r0, #20
 800d164:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d168:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d16c:	9301      	str	r3, [sp, #4]
 800d16e:	46d9      	mov	r9, fp
 800d170:	f04f 0c00 	mov.w	ip, #0
 800d174:	9b01      	ldr	r3, [sp, #4]
 800d176:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d17a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d17e:	9301      	str	r3, [sp, #4]
 800d180:	fa1f f38a 	uxth.w	r3, sl
 800d184:	4619      	mov	r1, r3
 800d186:	b283      	uxth	r3, r0
 800d188:	1acb      	subs	r3, r1, r3
 800d18a:	0c00      	lsrs	r0, r0, #16
 800d18c:	4463      	add	r3, ip
 800d18e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d192:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d196:	b29b      	uxth	r3, r3
 800d198:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d19c:	4576      	cmp	r6, lr
 800d19e:	f849 3b04 	str.w	r3, [r9], #4
 800d1a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1a6:	d8e5      	bhi.n	800d174 <__mdiff+0x88>
 800d1a8:	1b33      	subs	r3, r6, r4
 800d1aa:	3b15      	subs	r3, #21
 800d1ac:	f023 0303 	bic.w	r3, r3, #3
 800d1b0:	3415      	adds	r4, #21
 800d1b2:	3304      	adds	r3, #4
 800d1b4:	42a6      	cmp	r6, r4
 800d1b6:	bf38      	it	cc
 800d1b8:	2304      	movcc	r3, #4
 800d1ba:	441d      	add	r5, r3
 800d1bc:	445b      	add	r3, fp
 800d1be:	461e      	mov	r6, r3
 800d1c0:	462c      	mov	r4, r5
 800d1c2:	4544      	cmp	r4, r8
 800d1c4:	d30e      	bcc.n	800d1e4 <__mdiff+0xf8>
 800d1c6:	f108 0103 	add.w	r1, r8, #3
 800d1ca:	1b49      	subs	r1, r1, r5
 800d1cc:	f021 0103 	bic.w	r1, r1, #3
 800d1d0:	3d03      	subs	r5, #3
 800d1d2:	45a8      	cmp	r8, r5
 800d1d4:	bf38      	it	cc
 800d1d6:	2100      	movcc	r1, #0
 800d1d8:	440b      	add	r3, r1
 800d1da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d1de:	b191      	cbz	r1, 800d206 <__mdiff+0x11a>
 800d1e0:	6117      	str	r7, [r2, #16]
 800d1e2:	e79d      	b.n	800d120 <__mdiff+0x34>
 800d1e4:	f854 1b04 	ldr.w	r1, [r4], #4
 800d1e8:	46e6      	mov	lr, ip
 800d1ea:	0c08      	lsrs	r0, r1, #16
 800d1ec:	fa1c fc81 	uxtah	ip, ip, r1
 800d1f0:	4471      	add	r1, lr
 800d1f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d1f6:	b289      	uxth	r1, r1
 800d1f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d1fc:	f846 1b04 	str.w	r1, [r6], #4
 800d200:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d204:	e7dd      	b.n	800d1c2 <__mdiff+0xd6>
 800d206:	3f01      	subs	r7, #1
 800d208:	e7e7      	b.n	800d1da <__mdiff+0xee>
 800d20a:	bf00      	nop
 800d20c:	08026874 	.word	0x08026874
 800d210:	08026885 	.word	0x08026885

0800d214 <__d2b>:
 800d214:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d218:	460f      	mov	r7, r1
 800d21a:	2101      	movs	r1, #1
 800d21c:	ec59 8b10 	vmov	r8, r9, d0
 800d220:	4616      	mov	r6, r2
 800d222:	f7ff fccd 	bl	800cbc0 <_Balloc>
 800d226:	4604      	mov	r4, r0
 800d228:	b930      	cbnz	r0, 800d238 <__d2b+0x24>
 800d22a:	4602      	mov	r2, r0
 800d22c:	4b23      	ldr	r3, [pc, #140]	@ (800d2bc <__d2b+0xa8>)
 800d22e:	4824      	ldr	r0, [pc, #144]	@ (800d2c0 <__d2b+0xac>)
 800d230:	f240 310f 	movw	r1, #783	@ 0x30f
 800d234:	f000 fa82 	bl	800d73c <__assert_func>
 800d238:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d23c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d240:	b10d      	cbz	r5, 800d246 <__d2b+0x32>
 800d242:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d246:	9301      	str	r3, [sp, #4]
 800d248:	f1b8 0300 	subs.w	r3, r8, #0
 800d24c:	d023      	beq.n	800d296 <__d2b+0x82>
 800d24e:	4668      	mov	r0, sp
 800d250:	9300      	str	r3, [sp, #0]
 800d252:	f7ff fd7c 	bl	800cd4e <__lo0bits>
 800d256:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d25a:	b1d0      	cbz	r0, 800d292 <__d2b+0x7e>
 800d25c:	f1c0 0320 	rsb	r3, r0, #32
 800d260:	fa02 f303 	lsl.w	r3, r2, r3
 800d264:	430b      	orrs	r3, r1
 800d266:	40c2      	lsrs	r2, r0
 800d268:	6163      	str	r3, [r4, #20]
 800d26a:	9201      	str	r2, [sp, #4]
 800d26c:	9b01      	ldr	r3, [sp, #4]
 800d26e:	61a3      	str	r3, [r4, #24]
 800d270:	2b00      	cmp	r3, #0
 800d272:	bf0c      	ite	eq
 800d274:	2201      	moveq	r2, #1
 800d276:	2202      	movne	r2, #2
 800d278:	6122      	str	r2, [r4, #16]
 800d27a:	b1a5      	cbz	r5, 800d2a6 <__d2b+0x92>
 800d27c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d280:	4405      	add	r5, r0
 800d282:	603d      	str	r5, [r7, #0]
 800d284:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d288:	6030      	str	r0, [r6, #0]
 800d28a:	4620      	mov	r0, r4
 800d28c:	b003      	add	sp, #12
 800d28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d292:	6161      	str	r1, [r4, #20]
 800d294:	e7ea      	b.n	800d26c <__d2b+0x58>
 800d296:	a801      	add	r0, sp, #4
 800d298:	f7ff fd59 	bl	800cd4e <__lo0bits>
 800d29c:	9b01      	ldr	r3, [sp, #4]
 800d29e:	6163      	str	r3, [r4, #20]
 800d2a0:	3020      	adds	r0, #32
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	e7e8      	b.n	800d278 <__d2b+0x64>
 800d2a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d2aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d2ae:	6038      	str	r0, [r7, #0]
 800d2b0:	6918      	ldr	r0, [r3, #16]
 800d2b2:	f7ff fd2d 	bl	800cd10 <__hi0bits>
 800d2b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d2ba:	e7e5      	b.n	800d288 <__d2b+0x74>
 800d2bc:	08026874 	.word	0x08026874
 800d2c0:	08026885 	.word	0x08026885

0800d2c4 <__ssputs_r>:
 800d2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2c8:	688e      	ldr	r6, [r1, #8]
 800d2ca:	461f      	mov	r7, r3
 800d2cc:	42be      	cmp	r6, r7
 800d2ce:	680b      	ldr	r3, [r1, #0]
 800d2d0:	4682      	mov	sl, r0
 800d2d2:	460c      	mov	r4, r1
 800d2d4:	4690      	mov	r8, r2
 800d2d6:	d82d      	bhi.n	800d334 <__ssputs_r+0x70>
 800d2d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d2dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d2e0:	d026      	beq.n	800d330 <__ssputs_r+0x6c>
 800d2e2:	6965      	ldr	r5, [r4, #20]
 800d2e4:	6909      	ldr	r1, [r1, #16]
 800d2e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2ea:	eba3 0901 	sub.w	r9, r3, r1
 800d2ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d2f2:	1c7b      	adds	r3, r7, #1
 800d2f4:	444b      	add	r3, r9
 800d2f6:	106d      	asrs	r5, r5, #1
 800d2f8:	429d      	cmp	r5, r3
 800d2fa:	bf38      	it	cc
 800d2fc:	461d      	movcc	r5, r3
 800d2fe:	0553      	lsls	r3, r2, #21
 800d300:	d527      	bpl.n	800d352 <__ssputs_r+0x8e>
 800d302:	4629      	mov	r1, r5
 800d304:	f7ff fbd0 	bl	800caa8 <_malloc_r>
 800d308:	4606      	mov	r6, r0
 800d30a:	b360      	cbz	r0, 800d366 <__ssputs_r+0xa2>
 800d30c:	6921      	ldr	r1, [r4, #16]
 800d30e:	464a      	mov	r2, r9
 800d310:	f000 fa06 	bl	800d720 <memcpy>
 800d314:	89a3      	ldrh	r3, [r4, #12]
 800d316:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d31a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d31e:	81a3      	strh	r3, [r4, #12]
 800d320:	6126      	str	r6, [r4, #16]
 800d322:	6165      	str	r5, [r4, #20]
 800d324:	444e      	add	r6, r9
 800d326:	eba5 0509 	sub.w	r5, r5, r9
 800d32a:	6026      	str	r6, [r4, #0]
 800d32c:	60a5      	str	r5, [r4, #8]
 800d32e:	463e      	mov	r6, r7
 800d330:	42be      	cmp	r6, r7
 800d332:	d900      	bls.n	800d336 <__ssputs_r+0x72>
 800d334:	463e      	mov	r6, r7
 800d336:	6820      	ldr	r0, [r4, #0]
 800d338:	4632      	mov	r2, r6
 800d33a:	4641      	mov	r1, r8
 800d33c:	f000 f9c6 	bl	800d6cc <memmove>
 800d340:	68a3      	ldr	r3, [r4, #8]
 800d342:	1b9b      	subs	r3, r3, r6
 800d344:	60a3      	str	r3, [r4, #8]
 800d346:	6823      	ldr	r3, [r4, #0]
 800d348:	4433      	add	r3, r6
 800d34a:	6023      	str	r3, [r4, #0]
 800d34c:	2000      	movs	r0, #0
 800d34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d352:	462a      	mov	r2, r5
 800d354:	f000 fa36 	bl	800d7c4 <_realloc_r>
 800d358:	4606      	mov	r6, r0
 800d35a:	2800      	cmp	r0, #0
 800d35c:	d1e0      	bne.n	800d320 <__ssputs_r+0x5c>
 800d35e:	6921      	ldr	r1, [r4, #16]
 800d360:	4650      	mov	r0, sl
 800d362:	f7ff fb2d 	bl	800c9c0 <_free_r>
 800d366:	230c      	movs	r3, #12
 800d368:	f8ca 3000 	str.w	r3, [sl]
 800d36c:	89a3      	ldrh	r3, [r4, #12]
 800d36e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d372:	81a3      	strh	r3, [r4, #12]
 800d374:	f04f 30ff 	mov.w	r0, #4294967295
 800d378:	e7e9      	b.n	800d34e <__ssputs_r+0x8a>
	...

0800d37c <_svfiprintf_r>:
 800d37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d380:	4698      	mov	r8, r3
 800d382:	898b      	ldrh	r3, [r1, #12]
 800d384:	061b      	lsls	r3, r3, #24
 800d386:	b09d      	sub	sp, #116	@ 0x74
 800d388:	4607      	mov	r7, r0
 800d38a:	460d      	mov	r5, r1
 800d38c:	4614      	mov	r4, r2
 800d38e:	d510      	bpl.n	800d3b2 <_svfiprintf_r+0x36>
 800d390:	690b      	ldr	r3, [r1, #16]
 800d392:	b973      	cbnz	r3, 800d3b2 <_svfiprintf_r+0x36>
 800d394:	2140      	movs	r1, #64	@ 0x40
 800d396:	f7ff fb87 	bl	800caa8 <_malloc_r>
 800d39a:	6028      	str	r0, [r5, #0]
 800d39c:	6128      	str	r0, [r5, #16]
 800d39e:	b930      	cbnz	r0, 800d3ae <_svfiprintf_r+0x32>
 800d3a0:	230c      	movs	r3, #12
 800d3a2:	603b      	str	r3, [r7, #0]
 800d3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a8:	b01d      	add	sp, #116	@ 0x74
 800d3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ae:	2340      	movs	r3, #64	@ 0x40
 800d3b0:	616b      	str	r3, [r5, #20]
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3b6:	2320      	movs	r3, #32
 800d3b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d3bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3c0:	2330      	movs	r3, #48	@ 0x30
 800d3c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d560 <_svfiprintf_r+0x1e4>
 800d3c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3ca:	f04f 0901 	mov.w	r9, #1
 800d3ce:	4623      	mov	r3, r4
 800d3d0:	469a      	mov	sl, r3
 800d3d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3d6:	b10a      	cbz	r2, 800d3dc <_svfiprintf_r+0x60>
 800d3d8:	2a25      	cmp	r2, #37	@ 0x25
 800d3da:	d1f9      	bne.n	800d3d0 <_svfiprintf_r+0x54>
 800d3dc:	ebba 0b04 	subs.w	fp, sl, r4
 800d3e0:	d00b      	beq.n	800d3fa <_svfiprintf_r+0x7e>
 800d3e2:	465b      	mov	r3, fp
 800d3e4:	4622      	mov	r2, r4
 800d3e6:	4629      	mov	r1, r5
 800d3e8:	4638      	mov	r0, r7
 800d3ea:	f7ff ff6b 	bl	800d2c4 <__ssputs_r>
 800d3ee:	3001      	adds	r0, #1
 800d3f0:	f000 80a7 	beq.w	800d542 <_svfiprintf_r+0x1c6>
 800d3f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3f6:	445a      	add	r2, fp
 800d3f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800d3fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	f000 809f 	beq.w	800d542 <_svfiprintf_r+0x1c6>
 800d404:	2300      	movs	r3, #0
 800d406:	f04f 32ff 	mov.w	r2, #4294967295
 800d40a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d40e:	f10a 0a01 	add.w	sl, sl, #1
 800d412:	9304      	str	r3, [sp, #16]
 800d414:	9307      	str	r3, [sp, #28]
 800d416:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d41a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d41c:	4654      	mov	r4, sl
 800d41e:	2205      	movs	r2, #5
 800d420:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d424:	484e      	ldr	r0, [pc, #312]	@ (800d560 <_svfiprintf_r+0x1e4>)
 800d426:	f7f2 ff43 	bl	80002b0 <memchr>
 800d42a:	9a04      	ldr	r2, [sp, #16]
 800d42c:	b9d8      	cbnz	r0, 800d466 <_svfiprintf_r+0xea>
 800d42e:	06d0      	lsls	r0, r2, #27
 800d430:	bf44      	itt	mi
 800d432:	2320      	movmi	r3, #32
 800d434:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d438:	0711      	lsls	r1, r2, #28
 800d43a:	bf44      	itt	mi
 800d43c:	232b      	movmi	r3, #43	@ 0x2b
 800d43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d442:	f89a 3000 	ldrb.w	r3, [sl]
 800d446:	2b2a      	cmp	r3, #42	@ 0x2a
 800d448:	d015      	beq.n	800d476 <_svfiprintf_r+0xfa>
 800d44a:	9a07      	ldr	r2, [sp, #28]
 800d44c:	4654      	mov	r4, sl
 800d44e:	2000      	movs	r0, #0
 800d450:	f04f 0c0a 	mov.w	ip, #10
 800d454:	4621      	mov	r1, r4
 800d456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d45a:	3b30      	subs	r3, #48	@ 0x30
 800d45c:	2b09      	cmp	r3, #9
 800d45e:	d94b      	bls.n	800d4f8 <_svfiprintf_r+0x17c>
 800d460:	b1b0      	cbz	r0, 800d490 <_svfiprintf_r+0x114>
 800d462:	9207      	str	r2, [sp, #28]
 800d464:	e014      	b.n	800d490 <_svfiprintf_r+0x114>
 800d466:	eba0 0308 	sub.w	r3, r0, r8
 800d46a:	fa09 f303 	lsl.w	r3, r9, r3
 800d46e:	4313      	orrs	r3, r2
 800d470:	9304      	str	r3, [sp, #16]
 800d472:	46a2      	mov	sl, r4
 800d474:	e7d2      	b.n	800d41c <_svfiprintf_r+0xa0>
 800d476:	9b03      	ldr	r3, [sp, #12]
 800d478:	1d19      	adds	r1, r3, #4
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	9103      	str	r1, [sp, #12]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	bfbb      	ittet	lt
 800d482:	425b      	neglt	r3, r3
 800d484:	f042 0202 	orrlt.w	r2, r2, #2
 800d488:	9307      	strge	r3, [sp, #28]
 800d48a:	9307      	strlt	r3, [sp, #28]
 800d48c:	bfb8      	it	lt
 800d48e:	9204      	strlt	r2, [sp, #16]
 800d490:	7823      	ldrb	r3, [r4, #0]
 800d492:	2b2e      	cmp	r3, #46	@ 0x2e
 800d494:	d10a      	bne.n	800d4ac <_svfiprintf_r+0x130>
 800d496:	7863      	ldrb	r3, [r4, #1]
 800d498:	2b2a      	cmp	r3, #42	@ 0x2a
 800d49a:	d132      	bne.n	800d502 <_svfiprintf_r+0x186>
 800d49c:	9b03      	ldr	r3, [sp, #12]
 800d49e:	1d1a      	adds	r2, r3, #4
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	9203      	str	r2, [sp, #12]
 800d4a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4a8:	3402      	adds	r4, #2
 800d4aa:	9305      	str	r3, [sp, #20]
 800d4ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d570 <_svfiprintf_r+0x1f4>
 800d4b0:	7821      	ldrb	r1, [r4, #0]
 800d4b2:	2203      	movs	r2, #3
 800d4b4:	4650      	mov	r0, sl
 800d4b6:	f7f2 fefb 	bl	80002b0 <memchr>
 800d4ba:	b138      	cbz	r0, 800d4cc <_svfiprintf_r+0x150>
 800d4bc:	9b04      	ldr	r3, [sp, #16]
 800d4be:	eba0 000a 	sub.w	r0, r0, sl
 800d4c2:	2240      	movs	r2, #64	@ 0x40
 800d4c4:	4082      	lsls	r2, r0
 800d4c6:	4313      	orrs	r3, r2
 800d4c8:	3401      	adds	r4, #1
 800d4ca:	9304      	str	r3, [sp, #16]
 800d4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4d0:	4824      	ldr	r0, [pc, #144]	@ (800d564 <_svfiprintf_r+0x1e8>)
 800d4d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4d6:	2206      	movs	r2, #6
 800d4d8:	f7f2 feea 	bl	80002b0 <memchr>
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	d036      	beq.n	800d54e <_svfiprintf_r+0x1d2>
 800d4e0:	4b21      	ldr	r3, [pc, #132]	@ (800d568 <_svfiprintf_r+0x1ec>)
 800d4e2:	bb1b      	cbnz	r3, 800d52c <_svfiprintf_r+0x1b0>
 800d4e4:	9b03      	ldr	r3, [sp, #12]
 800d4e6:	3307      	adds	r3, #7
 800d4e8:	f023 0307 	bic.w	r3, r3, #7
 800d4ec:	3308      	adds	r3, #8
 800d4ee:	9303      	str	r3, [sp, #12]
 800d4f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4f2:	4433      	add	r3, r6
 800d4f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4f6:	e76a      	b.n	800d3ce <_svfiprintf_r+0x52>
 800d4f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4fc:	460c      	mov	r4, r1
 800d4fe:	2001      	movs	r0, #1
 800d500:	e7a8      	b.n	800d454 <_svfiprintf_r+0xd8>
 800d502:	2300      	movs	r3, #0
 800d504:	3401      	adds	r4, #1
 800d506:	9305      	str	r3, [sp, #20]
 800d508:	4619      	mov	r1, r3
 800d50a:	f04f 0c0a 	mov.w	ip, #10
 800d50e:	4620      	mov	r0, r4
 800d510:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d514:	3a30      	subs	r2, #48	@ 0x30
 800d516:	2a09      	cmp	r2, #9
 800d518:	d903      	bls.n	800d522 <_svfiprintf_r+0x1a6>
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d0c6      	beq.n	800d4ac <_svfiprintf_r+0x130>
 800d51e:	9105      	str	r1, [sp, #20]
 800d520:	e7c4      	b.n	800d4ac <_svfiprintf_r+0x130>
 800d522:	fb0c 2101 	mla	r1, ip, r1, r2
 800d526:	4604      	mov	r4, r0
 800d528:	2301      	movs	r3, #1
 800d52a:	e7f0      	b.n	800d50e <_svfiprintf_r+0x192>
 800d52c:	ab03      	add	r3, sp, #12
 800d52e:	9300      	str	r3, [sp, #0]
 800d530:	462a      	mov	r2, r5
 800d532:	4b0e      	ldr	r3, [pc, #56]	@ (800d56c <_svfiprintf_r+0x1f0>)
 800d534:	a904      	add	r1, sp, #16
 800d536:	4638      	mov	r0, r7
 800d538:	f7fd fe6a 	bl	800b210 <_printf_float>
 800d53c:	1c42      	adds	r2, r0, #1
 800d53e:	4606      	mov	r6, r0
 800d540:	d1d6      	bne.n	800d4f0 <_svfiprintf_r+0x174>
 800d542:	89ab      	ldrh	r3, [r5, #12]
 800d544:	065b      	lsls	r3, r3, #25
 800d546:	f53f af2d 	bmi.w	800d3a4 <_svfiprintf_r+0x28>
 800d54a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d54c:	e72c      	b.n	800d3a8 <_svfiprintf_r+0x2c>
 800d54e:	ab03      	add	r3, sp, #12
 800d550:	9300      	str	r3, [sp, #0]
 800d552:	462a      	mov	r2, r5
 800d554:	4b05      	ldr	r3, [pc, #20]	@ (800d56c <_svfiprintf_r+0x1f0>)
 800d556:	a904      	add	r1, sp, #16
 800d558:	4638      	mov	r0, r7
 800d55a:	f7fe f8f1 	bl	800b740 <_printf_i>
 800d55e:	e7ed      	b.n	800d53c <_svfiprintf_r+0x1c0>
 800d560:	080269e0 	.word	0x080269e0
 800d564:	080269ea 	.word	0x080269ea
 800d568:	0800b211 	.word	0x0800b211
 800d56c:	0800d2c5 	.word	0x0800d2c5
 800d570:	080269e6 	.word	0x080269e6

0800d574 <__sflush_r>:
 800d574:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d57c:	0716      	lsls	r6, r2, #28
 800d57e:	4605      	mov	r5, r0
 800d580:	460c      	mov	r4, r1
 800d582:	d454      	bmi.n	800d62e <__sflush_r+0xba>
 800d584:	684b      	ldr	r3, [r1, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	dc02      	bgt.n	800d590 <__sflush_r+0x1c>
 800d58a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	dd48      	ble.n	800d622 <__sflush_r+0xae>
 800d590:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d592:	2e00      	cmp	r6, #0
 800d594:	d045      	beq.n	800d622 <__sflush_r+0xae>
 800d596:	2300      	movs	r3, #0
 800d598:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d59c:	682f      	ldr	r7, [r5, #0]
 800d59e:	6a21      	ldr	r1, [r4, #32]
 800d5a0:	602b      	str	r3, [r5, #0]
 800d5a2:	d030      	beq.n	800d606 <__sflush_r+0x92>
 800d5a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d5a6:	89a3      	ldrh	r3, [r4, #12]
 800d5a8:	0759      	lsls	r1, r3, #29
 800d5aa:	d505      	bpl.n	800d5b8 <__sflush_r+0x44>
 800d5ac:	6863      	ldr	r3, [r4, #4]
 800d5ae:	1ad2      	subs	r2, r2, r3
 800d5b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d5b2:	b10b      	cbz	r3, 800d5b8 <__sflush_r+0x44>
 800d5b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d5b6:	1ad2      	subs	r2, r2, r3
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5bc:	6a21      	ldr	r1, [r4, #32]
 800d5be:	4628      	mov	r0, r5
 800d5c0:	47b0      	blx	r6
 800d5c2:	1c43      	adds	r3, r0, #1
 800d5c4:	89a3      	ldrh	r3, [r4, #12]
 800d5c6:	d106      	bne.n	800d5d6 <__sflush_r+0x62>
 800d5c8:	6829      	ldr	r1, [r5, #0]
 800d5ca:	291d      	cmp	r1, #29
 800d5cc:	d82b      	bhi.n	800d626 <__sflush_r+0xb2>
 800d5ce:	4a2a      	ldr	r2, [pc, #168]	@ (800d678 <__sflush_r+0x104>)
 800d5d0:	410a      	asrs	r2, r1
 800d5d2:	07d6      	lsls	r6, r2, #31
 800d5d4:	d427      	bmi.n	800d626 <__sflush_r+0xb2>
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	6062      	str	r2, [r4, #4]
 800d5da:	04d9      	lsls	r1, r3, #19
 800d5dc:	6922      	ldr	r2, [r4, #16]
 800d5de:	6022      	str	r2, [r4, #0]
 800d5e0:	d504      	bpl.n	800d5ec <__sflush_r+0x78>
 800d5e2:	1c42      	adds	r2, r0, #1
 800d5e4:	d101      	bne.n	800d5ea <__sflush_r+0x76>
 800d5e6:	682b      	ldr	r3, [r5, #0]
 800d5e8:	b903      	cbnz	r3, 800d5ec <__sflush_r+0x78>
 800d5ea:	6560      	str	r0, [r4, #84]	@ 0x54
 800d5ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d5ee:	602f      	str	r7, [r5, #0]
 800d5f0:	b1b9      	cbz	r1, 800d622 <__sflush_r+0xae>
 800d5f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d5f6:	4299      	cmp	r1, r3
 800d5f8:	d002      	beq.n	800d600 <__sflush_r+0x8c>
 800d5fa:	4628      	mov	r0, r5
 800d5fc:	f7ff f9e0 	bl	800c9c0 <_free_r>
 800d600:	2300      	movs	r3, #0
 800d602:	6363      	str	r3, [r4, #52]	@ 0x34
 800d604:	e00d      	b.n	800d622 <__sflush_r+0xae>
 800d606:	2301      	movs	r3, #1
 800d608:	4628      	mov	r0, r5
 800d60a:	47b0      	blx	r6
 800d60c:	4602      	mov	r2, r0
 800d60e:	1c50      	adds	r0, r2, #1
 800d610:	d1c9      	bne.n	800d5a6 <__sflush_r+0x32>
 800d612:	682b      	ldr	r3, [r5, #0]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d0c6      	beq.n	800d5a6 <__sflush_r+0x32>
 800d618:	2b1d      	cmp	r3, #29
 800d61a:	d001      	beq.n	800d620 <__sflush_r+0xac>
 800d61c:	2b16      	cmp	r3, #22
 800d61e:	d11e      	bne.n	800d65e <__sflush_r+0xea>
 800d620:	602f      	str	r7, [r5, #0]
 800d622:	2000      	movs	r0, #0
 800d624:	e022      	b.n	800d66c <__sflush_r+0xf8>
 800d626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d62a:	b21b      	sxth	r3, r3
 800d62c:	e01b      	b.n	800d666 <__sflush_r+0xf2>
 800d62e:	690f      	ldr	r7, [r1, #16]
 800d630:	2f00      	cmp	r7, #0
 800d632:	d0f6      	beq.n	800d622 <__sflush_r+0xae>
 800d634:	0793      	lsls	r3, r2, #30
 800d636:	680e      	ldr	r6, [r1, #0]
 800d638:	bf08      	it	eq
 800d63a:	694b      	ldreq	r3, [r1, #20]
 800d63c:	600f      	str	r7, [r1, #0]
 800d63e:	bf18      	it	ne
 800d640:	2300      	movne	r3, #0
 800d642:	eba6 0807 	sub.w	r8, r6, r7
 800d646:	608b      	str	r3, [r1, #8]
 800d648:	f1b8 0f00 	cmp.w	r8, #0
 800d64c:	dde9      	ble.n	800d622 <__sflush_r+0xae>
 800d64e:	6a21      	ldr	r1, [r4, #32]
 800d650:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d652:	4643      	mov	r3, r8
 800d654:	463a      	mov	r2, r7
 800d656:	4628      	mov	r0, r5
 800d658:	47b0      	blx	r6
 800d65a:	2800      	cmp	r0, #0
 800d65c:	dc08      	bgt.n	800d670 <__sflush_r+0xfc>
 800d65e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d666:	81a3      	strh	r3, [r4, #12]
 800d668:	f04f 30ff 	mov.w	r0, #4294967295
 800d66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d670:	4407      	add	r7, r0
 800d672:	eba8 0800 	sub.w	r8, r8, r0
 800d676:	e7e7      	b.n	800d648 <__sflush_r+0xd4>
 800d678:	dfbffffe 	.word	0xdfbffffe

0800d67c <_fflush_r>:
 800d67c:	b538      	push	{r3, r4, r5, lr}
 800d67e:	690b      	ldr	r3, [r1, #16]
 800d680:	4605      	mov	r5, r0
 800d682:	460c      	mov	r4, r1
 800d684:	b913      	cbnz	r3, 800d68c <_fflush_r+0x10>
 800d686:	2500      	movs	r5, #0
 800d688:	4628      	mov	r0, r5
 800d68a:	bd38      	pop	{r3, r4, r5, pc}
 800d68c:	b118      	cbz	r0, 800d696 <_fflush_r+0x1a>
 800d68e:	6a03      	ldr	r3, [r0, #32]
 800d690:	b90b      	cbnz	r3, 800d696 <_fflush_r+0x1a>
 800d692:	f7fe fa01 	bl	800ba98 <__sinit>
 800d696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d0f3      	beq.n	800d686 <_fflush_r+0xa>
 800d69e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d6a0:	07d0      	lsls	r0, r2, #31
 800d6a2:	d404      	bmi.n	800d6ae <_fflush_r+0x32>
 800d6a4:	0599      	lsls	r1, r3, #22
 800d6a6:	d402      	bmi.n	800d6ae <_fflush_r+0x32>
 800d6a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6aa:	f7fe fb3a 	bl	800bd22 <__retarget_lock_acquire_recursive>
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	4621      	mov	r1, r4
 800d6b2:	f7ff ff5f 	bl	800d574 <__sflush_r>
 800d6b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6b8:	07da      	lsls	r2, r3, #31
 800d6ba:	4605      	mov	r5, r0
 800d6bc:	d4e4      	bmi.n	800d688 <_fflush_r+0xc>
 800d6be:	89a3      	ldrh	r3, [r4, #12]
 800d6c0:	059b      	lsls	r3, r3, #22
 800d6c2:	d4e1      	bmi.n	800d688 <_fflush_r+0xc>
 800d6c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6c6:	f7fe fb2d 	bl	800bd24 <__retarget_lock_release_recursive>
 800d6ca:	e7dd      	b.n	800d688 <_fflush_r+0xc>

0800d6cc <memmove>:
 800d6cc:	4288      	cmp	r0, r1
 800d6ce:	b510      	push	{r4, lr}
 800d6d0:	eb01 0402 	add.w	r4, r1, r2
 800d6d4:	d902      	bls.n	800d6dc <memmove+0x10>
 800d6d6:	4284      	cmp	r4, r0
 800d6d8:	4623      	mov	r3, r4
 800d6da:	d807      	bhi.n	800d6ec <memmove+0x20>
 800d6dc:	1e43      	subs	r3, r0, #1
 800d6de:	42a1      	cmp	r1, r4
 800d6e0:	d008      	beq.n	800d6f4 <memmove+0x28>
 800d6e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d6e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d6ea:	e7f8      	b.n	800d6de <memmove+0x12>
 800d6ec:	4402      	add	r2, r0
 800d6ee:	4601      	mov	r1, r0
 800d6f0:	428a      	cmp	r2, r1
 800d6f2:	d100      	bne.n	800d6f6 <memmove+0x2a>
 800d6f4:	bd10      	pop	{r4, pc}
 800d6f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d6fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d6fe:	e7f7      	b.n	800d6f0 <memmove+0x24>

0800d700 <_sbrk_r>:
 800d700:	b538      	push	{r3, r4, r5, lr}
 800d702:	4d06      	ldr	r5, [pc, #24]	@ (800d71c <_sbrk_r+0x1c>)
 800d704:	2300      	movs	r3, #0
 800d706:	4604      	mov	r4, r0
 800d708:	4608      	mov	r0, r1
 800d70a:	602b      	str	r3, [r5, #0]
 800d70c:	f000 fb9c 	bl	800de48 <_sbrk>
 800d710:	1c43      	adds	r3, r0, #1
 800d712:	d102      	bne.n	800d71a <_sbrk_r+0x1a>
 800d714:	682b      	ldr	r3, [r5, #0]
 800d716:	b103      	cbz	r3, 800d71a <_sbrk_r+0x1a>
 800d718:	6023      	str	r3, [r4, #0]
 800d71a:	bd38      	pop	{r3, r4, r5, pc}
 800d71c:	200027f8 	.word	0x200027f8

0800d720 <memcpy>:
 800d720:	440a      	add	r2, r1
 800d722:	4291      	cmp	r1, r2
 800d724:	f100 33ff 	add.w	r3, r0, #4294967295
 800d728:	d100      	bne.n	800d72c <memcpy+0xc>
 800d72a:	4770      	bx	lr
 800d72c:	b510      	push	{r4, lr}
 800d72e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d732:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d736:	4291      	cmp	r1, r2
 800d738:	d1f9      	bne.n	800d72e <memcpy+0xe>
 800d73a:	bd10      	pop	{r4, pc}

0800d73c <__assert_func>:
 800d73c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d73e:	4614      	mov	r4, r2
 800d740:	461a      	mov	r2, r3
 800d742:	4b09      	ldr	r3, [pc, #36]	@ (800d768 <__assert_func+0x2c>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	4605      	mov	r5, r0
 800d748:	68d8      	ldr	r0, [r3, #12]
 800d74a:	b954      	cbnz	r4, 800d762 <__assert_func+0x26>
 800d74c:	4b07      	ldr	r3, [pc, #28]	@ (800d76c <__assert_func+0x30>)
 800d74e:	461c      	mov	r4, r3
 800d750:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d754:	9100      	str	r1, [sp, #0]
 800d756:	462b      	mov	r3, r5
 800d758:	4905      	ldr	r1, [pc, #20]	@ (800d770 <__assert_func+0x34>)
 800d75a:	f000 f86f 	bl	800d83c <fiprintf>
 800d75e:	f000 f87f 	bl	800d860 <abort>
 800d762:	4b04      	ldr	r3, [pc, #16]	@ (800d774 <__assert_func+0x38>)
 800d764:	e7f4      	b.n	800d750 <__assert_func+0x14>
 800d766:	bf00      	nop
 800d768:	200001a8 	.word	0x200001a8
 800d76c:	08026a36 	.word	0x08026a36
 800d770:	08026a08 	.word	0x08026a08
 800d774:	080269fb 	.word	0x080269fb

0800d778 <_calloc_r>:
 800d778:	b570      	push	{r4, r5, r6, lr}
 800d77a:	fba1 5402 	umull	r5, r4, r1, r2
 800d77e:	b93c      	cbnz	r4, 800d790 <_calloc_r+0x18>
 800d780:	4629      	mov	r1, r5
 800d782:	f7ff f991 	bl	800caa8 <_malloc_r>
 800d786:	4606      	mov	r6, r0
 800d788:	b928      	cbnz	r0, 800d796 <_calloc_r+0x1e>
 800d78a:	2600      	movs	r6, #0
 800d78c:	4630      	mov	r0, r6
 800d78e:	bd70      	pop	{r4, r5, r6, pc}
 800d790:	220c      	movs	r2, #12
 800d792:	6002      	str	r2, [r0, #0]
 800d794:	e7f9      	b.n	800d78a <_calloc_r+0x12>
 800d796:	462a      	mov	r2, r5
 800d798:	4621      	mov	r1, r4
 800d79a:	f7fe fa4a 	bl	800bc32 <memset>
 800d79e:	e7f5      	b.n	800d78c <_calloc_r+0x14>

0800d7a0 <__ascii_mbtowc>:
 800d7a0:	b082      	sub	sp, #8
 800d7a2:	b901      	cbnz	r1, 800d7a6 <__ascii_mbtowc+0x6>
 800d7a4:	a901      	add	r1, sp, #4
 800d7a6:	b142      	cbz	r2, 800d7ba <__ascii_mbtowc+0x1a>
 800d7a8:	b14b      	cbz	r3, 800d7be <__ascii_mbtowc+0x1e>
 800d7aa:	7813      	ldrb	r3, [r2, #0]
 800d7ac:	600b      	str	r3, [r1, #0]
 800d7ae:	7812      	ldrb	r2, [r2, #0]
 800d7b0:	1e10      	subs	r0, r2, #0
 800d7b2:	bf18      	it	ne
 800d7b4:	2001      	movne	r0, #1
 800d7b6:	b002      	add	sp, #8
 800d7b8:	4770      	bx	lr
 800d7ba:	4610      	mov	r0, r2
 800d7bc:	e7fb      	b.n	800d7b6 <__ascii_mbtowc+0x16>
 800d7be:	f06f 0001 	mvn.w	r0, #1
 800d7c2:	e7f8      	b.n	800d7b6 <__ascii_mbtowc+0x16>

0800d7c4 <_realloc_r>:
 800d7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c8:	4680      	mov	r8, r0
 800d7ca:	4615      	mov	r5, r2
 800d7cc:	460c      	mov	r4, r1
 800d7ce:	b921      	cbnz	r1, 800d7da <_realloc_r+0x16>
 800d7d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d4:	4611      	mov	r1, r2
 800d7d6:	f7ff b967 	b.w	800caa8 <_malloc_r>
 800d7da:	b92a      	cbnz	r2, 800d7e8 <_realloc_r+0x24>
 800d7dc:	f7ff f8f0 	bl	800c9c0 <_free_r>
 800d7e0:	2400      	movs	r4, #0
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7e8:	f000 f841 	bl	800d86e <_malloc_usable_size_r>
 800d7ec:	4285      	cmp	r5, r0
 800d7ee:	4606      	mov	r6, r0
 800d7f0:	d802      	bhi.n	800d7f8 <_realloc_r+0x34>
 800d7f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d7f6:	d8f4      	bhi.n	800d7e2 <_realloc_r+0x1e>
 800d7f8:	4629      	mov	r1, r5
 800d7fa:	4640      	mov	r0, r8
 800d7fc:	f7ff f954 	bl	800caa8 <_malloc_r>
 800d800:	4607      	mov	r7, r0
 800d802:	2800      	cmp	r0, #0
 800d804:	d0ec      	beq.n	800d7e0 <_realloc_r+0x1c>
 800d806:	42b5      	cmp	r5, r6
 800d808:	462a      	mov	r2, r5
 800d80a:	4621      	mov	r1, r4
 800d80c:	bf28      	it	cs
 800d80e:	4632      	movcs	r2, r6
 800d810:	f7ff ff86 	bl	800d720 <memcpy>
 800d814:	4621      	mov	r1, r4
 800d816:	4640      	mov	r0, r8
 800d818:	f7ff f8d2 	bl	800c9c0 <_free_r>
 800d81c:	463c      	mov	r4, r7
 800d81e:	e7e0      	b.n	800d7e2 <_realloc_r+0x1e>

0800d820 <__ascii_wctomb>:
 800d820:	4603      	mov	r3, r0
 800d822:	4608      	mov	r0, r1
 800d824:	b141      	cbz	r1, 800d838 <__ascii_wctomb+0x18>
 800d826:	2aff      	cmp	r2, #255	@ 0xff
 800d828:	d904      	bls.n	800d834 <__ascii_wctomb+0x14>
 800d82a:	228a      	movs	r2, #138	@ 0x8a
 800d82c:	601a      	str	r2, [r3, #0]
 800d82e:	f04f 30ff 	mov.w	r0, #4294967295
 800d832:	4770      	bx	lr
 800d834:	700a      	strb	r2, [r1, #0]
 800d836:	2001      	movs	r0, #1
 800d838:	4770      	bx	lr
	...

0800d83c <fiprintf>:
 800d83c:	b40e      	push	{r1, r2, r3}
 800d83e:	b503      	push	{r0, r1, lr}
 800d840:	4601      	mov	r1, r0
 800d842:	ab03      	add	r3, sp, #12
 800d844:	4805      	ldr	r0, [pc, #20]	@ (800d85c <fiprintf+0x20>)
 800d846:	f853 2b04 	ldr.w	r2, [r3], #4
 800d84a:	6800      	ldr	r0, [r0, #0]
 800d84c:	9301      	str	r3, [sp, #4]
 800d84e:	f000 f83f 	bl	800d8d0 <_vfiprintf_r>
 800d852:	b002      	add	sp, #8
 800d854:	f85d eb04 	ldr.w	lr, [sp], #4
 800d858:	b003      	add	sp, #12
 800d85a:	4770      	bx	lr
 800d85c:	200001a8 	.word	0x200001a8

0800d860 <abort>:
 800d860:	b508      	push	{r3, lr}
 800d862:	2006      	movs	r0, #6
 800d864:	f000 fa08 	bl	800dc78 <raise>
 800d868:	2001      	movs	r0, #1
 800d86a:	f000 fafb 	bl	800de64 <_exit>

0800d86e <_malloc_usable_size_r>:
 800d86e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d872:	1f18      	subs	r0, r3, #4
 800d874:	2b00      	cmp	r3, #0
 800d876:	bfbc      	itt	lt
 800d878:	580b      	ldrlt	r3, [r1, r0]
 800d87a:	18c0      	addlt	r0, r0, r3
 800d87c:	4770      	bx	lr

0800d87e <__sfputc_r>:
 800d87e:	6893      	ldr	r3, [r2, #8]
 800d880:	3b01      	subs	r3, #1
 800d882:	2b00      	cmp	r3, #0
 800d884:	b410      	push	{r4}
 800d886:	6093      	str	r3, [r2, #8]
 800d888:	da08      	bge.n	800d89c <__sfputc_r+0x1e>
 800d88a:	6994      	ldr	r4, [r2, #24]
 800d88c:	42a3      	cmp	r3, r4
 800d88e:	db01      	blt.n	800d894 <__sfputc_r+0x16>
 800d890:	290a      	cmp	r1, #10
 800d892:	d103      	bne.n	800d89c <__sfputc_r+0x1e>
 800d894:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d898:	f000 b932 	b.w	800db00 <__swbuf_r>
 800d89c:	6813      	ldr	r3, [r2, #0]
 800d89e:	1c58      	adds	r0, r3, #1
 800d8a0:	6010      	str	r0, [r2, #0]
 800d8a2:	7019      	strb	r1, [r3, #0]
 800d8a4:	4608      	mov	r0, r1
 800d8a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8aa:	4770      	bx	lr

0800d8ac <__sfputs_r>:
 800d8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ae:	4606      	mov	r6, r0
 800d8b0:	460f      	mov	r7, r1
 800d8b2:	4614      	mov	r4, r2
 800d8b4:	18d5      	adds	r5, r2, r3
 800d8b6:	42ac      	cmp	r4, r5
 800d8b8:	d101      	bne.n	800d8be <__sfputs_r+0x12>
 800d8ba:	2000      	movs	r0, #0
 800d8bc:	e007      	b.n	800d8ce <__sfputs_r+0x22>
 800d8be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8c2:	463a      	mov	r2, r7
 800d8c4:	4630      	mov	r0, r6
 800d8c6:	f7ff ffda 	bl	800d87e <__sfputc_r>
 800d8ca:	1c43      	adds	r3, r0, #1
 800d8cc:	d1f3      	bne.n	800d8b6 <__sfputs_r+0xa>
 800d8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d8d0 <_vfiprintf_r>:
 800d8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8d4:	460d      	mov	r5, r1
 800d8d6:	b09d      	sub	sp, #116	@ 0x74
 800d8d8:	4614      	mov	r4, r2
 800d8da:	4698      	mov	r8, r3
 800d8dc:	4606      	mov	r6, r0
 800d8de:	b118      	cbz	r0, 800d8e8 <_vfiprintf_r+0x18>
 800d8e0:	6a03      	ldr	r3, [r0, #32]
 800d8e2:	b90b      	cbnz	r3, 800d8e8 <_vfiprintf_r+0x18>
 800d8e4:	f7fe f8d8 	bl	800ba98 <__sinit>
 800d8e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8ea:	07d9      	lsls	r1, r3, #31
 800d8ec:	d405      	bmi.n	800d8fa <_vfiprintf_r+0x2a>
 800d8ee:	89ab      	ldrh	r3, [r5, #12]
 800d8f0:	059a      	lsls	r2, r3, #22
 800d8f2:	d402      	bmi.n	800d8fa <_vfiprintf_r+0x2a>
 800d8f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8f6:	f7fe fa14 	bl	800bd22 <__retarget_lock_acquire_recursive>
 800d8fa:	89ab      	ldrh	r3, [r5, #12]
 800d8fc:	071b      	lsls	r3, r3, #28
 800d8fe:	d501      	bpl.n	800d904 <_vfiprintf_r+0x34>
 800d900:	692b      	ldr	r3, [r5, #16]
 800d902:	b99b      	cbnz	r3, 800d92c <_vfiprintf_r+0x5c>
 800d904:	4629      	mov	r1, r5
 800d906:	4630      	mov	r0, r6
 800d908:	f000 f938 	bl	800db7c <__swsetup_r>
 800d90c:	b170      	cbz	r0, 800d92c <_vfiprintf_r+0x5c>
 800d90e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d910:	07dc      	lsls	r4, r3, #31
 800d912:	d504      	bpl.n	800d91e <_vfiprintf_r+0x4e>
 800d914:	f04f 30ff 	mov.w	r0, #4294967295
 800d918:	b01d      	add	sp, #116	@ 0x74
 800d91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d91e:	89ab      	ldrh	r3, [r5, #12]
 800d920:	0598      	lsls	r0, r3, #22
 800d922:	d4f7      	bmi.n	800d914 <_vfiprintf_r+0x44>
 800d924:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d926:	f7fe f9fd 	bl	800bd24 <__retarget_lock_release_recursive>
 800d92a:	e7f3      	b.n	800d914 <_vfiprintf_r+0x44>
 800d92c:	2300      	movs	r3, #0
 800d92e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d930:	2320      	movs	r3, #32
 800d932:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d936:	f8cd 800c 	str.w	r8, [sp, #12]
 800d93a:	2330      	movs	r3, #48	@ 0x30
 800d93c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800daec <_vfiprintf_r+0x21c>
 800d940:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d944:	f04f 0901 	mov.w	r9, #1
 800d948:	4623      	mov	r3, r4
 800d94a:	469a      	mov	sl, r3
 800d94c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d950:	b10a      	cbz	r2, 800d956 <_vfiprintf_r+0x86>
 800d952:	2a25      	cmp	r2, #37	@ 0x25
 800d954:	d1f9      	bne.n	800d94a <_vfiprintf_r+0x7a>
 800d956:	ebba 0b04 	subs.w	fp, sl, r4
 800d95a:	d00b      	beq.n	800d974 <_vfiprintf_r+0xa4>
 800d95c:	465b      	mov	r3, fp
 800d95e:	4622      	mov	r2, r4
 800d960:	4629      	mov	r1, r5
 800d962:	4630      	mov	r0, r6
 800d964:	f7ff ffa2 	bl	800d8ac <__sfputs_r>
 800d968:	3001      	adds	r0, #1
 800d96a:	f000 80a7 	beq.w	800dabc <_vfiprintf_r+0x1ec>
 800d96e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d970:	445a      	add	r2, fp
 800d972:	9209      	str	r2, [sp, #36]	@ 0x24
 800d974:	f89a 3000 	ldrb.w	r3, [sl]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	f000 809f 	beq.w	800dabc <_vfiprintf_r+0x1ec>
 800d97e:	2300      	movs	r3, #0
 800d980:	f04f 32ff 	mov.w	r2, #4294967295
 800d984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d988:	f10a 0a01 	add.w	sl, sl, #1
 800d98c:	9304      	str	r3, [sp, #16]
 800d98e:	9307      	str	r3, [sp, #28]
 800d990:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d994:	931a      	str	r3, [sp, #104]	@ 0x68
 800d996:	4654      	mov	r4, sl
 800d998:	2205      	movs	r2, #5
 800d99a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d99e:	4853      	ldr	r0, [pc, #332]	@ (800daec <_vfiprintf_r+0x21c>)
 800d9a0:	f7f2 fc86 	bl	80002b0 <memchr>
 800d9a4:	9a04      	ldr	r2, [sp, #16]
 800d9a6:	b9d8      	cbnz	r0, 800d9e0 <_vfiprintf_r+0x110>
 800d9a8:	06d1      	lsls	r1, r2, #27
 800d9aa:	bf44      	itt	mi
 800d9ac:	2320      	movmi	r3, #32
 800d9ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9b2:	0713      	lsls	r3, r2, #28
 800d9b4:	bf44      	itt	mi
 800d9b6:	232b      	movmi	r3, #43	@ 0x2b
 800d9b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d9c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9c2:	d015      	beq.n	800d9f0 <_vfiprintf_r+0x120>
 800d9c4:	9a07      	ldr	r2, [sp, #28]
 800d9c6:	4654      	mov	r4, sl
 800d9c8:	2000      	movs	r0, #0
 800d9ca:	f04f 0c0a 	mov.w	ip, #10
 800d9ce:	4621      	mov	r1, r4
 800d9d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9d4:	3b30      	subs	r3, #48	@ 0x30
 800d9d6:	2b09      	cmp	r3, #9
 800d9d8:	d94b      	bls.n	800da72 <_vfiprintf_r+0x1a2>
 800d9da:	b1b0      	cbz	r0, 800da0a <_vfiprintf_r+0x13a>
 800d9dc:	9207      	str	r2, [sp, #28]
 800d9de:	e014      	b.n	800da0a <_vfiprintf_r+0x13a>
 800d9e0:	eba0 0308 	sub.w	r3, r0, r8
 800d9e4:	fa09 f303 	lsl.w	r3, r9, r3
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	9304      	str	r3, [sp, #16]
 800d9ec:	46a2      	mov	sl, r4
 800d9ee:	e7d2      	b.n	800d996 <_vfiprintf_r+0xc6>
 800d9f0:	9b03      	ldr	r3, [sp, #12]
 800d9f2:	1d19      	adds	r1, r3, #4
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	9103      	str	r1, [sp, #12]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	bfbb      	ittet	lt
 800d9fc:	425b      	neglt	r3, r3
 800d9fe:	f042 0202 	orrlt.w	r2, r2, #2
 800da02:	9307      	strge	r3, [sp, #28]
 800da04:	9307      	strlt	r3, [sp, #28]
 800da06:	bfb8      	it	lt
 800da08:	9204      	strlt	r2, [sp, #16]
 800da0a:	7823      	ldrb	r3, [r4, #0]
 800da0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800da0e:	d10a      	bne.n	800da26 <_vfiprintf_r+0x156>
 800da10:	7863      	ldrb	r3, [r4, #1]
 800da12:	2b2a      	cmp	r3, #42	@ 0x2a
 800da14:	d132      	bne.n	800da7c <_vfiprintf_r+0x1ac>
 800da16:	9b03      	ldr	r3, [sp, #12]
 800da18:	1d1a      	adds	r2, r3, #4
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	9203      	str	r2, [sp, #12]
 800da1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da22:	3402      	adds	r4, #2
 800da24:	9305      	str	r3, [sp, #20]
 800da26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dafc <_vfiprintf_r+0x22c>
 800da2a:	7821      	ldrb	r1, [r4, #0]
 800da2c:	2203      	movs	r2, #3
 800da2e:	4650      	mov	r0, sl
 800da30:	f7f2 fc3e 	bl	80002b0 <memchr>
 800da34:	b138      	cbz	r0, 800da46 <_vfiprintf_r+0x176>
 800da36:	9b04      	ldr	r3, [sp, #16]
 800da38:	eba0 000a 	sub.w	r0, r0, sl
 800da3c:	2240      	movs	r2, #64	@ 0x40
 800da3e:	4082      	lsls	r2, r0
 800da40:	4313      	orrs	r3, r2
 800da42:	3401      	adds	r4, #1
 800da44:	9304      	str	r3, [sp, #16]
 800da46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da4a:	4829      	ldr	r0, [pc, #164]	@ (800daf0 <_vfiprintf_r+0x220>)
 800da4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800da50:	2206      	movs	r2, #6
 800da52:	f7f2 fc2d 	bl	80002b0 <memchr>
 800da56:	2800      	cmp	r0, #0
 800da58:	d03f      	beq.n	800dada <_vfiprintf_r+0x20a>
 800da5a:	4b26      	ldr	r3, [pc, #152]	@ (800daf4 <_vfiprintf_r+0x224>)
 800da5c:	bb1b      	cbnz	r3, 800daa6 <_vfiprintf_r+0x1d6>
 800da5e:	9b03      	ldr	r3, [sp, #12]
 800da60:	3307      	adds	r3, #7
 800da62:	f023 0307 	bic.w	r3, r3, #7
 800da66:	3308      	adds	r3, #8
 800da68:	9303      	str	r3, [sp, #12]
 800da6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da6c:	443b      	add	r3, r7
 800da6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800da70:	e76a      	b.n	800d948 <_vfiprintf_r+0x78>
 800da72:	fb0c 3202 	mla	r2, ip, r2, r3
 800da76:	460c      	mov	r4, r1
 800da78:	2001      	movs	r0, #1
 800da7a:	e7a8      	b.n	800d9ce <_vfiprintf_r+0xfe>
 800da7c:	2300      	movs	r3, #0
 800da7e:	3401      	adds	r4, #1
 800da80:	9305      	str	r3, [sp, #20]
 800da82:	4619      	mov	r1, r3
 800da84:	f04f 0c0a 	mov.w	ip, #10
 800da88:	4620      	mov	r0, r4
 800da8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da8e:	3a30      	subs	r2, #48	@ 0x30
 800da90:	2a09      	cmp	r2, #9
 800da92:	d903      	bls.n	800da9c <_vfiprintf_r+0x1cc>
 800da94:	2b00      	cmp	r3, #0
 800da96:	d0c6      	beq.n	800da26 <_vfiprintf_r+0x156>
 800da98:	9105      	str	r1, [sp, #20]
 800da9a:	e7c4      	b.n	800da26 <_vfiprintf_r+0x156>
 800da9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800daa0:	4604      	mov	r4, r0
 800daa2:	2301      	movs	r3, #1
 800daa4:	e7f0      	b.n	800da88 <_vfiprintf_r+0x1b8>
 800daa6:	ab03      	add	r3, sp, #12
 800daa8:	9300      	str	r3, [sp, #0]
 800daaa:	462a      	mov	r2, r5
 800daac:	4b12      	ldr	r3, [pc, #72]	@ (800daf8 <_vfiprintf_r+0x228>)
 800daae:	a904      	add	r1, sp, #16
 800dab0:	4630      	mov	r0, r6
 800dab2:	f7fd fbad 	bl	800b210 <_printf_float>
 800dab6:	4607      	mov	r7, r0
 800dab8:	1c78      	adds	r0, r7, #1
 800daba:	d1d6      	bne.n	800da6a <_vfiprintf_r+0x19a>
 800dabc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dabe:	07d9      	lsls	r1, r3, #31
 800dac0:	d405      	bmi.n	800dace <_vfiprintf_r+0x1fe>
 800dac2:	89ab      	ldrh	r3, [r5, #12]
 800dac4:	059a      	lsls	r2, r3, #22
 800dac6:	d402      	bmi.n	800dace <_vfiprintf_r+0x1fe>
 800dac8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800daca:	f7fe f92b 	bl	800bd24 <__retarget_lock_release_recursive>
 800dace:	89ab      	ldrh	r3, [r5, #12]
 800dad0:	065b      	lsls	r3, r3, #25
 800dad2:	f53f af1f 	bmi.w	800d914 <_vfiprintf_r+0x44>
 800dad6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dad8:	e71e      	b.n	800d918 <_vfiprintf_r+0x48>
 800dada:	ab03      	add	r3, sp, #12
 800dadc:	9300      	str	r3, [sp, #0]
 800dade:	462a      	mov	r2, r5
 800dae0:	4b05      	ldr	r3, [pc, #20]	@ (800daf8 <_vfiprintf_r+0x228>)
 800dae2:	a904      	add	r1, sp, #16
 800dae4:	4630      	mov	r0, r6
 800dae6:	f7fd fe2b 	bl	800b740 <_printf_i>
 800daea:	e7e4      	b.n	800dab6 <_vfiprintf_r+0x1e6>
 800daec:	080269e0 	.word	0x080269e0
 800daf0:	080269ea 	.word	0x080269ea
 800daf4:	0800b211 	.word	0x0800b211
 800daf8:	0800d8ad 	.word	0x0800d8ad
 800dafc:	080269e6 	.word	0x080269e6

0800db00 <__swbuf_r>:
 800db00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db02:	460e      	mov	r6, r1
 800db04:	4614      	mov	r4, r2
 800db06:	4605      	mov	r5, r0
 800db08:	b118      	cbz	r0, 800db12 <__swbuf_r+0x12>
 800db0a:	6a03      	ldr	r3, [r0, #32]
 800db0c:	b90b      	cbnz	r3, 800db12 <__swbuf_r+0x12>
 800db0e:	f7fd ffc3 	bl	800ba98 <__sinit>
 800db12:	69a3      	ldr	r3, [r4, #24]
 800db14:	60a3      	str	r3, [r4, #8]
 800db16:	89a3      	ldrh	r3, [r4, #12]
 800db18:	071a      	lsls	r2, r3, #28
 800db1a:	d501      	bpl.n	800db20 <__swbuf_r+0x20>
 800db1c:	6923      	ldr	r3, [r4, #16]
 800db1e:	b943      	cbnz	r3, 800db32 <__swbuf_r+0x32>
 800db20:	4621      	mov	r1, r4
 800db22:	4628      	mov	r0, r5
 800db24:	f000 f82a 	bl	800db7c <__swsetup_r>
 800db28:	b118      	cbz	r0, 800db32 <__swbuf_r+0x32>
 800db2a:	f04f 37ff 	mov.w	r7, #4294967295
 800db2e:	4638      	mov	r0, r7
 800db30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db32:	6823      	ldr	r3, [r4, #0]
 800db34:	6922      	ldr	r2, [r4, #16]
 800db36:	1a98      	subs	r0, r3, r2
 800db38:	6963      	ldr	r3, [r4, #20]
 800db3a:	b2f6      	uxtb	r6, r6
 800db3c:	4283      	cmp	r3, r0
 800db3e:	4637      	mov	r7, r6
 800db40:	dc05      	bgt.n	800db4e <__swbuf_r+0x4e>
 800db42:	4621      	mov	r1, r4
 800db44:	4628      	mov	r0, r5
 800db46:	f7ff fd99 	bl	800d67c <_fflush_r>
 800db4a:	2800      	cmp	r0, #0
 800db4c:	d1ed      	bne.n	800db2a <__swbuf_r+0x2a>
 800db4e:	68a3      	ldr	r3, [r4, #8]
 800db50:	3b01      	subs	r3, #1
 800db52:	60a3      	str	r3, [r4, #8]
 800db54:	6823      	ldr	r3, [r4, #0]
 800db56:	1c5a      	adds	r2, r3, #1
 800db58:	6022      	str	r2, [r4, #0]
 800db5a:	701e      	strb	r6, [r3, #0]
 800db5c:	6962      	ldr	r2, [r4, #20]
 800db5e:	1c43      	adds	r3, r0, #1
 800db60:	429a      	cmp	r2, r3
 800db62:	d004      	beq.n	800db6e <__swbuf_r+0x6e>
 800db64:	89a3      	ldrh	r3, [r4, #12]
 800db66:	07db      	lsls	r3, r3, #31
 800db68:	d5e1      	bpl.n	800db2e <__swbuf_r+0x2e>
 800db6a:	2e0a      	cmp	r6, #10
 800db6c:	d1df      	bne.n	800db2e <__swbuf_r+0x2e>
 800db6e:	4621      	mov	r1, r4
 800db70:	4628      	mov	r0, r5
 800db72:	f7ff fd83 	bl	800d67c <_fflush_r>
 800db76:	2800      	cmp	r0, #0
 800db78:	d0d9      	beq.n	800db2e <__swbuf_r+0x2e>
 800db7a:	e7d6      	b.n	800db2a <__swbuf_r+0x2a>

0800db7c <__swsetup_r>:
 800db7c:	b538      	push	{r3, r4, r5, lr}
 800db7e:	4b29      	ldr	r3, [pc, #164]	@ (800dc24 <__swsetup_r+0xa8>)
 800db80:	4605      	mov	r5, r0
 800db82:	6818      	ldr	r0, [r3, #0]
 800db84:	460c      	mov	r4, r1
 800db86:	b118      	cbz	r0, 800db90 <__swsetup_r+0x14>
 800db88:	6a03      	ldr	r3, [r0, #32]
 800db8a:	b90b      	cbnz	r3, 800db90 <__swsetup_r+0x14>
 800db8c:	f7fd ff84 	bl	800ba98 <__sinit>
 800db90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db94:	0719      	lsls	r1, r3, #28
 800db96:	d422      	bmi.n	800dbde <__swsetup_r+0x62>
 800db98:	06da      	lsls	r2, r3, #27
 800db9a:	d407      	bmi.n	800dbac <__swsetup_r+0x30>
 800db9c:	2209      	movs	r2, #9
 800db9e:	602a      	str	r2, [r5, #0]
 800dba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dba4:	81a3      	strh	r3, [r4, #12]
 800dba6:	f04f 30ff 	mov.w	r0, #4294967295
 800dbaa:	e033      	b.n	800dc14 <__swsetup_r+0x98>
 800dbac:	0758      	lsls	r0, r3, #29
 800dbae:	d512      	bpl.n	800dbd6 <__swsetup_r+0x5a>
 800dbb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dbb2:	b141      	cbz	r1, 800dbc6 <__swsetup_r+0x4a>
 800dbb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dbb8:	4299      	cmp	r1, r3
 800dbba:	d002      	beq.n	800dbc2 <__swsetup_r+0x46>
 800dbbc:	4628      	mov	r0, r5
 800dbbe:	f7fe feff 	bl	800c9c0 <_free_r>
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	6363      	str	r3, [r4, #52]	@ 0x34
 800dbc6:	89a3      	ldrh	r3, [r4, #12]
 800dbc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dbcc:	81a3      	strh	r3, [r4, #12]
 800dbce:	2300      	movs	r3, #0
 800dbd0:	6063      	str	r3, [r4, #4]
 800dbd2:	6923      	ldr	r3, [r4, #16]
 800dbd4:	6023      	str	r3, [r4, #0]
 800dbd6:	89a3      	ldrh	r3, [r4, #12]
 800dbd8:	f043 0308 	orr.w	r3, r3, #8
 800dbdc:	81a3      	strh	r3, [r4, #12]
 800dbde:	6923      	ldr	r3, [r4, #16]
 800dbe0:	b94b      	cbnz	r3, 800dbf6 <__swsetup_r+0x7a>
 800dbe2:	89a3      	ldrh	r3, [r4, #12]
 800dbe4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dbe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dbec:	d003      	beq.n	800dbf6 <__swsetup_r+0x7a>
 800dbee:	4621      	mov	r1, r4
 800dbf0:	4628      	mov	r0, r5
 800dbf2:	f000 f883 	bl	800dcfc <__smakebuf_r>
 800dbf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbfa:	f013 0201 	ands.w	r2, r3, #1
 800dbfe:	d00a      	beq.n	800dc16 <__swsetup_r+0x9a>
 800dc00:	2200      	movs	r2, #0
 800dc02:	60a2      	str	r2, [r4, #8]
 800dc04:	6962      	ldr	r2, [r4, #20]
 800dc06:	4252      	negs	r2, r2
 800dc08:	61a2      	str	r2, [r4, #24]
 800dc0a:	6922      	ldr	r2, [r4, #16]
 800dc0c:	b942      	cbnz	r2, 800dc20 <__swsetup_r+0xa4>
 800dc0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dc12:	d1c5      	bne.n	800dba0 <__swsetup_r+0x24>
 800dc14:	bd38      	pop	{r3, r4, r5, pc}
 800dc16:	0799      	lsls	r1, r3, #30
 800dc18:	bf58      	it	pl
 800dc1a:	6962      	ldrpl	r2, [r4, #20]
 800dc1c:	60a2      	str	r2, [r4, #8]
 800dc1e:	e7f4      	b.n	800dc0a <__swsetup_r+0x8e>
 800dc20:	2000      	movs	r0, #0
 800dc22:	e7f7      	b.n	800dc14 <__swsetup_r+0x98>
 800dc24:	200001a8 	.word	0x200001a8

0800dc28 <_raise_r>:
 800dc28:	291f      	cmp	r1, #31
 800dc2a:	b538      	push	{r3, r4, r5, lr}
 800dc2c:	4605      	mov	r5, r0
 800dc2e:	460c      	mov	r4, r1
 800dc30:	d904      	bls.n	800dc3c <_raise_r+0x14>
 800dc32:	2316      	movs	r3, #22
 800dc34:	6003      	str	r3, [r0, #0]
 800dc36:	f04f 30ff 	mov.w	r0, #4294967295
 800dc3a:	bd38      	pop	{r3, r4, r5, pc}
 800dc3c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dc3e:	b112      	cbz	r2, 800dc46 <_raise_r+0x1e>
 800dc40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc44:	b94b      	cbnz	r3, 800dc5a <_raise_r+0x32>
 800dc46:	4628      	mov	r0, r5
 800dc48:	f000 f830 	bl	800dcac <_getpid_r>
 800dc4c:	4622      	mov	r2, r4
 800dc4e:	4601      	mov	r1, r0
 800dc50:	4628      	mov	r0, r5
 800dc52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc56:	f000 b817 	b.w	800dc88 <_kill_r>
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d00a      	beq.n	800dc74 <_raise_r+0x4c>
 800dc5e:	1c59      	adds	r1, r3, #1
 800dc60:	d103      	bne.n	800dc6a <_raise_r+0x42>
 800dc62:	2316      	movs	r3, #22
 800dc64:	6003      	str	r3, [r0, #0]
 800dc66:	2001      	movs	r0, #1
 800dc68:	e7e7      	b.n	800dc3a <_raise_r+0x12>
 800dc6a:	2100      	movs	r1, #0
 800dc6c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dc70:	4620      	mov	r0, r4
 800dc72:	4798      	blx	r3
 800dc74:	2000      	movs	r0, #0
 800dc76:	e7e0      	b.n	800dc3a <_raise_r+0x12>

0800dc78 <raise>:
 800dc78:	4b02      	ldr	r3, [pc, #8]	@ (800dc84 <raise+0xc>)
 800dc7a:	4601      	mov	r1, r0
 800dc7c:	6818      	ldr	r0, [r3, #0]
 800dc7e:	f7ff bfd3 	b.w	800dc28 <_raise_r>
 800dc82:	bf00      	nop
 800dc84:	200001a8 	.word	0x200001a8

0800dc88 <_kill_r>:
 800dc88:	b538      	push	{r3, r4, r5, lr}
 800dc8a:	4d07      	ldr	r5, [pc, #28]	@ (800dca8 <_kill_r+0x20>)
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	4604      	mov	r4, r0
 800dc90:	4608      	mov	r0, r1
 800dc92:	4611      	mov	r1, r2
 800dc94:	602b      	str	r3, [r5, #0]
 800dc96:	f000 f8cf 	bl	800de38 <_kill>
 800dc9a:	1c43      	adds	r3, r0, #1
 800dc9c:	d102      	bne.n	800dca4 <_kill_r+0x1c>
 800dc9e:	682b      	ldr	r3, [r5, #0]
 800dca0:	b103      	cbz	r3, 800dca4 <_kill_r+0x1c>
 800dca2:	6023      	str	r3, [r4, #0]
 800dca4:	bd38      	pop	{r3, r4, r5, pc}
 800dca6:	bf00      	nop
 800dca8:	200027f8 	.word	0x200027f8

0800dcac <_getpid_r>:
 800dcac:	f000 b8b4 	b.w	800de18 <_getpid>

0800dcb0 <__swhatbuf_r>:
 800dcb0:	b570      	push	{r4, r5, r6, lr}
 800dcb2:	460c      	mov	r4, r1
 800dcb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcb8:	2900      	cmp	r1, #0
 800dcba:	b096      	sub	sp, #88	@ 0x58
 800dcbc:	4615      	mov	r5, r2
 800dcbe:	461e      	mov	r6, r3
 800dcc0:	da0d      	bge.n	800dcde <__swhatbuf_r+0x2e>
 800dcc2:	89a3      	ldrh	r3, [r4, #12]
 800dcc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dcc8:	f04f 0100 	mov.w	r1, #0
 800dccc:	bf14      	ite	ne
 800dcce:	2340      	movne	r3, #64	@ 0x40
 800dcd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dcd4:	2000      	movs	r0, #0
 800dcd6:	6031      	str	r1, [r6, #0]
 800dcd8:	602b      	str	r3, [r5, #0]
 800dcda:	b016      	add	sp, #88	@ 0x58
 800dcdc:	bd70      	pop	{r4, r5, r6, pc}
 800dcde:	466a      	mov	r2, sp
 800dce0:	f000 f848 	bl	800dd74 <_fstat_r>
 800dce4:	2800      	cmp	r0, #0
 800dce6:	dbec      	blt.n	800dcc2 <__swhatbuf_r+0x12>
 800dce8:	9901      	ldr	r1, [sp, #4]
 800dcea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dcee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dcf2:	4259      	negs	r1, r3
 800dcf4:	4159      	adcs	r1, r3
 800dcf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dcfa:	e7eb      	b.n	800dcd4 <__swhatbuf_r+0x24>

0800dcfc <__smakebuf_r>:
 800dcfc:	898b      	ldrh	r3, [r1, #12]
 800dcfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd00:	079d      	lsls	r5, r3, #30
 800dd02:	4606      	mov	r6, r0
 800dd04:	460c      	mov	r4, r1
 800dd06:	d507      	bpl.n	800dd18 <__smakebuf_r+0x1c>
 800dd08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dd0c:	6023      	str	r3, [r4, #0]
 800dd0e:	6123      	str	r3, [r4, #16]
 800dd10:	2301      	movs	r3, #1
 800dd12:	6163      	str	r3, [r4, #20]
 800dd14:	b003      	add	sp, #12
 800dd16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd18:	ab01      	add	r3, sp, #4
 800dd1a:	466a      	mov	r2, sp
 800dd1c:	f7ff ffc8 	bl	800dcb0 <__swhatbuf_r>
 800dd20:	9f00      	ldr	r7, [sp, #0]
 800dd22:	4605      	mov	r5, r0
 800dd24:	4639      	mov	r1, r7
 800dd26:	4630      	mov	r0, r6
 800dd28:	f7fe febe 	bl	800caa8 <_malloc_r>
 800dd2c:	b948      	cbnz	r0, 800dd42 <__smakebuf_r+0x46>
 800dd2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd32:	059a      	lsls	r2, r3, #22
 800dd34:	d4ee      	bmi.n	800dd14 <__smakebuf_r+0x18>
 800dd36:	f023 0303 	bic.w	r3, r3, #3
 800dd3a:	f043 0302 	orr.w	r3, r3, #2
 800dd3e:	81a3      	strh	r3, [r4, #12]
 800dd40:	e7e2      	b.n	800dd08 <__smakebuf_r+0xc>
 800dd42:	89a3      	ldrh	r3, [r4, #12]
 800dd44:	6020      	str	r0, [r4, #0]
 800dd46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd4a:	81a3      	strh	r3, [r4, #12]
 800dd4c:	9b01      	ldr	r3, [sp, #4]
 800dd4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dd52:	b15b      	cbz	r3, 800dd6c <__smakebuf_r+0x70>
 800dd54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd58:	4630      	mov	r0, r6
 800dd5a:	f000 f81d 	bl	800dd98 <_isatty_r>
 800dd5e:	b128      	cbz	r0, 800dd6c <__smakebuf_r+0x70>
 800dd60:	89a3      	ldrh	r3, [r4, #12]
 800dd62:	f023 0303 	bic.w	r3, r3, #3
 800dd66:	f043 0301 	orr.w	r3, r3, #1
 800dd6a:	81a3      	strh	r3, [r4, #12]
 800dd6c:	89a3      	ldrh	r3, [r4, #12]
 800dd6e:	431d      	orrs	r5, r3
 800dd70:	81a5      	strh	r5, [r4, #12]
 800dd72:	e7cf      	b.n	800dd14 <__smakebuf_r+0x18>

0800dd74 <_fstat_r>:
 800dd74:	b538      	push	{r3, r4, r5, lr}
 800dd76:	4d07      	ldr	r5, [pc, #28]	@ (800dd94 <_fstat_r+0x20>)
 800dd78:	2300      	movs	r3, #0
 800dd7a:	4604      	mov	r4, r0
 800dd7c:	4608      	mov	r0, r1
 800dd7e:	4611      	mov	r1, r2
 800dd80:	602b      	str	r3, [r5, #0]
 800dd82:	f000 f841 	bl	800de08 <_fstat>
 800dd86:	1c43      	adds	r3, r0, #1
 800dd88:	d102      	bne.n	800dd90 <_fstat_r+0x1c>
 800dd8a:	682b      	ldr	r3, [r5, #0]
 800dd8c:	b103      	cbz	r3, 800dd90 <_fstat_r+0x1c>
 800dd8e:	6023      	str	r3, [r4, #0]
 800dd90:	bd38      	pop	{r3, r4, r5, pc}
 800dd92:	bf00      	nop
 800dd94:	200027f8 	.word	0x200027f8

0800dd98 <_isatty_r>:
 800dd98:	b538      	push	{r3, r4, r5, lr}
 800dd9a:	4d06      	ldr	r5, [pc, #24]	@ (800ddb4 <_isatty_r+0x1c>)
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	4604      	mov	r4, r0
 800dda0:	4608      	mov	r0, r1
 800dda2:	602b      	str	r3, [r5, #0]
 800dda4:	f000 f840 	bl	800de28 <_isatty>
 800dda8:	1c43      	adds	r3, r0, #1
 800ddaa:	d102      	bne.n	800ddb2 <_isatty_r+0x1a>
 800ddac:	682b      	ldr	r3, [r5, #0]
 800ddae:	b103      	cbz	r3, 800ddb2 <_isatty_r+0x1a>
 800ddb0:	6023      	str	r3, [r4, #0]
 800ddb2:	bd38      	pop	{r3, r4, r5, pc}
 800ddb4:	200027f8 	.word	0x200027f8

0800ddb8 <sqrtf>:
 800ddb8:	b508      	push	{r3, lr}
 800ddba:	ed2d 8b02 	vpush	{d8}
 800ddbe:	eeb0 8a40 	vmov.f32	s16, s0
 800ddc2:	f000 f817 	bl	800ddf4 <__ieee754_sqrtf>
 800ddc6:	eeb4 8a48 	vcmp.f32	s16, s16
 800ddca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddce:	d60c      	bvs.n	800ddea <sqrtf+0x32>
 800ddd0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ddf0 <sqrtf+0x38>
 800ddd4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ddd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dddc:	d505      	bpl.n	800ddea <sqrtf+0x32>
 800ddde:	f000 f80d 	bl	800ddfc <__errno>
 800dde2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800dde6:	2321      	movs	r3, #33	@ 0x21
 800dde8:	6003      	str	r3, [r0, #0]
 800ddea:	ecbd 8b02 	vpop	{d8}
 800ddee:	bd08      	pop	{r3, pc}
 800ddf0:	00000000 	.word	0x00000000

0800ddf4 <__ieee754_sqrtf>:
 800ddf4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ddf8:	4770      	bx	lr
	...

0800ddfc <__errno>:
 800ddfc:	4b01      	ldr	r3, [pc, #4]	@ (800de04 <__errno+0x8>)
 800ddfe:	6818      	ldr	r0, [r3, #0]
 800de00:	4770      	bx	lr
 800de02:	bf00      	nop
 800de04:	200001a8 	.word	0x200001a8

0800de08 <_fstat>:
 800de08:	4b02      	ldr	r3, [pc, #8]	@ (800de14 <_fstat+0xc>)
 800de0a:	2258      	movs	r2, #88	@ 0x58
 800de0c:	601a      	str	r2, [r3, #0]
 800de0e:	f04f 30ff 	mov.w	r0, #4294967295
 800de12:	4770      	bx	lr
 800de14:	200027f8 	.word	0x200027f8

0800de18 <_getpid>:
 800de18:	4b02      	ldr	r3, [pc, #8]	@ (800de24 <_getpid+0xc>)
 800de1a:	2258      	movs	r2, #88	@ 0x58
 800de1c:	601a      	str	r2, [r3, #0]
 800de1e:	f04f 30ff 	mov.w	r0, #4294967295
 800de22:	4770      	bx	lr
 800de24:	200027f8 	.word	0x200027f8

0800de28 <_isatty>:
 800de28:	4b02      	ldr	r3, [pc, #8]	@ (800de34 <_isatty+0xc>)
 800de2a:	2258      	movs	r2, #88	@ 0x58
 800de2c:	601a      	str	r2, [r3, #0]
 800de2e:	2000      	movs	r0, #0
 800de30:	4770      	bx	lr
 800de32:	bf00      	nop
 800de34:	200027f8 	.word	0x200027f8

0800de38 <_kill>:
 800de38:	4b02      	ldr	r3, [pc, #8]	@ (800de44 <_kill+0xc>)
 800de3a:	2258      	movs	r2, #88	@ 0x58
 800de3c:	601a      	str	r2, [r3, #0]
 800de3e:	f04f 30ff 	mov.w	r0, #4294967295
 800de42:	4770      	bx	lr
 800de44:	200027f8 	.word	0x200027f8

0800de48 <_sbrk>:
 800de48:	4a04      	ldr	r2, [pc, #16]	@ (800de5c <_sbrk+0x14>)
 800de4a:	6811      	ldr	r1, [r2, #0]
 800de4c:	4603      	mov	r3, r0
 800de4e:	b909      	cbnz	r1, 800de54 <_sbrk+0xc>
 800de50:	4903      	ldr	r1, [pc, #12]	@ (800de60 <_sbrk+0x18>)
 800de52:	6011      	str	r1, [r2, #0]
 800de54:	6810      	ldr	r0, [r2, #0]
 800de56:	4403      	add	r3, r0
 800de58:	6013      	str	r3, [r2, #0]
 800de5a:	4770      	bx	lr
 800de5c:	20002808 	.word	0x20002808
 800de60:	20002810 	.word	0x20002810

0800de64 <_exit>:
 800de64:	e7fe      	b.n	800de64 <_exit>
	...

0800de68 <_init>:
 800de68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de6a:	bf00      	nop
 800de6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de6e:	bc08      	pop	{r3}
 800de70:	469e      	mov	lr, r3
 800de72:	4770      	bx	lr

0800de74 <_fini>:
 800de74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de76:	bf00      	nop
 800de78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de7a:	bc08      	pop	{r3}
 800de7c:	469e      	mov	lr, r3
 800de7e:	4770      	bx	lr
