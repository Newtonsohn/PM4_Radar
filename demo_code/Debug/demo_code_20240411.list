
demo_code_20240411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd18  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018cbc  0800dec8  0800dec8  0000eec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026b84  08026b84  00028364  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08026b84  08026b84  00027b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026b8c  08026b8c  00028364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026b8c  08026b8c  00027b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08026b90  08026b90  00027b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000364  20000000  08026b94  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024a8  20000364  08026ef8  00028364  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000280c  08026ef8  0002880c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00028364  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d14  00000000  00000000  00028394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f5c  00000000  00000000  000410a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  00045008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001197  00000000  00000000  000467a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002767d  00000000  00000000  0004793f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c459  00000000  00000000  0006efbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e29fe  00000000  00000000  0008b415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016de13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007430  00000000  00000000  0016dec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001752f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000199e  00000000  00000000  00175356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000040  00000000  00000000  00176cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000364 	.word	0x20000364
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800deb0 	.word	0x0800deb0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000368 	.word	0x20000368
 80001ec:	0800deb0 	.word	0x0800deb0

080001f0 <arm_bitreversal_32>:
 80001f0:	1c4b      	adds	r3, r1, #1
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	bf98      	it	ls
 80001f6:	4770      	bxls	lr
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001fc:	1c91      	adds	r1, r2, #2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000208:	880a      	ldrh	r2, [r1, #0]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020e:	4480      	add	r8, r0
 8000210:	4481      	add	r9, r0
 8000212:	4402      	add	r2, r0
 8000214:	4484      	add	ip, r0
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
 800021e:	6815      	ldr	r5, [r2, #0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
 8000224:	f8c9 6000 	str.w	r6, [r9]
 8000228:	f8c8 7000 	str.w	r7, [r8]
 800022c:	f8cc 5000 	str.w	r5, [ip]
 8000230:	6014      	str	r4, [r2, #0]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800023a:	6855      	ldr	r5, [r2, #4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
 800024c:	6054      	str	r4, [r2, #4]
 800024e:	3108      	adds	r1, #8
 8000250:	3b01      	subs	r3, #1
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
 800025a:	1c4b      	adds	r3, r1, #1
 800025c:	2b01      	cmp	r3, #1
 800025e:	bf98      	it	ls
 8000260:	4770      	bxls	lr
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000266:	1c91      	adds	r1, r2, #2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000272:	880a      	ldrh	r2, [r1, #0]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
 8000290:	6815      	ldr	r5, [r2, #0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
 8000296:	f8c9 6000 	str.w	r6, [r9]
 800029a:	f8c8 7000 	str.w	r7, [r8]
 800029e:	f8cc 5000 	str.w	r5, [ip]
 80002a2:	6014      	str	r4, [r2, #0]
 80002a4:	3108      	adds	r1, #8
 80002a6:	3b01      	subs	r3, #1
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ae:	4770      	bx	lr

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <strlen>:
 8000350:	4603      	mov	r3, r0
 8000352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000356:	2a00      	cmp	r2, #0
 8000358:	d1fb      	bne.n	8000352 <strlen+0x2>
 800035a:	1a18      	subs	r0, r3, r0
 800035c:	3801      	subs	r0, #1
 800035e:	4770      	bx	lr

08000360 <__aeabi_drsub>:
 8000360:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000364:	e002      	b.n	800036c <__adddf3>
 8000366:	bf00      	nop

08000368 <__aeabi_dsub>:
 8000368:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800036c <__adddf3>:
 800036c:	b530      	push	{r4, r5, lr}
 800036e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000372:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	bf1f      	itttt	ne
 8000382:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000386:	ea55 0c02 	orrsne.w	ip, r5, r2
 800038a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800038e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000392:	f000 80e2 	beq.w	800055a <__adddf3+0x1ee>
 8000396:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800039a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800039e:	bfb8      	it	lt
 80003a0:	426d      	neglt	r5, r5
 80003a2:	dd0c      	ble.n	80003be <__adddf3+0x52>
 80003a4:	442c      	add	r4, r5
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	ea82 0000 	eor.w	r0, r2, r0
 80003b2:	ea83 0101 	eor.w	r1, r3, r1
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	2d36      	cmp	r5, #54	@ 0x36
 80003c0:	bf88      	it	hi
 80003c2:	bd30      	pophi	{r4, r5, pc}
 80003c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003d4:	d002      	beq.n	80003dc <__adddf3+0x70>
 80003d6:	4240      	negs	r0, r0
 80003d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003e8:	d002      	beq.n	80003f0 <__adddf3+0x84>
 80003ea:	4252      	negs	r2, r2
 80003ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003f0:	ea94 0f05 	teq	r4, r5
 80003f4:	f000 80a7 	beq.w	8000546 <__adddf3+0x1da>
 80003f8:	f1a4 0401 	sub.w	r4, r4, #1
 80003fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000400:	db0d      	blt.n	800041e <__adddf3+0xb2>
 8000402:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000406:	fa22 f205 	lsr.w	r2, r2, r5
 800040a:	1880      	adds	r0, r0, r2
 800040c:	f141 0100 	adc.w	r1, r1, #0
 8000410:	fa03 f20e 	lsl.w	r2, r3, lr
 8000414:	1880      	adds	r0, r0, r2
 8000416:	fa43 f305 	asr.w	r3, r3, r5
 800041a:	4159      	adcs	r1, r3
 800041c:	e00e      	b.n	800043c <__adddf3+0xd0>
 800041e:	f1a5 0520 	sub.w	r5, r5, #32
 8000422:	f10e 0e20 	add.w	lr, lr, #32
 8000426:	2a01      	cmp	r2, #1
 8000428:	fa03 fc0e 	lsl.w	ip, r3, lr
 800042c:	bf28      	it	cs
 800042e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000432:	fa43 f305 	asr.w	r3, r3, r5
 8000436:	18c0      	adds	r0, r0, r3
 8000438:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000440:	d507      	bpl.n	8000452 <__adddf3+0xe6>
 8000442:	f04f 0e00 	mov.w	lr, #0
 8000446:	f1dc 0c00 	rsbs	ip, ip, #0
 800044a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800044e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000452:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000456:	d31b      	bcc.n	8000490 <__adddf3+0x124>
 8000458:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800045c:	d30c      	bcc.n	8000478 <__adddf3+0x10c>
 800045e:	0849      	lsrs	r1, r1, #1
 8000460:	ea5f 0030 	movs.w	r0, r0, rrx
 8000464:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000468:	f104 0401 	add.w	r4, r4, #1
 800046c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000470:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000474:	f080 809a 	bcs.w	80005ac <__adddf3+0x240>
 8000478:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800047c:	bf08      	it	eq
 800047e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000482:	f150 0000 	adcs.w	r0, r0, #0
 8000486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800048a:	ea41 0105 	orr.w	r1, r1, r5
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000494:	4140      	adcs	r0, r0
 8000496:	eb41 0101 	adc.w	r1, r1, r1
 800049a:	3c01      	subs	r4, #1
 800049c:	bf28      	it	cs
 800049e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004a2:	d2e9      	bcs.n	8000478 <__adddf3+0x10c>
 80004a4:	f091 0f00 	teq	r1, #0
 80004a8:	bf04      	itt	eq
 80004aa:	4601      	moveq	r1, r0
 80004ac:	2000      	moveq	r0, #0
 80004ae:	fab1 f381 	clz	r3, r1
 80004b2:	bf08      	it	eq
 80004b4:	3320      	addeq	r3, #32
 80004b6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ba:	f1b3 0220 	subs.w	r2, r3, #32
 80004be:	da0c      	bge.n	80004da <__adddf3+0x16e>
 80004c0:	320c      	adds	r2, #12
 80004c2:	dd08      	ble.n	80004d6 <__adddf3+0x16a>
 80004c4:	f102 0c14 	add.w	ip, r2, #20
 80004c8:	f1c2 020c 	rsb	r2, r2, #12
 80004cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004d0:	fa21 f102 	lsr.w	r1, r1, r2
 80004d4:	e00c      	b.n	80004f0 <__adddf3+0x184>
 80004d6:	f102 0214 	add.w	r2, r2, #20
 80004da:	bfd8      	it	le
 80004dc:	f1c2 0c20 	rsble	ip, r2, #32
 80004e0:	fa01 f102 	lsl.w	r1, r1, r2
 80004e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004e8:	bfdc      	itt	le
 80004ea:	ea41 010c 	orrle.w	r1, r1, ip
 80004ee:	4090      	lslle	r0, r2
 80004f0:	1ae4      	subs	r4, r4, r3
 80004f2:	bfa2      	ittt	ge
 80004f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004f8:	4329      	orrge	r1, r5
 80004fa:	bd30      	popge	{r4, r5, pc}
 80004fc:	ea6f 0404 	mvn.w	r4, r4
 8000500:	3c1f      	subs	r4, #31
 8000502:	da1c      	bge.n	800053e <__adddf3+0x1d2>
 8000504:	340c      	adds	r4, #12
 8000506:	dc0e      	bgt.n	8000526 <__adddf3+0x1ba>
 8000508:	f104 0414 	add.w	r4, r4, #20
 800050c:	f1c4 0220 	rsb	r2, r4, #32
 8000510:	fa20 f004 	lsr.w	r0, r0, r4
 8000514:	fa01 f302 	lsl.w	r3, r1, r2
 8000518:	ea40 0003 	orr.w	r0, r0, r3
 800051c:	fa21 f304 	lsr.w	r3, r1, r4
 8000520:	ea45 0103 	orr.w	r1, r5, r3
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f1c4 040c 	rsb	r4, r4, #12
 800052a:	f1c4 0220 	rsb	r2, r4, #32
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 f304 	lsl.w	r3, r1, r4
 8000536:	ea40 0003 	orr.w	r0, r0, r3
 800053a:	4629      	mov	r1, r5
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	fa21 f004 	lsr.w	r0, r1, r4
 8000542:	4629      	mov	r1, r5
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f094 0f00 	teq	r4, #0
 800054a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800054e:	bf06      	itte	eq
 8000550:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000554:	3401      	addeq	r4, #1
 8000556:	3d01      	subne	r5, #1
 8000558:	e74e      	b.n	80003f8 <__adddf3+0x8c>
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf18      	it	ne
 8000560:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000564:	d029      	beq.n	80005ba <__adddf3+0x24e>
 8000566:	ea94 0f05 	teq	r4, r5
 800056a:	bf08      	it	eq
 800056c:	ea90 0f02 	teqeq	r0, r2
 8000570:	d005      	beq.n	800057e <__adddf3+0x212>
 8000572:	ea54 0c00 	orrs.w	ip, r4, r0
 8000576:	bf04      	itt	eq
 8000578:	4619      	moveq	r1, r3
 800057a:	4610      	moveq	r0, r2
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	ea91 0f03 	teq	r1, r3
 8000582:	bf1e      	ittt	ne
 8000584:	2100      	movne	r1, #0
 8000586:	2000      	movne	r0, #0
 8000588:	bd30      	popne	{r4, r5, pc}
 800058a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800058e:	d105      	bne.n	800059c <__adddf3+0x230>
 8000590:	0040      	lsls	r0, r0, #1
 8000592:	4149      	adcs	r1, r1
 8000594:	bf28      	it	cs
 8000596:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005a0:	bf3c      	itt	cc
 80005a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005a6:	bd30      	popcc	{r4, r5, pc}
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005b4:	f04f 0000 	mov.w	r0, #0
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf1a      	itte	ne
 80005c0:	4619      	movne	r1, r3
 80005c2:	4610      	movne	r0, r2
 80005c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005c8:	bf1c      	itt	ne
 80005ca:	460b      	movne	r3, r1
 80005cc:	4602      	movne	r2, r0
 80005ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005d2:	bf06      	itte	eq
 80005d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005d8:	ea91 0f03 	teqeq	r1, r3
 80005dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop

080005e4 <__aeabi_ui2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f8:	f04f 0500 	mov.w	r5, #0
 80005fc:	f04f 0100 	mov.w	r1, #0
 8000600:	e750      	b.n	80004a4 <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_i2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800061c:	bf48      	it	mi
 800061e:	4240      	negmi	r0, r0
 8000620:	f04f 0100 	mov.w	r1, #0
 8000624:	e73e      	b.n	80004a4 <__adddf3+0x138>
 8000626:	bf00      	nop

08000628 <__aeabi_f2d>:
 8000628:	0042      	lsls	r2, r0, #1
 800062a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800062e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000632:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000636:	bf1f      	itttt	ne
 8000638:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800063c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000640:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000644:	4770      	bxne	lr
 8000646:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800064a:	bf08      	it	eq
 800064c:	4770      	bxeq	lr
 800064e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000652:	bf04      	itt	eq
 8000654:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000658:	4770      	bxeq	lr
 800065a:	b530      	push	{r4, r5, lr}
 800065c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000660:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000668:	e71c      	b.n	80004a4 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_ul2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	e00a      	b.n	8000692 <__aeabi_l2d+0x16>

0800067c <__aeabi_l2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800068a:	d502      	bpl.n	8000692 <__aeabi_l2d+0x16>
 800068c:	4240      	negs	r0, r0
 800068e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000692:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000696:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800069a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800069e:	f43f aed8 	beq.w	8000452 <__adddf3+0xe6>
 80006a2:	f04f 0203 	mov.w	r2, #3
 80006a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006aa:	bf18      	it	ne
 80006ac:	3203      	addne	r2, #3
 80006ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006b2:	bf18      	it	ne
 80006b4:	3203      	addne	r2, #3
 80006b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ba:	f1c2 0320 	rsb	r3, r2, #32
 80006be:	fa00 fc03 	lsl.w	ip, r0, r3
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ca:	ea40 000e 	orr.w	r0, r0, lr
 80006ce:	fa21 f102 	lsr.w	r1, r1, r2
 80006d2:	4414      	add	r4, r2
 80006d4:	e6bd      	b.n	8000452 <__adddf3+0xe6>
 80006d6:	bf00      	nop

080006d8 <__aeabi_dmul>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006e6:	bf1d      	ittte	ne
 80006e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ec:	ea94 0f0c 	teqne	r4, ip
 80006f0:	ea95 0f0c 	teqne	r5, ip
 80006f4:	f000 f8de 	bleq	80008b4 <__aeabi_dmul+0x1dc>
 80006f8:	442c      	add	r4, r5
 80006fa:	ea81 0603 	eor.w	r6, r1, r3
 80006fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000702:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000706:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800070a:	bf18      	it	ne
 800070c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000714:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000718:	d038      	beq.n	800078c <__aeabi_dmul+0xb4>
 800071a:	fba0 ce02 	umull	ip, lr, r0, r2
 800071e:	f04f 0500 	mov.w	r5, #0
 8000722:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000726:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800072a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800072e:	f04f 0600 	mov.w	r6, #0
 8000732:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000736:	f09c 0f00 	teq	ip, #0
 800073a:	bf18      	it	ne
 800073c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000740:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000744:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000748:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800074c:	d204      	bcs.n	8000758 <__aeabi_dmul+0x80>
 800074e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000752:	416d      	adcs	r5, r5
 8000754:	eb46 0606 	adc.w	r6, r6, r6
 8000758:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800075c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000760:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000764:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000768:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800076c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000770:	bf88      	it	hi
 8000772:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000776:	d81e      	bhi.n	80007b6 <__aeabi_dmul+0xde>
 8000778:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800077c:	bf08      	it	eq
 800077e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000782:	f150 0000 	adcs.w	r0, r0, #0
 8000786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000790:	ea46 0101 	orr.w	r1, r6, r1
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007a0:	bfc2      	ittt	gt
 80007a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	popgt	{r4, r5, r6, pc}
 80007ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007b0:	f04f 0e00 	mov.w	lr, #0
 80007b4:	3c01      	subs	r4, #1
 80007b6:	f300 80ab 	bgt.w	8000910 <__aeabi_dmul+0x238>
 80007ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007be:	bfde      	ittt	le
 80007c0:	2000      	movle	r0, #0
 80007c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007c6:	bd70      	pople	{r4, r5, r6, pc}
 80007c8:	f1c4 0400 	rsb	r4, r4, #0
 80007cc:	3c20      	subs	r4, #32
 80007ce:	da35      	bge.n	800083c <__aeabi_dmul+0x164>
 80007d0:	340c      	adds	r4, #12
 80007d2:	dc1b      	bgt.n	800080c <__aeabi_dmul+0x134>
 80007d4:	f104 0414 	add.w	r4, r4, #20
 80007d8:	f1c4 0520 	rsb	r5, r4, #32
 80007dc:	fa00 f305 	lsl.w	r3, r0, r5
 80007e0:	fa20 f004 	lsr.w	r0, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea40 0002 	orr.w	r0, r0, r2
 80007ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007f8:	fa21 f604 	lsr.w	r6, r1, r4
 80007fc:	eb42 0106 	adc.w	r1, r2, r6
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 040c 	rsb	r4, r4, #12
 8000810:	f1c4 0520 	rsb	r5, r4, #32
 8000814:	fa00 f304 	lsl.w	r3, r0, r4
 8000818:	fa20 f005 	lsr.w	r0, r0, r5
 800081c:	fa01 f204 	lsl.w	r2, r1, r4
 8000820:	ea40 0002 	orr.w	r0, r0, r2
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800082c:	f141 0100 	adc.w	r1, r1, #0
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 0520 	rsb	r5, r4, #32
 8000840:	fa00 f205 	lsl.w	r2, r0, r5
 8000844:	ea4e 0e02 	orr.w	lr, lr, r2
 8000848:	fa20 f304 	lsr.w	r3, r0, r4
 800084c:	fa01 f205 	lsl.w	r2, r1, r5
 8000850:	ea43 0302 	orr.w	r3, r3, r2
 8000854:	fa21 f004 	lsr.w	r0, r1, r4
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	fa21 f204 	lsr.w	r2, r1, r4
 8000860:	ea20 0002 	bic.w	r0, r0, r2
 8000864:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800086c:	bf08      	it	eq
 800086e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f094 0f00 	teq	r4, #0
 8000878:	d10f      	bne.n	800089a <__aeabi_dmul+0x1c2>
 800087a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800087e:	0040      	lsls	r0, r0, #1
 8000880:	eb41 0101 	adc.w	r1, r1, r1
 8000884:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000888:	bf08      	it	eq
 800088a:	3c01      	subeq	r4, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1a6>
 800088e:	ea41 0106 	orr.w	r1, r1, r6
 8000892:	f095 0f00 	teq	r5, #0
 8000896:	bf18      	it	ne
 8000898:	4770      	bxne	lr
 800089a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	eb43 0303 	adc.w	r3, r3, r3
 80008a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3d01      	subeq	r5, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1c6>
 80008ae:	ea43 0306 	orr.w	r3, r3, r6
 80008b2:	4770      	bx	lr
 80008b4:	ea94 0f0c 	teq	r4, ip
 80008b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008bc:	bf18      	it	ne
 80008be:	ea95 0f0c 	teqne	r5, ip
 80008c2:	d00c      	beq.n	80008de <__aeabi_dmul+0x206>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	d1d1      	bne.n	8000874 <__aeabi_dmul+0x19c>
 80008d0:	ea81 0103 	eor.w	r1, r1, r3
 80008d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008d8:	f04f 0000 	mov.w	r0, #0
 80008dc:	bd70      	pop	{r4, r5, r6, pc}
 80008de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e2:	bf06      	itte	eq
 80008e4:	4610      	moveq	r0, r2
 80008e6:	4619      	moveq	r1, r3
 80008e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ec:	d019      	beq.n	8000922 <__aeabi_dmul+0x24a>
 80008ee:	ea94 0f0c 	teq	r4, ip
 80008f2:	d102      	bne.n	80008fa <__aeabi_dmul+0x222>
 80008f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008f8:	d113      	bne.n	8000922 <__aeabi_dmul+0x24a>
 80008fa:	ea95 0f0c 	teq	r5, ip
 80008fe:	d105      	bne.n	800090c <__aeabi_dmul+0x234>
 8000900:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000904:	bf1c      	itt	ne
 8000906:	4610      	movne	r0, r2
 8000908:	4619      	movne	r1, r3
 800090a:	d10a      	bne.n	8000922 <__aeabi_dmul+0x24a>
 800090c:	ea81 0103 	eor.w	r1, r1, r3
 8000910:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000914:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000918:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	bd70      	pop	{r4, r5, r6, pc}
 8000922:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000926:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800092a:	bd70      	pop	{r4, r5, r6, pc}

0800092c <__aeabi_ddiv>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000932:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000936:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800093a:	bf1d      	ittte	ne
 800093c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000940:	ea94 0f0c 	teqne	r4, ip
 8000944:	ea95 0f0c 	teqne	r5, ip
 8000948:	f000 f8a7 	bleq	8000a9a <__aeabi_ddiv+0x16e>
 800094c:	eba4 0405 	sub.w	r4, r4, r5
 8000950:	ea81 0e03 	eor.w	lr, r1, r3
 8000954:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000958:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800095c:	f000 8088 	beq.w	8000a70 <__aeabi_ddiv+0x144>
 8000960:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000964:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000968:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800096c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000970:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000974:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000978:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800097c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000980:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000984:	429d      	cmp	r5, r3
 8000986:	bf08      	it	eq
 8000988:	4296      	cmpeq	r6, r2
 800098a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800098e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000992:	d202      	bcs.n	800099a <__aeabi_ddiv+0x6e>
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	ea4f 0232 	mov.w	r2, r2, rrx
 800099a:	1ab6      	subs	r6, r6, r2
 800099c:	eb65 0503 	sbc.w	r5, r5, r3
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a08:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a0c:	d018      	beq.n	8000a40 <__aeabi_ddiv+0x114>
 8000a0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a2a:	d1c0      	bne.n	80009ae <__aeabi_ddiv+0x82>
 8000a2c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a30:	d10b      	bne.n	8000a4a <__aeabi_ddiv+0x11e>
 8000a32:	ea41 0100 	orr.w	r1, r1, r0
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a3e:	e7b6      	b.n	80009ae <__aeabi_ddiv+0x82>
 8000a40:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a44:	bf04      	itt	eq
 8000a46:	4301      	orreq	r1, r0
 8000a48:	2000      	moveq	r0, #0
 8000a4a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a4e:	bf88      	it	hi
 8000a50:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a54:	f63f aeaf 	bhi.w	80007b6 <__aeabi_dmul+0xde>
 8000a58:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a5c:	bf04      	itt	eq
 8000a5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a66:	f150 0000 	adcs.w	r0, r0, #0
 8000a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a7c:	bfc2      	ittt	gt
 8000a7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a86:	bd70      	popgt	{r4, r5, r6, pc}
 8000a88:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a8c:	f04f 0e00 	mov.w	lr, #0
 8000a90:	3c01      	subs	r4, #1
 8000a92:	e690      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a94:	ea45 0e06 	orr.w	lr, r5, r6
 8000a98:	e68d      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a9e:	ea94 0f0c 	teq	r4, ip
 8000aa2:	bf08      	it	eq
 8000aa4:	ea95 0f0c 	teqeq	r5, ip
 8000aa8:	f43f af3b 	beq.w	8000922 <__aeabi_dmul+0x24a>
 8000aac:	ea94 0f0c 	teq	r4, ip
 8000ab0:	d10a      	bne.n	8000ac8 <__aeabi_ddiv+0x19c>
 8000ab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ab6:	f47f af34 	bne.w	8000922 <__aeabi_dmul+0x24a>
 8000aba:	ea95 0f0c 	teq	r5, ip
 8000abe:	f47f af25 	bne.w	800090c <__aeabi_dmul+0x234>
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	e72c      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000ac8:	ea95 0f0c 	teq	r5, ip
 8000acc:	d106      	bne.n	8000adc <__aeabi_ddiv+0x1b0>
 8000ace:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ad2:	f43f aefd 	beq.w	80008d0 <__aeabi_dmul+0x1f8>
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	e722      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000adc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ae6:	f47f aec5 	bne.w	8000874 <__aeabi_dmul+0x19c>
 8000aea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aee:	f47f af0d 	bne.w	800090c <__aeabi_dmul+0x234>
 8000af2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000af6:	f47f aeeb 	bne.w	80008d0 <__aeabi_dmul+0x1f8>
 8000afa:	e712      	b.n	8000922 <__aeabi_dmul+0x24a>

08000afc <__gedf2>:
 8000afc:	f04f 3cff 	mov.w	ip, #4294967295
 8000b00:	e006      	b.n	8000b10 <__cmpdf2+0x4>
 8000b02:	bf00      	nop

08000b04 <__ledf2>:
 8000b04:	f04f 0c01 	mov.w	ip, #1
 8000b08:	e002      	b.n	8000b10 <__cmpdf2+0x4>
 8000b0a:	bf00      	nop

08000b0c <__cmpdf2>:
 8000b0c:	f04f 0c01 	mov.w	ip, #1
 8000b10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b26:	d01b      	beq.n	8000b60 <__cmpdf2+0x54>
 8000b28:	b001      	add	sp, #4
 8000b2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b2e:	bf0c      	ite	eq
 8000b30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b34:	ea91 0f03 	teqne	r1, r3
 8000b38:	bf02      	ittt	eq
 8000b3a:	ea90 0f02 	teqeq	r0, r2
 8000b3e:	2000      	moveq	r0, #0
 8000b40:	4770      	bxeq	lr
 8000b42:	f110 0f00 	cmn.w	r0, #0
 8000b46:	ea91 0f03 	teq	r1, r3
 8000b4a:	bf58      	it	pl
 8000b4c:	4299      	cmppl	r1, r3
 8000b4e:	bf08      	it	eq
 8000b50:	4290      	cmpeq	r0, r2
 8000b52:	bf2c      	ite	cs
 8000b54:	17d8      	asrcs	r0, r3, #31
 8000b56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b5a:	f040 0001 	orr.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__cmpdf2+0x64>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d107      	bne.n	8000b80 <__cmpdf2+0x74>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d1d6      	bne.n	8000b28 <__cmpdf2+0x1c>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d0d3      	beq.n	8000b28 <__cmpdf2+0x1c>
 8000b80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdrcmple>:
 8000b88:	4684      	mov	ip, r0
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	4662      	mov	r2, ip
 8000b8e:	468c      	mov	ip, r1
 8000b90:	4619      	mov	r1, r3
 8000b92:	4663      	mov	r3, ip
 8000b94:	e000      	b.n	8000b98 <__aeabi_cdcmpeq>
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdcmpeq>:
 8000b98:	b501      	push	{r0, lr}
 8000b9a:	f7ff ffb7 	bl	8000b0c <__cmpdf2>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	bf48      	it	mi
 8000ba2:	f110 0f00 	cmnmi.w	r0, #0
 8000ba6:	bd01      	pop	{r0, pc}

08000ba8 <__aeabi_dcmpeq>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff fff4 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bb0:	bf0c      	ite	eq
 8000bb2:	2001      	moveq	r0, #1
 8000bb4:	2000      	movne	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmplt>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffea 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bc4:	bf34      	ite	cc
 8000bc6:	2001      	movcc	r0, #1
 8000bc8:	2000      	movcs	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmple>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffe0 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bd8:	bf94      	ite	ls
 8000bda:	2001      	movls	r0, #1
 8000bdc:	2000      	movhi	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmpge>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffce 	bl	8000b88 <__aeabi_cdrcmple>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmpgt>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffc4 	bl	8000b88 <__aeabi_cdrcmple>
 8000c00:	bf34      	ite	cc
 8000c02:	2001      	movcc	r0, #1
 8000c04:	2000      	movcs	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpun>:
 8000c0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x10>
 8000c16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c1a:	d10a      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x20>
 8000c26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0001 	mov.w	r0, #1
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2iz>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c40:	d215      	bcs.n	8000c6e <__aeabi_d2iz+0x36>
 8000c42:	d511      	bpl.n	8000c68 <__aeabi_d2iz+0x30>
 8000c44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c4c:	d912      	bls.n	8000c74 <__aeabi_d2iz+0x3c>
 8000c4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c62:	bf18      	it	ne
 8000c64:	4240      	negne	r0, r0
 8000c66:	4770      	bx	lr
 8000c68:	f04f 0000 	mov.w	r0, #0
 8000c6c:	4770      	bx	lr
 8000c6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c72:	d105      	bne.n	8000c80 <__aeabi_d2iz+0x48>
 8000c74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	bf08      	it	eq
 8000c7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b08f      	sub	sp, #60	@ 0x3c
 8000fb8:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 8000fba:	f004 fa47 	bl	800544c <HAL_Init>
	SystemClock_Config();				// Configure system clocks
 8000fbe:	f000 f8f7 	bl	80011b0 <SystemClock_Config>
	MX_GPIO_Init();
 8000fc2:	f000 fa1f 	bl	8001404 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000fc6:	f000 f9ed 	bl	80013a4 <MX_USART1_UART_Init>

	char msg[50];
    uint8_t previous_menu = MENU_NONE;  // Tracks the last active menu
 8000fca:	2306      	movs	r3, #6
 8000fcc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    sprintf(msg, "Hello World\r\n");    // Convert MEAS_data_ready to a string
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	4970      	ldr	r1, [pc, #448]	@ (8001194 <main+0x1e0>)
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f00a fde7 	bl	800bba8 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff f9b7 	bl	8000350 <strlen>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	1d39      	adds	r1, r7, #4
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fec:	486a      	ldr	r0, [pc, #424]	@ (8001198 <main+0x1e4>)
 8000fee:	f008 fabe 	bl	800956e <HAL_UART_Transmit>

#ifdef FLIPPED_LCD
	BSP_LCD_Init_Flipped();				// Initialize the LCD for flipped orientation
 8000ff2:	f003 f8a3 	bl	800413c <BSP_LCD_Init_Flipped>
#else
	BSP_LCD_Init();						// Initialize the LCD display
#endif
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8000ff6:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f003 f92c 	bl	8004258 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8001000:	2001      	movs	r0, #1
 8001002:	f003 f98d 	bl	8004320 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8001006:	f003 fc5d 	bl	80048c4 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800100a:	f04f 30ff 	mov.w	r0, #4294967295
 800100e:	f003 f9e3 	bl	80043d8 <BSP_LCD_Clear>
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 8001012:	f003 f909 	bl	8004228 <BSP_LCD_GetXSize>
 8001016:	4603      	mov	r3, r0
 8001018:	b29c      	uxth	r4, r3
 800101a:	f003 f911 	bl	8004240 <BSP_LCD_GetYSize>
 800101e:	4603      	mov	r3, r0
 8001020:	b29b      	uxth	r3, r3
 8001022:	4619      	mov	r1, r3
 8001024:	4620      	mov	r0, r4
 8001026:	f004 f83b 	bl	80050a0 <BSP_TS_Init>

	PB_init();							// Initialize the user pushbutton
 800102a:	f001 ff09 	bl	8002e40 <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 800102e:	f001 ff27 	bl	8002e80 <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 8001032:	2000      	movs	r0, #0
 8001034:	f002 fca0 	bl	8003978 <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 8001038:	2001      	movs	r0, #1
 800103a:	f002 fc9d 	bl	8003978 <BSP_LED_Init>

	MENU_draw();						// Draw the menu
 800103e:	f001 fd2d 	bl	8002a9c <MENU_draw>
	MENU_hint();						// Show hint at startup
 8001042:	f001 fdd9 	bl	8002bf8 <MENU_hint>

	gyro_disable();						// Disable gyro, use those analog inputs
 8001046:	f000 f931 	bl	80012ac <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 800104a:	f000 fb01 	bl	8001650 <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 800104e:	f000 fb9b 	bl	8001788 <MEAS_timer_init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001058:	4850      	ldr	r0, [pc, #320]	@ (800119c <main+0x1e8>)
 800105a:	f005 f99f 	bl	800639c <HAL_GPIO_WritePin>
	//FFT_init();  						// Nach MEAS_timer_init()


	/* Infinite while loop */
	while (1) {							// Infinitely loop in main function
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 800105e:	2000      	movs	r0, #0
 8001060:	f002 fcde 	bl	8003a20 <BSP_LED_Toggle>

	    sprintf(msg, "active menu: %d\r\n", active_menu);    // Convert MEAS_data_ready to a string
 8001064:	4b4e      	ldr	r3, [pc, #312]	@ (80011a0 <main+0x1ec>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	494d      	ldr	r1, [pc, #308]	@ (80011a4 <main+0x1f0>)
 800106e:	4618      	mov	r0, r3
 8001070:	f00a fd9a 	bl	800bba8 <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff f96a 	bl	8000350 <strlen>
 800107c:	4603      	mov	r3, r0
 800107e:	b29a      	uxth	r2, r3
 8001080:	1d39      	adds	r1, r7, #4
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	4844      	ldr	r0, [pc, #272]	@ (8001198 <main+0x1e4>)
 8001088:	f008 fa71 	bl	800956e <HAL_UART_Transmit>

		if (MEAS_data_ready) {			// Show data if new data available
 800108c:	4b46      	ldr	r3, [pc, #280]	@ (80011a8 <main+0x1f4>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d019      	beq.n	80010c8 <main+0x114>
			if(active_menu == MENU_ONE){
 8001094:	4b42      	ldr	r3, [pc, #264]	@ (80011a0 <main+0x1ec>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d112      	bne.n	80010c2 <main+0x10e>
				sprintf(msg, "Showing data\r\n");    // Convert MEAS_data_ready to a string
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	4943      	ldr	r1, [pc, #268]	@ (80011ac <main+0x1f8>)
 80010a0:	4618      	mov	r0, r3
 80010a2:	f00a fd81 	bl	800bba8 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff f951 	bl	8000350 <strlen>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	1d39      	adds	r1, r7, #4
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	4837      	ldr	r0, [pc, #220]	@ (8001198 <main+0x1e4>)
 80010ba:	f008 fa58 	bl	800956e <HAL_UART_Transmit>
				show_data_menu_one();
 80010be:	f001 fc57 	bl	8002970 <show_data_menu_one>
	        }
			MEAS_data_ready = false;
 80010c2:	4b39      	ldr	r3, [pc, #228]	@ (80011a8 <main+0x1f4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
		}

		if(active_menu == MENU_ZERO){
 80010c8:	4b35      	ldr	r3, [pc, #212]	@ (80011a0 <main+0x1ec>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d112      	bne.n	80010f6 <main+0x142>
		    sprintf(msg, "Showing data\r\n");    // Convert MEAS_data_ready to a string
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	4936      	ldr	r1, [pc, #216]	@ (80011ac <main+0x1f8>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f00a fd67 	bl	800bba8 <siprintf>
		    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f937 	bl	8000350 <strlen>
 80010e2:	4603      	mov	r3, r0
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	1d39      	adds	r1, r7, #4
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	482a      	ldr	r0, [pc, #168]	@ (8001198 <main+0x1e4>)
 80010ee:	f008 fa3e 	bl	800956e <HAL_UART_Transmit>
		    show_data_menu_zero();
 80010f2:	f001 fb4d 	bl	8002790 <show_data_menu_zero>
		}



		MENU_check_transition();
 80010f6:	f001 fdd9 	bl	8002cac <MENU_check_transition>

		switch (MENU_get_transition()) {	// Handle user menu choice
 80010fa:	f001 fdcb 	bl	8002c94 <MENU_get_transition>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b06      	cmp	r3, #6
 8001102:	d840      	bhi.n	8001186 <main+0x1d2>
 8001104:	a201      	add	r2, pc, #4	@ (adr r2, 800110c <main+0x158>)
 8001106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110a:	bf00      	nop
 800110c:	08001131 	.word	0x08001131
 8001110:	08001141 	.word	0x08001141
 8001114:	0800115f 	.word	0x0800115f
 8001118:	08001169 	.word	0x08001169
 800111c:	08001173 	.word	0x08001173
 8001120:	0800117d 	.word	0x0800117d
 8001124:	08001129 	.word	0x08001129
		case MENU_NONE:
            active_menu = MENU_NONE;
 8001128:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <main+0x1ec>)
 800112a:	2206      	movs	r2, #6
 800112c:	701a      	strb	r2, [r3, #0]
			break;
 800112e:	e02d      	b.n	800118c <main+0x1d8>
		case MENU_ZERO:
            active_menu = MENU_ZERO;
 8001130:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <main+0x1ec>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
			ADC1_IN14_ADC2_IN15_dual_init();
 8001136:	f000 f9df 	bl	80014f8 <ADC1_IN14_ADC2_IN15_dual_init>
			ADC1_IN14_ADC2_IN15_dual_start();
 800113a:	f000 fce3 	bl	8001b04 <ADC1_IN14_ADC2_IN15_dual_start>
			break;
 800113e:	e025      	b.n	800118c <main+0x1d8>
		case MENU_ONE:
            active_menu = MENU_ONE;
 8001140:	4b17      	ldr	r3, [pc, #92]	@ (80011a0 <main+0x1ec>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
        	if (!MEAS_data_ready){
 8001146:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <main+0x1f4>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	f083 0301 	eor.w	r3, r3, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d01a      	beq.n	800118a <main+0x1d6>
        		ADC1_IN14_ADC2_IN15_dual_init();
 8001154:	f000 f9d0 	bl	80014f8 <ADC1_IN14_ADC2_IN15_dual_init>
        		ADC1_IN14_ADC2_IN15_dual_start();
 8001158:	f000 fcd4 	bl	8001b04 <ADC1_IN14_ADC2_IN15_dual_start>
        	}
			break;
 800115c:	e015      	b.n	800118a <main+0x1d6>
		case MENU_TWO:
			ADC3_IN4_DMA_init();
 800115e:	f000 fb49 	bl	80017f4 <ADC3_IN4_DMA_init>
			ADC3_IN4_DMA_start();
 8001162:	f000 fbd7 	bl	8001914 <ADC3_IN4_DMA_start>
			break;
 8001166:	e011      	b.n	800118c <main+0x1d8>
		case MENU_THREE:
			ADC1_IN13_ADC2_IN5_dual_init();
 8001168:	f000 fbf6 	bl	8001958 <ADC1_IN13_ADC2_IN5_dual_init>
			ADC1_IN13_ADC2_IN5_dual_start();
 800116c:	f000 fca0 	bl	8001ab0 <ADC1_IN13_ADC2_IN5_dual_start>
			break;
 8001170:	e00c      	b.n	800118c <main+0x1d8>
		case MENU_FOUR:
			ADC2_IN13_IN5_scan_init();
 8001172:	f000 fcf1 	bl	8001b58 <ADC2_IN13_IN5_scan_init>
			ADC2_IN13_IN5_scan_start();
 8001176:	f000 fd91 	bl	8001c9c <ADC2_IN13_IN5_scan_start>
			break;
 800117a:	e007      	b.n	800118c <main+0x1d8>
		case MENU_FIVE:
			ADC3_IN13_IN4_scan_init();
 800117c:	f000 fdb0 	bl	8001ce0 <ADC3_IN13_IN4_scan_init>
			ADC3_IN13_IN4_scan_start();
 8001180:	f000 fe50 	bl	8001e24 <ADC3_IN13_IN4_scan_start>
			break;
 8001184:	e002      	b.n	800118c <main+0x1d8>
		default:						// Should never occur
			break;
 8001186:	bf00      	nop
 8001188:	e000      	b.n	800118c <main+0x1d8>
			break;
 800118a:	bf00      	nop
		}

		HAL_Delay(200);					// Wait or sleep
 800118c:	20c8      	movs	r0, #200	@ 0xc8
 800118e:	f004 f9cf 	bl	8005530 <HAL_Delay>
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8001192:	e764      	b.n	800105e <main+0xaa>
 8001194:	0800dec8 	.word	0x0800dec8
 8001198:	20000380 	.word	0x20000380
 800119c:	40020000 	.word	0x40020000
 80011a0:	20000000 	.word	0x20000000
 80011a4:	0800ded8 	.word	0x0800ded8
 80011a8:	200003c0 	.word	0x200003c0
 80011ac:	0800deec 	.word	0x0800deec

080011b0 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b0a0      	sub	sp, #128	@ 0x80
 80011b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80011ba:	2230      	movs	r2, #48	@ 0x30
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f00a fd57 	bl	800bc72 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	2230      	movs	r2, #48	@ 0x30
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f00a fd48 	bl	800bc72 <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4b2e      	ldr	r3, [pc, #184]	@ (80012a0 <SystemClock_Config+0xf0>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ea:	4a2d      	ldr	r2, [pc, #180]	@ (80012a0 <SystemClock_Config+0xf0>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f2:	4b2b      	ldr	r3, [pc, #172]	@ (80012a0 <SystemClock_Config+0xf0>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b28      	ldr	r3, [pc, #160]	@ (80012a4 <SystemClock_Config+0xf4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a27      	ldr	r2, [pc, #156]	@ (80012a4 <SystemClock_Config+0xf4>)
 8001208:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	4b25      	ldr	r3, [pc, #148]	@ (80012a4 <SystemClock_Config+0xf4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800121a:	2301      	movs	r3, #1
 800121c:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800121e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001222:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001224:	2302      	movs	r3, #2
 8001226:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001228:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800122c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800122e:	2308      	movs	r3, #8
 8001230:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001232:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001236:	677b      	str	r3, [r7, #116]	@ 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001238:	2302      	movs	r3, #2
 800123a:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800123c:	2307      	movs	r3, #7
 800123e:	67fb      	str	r3, [r7, #124]	@ 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001240:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001244:	4618      	mov	r0, r3
 8001246:	f006 fbc5 	bl	80079d4 <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800124a:	230f      	movs	r3, #15
 800124c:	63fb      	str	r3, [r7, #60]	@ 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124e:	2302      	movs	r3, #2
 8001250:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001256:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800125a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800125c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001260:	64fb      	str	r3, [r7, #76]	@ 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001262:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001266:	2105      	movs	r1, #5
 8001268:	4618      	mov	r0, r3
 800126a:	f006 fe21 	bl	8007eb0 <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800126e:	2308      	movs	r3, #8
 8001270:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001272:	23c0      	movs	r3, #192	@ 0xc0
 8001274:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001276:	2304      	movs	r3, #4
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800127a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800127e:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	4618      	mov	r0, r3
 8001286:	f007 f833 	bl	80082f0 <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 800128a:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <SystemClock_Config+0xf8>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	4a06      	ldr	r2, [pc, #24]	@ (80012a8 <SystemClock_Config+0xf8>)
 8001290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001294:	6053      	str	r3, [r2, #4]
}
 8001296:	bf00      	nop
 8001298:	3780      	adds	r7, #128	@ 0x80
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40007000 	.word	0x40007000
 80012a8:	40012300 	.word	0x40012300

080012ac <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001360 <gyro_disable+0xb4>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a29      	ldr	r2, [pc, #164]	@ (8001360 <gyro_disable+0xb4>)
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b27      	ldr	r3, [pc, #156]	@ (8001360 <gyro_disable+0xb4>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;	// Reset mode for PC1
 80012ce:	4b25      	ldr	r3, [pc, #148]	@ (8001364 <gyro_disable+0xb8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a24      	ldr	r2, [pc, #144]	@ (8001364 <gyro_disable+0xb8>)
 80012d4:	f023 030c 	bic.w	r3, r3, #12
 80012d8:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;	// Set PC1 as output
 80012da:	4b22      	ldr	r3, [pc, #136]	@ (8001364 <gyro_disable+0xb8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a21      	ldr	r2, [pc, #132]	@ (8001364 <gyro_disable+0xb8>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 80012e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001364 <gyro_disable+0xb8>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001364 <gyro_disable+0xb8>)
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f0:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 80012f2:	200a      	movs	r0, #10
 80012f4:	f004 f91c 	bl	8005530 <HAL_Delay>
	GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;	// Analog PC1 = ADC123_IN11
 80012f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001364 <gyro_disable+0xb8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a19      	ldr	r2, [pc, #100]	@ (8001364 <gyro_disable+0xb8>)
 80012fe:	f043 030c 	orr.w	r3, r3, #12
 8001302:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8001304:	2300      	movs	r3, #0
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <gyro_disable+0xb4>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130c:	4a14      	ldr	r2, [pc, #80]	@ (8001360 <gyro_disable+0xb4>)
 800130e:	f043 0320 	orr.w	r3, r3, #32
 8001312:	6313      	str	r3, [r2, #48]	@ 0x30
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <gyro_disable+0xb4>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001318:	f003 0320 	and.w	r3, r3, #32
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;	// Reset speed of PF8
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <gyro_disable+0xbc>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	4a10      	ldr	r2, [pc, #64]	@ (8001368 <gyro_disable+0xbc>)
 8001326:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800132a:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;	// Reset alternate function of PF8
 800132c:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <gyro_disable+0xbc>)
 800132e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001330:	4a0d      	ldr	r2, [pc, #52]	@ (8001368 <gyro_disable+0xbc>)
 8001332:	f023 030f 	bic.w	r3, r3, #15
 8001336:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;	// Reset pulup/down of PF8
 8001338:	4b0b      	ldr	r3, [pc, #44]	@ (8001368 <gyro_disable+0xbc>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	4a0a      	ldr	r2, [pc, #40]	@ (8001368 <gyro_disable+0xbc>)
 800133e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001342:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 8001344:	200a      	movs	r0, #10
 8001346:	f004 f8f3 	bl	8005530 <HAL_Delay>
	GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos; // Analog mode PF8 = ADC3_IN4
 800134a:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <gyro_disable+0xbc>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a06      	ldr	r2, [pc, #24]	@ (8001368 <gyro_disable+0xbc>)
 8001350:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8001354:	6013      	str	r3, [r2, #0]
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40020800 	.word	0x40020800
 8001368:	40021400 	.word	0x40021400

0800136c <_close>:


// Default function implementations required to prevent build errors.
__attribute__((weak)) void _close(void){}
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <_lseek>:
__attribute__((weak)) void _lseek(void){}
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <_read>:
__attribute__((weak)) void _read(void){}
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <_write>:
__attribute__((weak)) void _write(void){}
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013a8:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	@ (80013f4 <MX_USART1_UART_Init+0x50>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ae:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013dc:	f008 f87a 	bl	80094d4 <HAL_UART_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013e6:	f000 f807 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000380 	.word	0x20000380
 80013f4:	40011000 	.word	0x40011000

080013f8 <Error_Handler>:

void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <Error_Handler+0x8>

08001404 <MX_GPIO_Init>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_GPIO_Init(void)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <MX_GPIO_Init+0x30>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a08      	ldr	r2, [pc, #32]	@ (8001434 <MX_GPIO_Init+0x30>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <MX_GPIO_Init+0x30>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800

08001438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db0b      	blt.n	8001462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	4907      	ldr	r1, [pc, #28]	@ (8001470 <__NVIC_EnableIRQ+0x38>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000e100 	.word	0xe000e100

08001474 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	2b00      	cmp	r3, #0
 8001484:	db12      	blt.n	80014ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	490a      	ldr	r1, [pc, #40]	@ (80014b8 <__NVIC_DisableIRQ+0x44>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	095b      	lsrs	r3, r3, #5
 8001494:	2001      	movs	r0, #1
 8001496:	fa00 f202 	lsl.w	r2, r0, r2
 800149a:	3320      	adds	r3, #32
 800149c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014a0:	f3bf 8f4f 	dsb	sy
}
 80014a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014a6:	f3bf 8f6f 	isb	sy
}
 80014aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100

080014bc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	db0c      	blt.n	80014e8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	f003 021f 	and.w	r2, r3, #31
 80014d4:	4907      	ldr	r1, [pc, #28]	@ (80014f4 <__NVIC_ClearPendingIRQ+0x38>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	2001      	movs	r0, #1
 80014de:	fa00 f202 	lsl.w	r2, r0, r2
 80014e2:	3360      	adds	r3, #96	@ 0x60
 80014e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100

080014f8 <ADC1_IN14_ADC2_IN15_dual_init>:
//}



void ADC1_IN14_ADC2_IN15_dual_init(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
    MEAS_input_count = 2;                // 2 inputs are converted
 80014fe:	4b4b      	ldr	r3, [pc, #300]	@ (800162c <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 8001500:	2202      	movs	r2, #2
 8001502:	601a      	str	r2, [r3, #0]
    __HAL_RCC_ADC1_CLK_ENABLE();        // Enable Clock for ADC1
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	4b49      	ldr	r3, [pc, #292]	@ (8001630 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 800150a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150c:	4a48      	ldr	r2, [pc, #288]	@ (8001630 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 800150e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001512:	6453      	str	r3, [r2, #68]	@ 0x44
 8001514:	4b46      	ldr	r3, [pc, #280]	@ (8001630 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 8001516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_ADC2_CLK_ENABLE();        // Enable Clock for ADC2
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	4b42      	ldr	r3, [pc, #264]	@ (8001630 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 8001526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001528:	4a41      	ldr	r2, [pc, #260]	@ (8001630 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 800152a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800152e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001530:	4b3f      	ldr	r3, [pc, #252]	@ (8001630 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 8001532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001534:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]

    // Common ADC configuration
    ADC->CCR |= ADC_CCR_DMA_1;            // Enable DMA mode 2 = dual DMA
 800153c:	4b3d      	ldr	r3, [pc, #244]	@ (8001634 <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4a3c      	ldr	r2, [pc, #240]	@ (8001634 <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 8001542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001546:	6053      	str	r3, [r2, #4]
    ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2 simultaneous
 8001548:	4b3a      	ldr	r3, [pc, #232]	@ (8001634 <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	4a39      	ldr	r2, [pc, #228]	@ (8001634 <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 800154e:	f043 0306 	orr.w	r3, r3, #6
 8001552:	6053      	str	r3, [r2, #4]

    // ADC1 configuration
    ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);    // Enable external trigger on rising edge
 8001554:	4b38      	ldr	r3, [pc, #224]	@ (8001638 <ADC1_IN14_ADC2_IN15_dual_init+0x140>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	4a37      	ldr	r2, [pc, #220]	@ (8001638 <ADC1_IN14_ADC2_IN15_dual_init+0x140>)
 800155a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800155e:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);   // Timer 2 TRGO event
 8001560:	4b35      	ldr	r3, [pc, #212]	@ (8001638 <ADC1_IN14_ADC2_IN15_dual_init+0x140>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	4a34      	ldr	r2, [pc, #208]	@ (8001638 <ADC1_IN14_ADC2_IN15_dual_init+0x140>)
 8001566:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 800156a:	6093      	str	r3, [r2, #8]
    ADC1->SQR3 |= (14UL << ADC_SQR3_SQ1_Pos);   // Input 14 = first conversion (changed from 13)
 800156c:	4b32      	ldr	r3, [pc, #200]	@ (8001638 <ADC1_IN14_ADC2_IN15_dual_init+0x140>)
 800156e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001570:	4a31      	ldr	r2, [pc, #196]	@ (8001638 <ADC1_IN14_ADC2_IN15_dual_init+0x140>)
 8001572:	f043 030e 	orr.w	r3, r3, #14
 8001576:	6353      	str	r3, [r2, #52]	@ 0x34

    // ADC2 configuration
    ADC2->SQR3 |= (15UL << ADC_SQR3_SQ1_Pos);   // Input 15 = first conversion (changed from 5)
 8001578:	4b30      	ldr	r3, [pc, #192]	@ (800163c <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 800157a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800157c:	4a2f      	ldr	r2, [pc, #188]	@ (800163c <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 800157e:	f043 030f 	orr.w	r3, r3, #15
 8001582:	6353      	str	r3, [r2, #52]	@ 0x34

    // DMA configuration
    __HAL_RCC_DMA2_CLK_ENABLE();        // Enable Clock for DMA2
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	4b29      	ldr	r3, [pc, #164]	@ (8001630 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158c:	4a28      	ldr	r2, [pc, #160]	@ (8001630 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 800158e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001592:	6313      	str	r3, [r2, #48]	@ 0x30
 8001594:	4b26      	ldr	r3, [pc, #152]	@ (8001630 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001598:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
    DMA2_Stream4->CR &= ~DMA_SxCR_EN;    // Disable the DMA stream 4
 80015a0:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a26      	ldr	r2, [pc, #152]	@ (8001640 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015a6:	f023 0301 	bic.w	r3, r3, #1
 80015aa:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }    // Wait for DMA to finish
 80015ac:	bf00      	nop
 80015ae:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f9      	bne.n	80015ae <ADC1_IN14_ADC2_IN15_dual_init+0xb6>

    DMA2->HIFCR |= DMA_HIFCR_CTCIF4;    // Clear transfer complete interrupt flag
 80015ba:	4b22      	ldr	r3, [pc, #136]	@ (8001644 <ADC1_IN14_ADC2_IN15_dual_init+0x14c>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	4a21      	ldr	r2, [pc, #132]	@ (8001644 <ADC1_IN14_ADC2_IN15_dual_init+0x14c>)
 80015c0:	f043 0320 	orr.w	r3, r3, #32
 80015c4:	60d3      	str	r3, [r2, #12]
    DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);    // Select channel 0
 80015c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001640 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001640 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_PL_1;        // Priority high
 80015ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001640 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001640 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d8:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;    // Memory data size = 32 bit
 80015da:	4b19      	ldr	r3, [pc, #100]	@ (8001640 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a18      	ldr	r2, [pc, #96]	@ (8001640 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e4:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;    // Peripheral data size = 32 bit
 80015e6:	4b16      	ldr	r3, [pc, #88]	@ (8001640 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a15      	ldr	r2, [pc, #84]	@ (8001640 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015f0:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_MINC;        // Increment memory address pointer
 80015f2:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a12      	ldr	r2, [pc, #72]	@ (8001640 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 80015f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015fc:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_TCIE;        // Transfer complete interrupt enable
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a0f      	ldr	r2, [pc, #60]	@ (8001640 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 8001604:	f043 0310 	orr.w	r3, r3, #16
 8001608:	6013      	str	r3, [r2, #0]

    DMA2_Stream4->NDTR = ADC_NUMS;        // Number of data items to transfer
 800160a:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 800160c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001610:	605a      	str	r2, [r3, #4]
    DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;    // Peripheral register address
 8001612:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 8001614:	4a0c      	ldr	r2, [pc, #48]	@ (8001648 <ADC1_IN14_ADC2_IN15_dual_init+0x150>)
 8001616:	609a      	str	r2, [r3, #8]
    DMA2_Stream4->M0AR = (uint32_t)ADC_samples;    // Buffer memory location address
 8001618:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 800161a:	4a0c      	ldr	r2, [pc, #48]	@ (800164c <ADC1_IN14_ADC2_IN15_dual_init+0x154>)
 800161c:	60da      	str	r2, [r3, #12]
}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000004 	.word	0x20000004
 8001630:	40023800 	.word	0x40023800
 8001634:	40012300 	.word	0x40012300
 8001638:	40012000 	.word	0x40012000
 800163c:	40012100 	.word	0x40012100
 8001640:	40026470 	.word	0x40026470
 8001644:	40026400 	.word	0x40026400
 8001648:	40012308 	.word	0x40012308
 800164c:	200003c8 	.word	0x200003c8

08001650 <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b2a      	ldr	r3, [pc, #168]	@ (8001704 <MEAS_GPIO_analog_init+0xb4>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a29      	ldr	r2, [pc, #164]	@ (8001704 <MEAS_GPIO_analog_init+0xb4>)
 8001660:	f043 0320 	orr.w	r3, r3, #32
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <MEAS_GPIO_analog_init+0xb4>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0320 	and.w	r3, r3, #32
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
	GPIOF->MODER |= (3UL << GPIO_MODER_MODER6_Pos);	// Analog PF6 = ADC3_IN4
 8001672:	4b25      	ldr	r3, [pc, #148]	@ (8001708 <MEAS_GPIO_analog_init+0xb8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a24      	ldr	r2, [pc, #144]	@ (8001708 <MEAS_GPIO_analog_init+0xb8>)
 8001678:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800167c:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <MEAS_GPIO_analog_init+0xb4>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a1f      	ldr	r2, [pc, #124]	@ (8001704 <MEAS_GPIO_analog_init+0xb4>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b1d      	ldr	r3, [pc, #116]	@ (8001704 <MEAS_GPIO_analog_init+0xb4>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
	GPIOC->MODER |= (3UL << GPIO_MODER_MODER3_Pos);	// Analog PC3 = ADC123_IN13
 800169a:	4b1c      	ldr	r3, [pc, #112]	@ (800170c <MEAS_GPIO_analog_init+0xbc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a1b      	ldr	r2, [pc, #108]	@ (800170c <MEAS_GPIO_analog_init+0xbc>)
 80016a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80016a4:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	4b16      	ldr	r3, [pc, #88]	@ (8001704 <MEAS_GPIO_analog_init+0xb4>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a15      	ldr	r2, [pc, #84]	@ (8001704 <MEAS_GPIO_analog_init+0xb4>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <MEAS_GPIO_analog_init+0xb4>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (3UL << GPIO_MODER_MODER5_Pos);	// Analog PA5 ADC12_IN5
 80016c2:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <MEAS_GPIO_analog_init+0xc0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a12      	ldr	r2, [pc, #72]	@ (8001710 <MEAS_GPIO_analog_init+0xc0>)
 80016c8:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80016cc:	6013      	str	r3, [r2, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <MEAS_GPIO_analog_init+0xb4>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <MEAS_GPIO_analog_init+0xb4>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <MEAS_GPIO_analog_init+0xb4>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
    // Für ADC1_IN14 (PC4) und ADC2_IN15 (PC5)
    GPIOC->MODER |= (3UL << GPIO_MODER_MODER4_Pos) | (3UL << GPIO_MODER_MODER5_Pos);
 80016ea:	4b08      	ldr	r3, [pc, #32]	@ (800170c <MEAS_GPIO_analog_init+0xbc>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a07      	ldr	r2, [pc, #28]	@ (800170c <MEAS_GPIO_analog_init+0xbc>)
 80016f0:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 80016f4:	6013      	str	r3, [r2, #0]
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800
 8001708:	40021400 	.word	0x40021400
 800170c:	40020800 	.word	0x40020800
 8001710:	40020000 	.word	0x40020000

08001714 <DAC_increment>:

/** ***************************************************************************
 * @brief Increment the DAC value and write it to the output
 *
 *****************************************************************************/
void DAC_increment(void) {
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
	DAC_sample += 20;				// Increment DAC output
 8001718:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <DAC_increment+0x30>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3314      	adds	r3, #20
 800171e:	4a09      	ldr	r2, [pc, #36]	@ (8001744 <DAC_increment+0x30>)
 8001720:	6013      	str	r3, [r2, #0]
	if (DAC_sample >= (1UL << ADC_DAC_RES)) { DAC_sample = 0; }	// Go to 0
 8001722:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <DAC_increment+0x30>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800172a:	d302      	bcc.n	8001732 <DAC_increment+0x1e>
 800172c:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <DAC_increment+0x30>)
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
	DAC->DHR12R2 = DAC_sample;		// Write new DAC output value
 8001732:	4a05      	ldr	r2, [pc, #20]	@ (8001748 <DAC_increment+0x34>)
 8001734:	4b03      	ldr	r3, [pc, #12]	@ (8001744 <DAC_increment+0x30>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6153      	str	r3, [r2, #20]
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	20000bc8 	.word	0x20000bc8
 8001748:	40007400 	.word	0x40007400

0800174c <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 8001750:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <ADC_reset+0x38>)
 8001752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001754:	4a0b      	ldr	r2, [pc, #44]	@ (8001784 <ADC_reset+0x38>)
 8001756:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800175a:	6253      	str	r3, [r2, #36]	@ 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 800175c:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <ADC_reset+0x38>)
 800175e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001760:	4a08      	ldr	r2, [pc, #32]	@ (8001784 <ADC_reset+0x38>)
 8001762:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001766:	6253      	str	r3, [r2, #36]	@ 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 8001768:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800

08001788 <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b17      	ldr	r3, [pc, #92]	@ (80017f0 <MEAS_timer_init+0x68>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	4a16      	ldr	r2, [pc, #88]	@ (80017f0 <MEAS_timer_init+0x68>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6413      	str	r3, [r2, #64]	@ 0x40
 800179e:	4b14      	ldr	r3, [pc, #80]	@ (80017f0 <MEAS_timer_init+0x68>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 80017aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017ae:	f240 628f 	movw	r2, #1679	@ 0x68f
 80017b2:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 80017b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017b8:	2209      	movs	r2, #9
 80017ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 80017bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017c6:	f043 0320 	orr.w	r3, r3, #32
 80017ca:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 80017cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 80017dc:	201c      	movs	r0, #28
 80017de:	f7ff fe6d 	bl	80014bc <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 80017e2:	201c      	movs	r0, #28
 80017e4:	f7ff fe28 	bl	8001438 <__NVIC_EnableIRQ>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40023800 	.word	0x40023800

080017f4 <ADC3_IN4_DMA_init>:
 * to memory without CPU intervention.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input is ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN4_DMA_init(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
	MEAS_input_count = 1;				// Only 1 input is converted
 80017fa:	4b3f      	ldr	r3, [pc, #252]	@ (80018f8 <ADC3_IN4_DMA_init+0x104>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 8001800:	2300      	movs	r3, #0
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	4b3d      	ldr	r3, [pc, #244]	@ (80018fc <ADC3_IN4_DMA_init+0x108>)
 8001806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001808:	4a3c      	ldr	r2, [pc, #240]	@ (80018fc <ADC3_IN4_DMA_init+0x108>)
 800180a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800180e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001810:	4b3a      	ldr	r3, [pc, #232]	@ (80018fc <ADC3_IN4_DMA_init+0x108>)
 8001812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ1_Pos);	// Input 4 = first conversion
 800181c:	4b38      	ldr	r3, [pc, #224]	@ (8001900 <ADC3_IN4_DMA_init+0x10c>)
 800181e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001820:	4a37      	ldr	r2, [pc, #220]	@ (8001900 <ADC3_IN4_DMA_init+0x10c>)
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001828:	4b35      	ldr	r3, [pc, #212]	@ (8001900 <ADC3_IN4_DMA_init+0x10c>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4a34      	ldr	r2, [pc, #208]	@ (8001900 <ADC3_IN4_DMA_init+0x10c>)
 800182e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001832:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001834:	4b32      	ldr	r3, [pc, #200]	@ (8001900 <ADC3_IN4_DMA_init+0x10c>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	4a31      	ldr	r2, [pc, #196]	@ (8001900 <ADC3_IN4_DMA_init+0x10c>)
 800183a:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 800183e:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001840:	4b2f      	ldr	r3, [pc, #188]	@ (8001900 <ADC3_IN4_DMA_init+0x10c>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	4a2e      	ldr	r2, [pc, #184]	@ (8001900 <ADC3_IN4_DMA_init+0x10c>)
 8001846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800184a:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 800184c:	2300      	movs	r3, #0
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	4b2a      	ldr	r3, [pc, #168]	@ (80018fc <ADC3_IN4_DMA_init+0x108>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001854:	4a29      	ldr	r2, [pc, #164]	@ (80018fc <ADC3_IN4_DMA_init+0x108>)
 8001856:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800185a:	6313      	str	r3, [r2, #48]	@ 0x30
 800185c:	4b27      	ldr	r3, [pc, #156]	@ (80018fc <ADC3_IN4_DMA_init+0x108>)
 800185e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001860:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 8001868:	4b26      	ldr	r3, [pc, #152]	@ (8001904 <ADC3_IN4_DMA_init+0x110>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a25      	ldr	r2, [pc, #148]	@ (8001904 <ADC3_IN4_DMA_init+0x110>)
 800186e:	f023 0301 	bic.w	r3, r3, #1
 8001872:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001874:	bf00      	nop
 8001876:	4b23      	ldr	r3, [pc, #140]	@ (8001904 <ADC3_IN4_DMA_init+0x110>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f9      	bne.n	8001876 <ADC3_IN4_DMA_init+0x82>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 8001882:	4b21      	ldr	r3, [pc, #132]	@ (8001908 <ADC3_IN4_DMA_init+0x114>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	4a20      	ldr	r2, [pc, #128]	@ (8001908 <ADC3_IN4_DMA_init+0x114>)
 8001888:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800188c:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 800188e:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <ADC3_IN4_DMA_init+0x110>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1c      	ldr	r2, [pc, #112]	@ (8001904 <ADC3_IN4_DMA_init+0x110>)
 8001894:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001898:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 800189a:	4b1a      	ldr	r3, [pc, #104]	@ (8001904 <ADC3_IN4_DMA_init+0x110>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a19      	ldr	r2, [pc, #100]	@ (8001904 <ADC3_IN4_DMA_init+0x110>)
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a4:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 80018a6:	4b17      	ldr	r3, [pc, #92]	@ (8001904 <ADC3_IN4_DMA_init+0x110>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a16      	ldr	r2, [pc, #88]	@ (8001904 <ADC3_IN4_DMA_init+0x110>)
 80018ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b0:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 80018b2:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <ADC3_IN4_DMA_init+0x110>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a13      	ldr	r2, [pc, #76]	@ (8001904 <ADC3_IN4_DMA_init+0x110>)
 80018b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018bc:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <ADC3_IN4_DMA_init+0x110>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a10      	ldr	r2, [pc, #64]	@ (8001904 <ADC3_IN4_DMA_init+0x110>)
 80018c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018c8:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 80018ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <ADC3_IN4_DMA_init+0x110>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001904 <ADC3_IN4_DMA_init+0x110>)
 80018d0:	f043 0310 	orr.w	r3, r3, #16
 80018d4:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = ADC_NUMS;		// Number of data items to transfer
 80018d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <ADC3_IN4_DMA_init+0x110>)
 80018d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018dc:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 80018de:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <ADC3_IN4_DMA_init+0x110>)
 80018e0:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <ADC3_IN4_DMA_init+0x118>)
 80018e2:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 80018e4:	4b07      	ldr	r3, [pc, #28]	@ (8001904 <ADC3_IN4_DMA_init+0x110>)
 80018e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001910 <ADC3_IN4_DMA_init+0x11c>)
 80018e8:	60da      	str	r2, [r3, #12]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000004 	.word	0x20000004
 80018fc:	40023800 	.word	0x40023800
 8001900:	40012200 	.word	0x40012200
 8001904:	40026428 	.word	0x40026428
 8001908:	40026400 	.word	0x40026400
 800190c:	4001224c 	.word	0x4001224c
 8001910:	200003c8 	.word	0x200003c8

08001914 <ADC3_IN4_DMA_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_IN4_DMA_start(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 8001918:	4b0d      	ldr	r3, [pc, #52]	@ (8001950 <ADC3_IN4_DMA_start+0x3c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0c      	ldr	r2, [pc, #48]	@ (8001950 <ADC3_IN4_DMA_start+0x3c>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 8001924:	2039      	movs	r0, #57	@ 0x39
 8001926:	f7ff fdc9 	bl	80014bc <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 800192a:	2039      	movs	r0, #57	@ 0x39
 800192c:	f7ff fd84 	bl	8001438 <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8001930:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <ADC3_IN4_DMA_start+0x40>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a07      	ldr	r2, [pc, #28]	@ (8001954 <ADC3_IN4_DMA_start+0x40>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 800193c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40026428 	.word	0x40026428
 8001954:	40012200 	.word	0x40012200

08001958 <ADC1_IN13_ADC2_IN5_dual_init>:
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input used with ADC1 is ADC123_IN13 = GPIO PC3
 * @n The input used with ADC2 is ADC12_IN5 = GPIO PA5
 *****************************************************************************/
void ADC1_IN13_ADC2_IN5_dual_init(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 800195e:	4b4b      	ldr	r3, [pc, #300]	@ (8001a8c <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8001960:	2202      	movs	r2, #2
 8001962:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC1_CLK_ENABLE();		// Enable Clock for ADC1
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	4b49      	ldr	r3, [pc, #292]	@ (8001a90 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 800196a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196c:	4a48      	ldr	r2, [pc, #288]	@ (8001a90 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 800196e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001972:	6453      	str	r3, [r2, #68]	@ 0x44
 8001974:	4b46      	ldr	r3, [pc, #280]	@ (8001a90 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 8001976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	4b42      	ldr	r3, [pc, #264]	@ (8001a90 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 8001986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001988:	4a41      	ldr	r2, [pc, #260]	@ (8001a90 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 800198a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800198e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001990:	4b3f      	ldr	r3, [pc, #252]	@ (8001a90 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 8001992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
	ADC->CCR |= ADC_CCR_DMA_1;			// Enable DMA mode 2 = dual DMA
 800199c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a94 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4a3c      	ldr	r2, [pc, #240]	@ (8001a94 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 80019a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019a6:	6053      	str	r3, [r2, #4]
	ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2 simultan.
 80019a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001a94 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	4a39      	ldr	r2, [pc, #228]	@ (8001a94 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 80019ae:	f043 0306 	orr.w	r3, r3, #6
 80019b2:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 80019b4:	4b38      	ldr	r3, [pc, #224]	@ (8001a98 <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	4a37      	ldr	r2, [pc, #220]	@ (8001a98 <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 80019ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019be:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 80019c0:	4b35      	ldr	r3, [pc, #212]	@ (8001a98 <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	4a34      	ldr	r2, [pc, #208]	@ (8001a98 <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 80019c6:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 80019ca:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 80019cc:	4b32      	ldr	r3, [pc, #200]	@ (8001a98 <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 80019ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d0:	4a31      	ldr	r2, [pc, #196]	@ (8001a98 <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 80019d2:	f043 030d 	orr.w	r3, r3, #13
 80019d6:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->SQR3 |= (5UL << ADC_SQR3_SQ1_Pos);	// Input 5 = first conversion
 80019d8:	4b30      	ldr	r3, [pc, #192]	@ (8001a9c <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 80019da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019dc:	4a2f      	ldr	r2, [pc, #188]	@ (8001a9c <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 80019de:	f043 0305 	orr.w	r3, r3, #5
 80019e2:	6353      	str	r3, [r2, #52]	@ 0x34
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 80019e4:	2300      	movs	r3, #0
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	4b29      	ldr	r3, [pc, #164]	@ (8001a90 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ec:	4a28      	ldr	r2, [pc, #160]	@ (8001a90 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 80019ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f4:	4b26      	ldr	r3, [pc, #152]	@ (8001a90 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
	DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 4
 8001a00:	4b27      	ldr	r3, [pc, #156]	@ (8001aa0 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a26      	ldr	r2, [pc, #152]	@ (8001aa0 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a06:	f023 0301 	bic.w	r3, r3, #1
 8001a0a:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001a0c:	bf00      	nop
 8001a0e:	4b24      	ldr	r3, [pc, #144]	@ (8001aa0 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f9      	bne.n	8001a0e <ADC1_IN13_ADC2_IN5_dual_init+0xb6>
	DMA2->HIFCR |= DMA_HIFCR_CTCIF4;	// Clear transfer complete interrupt fl.
 8001a1a:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <ADC1_IN13_ADC2_IN5_dual_init+0x14c>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	4a21      	ldr	r2, [pc, #132]	@ (8001aa4 <ADC1_IN13_ADC2_IN5_dual_init+0x14c>)
 8001a20:	f043 0320 	orr.w	r3, r3, #32
 8001a24:	60d3      	str	r3, [r2, #12]
	DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);	// Select channel 0
 8001a26:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa0 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a28:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa0 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PL_1;		// Priority high
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa0 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa0 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a38:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8001a3a:	4b19      	ldr	r3, [pc, #100]	@ (8001aa0 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a18      	ldr	r2, [pc, #96]	@ (8001aa0 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a44:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001a46:	4b16      	ldr	r3, [pc, #88]	@ (8001aa0 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a15      	ldr	r2, [pc, #84]	@ (8001aa0 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a50:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001a52:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a12      	ldr	r2, [pc, #72]	@ (8001aa0 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a5c:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8001a5e:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa0 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a64:	f043 0310 	orr.w	r3, r3, #16
 8001a68:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->NDTR = ADC_NUMS;		// Number of data items to transfer
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa0 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a70:	605a      	str	r2, [r3, #4]
	DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;	// Peripheral register address
 8001a72:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a74:	4a0c      	ldr	r2, [pc, #48]	@ (8001aa8 <ADC1_IN13_ADC2_IN5_dual_init+0x150>)
 8001a76:	609a      	str	r2, [r3, #8]
	DMA2_Stream4->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001a78:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001aac <ADC1_IN13_ADC2_IN5_dual_init+0x154>)
 8001a7c:	60da      	str	r2, [r3, #12]
}
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000004 	.word	0x20000004
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40012300 	.word	0x40012300
 8001a98:	40012000 	.word	0x40012000
 8001a9c:	40012100 	.word	0x40012100
 8001aa0:	40026470 	.word	0x40026470
 8001aa4:	40026400 	.word	0x40026400
 8001aa8:	40012308 	.word	0x40012308
 8001aac:	200003c8 	.word	0x200003c8

08001ab0 <ADC1_IN13_ADC2_IN5_dual_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC1_IN13_ADC2_IN5_dual_start(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	DMA2_Stream4->CR |= DMA_SxCR_EN;	// Enable DMA
 8001ab4:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <ADC1_IN13_ADC2_IN5_dual_start+0x48>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0f      	ldr	r2, [pc, #60]	@ (8001af8 <ADC1_IN13_ADC2_IN5_dual_start+0x48>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);	// Clear pending DMA interrupt
 8001ac0:	203c      	movs	r0, #60	@ 0x3c
 8001ac2:	f7ff fcfb 	bl	80014bc <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);	// Enable DMA interrupt in the NVIC
 8001ac6:	203c      	movs	r0, #60	@ 0x3c
 8001ac8:	f7ff fcb6 	bl	8001438 <__NVIC_EnableIRQ>
	ADC1->CR2 |= ADC_CR2_ADON;			// Enable ADC1
 8001acc:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <ADC1_IN13_ADC2_IN5_dual_start+0x4c>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8001afc <ADC1_IN13_ADC2_IN5_dual_start+0x4c>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 8001ad8:	4b09      	ldr	r3, [pc, #36]	@ (8001b00 <ADC1_IN13_ADC2_IN5_dual_start+0x50>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4a08      	ldr	r2, [pc, #32]	@ (8001b00 <ADC1_IN13_ADC2_IN5_dual_start+0x50>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001ae4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6013      	str	r3, [r2, #0]
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40026470 	.word	0x40026470
 8001afc:	40012000 	.word	0x40012000
 8001b00:	40012100 	.word	0x40012100

08001b04 <ADC1_IN14_ADC2_IN15_dual_start>:

void ADC1_IN14_ADC2_IN15_dual_start(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
    DMA2_Stream4->CR |= DMA_SxCR_EN;          // DMA-Stream aktivieren
 8001b08:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <ADC1_IN14_ADC2_IN15_dual_start+0x48>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001b4c <ADC1_IN14_ADC2_IN15_dual_start+0x48>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6013      	str	r3, [r2, #0]
    NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);  // Ausstehende DMA-Interrupts löschen
 8001b14:	203c      	movs	r0, #60	@ 0x3c
 8001b16:	f7ff fcd1 	bl	80014bc <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(DMA2_Stream4_IRQn);        // DMA-Interrupt im NVIC aktivieren
 8001b1a:	203c      	movs	r0, #60	@ 0x3c
 8001b1c:	f7ff fc8c 	bl	8001438 <__NVIC_EnableIRQ>

    ADC1->CR2 |= ADC_CR2_ADON;                // ADC1 einschalten
 8001b20:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <ADC1_IN14_ADC2_IN15_dual_start+0x4c>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4a0a      	ldr	r2, [pc, #40]	@ (8001b50 <ADC1_IN14_ADC2_IN15_dual_start+0x4c>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	6093      	str	r3, [r2, #8]
    ADC2->CR2 |= ADC_CR2_ADON;                // ADC2 einschalten
 8001b2c:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <ADC1_IN14_ADC2_IN15_dual_start+0x50>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4a08      	ldr	r2, [pc, #32]	@ (8001b54 <ADC1_IN14_ADC2_IN15_dual_start+0x50>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6093      	str	r3, [r2, #8]

    TIM2->CR1 |= TIM_CR1_CEN;                 // Timer starten
 8001b38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6013      	str	r3, [r2, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40026470 	.word	0x40026470
 8001b50:	40012000 	.word	0x40012000
 8001b54:	40012100 	.word	0x40012100

08001b58 <ADC2_IN13_IN5_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC12_IN5 = GPIO PA5
 *****************************************************************************/
void ADC2_IN13_IN5_scan_init(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 8001b5e:	4b48      	ldr	r3, [pc, #288]	@ (8001c80 <ADC2_IN13_IN5_scan_init+0x128>)
 8001b60:	2202      	movs	r2, #2
 8001b62:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 8001b64:	2300      	movs	r3, #0
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	4b46      	ldr	r3, [pc, #280]	@ (8001c84 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6c:	4a45      	ldr	r2, [pc, #276]	@ (8001c84 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001b6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b72:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b74:	4b43      	ldr	r3, [pc, #268]	@ (8001c84 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
	ADC2->SQR1 |= (1UL << ADC_SQR1_L_Pos);			// Convert 2 inputs
 8001b80:	4b41      	ldr	r3, [pc, #260]	@ (8001c88 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b84:	4a40      	ldr	r2, [pc, #256]	@ (8001c88 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC2->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8001b8c:	4b3e      	ldr	r3, [pc, #248]	@ (8001c88 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b90:	4a3d      	ldr	r2, [pc, #244]	@ (8001c88 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b92:	f043 030d 	orr.w	r3, r3, #13
 8001b96:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->SQR3 |= (5UL << ADC_SQR3_SQ2_Pos);	// Input 5 = second conversion
 8001b98:	4b3b      	ldr	r3, [pc, #236]	@ (8001c88 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b9c:	4a3a      	ldr	r2, [pc, #232]	@ (8001c88 <ADC2_IN13_IN5_scan_init+0x130>)
 8001b9e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001ba2:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 8001ba4:	4b38      	ldr	r3, [pc, #224]	@ (8001c88 <ADC2_IN13_IN5_scan_init+0x130>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	4a37      	ldr	r2, [pc, #220]	@ (8001c88 <ADC2_IN13_IN5_scan_init+0x130>)
 8001baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bae:	6053      	str	r3, [r2, #4]
	ADC2->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001bb0:	4b35      	ldr	r3, [pc, #212]	@ (8001c88 <ADC2_IN13_IN5_scan_init+0x130>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4a34      	ldr	r2, [pc, #208]	@ (8001c88 <ADC2_IN13_IN5_scan_init+0x130>)
 8001bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bba:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001bbc:	4b32      	ldr	r3, [pc, #200]	@ (8001c88 <ADC2_IN13_IN5_scan_init+0x130>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	4a31      	ldr	r2, [pc, #196]	@ (8001c88 <ADC2_IN13_IN5_scan_init+0x130>)
 8001bc2:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8001bc6:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001bc8:	4b2f      	ldr	r3, [pc, #188]	@ (8001c88 <ADC2_IN13_IN5_scan_init+0x130>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8001c88 <ADC2_IN13_IN5_scan_init+0x130>)
 8001bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd2:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c84 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bdc:	4a29      	ldr	r2, [pc, #164]	@ (8001c84 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001bde:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001be2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be4:	4b27      	ldr	r3, [pc, #156]	@ (8001c84 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 3
 8001bf0:	4b26      	ldr	r3, [pc, #152]	@ (8001c8c <ADC2_IN13_IN5_scan_init+0x134>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a25      	ldr	r2, [pc, #148]	@ (8001c8c <ADC2_IN13_IN5_scan_init+0x134>)
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001bfc:	bf00      	nop
 8001bfe:	4b23      	ldr	r3, [pc, #140]	@ (8001c8c <ADC2_IN13_IN5_scan_init+0x134>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f9      	bne.n	8001bfe <ADC2_IN13_IN5_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF3;	// Clear transfer complete interrupt fl.
 8001c0a:	4b21      	ldr	r3, [pc, #132]	@ (8001c90 <ADC2_IN13_IN5_scan_init+0x138>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	4a20      	ldr	r2, [pc, #128]	@ (8001c90 <ADC2_IN13_IN5_scan_init+0x138>)
 8001c10:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001c14:	6093      	str	r3, [r2, #8]
	DMA2_Stream3->CR |= (1UL << DMA_SxCR_CHSEL_Pos);	// Select channel 1
 8001c16:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <ADC2_IN13_IN5_scan_init+0x134>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001c8c <ADC2_IN13_IN5_scan_init+0x134>)
 8001c1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c20:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_PL_1;		// Priority high
 8001c22:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <ADC2_IN13_IN5_scan_init+0x134>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a19      	ldr	r2, [pc, #100]	@ (8001c8c <ADC2_IN13_IN5_scan_init+0x134>)
 8001c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c2c:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8001c2e:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <ADC2_IN13_IN5_scan_init+0x134>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a16      	ldr	r2, [pc, #88]	@ (8001c8c <ADC2_IN13_IN5_scan_init+0x134>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c38:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001c3a:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <ADC2_IN13_IN5_scan_init+0x134>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a13      	ldr	r2, [pc, #76]	@ (8001c8c <ADC2_IN13_IN5_scan_init+0x134>)
 8001c40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c44:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001c46:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <ADC2_IN13_IN5_scan_init+0x134>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a10      	ldr	r2, [pc, #64]	@ (8001c8c <ADC2_IN13_IN5_scan_init+0x134>)
 8001c4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c50:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8001c52:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <ADC2_IN13_IN5_scan_init+0x134>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a0d      	ldr	r2, [pc, #52]	@ (8001c8c <ADC2_IN13_IN5_scan_init+0x134>)
 8001c58:	f043 0310 	orr.w	r3, r3, #16
 8001c5c:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <ADC2_IN13_IN5_scan_init+0x134>)
 8001c60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c64:	605a      	str	r2, [r3, #4]
	DMA2_Stream3->PAR = (uint32_t)&ADC2->DR;	// Peripheral register address
 8001c66:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <ADC2_IN13_IN5_scan_init+0x134>)
 8001c68:	4a0a      	ldr	r2, [pc, #40]	@ (8001c94 <ADC2_IN13_IN5_scan_init+0x13c>)
 8001c6a:	609a      	str	r2, [r3, #8]
	DMA2_Stream3->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001c6c:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <ADC2_IN13_IN5_scan_init+0x134>)
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c98 <ADC2_IN13_IN5_scan_init+0x140>)
 8001c70:	60da      	str	r2, [r3, #12]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000004 	.word	0x20000004
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40012100 	.word	0x40012100
 8001c8c:	40026458 	.word	0x40026458
 8001c90:	40026400 	.word	0x40026400
 8001c94:	4001214c 	.word	0x4001214c
 8001c98:	200003c8 	.word	0x200003c8

08001c9c <ADC2_IN13_IN5_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC2_IN13_IN5_scan_start(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
	DMA2_Stream3->CR |= DMA_SxCR_EN;	// Enable DMA
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <ADC2_IN13_IN5_scan_start+0x3c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8001cd8 <ADC2_IN13_IN5_scan_start+0x3c>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);	// Clear pending DMA interrupt
 8001cac:	203b      	movs	r0, #59	@ 0x3b
 8001cae:	f7ff fc05 	bl	80014bc <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream3_IRQn);	// Enable DMA interrupt in the NVIC
 8001cb2:	203b      	movs	r0, #59	@ 0x3b
 8001cb4:	f7ff fbc0 	bl	8001438 <__NVIC_EnableIRQ>
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 8001cb8:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <ADC2_IN13_IN5_scan_start+0x40>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	4a07      	ldr	r2, [pc, #28]	@ (8001cdc <ADC2_IN13_IN5_scan_start+0x40>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001cc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40026458 	.word	0x40026458
 8001cdc:	40012100 	.word	0x40012100

08001ce0 <ADC3_IN13_IN4_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN13_IN4_scan_init(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 8001ce6:	4b48      	ldr	r3, [pc, #288]	@ (8001e08 <ADC3_IN13_IN4_scan_init+0x128>)
 8001ce8:	2202      	movs	r2, #2
 8001cea:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 8001cec:	2300      	movs	r3, #0
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	4b46      	ldr	r3, [pc, #280]	@ (8001e0c <ADC3_IN13_IN4_scan_init+0x12c>)
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf4:	4a45      	ldr	r2, [pc, #276]	@ (8001e0c <ADC3_IN13_IN4_scan_init+0x12c>)
 8001cf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cfa:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfc:	4b43      	ldr	r3, [pc, #268]	@ (8001e0c <ADC3_IN13_IN4_scan_init+0x12c>)
 8001cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR1 |= (1UL << ADC_SQR1_L_Pos);		// Convert 2 inputs
 8001d08:	4b41      	ldr	r3, [pc, #260]	@ (8001e10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0c:	4a40      	ldr	r2, [pc, #256]	@ (8001e10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001d0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d12:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC3->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8001d14:	4b3e      	ldr	r3, [pc, #248]	@ (8001e10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d18:	4a3d      	ldr	r2, [pc, #244]	@ (8001e10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001d1a:	f043 030d 	orr.w	r3, r3, #13
 8001d1e:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ2_Pos);	// Input 4 = second conversion
 8001d20:	4b3b      	ldr	r3, [pc, #236]	@ (8001e10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d24:	4a3a      	ldr	r2, [pc, #232]	@ (8001e10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d2a:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 8001d2c:	4b38      	ldr	r3, [pc, #224]	@ (8001e10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4a37      	ldr	r2, [pc, #220]	@ (8001e10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d36:	6053      	str	r3, [r2, #4]
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001d38:	4b35      	ldr	r3, [pc, #212]	@ (8001e10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4a34      	ldr	r2, [pc, #208]	@ (8001e10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001d3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001d44:	4b32      	ldr	r3, [pc, #200]	@ (8001e10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	4a31      	ldr	r2, [pc, #196]	@ (8001e10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001d4a:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8001d4e:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001d50:	4b2f      	ldr	r3, [pc, #188]	@ (8001e10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	4a2e      	ldr	r2, [pc, #184]	@ (8001e10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001d56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d5a:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	4b2a      	ldr	r3, [pc, #168]	@ (8001e0c <ADC3_IN13_IN4_scan_init+0x12c>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d64:	4a29      	ldr	r2, [pc, #164]	@ (8001e0c <ADC3_IN13_IN4_scan_init+0x12c>)
 8001d66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6c:	4b27      	ldr	r3, [pc, #156]	@ (8001e0c <ADC3_IN13_IN4_scan_init+0x12c>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 8001d78:	4b26      	ldr	r3, [pc, #152]	@ (8001e14 <ADC3_IN13_IN4_scan_init+0x134>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a25      	ldr	r2, [pc, #148]	@ (8001e14 <ADC3_IN13_IN4_scan_init+0x134>)
 8001d7e:	f023 0301 	bic.w	r3, r3, #1
 8001d82:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001d84:	bf00      	nop
 8001d86:	4b23      	ldr	r3, [pc, #140]	@ (8001e14 <ADC3_IN13_IN4_scan_init+0x134>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f9      	bne.n	8001d86 <ADC3_IN13_IN4_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 8001d92:	4b21      	ldr	r3, [pc, #132]	@ (8001e18 <ADC3_IN13_IN4_scan_init+0x138>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	4a20      	ldr	r2, [pc, #128]	@ (8001e18 <ADC3_IN13_IN4_scan_init+0x138>)
 8001d98:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d9c:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e14 <ADC3_IN13_IN4_scan_init+0x134>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e14 <ADC3_IN13_IN4_scan_init+0x134>)
 8001da4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001da8:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 8001daa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e14 <ADC3_IN13_IN4_scan_init+0x134>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a19      	ldr	r2, [pc, #100]	@ (8001e14 <ADC3_IN13_IN4_scan_init+0x134>)
 8001db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db4:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8001db6:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <ADC3_IN13_IN4_scan_init+0x134>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a16      	ldr	r2, [pc, #88]	@ (8001e14 <ADC3_IN13_IN4_scan_init+0x134>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc0:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001dc2:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <ADC3_IN13_IN4_scan_init+0x134>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a13      	ldr	r2, [pc, #76]	@ (8001e14 <ADC3_IN13_IN4_scan_init+0x134>)
 8001dc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dcc:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001dce:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <ADC3_IN13_IN4_scan_init+0x134>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a10      	ldr	r2, [pc, #64]	@ (8001e14 <ADC3_IN13_IN4_scan_init+0x134>)
 8001dd4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dd8:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8001dda:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <ADC3_IN13_IN4_scan_init+0x134>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a0d      	ldr	r2, [pc, #52]	@ (8001e14 <ADC3_IN13_IN4_scan_init+0x134>)
 8001de0:	f043 0310 	orr.w	r3, r3, #16
 8001de4:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 8001de6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <ADC3_IN13_IN4_scan_init+0x134>)
 8001de8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dec:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 8001dee:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <ADC3_IN13_IN4_scan_init+0x134>)
 8001df0:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <ADC3_IN13_IN4_scan_init+0x13c>)
 8001df2:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001df4:	4b07      	ldr	r3, [pc, #28]	@ (8001e14 <ADC3_IN13_IN4_scan_init+0x134>)
 8001df6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e20 <ADC3_IN13_IN4_scan_init+0x140>)
 8001df8:	60da      	str	r2, [r3, #12]

}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000004 	.word	0x20000004
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40012200 	.word	0x40012200
 8001e14:	40026428 	.word	0x40026428
 8001e18:	40026400 	.word	0x40026400
 8001e1c:	4001224c 	.word	0x4001224c
 8001e20:	200003c8 	.word	0x200003c8

08001e24 <ADC3_IN13_IN4_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_IN13_IN4_scan_start(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 8001e28:	4b0d      	ldr	r3, [pc, #52]	@ (8001e60 <ADC3_IN13_IN4_scan_start+0x3c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e60 <ADC3_IN13_IN4_scan_start+0x3c>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 8001e34:	2039      	movs	r0, #57	@ 0x39
 8001e36:	f7ff fb41 	bl	80014bc <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 8001e3a:	2039      	movs	r0, #57	@ 0x39
 8001e3c:	f7ff fafc 	bl	8001438 <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8001e40:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <ADC3_IN13_IN4_scan_start+0x40>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	4a07      	ldr	r2, [pc, #28]	@ (8001e64 <ADC3_IN13_IN4_scan_start+0x40>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001e4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6013      	str	r3, [r2, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40026428 	.word	0x40026428
 8001e64:	40012200 	.word	0x40012200

08001e68 <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 8001e6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e76:	f023 0301 	bic.w	r3, r3, #1
 8001e7a:	6113      	str	r3, [r2, #16]
	if (DAC_active) {
 8001e7c:	4b03      	ldr	r3, [pc, #12]	@ (8001e8c <TIM2_IRQHandler+0x24>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <TIM2_IRQHandler+0x20>
		DAC_increment();
 8001e84:	f7ff fc46 	bl	8001714 <DAC_increment>
	}
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	200003c1 	.word	0x200003c1

08001e90 <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 8001e94:	4b14      	ldr	r3, [pc, #80]	@ (8001ee8 <ADC_IRQHandler+0x58>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d020      	beq.n	8001ee2 <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 8001ea0:	4911      	ldr	r1, [pc, #68]	@ (8001ee8 <ADC_IRQHandler+0x58>)
 8001ea2:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <ADC_IRQHandler+0x5c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	4810      	ldr	r0, [pc, #64]	@ (8001eec <ADC_IRQHandler+0x5c>)
 8001eaa:	6002      	str	r2, [r0, #0]
 8001eac:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001eae:	4910      	ldr	r1, [pc, #64]	@ (8001ef0 <ADC_IRQHandler+0x60>)
 8001eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001eec <ADC_IRQHandler+0x5c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2bff      	cmp	r3, #255	@ 0xff
 8001eba:	d912      	bls.n	8001ee2 <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 8001ebc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ec6:	f023 0301 	bic.w	r3, r3, #1
 8001eca:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <ADC_IRQHandler+0x58>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4a05      	ldr	r2, [pc, #20]	@ (8001ee8 <ADC_IRQHandler+0x58>)
 8001ed2:	f023 0301 	bic.w	r3, r3, #1
 8001ed6:	6093      	str	r3, [r2, #8]
			ADC_reset();
 8001ed8:	f7ff fc38 	bl	800174c <ADC_reset>
			MEAS_data_ready = true;
 8001edc:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <ADC_IRQHandler+0x64>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40012200 	.word	0x40012200
 8001eec:	200003c4 	.word	0x200003c4
 8001ef0:	200003c8 	.word	0x200003c8
 8001ef4:	200003c0 	.word	0x200003c0

08001ef8 <DMA2_Stream1_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF1) {	// Stream1 transfer compl. interrupt f.
 8001efc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f70 <DMA2_Stream1_IRQHandler+0x78>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d031      	beq.n	8001f6c <DMA2_Stream1_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream1_IRQn);	// Disable DMA interrupt in the NVIC
 8001f08:	2039      	movs	r0, #57	@ 0x39
 8001f0a:	f7ff fab3 	bl	8001474 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);// Clear pending DMA interrupt
 8001f0e:	2039      	movs	r0, #57	@ 0x39
 8001f10:	f7ff fad4 	bl	80014bc <__NVIC_ClearPendingIRQ>
		DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8001f14:	4b17      	ldr	r3, [pc, #92]	@ (8001f74 <DMA2_Stream1_IRQHandler+0x7c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a16      	ldr	r2, [pc, #88]	@ (8001f74 <DMA2_Stream1_IRQHandler+0x7c>)
 8001f1a:	f023 0301 	bic.w	r3, r3, #1
 8001f1e:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001f20:	bf00      	nop
 8001f22:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <DMA2_Stream1_IRQHandler+0x7c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f9      	bne.n	8001f22 <DMA2_Stream1_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF1;// Clear transfer complete interrupt fl.
 8001f2e:	4b10      	ldr	r3, [pc, #64]	@ (8001f70 <DMA2_Stream1_IRQHandler+0x78>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	4a0f      	ldr	r2, [pc, #60]	@ (8001f70 <DMA2_Stream1_IRQHandler+0x78>)
 8001f34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f38:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001f3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	6013      	str	r3, [r2, #0]
		ADC3->CR2 &= ~ADC_CR2_ADON;		// Disable ADC3
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <DMA2_Stream1_IRQHandler+0x80>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f78 <DMA2_Stream1_IRQHandler+0x80>)
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	6093      	str	r3, [r2, #8]
		ADC3->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 8001f56:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <DMA2_Stream1_IRQHandler+0x80>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	4a07      	ldr	r2, [pc, #28]	@ (8001f78 <DMA2_Stream1_IRQHandler+0x80>)
 8001f5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f60:	6093      	str	r3, [r2, #8]
		ADC_reset();
 8001f62:	f7ff fbf3 	bl	800174c <ADC_reset>
		MEAS_data_ready = true;
 8001f66:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <DMA2_Stream1_IRQHandler+0x84>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
	}
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40026400 	.word	0x40026400
 8001f74:	40026428 	.word	0x40026428
 8001f78:	40012200 	.word	0x40012200
 8001f7c:	200003c0 	.word	0x200003c0

08001f80 <DMA2_Stream3_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream3_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF3) {	// Stream3 transfer compl. interrupt f.
 8001f84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff8 <DMA2_Stream3_IRQHandler+0x78>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d031      	beq.n	8001ff4 <DMA2_Stream3_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream3_IRQn);	// Disable DMA interrupt in the NVIC
 8001f90:	203b      	movs	r0, #59	@ 0x3b
 8001f92:	f7ff fa6f 	bl	8001474 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);// Clear pending DMA interrupt
 8001f96:	203b      	movs	r0, #59	@ 0x3b
 8001f98:	f7ff fa90 	bl	80014bc <__NVIC_ClearPendingIRQ>
		DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8001f9c:	4b17      	ldr	r3, [pc, #92]	@ (8001ffc <DMA2_Stream3_IRQHandler+0x7c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a16      	ldr	r2, [pc, #88]	@ (8001ffc <DMA2_Stream3_IRQHandler+0x7c>)
 8001fa2:	f023 0301 	bic.w	r3, r3, #1
 8001fa6:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001fa8:	bf00      	nop
 8001faa:	4b14      	ldr	r3, [pc, #80]	@ (8001ffc <DMA2_Stream3_IRQHandler+0x7c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f9      	bne.n	8001faa <DMA2_Stream3_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF3;// Clear transfer complete interrupt fl.
 8001fb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ff8 <DMA2_Stream3_IRQHandler+0x78>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff8 <DMA2_Stream3_IRQHandler+0x78>)
 8001fbc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001fc0:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001fc2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fcc:	f023 0301 	bic.w	r3, r3, #1
 8001fd0:	6013      	str	r3, [r2, #0]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <DMA2_Stream3_IRQHandler+0x80>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002000 <DMA2_Stream3_IRQHandler+0x80>)
 8001fd8:	f023 0301 	bic.w	r3, r3, #1
 8001fdc:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 8001fde:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <DMA2_Stream3_IRQHandler+0x80>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	4a07      	ldr	r2, [pc, #28]	@ (8002000 <DMA2_Stream3_IRQHandler+0x80>)
 8001fe4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fe8:	6093      	str	r3, [r2, #8]
		ADC_reset();
 8001fea:	f7ff fbaf 	bl	800174c <ADC_reset>
		MEAS_data_ready = true;
 8001fee:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <DMA2_Stream3_IRQHandler+0x84>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
	}
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40026400 	.word	0x40026400
 8001ffc:	40026458 	.word	0x40026458
 8002000:	40012100 	.word	0x40012100
 8002004:	200003c0 	.word	0x200003c0

08002008 <DMA2_Stream4_IRQHandler>:
 * @note In dual ADC mode two values are combined (packed) in a single uint32_t
 * ADC_CDR[31:0] = ADC2_DR[15:0] | ADC1_DR[15:0]
 * and are therefore extracted before further processing.
 *****************************************************************************/
void DMA2_Stream4_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
	if (DMA2->HISR & DMA_HISR_TCIF4) {	// Stream4 transfer compl. interrupt f.
 800200e:	4b30      	ldr	r3, [pc, #192]	@ (80020d0 <DMA2_Stream4_IRQHandler+0xc8>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0320 	and.w	r3, r3, #32
 8002016:	2b00      	cmp	r3, #0
 8002018:	d055      	beq.n	80020c6 <DMA2_Stream4_IRQHandler+0xbe>
		NVIC_DisableIRQ(DMA2_Stream4_IRQn);	// Disable DMA interrupt in the NVIC
 800201a:	203c      	movs	r0, #60	@ 0x3c
 800201c:	f7ff fa2a 	bl	8001474 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);// Clear pending DMA interrupt
 8002020:	203c      	movs	r0, #60	@ 0x3c
 8002022:	f7ff fa4b 	bl	80014bc <__NVIC_ClearPendingIRQ>
		DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8002026:	4b2b      	ldr	r3, [pc, #172]	@ (80020d4 <DMA2_Stream4_IRQHandler+0xcc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a2a      	ldr	r2, [pc, #168]	@ (80020d4 <DMA2_Stream4_IRQHandler+0xcc>)
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8002032:	bf00      	nop
 8002034:	4b27      	ldr	r3, [pc, #156]	@ (80020d4 <DMA2_Stream4_IRQHandler+0xcc>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f9      	bne.n	8002034 <DMA2_Stream4_IRQHandler+0x2c>
		DMA2->HIFCR |= DMA_HIFCR_CTCIF4;// Clear transfer complete interrupt fl.
 8002040:	4b23      	ldr	r3, [pc, #140]	@ (80020d0 <DMA2_Stream4_IRQHandler+0xc8>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4a22      	ldr	r2, [pc, #136]	@ (80020d0 <DMA2_Stream4_IRQHandler+0xc8>)
 8002046:	f043 0320 	orr.w	r3, r3, #32
 800204a:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 800204c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002056:	f023 0301 	bic.w	r3, r3, #1
 800205a:	6013      	str	r3, [r2, #0]
		ADC1->CR2 &= ~ADC_CR2_ADON;		// Disable ADC1
 800205c:	4b1e      	ldr	r3, [pc, #120]	@ (80020d8 <DMA2_Stream4_IRQHandler+0xd0>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4a1d      	ldr	r2, [pc, #116]	@ (80020d8 <DMA2_Stream4_IRQHandler+0xd0>)
 8002062:	f023 0301 	bic.w	r3, r3, #1
 8002066:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 8002068:	4b1c      	ldr	r3, [pc, #112]	@ (80020dc <DMA2_Stream4_IRQHandler+0xd4>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4a1b      	ldr	r2, [pc, #108]	@ (80020dc <DMA2_Stream4_IRQHandler+0xd4>)
 800206e:	f023 0301 	bic.w	r3, r3, #1
 8002072:	6093      	str	r3, [r2, #8]
		ADC->CCR &= ~ADC_CCR_DMA_1;		// Disable DMA mode
 8002074:	4b1a      	ldr	r3, [pc, #104]	@ (80020e0 <DMA2_Stream4_IRQHandler+0xd8>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a19      	ldr	r2, [pc, #100]	@ (80020e0 <DMA2_Stream4_IRQHandler+0xd8>)
 800207a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800207e:	6053      	str	r3, [r2, #4]
		/* Extract combined samples */
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 8002080:	23ff      	movs	r3, #255	@ 0xff
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	e017      	b.n	80020b6 <DMA2_Stream4_IRQHandler+0xae>
			ADC_samples[2*i+1] = (ADC_samples[i] >> 16);
 8002086:	4a17      	ldr	r2, [pc, #92]	@ (80020e4 <DMA2_Stream4_IRQHandler+0xdc>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	3301      	adds	r3, #1
 8002094:	0c12      	lsrs	r2, r2, #16
 8002096:	4913      	ldr	r1, [pc, #76]	@ (80020e4 <DMA2_Stream4_IRQHandler+0xdc>)
 8002098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_samples[2*i]   = (ADC_samples[i] & 0xffff);
 800209c:	4a11      	ldr	r2, [pc, #68]	@ (80020e4 <DMA2_Stream4_IRQHandler+0xdc>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	b292      	uxth	r2, r2
 80020aa:	490e      	ldr	r1, [pc, #56]	@ (80020e4 <DMA2_Stream4_IRQHandler+0xdc>)
 80020ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	dae4      	bge.n	8002086 <DMA2_Stream4_IRQHandler+0x7e>
		}
		ADC_reset();
 80020bc:	f7ff fb46 	bl	800174c <ADC_reset>
		MEAS_data_ready = true;
 80020c0:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <DMA2_Stream4_IRQHandler+0xe0>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	701a      	strb	r2, [r3, #0]
	}
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40026400 	.word	0x40026400
 80020d4:	40026470 	.word	0x40026470
 80020d8:	40012000 	.word	0x40012000
 80020dc:	40012100 	.word	0x40012100
 80020e0:	40012300 	.word	0x40012300
 80020e4:	200003c8 	.word	0x200003c8
 80020e8:	200003c0 	.word	0x200003c0

080020ec <FMCW_prepareFft>:




void FMCW_prepareFft(void){
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
	// Get FFT array into proper form
	for (int n = 0; n < ADC_NUMS; n++) {
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	e019      	b.n	800212c <FMCW_prepareFft+0x40>
			FFT_INOUT[n*2] = Q_samples[n];
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4910      	ldr	r1, [pc, #64]	@ (8002140 <FMCW_prepareFft+0x54>)
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	0092      	lsls	r2, r2, #2
 8002102:	440a      	add	r2, r1
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	490f      	ldr	r1, [pc, #60]	@ (8002144 <FMCW_prepareFft+0x58>)
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	601a      	str	r2, [r3, #0]
			FFT_INOUT[(n*2)+1] = I_samples[n];
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	3301      	adds	r3, #1
 8002114:	490c      	ldr	r1, [pc, #48]	@ (8002148 <FMCW_prepareFft+0x5c>)
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	0092      	lsls	r2, r2, #2
 800211a:	440a      	add	r2, r1
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	4909      	ldr	r1, [pc, #36]	@ (8002144 <FMCW_prepareFft+0x58>)
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	601a      	str	r2, [r3, #0]
	for (int n = 0; n < ADC_NUMS; n++) {
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3301      	adds	r3, #1
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2bff      	cmp	r3, #255	@ 0xff
 8002130:	dde2      	ble.n	80020f8 <FMCW_prepareFft+0xc>
	}
}
 8002132:	bf00      	nop
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	20000bcc 	.word	0x20000bcc
 8002144:	200013cc 	.word	0x200013cc
 8002148:	20000fcc 	.word	0x20000fcc

0800214c <FMCW_separateSamples>:

void FMCW_separateSamples(void){
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
	float32_t Q_sum = 0;
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
	float32_t I_sum = 0;
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]

	// Separate Q and I Components of ADC Array
	for (int n = 0; n < ADC_NUMS; n++) {
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	e038      	b.n	80021d6 <FMCW_separateSamples+0x8a>

		Q_samples[n] = (float32_t)(ADC_samples[n] & 0x0000FFFF);
 8002164:	4a3d      	ldr	r2, [pc, #244]	@ (800225c <FMCW_separateSamples+0x110>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216c:	b29b      	uxth	r3, r3
 800216e:	ee07 3a90 	vmov	s15, r3
 8002172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002176:	4a3a      	ldr	r2, [pc, #232]	@ (8002260 <FMCW_separateSamples+0x114>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	edc3 7a00 	vstr	s15, [r3]


		I_samples[n] = (float32_t)((ADC_samples[n] >> 16) & 0x0000FFFF);
 8002182:	4a36      	ldr	r2, [pc, #216]	@ (800225c <FMCW_separateSamples+0x110>)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218a:	0c1b      	lsrs	r3, r3, #16
 800218c:	ee07 3a90 	vmov	s15, r3
 8002190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002194:	4a33      	ldr	r2, [pc, #204]	@ (8002264 <FMCW_separateSamples+0x118>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	edc3 7a00 	vstr	s15, [r3]
		//float32_t t = (float32_t)n / ADC_FS;
		//Q_samples[n] = (float32_t)100.0*(float32_t)sinf(2 * PI * 1000 * t);  // Sine on Q
		//I_samples[n] = (float32_t)100.0*(float32_t)cosf(2 * PI * 1000 * t);  // Cosine on I

		// Sum of all Q and I values
		Q_sum = Q_sum + Q_samples[n];
 80021a0:	4a2f      	ldr	r2, [pc, #188]	@ (8002260 <FMCW_separateSamples+0x114>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	edd3 7a00 	vldr	s15, [r3]
 80021ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80021b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b4:	edc7 7a03 	vstr	s15, [r7, #12]
		I_sum = I_sum + I_samples[n];
 80021b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002264 <FMCW_separateSamples+0x118>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	edd3 7a00 	vldr	s15, [r3]
 80021c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80021c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021cc:	edc7 7a02 	vstr	s15, [r7, #8]
	for (int n = 0; n < ADC_NUMS; n++) {
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3301      	adds	r3, #1
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2bff      	cmp	r3, #255	@ 0xff
 80021da:	ddc3      	ble.n	8002164 <FMCW_separateSamples+0x18>
	}

	// Remove DC offset
	Q_sum = Q_sum / ADC_NUMS;
 80021dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80021e0:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8002268 <FMCW_separateSamples+0x11c>
 80021e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021e8:	edc7 7a03 	vstr	s15, [r7, #12]
	I_sum = I_sum / ADC_NUMS;
 80021ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80021f0:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002268 <FMCW_separateSamples+0x11c>
 80021f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021f8:	edc7 7a02 	vstr	s15, [r7, #8]

	for (int n = 0; n < ADC_NUMS; n++) {
 80021fc:	2300      	movs	r3, #0
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	e022      	b.n	8002248 <FMCW_separateSamples+0xfc>
		Q_samples[n] = Q_samples[n] - Q_sum;
 8002202:	4a17      	ldr	r2, [pc, #92]	@ (8002260 <FMCW_separateSamples+0x114>)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	ed93 7a00 	vldr	s14, [r3]
 800220e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002216:	4a12      	ldr	r2, [pc, #72]	@ (8002260 <FMCW_separateSamples+0x114>)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	edc3 7a00 	vstr	s15, [r3]
		I_samples[n] = I_samples[n] - I_sum;
 8002222:	4a10      	ldr	r2, [pc, #64]	@ (8002264 <FMCW_separateSamples+0x118>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	ed93 7a00 	vldr	s14, [r3]
 800222e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002236:	4a0b      	ldr	r2, [pc, #44]	@ (8002264 <FMCW_separateSamples+0x118>)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	edc3 7a00 	vstr	s15, [r3]
	for (int n = 0; n < ADC_NUMS; n++) {
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	3301      	adds	r3, #1
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	2bff      	cmp	r3, #255	@ 0xff
 800224c:	ddd9      	ble.n	8002202 <FMCW_separateSamples+0xb6>
	}
}
 800224e:	bf00      	nop
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	200003c8 	.word	0x200003c8
 8002260:	20000bcc 	.word	0x20000bcc
 8002264:	20000fcc 	.word	0x20000fcc
 8002268:	43800000 	.word	0x43800000

0800226c <FMCW_applyHanningWindow>:

void FMCW_applyHanningWindow(void) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
    for (int n = 0; n < ADC_NUMS; n++) {
 8002272:	2300      	movs	r3, #0
 8002274:	607b      	str	r3, [r7, #4]
 8002276:	e03f      	b.n	80022f8 <FMCW_applyHanningWindow+0x8c>
        float32_t window = 0.5f * (1.0f - arm_cos_f32((2.0f * PI * n) / (ADC_NUMS - 1)));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002282:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002308 <FMCW_applyHanningWindow+0x9c>
 8002286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800228a:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800230c <FMCW_applyHanningWindow+0xa0>
 800228e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002292:	eeb0 0a47 	vmov.f32	s0, s14
 8002296:	f008 fc07 	bl	800aaa8 <arm_cos_f32>
 800229a:	eef0 7a40 	vmov.f32	s15, s0
 800229e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80022a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80022aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ae:	edc7 7a00 	vstr	s15, [r7]
        I_samples[n] *= window;
 80022b2:	4a17      	ldr	r2, [pc, #92]	@ (8002310 <FMCW_applyHanningWindow+0xa4>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	ed93 7a00 	vldr	s14, [r3]
 80022be:	edd7 7a00 	vldr	s15, [r7]
 80022c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c6:	4a12      	ldr	r2, [pc, #72]	@ (8002310 <FMCW_applyHanningWindow+0xa4>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	edc3 7a00 	vstr	s15, [r3]
        Q_samples[n] *= window;
 80022d2:	4a10      	ldr	r2, [pc, #64]	@ (8002314 <FMCW_applyHanningWindow+0xa8>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	ed93 7a00 	vldr	s14, [r3]
 80022de:	edd7 7a00 	vldr	s15, [r7]
 80022e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002314 <FMCW_applyHanningWindow+0xa8>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	edc3 7a00 	vstr	s15, [r3]
    for (int n = 0; n < ADC_NUMS; n++) {
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3301      	adds	r3, #1
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2bff      	cmp	r3, #255	@ 0xff
 80022fc:	ddbc      	ble.n	8002278 <FMCW_applyHanningWindow+0xc>
    }
}
 80022fe:	bf00      	nop
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40c90fdb 	.word	0x40c90fdb
 800230c:	437f0000 	.word	0x437f0000
 8002310:	20000fcc 	.word	0x20000fcc
 8002314:	20000bcc 	.word	0x20000bcc

08002318 <FMCW_doFft>:

void FMCW_doFft(void){
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
	arm_cfft_instance_f32 cfft_instance;
	arm_cfft_init_f32(&cfft_instance, FFT_SIZE);
 800231e:	463b      	mov	r3, r7
 8002320:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002324:	4618      	mov	r0, r3
 8002326:	f002 ffbf 	bl	80052a8 <arm_cfft_init_f32>
	arm_cfft_f32(&cfft_instance, FFT_INOUT, IFFT_FLAG, DO_BIT_REVERSE);
 800232a:	4638      	mov	r0, r7
 800232c:	2301      	movs	r3, #1
 800232e:	2200      	movs	r2, #0
 8002330:	4903      	ldr	r1, [pc, #12]	@ (8002340 <FMCW_doFft+0x28>)
 8002332:	f008 fb3f 	bl	800a9b4 <arm_cfft_f32>
}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	200013cc 	.word	0x200013cc

08002344 <FMCW_convertFftToMagnitude>:

void FMCW_convertFftToMagnitude(void){
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
	 // Convert complex FFT to magnitude
	for (int i = 0; i < FFT_SIZE; i++) {
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	e027      	b.n	80023a0 <FMCW_convertFftToMagnitude+0x5c>
		float real = FFT_INOUT[2 * i];
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4a16      	ldr	r2, [pc, #88]	@ (80023b0 <FMCW_convertFftToMagnitude+0x6c>)
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60bb      	str	r3, [r7, #8]
		float imag = FFT_INOUT[2 * i + 1];
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	3301      	adds	r3, #1
 8002364:	4a12      	ldr	r2, [pc, #72]	@ (80023b0 <FMCW_convertFftToMagnitude+0x6c>)
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	607b      	str	r3, [r7, #4]
		FFT_MAG[i] = sqrtf(real * real + imag * imag);  // or use hypotf(real, imag)
 800236e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002372:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002376:	edd7 7a01 	vldr	s15, [r7, #4]
 800237a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800237e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002382:	eeb0 0a67 	vmov.f32	s0, s15
 8002386:	f00b fd3b 	bl	800de00 <sqrtf>
 800238a:	eef0 7a40 	vmov.f32	s15, s0
 800238e:	4a09      	ldr	r2, [pc, #36]	@ (80023b4 <FMCW_convertFftToMagnitude+0x70>)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < FFT_SIZE; i++) {
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3301      	adds	r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2bff      	cmp	r3, #255	@ 0xff
 80023a4:	ddd4      	ble.n	8002350 <FMCW_convertFftToMagnitude+0xc>
	}
}
 80023a6:	bf00      	nop
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	200013cc 	.word	0x200013cc
 80023b4:	20001bcc 	.word	0x20001bcc

080023b8 <FMCW_getPeakMangitudeFrequency>:

float32_t FMCW_getPeakMangitudeFrequency(void) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b092      	sub	sp, #72	@ 0x48
 80023bc:	af02      	add	r7, sp, #8
    float32_t max_magnitude = 0.0f;
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int max_index = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    int filter = 2;
 80023c8:	2302      	movs	r3, #2
 80023ca:	633b      	str	r3, [r7, #48]	@ 0x30

    // Find peak magnitude and its index (ignoring edges if needed)
    for (int i = 0; i < FFT_SIZE; i++) {
 80023cc:	2300      	movs	r3, #0
 80023ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80023d0:	e022      	b.n	8002418 <FMCW_getPeakMangitudeFrequency+0x60>
        if ((FFT_MAG[i] > max_magnitude)&&((i < FFT_SIZE/2-filter)||(i > FFT_SIZE/2+filter))) {
 80023d2:	4a2b      	ldr	r2, [pc, #172]	@ (8002480 <FMCW_getPeakMangitudeFrequency+0xc8>)
 80023d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	edd3 7a00 	vldr	s15, [r3]
 80023de:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80023e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ea:	d512      	bpl.n	8002412 <FMCW_getPeakMangitudeFrequency+0x5a>
 80023ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ee:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80023f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023f4:	429a      	cmp	r2, r3
 80023f6:	db04      	blt.n	8002402 <FMCW_getPeakMangitudeFrequency+0x4a>
 80023f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fa:	3380      	adds	r3, #128	@ 0x80
 80023fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023fe:	429a      	cmp	r2, r3
 8002400:	dd07      	ble.n	8002412 <FMCW_getPeakMangitudeFrequency+0x5a>
            max_magnitude = FFT_MAG[i];
 8002402:	4a1f      	ldr	r2, [pc, #124]	@ (8002480 <FMCW_getPeakMangitudeFrequency+0xc8>)
 8002404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            max_index = i;
 800240e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002410:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (int i = 0; i < FFT_SIZE; i++) {
 8002412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002414:	3301      	adds	r3, #1
 8002416:	637b      	str	r3, [r7, #52]	@ 0x34
 8002418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800241a:	2bff      	cmp	r3, #255	@ 0xff
 800241c:	ddd9      	ble.n	80023d2 <FMCW_getPeakMangitudeFrequency+0x1a>
        }
    }

    // Convert bin index to signed frequency
    int shifted_index = (max_index < FFT_SIZE / 2) ? max_index : (max_index - FFT_SIZE);
 800241e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002420:	2b7f      	cmp	r3, #127	@ 0x7f
 8002422:	dd03      	ble.n	800242c <FMCW_getPeakMangitudeFrequency+0x74>
 8002424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002426:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800242a:	e000      	b.n	800242e <FMCW_getPeakMangitudeFrequency+0x76>
 800242c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800242e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float32_t bin_resolution = (float32_t)ADC_FS / (float32_t)FFT_SIZE;
 8002430:	4b14      	ldr	r3, [pc, #80]	@ (8002484 <FMCW_getPeakMangitudeFrequency+0xcc>)
 8002432:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t max_frequency = shifted_index * bin_resolution;
 8002434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002436:	ee07 3a90 	vmov	s15, r3
 800243a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800243e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002446:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Optional: Display on LCD
    char text_[32];
    snprintf(text_, sizeof(text_), "Freq: %+6.1f Hz", max_frequency);
 800244a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800244c:	f7fe f8ec 	bl	8000628 <__aeabi_f2d>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	1d38      	adds	r0, r7, #4
 8002456:	e9cd 2300 	strd	r2, r3, [sp]
 800245a:	4a0b      	ldr	r2, [pc, #44]	@ (8002488 <FMCW_getPeakMangitudeFrequency+0xd0>)
 800245c:	2120      	movs	r1, #32
 800245e:	f009 fb6d 	bl	800bb3c <sniprintf>
    BSP_LCD_DisplayStringAt(0, 210, (uint8_t*)text_, CENTER_MODE);
 8002462:	1d3a      	adds	r2, r7, #4
 8002464:	2301      	movs	r3, #1
 8002466:	21d2      	movs	r1, #210	@ 0xd2
 8002468:	2000      	movs	r0, #0
 800246a:	f002 f821 	bl	80044b0 <BSP_LCD_DisplayStringAt>

    return max_frequency;
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	ee07 3a90 	vmov	s15, r3
}
 8002474:	eeb0 0a67 	vmov.f32	s0, s15
 8002478:	3740      	adds	r7, #64	@ 0x40
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20001bcc 	.word	0x20001bcc
 8002484:	419c4000 	.word	0x419c4000
 8002488:	0800defc 	.word	0x0800defc

0800248c <FMCW_getRadialVelocity>:

float32_t FMCW_getRadialVelocity(void) {
 800248c:	b580      	push	{r7, lr}
 800248e:	b096      	sub	sp, #88	@ 0x58
 8002490:	af02      	add	r7, sp, #8
    float32_t max_magnitude = 0.0f;
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int max_index = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	64bb      	str	r3, [r7, #72]	@ 0x48
    const float32_t MIN_PEAK_THRESHOLD = 2000.0f; // Adjust based on your signal level
 800249c:	4b58      	ldr	r3, [pc, #352]	@ (8002600 <FMCW_getRadialVelocity+0x174>)
 800249e:	63bb      	str	r3, [r7, #56]	@ 0x38
    int filter = 2;
 80024a0:	2302      	movs	r3, #2
 80024a2:	637b      	str	r3, [r7, #52]	@ 0x34
    char text_[32];

        // Find peak magnitude and its index (ignoring edges if needed)
    for (int i = 0; i < FFT_SIZE; i++) {
 80024a4:	2300      	movs	r3, #0
 80024a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80024a8:	e025      	b.n	80024f6 <FMCW_getRadialVelocity+0x6a>
    	if ((FFT_MAG[i] > max_magnitude)&&((i < FFT_SIZE/2-filter)||(i > FFT_SIZE/2+filter))&&(i != 0)) {
 80024aa:	4a56      	ldr	r2, [pc, #344]	@ (8002604 <FMCW_getRadialVelocity+0x178>)
 80024ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	edd3 7a00 	vldr	s15, [r3]
 80024b6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80024ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c2:	d515      	bpl.n	80024f0 <FMCW_getRadialVelocity+0x64>
 80024c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024c6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80024ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024cc:	429a      	cmp	r2, r3
 80024ce:	db04      	blt.n	80024da <FMCW_getRadialVelocity+0x4e>
 80024d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024d2:	3380      	adds	r3, #128	@ 0x80
 80024d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024d6:	429a      	cmp	r2, r3
 80024d8:	dd0a      	ble.n	80024f0 <FMCW_getRadialVelocity+0x64>
 80024da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d007      	beq.n	80024f0 <FMCW_getRadialVelocity+0x64>
            max_magnitude = FFT_MAG[i];
 80024e0:	4a48      	ldr	r2, [pc, #288]	@ (8002604 <FMCW_getRadialVelocity+0x178>)
 80024e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
            max_index = i;
 80024ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024ee:	64bb      	str	r3, [r7, #72]	@ 0x48
    for (int i = 0; i < FFT_SIZE; i++) {
 80024f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024f2:	3301      	adds	r3, #1
 80024f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80024f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024f8:	2bff      	cmp	r3, #255	@ 0xff
 80024fa:	ddd6      	ble.n	80024aa <FMCW_getRadialVelocity+0x1e>
        }
    }

    // If the peak is too small, consider it noise
    if (max_magnitude < MIN_PEAK_THRESHOLD) {
 80024fc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002500:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d508      	bpl.n	8002520 <FMCW_getRadialVelocity+0x94>
        BSP_LCD_DisplayStringAt(0, 210, (uint8_t*)"No motion", CENTER_MODE);
 800250e:	2301      	movs	r3, #1
 8002510:	4a3d      	ldr	r2, [pc, #244]	@ (8002608 <FMCW_getRadialVelocity+0x17c>)
 8002512:	21d2      	movs	r1, #210	@ 0xd2
 8002514:	2000      	movs	r0, #0
 8002516:	f001 ffcb 	bl	80044b0 <BSP_LCD_DisplayStringAt>
        return 0.0f;
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	e067      	b.n	80025f0 <FMCW_getRadialVelocity+0x164>
    }

    // Shift index to center FFT around 0 Hz
    int bin_centered = (max_index >= FFT_SIZE / 2) ? (max_index - FFT_SIZE) : max_index;
 8002520:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002522:	2b7f      	cmp	r3, #127	@ 0x7f
 8002524:	dd03      	ble.n	800252e <FMCW_getRadialVelocity+0xa2>
 8002526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002528:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800252c:	e000      	b.n	8002530 <FMCW_getRadialVelocity+0xa4>
 800252e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002530:	633b      	str	r3, [r7, #48]	@ 0x30
    float32_t bin_resolution = ADC_FS / (float32_t)FFT_SIZE;
 8002532:	4b36      	ldr	r3, [pc, #216]	@ (800260c <FMCW_getRadialVelocity+0x180>)
 8002534:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float32_t doppler_frequency = bin_centered * bin_resolution;
 8002536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002538:	ee07 3a90 	vmov	s15, r3
 800253c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002540:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002548:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    // Calculate velocity (λ = c / f_c)
    float32_t lambda = SPEED_OF_LIGHT / FMCW_CARRIER_HZ;
 800254c:	4b30      	ldr	r3, [pc, #192]	@ (8002610 <FMCW_getRadialVelocity+0x184>)
 800254e:	627b      	str	r3, [r7, #36]	@ 0x24
    float32_t velocity = (doppler_frequency * lambda) / 2.0f;
 8002550:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002554:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002558:	ee27 7a27 	vmul.f32	s14, s14, s15
 800255c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002560:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002564:	edc7 7a08 	vstr	s15, [r7, #32]

    // Update history buffer
    velocity_history[velocity_index++] = velocity;
 8002568:	4b2a      	ldr	r3, [pc, #168]	@ (8002614 <FMCW_getRadialVelocity+0x188>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	4929      	ldr	r1, [pc, #164]	@ (8002614 <FMCW_getRadialVelocity+0x188>)
 8002570:	600a      	str	r2, [r1, #0]
 8002572:	4a29      	ldr	r2, [pc, #164]	@ (8002618 <FMCW_getRadialVelocity+0x18c>)
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	6a3a      	ldr	r2, [r7, #32]
 800257a:	601a      	str	r2, [r3, #0]
    if (velocity_index >= VELOCITY_SMOOTH_WINDOW) velocity_index = 0;
 800257c:	4b25      	ldr	r3, [pc, #148]	@ (8002614 <FMCW_getRadialVelocity+0x188>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b04      	cmp	r3, #4
 8002582:	d902      	bls.n	800258a <FMCW_getRadialVelocity+0xfe>
 8002584:	4b23      	ldr	r3, [pc, #140]	@ (8002614 <FMCW_getRadialVelocity+0x188>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]

    // Compute average
    float32_t velocity_avg = 0;
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	643b      	str	r3, [r7, #64]	@ 0x40
    for (int i = 0; i < VELOCITY_SMOOTH_WINDOW; i++) {
 8002590:	2300      	movs	r3, #0
 8002592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002594:	e00e      	b.n	80025b4 <FMCW_getRadialVelocity+0x128>
        velocity_avg += velocity_history[i];
 8002596:	4a20      	ldr	r2, [pc, #128]	@ (8002618 <FMCW_getRadialVelocity+0x18c>)
 8002598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	edd3 7a00 	vldr	s15, [r3]
 80025a2:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80025a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025aa:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    for (int i = 0; i < VELOCITY_SMOOTH_WINDOW; i++) {
 80025ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025b0:	3301      	adds	r3, #1
 80025b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	dded      	ble.n	8002596 <FMCW_getRadialVelocity+0x10a>
    }
    velocity_avg /= VELOCITY_SMOOTH_WINDOW;
 80025ba:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80025be:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80025c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025c6:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    // Display smoothed velocity
    snprintf(text_, sizeof(text_), "Vel: %6.1f m/s", velocity_avg);
 80025ca:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80025cc:	f7fe f82c 	bl	8000628 <__aeabi_f2d>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4638      	mov	r0, r7
 80025d6:	e9cd 2300 	strd	r2, r3, [sp]
 80025da:	4a10      	ldr	r2, [pc, #64]	@ (800261c <FMCW_getRadialVelocity+0x190>)
 80025dc:	2120      	movs	r1, #32
 80025de:	f009 faad 	bl	800bb3c <sniprintf>
    BSP_LCD_DisplayStringAt(0, 240, (uint8_t*)text_, CENTER_MODE);
 80025e2:	463a      	mov	r2, r7
 80025e4:	2301      	movs	r3, #1
 80025e6:	21f0      	movs	r1, #240	@ 0xf0
 80025e8:	2000      	movs	r0, #0
 80025ea:	f001 ff61 	bl	80044b0 <BSP_LCD_DisplayStringAt>

    return velocity_avg;
 80025ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

    snprintf(text_, sizeof(text_), "Vel: %6.1f m/s", velocity);
    BSP_LCD_DisplayStringAt(0, 240, (uint8_t*)text_, CENTER_MODE);

    return velocity;*/
}
 80025f0:	ee07 3a90 	vmov	s15, r3
 80025f4:	eeb0 0a67 	vmov.f32	s0, s15
 80025f8:	3750      	adds	r7, #80	@ 0x50
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	44fa0000 	.word	0x44fa0000
 8002604:	20001bcc 	.word	0x20001bcc
 8002608:	0800df0c 	.word	0x0800df0c
 800260c:	419c4000 	.word	0x419c4000
 8002610:	3c4ccccd 	.word	0x3c4ccccd
 8002614:	20001fe0 	.word	0x20001fe0
 8002618:	20001fcc 	.word	0x20001fcc
 800261c:	0800df18 	.word	0x0800df18

08002620 <FMCW_applyCalibrationFft>:
	BSP_LCD_DisplayStringAt(0, Y_OFFSET + 10, (uint8_t *)"Green: Magnitude (scaled)", CENTER_MODE);

	FFT_data_ready = false;
}

void FMCW_applyCalibrationFft(void){
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
	for(int i = 0; i < ADC_NUMS; i++){
 8002626:	2300      	movs	r3, #0
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	e016      	b.n	800265a <FMCW_applyCalibrationFft+0x3a>
		FFT_MAG[i] = FFT_MAG[i] - FFT_MAG_calibrate[i];
 800262c:	4a10      	ldr	r2, [pc, #64]	@ (8002670 <FMCW_applyCalibrationFft+0x50>)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	ed93 7a00 	vldr	s14, [r3]
 8002638:	4a0e      	ldr	r2, [pc, #56]	@ (8002674 <FMCW_applyCalibrationFft+0x54>)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	edd3 7a00 	vldr	s15, [r3]
 8002644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002648:	4a09      	ldr	r2, [pc, #36]	@ (8002670 <FMCW_applyCalibrationFft+0x50>)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < ADC_NUMS; i++){
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3301      	adds	r3, #1
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2bff      	cmp	r3, #255	@ 0xff
 800265e:	dde5      	ble.n	800262c <FMCW_applyCalibrationFft+0xc>
	}
}
 8002660:	bf00      	nop
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	20001bcc 	.word	0x20001bcc
 8002674:	20001fe4 	.word	0x20001fe4

08002678 <FMCW_calibrateFft>:

bool FMCW_calibrateFft(void){
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
	static int counter = 0;
	static int number_of_counts = 5;

	switch(calibrate_status){
 800267e:	4b3f      	ldr	r3, [pc, #252]	@ (800277c <FMCW_calibrateFft+0x104>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d06b      	beq.n	800275e <FMCW_calibrateFft+0xe6>
 8002686:	2b02      	cmp	r3, #2
 8002688:	d865      	bhi.n	8002756 <FMCW_calibrateFft+0xde>
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <FMCW_calibrateFft+0x1c>
 800268e:	2b01      	cmp	r3, #1
 8002690:	d017      	beq.n	80026c2 <FMCW_calibrateFft+0x4a>
 8002692:	e060      	b.n	8002756 <FMCW_calibrateFft+0xde>

	case 0:		// Start calibration
		counter = 0;
 8002694:	4b3a      	ldr	r3, [pc, #232]	@ (8002780 <FMCW_calibrateFft+0x108>)
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < FFT_SIZE; i++){
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	e00c      	b.n	80026ba <FMCW_calibrateFft+0x42>
			FFT_MAG[i] = 0.0f;
 80026a0:	4a38      	ldr	r2, [pc, #224]	@ (8002784 <FMCW_calibrateFft+0x10c>)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
			calibrate_status = 1;
 80026ae:	4b33      	ldr	r3, [pc, #204]	@ (800277c <FMCW_calibrateFft+0x104>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < FFT_SIZE; i++){
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	3301      	adds	r3, #1
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2bff      	cmp	r3, #255	@ 0xff
 80026be:	ddef      	ble.n	80026a0 <FMCW_calibrateFft+0x28>
		}
		break;
 80026c0:	e04e      	b.n	8002760 <FMCW_calibrateFft+0xe8>

	case 1: 	// Calibration in progress
		if(counter < number_of_counts){
 80026c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002780 <FMCW_calibrateFft+0x108>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	4b30      	ldr	r3, [pc, #192]	@ (8002788 <FMCW_calibrateFft+0x110>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	da22      	bge.n	8002714 <FMCW_calibrateFft+0x9c>
			for(int i = 0; i < FFT_SIZE; i++){
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	e016      	b.n	8002702 <FMCW_calibrateFft+0x8a>
				FFT_MAG_calibrate[i] = FFT_MAG_calibrate[i] + FFT_MAG[i];
 80026d4:	4a2d      	ldr	r2, [pc, #180]	@ (800278c <FMCW_calibrateFft+0x114>)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	ed93 7a00 	vldr	s14, [r3]
 80026e0:	4a28      	ldr	r2, [pc, #160]	@ (8002784 <FMCW_calibrateFft+0x10c>)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	edd3 7a00 	vldr	s15, [r3]
 80026ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f0:	4a26      	ldr	r2, [pc, #152]	@ (800278c <FMCW_calibrateFft+0x114>)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < FFT_SIZE; i++){
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	3301      	adds	r3, #1
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2bff      	cmp	r3, #255	@ 0xff
 8002706:	dde5      	ble.n	80026d4 <FMCW_calibrateFft+0x5c>
			}
			counter++;
 8002708:	4b1d      	ldr	r3, [pc, #116]	@ (8002780 <FMCW_calibrateFft+0x108>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3301      	adds	r3, #1
 800270e:	4a1c      	ldr	r2, [pc, #112]	@ (8002780 <FMCW_calibrateFft+0x108>)
 8002710:	6013      	str	r3, [r2, #0]
				FFT_MAG_calibrate[i] = FFT_MAG_calibrate[i] / number_of_counts;

			}
			calibrate_status = 2;
		}
		break;
 8002712:	e025      	b.n	8002760 <FMCW_calibrateFft+0xe8>
			for(int i = 0; i < ADC_NUMS; i++){
 8002714:	2300      	movs	r3, #0
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	e016      	b.n	8002748 <FMCW_calibrateFft+0xd0>
				FFT_MAG_calibrate[i] = FFT_MAG_calibrate[i] / number_of_counts;
 800271a:	4a1c      	ldr	r2, [pc, #112]	@ (800278c <FMCW_calibrateFft+0x114>)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	edd3 6a00 	vldr	s13, [r3]
 8002726:	4b18      	ldr	r3, [pc, #96]	@ (8002788 <FMCW_calibrateFft+0x110>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	ee07 3a90 	vmov	s15, r3
 800272e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002736:	4a15      	ldr	r2, [pc, #84]	@ (800278c <FMCW_calibrateFft+0x114>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < ADC_NUMS; i++){
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3301      	adds	r3, #1
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2bff      	cmp	r3, #255	@ 0xff
 800274c:	dde5      	ble.n	800271a <FMCW_calibrateFft+0xa2>
			calibrate_status = 2;
 800274e:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <FMCW_calibrateFft+0x104>)
 8002750:	2202      	movs	r2, #2
 8002752:	601a      	str	r2, [r3, #0]
		break;
 8002754:	e004      	b.n	8002760 <FMCW_calibrateFft+0xe8>
	case 2:

		break;

	default:
		calibrate_status = 0;
 8002756:	4b09      	ldr	r3, [pc, #36]	@ (800277c <FMCW_calibrateFft+0x104>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
		break;
 800275c:	e000      	b.n	8002760 <FMCW_calibrateFft+0xe8>
		break;
 800275e:	bf00      	nop

	}


	// return 1
	if(calibrate_status == 2){
 8002760:	4b06      	ldr	r3, [pc, #24]	@ (800277c <FMCW_calibrateFft+0x104>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d101      	bne.n	800276c <FMCW_calibrateFft+0xf4>
		return 1;
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <FMCW_calibrateFft+0xf6>
	} else{
		return 0;
 800276c:	2300      	movs	r3, #0
	}

}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	200023e4 	.word	0x200023e4
 8002780:	200023e8 	.word	0x200023e8
 8002784:	20001bcc 	.word	0x20001bcc
 8002788:	20000008 	.word	0x20000008
 800278c:	20001fe4 	.word	0x20001fe4

08002790 <show_data_menu_zero>:

void show_data_menu_zero(void)
{
 8002790:	b590      	push	{r4, r7, lr}
 8002792:	b08d      	sub	sp, #52	@ 0x34
 8002794:	af00      	add	r7, sp, #0
    const uint32_t Y_OFFSET = 260;
 8002796:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800279a:	61fb      	str	r3, [r7, #28]
    const uint32_t X_SIZE = 240;
 800279c:	23f0      	movs	r3, #240	@ 0xf0
 800279e:	61bb      	str	r3, [r7, #24]
    const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;
 80027a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027aa:	3301      	adds	r3, #1
 80027ac:	617b      	str	r3, [r7, #20]
    uint32_t data;
    uint32_t data_last;

    /* Clear the display */
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80027ae:	f04f 30ff 	mov.w	r0, #4294967295
 80027b2:	f001 fdc5 	bl	8004340 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET + 1);
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	3301      	adds	r3, #1
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2100      	movs	r1, #0
 80027c4:	2000      	movs	r0, #0
 80027c6:	f001 fffb 	bl	80047c0 <BSP_LCD_FillRect>

    /* Write first 2 samples as numbers */
    BSP_LCD_SetFont(&Font24);
 80027ca:	4861      	ldr	r0, [pc, #388]	@ (8002950 <show_data_menu_zero+0x1c0>)
 80027cc:	f001 fdea 	bl	80043a4 <BSP_LCD_SetFont>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
 80027d4:	f001 fdcc 	bl	8004370 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80027d8:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80027dc:	f001 fdb0 	bl	8004340 <BSP_LCD_SetTextColor>
    char text[16];
    snprintf(text, 15, "1. sample %4d", (int)(ADC_samples[0]));
 80027e0:	4b5c      	ldr	r3, [pc, #368]	@ (8002954 <show_data_menu_zero+0x1c4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4638      	mov	r0, r7
 80027e6:	4a5c      	ldr	r2, [pc, #368]	@ (8002958 <show_data_menu_zero+0x1c8>)
 80027e8:	210f      	movs	r1, #15
 80027ea:	f009 f9a7 	bl	800bb3c <sniprintf>
    BSP_LCD_DisplayStringAt(0, 50, (uint8_t *)text, LEFT_MODE);
 80027ee:	463a      	mov	r2, r7
 80027f0:	2303      	movs	r3, #3
 80027f2:	2132      	movs	r1, #50	@ 0x32
 80027f4:	2000      	movs	r0, #0
 80027f6:	f001 fe5b 	bl	80044b0 <BSP_LCD_DisplayStringAt>
    snprintf(text, 15, "2. sample %4d", (int)(ADC_samples[1]));
 80027fa:	4b56      	ldr	r3, [pc, #344]	@ (8002954 <show_data_menu_zero+0x1c4>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4638      	mov	r0, r7
 8002800:	4a56      	ldr	r2, [pc, #344]	@ (800295c <show_data_menu_zero+0x1cc>)
 8002802:	210f      	movs	r1, #15
 8002804:	f009 f99a 	bl	800bb3c <sniprintf>
    BSP_LCD_DisplayStringAt(0, 80, (uint8_t *)text, LEFT_MODE);
 8002808:	463a      	mov	r2, r7
 800280a:	2303      	movs	r3, #3
 800280c:	2150      	movs	r1, #80	@ 0x50
 800280e:	2000      	movs	r0, #0
 8002810:	f001 fe4e 	bl	80044b0 <BSP_LCD_DisplayStringAt>

    /* Draw the values of input channel 1 as a curve */
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8002814:	4852      	ldr	r0, [pc, #328]	@ (8002960 <show_data_menu_zero+0x1d0>)
 8002816:	f001 fd93 	bl	8004340 <BSP_LCD_SetTextColor>
    data = ADC_samples[MEAS_input_count * 0] / f;
 800281a:	4b4e      	ldr	r3, [pc, #312]	@ (8002954 <show_data_menu_zero+0x1c4>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (uint32_t i = 1; i < ADC_NUMS; i++) {
 8002826:	2301      	movs	r3, #1
 8002828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800282a:	e02e      	b.n	800288a <show_data_menu_zero+0xfa>
        data_last = data;
 800282c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282e:	613b      	str	r3, [r7, #16]
        data = (ADC_samples[MEAS_input_count * i]) / f;
 8002830:	4b4c      	ldr	r3, [pc, #304]	@ (8002964 <show_data_menu_zero+0x1d4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	4a46      	ldr	r2, [pc, #280]	@ (8002954 <show_data_menu_zero+0x1c4>)
 800283c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	fbb2 f3f3 	udiv	r3, r2, r3
 8002846:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (data > Y_OFFSET) data = Y_OFFSET;
 8002848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	429a      	cmp	r2, r3
 800284e:	d901      	bls.n	8002854 <show_data_menu_zero+0xc4>
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i, Y_OFFSET - data);
 8002854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002856:	3b01      	subs	r3, #1
 8002858:	b29b      	uxth	r3, r3
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	b298      	uxth	r0, r3
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	b29a      	uxth	r2, r3
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	b29b      	uxth	r3, r3
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	b299      	uxth	r1, r3
 800286a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286c:	b29b      	uxth	r3, r3
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	b29c      	uxth	r4, r3
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	b29a      	uxth	r2, r3
 8002876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002878:	b29b      	uxth	r3, r3
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	b29b      	uxth	r3, r3
 800287e:	4622      	mov	r2, r4
 8002880:	f001 fed4 	bl	800462c <BSP_LCD_DrawLine>
    for (uint32_t i = 1; i < ADC_NUMS; i++) {
 8002884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002886:	3301      	adds	r3, #1
 8002888:	62bb      	str	r3, [r7, #40]	@ 0x28
 800288a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288c:	2bff      	cmp	r3, #255	@ 0xff
 800288e:	d9cd      	bls.n	800282c <show_data_menu_zero+0x9c>
    }

    /* Draw the values of input channel 2 (if present) as a curve */
    if (MEAS_input_count == 2) {
 8002890:	4b34      	ldr	r3, [pc, #208]	@ (8002964 <show_data_menu_zero+0x1d4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d13e      	bne.n	8002916 <show_data_menu_zero+0x186>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002898:	4833      	ldr	r0, [pc, #204]	@ (8002968 <show_data_menu_zero+0x1d8>)
 800289a:	f001 fd51 	bl	8004340 <BSP_LCD_SetTextColor>
        data = ADC_samples[MEAS_input_count * 0 + 1] / f;
 800289e:	4b2d      	ldr	r3, [pc, #180]	@ (8002954 <show_data_menu_zero+0x1c4>)
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (uint32_t i = 1; i < ADC_NUMS; i++) {
 80028aa:	2301      	movs	r3, #1
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ae:	e02f      	b.n	8002910 <show_data_menu_zero+0x180>
            data_last = data;
 80028b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b2:	613b      	str	r3, [r7, #16]
            data = (ADC_samples[MEAS_input_count * i + 1]) / f;
 80028b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002964 <show_data_menu_zero+0x1d4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ba:	fb02 f303 	mul.w	r3, r2, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	4a24      	ldr	r2, [pc, #144]	@ (8002954 <show_data_menu_zero+0x1c4>)
 80028c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (data > Y_OFFSET) data = Y_OFFSET;
 80028ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d901      	bls.n	80028da <show_data_menu_zero+0x14a>
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i, Y_OFFSET - data);
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29b      	uxth	r3, r3
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	b298      	uxth	r0, r3
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	b299      	uxth	r1, r3
 80028f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	b29c      	uxth	r4, r3
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028fe:	b29b      	uxth	r3, r3
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	b29b      	uxth	r3, r3
 8002904:	4622      	mov	r2, r4
 8002906:	f001 fe91 	bl	800462c <BSP_LCD_DrawLine>
        for (uint32_t i = 1; i < ADC_NUMS; i++) {
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	3301      	adds	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002912:	2bff      	cmp	r3, #255	@ 0xff
 8002914:	d9cc      	bls.n	80028b0 <show_data_menu_zero+0x120>
        }
    }

/* Clear buffer and flag */
	for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8002916:	2300      	movs	r3, #0
 8002918:	623b      	str	r3, [r7, #32]
 800291a:	e00f      	b.n	800293c <show_data_menu_zero+0x1ac>
		ADC_samples[2 * i] = 0;
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4a0c      	ldr	r2, [pc, #48]	@ (8002954 <show_data_menu_zero+0x1c4>)
 8002922:	2100      	movs	r1, #0
 8002924:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		ADC_samples[2 * i + 1] = 0;
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	3301      	adds	r3, #1
 800292e:	4a09      	ldr	r2, [pc, #36]	@ (8002954 <show_data_menu_zero+0x1c4>)
 8002930:	2100      	movs	r1, #0
 8002932:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	3301      	adds	r3, #1
 800293a:	623b      	str	r3, [r7, #32]
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	2bff      	cmp	r3, #255	@ 0xff
 8002940:	d9ec      	bls.n	800291c <show_data_menu_zero+0x18c>
	}
	ADC_sample_count = 0;
 8002942:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <show_data_menu_zero+0x1dc>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
}
 8002948:	bf00      	nop
 800294a:	3734      	adds	r7, #52	@ 0x34
 800294c:	46bd      	mov	sp, r7
 800294e:	bd90      	pop	{r4, r7, pc}
 8002950:	20000178 	.word	0x20000178
 8002954:	200003c8 	.word	0x200003c8
 8002958:	0800df44 	.word	0x0800df44
 800295c:	0800df54 	.word	0x0800df54
 8002960:	ff0000ff 	.word	0xff0000ff
 8002964:	20000004 	.word	0x20000004
 8002968:	ffff0000 	.word	0xffff0000
 800296c:	200003c4 	.word	0x200003c4

08002970 <show_data_menu_one>:

void show_data_menu_one(void) {
 8002970:	b590      	push	{r4, r7, lr}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0


	FMCW_separateSamples();       // Split and DC correct I/Q
 8002976:	f7ff fbe9 	bl	800214c <FMCW_separateSamples>
    FMCW_applyHanningWindow();    // Optional: Hanning window
 800297a:	f7ff fc77 	bl	800226c <FMCW_applyHanningWindow>
    FMCW_prepareFft();            // Format I/Q as complex array
 800297e:	f7ff fbb5 	bl	80020ec <FMCW_prepareFft>
    FMCW_doFft();                 // Run FFT
 8002982:	f7ff fcc9 	bl	8002318 <FMCW_doFft>
    FMCW_convertFftToMagnitude(); // Get magnitudes
 8002986:	f7ff fcdd 	bl	8002344 <FMCW_convertFftToMagnitude>
    FMCW_calibrateFft();
 800298a:	f7ff fe75 	bl	8002678 <FMCW_calibrateFft>


    // LCD plotting (FFT magnitude like in menu_zero)
    const uint32_t Y_OFFSET = 260;
 800298e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002992:	60bb      	str	r3, [r7, #8]
    const uint32_t X_SIZE = 240;
 8002994:	23f0      	movs	r3, #240	@ 0xf0
 8002996:	607b      	str	r3, [r7, #4]
    const uint32_t f = 300; // scaling factor for amplitude, adjust as needed
 8002998:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800299c:	603b      	str	r3, [r7, #0]
    uint32_t data, data_last;


    // Clear LCD
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800299e:	f04f 30ff 	mov.w	r0, #4294967295
 80029a2:	f001 fccd 	bl	8004340 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET + 1);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3301      	adds	r3, #1
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2100      	movs	r1, #0
 80029b4:	2000      	movs	r0, #0
 80029b6:	f001 ff03 	bl	80047c0 <BSP_LCD_FillRect>

    // Draw FFT magnitude as blue line
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80029ba:	4834      	ldr	r0, [pc, #208]	@ (8002a8c <show_data_menu_one+0x11c>)
 80029bc:	f001 fcc0 	bl	8004340 <BSP_LCD_SetTextColor>
    data = (uint32_t)(FFT_MAG[0] / f);
 80029c0:	4b33      	ldr	r3, [pc, #204]	@ (8002a90 <show_data_menu_one+0x120>)
 80029c2:	edd3 6a00 	vldr	s13, [r3]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	ee07 3a90 	vmov	s15, r3
 80029cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029d8:	ee17 3a90 	vmov	r3, s15
 80029dc:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 1; i < FFT_SIZE; i++) {
 80029de:	2301      	movs	r3, #1
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	e03f      	b.n	8002a64 <show_data_menu_one+0xf4>
        data_last = data;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	613b      	str	r3, [r7, #16]
        data = (uint32_t)(FFT_MAG[i] / f);
 80029e8:	4a29      	ldr	r2, [pc, #164]	@ (8002a90 <show_data_menu_one+0x120>)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	edd3 6a00 	vldr	s13, [r3]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a06:	ee17 3a90 	vmov	r3, s15
 8002a0a:	617b      	str	r3, [r7, #20]
        if (data > Y_OFFSET) data = Y_OFFSET;
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d901      	bls.n	8002a18 <show_data_menu_one+0xa8>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	617b      	str	r3, [r7, #20]
        if (data_last > Y_OFFSET) data_last = Y_OFFSET;
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d901      	bls.n	8002a24 <show_data_menu_one+0xb4>
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	613b      	str	r3, [r7, #16]
        BSP_LCD_DrawLine(3 * (i - 1), Y_OFFSET - data_last, 3 * i, Y_OFFSET - data);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	0052      	lsls	r2, r2, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b03      	subs	r3, #3
 8002a32:	b298      	uxth	r0, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	b299      	uxth	r1, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	0052      	lsls	r2, r2, #1
 8002a48:	4413      	add	r3, r2
 8002a4a:	b29c      	uxth	r4, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	4622      	mov	r2, r4
 8002a5a:	f001 fde7 	bl	800462c <BSP_LCD_DrawLine>
    for (uint32_t i = 1; i < FFT_SIZE; i++) {
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	3301      	adds	r3, #1
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2bff      	cmp	r3, #255	@ 0xff
 8002a68:	d9bc      	bls.n	80029e4 <show_data_menu_one+0x74>
    }

    // Optional: Display peak frequency and velocity
    FMCW_getPeakMangitudeFrequency();  // Also shows frequency on LCD
 8002a6a:	f7ff fca5 	bl	80023b8 <FMCW_getPeakMangitudeFrequency>
    if(calibrate_status == 2){
 8002a6e:	4b09      	ldr	r3, [pc, #36]	@ (8002a94 <show_data_menu_one+0x124>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d106      	bne.n	8002a84 <show_data_menu_one+0x114>
    	FMCW_applyCalibrationFft();
 8002a76:	f7ff fdd3 	bl	8002620 <FMCW_applyCalibrationFft>
    	FMCW_getRadialVelocity();
 8002a7a:	f7ff fd07 	bl	800248c <FMCW_getRadialVelocity>
    	//FMCW_show_fft_magnitude_scaled(0.001);
    	//FMCW_getPeakMangitudeFrequency();
    	MEAS_data_ready = false;
 8002a7e:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <show_data_menu_one+0x128>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]


    }
}
 8002a84:	bf00      	nop
 8002a86:	371c      	adds	r7, #28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd90      	pop	{r4, r7, pc}
 8002a8c:	ff0000ff 	.word	0xff0000ff
 8002a90:	20001bcc 	.word	0x20001bcc
 8002a94:	200023e4 	.word	0x200023e4
 8002a98:	200003c0 	.word	0x200003c0

08002a9c <MENU_draw>:
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(void)
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(MENU_FONT);
 8002aa2:	4852      	ldr	r0, [pc, #328]	@ (8002bec <MENU_draw+0x150>)
 8002aa4:	f001 fc7e 	bl	80043a4 <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MENU_Y;
 8002aa8:	f001 fbca 	bl	8004240 <BSP_LCD_GetYSize>
 8002aac:	4603      	mov	r3, r0
 8002aae:	3b28      	subs	r3, #40	@ 0x28
 8002ab0:	613b      	str	r3, [r7, #16]
	m = MENU_MARGIN;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	60fb      	str	r3, [r7, #12]
	w = BSP_LCD_GetXSize()/MENU_ENTRY_COUNT;
 8002ab6:	f001 fbb7 	bl	8004228 <BSP_LCD_GetXSize>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4a4c      	ldr	r2, [pc, #304]	@ (8002bf0 <MENU_draw+0x154>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	089b      	lsrs	r3, r3, #2
 8002ac4:	60bb      	str	r3, [r7, #8]
	h = MENU_HEIGHT;
 8002ac6:	2328      	movs	r3, #40	@ 0x28
 8002ac8:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	e084      	b.n	8002bda <MENU_draw+0x13e>
		x = i*w;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	fb02 f303 	mul.w	r3, r2, r3
 8002ad8:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(MENU_entry[i].back_color);
 8002ada:	4946      	ldr	r1, [pc, #280]	@ (8002bf4 <MENU_draw+0x158>)
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	440b      	add	r3, r1
 8002ae8:	3324      	adds	r3, #36	@ 0x24
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f001 fc27 	bl	8004340 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	b298      	uxth	r0, r3
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	b299      	uxth	r1, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	b29c      	uxth	r4, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	4622      	mov	r2, r4
 8002b2c:	f001 fe48 	bl	80047c0 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(MENU_entry[i].back_color);
 8002b30:	4930      	ldr	r1, [pc, #192]	@ (8002bf4 <MENU_draw+0x158>)
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	3324      	adds	r3, #36	@ 0x24
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f001 fc14 	bl	8004370 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(MENU_entry[i].text_color);
 8002b48:	492a      	ldr	r1, [pc, #168]	@ (8002bf4 <MENU_draw+0x158>)
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	3320      	adds	r3, #32
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f001 fbf0 	bl	8004340 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	0052      	lsls	r2, r2, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	4413      	add	r3, r2
 8002b72:	b298      	uxth	r0, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	0052      	lsls	r2, r2, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line1, LEFT_MODE);
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4a18      	ldr	r2, [pc, #96]	@ (8002bf4 <MENU_draw+0x158>)
 8002b94:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 8002b96:	2303      	movs	r3, #3
 8002b98:	f001 fc8a 	bl	80044b0 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	0052      	lsls	r2, r2, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	b298      	uxth	r0, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	085b      	lsrs	r3, r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line2, LEFT_MODE);
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	3310      	adds	r3, #16
 8002bca:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf4 <MENU_draw+0x158>)
 8002bcc:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 8002bce:	2303      	movs	r3, #3
 8002bd0:	f001 fc6e 	bl	80044b0 <BSP_LCD_DisplayStringAt>
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2b05      	cmp	r3, #5
 8002bde:	f67f af77 	bls.w	8002ad0 <MENU_draw+0x34>
	}
}
 8002be2:	bf00      	nop
 8002be4:	bf00      	nop
 8002be6:	371c      	adds	r7, #28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd90      	pop	{r4, r7, pc}
 8002bec:	20000188 	.word	0x20000188
 8002bf0:	aaaaaaab 	.word	0xaaaaaaab
 8002bf4:	20000010 	.word	0x20000010

08002bf8 <MENU_hint>:
/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_hint(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	f001 fbb6 	bl	8004370 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002c04:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002c08:	f001 fb9a 	bl	8004340 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 8002c0c:	4818      	ldr	r0, [pc, #96]	@ (8002c70 <MENU_hint+0x78>)
 8002c0e:	f001 fbc9 	bl	80043a4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"KEK-CODE", LEFT_MODE);
 8002c12:	2303      	movs	r3, #3
 8002c14:	4a17      	ldr	r2, [pc, #92]	@ (8002c74 <MENU_hint+0x7c>)
 8002c16:	210a      	movs	r1, #10
 8002c18:	2005      	movs	r0, #5
 8002c1a:	f001 fc49 	bl	80044b0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 8002c1e:	4816      	ldr	r0, [pc, #88]	@ (8002c78 <MENU_hint+0x80>)
 8002c20:	f001 fbc0 	bl	80043a4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Touch a menu item", LEFT_MODE);
 8002c24:	2303      	movs	r3, #3
 8002c26:	4a15      	ldr	r2, [pc, #84]	@ (8002c7c <MENU_hint+0x84>)
 8002c28:	213c      	movs	r1, #60	@ 0x3c
 8002c2a:	2005      	movs	r0, #5
 8002c2c:	f001 fc40 	bl	80044b0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 80, (uint8_t *)"to start an ADC demo", LEFT_MODE);
 8002c30:	2303      	movs	r3, #3
 8002c32:	4a13      	ldr	r2, [pc, #76]	@ (8002c80 <MENU_hint+0x88>)
 8002c34:	2150      	movs	r1, #80	@ 0x50
 8002c36:	2005      	movs	r0, #5
 8002c38:	f001 fc3a 	bl	80044b0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 110, (uint8_t *)"Switch DAC on/off", LEFT_MODE);
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	4a11      	ldr	r2, [pc, #68]	@ (8002c84 <MENU_hint+0x8c>)
 8002c40:	216e      	movs	r1, #110	@ 0x6e
 8002c42:	2005      	movs	r0, #5
 8002c44:	f001 fc34 	bl	80044b0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 130, (uint8_t *)"with blue pushbutton", LEFT_MODE);
 8002c48:	2303      	movs	r3, #3
 8002c4a:	4a0f      	ldr	r2, [pc, #60]	@ (8002c88 <MENU_hint+0x90>)
 8002c4c:	2182      	movs	r1, #130	@ 0x82
 8002c4e:	2005      	movs	r0, #5
 8002c50:	f001 fc2e 	bl	80044b0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"(c) hhrt@zhaw.ch", LEFT_MODE);
 8002c54:	2303      	movs	r3, #3
 8002c56:	4a0d      	ldr	r2, [pc, #52]	@ (8002c8c <MENU_hint+0x94>)
 8002c58:	21a0      	movs	r1, #160	@ 0xa0
 8002c5a:	2005      	movs	r0, #5
 8002c5c:	f001 fc28 	bl	80044b0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"Version 27.09.2022", LEFT_MODE);
 8002c60:	2303      	movs	r3, #3
 8002c62:	4a0b      	ldr	r2, [pc, #44]	@ (8002c90 <MENU_hint+0x98>)
 8002c64:	21a0      	movs	r1, #160	@ 0xa0
 8002c66:	2005      	movs	r0, #5
 8002c68:	f001 fc22 	bl	80044b0 <BSP_LCD_DisplayStringAt>
}
 8002c6c:	bf00      	nop
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20000178 	.word	0x20000178
 8002c74:	0800df64 	.word	0x0800df64
 8002c78:	20000180 	.word	0x20000180
 8002c7c:	0800df70 	.word	0x0800df70
 8002c80:	0800df84 	.word	0x0800df84
 8002c84:	0800df9c 	.word	0x0800df9c
 8002c88:	0800dfb0 	.word	0x0800dfb0
 8002c8c:	0800dfc8 	.word	0x0800dfc8
 8002c90:	0800dfdc 	.word	0x0800dfdc

08002c94 <MENU_get_transition>:
	MENU_transition = MENU_NONE;
	return item;
}*/

MENU_item_t MENU_get_transition(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
	/*
	MENU_item_t item = MENU_transition;
	MENU_transition = MENU_NONE;
	return item;
	*/
	return MENU_transition;
 8002c98:	4b03      	ldr	r3, [pc, #12]	@ (8002ca8 <MENU_get_transition+0x14>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	2000000c 	.word	0x2000000c

08002cac <MENU_check_transition>:
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/

void MENU_check_transition(void)
{
 8002cac:	b598      	push	{r3, r4, r7, lr}
 8002cae:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 8002cb0:	482f      	ldr	r0, [pc, #188]	@ (8002d70 <MENU_check_transition+0xc4>)
 8002cb2:	f002 fa3b 	bl	800512c <BSP_TS_GetState>

// Evalboard revision E (blue) has an inverted y-axis in the touch controller
#ifdef EVAL_REV_E
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8002cb6:	f001 fac3 	bl	8004240 <BSP_LCD_GetYSize>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8002d70 <MENU_check_transition+0xc4>)
 8002cc0:	889b      	ldrh	r3, [r3, #4]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d70 <MENU_check_transition+0xc4>)
 8002cc8:	809a      	strh	r2, [r3, #4]
#endif
	// Invert x- and y-axis if LCD ist flipped
#ifdef FLIPPED_LCD
	TS_State.X = BSP_LCD_GetXSize() - TS_State.X;	// Invert the x-axis
 8002cca:	f001 faad 	bl	8004228 <BSP_LCD_GetXSize>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	4b27      	ldr	r3, [pc, #156]	@ (8002d70 <MENU_check_transition+0xc4>)
 8002cd4:	885b      	ldrh	r3, [r3, #2]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	4b25      	ldr	r3, [pc, #148]	@ (8002d70 <MENU_check_transition+0xc4>)
 8002cdc:	805a      	strh	r2, [r3, #2]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8002cde:	f001 faaf 	bl	8004240 <BSP_LCD_GetYSize>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	4b22      	ldr	r3, [pc, #136]	@ (8002d70 <MENU_check_transition+0xc4>)
 8002ce8:	889b      	ldrh	r3, [r3, #4]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	4b20      	ldr	r3, [pc, #128]	@ (8002d70 <MENU_check_transition+0xc4>)
 8002cf0:	809a      	strh	r2, [r3, #4]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
#endif
#ifdef EVAL_REV_E
#endif
*/
	if (TS_State.TouchDetected) {		// If a touch was detected
 8002cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d70 <MENU_check_transition+0xc4>)
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d037      	beq.n	8002d6a <MENU_check_transition+0xbe>
					MENU_transition = item_old;
				}
			}
		}*/

        item_old = item_new;           // Update old item
 8002cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8002d74 <MENU_check_transition+0xc8>)
 8002cfc:	781a      	ldrb	r2, [r3, #0]
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d78 <MENU_check_transition+0xcc>)
 8002d00:	701a      	strb	r2, [r3, #0]
        if ((MENU_Y < TS_State.Y) && (MENU_Y + MENU_HEIGHT > TS_State.Y)) {
 8002d02:	f001 fa9d 	bl	8004240 <BSP_LCD_GetYSize>
 8002d06:	4603      	mov	r3, r0
 8002d08:	3b28      	subs	r3, #40	@ 0x28
 8002d0a:	4a19      	ldr	r2, [pc, #100]	@ (8002d70 <MENU_check_transition+0xc4>)
 8002d0c:	8892      	ldrh	r2, [r2, #4]
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d22b      	bcs.n	8002d6a <MENU_check_transition+0xbe>
 8002d12:	f001 fa95 	bl	8004240 <BSP_LCD_GetYSize>
 8002d16:	4603      	mov	r3, r0
 8002d18:	4a15      	ldr	r2, [pc, #84]	@ (8002d70 <MENU_check_transition+0xc4>)
 8002d1a:	8892      	ldrh	r2, [r2, #4]
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d924      	bls.n	8002d6a <MENU_check_transition+0xbe>
            item_new = TS_State.X / (BSP_LCD_GetXSize() / MENU_ENTRY_COUNT);
 8002d20:	4b13      	ldr	r3, [pc, #76]	@ (8002d70 <MENU_check_transition+0xc4>)
 8002d22:	885b      	ldrh	r3, [r3, #2]
 8002d24:	461c      	mov	r4, r3
 8002d26:	f001 fa7f 	bl	8004228 <BSP_LCD_GetXSize>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4a13      	ldr	r2, [pc, #76]	@ (8002d7c <MENU_check_transition+0xd0>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	089b      	lsrs	r3, r3, #2
 8002d34:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d74 <MENU_check_transition+0xc8>)
 8002d3c:	701a      	strb	r2, [r3, #0]
            if ((item_new < 0) || (item_new >= MENU_ENTRY_COUNT)) {
 8002d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d74 <MENU_check_transition+0xc8>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b05      	cmp	r3, #5
 8002d44:	d902      	bls.n	8002d4c <MENU_check_transition+0xa0>
                item_new = MENU_NONE;  // Out of bounds
 8002d46:	4b0b      	ldr	r3, [pc, #44]	@ (8002d74 <MENU_check_transition+0xc8>)
 8002d48:	2206      	movs	r2, #6
 8002d4a:	701a      	strb	r2, [r3, #0]
            }
            if (item_new == item_old) { // Handle same menu item touch
 8002d4c:	4b09      	ldr	r3, [pc, #36]	@ (8002d74 <MENU_check_transition+0xc8>)
 8002d4e:	781a      	ldrb	r2, [r3, #0]
 8002d50:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <MENU_check_transition+0xcc>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d104      	bne.n	8002d62 <MENU_check_transition+0xb6>
                MENU_transition = item_old;
 8002d58:	4b07      	ldr	r3, [pc, #28]	@ (8002d78 <MENU_check_transition+0xcc>)
 8002d5a:	781a      	ldrb	r2, [r3, #0]
 8002d5c:	4b08      	ldr	r3, [pc, #32]	@ (8002d80 <MENU_check_transition+0xd4>)
 8002d5e:	701a      	strb	r2, [r3, #0]
	} else {
//		sprintf(msg, "No touch detected\r\n");
//		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	}

}
 8002d60:	e003      	b.n	8002d6a <MENU_check_transition+0xbe>
                MENU_transition = item_new;
 8002d62:	4b04      	ldr	r3, [pc, #16]	@ (8002d74 <MENU_check_transition+0xc8>)
 8002d64:	781a      	ldrb	r2, [r3, #0]
 8002d66:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <MENU_check_transition+0xd4>)
 8002d68:	701a      	strb	r2, [r3, #0]
}
 8002d6a:	bf00      	nop
 8002d6c:	bd98      	pop	{r3, r4, r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	200023ec 	.word	0x200023ec
 8002d74:	20000100 	.word	0x20000100
 8002d78:	20000101 	.word	0x20000101
 8002d7c:	aaaaaaab 	.word	0xaaaaaaab
 8002d80:	2000000c 	.word	0x2000000c

08002d84 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 8002d88:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc4 <EXTI15_10_IRQHandler+0x40>)
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d014      	beq.n	8002dbe <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8002d94:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc4 <EXTI15_10_IRQHandler+0x40>)
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc4 <EXTI15_10_IRQHandler+0x40>)
 8002d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d9e:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 8002da0:	f002 f9b8 	bl	8005114 <BSP_TS_ITGetStatus>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 8002daa:	f002 fa71 	bl	8005290 <BSP_TS_ITClear>
			MENU_check_transition();
 8002dae:	f7ff ff7d 	bl	8002cac <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8002db2:	4b04      	ldr	r3, [pc, #16]	@ (8002dc4 <EXTI15_10_IRQHandler+0x40>)
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	4a03      	ldr	r2, [pc, #12]	@ (8002dc4 <EXTI15_10_IRQHandler+0x40>)
 8002db8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dbc:	6153      	str	r3, [r2, #20]
	}
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40013c00 	.word	0x40013c00

08002dc8 <__NVIC_EnableIRQ>:
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	db0b      	blt.n	8002df2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	f003 021f 	and.w	r2, r3, #31
 8002de0:	4907      	ldr	r1, [pc, #28]	@ (8002e00 <__NVIC_EnableIRQ+0x38>)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	2001      	movs	r0, #1
 8002dea:	fa00 f202 	lsl.w	r2, r0, r2
 8002dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	e000e100 	.word	0xe000e100

08002e04 <__NVIC_ClearPendingIRQ>:
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	db0c      	blt.n	8002e30 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	f003 021f 	and.w	r2, r3, #31
 8002e1c:	4907      	ldr	r1, [pc, #28]	@ (8002e3c <__NVIC_ClearPendingIRQ+0x38>)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	2001      	movs	r0, #1
 8002e26:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2a:	3360      	adds	r3, #96	@ 0x60
 8002e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	e000e100 	.word	0xe000e100

08002e40 <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8002e46:	2300      	movs	r3, #0
 8002e48:	607b      	str	r3, [r7, #4]
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e78 <PB_init+0x38>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e78 <PB_init+0x38>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e56:	4b08      	ldr	r3, [pc, #32]	@ (8002e78 <PB_init+0x38>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	607b      	str	r3, [r7, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8002e62:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <PB_init+0x3c>)
 8002e64:	4a05      	ldr	r2, [pc, #20]	@ (8002e7c <PB_init+0x3c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6013      	str	r3, [r2, #0]
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40020000 	.word	0x40020000

08002e80 <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	4b13      	ldr	r3, [pc, #76]	@ (8002ed8 <PB_enableIRQ+0x58>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8e:	4a12      	ldr	r2, [pc, #72]	@ (8002ed8 <PB_enableIRQ+0x58>)
 8002e90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e96:	4b10      	ldr	r3, [pc, #64]	@ (8002ed8 <PB_enableIRQ+0x58>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8002edc <PB_enableIRQ+0x5c>)
 8002ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8002edc <PB_enableIRQ+0x5c>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee0 <PB_enableIRQ+0x60>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4a0c      	ldr	r2, [pc, #48]	@ (8002ee0 <PB_enableIRQ+0x60>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee0 <PB_enableIRQ+0x60>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a09      	ldr	r2, [pc, #36]	@ (8002ee0 <PB_enableIRQ+0x60>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 8002ec2:	2006      	movs	r0, #6
 8002ec4:	f7ff ff9e 	bl	8002e04 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8002ec8:	2006      	movs	r0, #6
 8002eca:	f7ff ff7d 	bl	8002dc8 <__NVIC_EnableIRQ>
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	40013c00 	.word	0x40013c00

08002ee4 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 8002ee8:	4b09      	ldr	r3, [pc, #36]	@ (8002f10 <EXTI0_IRQHandler+0x2c>)
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8002ef4:	4b06      	ldr	r3, [pc, #24]	@ (8002f10 <EXTI0_IRQHandler+0x2c>)
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	4a05      	ldr	r2, [pc, #20]	@ (8002f10 <EXTI0_IRQHandler+0x2c>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8002f00:	4b04      	ldr	r3, [pc, #16]	@ (8002f14 <EXTI0_IRQHandler+0x30>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	701a      	strb	r2, [r3, #0]
	}
}
 8002f06:	bf00      	nop
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	40013c00 	.word	0x40013c00
 8002f14:	200023f4 	.word	0x200023f4

08002f18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	607b      	str	r3, [r7, #4]
 8002f22:	4b10      	ldr	r3, [pc, #64]	@ (8002f64 <HAL_MspInit+0x4c>)
 8002f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f26:	4a0f      	ldr	r2, [pc, #60]	@ (8002f64 <HAL_MspInit+0x4c>)
 8002f28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f64 <HAL_MspInit+0x4c>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f36:	607b      	str	r3, [r7, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	603b      	str	r3, [r7, #0]
 8002f3e:	4b09      	ldr	r3, [pc, #36]	@ (8002f64 <HAL_MspInit+0x4c>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	4a08      	ldr	r2, [pc, #32]	@ (8002f64 <HAL_MspInit+0x4c>)
 8002f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f4a:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <HAL_MspInit+0x4c>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40023800 	.word	0x40023800

08002f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	@ 0x28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1d      	ldr	r2, [pc, #116]	@ (8002ffc <HAL_UART_MspInit+0x94>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d134      	bne.n	8002ff4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8003000 <HAL_UART_MspInit+0x98>)
 8002f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f92:	4a1b      	ldr	r2, [pc, #108]	@ (8003000 <HAL_UART_MspInit+0x98>)
 8002f94:	f043 0310 	orr.w	r3, r3, #16
 8002f98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f9a:	4b19      	ldr	r3, [pc, #100]	@ (8003000 <HAL_UART_MspInit+0x98>)
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	4b15      	ldr	r3, [pc, #84]	@ (8003000 <HAL_UART_MspInit+0x98>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	4a14      	ldr	r2, [pc, #80]	@ (8003000 <HAL_UART_MspInit+0x98>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fb6:	4b12      	ldr	r3, [pc, #72]	@ (8003000 <HAL_UART_MspInit+0x98>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002fc2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fd4:	2307      	movs	r3, #7
 8002fd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd8:	f107 0314 	add.w	r3, r7, #20
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4809      	ldr	r0, [pc, #36]	@ (8003004 <HAL_UART_MspInit+0x9c>)
 8002fe0:	f003 f830 	bl	8006044 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	2025      	movs	r0, #37	@ 0x25
 8002fea:	f002 fba0 	bl	800572e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fee:	2025      	movs	r0, #37	@ 0x25
 8002ff0:	f002 fbb9 	bl	8005766 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002ff4:	bf00      	nop
 8002ff6:	3728      	adds	r7, #40	@ 0x28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40011000 	.word	0x40011000
 8003000:	40023800 	.word	0x40023800
 8003004:	40020000 	.word	0x40020000

08003008 <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 800301a:	bf00      	nop
 800301c:	e7fd      	b.n	800301a <HardFault_Handler+0x4>

0800301e <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 800301e:	b480      	push	{r7}
 8003020:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 8003022:	bf00      	nop
 8003024:	e7fd      	b.n	8003022 <MemManage_Handler+0x4>

08003026 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 800302a:	bf00      	nop
 800302c:	e7fd      	b.n	800302a <BusFault_Handler+0x4>

0800302e <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 800302e:	b480      	push	{r7}
 8003030:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 8003032:	bf00      	nop
 8003034:	e7fd      	b.n	8003032 <UsageFault_Handler+0x4>

08003036 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0
}
 800303a:	bf00      	nop
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8003052:	b480      	push	{r7}
 8003054:	af00      	add	r7, sp, #0
}
 8003056:	bf00      	nop
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8003064:	f002 fa44 	bl	80054f0 <HAL_IncTick>
}
 8003068:	bf00      	nop
 800306a:	bd80      	pop	{r7, pc}

0800306c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003070:	4b16      	ldr	r3, [pc, #88]	@ (80030cc <SystemInit+0x60>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003076:	4a15      	ldr	r2, [pc, #84]	@ (80030cc <SystemInit+0x60>)
 8003078:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800307c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003080:	4b13      	ldr	r3, [pc, #76]	@ (80030d0 <SystemInit+0x64>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a12      	ldr	r2, [pc, #72]	@ (80030d0 <SystemInit+0x64>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800308c:	4b10      	ldr	r3, [pc, #64]	@ (80030d0 <SystemInit+0x64>)
 800308e:	2200      	movs	r2, #0
 8003090:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003092:	4b0f      	ldr	r3, [pc, #60]	@ (80030d0 <SystemInit+0x64>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a0e      	ldr	r2, [pc, #56]	@ (80030d0 <SystemInit+0x64>)
 8003098:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 800309c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80030a2:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <SystemInit+0x64>)
 80030a4:	4a0b      	ldr	r2, [pc, #44]	@ (80030d4 <SystemInit+0x68>)
 80030a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80030a8:	4b09      	ldr	r3, [pc, #36]	@ (80030d0 <SystemInit+0x64>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a08      	ldr	r2, [pc, #32]	@ (80030d0 <SystemInit+0x64>)
 80030ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80030b4:	4b06      	ldr	r3, [pc, #24]	@ (80030d0 <SystemInit+0x64>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030ba:	4b04      	ldr	r3, [pc, #16]	@ (80030cc <SystemInit+0x60>)
 80030bc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80030c0:	609a      	str	r2, [r3, #8]
#endif
}
 80030c2:	bf00      	nop
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000ed00 	.word	0xe000ed00
 80030d0:	40023800 	.word	0x40023800
 80030d4:	24003010 	.word	0x24003010

080030d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80030d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003110 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80030dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80030de:	e003      	b.n	80030e8 <LoopCopyDataInit>

080030e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80030e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003114 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80030e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80030e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80030e6:	3104      	adds	r1, #4

080030e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030e8:	480b      	ldr	r0, [pc, #44]	@ (8003118 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030ea:	4b0c      	ldr	r3, [pc, #48]	@ (800311c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80030ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80030ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030f0:	d3f6      	bcc.n	80030e0 <CopyDataInit>
  ldr  r2, =_sbss
 80030f2:	4a0b      	ldr	r2, [pc, #44]	@ (8003120 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80030f4:	e002      	b.n	80030fc <LoopFillZerobss>

080030f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80030f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030f8:	f842 3b04 	str.w	r3, [r2], #4

080030fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030fc:	4b09      	ldr	r3, [pc, #36]	@ (8003124 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003100:	d3f9      	bcc.n	80030f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003102:	f7ff ffb3 	bl	800306c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003106:	f008 fe07 	bl	800bd18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800310a:	f7fd ff53 	bl	8000fb4 <main>
  bx  lr    
 800310e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003110:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003114:	08026b94 	.word	0x08026b94
  ldr  r0, =_sdata
 8003118:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800311c:	20000364 	.word	0x20000364
  ldr  r2, =_sbss
 8003120:	20000364 	.word	0x20000364
  ldr  r3, = _ebss
 8003124:	2000280c 	.word	0x2000280c

08003128 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003128:	e7fe      	b.n	8003128 <CAN1_RX0_IRQHandler>

0800312a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800312e:	f000 feb9 	bl	8003ea4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8003132:	20ca      	movs	r0, #202	@ 0xca
 8003134:	f000 f95d 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8003138:	20c3      	movs	r0, #195	@ 0xc3
 800313a:	f000 f967 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800313e:	2008      	movs	r0, #8
 8003140:	f000 f964 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8003144:	2050      	movs	r0, #80	@ 0x50
 8003146:	f000 f961 	bl	800340c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800314a:	20cf      	movs	r0, #207	@ 0xcf
 800314c:	f000 f951 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003150:	2000      	movs	r0, #0
 8003152:	f000 f95b 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8003156:	20c1      	movs	r0, #193	@ 0xc1
 8003158:	f000 f958 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800315c:	2030      	movs	r0, #48	@ 0x30
 800315e:	f000 f955 	bl	800340c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8003162:	20ed      	movs	r0, #237	@ 0xed
 8003164:	f000 f945 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8003168:	2064      	movs	r0, #100	@ 0x64
 800316a:	f000 f94f 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800316e:	2003      	movs	r0, #3
 8003170:	f000 f94c 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8003174:	2012      	movs	r0, #18
 8003176:	f000 f949 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800317a:	2081      	movs	r0, #129	@ 0x81
 800317c:	f000 f946 	bl	800340c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8003180:	20e8      	movs	r0, #232	@ 0xe8
 8003182:	f000 f936 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8003186:	2085      	movs	r0, #133	@ 0x85
 8003188:	f000 f940 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800318c:	2000      	movs	r0, #0
 800318e:	f000 f93d 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8003192:	2078      	movs	r0, #120	@ 0x78
 8003194:	f000 f93a 	bl	800340c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8003198:	20cb      	movs	r0, #203	@ 0xcb
 800319a:	f000 f92a 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800319e:	2039      	movs	r0, #57	@ 0x39
 80031a0:	f000 f934 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80031a4:	202c      	movs	r0, #44	@ 0x2c
 80031a6:	f000 f931 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80031aa:	2000      	movs	r0, #0
 80031ac:	f000 f92e 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80031b0:	2034      	movs	r0, #52	@ 0x34
 80031b2:	f000 f92b 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80031b6:	2002      	movs	r0, #2
 80031b8:	f000 f928 	bl	800340c <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80031bc:	20f7      	movs	r0, #247	@ 0xf7
 80031be:	f000 f918 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80031c2:	2020      	movs	r0, #32
 80031c4:	f000 f922 	bl	800340c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80031c8:	20ea      	movs	r0, #234	@ 0xea
 80031ca:	f000 f912 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80031ce:	2000      	movs	r0, #0
 80031d0:	f000 f91c 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80031d4:	2000      	movs	r0, #0
 80031d6:	f000 f919 	bl	800340c <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80031da:	20b1      	movs	r0, #177	@ 0xb1
 80031dc:	f000 f909 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80031e0:	2000      	movs	r0, #0
 80031e2:	f000 f913 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80031e6:	201b      	movs	r0, #27
 80031e8:	f000 f910 	bl	800340c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80031ec:	20b6      	movs	r0, #182	@ 0xb6
 80031ee:	f000 f900 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80031f2:	200a      	movs	r0, #10
 80031f4:	f000 f90a 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80031f8:	20a2      	movs	r0, #162	@ 0xa2
 80031fa:	f000 f907 	bl	800340c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80031fe:	20c0      	movs	r0, #192	@ 0xc0
 8003200:	f000 f8f7 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8003204:	2010      	movs	r0, #16
 8003206:	f000 f901 	bl	800340c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800320a:	20c1      	movs	r0, #193	@ 0xc1
 800320c:	f000 f8f1 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8003210:	2010      	movs	r0, #16
 8003212:	f000 f8fb 	bl	800340c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8003216:	20c5      	movs	r0, #197	@ 0xc5
 8003218:	f000 f8eb 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800321c:	2045      	movs	r0, #69	@ 0x45
 800321e:	f000 f8f5 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8003222:	2015      	movs	r0, #21
 8003224:	f000 f8f2 	bl	800340c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8003228:	20c7      	movs	r0, #199	@ 0xc7
 800322a:	f000 f8e2 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800322e:	2090      	movs	r0, #144	@ 0x90
 8003230:	f000 f8ec 	bl	800340c <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8003234:	2036      	movs	r0, #54	@ 0x36
 8003236:	f000 f8dc 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800323a:	20c8      	movs	r0, #200	@ 0xc8
 800323c:	f000 f8e6 	bl	800340c <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8003240:	20f2      	movs	r0, #242	@ 0xf2
 8003242:	f000 f8d6 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003246:	2000      	movs	r0, #0
 8003248:	f000 f8e0 	bl	800340c <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800324c:	20b0      	movs	r0, #176	@ 0xb0
 800324e:	f000 f8d0 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8003252:	20c2      	movs	r0, #194	@ 0xc2
 8003254:	f000 f8da 	bl	800340c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8003258:	20b6      	movs	r0, #182	@ 0xb6
 800325a:	f000 f8ca 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800325e:	200a      	movs	r0, #10
 8003260:	f000 f8d4 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8003264:	20a7      	movs	r0, #167	@ 0xa7
 8003266:	f000 f8d1 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800326a:	2027      	movs	r0, #39	@ 0x27
 800326c:	f000 f8ce 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8003270:	2004      	movs	r0, #4
 8003272:	f000 f8cb 	bl	800340c <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8003276:	202a      	movs	r0, #42	@ 0x2a
 8003278:	f000 f8bb 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800327c:	2000      	movs	r0, #0
 800327e:	f000 f8c5 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003282:	2000      	movs	r0, #0
 8003284:	f000 f8c2 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003288:	2000      	movs	r0, #0
 800328a:	f000 f8bf 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800328e:	20ef      	movs	r0, #239	@ 0xef
 8003290:	f000 f8bc 	bl	800340c <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8003294:	202b      	movs	r0, #43	@ 0x2b
 8003296:	f000 f8ac 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800329a:	2000      	movs	r0, #0
 800329c:	f000 f8b6 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80032a0:	2000      	movs	r0, #0
 80032a2:	f000 f8b3 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80032a6:	2001      	movs	r0, #1
 80032a8:	f000 f8b0 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80032ac:	203f      	movs	r0, #63	@ 0x3f
 80032ae:	f000 f8ad 	bl	800340c <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80032b2:	20f6      	movs	r0, #246	@ 0xf6
 80032b4:	f000 f89d 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80032b8:	2001      	movs	r0, #1
 80032ba:	f000 f8a7 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80032be:	2000      	movs	r0, #0
 80032c0:	f000 f8a4 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80032c4:	2006      	movs	r0, #6
 80032c6:	f000 f8a1 	bl	800340c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80032ca:	202c      	movs	r0, #44	@ 0x2c
 80032cc:	f000 f891 	bl	80033f2 <ili9341_WriteReg>
  LCD_Delay(200);
 80032d0:	20c8      	movs	r0, #200	@ 0xc8
 80032d2:	f000 fed5 	bl	8004080 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80032d6:	2026      	movs	r0, #38	@ 0x26
 80032d8:	f000 f88b 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80032dc:	2001      	movs	r0, #1
 80032de:	f000 f895 	bl	800340c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80032e2:	20e0      	movs	r0, #224	@ 0xe0
 80032e4:	f000 f885 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80032e8:	200f      	movs	r0, #15
 80032ea:	f000 f88f 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80032ee:	2029      	movs	r0, #41	@ 0x29
 80032f0:	f000 f88c 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80032f4:	2024      	movs	r0, #36	@ 0x24
 80032f6:	f000 f889 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80032fa:	200c      	movs	r0, #12
 80032fc:	f000 f886 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8003300:	200e      	movs	r0, #14
 8003302:	f000 f883 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8003306:	2009      	movs	r0, #9
 8003308:	f000 f880 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800330c:	204e      	movs	r0, #78	@ 0x4e
 800330e:	f000 f87d 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8003312:	2078      	movs	r0, #120	@ 0x78
 8003314:	f000 f87a 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8003318:	203c      	movs	r0, #60	@ 0x3c
 800331a:	f000 f877 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800331e:	2009      	movs	r0, #9
 8003320:	f000 f874 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8003324:	2013      	movs	r0, #19
 8003326:	f000 f871 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800332a:	2005      	movs	r0, #5
 800332c:	f000 f86e 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8003330:	2017      	movs	r0, #23
 8003332:	f000 f86b 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003336:	2011      	movs	r0, #17
 8003338:	f000 f868 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800333c:	2000      	movs	r0, #0
 800333e:	f000 f865 	bl	800340c <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8003342:	20e1      	movs	r0, #225	@ 0xe1
 8003344:	f000 f855 	bl	80033f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003348:	2000      	movs	r0, #0
 800334a:	f000 f85f 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800334e:	2016      	movs	r0, #22
 8003350:	f000 f85c 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8003354:	201b      	movs	r0, #27
 8003356:	f000 f859 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800335a:	2004      	movs	r0, #4
 800335c:	f000 f856 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003360:	2011      	movs	r0, #17
 8003362:	f000 f853 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8003366:	2007      	movs	r0, #7
 8003368:	f000 f850 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800336c:	2031      	movs	r0, #49	@ 0x31
 800336e:	f000 f84d 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8003372:	2033      	movs	r0, #51	@ 0x33
 8003374:	f000 f84a 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8003378:	2042      	movs	r0, #66	@ 0x42
 800337a:	f000 f847 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800337e:	2005      	movs	r0, #5
 8003380:	f000 f844 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003384:	200c      	movs	r0, #12
 8003386:	f000 f841 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800338a:	200a      	movs	r0, #10
 800338c:	f000 f83e 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8003390:	2028      	movs	r0, #40	@ 0x28
 8003392:	f000 f83b 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8003396:	202f      	movs	r0, #47	@ 0x2f
 8003398:	f000 f838 	bl	800340c <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800339c:	200f      	movs	r0, #15
 800339e:	f000 f835 	bl	800340c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80033a2:	2011      	movs	r0, #17
 80033a4:	f000 f825 	bl	80033f2 <ili9341_WriteReg>
  LCD_Delay(200);
 80033a8:	20c8      	movs	r0, #200	@ 0xc8
 80033aa:	f000 fe69 	bl	8004080 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80033ae:	2029      	movs	r0, #41	@ 0x29
 80033b0:	f000 f81f 	bl	80033f2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80033b4:	202c      	movs	r0, #44	@ 0x2c
 80033b6:	f000 f81c 	bl	80033f2 <ili9341_WriteReg>
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}

080033be <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80033c2:	f000 fd6f 	bl	8003ea4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80033c6:	2103      	movs	r1, #3
 80033c8:	20d3      	movs	r0, #211	@ 0xd3
 80033ca:	f000 f82c 	bl	8003426 <ili9341_ReadData>
 80033ce:	4603      	mov	r3, r0
 80033d0:	b29b      	uxth	r3, r3
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80033da:	2029      	movs	r0, #41	@ 0x29
 80033dc:	f000 f809 	bl	80033f2 <ili9341_WriteReg>
}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80033e8:	2028      	movs	r0, #40	@ 0x28
 80033ea:	f000 f802 	bl	80033f2 <ili9341_WriteReg>
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	4603      	mov	r3, r0
 80033fa:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fdea 	bl	8003fd8 <LCD_IO_WriteReg>
}
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fdbb 	bl	8003f94 <LCD_IO_WriteData>
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b082      	sub	sp, #8
 800342a:	af00      	add	r7, sp, #0
 800342c:	4603      	mov	r3, r0
 800342e:	460a      	mov	r2, r1
 8003430:	80fb      	strh	r3, [r7, #6]
 8003432:	4613      	mov	r3, r2
 8003434:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8003436:	797a      	ldrb	r2, [r7, #5]
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	4611      	mov	r1, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fded 	bl	800401c <LCD_IO_ReadData>
 8003442:	4603      	mov	r3, r0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8003450:	23f0      	movs	r3, #240	@ 0xf0
}
 8003452:	4618      	mov	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8003460:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fa59 	bl	8003934 <stmpe811_GetInstance>
 8003482:	4603      	mov	r3, r0
 8003484:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	2bff      	cmp	r3, #255	@ 0xff
 800348a:	d112      	bne.n	80034b2 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 800348c:	2000      	movs	r0, #0
 800348e:	f000 fa51 	bl	8003934 <stmpe811_GetInstance>
 8003492:	4603      	mov	r3, r0
 8003494:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8003496:	7bbb      	ldrb	r3, [r7, #14]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d80a      	bhi.n	80034b2 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 800349c:	7bbb      	ldrb	r3, [r7, #14]
 800349e:	88fa      	ldrh	r2, [r7, #6]
 80034a0:	b2d1      	uxtb	r1, r2
 80034a2:	4a06      	ldr	r2, [pc, #24]	@ (80034bc <stmpe811_Init+0x4c>)
 80034a4:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 80034a6:	f000 fdf6 	bl	8004096 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 f807 	bl	80034c0 <stmpe811_Reset>
    }
  }
}
 80034b2:	bf00      	nop
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	200023f8 	.word	0x200023f8

080034c0 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80034ca:	88fb      	ldrh	r3, [r7, #6]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2202      	movs	r2, #2
 80034d0:	2103      	movs	r1, #3
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fdeb 	bl	80040ae <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80034d8:	200a      	movs	r0, #10
 80034da:	f000 fe24 	bl	8004126 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2200      	movs	r2, #0
 80034e4:	2103      	movs	r1, #3
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fde1 	bl	80040ae <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 80034ec:	2002      	movs	r0, #2
 80034ee:	f000 fe1a 	bl	8004126 <IOE_Delay>
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80034fa:	b590      	push	{r4, r7, lr}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	4603      	mov	r3, r0
 8003502:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8003504:	f000 fdc7 	bl	8004096 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2100      	movs	r1, #0
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fde0 	bl	80040d4 <IOE_Read>
 8003514:	4603      	mov	r3, r0
 8003516:	b21b      	sxth	r3, r3
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2101      	movs	r1, #1
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fdd6 	bl	80040d4 <IOE_Read>
 8003528:	4603      	mov	r3, r0
 800352a:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800352c:	4323      	orrs	r3, r4
 800352e:	b21b      	sxth	r3, r3
 8003530:	b29b      	uxth	r3, r3
}
 8003532:	4618      	mov	r0, r3
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	bd90      	pop	{r4, r7, pc}

0800353a <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	4603      	mov	r3, r0
 8003542:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2109      	movs	r1, #9
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fdc0 	bl	80040d4 <IOE_Read>
 8003554:	4603      	mov	r3, r0
 8003556:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8003560:	88fb      	ldrh	r3, [r7, #6]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	2109      	movs	r1, #9
 8003568:	4618      	mov	r0, r3
 800356a:	f000 fda0 	bl	80040ae <IOE_Write>
}
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	4603      	mov	r3, r0
 800357e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003580:	2300      	movs	r3, #0
 8003582:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2109      	movs	r1, #9
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fda2 	bl	80040d4 <IOE_Read>
 8003590:	4603      	mov	r3, r0
 8003592:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	f023 0301 	bic.w	r3, r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	2109      	movs	r1, #9
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fd82 	bl	80040ae <IOE_Write>
    
}
 80035aa:	bf00      	nop
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	4603      	mov	r3, r0
 80035ba:	460a      	mov	r2, r1
 80035bc:	80fb      	strh	r3, [r7, #6]
 80035be:	4613      	mov	r3, r2
 80035c0:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	210a      	movs	r1, #10
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fd81 	bl	80040d4 <IOE_Read>
 80035d2:	4603      	mov	r3, r0
 80035d4:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 80035d6:	7bfa      	ldrb	r2, [r7, #15]
 80035d8:	797b      	ldrb	r3, [r7, #5]
 80035da:	4313      	orrs	r3, r2
 80035dc:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	7bfa      	ldrb	r2, [r7, #15]
 80035e4:	210a      	movs	r1, #10
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fd61 	bl	80040ae <IOE_Write>
}
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	460a      	mov	r2, r1
 80035fe:	80fb      	strh	r3, [r7, #6]
 8003600:	4613      	mov	r3, r2
 8003602:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	210a      	movs	r1, #10
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fd60 	bl	80040d4 <IOE_Read>
 8003614:	4603      	mov	r3, r0
 8003616:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8003618:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800361c:	43db      	mvns	r3, r3
 800361e:	b25a      	sxtb	r2, r3
 8003620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003624:	4013      	ands	r3, r2
 8003626:	b25b      	sxtb	r3, r3
 8003628:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	7bfa      	ldrb	r2, [r7, #15]
 8003630:	210a      	movs	r1, #10
 8003632:	4618      	mov	r0, r3
 8003634:	f000 fd3b 	bl	80040ae <IOE_Write>
}
 8003638:	bf00      	nop
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	460a      	mov	r2, r1
 800364a:	80fb      	strh	r3, [r7, #6]
 800364c:	4613      	mov	r3, r2
 800364e:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8003650:	88fb      	ldrh	r3, [r7, #6]
 8003652:	b2db      	uxtb	r3, r3
 8003654:	210b      	movs	r1, #11
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fd3c 	bl	80040d4 <IOE_Read>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	797b      	ldrb	r3, [r7, #5]
 8003662:	4013      	ands	r3, r2
 8003664:	b2db      	uxtb	r3, r3
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	4603      	mov	r3, r0
 8003676:	460a      	mov	r2, r1
 8003678:	80fb      	strh	r3, [r7, #6]
 800367a:	4613      	mov	r3, r2
 800367c:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	797a      	ldrb	r2, [r7, #5]
 8003684:	210b      	movs	r1, #11
 8003686:	4618      	mov	r0, r3
 8003688:	f000 fd11 	bl	80040ae <IOE_Write>
}
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	6039      	str	r1, [r7, #0]
 800369e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2117      	movs	r1, #23
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fd12 	bl	80040d4 <IOE_Read>
 80036b0:	4603      	mov	r3, r0
 80036b2:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	b25b      	sxtb	r3, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	b25a      	sxtb	r2, r3
 80036bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c0:	4013      	ands	r3, r2
 80036c2:	b25b      	sxtb	r3, r3
 80036c4:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	7bfa      	ldrb	r2, [r7, #15]
 80036cc:	2117      	movs	r1, #23
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 fced 	bl	80040ae <IOE_Write>
}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80036e6:	88fb      	ldrh	r3, [r7, #6]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2104      	movs	r1, #4
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fcf1 	bl	80040d4 <IOE_Read>
 80036f2:	4603      	mov	r3, r0
 80036f4:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
 80036f8:	f023 0304 	bic.w	r3, r3, #4
 80036fc:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	7bfa      	ldrb	r2, [r7, #15]
 8003704:	2104      	movs	r1, #4
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fcd1 	bl	80040ae <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	21f0      	movs	r1, #240	@ 0xf0
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff ffbf 	bl	8003694 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	f023 0303 	bic.w	r3, r3, #3
 800371c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800371e:	88fb      	ldrh	r3, [r7, #6]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	7bfa      	ldrb	r2, [r7, #15]
 8003724:	2104      	movs	r1, #4
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fcc1 	bl	80040ae <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 800372c:	88fb      	ldrh	r3, [r7, #6]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2249      	movs	r2, #73	@ 0x49
 8003732:	2120      	movs	r1, #32
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fcba 	bl	80040ae <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 800373a:	2002      	movs	r0, #2
 800373c:	f000 fcf3 	bl	8004126 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2201      	movs	r2, #1
 8003746:	2121      	movs	r1, #33	@ 0x21
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fcb0 	bl	80040ae <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	229a      	movs	r2, #154	@ 0x9a
 8003754:	2141      	movs	r1, #65	@ 0x41
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fca9 	bl	80040ae <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800375c:	88fb      	ldrh	r3, [r7, #6]
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2201      	movs	r2, #1
 8003762:	214a      	movs	r1, #74	@ 0x4a
 8003764:	4618      	mov	r0, r3
 8003766:	f000 fca2 	bl	80040ae <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800376a:	88fb      	ldrh	r3, [r7, #6]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2201      	movs	r2, #1
 8003770:	214b      	movs	r1, #75	@ 0x4b
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fc9b 	bl	80040ae <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003778:	88fb      	ldrh	r3, [r7, #6]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2200      	movs	r2, #0
 800377e:	214b      	movs	r1, #75	@ 0x4b
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fc94 	bl	80040ae <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8003786:	88fb      	ldrh	r3, [r7, #6]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2201      	movs	r2, #1
 800378c:	2156      	movs	r1, #86	@ 0x56
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fc8d 	bl	80040ae <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8003794:	88fb      	ldrh	r3, [r7, #6]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2201      	movs	r2, #1
 800379a:	2158      	movs	r1, #88	@ 0x58
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fc86 	bl	80040ae <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2201      	movs	r2, #1
 80037a8:	2140      	movs	r1, #64	@ 0x40
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fc7f 	bl	80040ae <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 80037b0:	88fb      	ldrh	r3, [r7, #6]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	22ff      	movs	r2, #255	@ 0xff
 80037b6:	210b      	movs	r1, #11
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fc78 	bl	80040ae <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 80037be:	2002      	movs	r0, #2
 80037c0:	f000 fcb1 	bl	8004126 <IOE_Delay>
}
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2140      	movs	r1, #64	@ 0x40
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fc77 	bl	80040d4 <IOE_Read>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ec:	2b80      	cmp	r3, #128	@ 0x80
 80037ee:	bf0c      	ite	eq
 80037f0:	2301      	moveq	r3, #1
 80037f2:	2300      	movne	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80037f8:	7bbb      	ldrb	r3, [r7, #14]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	214c      	movs	r1, #76	@ 0x4c
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fc65 	bl	80040d4 <IOE_Read>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d010      	beq.n	8003832 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
 8003814:	e00d      	b.n	8003832 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003816:	88fb      	ldrh	r3, [r7, #6]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2201      	movs	r2, #1
 800381c:	214b      	movs	r1, #75	@ 0x4b
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fc45 	bl	80040ae <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2200      	movs	r2, #0
 800382a:	214b      	movs	r1, #75	@ 0x4b
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fc3e 	bl	80040ae <IOE_Write>
  }
  
  return ret;
 8003832:	7bfb      	ldrb	r3, [r7, #15]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 800384a:	89fb      	ldrh	r3, [r7, #14]
 800384c:	b2d8      	uxtb	r0, r3
 800384e:	f107 0210 	add.w	r2, r7, #16
 8003852:	2304      	movs	r3, #4
 8003854:	21d7      	movs	r1, #215	@ 0xd7
 8003856:	f000 fc50 	bl	80040fa <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 800385a:	7c3b      	ldrb	r3, [r7, #16]
 800385c:	061a      	lsls	r2, r3, #24
 800385e:	7c7b      	ldrb	r3, [r7, #17]
 8003860:	041b      	lsls	r3, r3, #16
 8003862:	431a      	orrs	r2, r3
 8003864:	7cbb      	ldrb	r3, [r7, #18]
 8003866:	021b      	lsls	r3, r3, #8
 8003868:	4313      	orrs	r3, r2
 800386a:	7cfa      	ldrb	r2, [r7, #19]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	0d1b      	lsrs	r3, r3, #20
 8003874:	b29a      	uxth	r2, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	0a1b      	lsrs	r3, r3, #8
 800387e:	b29b      	uxth	r3, r3
 8003880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003884:	b29a      	uxth	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800388a:	89fb      	ldrh	r3, [r7, #14]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2201      	movs	r2, #1
 8003890:	214b      	movs	r1, #75	@ 0x4b
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fc0b 	bl	80040ae <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003898:	89fb      	ldrh	r3, [r7, #14]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2200      	movs	r2, #0
 800389e:	214b      	movs	r1, #75	@ 0x4b
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fc04 	bl	80040ae <IOE_Write>
}
 80038a6:	bf00      	nop
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b082      	sub	sp, #8
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	4603      	mov	r3, r0
 80038b6:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 80038b8:	f000 fbf3 	bl	80040a2 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 80038bc:	88fb      	ldrh	r3, [r7, #6]
 80038be:	211f      	movs	r1, #31
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fe76 	bl	80035b2 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fe36 	bl	800353a <stmpe811_EnableGlobalIT>
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	4603      	mov	r3, r0
 80038de:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80038e0:	88fb      	ldrh	r3, [r7, #6]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff fe47 	bl	8003576 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	211f      	movs	r1, #31
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fe81 	bl	80035f4 <stmpe811_DisableITSource>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	4603      	mov	r3, r0
 8003902:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	211f      	movs	r1, #31
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fe99 	bl	8003640 <stmpe811_ReadGITStatus>
 800390e:	4603      	mov	r3, r0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	211f      	movs	r1, #31
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff fea1 	bl	800366e <stmpe811_ClearGlobalIT>
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8003942:	2300      	movs	r3, #0
 8003944:	73fb      	strb	r3, [r7, #15]
 8003946:	e00b      	b.n	8003960 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8003948:	7bfb      	ldrb	r3, [r7, #15]
 800394a:	4a0a      	ldr	r2, [pc, #40]	@ (8003974 <stmpe811_GetInstance+0x40>)
 800394c:	5cd3      	ldrb	r3, [r2, r3]
 800394e:	461a      	mov	r2, r3
 8003950:	88fb      	ldrh	r3, [r7, #6]
 8003952:	4293      	cmp	r3, r2
 8003954:	d101      	bne.n	800395a <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	e006      	b.n	8003968 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800395a:	7bfb      	ldrb	r3, [r7, #15]
 800395c:	3301      	adds	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d9f0      	bls.n	8003948 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8003966:	23ff      	movs	r3, #255	@ 0xff
}
 8003968:	4618      	mov	r0, r3
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	200023f8 	.word	0x200023f8

08003978 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	@ 0x28
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10e      	bne.n	80039a6 <BSP_LED_Init+0x2e>
 8003988:	2300      	movs	r3, #0
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	4b21      	ldr	r3, [pc, #132]	@ (8003a14 <BSP_LED_Init+0x9c>)
 800398e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003990:	4a20      	ldr	r2, [pc, #128]	@ (8003a14 <BSP_LED_Init+0x9c>)
 8003992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003996:	6313      	str	r3, [r2, #48]	@ 0x30
 8003998:	4b1e      	ldr	r3, [pc, #120]	@ (8003a14 <BSP_LED_Init+0x9c>)
 800399a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	e010      	b.n	80039c8 <BSP_LED_Init+0x50>
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d10d      	bne.n	80039c8 <BSP_LED_Init+0x50>
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	4b18      	ldr	r3, [pc, #96]	@ (8003a14 <BSP_LED_Init+0x9c>)
 80039b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b4:	4a17      	ldr	r2, [pc, #92]	@ (8003a14 <BSP_LED_Init+0x9c>)
 80039b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80039bc:	4b15      	ldr	r3, [pc, #84]	@ (8003a14 <BSP_LED_Init+0x9c>)
 80039be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	4a13      	ldr	r2, [pc, #76]	@ (8003a18 <BSP_LED_Init+0xa0>)
 80039cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039d2:	2301      	movs	r3, #1
 80039d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039d6:	2301      	movs	r3, #1
 80039d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80039da:	2302      	movs	r3, #2
 80039dc:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	4a0e      	ldr	r2, [pc, #56]	@ (8003a1c <BSP_LED_Init+0xa4>)
 80039e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e6:	f107 0214 	add.w	r2, r7, #20
 80039ea:	4611      	mov	r1, r2
 80039ec:	4618      	mov	r0, r3
 80039ee:	f002 fb29 	bl	8006044 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	4a09      	ldr	r2, [pc, #36]	@ (8003a1c <BSP_LED_Init+0xa4>)
 80039f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	4a06      	ldr	r2, [pc, #24]	@ (8003a18 <BSP_LED_Init+0xa0>)
 80039fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a02:	2200      	movs	r2, #0
 8003a04:	4619      	mov	r1, r3
 8003a06:	f002 fcc9 	bl	800639c <HAL_GPIO_WritePin>
}
 8003a0a:	bf00      	nop
 8003a0c:	3728      	adds	r7, #40	@ 0x28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800
 8003a18:	0800e008 	.word	0x0800e008
 8003a1c:	20000168 	.word	0x20000168

08003a20 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	4a07      	ldr	r2, [pc, #28]	@ (8003a4c <BSP_LED_Toggle+0x2c>)
 8003a2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	4906      	ldr	r1, [pc, #24]	@ (8003a50 <BSP_LED_Toggle+0x30>)
 8003a36:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	f002 fcc6 	bl	80063ce <HAL_GPIO_TogglePin>
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000168 	.word	0x20000168
 8003a50:	0800e008 	.word	0x0800e008

08003a54 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08a      	sub	sp, #40	@ 0x28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a33      	ldr	r2, [pc, #204]	@ (8003b30 <I2Cx_MspInit+0xdc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d15f      	bne.n	8003b26 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	4b32      	ldr	r3, [pc, #200]	@ (8003b34 <I2Cx_MspInit+0xe0>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6e:	4a31      	ldr	r2, [pc, #196]	@ (8003b34 <I2Cx_MspInit+0xe0>)
 8003a70:	f043 0304 	orr.w	r3, r3, #4
 8003a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a76:	4b2f      	ldr	r3, [pc, #188]	@ (8003b34 <I2Cx_MspInit+0xe0>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	4b2b      	ldr	r3, [pc, #172]	@ (8003b34 <I2Cx_MspInit+0xe0>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8003b34 <I2Cx_MspInit+0xe0>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a92:	4b28      	ldr	r3, [pc, #160]	@ (8003b34 <I2Cx_MspInit+0xe0>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8003a9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8003aa4:	2312      	movs	r3, #18
 8003aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8003aac:	2302      	movs	r3, #2
 8003aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003ab0:	2304      	movs	r3, #4
 8003ab2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003ab4:	f107 0314 	add.w	r3, r7, #20
 8003ab8:	4619      	mov	r1, r3
 8003aba:	481f      	ldr	r0, [pc, #124]	@ (8003b38 <I2Cx_MspInit+0xe4>)
 8003abc:	f002 fac2 	bl	8006044 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8003ac0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ac4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003ac6:	f107 0314 	add.w	r3, r7, #20
 8003aca:	4619      	mov	r1, r3
 8003acc:	481b      	ldr	r0, [pc, #108]	@ (8003b3c <I2Cx_MspInit+0xe8>)
 8003ace:	f002 fab9 	bl	8006044 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	4b17      	ldr	r3, [pc, #92]	@ (8003b34 <I2Cx_MspInit+0xe0>)
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ada:	4a16      	ldr	r2, [pc, #88]	@ (8003b34 <I2Cx_MspInit+0xe0>)
 8003adc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ae2:	4b14      	ldr	r3, [pc, #80]	@ (8003b34 <I2Cx_MspInit+0xe0>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8003aee:	4b11      	ldr	r3, [pc, #68]	@ (8003b34 <I2Cx_MspInit+0xe0>)
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	4a10      	ldr	r2, [pc, #64]	@ (8003b34 <I2Cx_MspInit+0xe0>)
 8003af4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003af8:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8003afa:	4b0e      	ldr	r3, [pc, #56]	@ (8003b34 <I2Cx_MspInit+0xe0>)
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	4a0d      	ldr	r2, [pc, #52]	@ (8003b34 <I2Cx_MspInit+0xe0>)
 8003b00:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003b04:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003b06:	2200      	movs	r2, #0
 8003b08:	210f      	movs	r1, #15
 8003b0a:	2048      	movs	r0, #72	@ 0x48
 8003b0c:	f001 fe0f 	bl	800572e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003b10:	2048      	movs	r0, #72	@ 0x48
 8003b12:	f001 fe28 	bl	8005766 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003b16:	2200      	movs	r2, #0
 8003b18:	210f      	movs	r1, #15
 8003b1a:	2049      	movs	r0, #73	@ 0x49
 8003b1c:	f001 fe07 	bl	800572e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8003b20:	2049      	movs	r0, #73	@ 0x49
 8003b22:	f001 fe20 	bl	8005766 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8003b26:	bf00      	nop
 8003b28:	3728      	adds	r7, #40	@ 0x28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40005c00 	.word	0x40005c00
 8003b34:	40023800 	.word	0x40023800
 8003b38:	40020000 	.word	0x40020000
 8003b3c:	40020800 	.word	0x40020800

08003b40 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8003b44:	4814      	ldr	r0, [pc, #80]	@ (8003b98 <I2Cx_Init+0x58>)
 8003b46:	f003 f905 	bl	8006d54 <HAL_I2C_GetState>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d121      	bne.n	8003b94 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8003b50:	4b11      	ldr	r3, [pc, #68]	@ (8003b98 <I2Cx_Init+0x58>)
 8003b52:	4a12      	ldr	r2, [pc, #72]	@ (8003b9c <I2Cx_Init+0x5c>)
 8003b54:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8003b56:	4b10      	ldr	r3, [pc, #64]	@ (8003b98 <I2Cx_Init+0x58>)
 8003b58:	4a11      	ldr	r2, [pc, #68]	@ (8003ba0 <I2Cx_Init+0x60>)
 8003b5a:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8003b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b98 <I2Cx_Init+0x58>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8003b62:	4b0d      	ldr	r3, [pc, #52]	@ (8003b98 <I2Cx_Init+0x58>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003b68:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <I2Cx_Init+0x58>)
 8003b6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003b6e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8003b70:	4b09      	ldr	r3, [pc, #36]	@ (8003b98 <I2Cx_Init+0x58>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8003b76:	4b08      	ldr	r3, [pc, #32]	@ (8003b98 <I2Cx_Init+0x58>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8003b7c:	4b06      	ldr	r3, [pc, #24]	@ (8003b98 <I2Cx_Init+0x58>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8003b82:	4b05      	ldr	r3, [pc, #20]	@ (8003b98 <I2Cx_Init+0x58>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8003b88:	4803      	ldr	r0, [pc, #12]	@ (8003b98 <I2Cx_Init+0x58>)
 8003b8a:	f7ff ff63 	bl	8003a54 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8003b8e:	4802      	ldr	r0, [pc, #8]	@ (8003b98 <I2Cx_Init+0x58>)
 8003b90:	f002 fc38 	bl	8006404 <HAL_I2C_Init>
  }
}
 8003b94:	bf00      	nop
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	200023fc 	.word	0x200023fc
 8003b9c:	40005c00 	.word	0x40005c00
 8003ba0:	000186a0 	.word	0x000186a0

08003ba4 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8003baa:	2300      	movs	r3, #0
 8003bac:	603b      	str	r3, [r7, #0]
 8003bae:	4b13      	ldr	r3, [pc, #76]	@ (8003bfc <I2Cx_ITConfig+0x58>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb2:	4a12      	ldr	r2, [pc, #72]	@ (8003bfc <I2Cx_ITConfig+0x58>)
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bba:	4b10      	ldr	r3, [pc, #64]	@ (8003bfc <I2Cx_ITConfig+0x58>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8003bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8003bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c00 <I2Cx_ITConfig+0x5c>)
 8003bd6:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8003bd8:	1d3b      	adds	r3, r7, #4
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4809      	ldr	r0, [pc, #36]	@ (8003c04 <I2Cx_ITConfig+0x60>)
 8003bde:	f002 fa31 	bl	8006044 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8003be2:	2200      	movs	r2, #0
 8003be4:	210f      	movs	r1, #15
 8003be6:	2028      	movs	r0, #40	@ 0x28
 8003be8:	f001 fda1 	bl	800572e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8003bec:	2028      	movs	r0, #40	@ 0x28
 8003bee:	f001 fdba 	bl	8005766 <HAL_NVIC_EnableIRQ>
}
 8003bf2:	bf00      	nop
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	10210000 	.word	0x10210000
 8003c04:	40020000 	.word	0x40020000

08003c08 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af04      	add	r7, sp, #16
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
 8003c12:	460b      	mov	r3, r1
 8003c14:	71bb      	strb	r3, [r7, #6]
 8003c16:	4613      	mov	r3, r2
 8003c18:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	b299      	uxth	r1, r3
 8003c22:	79bb      	ldrb	r3, [r7, #6]
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	4b0b      	ldr	r3, [pc, #44]	@ (8003c54 <I2Cx_WriteData+0x4c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	9302      	str	r3, [sp, #8]
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	9301      	str	r3, [sp, #4]
 8003c30:	1d7b      	adds	r3, r7, #5
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	2301      	movs	r3, #1
 8003c36:	4808      	ldr	r0, [pc, #32]	@ (8003c58 <I2Cx_WriteData+0x50>)
 8003c38:	f002 fd6c 	bl	8006714 <HAL_I2C_Mem_Write>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003c46:	f000 f863 	bl	8003d10 <I2Cx_Error>
  }        
}
 8003c4a:	bf00      	nop
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000170 	.word	0x20000170
 8003c58:	200023fc 	.word	0x200023fc

08003c5c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af04      	add	r7, sp, #16
 8003c62:	4603      	mov	r3, r0
 8003c64:	460a      	mov	r2, r1
 8003c66:	71fb      	strb	r3, [r7, #7]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	b299      	uxth	r1, r3
 8003c78:	79bb      	ldrb	r3, [r7, #6]
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003cac <I2Cx_ReadData+0x50>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	9302      	str	r3, [sp, #8]
 8003c82:	2301      	movs	r3, #1
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	f107 030e 	add.w	r3, r7, #14
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	4808      	ldr	r0, [pc, #32]	@ (8003cb0 <I2Cx_ReadData+0x54>)
 8003c90:	f002 fe3a 	bl	8006908 <HAL_I2C_Mem_Read>
 8003c94:	4603      	mov	r3, r0
 8003c96:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003c9e:	f000 f837 	bl	8003d10 <I2Cx_Error>
  
  }
  return value;
 8003ca2:	7bbb      	ldrb	r3, [r7, #14]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20000170 	.word	0x20000170
 8003cb0:	200023fc 	.word	0x200023fc

08003cb4 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af04      	add	r7, sp, #16
 8003cba:	603a      	str	r2, [r7, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	71fb      	strb	r3, [r7, #7]
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	71bb      	strb	r3, [r7, #6]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	b299      	uxth	r1, r3
 8003cd2:	79bb      	ldrb	r3, [r7, #6]
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003d08 <I2Cx_ReadBuffer+0x54>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	9302      	str	r3, [sp, #8]
 8003cdc:	88bb      	ldrh	r3, [r7, #4]
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	4809      	ldr	r0, [pc, #36]	@ (8003d0c <I2Cx_ReadBuffer+0x58>)
 8003ce8:	f002 fe0e 	bl	8006908 <HAL_I2C_Mem_Read>
 8003cec:	4603      	mov	r3, r0
 8003cee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	e002      	b.n	8003d00 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003cfa:	f000 f809 	bl	8003d10 <I2Cx_Error>

    return 1;
 8003cfe:	2301      	movs	r3, #1
  }
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20000170 	.word	0x20000170
 8003d0c:	200023fc 	.word	0x200023fc

08003d10 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003d14:	4803      	ldr	r0, [pc, #12]	@ (8003d24 <I2Cx_Error+0x14>)
 8003d16:	f002 fcb9 	bl	800668c <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8003d1a:	f7ff ff11 	bl	8003b40 <I2Cx_Init>
}
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	200023fc 	.word	0x200023fc

08003d28 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003d2c:	4819      	ldr	r0, [pc, #100]	@ (8003d94 <SPIx_Init+0x6c>)
 8003d2e:	f005 fab2 	bl	8009296 <HAL_SPI_GetState>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d12b      	bne.n	8003d90 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003d38:	4b16      	ldr	r3, [pc, #88]	@ (8003d94 <SPIx_Init+0x6c>)
 8003d3a:	4a17      	ldr	r2, [pc, #92]	@ (8003d98 <SPIx_Init+0x70>)
 8003d3c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003d3e:	4b15      	ldr	r3, [pc, #84]	@ (8003d94 <SPIx_Init+0x6c>)
 8003d40:	2218      	movs	r2, #24
 8003d42:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003d44:	4b13      	ldr	r3, [pc, #76]	@ (8003d94 <SPIx_Init+0x6c>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003d4a:	4b12      	ldr	r3, [pc, #72]	@ (8003d94 <SPIx_Init+0x6c>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003d50:	4b10      	ldr	r3, [pc, #64]	@ (8003d94 <SPIx_Init+0x6c>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003d56:	4b0f      	ldr	r3, [pc, #60]	@ (8003d94 <SPIx_Init+0x6c>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003d94 <SPIx_Init+0x6c>)
 8003d5e:	2207      	movs	r2, #7
 8003d60:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003d62:	4b0c      	ldr	r3, [pc, #48]	@ (8003d94 <SPIx_Init+0x6c>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003d68:	4b0a      	ldr	r3, [pc, #40]	@ (8003d94 <SPIx_Init+0x6c>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003d6e:	4b09      	ldr	r3, [pc, #36]	@ (8003d94 <SPIx_Init+0x6c>)
 8003d70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d74:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003d76:	4b07      	ldr	r3, [pc, #28]	@ (8003d94 <SPIx_Init+0x6c>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003d7c:	4b05      	ldr	r3, [pc, #20]	@ (8003d94 <SPIx_Init+0x6c>)
 8003d7e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d82:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8003d84:	4803      	ldr	r0, [pc, #12]	@ (8003d94 <SPIx_Init+0x6c>)
 8003d86:	f000 f853 	bl	8003e30 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003d8a:	4802      	ldr	r0, [pc, #8]	@ (8003d94 <SPIx_Init+0x6c>)
 8003d8c:	f004 fcf9 	bl	8008782 <HAL_SPI_Init>
  } 
}
 8003d90:	bf00      	nop
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	20002450 	.word	0x20002450
 8003d98:	40015000 	.word	0x40015000

08003d9c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	4b09      	ldr	r3, [pc, #36]	@ (8003dd4 <SPIx_Read+0x38>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f107 0108 	add.w	r1, r7, #8
 8003db6:	4808      	ldr	r0, [pc, #32]	@ (8003dd8 <SPIx_Read+0x3c>)
 8003db8:	f004 fee0 	bl	8008b7c <HAL_SPI_Receive>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003dc6:	f000 f827 	bl	8003e18 <SPIx_Error>
  }
  
  return readvalue;
 8003dca:	68bb      	ldr	r3, [r7, #8]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20000174 	.word	0x20000174
 8003dd8:	20002450 	.word	0x20002450

08003ddc <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8003dea:	4b09      	ldr	r3, [pc, #36]	@ (8003e10 <SPIx_Write+0x34>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	1db9      	adds	r1, r7, #6
 8003df0:	2201      	movs	r2, #1
 8003df2:	4808      	ldr	r0, [pc, #32]	@ (8003e14 <SPIx_Write+0x38>)
 8003df4:	f004 fd6c 	bl	80088d0 <HAL_SPI_Transmit>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003e02:	f000 f809 	bl	8003e18 <SPIx_Error>
  }
}
 8003e06:	bf00      	nop
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20000174 	.word	0x20000174
 8003e14:	20002450 	.word	0x20002450

08003e18 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003e1c:	4803      	ldr	r0, [pc, #12]	@ (8003e2c <SPIx_Error+0x14>)
 8003e1e:	f004 fd1b 	bl	8008858 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003e22:	f7ff ff81 	bl	8003d28 <SPIx_Init>
}
 8003e26:	bf00      	nop
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20002450 	.word	0x20002450

08003e30 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08a      	sub	sp, #40	@ 0x28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8003e38:	2300      	movs	r3, #0
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	4b17      	ldr	r3, [pc, #92]	@ (8003e9c <SPIx_MspInit+0x6c>)
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e40:	4a16      	ldr	r2, [pc, #88]	@ (8003e9c <SPIx_MspInit+0x6c>)
 8003e42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e46:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e48:	4b14      	ldr	r3, [pc, #80]	@ (8003e9c <SPIx_MspInit+0x6c>)
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	4b10      	ldr	r3, [pc, #64]	@ (8003e9c <SPIx_MspInit+0x6c>)
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5c:	4a0f      	ldr	r2, [pc, #60]	@ (8003e9c <SPIx_MspInit+0x6c>)
 8003e5e:	f043 0320 	orr.w	r3, r3, #32
 8003e62:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e64:	4b0d      	ldr	r3, [pc, #52]	@ (8003e9c <SPIx_MspInit+0x6c>)
 8003e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003e70:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003e76:	2302      	movs	r3, #2
 8003e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003e82:	2305      	movs	r3, #5
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8003e86:	f107 0314 	add.w	r3, r7, #20
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4804      	ldr	r0, [pc, #16]	@ (8003ea0 <SPIx_MspInit+0x70>)
 8003e8e:	f002 f8d9 	bl	8006044 <HAL_GPIO_Init>
}
 8003e92:	bf00      	nop
 8003e94:	3728      	adds	r7, #40	@ 0x28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40021400 	.word	0x40021400

08003ea4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8003eaa:	4b36      	ldr	r3, [pc, #216]	@ (8003f84 <LCD_IO_Init+0xe0>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d164      	bne.n	8003f7c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8003eb2:	4b34      	ldr	r3, [pc, #208]	@ (8003f84 <LCD_IO_Init+0xe0>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	4b32      	ldr	r3, [pc, #200]	@ (8003f88 <LCD_IO_Init+0xe4>)
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec0:	4a31      	ldr	r2, [pc, #196]	@ (8003f88 <LCD_IO_Init+0xe4>)
 8003ec2:	f043 0308 	orr.w	r3, r3, #8
 8003ec6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8003f88 <LCD_IO_Init+0xe4>)
 8003eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003ed4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ed8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003eda:	2301      	movs	r3, #1
 8003edc:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003ee6:	f107 030c 	add.w	r3, r7, #12
 8003eea:	4619      	mov	r1, r3
 8003eec:	4827      	ldr	r0, [pc, #156]	@ (8003f8c <LCD_IO_Init+0xe8>)
 8003eee:	f002 f8a9 	bl	8006044 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	607b      	str	r3, [r7, #4]
 8003ef6:	4b24      	ldr	r3, [pc, #144]	@ (8003f88 <LCD_IO_Init+0xe4>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efa:	4a23      	ldr	r2, [pc, #140]	@ (8003f88 <LCD_IO_Init+0xe4>)
 8003efc:	f043 0308 	orr.w	r3, r3, #8
 8003f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f02:	4b21      	ldr	r3, [pc, #132]	@ (8003f88 <LCD_IO_Init+0xe4>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	607b      	str	r3, [r7, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003f0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003f14:	2301      	movs	r3, #1
 8003f16:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003f20:	f107 030c 	add.w	r3, r7, #12
 8003f24:	4619      	mov	r1, r3
 8003f26:	4819      	ldr	r0, [pc, #100]	@ (8003f8c <LCD_IO_Init+0xe8>)
 8003f28:	f002 f88c 	bl	8006044 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	4b15      	ldr	r3, [pc, #84]	@ (8003f88 <LCD_IO_Init+0xe4>)
 8003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f34:	4a14      	ldr	r2, [pc, #80]	@ (8003f88 <LCD_IO_Init+0xe4>)
 8003f36:	f043 0304 	orr.w	r3, r3, #4
 8003f3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f3c:	4b12      	ldr	r3, [pc, #72]	@ (8003f88 <LCD_IO_Init+0xe4>)
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	603b      	str	r3, [r7, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003f48:	2304      	movs	r3, #4
 8003f4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003f54:	2302      	movs	r3, #2
 8003f56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003f58:	f107 030c 	add.w	r3, r7, #12
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	480c      	ldr	r0, [pc, #48]	@ (8003f90 <LCD_IO_Init+0xec>)
 8003f60:	f002 f870 	bl	8006044 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003f64:	2200      	movs	r2, #0
 8003f66:	2104      	movs	r1, #4
 8003f68:	4809      	ldr	r0, [pc, #36]	@ (8003f90 <LCD_IO_Init+0xec>)
 8003f6a:	f002 fa17 	bl	800639c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003f6e:	2201      	movs	r2, #1
 8003f70:	2104      	movs	r1, #4
 8003f72:	4807      	ldr	r0, [pc, #28]	@ (8003f90 <LCD_IO_Init+0xec>)
 8003f74:	f002 fa12 	bl	800639c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8003f78:	f7ff fed6 	bl	8003d28 <SPIx_Init>
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	3720      	adds	r7, #32
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	200024a8 	.word	0x200024a8
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	40020c00 	.word	0x40020c00
 8003f90:	40020800 	.word	0x40020800

08003f94 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003fa4:	480a      	ldr	r0, [pc, #40]	@ (8003fd0 <LCD_IO_WriteData+0x3c>)
 8003fa6:	f002 f9f9 	bl	800639c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8003faa:	2200      	movs	r2, #0
 8003fac:	2104      	movs	r1, #4
 8003fae:	4809      	ldr	r0, [pc, #36]	@ (8003fd4 <LCD_IO_WriteData+0x40>)
 8003fb0:	f002 f9f4 	bl	800639c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff ff10 	bl	8003ddc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	2104      	movs	r1, #4
 8003fc0:	4804      	ldr	r0, [pc, #16]	@ (8003fd4 <LCD_IO_WriteData+0x40>)
 8003fc2:	f002 f9eb 	bl	800639c <HAL_GPIO_WritePin>
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40020c00 	.word	0x40020c00
 8003fd4:	40020800 	.word	0x40020800

08003fd8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003fe8:	480a      	ldr	r0, [pc, #40]	@ (8004014 <LCD_IO_WriteReg+0x3c>)
 8003fea:	f002 f9d7 	bl	800639c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2104      	movs	r1, #4
 8003ff2:	4809      	ldr	r0, [pc, #36]	@ (8004018 <LCD_IO_WriteReg+0x40>)
 8003ff4:	f002 f9d2 	bl	800639c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff feed 	bl	8003ddc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004002:	2201      	movs	r2, #1
 8004004:	2104      	movs	r1, #4
 8004006:	4804      	ldr	r0, [pc, #16]	@ (8004018 <LCD_IO_WriteReg+0x40>)
 8004008:	f002 f9c8 	bl	800639c <HAL_GPIO_WritePin>
}
 800400c:	bf00      	nop
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40020c00 	.word	0x40020c00
 8004018:	40020800 	.word	0x40020800

0800401c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	460a      	mov	r2, r1
 8004026:	80fb      	strh	r3, [r7, #6]
 8004028:	4613      	mov	r3, r2
 800402a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800402c:	2300      	movs	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8004030:	2200      	movs	r2, #0
 8004032:	2104      	movs	r1, #4
 8004034:	4810      	ldr	r0, [pc, #64]	@ (8004078 <LCD_IO_ReadData+0x5c>)
 8004036:	f002 f9b1 	bl	800639c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800403a:	2200      	movs	r2, #0
 800403c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004040:	480e      	ldr	r0, [pc, #56]	@ (800407c <LCD_IO_ReadData+0x60>)
 8004042:	f002 f9ab 	bl	800639c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fec7 	bl	8003ddc <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800404e:	797b      	ldrb	r3, [r7, #5]
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff fea3 	bl	8003d9c <SPIx_Read>
 8004056:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8004058:	2201      	movs	r2, #1
 800405a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800405e:	4807      	ldr	r0, [pc, #28]	@ (800407c <LCD_IO_ReadData+0x60>)
 8004060:	f002 f99c 	bl	800639c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004064:	2201      	movs	r2, #1
 8004066:	2104      	movs	r1, #4
 8004068:	4803      	ldr	r0, [pc, #12]	@ (8004078 <LCD_IO_ReadData+0x5c>)
 800406a:	f002 f997 	bl	800639c <HAL_GPIO_WritePin>
  
  return readvalue;
 800406e:	68fb      	ldr	r3, [r7, #12]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40020800 	.word	0x40020800
 800407c:	40020c00 	.word	0x40020c00

08004080 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f001 fa51 	bl	8005530 <HAL_Delay>
}
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8004096:	b580      	push	{r7, lr}
 8004098:	af00      	add	r7, sp, #0
  I2Cx_Init();
 800409a:	f7ff fd51 	bl	8003b40 <I2Cx_Init>
}
 800409e:	bf00      	nop
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 80040a6:	f7ff fd7d 	bl	8003ba4 <I2Cx_ITConfig>
}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}

080040ae <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	4603      	mov	r3, r0
 80040b6:	71fb      	strb	r3, [r7, #7]
 80040b8:	460b      	mov	r3, r1
 80040ba:	71bb      	strb	r3, [r7, #6]
 80040bc:	4613      	mov	r3, r2
 80040be:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80040c0:	797a      	ldrb	r2, [r7, #5]
 80040c2:	79b9      	ldrb	r1, [r7, #6]
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff fd9e 	bl	8003c08 <I2Cx_WriteData>
}
 80040cc:	bf00      	nop
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4603      	mov	r3, r0
 80040dc:	460a      	mov	r2, r1
 80040de:	71fb      	strb	r3, [r7, #7]
 80040e0:	4613      	mov	r3, r2
 80040e2:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80040e4:	79ba      	ldrb	r2, [r7, #6]
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	4611      	mov	r1, r2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff fdb6 	bl	8003c5c <I2Cx_ReadData>
 80040f0:	4603      	mov	r3, r0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b082      	sub	sp, #8
 80040fe:	af00      	add	r7, sp, #0
 8004100:	603a      	str	r2, [r7, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	4603      	mov	r3, r0
 8004106:	71fb      	strb	r3, [r7, #7]
 8004108:	460b      	mov	r3, r1
 800410a:	71bb      	strb	r3, [r7, #6]
 800410c:	4613      	mov	r3, r2
 800410e:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8004110:	88bb      	ldrh	r3, [r7, #4]
 8004112:	79b9      	ldrb	r1, [r7, #6]
 8004114:	79f8      	ldrb	r0, [r7, #7]
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	f7ff fdcc 	bl	8003cb4 <I2Cx_ReadBuffer>
 800411c:	4603      	mov	r3, r0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f001 f9fe 	bl	8005530 <HAL_Delay>
}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <BSP_LCD_Init_Flipped>:
/**
 * @brief  Initializes the LCD for flipped operation.
 * LCD orientation is rotated by 180°.
 * @retval LCD state
 */
uint8_t BSP_LCD_Init_Flipped(void){
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
	flippedLcd = true;
 8004140:	4b03      	ldr	r3, [pc, #12]	@ (8004150 <BSP_LCD_Init_Flipped+0x14>)
 8004142:	2201      	movs	r2, #1
 8004144:	701a      	strb	r2, [r3, #0]
	return BSP_LCD_Init();
 8004146:	f000 f805 	bl	8004154 <BSP_LCD_Init>
 800414a:	4603      	mov	r3, r0
}
 800414c:	4618      	mov	r0, r3
 800414e:	bd80      	pop	{r7, pc}
 8004150:	200025e4 	.word	0x200025e4

08004154 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8004158:	4b2d      	ldr	r3, [pc, #180]	@ (8004210 <BSP_LCD_Init+0xbc>)
 800415a:	4a2e      	ldr	r2, [pc, #184]	@ (8004214 <BSP_LCD_Init+0xc0>)
 800415c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800415e:	4b2c      	ldr	r3, [pc, #176]	@ (8004210 <BSP_LCD_Init+0xbc>)
 8004160:	2209      	movs	r2, #9
 8004162:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8004164:	4b2a      	ldr	r3, [pc, #168]	@ (8004210 <BSP_LCD_Init+0xbc>)
 8004166:	2201      	movs	r2, #1
 8004168:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800416a:	4b29      	ldr	r3, [pc, #164]	@ (8004210 <BSP_LCD_Init+0xbc>)
 800416c:	221d      	movs	r2, #29
 800416e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8004170:	4b27      	ldr	r3, [pc, #156]	@ (8004210 <BSP_LCD_Init+0xbc>)
 8004172:	2203      	movs	r2, #3
 8004174:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8004176:	4b26      	ldr	r3, [pc, #152]	@ (8004210 <BSP_LCD_Init+0xbc>)
 8004178:	f240 120d 	movw	r2, #269	@ 0x10d
 800417c:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800417e:	4b24      	ldr	r3, [pc, #144]	@ (8004210 <BSP_LCD_Init+0xbc>)
 8004180:	f240 1243 	movw	r2, #323	@ 0x143
 8004184:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8004186:	4b22      	ldr	r3, [pc, #136]	@ (8004210 <BSP_LCD_Init+0xbc>)
 8004188:	f240 1217 	movw	r2, #279	@ 0x117
 800418c:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800418e:	4b20      	ldr	r3, [pc, #128]	@ (8004210 <BSP_LCD_Init+0xbc>)
 8004190:	f240 1247 	movw	r2, #327	@ 0x147
 8004194:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8004196:	4b1e      	ldr	r3, [pc, #120]	@ (8004210 <BSP_LCD_Init+0xbc>)
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800419e:	4b1c      	ldr	r3, [pc, #112]	@ (8004210 <BSP_LCD_Init+0xbc>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80041a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004210 <BSP_LCD_Init+0xbc>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80041ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004218 <BSP_LCD_Init+0xc4>)
 80041b0:	2208      	movs	r2, #8
 80041b2:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80041b4:	4b18      	ldr	r3, [pc, #96]	@ (8004218 <BSP_LCD_Init+0xc4>)
 80041b6:	22c0      	movs	r2, #192	@ 0xc0
 80041b8:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80041ba:	4b17      	ldr	r3, [pc, #92]	@ (8004218 <BSP_LCD_Init+0xc4>)
 80041bc:	2204      	movs	r2, #4
 80041be:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80041c0:	4b15      	ldr	r3, [pc, #84]	@ (8004218 <BSP_LCD_Init+0xc4>)
 80041c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80041c6:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80041c8:	4813      	ldr	r0, [pc, #76]	@ (8004218 <BSP_LCD_Init+0xc4>)
 80041ca:	f004 f891 	bl	80082f0 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80041ce:	4b10      	ldr	r3, [pc, #64]	@ (8004210 <BSP_LCD_Init+0xbc>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80041d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004210 <BSP_LCD_Init+0xbc>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80041da:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <BSP_LCD_Init+0xbc>)
 80041dc:	2200      	movs	r2, #0
 80041de:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80041e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004210 <BSP_LCD_Init+0xbc>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80041e6:	f000 fb7d 	bl	80048e4 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80041ea:	4809      	ldr	r0, [pc, #36]	@ (8004210 <BSP_LCD_Init+0xbc>)
 80041ec:	f003 f918 	bl	8007420 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80041f0:	4b0a      	ldr	r3, [pc, #40]	@ (800421c <BSP_LCD_Init+0xc8>)
 80041f2:	4a0b      	ldr	r2, [pc, #44]	@ (8004220 <BSP_LCD_Init+0xcc>)
 80041f4:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80041f6:	4b09      	ldr	r3, [pc, #36]	@ (800421c <BSP_LCD_Init+0xc8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80041fe:	f000 fd85 	bl	8004d0c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8004202:	4808      	ldr	r0, [pc, #32]	@ (8004224 <BSP_LCD_Init+0xd0>)
 8004204:	f000 f8ce 	bl	80043a4 <BSP_LCD_SetFont>

  return LCD_OK;
 8004208:	2300      	movs	r3, #0
}  
 800420a:	4618      	mov	r0, r3
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	200024ac 	.word	0x200024ac
 8004214:	40016800 	.word	0x40016800
 8004218:	20002594 	.word	0x20002594
 800421c:	200025e0 	.word	0x200025e0
 8004220:	20000108 	.word	0x20000108
 8004224:	20000178 	.word	0x20000178

08004228 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 800422c:	4b03      	ldr	r3, [pc, #12]	@ (800423c <BSP_LCD_GetXSize+0x14>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004232:	4798      	blx	r3
 8004234:	4603      	mov	r3, r0
}
 8004236:	4618      	mov	r0, r3
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	200025e0 	.word	0x200025e0

08004240 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8004244:	4b03      	ldr	r3, [pc, #12]	@ (8004254 <BSP_LCD_GetYSize+0x14>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424a:	4798      	blx	r3
 800424c:	4603      	mov	r3, r0
}
 800424e:	4618      	mov	r0, r3
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	200025e0 	.word	0x200025e0

08004258 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004258:	b580      	push	{r7, lr}
 800425a:	b090      	sub	sp, #64	@ 0x40
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	6039      	str	r1, [r7, #0]
 8004262:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8004264:	2300      	movs	r3, #0
 8004266:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8004268:	f7ff ffde 	bl	8004228 <BSP_LCD_GetXSize>
 800426c:	4603      	mov	r3, r0
 800426e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004274:	f7ff ffe4 	bl	8004240 <BSP_LCD_GetYSize>
 8004278:	4603      	mov	r3, r0
 800427a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800427c:	2300      	movs	r3, #0
 800427e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8004284:	23ff      	movs	r3, #255	@ 0xff
 8004286:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8004292:	2300      	movs	r3, #0
 8004294:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8004298:	2300      	movs	r3, #0
 800429a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800429e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80042a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80042a4:	2307      	movs	r3, #7
 80042a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80042a8:	f7ff ffbe 	bl	8004228 <BSP_LCD_GetXSize>
 80042ac:	4603      	mov	r3, r0
 80042ae:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80042b0:	f7ff ffc6 	bl	8004240 <BSP_LCD_GetYSize>
 80042b4:	4603      	mov	r3, r0
 80042b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80042b8:	88fa      	ldrh	r2, [r7, #6]
 80042ba:	f107 030c 	add.w	r3, r7, #12
 80042be:	4619      	mov	r1, r3
 80042c0:	4814      	ldr	r0, [pc, #80]	@ (8004314 <BSP_LCD_LayerDefaultInit+0xbc>)
 80042c2:	f003 f987 	bl	80075d4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80042c6:	88fa      	ldrh	r2, [r7, #6]
 80042c8:	4913      	ldr	r1, [pc, #76]	@ (8004318 <BSP_LCD_LayerDefaultInit+0xc0>)
 80042ca:	4613      	mov	r3, r2
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	440b      	add	r3, r1
 80042d4:	3304      	adds	r3, #4
 80042d6:	f04f 32ff 	mov.w	r2, #4294967295
 80042da:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80042dc:	88fa      	ldrh	r2, [r7, #6]
 80042de:	490e      	ldr	r1, [pc, #56]	@ (8004318 <BSP_LCD_LayerDefaultInit+0xc0>)
 80042e0:	4613      	mov	r3, r2
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	4413      	add	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	3308      	adds	r3, #8
 80042ec:	4a0b      	ldr	r2, [pc, #44]	@ (800431c <BSP_LCD_LayerDefaultInit+0xc4>)
 80042ee:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80042f0:	88fa      	ldrh	r2, [r7, #6]
 80042f2:	4909      	ldr	r1, [pc, #36]	@ (8004318 <BSP_LCD_LayerDefaultInit+0xc0>)
 80042f4:	4613      	mov	r3, r2
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8004302:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8004304:	4803      	ldr	r0, [pc, #12]	@ (8004314 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004306:	f003 f9a3 	bl	8007650 <HAL_LTDC_EnableDither>
}
 800430a:	bf00      	nop
 800430c:	3740      	adds	r7, #64	@ 0x40
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	200024ac 	.word	0x200024ac
 8004318:	200025c8 	.word	0x200025c8
 800431c:	20000178 	.word	0x20000178

08004320 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8004328:	4a04      	ldr	r2, [pc, #16]	@ (800433c <BSP_LCD_SelectLayer+0x1c>)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6013      	str	r3, [r2, #0]
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	200025c4 	.word	0x200025c4

08004340 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004348:	4b07      	ldr	r3, [pc, #28]	@ (8004368 <BSP_LCD_SetTextColor+0x28>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4907      	ldr	r1, [pc, #28]	@ (800436c <BSP_LCD_SetTextColor+0x2c>)
 800434e:	4613      	mov	r3, r2
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	601a      	str	r2, [r3, #0]
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	200025c4 	.word	0x200025c4
 800436c:	200025c8 	.word	0x200025c8

08004370 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004378:	4b08      	ldr	r3, [pc, #32]	@ (800439c <BSP_LCD_SetBackColor+0x2c>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	4908      	ldr	r1, [pc, #32]	@ (80043a0 <BSP_LCD_SetBackColor+0x30>)
 800437e:	4613      	mov	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	3304      	adds	r3, #4
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	601a      	str	r2, [r3, #0]
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	200025c4 	.word	0x200025c4
 80043a0:	200025c8 	.word	0x200025c8

080043a4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80043ac:	4b08      	ldr	r3, [pc, #32]	@ (80043d0 <BSP_LCD_SetFont+0x2c>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4908      	ldr	r1, [pc, #32]	@ (80043d4 <BSP_LCD_SetFont+0x30>)
 80043b2:	4613      	mov	r3, r2
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	4413      	add	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	3308      	adds	r3, #8
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	601a      	str	r2, [r3, #0]
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	200025c4 	.word	0x200025c4
 80043d4:	200025c8 	.word	0x200025c8

080043d8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80043d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043da:	b085      	sub	sp, #20
 80043dc:	af02      	add	r7, sp, #8
 80043de:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80043e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004420 <BSP_LCD_Clear+0x48>)
 80043e2:	681c      	ldr	r4, [r3, #0]
 80043e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004420 <BSP_LCD_Clear+0x48>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a0e      	ldr	r2, [pc, #56]	@ (8004424 <BSP_LCD_Clear+0x4c>)
 80043ea:	2134      	movs	r1, #52	@ 0x34
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	4413      	add	r3, r2
 80043f2:	335c      	adds	r3, #92	@ 0x5c
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	461e      	mov	r6, r3
 80043f8:	f7ff ff16 	bl	8004228 <BSP_LCD_GetXSize>
 80043fc:	4605      	mov	r5, r0
 80043fe:	f7ff ff1f 	bl	8004240 <BSP_LCD_GetYSize>
 8004402:	4602      	mov	r2, r0
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	9301      	str	r3, [sp, #4]
 8004408:	2300      	movs	r3, #0
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	4613      	mov	r3, r2
 800440e:	462a      	mov	r2, r5
 8004410:	4631      	mov	r1, r6
 8004412:	4620      	mov	r0, r4
 8004414:	f000 fc42 	bl	8004c9c <FillBuffer>
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004420:	200025c4 	.word	0x200025c4
 8004424:	200024ac 	.word	0x200024ac

08004428 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004428:	b590      	push	{r4, r7, lr}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	4603      	mov	r3, r0
 8004430:	80fb      	strh	r3, [r7, #6]
 8004432:	460b      	mov	r3, r1
 8004434:	80bb      	strh	r3, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800443a:	4b1b      	ldr	r3, [pc, #108]	@ (80044a8 <BSP_LCD_DisplayChar+0x80>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	491b      	ldr	r1, [pc, #108]	@ (80044ac <BSP_LCD_DisplayChar+0x84>)
 8004440:	4613      	mov	r3, r2
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	4413      	add	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	3308      	adds	r3, #8
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6819      	ldr	r1, [r3, #0]
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004456:	4b14      	ldr	r3, [pc, #80]	@ (80044a8 <BSP_LCD_DisplayChar+0x80>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4c14      	ldr	r4, [pc, #80]	@ (80044ac <BSP_LCD_DisplayChar+0x84>)
 800445c:	4613      	mov	r3, r2
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4423      	add	r3, r4
 8004466:	3308      	adds	r3, #8
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800446c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004470:	4b0d      	ldr	r3, [pc, #52]	@ (80044a8 <BSP_LCD_DisplayChar+0x80>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	4c0d      	ldr	r4, [pc, #52]	@ (80044ac <BSP_LCD_DisplayChar+0x84>)
 8004476:	4613      	mov	r3, r2
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	4413      	add	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4423      	add	r3, r4
 8004480:	3308      	adds	r3, #8
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	889b      	ldrh	r3, [r3, #4]
 8004486:	3307      	adds	r3, #7
 8004488:	2b00      	cmp	r3, #0
 800448a:	da00      	bge.n	800448e <BSP_LCD_DisplayChar+0x66>
 800448c:	3307      	adds	r3, #7
 800448e:	10db      	asrs	r3, r3, #3
 8004490:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004494:	18ca      	adds	r2, r1, r3
 8004496:	88b9      	ldrh	r1, [r7, #4]
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fb44 	bl	8004b28 <DrawChar>
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd90      	pop	{r4, r7, pc}
 80044a8:	200025c4 	.word	0x200025c4
 80044ac:	200025c8 	.word	0x200025c8

080044b0 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80044b0:	b5b0      	push	{r4, r5, r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60ba      	str	r2, [r7, #8]
 80044b8:	461a      	mov	r2, r3
 80044ba:	4603      	mov	r3, r0
 80044bc:	81fb      	strh	r3, [r7, #14]
 80044be:	460b      	mov	r3, r1
 80044c0:	81bb      	strh	r3, [r7, #12]
 80044c2:	4613      	mov	r3, r2
 80044c4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80044c6:	2301      	movs	r3, #1
 80044c8:	83fb      	strh	r3, [r7, #30]
 80044ca:	2300      	movs	r3, #0
 80044cc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80044ce:	2300      	movs	r3, #0
 80044d0:	61bb      	str	r3, [r7, #24]
 80044d2:	2300      	movs	r3, #0
 80044d4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80044da:	e002      	b.n	80044e2 <BSP_LCD_DisplayStringAt+0x32>
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	3301      	adds	r3, #1
 80044e0:	61bb      	str	r3, [r7, #24]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	617a      	str	r2, [r7, #20]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1f6      	bne.n	80044dc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80044ee:	f7ff fe9b 	bl	8004228 <BSP_LCD_GetXSize>
 80044f2:	4601      	mov	r1, r0
 80044f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004624 <BSP_LCD_DisplayStringAt+0x174>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	484b      	ldr	r0, [pc, #300]	@ (8004628 <BSP_LCD_DisplayStringAt+0x178>)
 80044fa:	4613      	mov	r3, r2
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4403      	add	r3, r0
 8004504:	3308      	adds	r3, #8
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	889b      	ldrh	r3, [r3, #4]
 800450a:	fbb1 f3f3 	udiv	r3, r1, r3
 800450e:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	2b03      	cmp	r3, #3
 8004514:	d01c      	beq.n	8004550 <BSP_LCD_DisplayStringAt+0xa0>
 8004516:	2b03      	cmp	r3, #3
 8004518:	dc33      	bgt.n	8004582 <BSP_LCD_DisplayStringAt+0xd2>
 800451a:	2b01      	cmp	r3, #1
 800451c:	d002      	beq.n	8004524 <BSP_LCD_DisplayStringAt+0x74>
 800451e:	2b02      	cmp	r3, #2
 8004520:	d019      	beq.n	8004556 <BSP_LCD_DisplayStringAt+0xa6>
 8004522:	e02e      	b.n	8004582 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	1ad1      	subs	r1, r2, r3
 800452a:	4b3e      	ldr	r3, [pc, #248]	@ (8004624 <BSP_LCD_DisplayStringAt+0x174>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	483e      	ldr	r0, [pc, #248]	@ (8004628 <BSP_LCD_DisplayStringAt+0x178>)
 8004530:	4613      	mov	r3, r2
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4403      	add	r3, r0
 800453a:	3308      	adds	r3, #8
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	889b      	ldrh	r3, [r3, #4]
 8004540:	fb01 f303 	mul.w	r3, r1, r3
 8004544:	085b      	lsrs	r3, r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	89fb      	ldrh	r3, [r7, #14]
 800454a:	4413      	add	r3, r2
 800454c:	83fb      	strh	r3, [r7, #30]
      break;
 800454e:	e01b      	b.n	8004588 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8004550:	89fb      	ldrh	r3, [r7, #14]
 8004552:	83fb      	strh	r3, [r7, #30]
      break;
 8004554:	e018      	b.n	8004588 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	b299      	uxth	r1, r3
 800455e:	4b31      	ldr	r3, [pc, #196]	@ (8004624 <BSP_LCD_DisplayStringAt+0x174>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4831      	ldr	r0, [pc, #196]	@ (8004628 <BSP_LCD_DisplayStringAt+0x178>)
 8004564:	4613      	mov	r3, r2
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	4413      	add	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4403      	add	r3, r0
 800456e:	3308      	adds	r3, #8
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	889b      	ldrh	r3, [r3, #4]
 8004574:	fb11 f303 	smulbb	r3, r1, r3
 8004578:	b29a      	uxth	r2, r3
 800457a:	89fb      	ldrh	r3, [r7, #14]
 800457c:	4413      	add	r3, r2
 800457e:	83fb      	strh	r3, [r7, #30]
      break;
 8004580:	e002      	b.n	8004588 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8004582:	89fb      	ldrh	r3, [r7, #14]
 8004584:	83fb      	strh	r3, [r7, #30]
      break;
 8004586:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004588:	e01a      	b.n	80045c0 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	781a      	ldrb	r2, [r3, #0]
 800458e:	89b9      	ldrh	r1, [r7, #12]
 8004590:	8bfb      	ldrh	r3, [r7, #30]
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff ff48 	bl	8004428 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8004598:	4b22      	ldr	r3, [pc, #136]	@ (8004624 <BSP_LCD_DisplayStringAt+0x174>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	4922      	ldr	r1, [pc, #136]	@ (8004628 <BSP_LCD_DisplayStringAt+0x178>)
 800459e:	4613      	mov	r3, r2
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	3308      	adds	r3, #8
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	889a      	ldrh	r2, [r3, #4]
 80045ae:	8bfb      	ldrh	r3, [r7, #30]
 80045b0:	4413      	add	r3, r2
 80045b2:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	3301      	adds	r3, #1
 80045b8:	60bb      	str	r3, [r7, #8]
    i++;
 80045ba:	8bbb      	ldrh	r3, [r7, #28]
 80045bc:	3301      	adds	r3, #1
 80045be:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	bf14      	ite	ne
 80045c8:	2301      	movne	r3, #1
 80045ca:	2300      	moveq	r3, #0
 80045cc:	b2dc      	uxtb	r4, r3
 80045ce:	f7ff fe2b 	bl	8004228 <BSP_LCD_GetXSize>
 80045d2:	8bb9      	ldrh	r1, [r7, #28]
 80045d4:	4b13      	ldr	r3, [pc, #76]	@ (8004624 <BSP_LCD_DisplayStringAt+0x174>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	4d13      	ldr	r5, [pc, #76]	@ (8004628 <BSP_LCD_DisplayStringAt+0x178>)
 80045da:	4613      	mov	r3, r2
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	4413      	add	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	442b      	add	r3, r5
 80045e4:	3308      	adds	r3, #8
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	889b      	ldrh	r3, [r3, #4]
 80045ea:	fb01 f303 	mul.w	r3, r1, r3
 80045ee:	1ac3      	subs	r3, r0, r3
 80045f0:	b299      	uxth	r1, r3
 80045f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004624 <BSP_LCD_DisplayStringAt+0x174>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	480c      	ldr	r0, [pc, #48]	@ (8004628 <BSP_LCD_DisplayStringAt+0x178>)
 80045f8:	4613      	mov	r3, r2
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4403      	add	r3, r0
 8004602:	3308      	adds	r3, #8
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	889b      	ldrh	r3, [r3, #4]
 8004608:	4299      	cmp	r1, r3
 800460a:	bf2c      	ite	cs
 800460c:	2301      	movcs	r3, #1
 800460e:	2300      	movcc	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	4023      	ands	r3, r4
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1b7      	bne.n	800458a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800461a:	bf00      	nop
 800461c:	bf00      	nop
 800461e:	3720      	adds	r7, #32
 8004620:	46bd      	mov	sp, r7
 8004622:	bdb0      	pop	{r4, r5, r7, pc}
 8004624:	200025c4 	.word	0x200025c4
 8004628:	200025c8 	.word	0x200025c8

0800462c <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 800462c:	b590      	push	{r4, r7, lr}
 800462e:	b08b      	sub	sp, #44	@ 0x2c
 8004630:	af00      	add	r7, sp, #0
 8004632:	4604      	mov	r4, r0
 8004634:	4608      	mov	r0, r1
 8004636:	4611      	mov	r1, r2
 8004638:	461a      	mov	r2, r3
 800463a:	4623      	mov	r3, r4
 800463c:	80fb      	strh	r3, [r7, #6]
 800463e:	4603      	mov	r3, r0
 8004640:	80bb      	strh	r3, [r7, #4]
 8004642:	460b      	mov	r3, r1
 8004644:	807b      	strh	r3, [r7, #2]
 8004646:	4613      	mov	r3, r2
 8004648:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 800464a:	2300      	movs	r3, #0
 800464c:	823b      	strh	r3, [r7, #16]
 800464e:	2300      	movs	r3, #0
 8004650:	81fb      	strh	r3, [r7, #14]
 8004652:	2300      	movs	r3, #0
 8004654:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004656:	2300      	movs	r3, #0
 8004658:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800465a:	2300      	movs	r3, #0
 800465c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800465e:	2300      	movs	r3, #0
 8004660:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8004662:	2300      	movs	r3, #0
 8004664:	83fb      	strh	r3, [r7, #30]
 8004666:	2300      	movs	r3, #0
 8004668:	83bb      	strh	r3, [r7, #28]
 800466a:	2300      	movs	r3, #0
 800466c:	837b      	strh	r3, [r7, #26]
 800466e:	2300      	movs	r3, #0
 8004670:	833b      	strh	r3, [r7, #24]
 8004672:	2300      	movs	r3, #0
 8004674:	82fb      	strh	r3, [r7, #22]
 8004676:	2300      	movs	r3, #0
 8004678:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 800467e:	887a      	ldrh	r2, [r7, #2]
 8004680:	88fb      	ldrh	r3, [r7, #6]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	bfb8      	it	lt
 8004688:	425b      	neglt	r3, r3
 800468a:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 800468c:	883a      	ldrh	r2, [r7, #0]
 800468e:	88bb      	ldrh	r3, [r7, #4]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	bfb8      	it	lt
 8004696:	425b      	neglt	r3, r3
 8004698:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 800469a:	88fb      	ldrh	r3, [r7, #6]
 800469c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  y = Y1;                       /* Start y off at the first pixel */
 800469e:	88bb      	ldrh	r3, [r7, #4]
 80046a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 80046a2:	887a      	ldrh	r2, [r7, #2]
 80046a4:	88fb      	ldrh	r3, [r7, #6]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d304      	bcc.n	80046b4 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 80046aa:	2301      	movs	r3, #1
 80046ac:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = 1;
 80046ae:	2301      	movs	r3, #1
 80046b0:	843b      	strh	r3, [r7, #32]
 80046b2:	e005      	b.n	80046c0 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80046b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046b8:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = -1;
 80046ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046be:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 80046c0:	883a      	ldrh	r2, [r7, #0]
 80046c2:	88bb      	ldrh	r3, [r7, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d304      	bcc.n	80046d2 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80046c8:	2301      	movs	r3, #1
 80046ca:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80046cc:	2301      	movs	r3, #1
 80046ce:	83bb      	strh	r3, [r7, #28]
 80046d0:	e005      	b.n	80046de <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80046d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046d6:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80046d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046dc:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80046de:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80046e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	db10      	blt.n	800470c <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80046ea:	2300      	movs	r3, #0
 80046ec:	847b      	strh	r3, [r7, #34]	@ 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80046ee:	2300      	movs	r3, #0
 80046f0:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80046f2:	8a3b      	ldrh	r3, [r7, #16]
 80046f4:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80046f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80046fa:	0fda      	lsrs	r2, r3, #31
 80046fc:	4413      	add	r3, r2
 80046fe:	105b      	asrs	r3, r3, #1
 8004700:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8004702:	89fb      	ldrh	r3, [r7, #14]
 8004704:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8004706:	8a3b      	ldrh	r3, [r7, #16]
 8004708:	82bb      	strh	r3, [r7, #20]
 800470a:	e00f      	b.n	800472c <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800470c:	2300      	movs	r3, #0
 800470e:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8004710:	2300      	movs	r3, #0
 8004712:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8004714:	89fb      	ldrh	r3, [r7, #14]
 8004716:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8004718:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800471c:	0fda      	lsrs	r2, r3, #31
 800471e:	4413      	add	r3, r2
 8004720:	105b      	asrs	r3, r3, #1
 8004722:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8004724:	8a3b      	ldrh	r3, [r7, #16]
 8004726:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8004728:	89fb      	ldrh	r3, [r7, #14]
 800472a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800472c:	2300      	movs	r3, #0
 800472e:	827b      	strh	r3, [r7, #18]
 8004730:	e037      	b.n	80047a2 <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8004732:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8004734:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8004736:	4b20      	ldr	r3, [pc, #128]	@ (80047b8 <BSP_LCD_DrawLine+0x18c>)
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	4c20      	ldr	r4, [pc, #128]	@ (80047bc <BSP_LCD_DrawLine+0x190>)
 800473c:	4613      	mov	r3, r2
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4423      	add	r3, r4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	f000 f9a1 	bl	8004a90 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 800474e:	8b3a      	ldrh	r2, [r7, #24]
 8004750:	8afb      	ldrh	r3, [r7, #22]
 8004752:	4413      	add	r3, r2
 8004754:	b29b      	uxth	r3, r3
 8004756:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8004758:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800475c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004760:	429a      	cmp	r2, r3
 8004762:	db0e      	blt.n	8004782 <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8004764:	8b3a      	ldrh	r2, [r7, #24]
 8004766:	8b7b      	ldrh	r3, [r7, #26]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	b29b      	uxth	r3, r3
 800476c:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800476e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004770:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004772:	4413      	add	r3, r2
 8004774:	b29b      	uxth	r3, r3
 8004776:	84fb      	strh	r3, [r7, #38]	@ 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8004778:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800477a:	8bfb      	ldrh	r3, [r7, #30]
 800477c:	4413      	add	r3, r2
 800477e:	b29b      	uxth	r3, r3
 8004780:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8004782:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004784:	8c3b      	ldrh	r3, [r7, #32]
 8004786:	4413      	add	r3, r2
 8004788:	b29b      	uxth	r3, r3
 800478a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    y += yinc2;                               /* Change the y as appropriate */
 800478c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800478e:	8bbb      	ldrh	r3, [r7, #28]
 8004790:	4413      	add	r3, r2
 8004792:	b29b      	uxth	r3, r3
 8004794:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8004796:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800479a:	b29b      	uxth	r3, r3
 800479c:	3301      	adds	r3, #1
 800479e:	b29b      	uxth	r3, r3
 80047a0:	827b      	strh	r3, [r7, #18]
 80047a2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80047a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	ddc1      	ble.n	8004732 <BSP_LCD_DrawLine+0x106>
  }
}
 80047ae:	bf00      	nop
 80047b0:	bf00      	nop
 80047b2:	372c      	adds	r7, #44	@ 0x2c
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd90      	pop	{r4, r7, pc}
 80047b8:	200025c4 	.word	0x200025c4
 80047bc:	200025c8 	.word	0x200025c8

080047c0 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80047c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c4:	b086      	sub	sp, #24
 80047c6:	af02      	add	r7, sp, #8
 80047c8:	4604      	mov	r4, r0
 80047ca:	4608      	mov	r0, r1
 80047cc:	4611      	mov	r1, r2
 80047ce:	461a      	mov	r2, r3
 80047d0:	4623      	mov	r3, r4
 80047d2:	80fb      	strh	r3, [r7, #6]
 80047d4:	4603      	mov	r3, r0
 80047d6:	80bb      	strh	r3, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	807b      	strh	r3, [r7, #2]
 80047dc:	4613      	mov	r3, r2
 80047de:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80047e4:	4b33      	ldr	r3, [pc, #204]	@ (80048b4 <BSP_LCD_FillRect+0xf4>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	4933      	ldr	r1, [pc, #204]	@ (80048b8 <BSP_LCD_FillRect+0xf8>)
 80047ea:	4613      	mov	r3, r2
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff fda2 	bl	8004340 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 80047fc:	4b2f      	ldr	r3, [pc, #188]	@ (80048bc <BSP_LCD_FillRect+0xfc>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d022      	beq.n	800484a <BSP_LCD_FillRect+0x8a>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +BSP_LCD_GetXSize()*BSP_LCD_GetYSize()); //Rotate by 180°
 8004804:	4b2b      	ldr	r3, [pc, #172]	@ (80048b4 <BSP_LCD_FillRect+0xf4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a2d      	ldr	r2, [pc, #180]	@ (80048c0 <BSP_LCD_FillRect+0x100>)
 800480a:	2134      	movs	r1, #52	@ 0x34
 800480c:	fb01 f303 	mul.w	r3, r1, r3
 8004810:	4413      	add	r3, r2
 8004812:	335c      	adds	r3, #92	@ 0x5c
 8004814:	681c      	ldr	r4, [r3, #0]
 8004816:	f7ff fd07 	bl	8004228 <BSP_LCD_GetXSize>
 800481a:	4603      	mov	r3, r0
 800481c:	425b      	negs	r3, r3
 800481e:	88b9      	ldrh	r1, [r7, #4]
 8004820:	883a      	ldrh	r2, [r7, #0]
 8004822:	440a      	add	r2, r1
 8004824:	fb02 f503 	mul.w	r5, r2, r3
 8004828:	f7ff fcfe 	bl	8004228 <BSP_LCD_GetXSize>
 800482c:	4606      	mov	r6, r0
 800482e:	f7ff fd07 	bl	8004240 <BSP_LCD_GetYSize>
 8004832:	4603      	mov	r3, r0
 8004834:	fb06 f303 	mul.w	r3, r6, r3
 8004838:	442b      	add	r3, r5
 800483a:	88f9      	ldrh	r1, [r7, #6]
 800483c:	887a      	ldrh	r2, [r7, #2]
 800483e:	440a      	add	r2, r1
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4423      	add	r3, r4
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	e013      	b.n	8004872 <BSP_LCD_FillRect+0xb2>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800484a:	4b1a      	ldr	r3, [pc, #104]	@ (80048b4 <BSP_LCD_FillRect+0xf4>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a1c      	ldr	r2, [pc, #112]	@ (80048c0 <BSP_LCD_FillRect+0x100>)
 8004850:	2134      	movs	r1, #52	@ 0x34
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	4413      	add	r3, r2
 8004858:	335c      	adds	r3, #92	@ 0x5c
 800485a:	681c      	ldr	r4, [r3, #0]
 800485c:	f7ff fce4 	bl	8004228 <BSP_LCD_GetXSize>
 8004860:	4602      	mov	r2, r0
 8004862:	88bb      	ldrh	r3, [r7, #4]
 8004864:	fb03 f202 	mul.w	r2, r3, r2
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4423      	add	r3, r4
 8004870:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8004872:	4b10      	ldr	r3, [pc, #64]	@ (80048b4 <BSP_LCD_FillRect+0xf4>)
 8004874:	681c      	ldr	r4, [r3, #0]
 8004876:	68fd      	ldr	r5, [r7, #12]
 8004878:	887e      	ldrh	r6, [r7, #2]
 800487a:	f8b7 8000 	ldrh.w	r8, [r7]
 800487e:	f7ff fcd3 	bl	8004228 <BSP_LCD_GetXSize>
 8004882:	4602      	mov	r2, r0
 8004884:	887b      	ldrh	r3, [r7, #2]
 8004886:	1ad1      	subs	r1, r2, r3
 8004888:	4b0a      	ldr	r3, [pc, #40]	@ (80048b4 <BSP_LCD_FillRect+0xf4>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	480a      	ldr	r0, [pc, #40]	@ (80048b8 <BSP_LCD_FillRect+0xf8>)
 800488e:	4613      	mov	r3, r2
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4403      	add	r3, r0
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	9301      	str	r3, [sp, #4]
 800489c:	9100      	str	r1, [sp, #0]
 800489e:	4643      	mov	r3, r8
 80048a0:	4632      	mov	r2, r6
 80048a2:	4629      	mov	r1, r5
 80048a4:	4620      	mov	r0, r4
 80048a6:	f000 f9f9 	bl	8004c9c <FillBuffer>
}
 80048aa:	bf00      	nop
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b4:	200025c4 	.word	0x200025c4
 80048b8:	200025c8 	.word	0x200025c8
 80048bc:	200025e4 	.word	0x200025e4
 80048c0:	200024ac 	.word	0x200024ac

080048c4 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80048c8:	4b05      	ldr	r3, [pc, #20]	@ (80048e0 <BSP_LCD_DisplayOn+0x1c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80048d2:	4b03      	ldr	r3, [pc, #12]	@ (80048e0 <BSP_LCD_DisplayOn+0x1c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	4798      	blx	r3
  }
}
 80048da:	bf00      	nop
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	200025e0 	.word	0x200025e0

080048e4 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08e      	sub	sp, #56	@ 0x38
 80048e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80048ea:	2300      	movs	r3, #0
 80048ec:	623b      	str	r3, [r7, #32]
 80048ee:	4b61      	ldr	r3, [pc, #388]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 80048f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f2:	4a60      	ldr	r2, [pc, #384]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 80048f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80048fa:	4b5e      	ldr	r3, [pc, #376]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 80048fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004902:	623b      	str	r3, [r7, #32]
 8004904:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
 800490a:	4b5a      	ldr	r3, [pc, #360]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490e:	4a59      	ldr	r2, [pc, #356]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 8004910:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004914:	6313      	str	r3, [r2, #48]	@ 0x30
 8004916:	4b57      	ldr	r3, [pc, #348]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800491e:	61fb      	str	r3, [r7, #28]
 8004920:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004922:	2300      	movs	r3, #0
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	4b53      	ldr	r3, [pc, #332]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492a:	4a52      	ldr	r2, [pc, #328]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	6313      	str	r3, [r2, #48]	@ 0x30
 8004932:	4b50      	ldr	r3, [pc, #320]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	61bb      	str	r3, [r7, #24]
 800493c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	4b4c      	ldr	r3, [pc, #304]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 8004944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004946:	4a4b      	ldr	r2, [pc, #300]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 8004948:	f043 0302 	orr.w	r3, r3, #2
 800494c:	6313      	str	r3, [r2, #48]	@ 0x30
 800494e:	4b49      	ldr	r3, [pc, #292]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 8004950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800495a:	2300      	movs	r3, #0
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	4b45      	ldr	r3, [pc, #276]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 8004960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004962:	4a44      	ldr	r2, [pc, #272]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 8004964:	f043 0304 	orr.w	r3, r3, #4
 8004968:	6313      	str	r3, [r2, #48]	@ 0x30
 800496a:	4b42      	ldr	r3, [pc, #264]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497e:	4a3d      	ldr	r2, [pc, #244]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 8004980:	f043 0308 	orr.w	r3, r3, #8
 8004984:	6313      	str	r3, [r2, #48]	@ 0x30
 8004986:	4b3b      	ldr	r3, [pc, #236]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004992:	2300      	movs	r3, #0
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	4b37      	ldr	r3, [pc, #220]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 8004998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499a:	4a36      	ldr	r2, [pc, #216]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 800499c:	f043 0320 	orr.w	r3, r3, #32
 80049a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80049a2:	4b34      	ldr	r3, [pc, #208]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 80049a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80049ae:	2300      	movs	r3, #0
 80049b0:	607b      	str	r3, [r7, #4]
 80049b2:	4b30      	ldr	r3, [pc, #192]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 80049b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 80049b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80049be:	4b2d      	ldr	r3, [pc, #180]	@ (8004a74 <BSP_LCD_MspInit+0x190>)
 80049c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c6:	607b      	str	r3, [r7, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80049ca:	f641 0358 	movw	r3, #6232	@ 0x1858
 80049ce:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80049d0:	2302      	movs	r3, #2
 80049d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80049d8:	2302      	movs	r3, #2
 80049da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80049dc:	230e      	movs	r3, #14
 80049de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80049e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049e4:	4619      	mov	r1, r3
 80049e6:	4824      	ldr	r0, [pc, #144]	@ (8004a78 <BSP_LCD_MspInit+0x194>)
 80049e8:	f001 fb2c 	bl	8006044 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80049ec:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80049f0:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80049f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049f6:	4619      	mov	r1, r3
 80049f8:	4820      	ldr	r0, [pc, #128]	@ (8004a7c <BSP_LCD_MspInit+0x198>)
 80049fa:	f001 fb23 	bl	8006044 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80049fe:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8004a02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004a04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a08:	4619      	mov	r1, r3
 8004a0a:	481d      	ldr	r0, [pc, #116]	@ (8004a80 <BSP_LCD_MspInit+0x19c>)
 8004a0c:	f001 fb1a 	bl	8006044 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8004a10:	2348      	movs	r3, #72	@ 0x48
 8004a12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004a14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a18:	4619      	mov	r1, r3
 8004a1a:	481a      	ldr	r0, [pc, #104]	@ (8004a84 <BSP_LCD_MspInit+0x1a0>)
 8004a1c:	f001 fb12 	bl	8006044 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8004a20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8004a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	4816      	ldr	r0, [pc, #88]	@ (8004a88 <BSP_LCD_MspInit+0x1a4>)
 8004a2e:	f001 fb09 	bl	8006044 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8004a32:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4813      	ldr	r0, [pc, #76]	@ (8004a8c <BSP_LCD_MspInit+0x1a8>)
 8004a40:	f001 fb00 	bl	8006044 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004a44:	2303      	movs	r3, #3
 8004a46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8004a48:	2309      	movs	r3, #9
 8004a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004a4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a50:	4619      	mov	r1, r3
 8004a52:	480a      	ldr	r0, [pc, #40]	@ (8004a7c <BSP_LCD_MspInit+0x198>)
 8004a54:	f001 faf6 	bl	8006044 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8004a58:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004a5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a62:	4619      	mov	r1, r3
 8004a64:	4809      	ldr	r0, [pc, #36]	@ (8004a8c <BSP_LCD_MspInit+0x1a8>)
 8004a66:	f001 faed 	bl	8006044 <HAL_GPIO_Init>
}
 8004a6a:	bf00      	nop
 8004a6c:	3738      	adds	r7, #56	@ 0x38
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40023800 	.word	0x40023800
 8004a78:	40020000 	.word	0x40020000
 8004a7c:	40020400 	.word	0x40020400
 8004a80:	40020800 	.word	0x40020800
 8004a84:	40020c00 	.word	0x40020c00
 8004a88:	40021400 	.word	0x40021400
 8004a8c:	40021800 	.word	0x40021800

08004a90 <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004a90:	b5b0      	push	{r4, r5, r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	603a      	str	r2, [r7, #0]
 8004a9a:	80fb      	strh	r3, [r7, #6]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 8004aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8004b1c <BSP_LCD_DrawPixel+0x8c>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01f      	beq.n	8004ae8 <BSP_LCD_DrawPixel+0x58>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (BSP_LCD_GetXSize()*BSP_LCD_GetYSize() - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 8004aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b20 <BSP_LCD_DrawPixel+0x90>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a1d      	ldr	r2, [pc, #116]	@ (8004b24 <BSP_LCD_DrawPixel+0x94>)
 8004aae:	2134      	movs	r1, #52	@ 0x34
 8004ab0:	fb01 f303 	mul.w	r3, r1, r3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	335c      	adds	r3, #92	@ 0x5c
 8004ab8:	681c      	ldr	r4, [r3, #0]
 8004aba:	f7ff fbb5 	bl	8004228 <BSP_LCD_GetXSize>
 8004abe:	4605      	mov	r5, r0
 8004ac0:	f7ff fbbe 	bl	8004240 <BSP_LCD_GetYSize>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	fb03 f205 	mul.w	r2, r3, r5
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	1ad5      	subs	r5, r2, r3
 8004ace:	f7ff fbab 	bl	8004228 <BSP_LCD_GetXSize>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	88bb      	ldrh	r3, [r7, #4]
 8004ad6:	fb02 f303 	mul.w	r3, r2, r3
 8004ada:	1aeb      	subs	r3, r5, r3
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4423      	add	r3, r4
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8004ae6:	e015      	b.n	8004b14 <BSP_LCD_DrawPixel+0x84>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8004b20 <BSP_LCD_DrawPixel+0x90>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a0d      	ldr	r2, [pc, #52]	@ (8004b24 <BSP_LCD_DrawPixel+0x94>)
 8004aee:	2134      	movs	r1, #52	@ 0x34
 8004af0:	fb01 f303 	mul.w	r3, r1, r3
 8004af4:	4413      	add	r3, r2
 8004af6:	335c      	adds	r3, #92	@ 0x5c
 8004af8:	681c      	ldr	r4, [r3, #0]
 8004afa:	88bd      	ldrh	r5, [r7, #4]
 8004afc:	f7ff fb94 	bl	8004228 <BSP_LCD_GetXSize>
 8004b00:	4603      	mov	r3, r0
 8004b02:	fb03 f205 	mul.w	r2, r3, r5
 8004b06:	88fb      	ldrh	r3, [r7, #6]
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4423      	add	r3, r4
 8004b0e:	461a      	mov	r2, r3
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	6013      	str	r3, [r2, #0]
}
 8004b14:	bf00      	nop
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8004b1c:	200025e4 	.word	0x200025e4
 8004b20:	200025c4 	.word	0x200025c4
 8004b24:	200024ac 	.word	0x200024ac

08004b28 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	603a      	str	r2, [r7, #0]
 8004b32:	80fb      	strh	r3, [r7, #6]
 8004b34:	460b      	mov	r3, r1
 8004b36:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61fb      	str	r3, [r7, #28]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8004b44:	4b53      	ldr	r3, [pc, #332]	@ (8004c94 <DrawChar+0x16c>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	4953      	ldr	r1, [pc, #332]	@ (8004c98 <DrawChar+0x170>)
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	4413      	add	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	3308      	adds	r3, #8
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	88db      	ldrh	r3, [r3, #6]
 8004b5a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004b5c:	4b4d      	ldr	r3, [pc, #308]	@ (8004c94 <DrawChar+0x16c>)
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	494d      	ldr	r1, [pc, #308]	@ (8004c98 <DrawChar+0x170>)
 8004b62:	4613      	mov	r3, r2
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	4413      	add	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	889b      	ldrh	r3, [r3, #4]
 8004b72:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8004b74:	8a3b      	ldrh	r3, [r7, #16]
 8004b76:	3307      	adds	r3, #7
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	da00      	bge.n	8004b7e <DrawChar+0x56>
 8004b7c:	3307      	adds	r3, #7
 8004b7e:	10db      	asrs	r3, r3, #3
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	8a3b      	ldrh	r3, [r7, #16]
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61fb      	str	r3, [r7, #28]
 8004b92:	e076      	b.n	8004c82 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004b94:	8a3b      	ldrh	r3, [r7, #16]
 8004b96:	3307      	adds	r3, #7
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	da00      	bge.n	8004b9e <DrawChar+0x76>
 8004b9c:	3307      	adds	r3, #7
 8004b9e:	10db      	asrs	r3, r3, #3
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	fb02 f303 	mul.w	r3, r2, r3
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	4413      	add	r3, r2
 8004bac:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8004bae:	8a3b      	ldrh	r3, [r7, #16]
 8004bb0:	3307      	adds	r3, #7
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	da00      	bge.n	8004bb8 <DrawChar+0x90>
 8004bb6:	3307      	adds	r3, #7
 8004bb8:	10db      	asrs	r3, r3, #3
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d002      	beq.n	8004bc4 <DrawChar+0x9c>
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d004      	beq.n	8004bcc <DrawChar+0xa4>
 8004bc2:	e00c      	b.n	8004bde <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	617b      	str	r3, [r7, #20]
      break;
 8004bca:	e016      	b.n	8004bfa <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	021b      	lsls	r3, r3, #8
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	3201      	adds	r2, #1
 8004bd6:	7812      	ldrb	r2, [r2, #0]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]
      break;
 8004bdc:	e00d      	b.n	8004bfa <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	041a      	lsls	r2, r3, #16
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	3301      	adds	r3, #1
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	4313      	orrs	r3, r2
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	3202      	adds	r2, #2
 8004bf2:	7812      	ldrb	r2, [r2, #0]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]
      break;
 8004bf8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61bb      	str	r3, [r7, #24]
 8004bfe:	e036      	b.n	8004c6e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004c00:	8a3a      	ldrh	r2, [r7, #16]
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	1ad2      	subs	r2, r2, r3
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
 8004c08:	4413      	add	r3, r2
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	461a      	mov	r2, r3
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	4013      	ands	r3, r2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d012      	beq.n	8004c42 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	88fb      	ldrh	r3, [r7, #6]
 8004c22:	4413      	add	r3, r2
 8004c24:	b298      	uxth	r0, r3
 8004c26:	4b1b      	ldr	r3, [pc, #108]	@ (8004c94 <DrawChar+0x16c>)
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	491b      	ldr	r1, [pc, #108]	@ (8004c98 <DrawChar+0x170>)
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	88bb      	ldrh	r3, [r7, #4]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	f7ff ff28 	bl	8004a90 <BSP_LCD_DrawPixel>
 8004c40:	e012      	b.n	8004c68 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	4413      	add	r3, r2
 8004c4a:	b298      	uxth	r0, r3
 8004c4c:	4b11      	ldr	r3, [pc, #68]	@ (8004c94 <DrawChar+0x16c>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4911      	ldr	r1, [pc, #68]	@ (8004c98 <DrawChar+0x170>)
 8004c52:	4613      	mov	r3, r2
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	4413      	add	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	88bb      	ldrh	r3, [r7, #4]
 8004c62:	4619      	mov	r1, r3
 8004c64:	f7ff ff14 	bl	8004a90 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	8a3b      	ldrh	r3, [r7, #16]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d3c4      	bcc.n	8004c00 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8004c76:	88bb      	ldrh	r3, [r7, #4]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	61fb      	str	r3, [r7, #28]
 8004c82:	8a7b      	ldrh	r3, [r7, #18]
 8004c84:	69fa      	ldr	r2, [r7, #28]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d384      	bcc.n	8004b94 <DrawChar+0x6c>
  }
}
 8004c8a:	bf00      	nop
 8004c8c:	bf00      	nop
 8004c8e:	3720      	adds	r7, #32
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	200025c4 	.word	0x200025c4
 8004c98:	200025c8 	.word	0x200025c8

08004c9c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af02      	add	r7, sp, #8
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8004caa:	4b16      	ldr	r3, [pc, #88]	@ (8004d04 <FillBuffer+0x68>)
 8004cac:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004cb0:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004cb2:	4b14      	ldr	r3, [pc, #80]	@ (8004d04 <FillBuffer+0x68>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8004cb8:	4a12      	ldr	r2, [pc, #72]	@ (8004d04 <FillBuffer+0x68>)
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8004cbe:	4b11      	ldr	r3, [pc, #68]	@ (8004d04 <FillBuffer+0x68>)
 8004cc0:	4a11      	ldr	r2, [pc, #68]	@ (8004d08 <FillBuffer+0x6c>)
 8004cc2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8004cc4:	480f      	ldr	r0, [pc, #60]	@ (8004d04 <FillBuffer+0x68>)
 8004cc6:	f000 ff27 	bl	8005b18 <HAL_DMA2D_Init>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d115      	bne.n	8004cfc <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8004cd0:	68f9      	ldr	r1, [r7, #12]
 8004cd2:	480c      	ldr	r0, [pc, #48]	@ (8004d04 <FillBuffer+0x68>)
 8004cd4:	f001 f888 	bl	8005de8 <HAL_DMA2D_ConfigLayer>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10e      	bne.n	8004cfc <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	69f9      	ldr	r1, [r7, #28]
 8004ce8:	4806      	ldr	r0, [pc, #24]	@ (8004d04 <FillBuffer+0x68>)
 8004cea:	f000 ff68 	bl	8005bbe <HAL_DMA2D_Start>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d103      	bne.n	8004cfc <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004cf4:	210a      	movs	r1, #10
 8004cf6:	4803      	ldr	r0, [pc, #12]	@ (8004d04 <FillBuffer+0x68>)
 8004cf8:	f000 ff8c 	bl	8005c14 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004cfc:	bf00      	nop
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	20002554 	.word	0x20002554
 8004d08:	4002b000 	.word	0x4002b000

08004d0c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004d10:	4b29      	ldr	r3, [pc, #164]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d12:	4a2a      	ldr	r2, [pc, #168]	@ (8004dbc <BSP_SDRAM_Init+0xb0>)
 8004d14:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004d16:	4b2a      	ldr	r3, [pc, #168]	@ (8004dc0 <BSP_SDRAM_Init+0xb4>)
 8004d18:	2202      	movs	r2, #2
 8004d1a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004d1c:	4b28      	ldr	r3, [pc, #160]	@ (8004dc0 <BSP_SDRAM_Init+0xb4>)
 8004d1e:	2207      	movs	r2, #7
 8004d20:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8004d22:	4b27      	ldr	r3, [pc, #156]	@ (8004dc0 <BSP_SDRAM_Init+0xb4>)
 8004d24:	2204      	movs	r2, #4
 8004d26:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004d28:	4b25      	ldr	r3, [pc, #148]	@ (8004dc0 <BSP_SDRAM_Init+0xb4>)
 8004d2a:	2207      	movs	r2, #7
 8004d2c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8004d2e:	4b24      	ldr	r3, [pc, #144]	@ (8004dc0 <BSP_SDRAM_Init+0xb4>)
 8004d30:	2202      	movs	r2, #2
 8004d32:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8004d34:	4b22      	ldr	r3, [pc, #136]	@ (8004dc0 <BSP_SDRAM_Init+0xb4>)
 8004d36:	2202      	movs	r2, #2
 8004d38:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8004d3a:	4b21      	ldr	r3, [pc, #132]	@ (8004dc0 <BSP_SDRAM_Init+0xb4>)
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004d40:	4b1d      	ldr	r3, [pc, #116]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d42:	2201      	movs	r2, #1
 8004d44:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004d46:	4b1c      	ldr	r3, [pc, #112]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d4e:	2204      	movs	r2, #4
 8004d50:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004d52:	4b19      	ldr	r3, [pc, #100]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d54:	2210      	movs	r2, #16
 8004d56:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004d58:	4b17      	ldr	r3, [pc, #92]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d5a:	2240      	movs	r2, #64	@ 0x40
 8004d5c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8004d5e:	4b16      	ldr	r3, [pc, #88]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d60:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004d64:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004d66:	4b14      	ldr	r3, [pc, #80]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004d6c:	4b12      	ldr	r3, [pc, #72]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d72:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8004d74:	4b10      	ldr	r3, [pc, #64]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8004d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004d80:	629a      	str	r2, [r3, #40]	@ 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8004d82:	2100      	movs	r1, #0
 8004d84:	480c      	ldr	r0, [pc, #48]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d86:	f000 f87f 	bl	8004e88 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8004d8a:	490d      	ldr	r1, [pc, #52]	@ (8004dc0 <BSP_SDRAM_Init+0xb4>)
 8004d8c:	480a      	ldr	r0, [pc, #40]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d8e:	f003 fc6f 	bl	8008670 <HAL_SDRAM_Init>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004d98:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc4 <BSP_SDRAM_Init+0xb8>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	e002      	b.n	8004da6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004da0:	4b08      	ldr	r3, [pc, #32]	@ (8004dc4 <BSP_SDRAM_Init+0xb8>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004da6:	f240 506a 	movw	r0, #1386	@ 0x56a
 8004daa:	f000 f80d 	bl	8004dc8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004dae:	4b05      	ldr	r3, [pc, #20]	@ (8004dc4 <BSP_SDRAM_Init+0xb8>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	200025e8 	.word	0x200025e8
 8004dbc:	a0000140 	.word	0xa0000140
 8004dc0:	2000261c 	.word	0x2000261c
 8004dc4:	20000190 	.word	0x20000190

08004dc8 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004dda:	4b29      	ldr	r3, [pc, #164]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ddc:	2208      	movs	r2, #8
 8004dde:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004de0:	4b27      	ldr	r3, [pc, #156]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004de2:	2201      	movs	r2, #1
 8004de4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004de6:	4b26      	ldr	r3, [pc, #152]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004dec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004df0:	4923      	ldr	r1, [pc, #140]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004df2:	4824      	ldr	r0, [pc, #144]	@ (8004e84 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004df4:	f003 fc7a 	bl	80086ec <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004df8:	2001      	movs	r0, #1
 8004dfa:	f000 fb99 	bl	8005530 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8004dfe:	4b20      	ldr	r3, [pc, #128]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e00:	2202      	movs	r2, #2
 8004e02:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004e04:	4b1e      	ldr	r3, [pc, #120]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e06:	2208      	movs	r2, #8
 8004e08:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004e10:	4b1b      	ldr	r3, [pc, #108]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8004e16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e1a:	4919      	ldr	r1, [pc, #100]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e1c:	4819      	ldr	r0, [pc, #100]	@ (8004e84 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004e1e:	f003 fc65 	bl	80086ec <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004e22:	4b17      	ldr	r3, [pc, #92]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e24:	2203      	movs	r2, #3
 8004e26:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004e28:	4b15      	ldr	r3, [pc, #84]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e2a:	2208      	movs	r2, #8
 8004e2c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8004e2e:	4b14      	ldr	r3, [pc, #80]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e30:	2204      	movs	r2, #4
 8004e32:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004e34:	4b12      	ldr	r3, [pc, #72]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004e3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e3e:	4910      	ldr	r1, [pc, #64]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e40:	4810      	ldr	r0, [pc, #64]	@ (8004e84 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004e42:	f003 fc53 	bl	80086ec <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8004e46:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8004e4a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e4e:	2204      	movs	r2, #4
 8004e50:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004e52:	4b0b      	ldr	r3, [pc, #44]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e54:	2208      	movs	r2, #8
 8004e56:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004e58:	4b09      	ldr	r3, [pc, #36]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4a07      	ldr	r2, [pc, #28]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e62:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004e64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e68:	4905      	ldr	r1, [pc, #20]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e6a:	4806      	ldr	r0, [pc, #24]	@ (8004e84 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004e6c:	f003 fc3e 	bl	80086ec <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	4804      	ldr	r0, [pc, #16]	@ (8004e84 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004e74:	f003 fc65 	bl	8008742 <HAL_SDRAM_ProgramRefreshRate>
}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	20002638 	.word	0x20002638
 8004e84:	200025e8 	.word	0x200025e8

08004e88 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b090      	sub	sp, #64	@ 0x40
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 80ec 	beq.w	8005072 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e9e:	4b77      	ldr	r3, [pc, #476]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea2:	4a76      	ldr	r2, [pc, #472]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004ea4:	f043 0301 	orr.w	r3, r3, #1
 8004ea8:	6393      	str	r3, [r2, #56]	@ 0x38
 8004eaa:	4b74      	ldr	r3, [pc, #464]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eba:	4b70      	ldr	r3, [pc, #448]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ebe:	4a6f      	ldr	r2, [pc, #444]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004ec0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ec6:	4b6d      	ldr	r3, [pc, #436]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	623b      	str	r3, [r7, #32]
 8004ed6:	4b69      	ldr	r3, [pc, #420]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eda:	4a68      	ldr	r2, [pc, #416]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004edc:	f043 0302 	orr.w	r3, r3, #2
 8004ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ee2:	4b66      	ldr	r3, [pc, #408]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	623b      	str	r3, [r7, #32]
 8004eec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61fb      	str	r3, [r7, #28]
 8004ef2:	4b62      	ldr	r3, [pc, #392]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef6:	4a61      	ldr	r2, [pc, #388]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004ef8:	f043 0304 	orr.w	r3, r3, #4
 8004efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004efe:	4b5f      	ldr	r3, [pc, #380]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	61fb      	str	r3, [r7, #28]
 8004f08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f12:	4a5a      	ldr	r2, [pc, #360]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004f14:	f043 0308 	orr.w	r3, r3, #8
 8004f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f1a:	4b58      	ldr	r3, [pc, #352]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f26:	2300      	movs	r3, #0
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	4b54      	ldr	r3, [pc, #336]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2e:	4a53      	ldr	r2, [pc, #332]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004f30:	f043 0310 	orr.w	r3, r3, #16
 8004f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f36:	4b51      	ldr	r3, [pc, #324]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3a:	f003 0310 	and.w	r3, r3, #16
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004f42:	2300      	movs	r3, #0
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	4b4d      	ldr	r3, [pc, #308]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4a:	4a4c      	ldr	r2, [pc, #304]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004f4c:	f043 0320 	orr.w	r3, r3, #32
 8004f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f52:	4b4a      	ldr	r3, [pc, #296]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f56:	f003 0320 	and.w	r3, r3, #32
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	4b46      	ldr	r3, [pc, #280]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f66:	4a45      	ldr	r2, [pc, #276]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004f68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f6e:	4b43      	ldr	r3, [pc, #268]	@ (800507c <BSP_SDRAM_MspInit+0x1f4>)
 8004f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004f86:	230c      	movs	r3, #12
 8004f88:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8004f8a:	2360      	movs	r3, #96	@ 0x60
 8004f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8004f8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f92:	4619      	mov	r1, r3
 8004f94:	483a      	ldr	r0, [pc, #232]	@ (8005080 <BSP_SDRAM_MspInit+0x1f8>)
 8004f96:	f001 f855 	bl	8006044 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8004f9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4837      	ldr	r0, [pc, #220]	@ (8005084 <BSP_SDRAM_MspInit+0x1fc>)
 8004fa6:	f001 f84d 	bl	8006044 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8004faa:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004fb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4834      	ldr	r0, [pc, #208]	@ (8005088 <BSP_SDRAM_MspInit+0x200>)
 8004fb8:	f001 f844 	bl	8006044 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004fbc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004fc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4830      	ldr	r0, [pc, #192]	@ (800508c <BSP_SDRAM_MspInit+0x204>)
 8004fca:	f001 f83b 	bl	8006044 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8004fce:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004fd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fd8:	4619      	mov	r1, r3
 8004fda:	482d      	ldr	r0, [pc, #180]	@ (8005090 <BSP_SDRAM_MspInit+0x208>)
 8004fdc:	f001 f832 	bl	8006044 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004fe0:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004fe6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fea:	4619      	mov	r1, r3
 8004fec:	4829      	ldr	r0, [pc, #164]	@ (8005094 <BSP_SDRAM_MspInit+0x20c>)
 8004fee:	f001 f829 	bl	8006044 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004ff2:	4b29      	ldr	r3, [pc, #164]	@ (8005098 <BSP_SDRAM_MspInit+0x210>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004ff8:	4b27      	ldr	r3, [pc, #156]	@ (8005098 <BSP_SDRAM_MspInit+0x210>)
 8004ffa:	2280      	movs	r2, #128	@ 0x80
 8004ffc:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004ffe:	4b26      	ldr	r3, [pc, #152]	@ (8005098 <BSP_SDRAM_MspInit+0x210>)
 8005000:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005004:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8005006:	4b24      	ldr	r3, [pc, #144]	@ (8005098 <BSP_SDRAM_MspInit+0x210>)
 8005008:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800500c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800500e:	4b22      	ldr	r3, [pc, #136]	@ (8005098 <BSP_SDRAM_MspInit+0x210>)
 8005010:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005014:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8005016:	4b20      	ldr	r3, [pc, #128]	@ (8005098 <BSP_SDRAM_MspInit+0x210>)
 8005018:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800501c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800501e:	4b1e      	ldr	r3, [pc, #120]	@ (8005098 <BSP_SDRAM_MspInit+0x210>)
 8005020:	2200      	movs	r2, #0
 8005022:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005024:	4b1c      	ldr	r3, [pc, #112]	@ (8005098 <BSP_SDRAM_MspInit+0x210>)
 8005026:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800502a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800502c:	4b1a      	ldr	r3, [pc, #104]	@ (8005098 <BSP_SDRAM_MspInit+0x210>)
 800502e:	2200      	movs	r2, #0
 8005030:	625a      	str	r2, [r3, #36]	@ 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005032:	4b19      	ldr	r3, [pc, #100]	@ (8005098 <BSP_SDRAM_MspInit+0x210>)
 8005034:	2203      	movs	r2, #3
 8005036:	629a      	str	r2, [r3, #40]	@ 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005038:	4b17      	ldr	r3, [pc, #92]	@ (8005098 <BSP_SDRAM_MspInit+0x210>)
 800503a:	2200      	movs	r2, #0
 800503c:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800503e:	4b16      	ldr	r3, [pc, #88]	@ (8005098 <BSP_SDRAM_MspInit+0x210>)
 8005040:	2200      	movs	r2, #0
 8005042:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8005044:	4b14      	ldr	r3, [pc, #80]	@ (8005098 <BSP_SDRAM_MspInit+0x210>)
 8005046:	4a15      	ldr	r2, [pc, #84]	@ (800509c <BSP_SDRAM_MspInit+0x214>)
 8005048:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a12      	ldr	r2, [pc, #72]	@ (8005098 <BSP_SDRAM_MspInit+0x210>)
 800504e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005050:	4a11      	ldr	r2, [pc, #68]	@ (8005098 <BSP_SDRAM_MspInit+0x210>)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8005056:	4810      	ldr	r0, [pc, #64]	@ (8005098 <BSP_SDRAM_MspInit+0x210>)
 8005058:	f000 fc4e 	bl	80058f8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800505c:	480e      	ldr	r0, [pc, #56]	@ (8005098 <BSP_SDRAM_MspInit+0x210>)
 800505e:	f000 fb9d 	bl	800579c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8005062:	2200      	movs	r2, #0
 8005064:	210f      	movs	r1, #15
 8005066:	2038      	movs	r0, #56	@ 0x38
 8005068:	f000 fb61 	bl	800572e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800506c:	2038      	movs	r0, #56	@ 0x38
 800506e:	f000 fb7a 	bl	8005766 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8005072:	bf00      	nop
 8005074:	3740      	adds	r7, #64	@ 0x40
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	40023800 	.word	0x40023800
 8005080:	40020400 	.word	0x40020400
 8005084:	40020800 	.word	0x40020800
 8005088:	40020c00 	.word	0x40020c00
 800508c:	40021000 	.word	0x40021000
 8005090:	40021400 	.word	0x40021400
 8005094:	40021800 	.word	0x40021800
 8005098:	20002648 	.word	0x20002648
 800509c:	40026410 	.word	0x40026410

080050a0 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	460a      	mov	r2, r1
 80050aa:	80fb      	strh	r3, [r7, #6]
 80050ac:	4613      	mov	r3, r2
 80050ae:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80050b4:	4a13      	ldr	r2, [pc, #76]	@ (8005104 <BSP_TS_Init+0x64>)
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80050ba:	4a13      	ldr	r2, [pc, #76]	@ (8005108 <BSP_TS_Init+0x68>)
 80050bc:	88bb      	ldrh	r3, [r7, #4]
 80050be:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80050c0:	4b12      	ldr	r3, [pc, #72]	@ (800510c <BSP_TS_Init+0x6c>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2082      	movs	r0, #130	@ 0x82
 80050c6:	4798      	blx	r3
 80050c8:	4603      	mov	r3, r0
 80050ca:	461a      	mov	r2, r3
 80050cc:	f640 0311 	movw	r3, #2065	@ 0x811
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d104      	bne.n	80050de <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 80050d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005110 <BSP_TS_Init+0x70>)
 80050d6:	4a0d      	ldr	r2, [pc, #52]	@ (800510c <BSP_TS_Init+0x6c>)
 80050d8:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d109      	bne.n	80050f8 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 80050e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005110 <BSP_TS_Init+0x70>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2082      	movs	r0, #130	@ 0x82
 80050ec:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 80050ee:	4b08      	ldr	r3, [pc, #32]	@ (8005110 <BSP_TS_Init+0x70>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	2082      	movs	r0, #130	@ 0x82
 80050f6:	4798      	blx	r3
  }

  return ret;
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	200026ac 	.word	0x200026ac
 8005108:	200026ae 	.word	0x200026ae
 800510c:	20000140 	.word	0x20000140
 8005110:	200026a8 	.word	0x200026a8

08005114 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8005118:	4b03      	ldr	r3, [pc, #12]	@ (8005128 <BSP_TS_ITGetStatus+0x14>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	2082      	movs	r0, #130	@ 0x82
 8005120:	4798      	blx	r3
 8005122:	4603      	mov	r3, r0
}
 8005124:	4618      	mov	r0, r3
 8005126:	bd80      	pop	{r7, pc}
 8005128:	200026a8 	.word	0x200026a8

0800512c <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8005134:	4b4f      	ldr	r3, [pc, #316]	@ (8005274 <BSP_TS_GetState+0x148>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	2082      	movs	r0, #130	@ 0x82
 800513c:	4798      	blx	r3
 800513e:	4603      	mov	r3, r0
 8005140:	461a      	mov	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 808d 	beq.w	800526a <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8005150:	4b48      	ldr	r3, [pc, #288]	@ (8005274 <BSP_TS_GetState+0x148>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f107 020c 	add.w	r2, r7, #12
 800515a:	f107 010e 	add.w	r1, r7, #14
 800515e:	2082      	movs	r0, #130	@ 0x82
 8005160:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8005162:	89bb      	ldrh	r3, [r7, #12]
 8005164:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005168:	b29b      	uxth	r3, r3
 800516a:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 800516c:	89bb      	ldrh	r3, [r7, #12]
 800516e:	4a42      	ldr	r2, [pc, #264]	@ (8005278 <BSP_TS_GetState+0x14c>)
 8005170:	fba2 2303 	umull	r2, r3, r2, r3
 8005174:	08db      	lsrs	r3, r3, #3
 8005176:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8005178:	8abb      	ldrh	r3, [r7, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d102      	bne.n	8005184 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 800517e:	2300      	movs	r3, #0
 8005180:	82bb      	strh	r3, [r7, #20]
 8005182:	e008      	b.n	8005196 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8005184:	4b3d      	ldr	r3, [pc, #244]	@ (800527c <BSP_TS_GetState+0x150>)
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	8aba      	ldrh	r2, [r7, #20]
 800518a:	429a      	cmp	r2, r3
 800518c:	d903      	bls.n	8005196 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 800518e:	4b3b      	ldr	r3, [pc, #236]	@ (800527c <BSP_TS_GetState+0x150>)
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	3b01      	subs	r3, #1
 8005194:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8005196:	8abb      	ldrh	r3, [r7, #20]
 8005198:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 800519a:	89fb      	ldrh	r3, [r7, #14]
 800519c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d806      	bhi.n	80051b2 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 80051a4:	89fb      	ldrh	r3, [r7, #14]
 80051a6:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 80051aa:	330e      	adds	r3, #14
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	81fb      	strh	r3, [r7, #14]
 80051b0:	e005      	b.n	80051be <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 80051b2:	89fb      	ldrh	r3, [r7, #14]
 80051b4:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80051b8:	3308      	adds	r3, #8
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 80051be:	89fb      	ldrh	r3, [r7, #14]
 80051c0:	4a2f      	ldr	r2, [pc, #188]	@ (8005280 <BSP_TS_GetState+0x154>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	08db      	lsrs	r3, r3, #3
 80051c8:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 80051ca:	8afb      	ldrh	r3, [r7, #22]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d102      	bne.n	80051d6 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	82fb      	strh	r3, [r7, #22]
 80051d4:	e008      	b.n	80051e8 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 80051d6:	4b2b      	ldr	r3, [pc, #172]	@ (8005284 <BSP_TS_GetState+0x158>)
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	8afa      	ldrh	r2, [r7, #22]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d903      	bls.n	80051e8 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 80051e0:	4b28      	ldr	r3, [pc, #160]	@ (8005284 <BSP_TS_GetState+0x158>)
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	3b01      	subs	r3, #1
 80051e6:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 80051e8:	8afb      	ldrh	r3, [r7, #22]
 80051ea:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 80051ec:	89fb      	ldrh	r3, [r7, #14]
 80051ee:	461a      	mov	r2, r3
 80051f0:	4b25      	ldr	r3, [pc, #148]	@ (8005288 <BSP_TS_GetState+0x15c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d906      	bls.n	8005206 <BSP_TS_GetState+0xda>
 80051f8:	89fa      	ldrh	r2, [r7, #14]
 80051fa:	4b23      	ldr	r3, [pc, #140]	@ (8005288 <BSP_TS_GetState+0x15c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	b29b      	uxth	r3, r3
 8005204:	e005      	b.n	8005212 <BSP_TS_GetState+0xe6>
 8005206:	4b20      	ldr	r3, [pc, #128]	@ (8005288 <BSP_TS_GetState+0x15c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	b29a      	uxth	r2, r3
 800520c:	89fb      	ldrh	r3, [r7, #14]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	b29b      	uxth	r3, r3
 8005212:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8005214:	89bb      	ldrh	r3, [r7, #12]
 8005216:	461a      	mov	r2, r3
 8005218:	4b1c      	ldr	r3, [pc, #112]	@ (800528c <BSP_TS_GetState+0x160>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d906      	bls.n	800522e <BSP_TS_GetState+0x102>
 8005220:	89ba      	ldrh	r2, [r7, #12]
 8005222:	4b1a      	ldr	r3, [pc, #104]	@ (800528c <BSP_TS_GetState+0x160>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	b29b      	uxth	r3, r3
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	b29b      	uxth	r3, r3
 800522c:	e005      	b.n	800523a <BSP_TS_GetState+0x10e>
 800522e:	4b17      	ldr	r3, [pc, #92]	@ (800528c <BSP_TS_GetState+0x160>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	b29a      	uxth	r2, r3
 8005234:	89bb      	ldrh	r3, [r7, #12]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	b29b      	uxth	r3, r3
 800523a:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 800523c:	8a7a      	ldrh	r2, [r7, #18]
 800523e:	8a3b      	ldrh	r3, [r7, #16]
 8005240:	4413      	add	r3, r2
 8005242:	2b05      	cmp	r3, #5
 8005244:	dd07      	ble.n	8005256 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8005246:	89fb      	ldrh	r3, [r7, #14]
 8005248:	461a      	mov	r2, r3
 800524a:	4b0f      	ldr	r3, [pc, #60]	@ (8005288 <BSP_TS_GetState+0x15c>)
 800524c:	601a      	str	r2, [r3, #0]
      _y = y; 
 800524e:	89bb      	ldrh	r3, [r7, #12]
 8005250:	461a      	mov	r2, r3
 8005252:	4b0e      	ldr	r3, [pc, #56]	@ (800528c <BSP_TS_GetState+0x160>)
 8005254:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8005256:	4b0c      	ldr	r3, [pc, #48]	@ (8005288 <BSP_TS_GetState+0x15c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	b29a      	uxth	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8005260:	4b0a      	ldr	r3, [pc, #40]	@ (800528c <BSP_TS_GetState+0x160>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	b29a      	uxth	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	809a      	strh	r2, [r3, #4]
  }
}
 800526a:	bf00      	nop
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	200026a8 	.word	0x200026a8
 8005278:	ba2e8ba3 	.word	0xba2e8ba3
 800527c:	200026ae 	.word	0x200026ae
 8005280:	88888889 	.word	0x88888889
 8005284:	200026ac 	.word	0x200026ac
 8005288:	200026b0 	.word	0x200026b0
 800528c:	200026b4 	.word	0x200026b4

08005290 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 8005294:	4b03      	ldr	r3, [pc, #12]	@ (80052a4 <BSP_TS_ITClear+0x14>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	2082      	movs	r0, #130	@ 0x82
 800529c:	4798      	blx	r3
}
 800529e:	bf00      	nop
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	200026a8 	.word	0x200026a8

080052a8 <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 80052b4:	2300      	movs	r3, #0
 80052b6:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	887a      	ldrh	r2, [r7, #2]
 80052bc:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052cc:	d02c      	beq.n	8005328 <arm_cfft_init_f32+0x80>
 80052ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052d2:	f300 809e 	bgt.w	8005412 <arm_cfft_init_f32+0x16a>
 80052d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052da:	d032      	beq.n	8005342 <arm_cfft_init_f32+0x9a>
 80052dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052e0:	f300 8097 	bgt.w	8005412 <arm_cfft_init_f32+0x16a>
 80052e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052e8:	d038      	beq.n	800535c <arm_cfft_init_f32+0xb4>
 80052ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ee:	f300 8090 	bgt.w	8005412 <arm_cfft_init_f32+0x16a>
 80052f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052f6:	d03e      	beq.n	8005376 <arm_cfft_init_f32+0xce>
 80052f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052fc:	f300 8089 	bgt.w	8005412 <arm_cfft_init_f32+0x16a>
 8005300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005304:	d044      	beq.n	8005390 <arm_cfft_init_f32+0xe8>
 8005306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800530a:	f300 8082 	bgt.w	8005412 <arm_cfft_init_f32+0x16a>
 800530e:	2b80      	cmp	r3, #128	@ 0x80
 8005310:	d04b      	beq.n	80053aa <arm_cfft_init_f32+0x102>
 8005312:	2b80      	cmp	r3, #128	@ 0x80
 8005314:	dc7d      	bgt.n	8005412 <arm_cfft_init_f32+0x16a>
 8005316:	2b40      	cmp	r3, #64	@ 0x40
 8005318:	d054      	beq.n	80053c4 <arm_cfft_init_f32+0x11c>
 800531a:	2b40      	cmp	r3, #64	@ 0x40
 800531c:	dc79      	bgt.n	8005412 <arm_cfft_init_f32+0x16a>
 800531e:	2b10      	cmp	r3, #16
 8005320:	d06a      	beq.n	80053f8 <arm_cfft_init_f32+0x150>
 8005322:	2b20      	cmp	r3, #32
 8005324:	d05b      	beq.n	80053de <arm_cfft_init_f32+0x136>
 8005326:	e074      	b.n	8005412 <arm_cfft_init_f32+0x16a>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 8005328:	4b3f      	ldr	r3, [pc, #252]	@ (8005428 <arm_cfft_init_f32+0x180>)
 800532a:	899a      	ldrh	r2, [r3, #12]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	819a      	strh	r2, [r3, #12]
 8005330:	4b3d      	ldr	r3, [pc, #244]	@ (8005428 <arm_cfft_init_f32+0x180>)
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	609a      	str	r2, [r3, #8]
 8005338:	4b3b      	ldr	r3, [pc, #236]	@ (8005428 <arm_cfft_init_f32+0x180>)
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	605a      	str	r2, [r3, #4]
            break;
 8005340:	e06a      	b.n	8005418 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 8005342:	4b3a      	ldr	r3, [pc, #232]	@ (800542c <arm_cfft_init_f32+0x184>)
 8005344:	899a      	ldrh	r2, [r3, #12]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	819a      	strh	r2, [r3, #12]
 800534a:	4b38      	ldr	r3, [pc, #224]	@ (800542c <arm_cfft_init_f32+0x184>)
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	609a      	str	r2, [r3, #8]
 8005352:	4b36      	ldr	r3, [pc, #216]	@ (800542c <arm_cfft_init_f32+0x184>)
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	605a      	str	r2, [r3, #4]

            break;
 800535a:	e05d      	b.n	8005418 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 800535c:	4b34      	ldr	r3, [pc, #208]	@ (8005430 <arm_cfft_init_f32+0x188>)
 800535e:	899a      	ldrh	r2, [r3, #12]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	819a      	strh	r2, [r3, #12]
 8005364:	4b32      	ldr	r3, [pc, #200]	@ (8005430 <arm_cfft_init_f32+0x188>)
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	609a      	str	r2, [r3, #8]
 800536c:	4b30      	ldr	r3, [pc, #192]	@ (8005430 <arm_cfft_init_f32+0x188>)
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	605a      	str	r2, [r3, #4]

            break;
 8005374:	e050      	b.n	8005418 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 8005376:	4b2f      	ldr	r3, [pc, #188]	@ (8005434 <arm_cfft_init_f32+0x18c>)
 8005378:	899a      	ldrh	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	819a      	strh	r2, [r3, #12]
 800537e:	4b2d      	ldr	r3, [pc, #180]	@ (8005434 <arm_cfft_init_f32+0x18c>)
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	609a      	str	r2, [r3, #8]
 8005386:	4b2b      	ldr	r3, [pc, #172]	@ (8005434 <arm_cfft_init_f32+0x18c>)
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	605a      	str	r2, [r3, #4]
            break;
 800538e:	e043      	b.n	8005418 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 8005390:	4b29      	ldr	r3, [pc, #164]	@ (8005438 <arm_cfft_init_f32+0x190>)
 8005392:	899a      	ldrh	r2, [r3, #12]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	819a      	strh	r2, [r3, #12]
 8005398:	4b27      	ldr	r3, [pc, #156]	@ (8005438 <arm_cfft_init_f32+0x190>)
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	609a      	str	r2, [r3, #8]
 80053a0:	4b25      	ldr	r3, [pc, #148]	@ (8005438 <arm_cfft_init_f32+0x190>)
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	605a      	str	r2, [r3, #4]
            break;
 80053a8:	e036      	b.n	8005418 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 80053aa:	4b24      	ldr	r3, [pc, #144]	@ (800543c <arm_cfft_init_f32+0x194>)
 80053ac:	899a      	ldrh	r2, [r3, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	819a      	strh	r2, [r3, #12]
 80053b2:	4b22      	ldr	r3, [pc, #136]	@ (800543c <arm_cfft_init_f32+0x194>)
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	609a      	str	r2, [r3, #8]
 80053ba:	4b20      	ldr	r3, [pc, #128]	@ (800543c <arm_cfft_init_f32+0x194>)
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	605a      	str	r2, [r3, #4]
            break;
 80053c2:	e029      	b.n	8005418 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 80053c4:	4b1e      	ldr	r3, [pc, #120]	@ (8005440 <arm_cfft_init_f32+0x198>)
 80053c6:	899a      	ldrh	r2, [r3, #12]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	819a      	strh	r2, [r3, #12]
 80053cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005440 <arm_cfft_init_f32+0x198>)
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	609a      	str	r2, [r3, #8]
 80053d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005440 <arm_cfft_init_f32+0x198>)
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	605a      	str	r2, [r3, #4]
            break;
 80053dc:	e01c      	b.n	8005418 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 80053de:	4b19      	ldr	r3, [pc, #100]	@ (8005444 <arm_cfft_init_f32+0x19c>)
 80053e0:	899a      	ldrh	r2, [r3, #12]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	819a      	strh	r2, [r3, #12]
 80053e6:	4b17      	ldr	r3, [pc, #92]	@ (8005444 <arm_cfft_init_f32+0x19c>)
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	609a      	str	r2, [r3, #8]
 80053ee:	4b15      	ldr	r3, [pc, #84]	@ (8005444 <arm_cfft_init_f32+0x19c>)
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	605a      	str	r2, [r3, #4]
            break;
 80053f6:	e00f      	b.n	8005418 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 80053f8:	4b13      	ldr	r3, [pc, #76]	@ (8005448 <arm_cfft_init_f32+0x1a0>)
 80053fa:	899a      	ldrh	r2, [r3, #12]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	819a      	strh	r2, [r3, #12]
 8005400:	4b11      	ldr	r3, [pc, #68]	@ (8005448 <arm_cfft_init_f32+0x1a0>)
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	609a      	str	r2, [r3, #8]
 8005408:	4b0f      	ldr	r3, [pc, #60]	@ (8005448 <arm_cfft_init_f32+0x1a0>)
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	605a      	str	r2, [r3, #4]
            break;
 8005410:	e002      	b.n	8005418 <arm_cfft_init_f32+0x170>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 8005412:	23ff      	movs	r3, #255	@ 0xff
 8005414:	73fb      	strb	r3, [r7, #15]
            break;
 8005416:	bf00      	nop
        }


        return (status);
 8005418:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	08010b50 	.word	0x08010b50
 800542c:	08010b80 	.word	0x08010b80
 8005430:	08010b20 	.word	0x08010b20
 8005434:	08010b60 	.word	0x08010b60
 8005438:	08010b90 	.word	0x08010b90
 800543c:	08010b40 	.word	0x08010b40
 8005440:	08010b30 	.word	0x08010b30
 8005444:	08010ba0 	.word	0x08010ba0
 8005448:	08010b70 	.word	0x08010b70

0800544c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005450:	4b0e      	ldr	r3, [pc, #56]	@ (800548c <HAL_Init+0x40>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a0d      	ldr	r2, [pc, #52]	@ (800548c <HAL_Init+0x40>)
 8005456:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800545a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800545c:	4b0b      	ldr	r3, [pc, #44]	@ (800548c <HAL_Init+0x40>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a0a      	ldr	r2, [pc, #40]	@ (800548c <HAL_Init+0x40>)
 8005462:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005466:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005468:	4b08      	ldr	r3, [pc, #32]	@ (800548c <HAL_Init+0x40>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a07      	ldr	r2, [pc, #28]	@ (800548c <HAL_Init+0x40>)
 800546e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005472:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005474:	2003      	movs	r0, #3
 8005476:	f000 f94f 	bl	8005718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800547a:	200f      	movs	r0, #15
 800547c:	f000 f808 	bl	8005490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005480:	f7fd fd4a 	bl	8002f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	40023c00 	.word	0x40023c00

08005490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005498:	4b12      	ldr	r3, [pc, #72]	@ (80054e4 <HAL_InitTick+0x54>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	4b12      	ldr	r3, [pc, #72]	@ (80054e8 <HAL_InitTick+0x58>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	4619      	mov	r1, r3
 80054a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80054a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80054aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 f967 	bl	8005782 <HAL_SYSTICK_Config>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e00e      	b.n	80054dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b0f      	cmp	r3, #15
 80054c2:	d80a      	bhi.n	80054da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054c4:	2200      	movs	r2, #0
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	f04f 30ff 	mov.w	r0, #4294967295
 80054cc:	f000 f92f 	bl	800572e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054d0:	4a06      	ldr	r2, [pc, #24]	@ (80054ec <HAL_InitTick+0x5c>)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	e000      	b.n	80054dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	20000104 	.word	0x20000104
 80054e8:	20000198 	.word	0x20000198
 80054ec:	20000194 	.word	0x20000194

080054f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054f4:	4b06      	ldr	r3, [pc, #24]	@ (8005510 <HAL_IncTick+0x20>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	4b06      	ldr	r3, [pc, #24]	@ (8005514 <HAL_IncTick+0x24>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4413      	add	r3, r2
 8005500:	4a04      	ldr	r2, [pc, #16]	@ (8005514 <HAL_IncTick+0x24>)
 8005502:	6013      	str	r3, [r2, #0]
}
 8005504:	bf00      	nop
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	20000198 	.word	0x20000198
 8005514:	200026b8 	.word	0x200026b8

08005518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  return uwTick;
 800551c:	4b03      	ldr	r3, [pc, #12]	@ (800552c <HAL_GetTick+0x14>)
 800551e:	681b      	ldr	r3, [r3, #0]
}
 8005520:	4618      	mov	r0, r3
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	200026b8 	.word	0x200026b8

08005530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005538:	f7ff ffee 	bl	8005518 <HAL_GetTick>
 800553c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005548:	d005      	beq.n	8005556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800554a:	4b0a      	ldr	r3, [pc, #40]	@ (8005574 <HAL_Delay+0x44>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005556:	bf00      	nop
 8005558:	f7ff ffde 	bl	8005518 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	429a      	cmp	r2, r3
 8005566:	d8f7      	bhi.n	8005558 <HAL_Delay+0x28>
  {
  }
}
 8005568:	bf00      	nop
 800556a:	bf00      	nop
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000198 	.word	0x20000198

08005578 <__NVIC_SetPriorityGrouping>:
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005588:	4b0c      	ldr	r3, [pc, #48]	@ (80055bc <__NVIC_SetPriorityGrouping+0x44>)
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005594:	4013      	ands	r3, r2
 8005596:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80055a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055aa:	4a04      	ldr	r2, [pc, #16]	@ (80055bc <__NVIC_SetPriorityGrouping+0x44>)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	60d3      	str	r3, [r2, #12]
}
 80055b0:	bf00      	nop
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	e000ed00 	.word	0xe000ed00

080055c0 <__NVIC_GetPriorityGrouping>:
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055c4:	4b04      	ldr	r3, [pc, #16]	@ (80055d8 <__NVIC_GetPriorityGrouping+0x18>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	0a1b      	lsrs	r3, r3, #8
 80055ca:	f003 0307 	and.w	r3, r3, #7
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	e000ed00 	.word	0xe000ed00

080055dc <__NVIC_EnableIRQ>:
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	db0b      	blt.n	8005606 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	f003 021f 	and.w	r2, r3, #31
 80055f4:	4907      	ldr	r1, [pc, #28]	@ (8005614 <__NVIC_EnableIRQ+0x38>)
 80055f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	2001      	movs	r0, #1
 80055fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	e000e100 	.word	0xe000e100

08005618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	4603      	mov	r3, r0
 8005620:	6039      	str	r1, [r7, #0]
 8005622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005628:	2b00      	cmp	r3, #0
 800562a:	db0a      	blt.n	8005642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	b2da      	uxtb	r2, r3
 8005630:	490c      	ldr	r1, [pc, #48]	@ (8005664 <__NVIC_SetPriority+0x4c>)
 8005632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005636:	0112      	lsls	r2, r2, #4
 8005638:	b2d2      	uxtb	r2, r2
 800563a:	440b      	add	r3, r1
 800563c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005640:	e00a      	b.n	8005658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	b2da      	uxtb	r2, r3
 8005646:	4908      	ldr	r1, [pc, #32]	@ (8005668 <__NVIC_SetPriority+0x50>)
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	3b04      	subs	r3, #4
 8005650:	0112      	lsls	r2, r2, #4
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	440b      	add	r3, r1
 8005656:	761a      	strb	r2, [r3, #24]
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	e000e100 	.word	0xe000e100
 8005668:	e000ed00 	.word	0xe000ed00

0800566c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800566c:	b480      	push	{r7}
 800566e:	b089      	sub	sp, #36	@ 0x24
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	f1c3 0307 	rsb	r3, r3, #7
 8005686:	2b04      	cmp	r3, #4
 8005688:	bf28      	it	cs
 800568a:	2304      	movcs	r3, #4
 800568c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	3304      	adds	r3, #4
 8005692:	2b06      	cmp	r3, #6
 8005694:	d902      	bls.n	800569c <NVIC_EncodePriority+0x30>
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	3b03      	subs	r3, #3
 800569a:	e000      	b.n	800569e <NVIC_EncodePriority+0x32>
 800569c:	2300      	movs	r3, #0
 800569e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056a0:	f04f 32ff 	mov.w	r2, #4294967295
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	43da      	mvns	r2, r3
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	401a      	ands	r2, r3
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056b4:	f04f 31ff 	mov.w	r1, #4294967295
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	fa01 f303 	lsl.w	r3, r1, r3
 80056be:	43d9      	mvns	r1, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056c4:	4313      	orrs	r3, r2
         );
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3724      	adds	r7, #36	@ 0x24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
	...

080056d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3b01      	subs	r3, #1
 80056e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056e4:	d301      	bcc.n	80056ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056e6:	2301      	movs	r3, #1
 80056e8:	e00f      	b.n	800570a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005714 <SysTick_Config+0x40>)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056f2:	210f      	movs	r1, #15
 80056f4:	f04f 30ff 	mov.w	r0, #4294967295
 80056f8:	f7ff ff8e 	bl	8005618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056fc:	4b05      	ldr	r3, [pc, #20]	@ (8005714 <SysTick_Config+0x40>)
 80056fe:	2200      	movs	r2, #0
 8005700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005702:	4b04      	ldr	r3, [pc, #16]	@ (8005714 <SysTick_Config+0x40>)
 8005704:	2207      	movs	r2, #7
 8005706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	e000e010 	.word	0xe000e010

08005718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7ff ff29 	bl	8005578 <__NVIC_SetPriorityGrouping>
}
 8005726:	bf00      	nop
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800572e:	b580      	push	{r7, lr}
 8005730:	b086      	sub	sp, #24
 8005732:	af00      	add	r7, sp, #0
 8005734:	4603      	mov	r3, r0
 8005736:	60b9      	str	r1, [r7, #8]
 8005738:	607a      	str	r2, [r7, #4]
 800573a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005740:	f7ff ff3e 	bl	80055c0 <__NVIC_GetPriorityGrouping>
 8005744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	6978      	ldr	r0, [r7, #20]
 800574c:	f7ff ff8e 	bl	800566c <NVIC_EncodePriority>
 8005750:	4602      	mov	r2, r0
 8005752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005756:	4611      	mov	r1, r2
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff ff5d 	bl	8005618 <__NVIC_SetPriority>
}
 800575e:	bf00      	nop
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
 800576c:	4603      	mov	r3, r0
 800576e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff ff31 	bl	80055dc <__NVIC_EnableIRQ>
}
 800577a:	bf00      	nop
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b082      	sub	sp, #8
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff ffa2 	bl	80056d4 <SysTick_Config>
 8005790:	4603      	mov	r3, r0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80057a8:	f7ff feb6 	bl	8005518 <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e099      	b.n	80058ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 0201 	bic.w	r2, r2, #1
 80057d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057d8:	e00f      	b.n	80057fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057da:	f7ff fe9d 	bl	8005518 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b05      	cmp	r3, #5
 80057e6:	d908      	bls.n	80057fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2220      	movs	r2, #32
 80057ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2203      	movs	r2, #3
 80057f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e078      	b.n	80058ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1e8      	bne.n	80057da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4b38      	ldr	r3, [pc, #224]	@ (80058f4 <HAL_DMA_Init+0x158>)
 8005814:	4013      	ands	r3, r2
 8005816:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005826:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800583e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	4313      	orrs	r3, r2
 800584a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005850:	2b04      	cmp	r3, #4
 8005852:	d107      	bne.n	8005864 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585c:	4313      	orrs	r3, r2
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	4313      	orrs	r3, r2
 8005862:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f023 0307 	bic.w	r3, r3, #7
 800587a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588a:	2b04      	cmp	r3, #4
 800588c:	d117      	bne.n	80058be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	4313      	orrs	r3, r2
 8005896:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00e      	beq.n	80058be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f8bd 	bl	8005a20 <DMA_CheckFifoParam>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d008      	beq.n	80058be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2240      	movs	r2, #64	@ 0x40
 80058b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80058ba:	2301      	movs	r3, #1
 80058bc:	e016      	b.n	80058ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f874 	bl	80059b4 <DMA_CalcBaseAndBitshift>
 80058cc:	4603      	mov	r3, r0
 80058ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d4:	223f      	movs	r2, #63	@ 0x3f
 80058d6:	409a      	lsls	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	f010803f 	.word	0xf010803f

080058f8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e050      	b.n	80059ac <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d101      	bne.n	800591a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005916:	2302      	movs	r3, #2
 8005918:	e048      	b.n	80059ac <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0201 	bic.w	r2, r2, #1
 8005928:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2200      	movs	r2, #0
 8005938:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2200      	movs	r2, #0
 8005940:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2200      	movs	r2, #0
 8005948:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2200      	movs	r2, #0
 8005950:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2221      	movs	r2, #33	@ 0x21
 8005958:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f82a 	bl	80059b4 <DMA_CalcBaseAndBitshift>
 8005960:	4603      	mov	r3, r0
 8005962:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800598c:	223f      	movs	r2, #63	@ 0x3f
 800598e:	409a      	lsls	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	3b10      	subs	r3, #16
 80059c4:	4a14      	ldr	r2, [pc, #80]	@ (8005a18 <DMA_CalcBaseAndBitshift+0x64>)
 80059c6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ca:	091b      	lsrs	r3, r3, #4
 80059cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059ce:	4a13      	ldr	r2, [pc, #76]	@ (8005a1c <DMA_CalcBaseAndBitshift+0x68>)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4413      	add	r3, r2
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d909      	bls.n	80059f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80059ea:	f023 0303 	bic.w	r3, r3, #3
 80059ee:	1d1a      	adds	r2, r3, #4
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80059f4:	e007      	b.n	8005a06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80059fe:	f023 0303 	bic.w	r3, r3, #3
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	aaaaaaab 	.word	0xaaaaaaab
 8005a1c:	08010b18 	.word	0x08010b18

08005a20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d11f      	bne.n	8005a7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d856      	bhi.n	8005aee <DMA_CheckFifoParam+0xce>
 8005a40:	a201      	add	r2, pc, #4	@ (adr r2, 8005a48 <DMA_CheckFifoParam+0x28>)
 8005a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a46:	bf00      	nop
 8005a48:	08005a59 	.word	0x08005a59
 8005a4c:	08005a6b 	.word	0x08005a6b
 8005a50:	08005a59 	.word	0x08005a59
 8005a54:	08005aef 	.word	0x08005aef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d046      	beq.n	8005af2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a68:	e043      	b.n	8005af2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005a72:	d140      	bne.n	8005af6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a78:	e03d      	b.n	8005af6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a82:	d121      	bne.n	8005ac8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d837      	bhi.n	8005afa <DMA_CheckFifoParam+0xda>
 8005a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a90 <DMA_CheckFifoParam+0x70>)
 8005a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a90:	08005aa1 	.word	0x08005aa1
 8005a94:	08005aa7 	.word	0x08005aa7
 8005a98:	08005aa1 	.word	0x08005aa1
 8005a9c:	08005ab9 	.word	0x08005ab9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8005aa4:	e030      	b.n	8005b08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aaa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d025      	beq.n	8005afe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ab6:	e022      	b.n	8005afe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ac0:	d11f      	bne.n	8005b02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005ac6:	e01c      	b.n	8005b02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d903      	bls.n	8005ad6 <DMA_CheckFifoParam+0xb6>
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d003      	beq.n	8005adc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005ad4:	e018      	b.n	8005b08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8005ada:	e015      	b.n	8005b08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00e      	beq.n	8005b06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	73fb      	strb	r3, [r7, #15]
      break;
 8005aec:	e00b      	b.n	8005b06 <DMA_CheckFifoParam+0xe6>
      break;
 8005aee:	bf00      	nop
 8005af0:	e00a      	b.n	8005b08 <DMA_CheckFifoParam+0xe8>
      break;
 8005af2:	bf00      	nop
 8005af4:	e008      	b.n	8005b08 <DMA_CheckFifoParam+0xe8>
      break;
 8005af6:	bf00      	nop
 8005af8:	e006      	b.n	8005b08 <DMA_CheckFifoParam+0xe8>
      break;
 8005afa:	bf00      	nop
 8005afc:	e004      	b.n	8005b08 <DMA_CheckFifoParam+0xe8>
      break;
 8005afe:	bf00      	nop
 8005b00:	e002      	b.n	8005b08 <DMA_CheckFifoParam+0xe8>
      break;   
 8005b02:	bf00      	nop
 8005b04:	e000      	b.n	8005b08 <DMA_CheckFifoParam+0xe8>
      break;
 8005b06:	bf00      	nop
    }
  } 
  
  return status; 
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop

08005b18 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e03b      	b.n	8005ba2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d106      	bne.n	8005b44 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f833 	bl	8005baa <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b68:	f023 0107 	bic.w	r1, r3, #7
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005b82:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	68d1      	ldr	r1, [r2, #12]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6812      	ldr	r2, [r2, #0]
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b086      	sub	sp, #24
 8005bc2:	af02      	add	r7, sp, #8
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	607a      	str	r2, [r7, #4]
 8005bca:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d101      	bne.n	8005bda <HAL_DMA2D_Start+0x1c>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e018      	b.n	8005c0c <HAL_DMA2D_Start+0x4e>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2202      	movs	r2, #2
 8005be6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 f989 	bl	8005f0c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f042 0201 	orr.w	r2, r2, #1
 8005c08:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d056      	beq.n	8005cde <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8005c30:	f7ff fc72 	bl	8005518 <HAL_GetTick>
 8005c34:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005c36:	e04b      	b.n	8005cd0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d023      	beq.n	8005c92 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c58:	f043 0202 	orr.w	r2, r3, #2
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d005      	beq.n	8005c76 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c6e:	f043 0201 	orr.w	r2, r3, #1
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2221      	movs	r2, #33	@ 0x21
 8005c7c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2204      	movs	r2, #4
 8005c82:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e0a5      	b.n	8005dde <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c98:	d01a      	beq.n	8005cd0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005c9a:	f7ff fc3d 	bl	8005518 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d302      	bcc.n	8005cb0 <HAL_DMA2D_PollForTransfer+0x9c>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10f      	bne.n	8005cd0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb4:	f043 0220 	orr.w	r2, r3, #32
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e086      	b.n	8005dde <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0ac      	beq.n	8005c38 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	f003 0320 	and.w	r3, r3, #32
 8005ce8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d061      	beq.n	8005dc4 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d00:	f7ff fc0a 	bl	8005518 <HAL_GetTick>
 8005d04:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005d06:	e056      	b.n	8005db6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d02e      	beq.n	8005d78 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d28:	f043 0204 	orr.w	r2, r3, #4
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f003 0320 	and.w	r3, r3, #32
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d005      	beq.n	8005d46 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d3e:	f043 0202 	orr.w	r2, r3, #2
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d005      	beq.n	8005d5c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d54:	f043 0201 	orr.w	r2, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2229      	movs	r2, #41	@ 0x29
 8005d62:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2204      	movs	r2, #4
 8005d68:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e032      	b.n	8005dde <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7e:	d01a      	beq.n	8005db6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005d80:	f7ff fbca 	bl	8005518 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d302      	bcc.n	8005d96 <HAL_DMA2D_PollForTransfer+0x182>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10f      	bne.n	8005db6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d9a:	f043 0220 	orr.w	r2, r3, #32
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2203      	movs	r2, #3
 8005da6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e013      	b.n	8005dde <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d0a1      	beq.n	8005d08 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2212      	movs	r2, #18
 8005dca:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_DMA2D_ConfigLayer+0x20>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e079      	b.n	8005efc <HAL_DMA2D_ConfigLayer+0x114>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	3318      	adds	r3, #24
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	4413      	add	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	041b      	lsls	r3, r3, #16
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005e32:	4b35      	ldr	r3, [pc, #212]	@ (8005f08 <HAL_DMA2D_ConfigLayer+0x120>)
 8005e34:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2b0a      	cmp	r3, #10
 8005e3c:	d003      	beq.n	8005e46 <HAL_DMA2D_ConfigLayer+0x5e>
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	2b09      	cmp	r3, #9
 8005e44:	d107      	bne.n	8005e56 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	e005      	b.n	8005e62 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	061b      	lsls	r3, r3, #24
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d120      	bne.n	8005eaa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	43db      	mvns	r3, r3
 8005e72:	ea02 0103 	and.w	r1, r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	6812      	ldr	r2, [r2, #0]
 8005e88:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2b0a      	cmp	r3, #10
 8005e90:	d003      	beq.n	8005e9a <HAL_DMA2D_ConfigLayer+0xb2>
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b09      	cmp	r3, #9
 8005e98:	d127      	bne.n	8005eea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005ea6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ea8:	e01f      	b.n	8005eea <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69da      	ldr	r2, [r3, #28]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	ea02 0103 	and.w	r1, r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	6812      	ldr	r2, [r2, #0]
 8005eca:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	2b0a      	cmp	r3, #10
 8005ed2:	d003      	beq.n	8005edc <HAL_DMA2D_ConfigLayer+0xf4>
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2b09      	cmp	r3, #9
 8005eda:	d106      	bne.n	8005eea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005ee8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	371c      	adds	r7, #28
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	ff03000f 	.word	0xff03000f

08005f0c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b08b      	sub	sp, #44	@ 0x2c
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f20:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	041a      	lsls	r2, r3, #16
 8005f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f44:	d174      	bne.n	8006030 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005f4c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f54:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005f5c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d108      	bne.n	8005f7e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	431a      	orrs	r2, r3
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f7c:	e053      	b.n	8006026 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d106      	bne.n	8005f94 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f92:	e048      	b.n	8006026 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d111      	bne.n	8005fc0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	0cdb      	lsrs	r3, r3, #19
 8005fa0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	0a9b      	lsrs	r3, r3, #10
 8005fa6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	08db      	lsrs	r3, r3, #3
 8005fac:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	02db      	lsls	r3, r3, #11
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fbe:	e032      	b.n	8006026 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	2b03      	cmp	r3, #3
 8005fc6:	d117      	bne.n	8005ff8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	0fdb      	lsrs	r3, r3, #31
 8005fcc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	0cdb      	lsrs	r3, r3, #19
 8005fd2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	0adb      	lsrs	r3, r3, #11
 8005fd8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	08db      	lsrs	r3, r3, #3
 8005fde:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	029b      	lsls	r3, r3, #10
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	03db      	lsls	r3, r3, #15
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ff6:	e016      	b.n	8006026 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	0f1b      	lsrs	r3, r3, #28
 8005ffc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	0d1b      	lsrs	r3, r3, #20
 8006002:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	0b1b      	lsrs	r3, r3, #12
 8006008:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	091b      	lsrs	r3, r3, #4
 800600e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	011a      	lsls	r2, r3, #4
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	021b      	lsls	r3, r3, #8
 8006018:	431a      	orrs	r2, r3
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	031b      	lsls	r3, r3, #12
 800601e:	4313      	orrs	r3, r2
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	4313      	orrs	r3, r2
 8006024:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800602c:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800602e:	e003      	b.n	8006038 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	60da      	str	r2, [r3, #12]
}
 8006038:	bf00      	nop
 800603a:	372c      	adds	r7, #44	@ 0x2c
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006044:	b480      	push	{r7}
 8006046:	b089      	sub	sp, #36	@ 0x24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800604e:	2300      	movs	r3, #0
 8006050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006052:	2300      	movs	r3, #0
 8006054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006056:	2300      	movs	r3, #0
 8006058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800605a:	2300      	movs	r3, #0
 800605c:	61fb      	str	r3, [r7, #28]
 800605e:	e177      	b.n	8006350 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006060:	2201      	movs	r2, #1
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	fa02 f303 	lsl.w	r3, r2, r3
 8006068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	4013      	ands	r3, r2
 8006072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	429a      	cmp	r2, r3
 800607a:	f040 8166 	bne.w	800634a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d00b      	beq.n	800609e <HAL_GPIO_Init+0x5a>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2b02      	cmp	r3, #2
 800608c:	d007      	beq.n	800609e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006092:	2b11      	cmp	r3, #17
 8006094:	d003      	beq.n	800609e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2b12      	cmp	r3, #18
 800609c:	d130      	bne.n	8006100 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	2203      	movs	r2, #3
 80060aa:	fa02 f303 	lsl.w	r3, r2, r3
 80060ae:	43db      	mvns	r3, r3
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	4013      	ands	r3, r2
 80060b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	fa02 f303 	lsl.w	r3, r2, r3
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060d4:	2201      	movs	r2, #1
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	fa02 f303 	lsl.w	r3, r2, r3
 80060dc:	43db      	mvns	r3, r3
 80060de:	69ba      	ldr	r2, [r7, #24]
 80060e0:	4013      	ands	r3, r2
 80060e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	091b      	lsrs	r3, r3, #4
 80060ea:	f003 0201 	and.w	r2, r3, #1
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	fa02 f303 	lsl.w	r3, r2, r3
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	2203      	movs	r2, #3
 800610c:	fa02 f303 	lsl.w	r3, r2, r3
 8006110:	43db      	mvns	r3, r3
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	4013      	ands	r3, r2
 8006116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	4313      	orrs	r3, r2
 8006128:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	2b02      	cmp	r3, #2
 8006136:	d003      	beq.n	8006140 <HAL_GPIO_Init+0xfc>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	2b12      	cmp	r3, #18
 800613e:	d123      	bne.n	8006188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	08da      	lsrs	r2, r3, #3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3208      	adds	r2, #8
 8006148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	220f      	movs	r2, #15
 8006158:	fa02 f303 	lsl.w	r3, r2, r3
 800615c:	43db      	mvns	r3, r3
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	4013      	ands	r3, r2
 8006162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	691a      	ldr	r2, [r3, #16]
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	f003 0307 	and.w	r3, r3, #7
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	fa02 f303 	lsl.w	r3, r2, r3
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	4313      	orrs	r3, r2
 8006178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	08da      	lsrs	r2, r3, #3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3208      	adds	r2, #8
 8006182:	69b9      	ldr	r1, [r7, #24]
 8006184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	2203      	movs	r2, #3
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	43db      	mvns	r3, r3
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	4013      	ands	r3, r2
 800619e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f003 0203 	and.w	r2, r3, #3
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	fa02 f303 	lsl.w	r3, r2, r3
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 80c0 	beq.w	800634a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061ca:	2300      	movs	r3, #0
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	4b66      	ldr	r3, [pc, #408]	@ (8006368 <HAL_GPIO_Init+0x324>)
 80061d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d2:	4a65      	ldr	r2, [pc, #404]	@ (8006368 <HAL_GPIO_Init+0x324>)
 80061d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80061da:	4b63      	ldr	r3, [pc, #396]	@ (8006368 <HAL_GPIO_Init+0x324>)
 80061dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061e6:	4a61      	ldr	r2, [pc, #388]	@ (800636c <HAL_GPIO_Init+0x328>)
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	089b      	lsrs	r3, r3, #2
 80061ec:	3302      	adds	r3, #2
 80061ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	220f      	movs	r2, #15
 80061fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006202:	43db      	mvns	r3, r3
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	4013      	ands	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a58      	ldr	r2, [pc, #352]	@ (8006370 <HAL_GPIO_Init+0x32c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d037      	beq.n	8006282 <HAL_GPIO_Init+0x23e>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a57      	ldr	r2, [pc, #348]	@ (8006374 <HAL_GPIO_Init+0x330>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d031      	beq.n	800627e <HAL_GPIO_Init+0x23a>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a56      	ldr	r2, [pc, #344]	@ (8006378 <HAL_GPIO_Init+0x334>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d02b      	beq.n	800627a <HAL_GPIO_Init+0x236>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a55      	ldr	r2, [pc, #340]	@ (800637c <HAL_GPIO_Init+0x338>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d025      	beq.n	8006276 <HAL_GPIO_Init+0x232>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a54      	ldr	r2, [pc, #336]	@ (8006380 <HAL_GPIO_Init+0x33c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d01f      	beq.n	8006272 <HAL_GPIO_Init+0x22e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a53      	ldr	r2, [pc, #332]	@ (8006384 <HAL_GPIO_Init+0x340>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d019      	beq.n	800626e <HAL_GPIO_Init+0x22a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a52      	ldr	r2, [pc, #328]	@ (8006388 <HAL_GPIO_Init+0x344>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d013      	beq.n	800626a <HAL_GPIO_Init+0x226>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a51      	ldr	r2, [pc, #324]	@ (800638c <HAL_GPIO_Init+0x348>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00d      	beq.n	8006266 <HAL_GPIO_Init+0x222>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a50      	ldr	r2, [pc, #320]	@ (8006390 <HAL_GPIO_Init+0x34c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d007      	beq.n	8006262 <HAL_GPIO_Init+0x21e>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a4f      	ldr	r2, [pc, #316]	@ (8006394 <HAL_GPIO_Init+0x350>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d101      	bne.n	800625e <HAL_GPIO_Init+0x21a>
 800625a:	2309      	movs	r3, #9
 800625c:	e012      	b.n	8006284 <HAL_GPIO_Init+0x240>
 800625e:	230a      	movs	r3, #10
 8006260:	e010      	b.n	8006284 <HAL_GPIO_Init+0x240>
 8006262:	2308      	movs	r3, #8
 8006264:	e00e      	b.n	8006284 <HAL_GPIO_Init+0x240>
 8006266:	2307      	movs	r3, #7
 8006268:	e00c      	b.n	8006284 <HAL_GPIO_Init+0x240>
 800626a:	2306      	movs	r3, #6
 800626c:	e00a      	b.n	8006284 <HAL_GPIO_Init+0x240>
 800626e:	2305      	movs	r3, #5
 8006270:	e008      	b.n	8006284 <HAL_GPIO_Init+0x240>
 8006272:	2304      	movs	r3, #4
 8006274:	e006      	b.n	8006284 <HAL_GPIO_Init+0x240>
 8006276:	2303      	movs	r3, #3
 8006278:	e004      	b.n	8006284 <HAL_GPIO_Init+0x240>
 800627a:	2302      	movs	r3, #2
 800627c:	e002      	b.n	8006284 <HAL_GPIO_Init+0x240>
 800627e:	2301      	movs	r3, #1
 8006280:	e000      	b.n	8006284 <HAL_GPIO_Init+0x240>
 8006282:	2300      	movs	r3, #0
 8006284:	69fa      	ldr	r2, [r7, #28]
 8006286:	f002 0203 	and.w	r2, r2, #3
 800628a:	0092      	lsls	r2, r2, #2
 800628c:	4093      	lsls	r3, r2
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	4313      	orrs	r3, r2
 8006292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006294:	4935      	ldr	r1, [pc, #212]	@ (800636c <HAL_GPIO_Init+0x328>)
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	089b      	lsrs	r3, r3, #2
 800629a:	3302      	adds	r3, #2
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062a2:	4b3d      	ldr	r3, [pc, #244]	@ (8006398 <HAL_GPIO_Init+0x354>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	43db      	mvns	r3, r3
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	4013      	ands	r3, r2
 80062b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80062c6:	4a34      	ldr	r2, [pc, #208]	@ (8006398 <HAL_GPIO_Init+0x354>)
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80062cc:	4b32      	ldr	r3, [pc, #200]	@ (8006398 <HAL_GPIO_Init+0x354>)
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	43db      	mvns	r3, r3
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	4013      	ands	r3, r2
 80062da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062f0:	4a29      	ldr	r2, [pc, #164]	@ (8006398 <HAL_GPIO_Init+0x354>)
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062f6:	4b28      	ldr	r3, [pc, #160]	@ (8006398 <HAL_GPIO_Init+0x354>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	43db      	mvns	r3, r3
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	4013      	ands	r3, r2
 8006304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	4313      	orrs	r3, r2
 8006318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800631a:	4a1f      	ldr	r2, [pc, #124]	@ (8006398 <HAL_GPIO_Init+0x354>)
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006320:	4b1d      	ldr	r3, [pc, #116]	@ (8006398 <HAL_GPIO_Init+0x354>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	43db      	mvns	r3, r3
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	4013      	ands	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006344:	4a14      	ldr	r2, [pc, #80]	@ (8006398 <HAL_GPIO_Init+0x354>)
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	3301      	adds	r3, #1
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	2b0f      	cmp	r3, #15
 8006354:	f67f ae84 	bls.w	8006060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	3724      	adds	r7, #36	@ 0x24
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40023800 	.word	0x40023800
 800636c:	40013800 	.word	0x40013800
 8006370:	40020000 	.word	0x40020000
 8006374:	40020400 	.word	0x40020400
 8006378:	40020800 	.word	0x40020800
 800637c:	40020c00 	.word	0x40020c00
 8006380:	40021000 	.word	0x40021000
 8006384:	40021400 	.word	0x40021400
 8006388:	40021800 	.word	0x40021800
 800638c:	40021c00 	.word	0x40021c00
 8006390:	40022000 	.word	0x40022000
 8006394:	40022400 	.word	0x40022400
 8006398:	40013c00 	.word	0x40013c00

0800639c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	807b      	strh	r3, [r7, #2]
 80063a8:	4613      	mov	r3, r2
 80063aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063ac:	787b      	ldrb	r3, [r7, #1]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063b2:	887a      	ldrh	r2, [r7, #2]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80063b8:	e003      	b.n	80063c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80063ba:	887b      	ldrh	r3, [r7, #2]
 80063bc:	041a      	lsls	r2, r3, #16
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	619a      	str	r2, [r3, #24]
}
 80063c2:	bf00      	nop
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	460b      	mov	r3, r1
 80063d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	695a      	ldr	r2, [r3, #20]
 80063de:	887b      	ldrh	r3, [r7, #2]
 80063e0:	401a      	ands	r2, r3
 80063e2:	887b      	ldrh	r3, [r7, #2]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d104      	bne.n	80063f2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063e8:	887b      	ldrh	r3, [r7, #2]
 80063ea:	041a      	lsls	r2, r3, #16
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80063f0:	e002      	b.n	80063f8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80063f2:	887a      	ldrh	r2, [r7, #2]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	619a      	str	r2, [r3, #24]
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e12b      	b.n	800666e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d106      	bne.n	8006430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f95d 	bl	80066ea <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2224      	movs	r2, #36	@ 0x24
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0201 	bic.w	r2, r2, #1
 8006446:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006456:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006466:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006468:	f001 ff1a 	bl	80082a0 <HAL_RCC_GetPCLK1Freq>
 800646c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	4a81      	ldr	r2, [pc, #516]	@ (8006678 <HAL_I2C_Init+0x274>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d807      	bhi.n	8006488 <HAL_I2C_Init+0x84>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4a80      	ldr	r2, [pc, #512]	@ (800667c <HAL_I2C_Init+0x278>)
 800647c:	4293      	cmp	r3, r2
 800647e:	bf94      	ite	ls
 8006480:	2301      	movls	r3, #1
 8006482:	2300      	movhi	r3, #0
 8006484:	b2db      	uxtb	r3, r3
 8006486:	e006      	b.n	8006496 <HAL_I2C_Init+0x92>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4a7d      	ldr	r2, [pc, #500]	@ (8006680 <HAL_I2C_Init+0x27c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	bf94      	ite	ls
 8006490:	2301      	movls	r3, #1
 8006492:	2300      	movhi	r3, #0
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e0e7      	b.n	800666e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4a78      	ldr	r2, [pc, #480]	@ (8006684 <HAL_I2C_Init+0x280>)
 80064a2:	fba2 2303 	umull	r2, r3, r2, r3
 80064a6:	0c9b      	lsrs	r3, r3, #18
 80064a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	4a6a      	ldr	r2, [pc, #424]	@ (8006678 <HAL_I2C_Init+0x274>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d802      	bhi.n	80064d8 <HAL_I2C_Init+0xd4>
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	3301      	adds	r3, #1
 80064d6:	e009      	b.n	80064ec <HAL_I2C_Init+0xe8>
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80064de:	fb02 f303 	mul.w	r3, r2, r3
 80064e2:	4a69      	ldr	r2, [pc, #420]	@ (8006688 <HAL_I2C_Init+0x284>)
 80064e4:	fba2 2303 	umull	r2, r3, r2, r3
 80064e8:	099b      	lsrs	r3, r3, #6
 80064ea:	3301      	adds	r3, #1
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	6812      	ldr	r2, [r2, #0]
 80064f0:	430b      	orrs	r3, r1
 80064f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80064fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	495c      	ldr	r1, [pc, #368]	@ (8006678 <HAL_I2C_Init+0x274>)
 8006508:	428b      	cmp	r3, r1
 800650a:	d819      	bhi.n	8006540 <HAL_I2C_Init+0x13c>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	1e59      	subs	r1, r3, #1
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	fbb1 f3f3 	udiv	r3, r1, r3
 800651a:	1c59      	adds	r1, r3, #1
 800651c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006520:	400b      	ands	r3, r1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <HAL_I2C_Init+0x138>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	1e59      	subs	r1, r3, #1
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	005b      	lsls	r3, r3, #1
 8006530:	fbb1 f3f3 	udiv	r3, r1, r3
 8006534:	3301      	adds	r3, #1
 8006536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800653a:	e051      	b.n	80065e0 <HAL_I2C_Init+0x1dc>
 800653c:	2304      	movs	r3, #4
 800653e:	e04f      	b.n	80065e0 <HAL_I2C_Init+0x1dc>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d111      	bne.n	800656c <HAL_I2C_Init+0x168>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	1e58      	subs	r0, r3, #1
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6859      	ldr	r1, [r3, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	440b      	add	r3, r1
 8006556:	fbb0 f3f3 	udiv	r3, r0, r3
 800655a:	3301      	adds	r3, #1
 800655c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006560:	2b00      	cmp	r3, #0
 8006562:	bf0c      	ite	eq
 8006564:	2301      	moveq	r3, #1
 8006566:	2300      	movne	r3, #0
 8006568:	b2db      	uxtb	r3, r3
 800656a:	e012      	b.n	8006592 <HAL_I2C_Init+0x18e>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	1e58      	subs	r0, r3, #1
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6859      	ldr	r1, [r3, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	440b      	add	r3, r1
 800657a:	0099      	lsls	r1, r3, #2
 800657c:	440b      	add	r3, r1
 800657e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006582:	3301      	adds	r3, #1
 8006584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006588:	2b00      	cmp	r3, #0
 800658a:	bf0c      	ite	eq
 800658c:	2301      	moveq	r3, #1
 800658e:	2300      	movne	r3, #0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <HAL_I2C_Init+0x196>
 8006596:	2301      	movs	r3, #1
 8006598:	e022      	b.n	80065e0 <HAL_I2C_Init+0x1dc>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10e      	bne.n	80065c0 <HAL_I2C_Init+0x1bc>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	1e58      	subs	r0, r3, #1
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6859      	ldr	r1, [r3, #4]
 80065aa:	460b      	mov	r3, r1
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	440b      	add	r3, r1
 80065b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80065b4:	3301      	adds	r3, #1
 80065b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065be:	e00f      	b.n	80065e0 <HAL_I2C_Init+0x1dc>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	1e58      	subs	r0, r3, #1
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6859      	ldr	r1, [r3, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	440b      	add	r3, r1
 80065ce:	0099      	lsls	r1, r3, #2
 80065d0:	440b      	add	r3, r1
 80065d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80065d6:	3301      	adds	r3, #1
 80065d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	6809      	ldr	r1, [r1, #0]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69da      	ldr	r2, [r3, #28]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800660e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	6911      	ldr	r1, [r2, #16]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	68d2      	ldr	r2, [r2, #12]
 800661a:	4311      	orrs	r1, r2
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6812      	ldr	r2, [r2, #0]
 8006620:	430b      	orrs	r3, r1
 8006622:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695a      	ldr	r2, [r3, #20]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	431a      	orrs	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0201 	orr.w	r2, r2, #1
 800664e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2220      	movs	r2, #32
 800665a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	000186a0 	.word	0x000186a0
 800667c:	001e847f 	.word	0x001e847f
 8006680:	003d08ff 	.word	0x003d08ff
 8006684:	431bde83 	.word	0x431bde83
 8006688:	10624dd3 	.word	0x10624dd3

0800668c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e021      	b.n	80066e2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2224      	movs	r2, #36	@ 0x24
 80066a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 0201 	bic.w	r2, r2, #1
 80066b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f821 	bl	80066fe <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
	...

08006714 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af02      	add	r7, sp, #8
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	4608      	mov	r0, r1
 800671e:	4611      	mov	r1, r2
 8006720:	461a      	mov	r2, r3
 8006722:	4603      	mov	r3, r0
 8006724:	817b      	strh	r3, [r7, #10]
 8006726:	460b      	mov	r3, r1
 8006728:	813b      	strh	r3, [r7, #8]
 800672a:	4613      	mov	r3, r2
 800672c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800672e:	f7fe fef3 	bl	8005518 <HAL_GetTick>
 8006732:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b20      	cmp	r3, #32
 800673e:	f040 80d9 	bne.w	80068f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	2319      	movs	r3, #25
 8006748:	2201      	movs	r2, #1
 800674a:	496d      	ldr	r1, [pc, #436]	@ (8006900 <HAL_I2C_Mem_Write+0x1ec>)
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 fc89 	bl	8007064 <I2C_WaitOnFlagUntilTimeout>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006758:	2302      	movs	r3, #2
 800675a:	e0cc      	b.n	80068f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006762:	2b01      	cmp	r3, #1
 8006764:	d101      	bne.n	800676a <HAL_I2C_Mem_Write+0x56>
 8006766:	2302      	movs	r3, #2
 8006768:	e0c5      	b.n	80068f6 <HAL_I2C_Mem_Write+0x1e2>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b01      	cmp	r3, #1
 800677e:	d007      	beq.n	8006790 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 0201 	orr.w	r2, r2, #1
 800678e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800679e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2221      	movs	r2, #33	@ 0x21
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2240      	movs	r2, #64	@ 0x40
 80067ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a3a      	ldr	r2, [r7, #32]
 80067ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80067c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4a4d      	ldr	r2, [pc, #308]	@ (8006904 <HAL_I2C_Mem_Write+0x1f0>)
 80067d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067d2:	88f8      	ldrh	r0, [r7, #6]
 80067d4:	893a      	ldrh	r2, [r7, #8]
 80067d6:	8979      	ldrh	r1, [r7, #10]
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	9301      	str	r3, [sp, #4]
 80067dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	4603      	mov	r3, r0
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 fac4 	bl	8006d70 <I2C_RequestMemoryWrite>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d052      	beq.n	8006894 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e081      	b.n	80068f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 fd0a 	bl	8007210 <I2C_WaitOnTXEFlagUntilTimeout>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00d      	beq.n	800681e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006806:	2b04      	cmp	r3, #4
 8006808:	d107      	bne.n	800681a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006818:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e06b      	b.n	80068f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006822:	781a      	ldrb	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006844:	b29b      	uxth	r3, r3
 8006846:	3b01      	subs	r3, #1
 8006848:	b29a      	uxth	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	2b04      	cmp	r3, #4
 800685a:	d11b      	bne.n	8006894 <HAL_I2C_Mem_Write+0x180>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006860:	2b00      	cmp	r3, #0
 8006862:	d017      	beq.n	8006894 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006868:	781a      	ldrb	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800687e:	3b01      	subs	r3, #1
 8006880:	b29a      	uxth	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800688a:	b29b      	uxth	r3, r3
 800688c:	3b01      	subs	r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1aa      	bne.n	80067f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 fcf6 	bl	8007292 <I2C_WaitOnBTFFlagUntilTimeout>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00d      	beq.n	80068c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d107      	bne.n	80068c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e016      	b.n	80068f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2220      	movs	r2, #32
 80068dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80068f0:	2300      	movs	r3, #0
 80068f2:	e000      	b.n	80068f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80068f4:	2302      	movs	r3, #2
  }
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	00100002 	.word	0x00100002
 8006904:	ffff0000 	.word	0xffff0000

08006908 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08c      	sub	sp, #48	@ 0x30
 800690c:	af02      	add	r7, sp, #8
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	4608      	mov	r0, r1
 8006912:	4611      	mov	r1, r2
 8006914:	461a      	mov	r2, r3
 8006916:	4603      	mov	r3, r0
 8006918:	817b      	strh	r3, [r7, #10]
 800691a:	460b      	mov	r3, r1
 800691c:	813b      	strh	r3, [r7, #8]
 800691e:	4613      	mov	r3, r2
 8006920:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006922:	f7fe fdf9 	bl	8005518 <HAL_GetTick>
 8006926:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b20      	cmp	r3, #32
 8006932:	f040 8208 	bne.w	8006d46 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	2319      	movs	r3, #25
 800693c:	2201      	movs	r2, #1
 800693e:	497b      	ldr	r1, [pc, #492]	@ (8006b2c <HAL_I2C_Mem_Read+0x224>)
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 fb8f 	bl	8007064 <I2C_WaitOnFlagUntilTimeout>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d001      	beq.n	8006950 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800694c:	2302      	movs	r3, #2
 800694e:	e1fb      	b.n	8006d48 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_I2C_Mem_Read+0x56>
 800695a:	2302      	movs	r3, #2
 800695c:	e1f4      	b.n	8006d48 <HAL_I2C_Mem_Read+0x440>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b01      	cmp	r3, #1
 8006972:	d007      	beq.n	8006984 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f042 0201 	orr.w	r2, r2, #1
 8006982:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006992:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2222      	movs	r2, #34	@ 0x22
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2240      	movs	r2, #64	@ 0x40
 80069a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80069b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4a5b      	ldr	r2, [pc, #364]	@ (8006b30 <HAL_I2C_Mem_Read+0x228>)
 80069c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069c6:	88f8      	ldrh	r0, [r7, #6]
 80069c8:	893a      	ldrh	r2, [r7, #8]
 80069ca:	8979      	ldrh	r1, [r7, #10]
 80069cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ce:	9301      	str	r3, [sp, #4]
 80069d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	4603      	mov	r3, r0
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 fa5e 	bl	8006e98 <I2C_RequestMemoryRead>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e1b0      	b.n	8006d48 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d113      	bne.n	8006a16 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ee:	2300      	movs	r3, #0
 80069f0:	623b      	str	r3, [r7, #32]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	623b      	str	r3, [r7, #32]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	623b      	str	r3, [r7, #32]
 8006a02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	e184      	b.n	8006d20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d11b      	bne.n	8006a56 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a2e:	2300      	movs	r3, #0
 8006a30:	61fb      	str	r3, [r7, #28]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	61fb      	str	r3, [r7, #28]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	61fb      	str	r3, [r7, #28]
 8006a42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	e164      	b.n	8006d20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d11b      	bne.n	8006a96 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a7e:	2300      	movs	r3, #0
 8006a80:	61bb      	str	r3, [r7, #24]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	61bb      	str	r3, [r7, #24]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	61bb      	str	r3, [r7, #24]
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	e144      	b.n	8006d20 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a96:	2300      	movs	r3, #0
 8006a98:	617b      	str	r3, [r7, #20]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	617b      	str	r3, [r7, #20]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	617b      	str	r3, [r7, #20]
 8006aaa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006aac:	e138      	b.n	8006d20 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	f200 80f1 	bhi.w	8006c9a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d123      	bne.n	8006b08 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ac2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 fc25 	bl	8007314 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e139      	b.n	8006d48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	691a      	ldr	r2, [r3, #16]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	3b01      	subs	r3, #1
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006b06:	e10b      	b.n	8006d20 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d14e      	bne.n	8006bae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b16:	2200      	movs	r2, #0
 8006b18:	4906      	ldr	r1, [pc, #24]	@ (8006b34 <HAL_I2C_Mem_Read+0x22c>)
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 faa2 	bl	8007064 <I2C_WaitOnFlagUntilTimeout>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d008      	beq.n	8006b38 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e10e      	b.n	8006d48 <HAL_I2C_Mem_Read+0x440>
 8006b2a:	bf00      	nop
 8006b2c:	00100002 	.word	0x00100002
 8006b30:	ffff0000 	.word	0xffff0000
 8006b34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691a      	ldr	r2, [r3, #16]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b52:	b2d2      	uxtb	r2, r2
 8006b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b64:	3b01      	subs	r3, #1
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	3b01      	subs	r3, #1
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	691a      	ldr	r2, [r3, #16]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006bac:	e0b8      	b.n	8006d20 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	4966      	ldr	r1, [pc, #408]	@ (8006d50 <HAL_I2C_Mem_Read+0x448>)
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 fa53 	bl	8007064 <I2C_WaitOnFlagUntilTimeout>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e0bf      	b.n	8006d48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	691a      	ldr	r2, [r3, #16]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be2:	b2d2      	uxtb	r2, r2
 8006be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c10:	2200      	movs	r2, #0
 8006c12:	494f      	ldr	r1, [pc, #316]	@ (8006d50 <HAL_I2C_Mem_Read+0x448>)
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 fa25 	bl	8007064 <I2C_WaitOnFlagUntilTimeout>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e091      	b.n	8006d48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	691a      	ldr	r2, [r3, #16]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3e:	b2d2      	uxtb	r2, r2
 8006c40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c50:	3b01      	subs	r3, #1
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	691a      	ldr	r2, [r3, #16]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c70:	b2d2      	uxtb	r2, r2
 8006c72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	3b01      	subs	r3, #1
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006c98:	e042      	b.n	8006d20 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c9c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 fb38 	bl	8007314 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e04c      	b.n	8006d48 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	691a      	ldr	r2, [r3, #16]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	f003 0304 	and.w	r3, r3, #4
 8006cea:	2b04      	cmp	r3, #4
 8006cec:	d118      	bne.n	8006d20 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f47f aec2 	bne.w	8006aae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	e000      	b.n	8006d48 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006d46:	2302      	movs	r3, #2
  }
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3728      	adds	r7, #40	@ 0x28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	00010004 	.word	0x00010004

08006d54 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d62:	b2db      	uxtb	r3, r3
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b088      	sub	sp, #32
 8006d74:	af02      	add	r7, sp, #8
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	4608      	mov	r0, r1
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	4603      	mov	r3, r0
 8006d80:	817b      	strh	r3, [r7, #10]
 8006d82:	460b      	mov	r3, r1
 8006d84:	813b      	strh	r3, [r7, #8]
 8006d86:	4613      	mov	r3, r2
 8006d88:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 f95c 	bl	8007064 <I2C_WaitOnFlagUntilTimeout>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00c      	beq.n	8006dcc <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d003      	beq.n	8006dc8 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e05f      	b.n	8006e8c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006dcc:	897b      	ldrh	r3, [r7, #10]
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006dda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dde:	6a3a      	ldr	r2, [r7, #32]
 8006de0:	492c      	ldr	r1, [pc, #176]	@ (8006e94 <I2C_RequestMemoryWrite+0x124>)
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 f995 	bl	8007112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d001      	beq.n	8006df2 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e04c      	b.n	8006e8c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006df2:	2300      	movs	r3, #0
 8006df4:	617b      	str	r3, [r7, #20]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	617b      	str	r3, [r7, #20]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	617b      	str	r3, [r7, #20]
 8006e06:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e0a:	6a39      	ldr	r1, [r7, #32]
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 f9ff 	bl	8007210 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00d      	beq.n	8006e34 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1c:	2b04      	cmp	r3, #4
 8006e1e:	d107      	bne.n	8006e30 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e02b      	b.n	8006e8c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e34:	88fb      	ldrh	r3, [r7, #6]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d105      	bne.n	8006e46 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e3a:	893b      	ldrh	r3, [r7, #8]
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	611a      	str	r2, [r3, #16]
 8006e44:	e021      	b.n	8006e8a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e46:	893b      	ldrh	r3, [r7, #8]
 8006e48:	0a1b      	lsrs	r3, r3, #8
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e56:	6a39      	ldr	r1, [r7, #32]
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 f9d9 	bl	8007210 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00d      	beq.n	8006e80 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e68:	2b04      	cmp	r3, #4
 8006e6a:	d107      	bne.n	8006e7c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e005      	b.n	8006e8c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e80:	893b      	ldrh	r3, [r7, #8]
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3718      	adds	r7, #24
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	00010002 	.word	0x00010002

08006e98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	af02      	add	r7, sp, #8
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	4608      	mov	r0, r1
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	817b      	strh	r3, [r7, #10]
 8006eaa:	460b      	mov	r3, r1
 8006eac:	813b      	strh	r3, [r7, #8]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ec0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ed0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f000 f8c0 	bl	8007064 <I2C_WaitOnFlagUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00c      	beq.n	8006f04 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d003      	beq.n	8006f00 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006efe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e0a9      	b.n	8007058 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f04:	897b      	ldrh	r3, [r7, #10]
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	461a      	mov	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006f12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f16:	6a3a      	ldr	r2, [r7, #32]
 8006f18:	4951      	ldr	r1, [pc, #324]	@ (8007060 <I2C_RequestMemoryRead+0x1c8>)
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f000 f8f9 	bl	8007112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e096      	b.n	8007058 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	617b      	str	r3, [r7, #20]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	617b      	str	r3, [r7, #20]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	617b      	str	r3, [r7, #20]
 8006f3e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f42:	6a39      	ldr	r1, [r7, #32]
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 f963 	bl	8007210 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00d      	beq.n	8006f6c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f54:	2b04      	cmp	r3, #4
 8006f56:	d107      	bne.n	8006f68 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e075      	b.n	8007058 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f6c:	88fb      	ldrh	r3, [r7, #6]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d105      	bne.n	8006f7e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f72:	893b      	ldrh	r3, [r7, #8]
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	611a      	str	r2, [r3, #16]
 8006f7c:	e021      	b.n	8006fc2 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f7e:	893b      	ldrh	r3, [r7, #8]
 8006f80:	0a1b      	lsrs	r3, r3, #8
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	b2da      	uxtb	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f8e:	6a39      	ldr	r1, [r7, #32]
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 f93d 	bl	8007210 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00d      	beq.n	8006fb8 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d107      	bne.n	8006fb4 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e04f      	b.n	8007058 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fb8:	893b      	ldrh	r3, [r7, #8]
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fc4:	6a39      	ldr	r1, [r7, #32]
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f000 f922 	bl	8007210 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00d      	beq.n	8006fee <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	d107      	bne.n	8006fea <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fe8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e034      	b.n	8007058 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ffc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	2200      	movs	r2, #0
 8007006:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f000 f82a 	bl	8007064 <I2C_WaitOnFlagUntilTimeout>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00c      	beq.n	8007030 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800702a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e013      	b.n	8007058 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007030:	897b      	ldrh	r3, [r7, #10]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	f043 0301 	orr.w	r3, r3, #1
 8007038:	b2da      	uxtb	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007042:	6a3a      	ldr	r2, [r7, #32]
 8007044:	4906      	ldr	r1, [pc, #24]	@ (8007060 <I2C_RequestMemoryRead+0x1c8>)
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 f863 	bl	8007112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e000      	b.n	8007058 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	00010002 	.word	0x00010002

08007064 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	603b      	str	r3, [r7, #0]
 8007070:	4613      	mov	r3, r2
 8007072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007074:	e025      	b.n	80070c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707c:	d021      	beq.n	80070c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800707e:	f7fe fa4b 	bl	8005518 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d302      	bcc.n	8007094 <I2C_WaitOnFlagUntilTimeout+0x30>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d116      	bne.n	80070c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2220      	movs	r2, #32
 800709e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ae:	f043 0220 	orr.w	r2, r3, #32
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e023      	b.n	800710a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	0c1b      	lsrs	r3, r3, #16
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d10d      	bne.n	80070e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	43da      	mvns	r2, r3
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	4013      	ands	r3, r2
 80070d8:	b29b      	uxth	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	bf0c      	ite	eq
 80070de:	2301      	moveq	r3, #1
 80070e0:	2300      	movne	r3, #0
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	461a      	mov	r2, r3
 80070e6:	e00c      	b.n	8007102 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	43da      	mvns	r2, r3
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	4013      	ands	r3, r2
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	bf0c      	ite	eq
 80070fa:	2301      	moveq	r3, #1
 80070fc:	2300      	movne	r3, #0
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	461a      	mov	r2, r3
 8007102:	79fb      	ldrb	r3, [r7, #7]
 8007104:	429a      	cmp	r2, r3
 8007106:	d0b6      	beq.n	8007076 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	60f8      	str	r0, [r7, #12]
 800711a:	60b9      	str	r1, [r7, #8]
 800711c:	607a      	str	r2, [r7, #4]
 800711e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007120:	e051      	b.n	80071c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800712c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007130:	d123      	bne.n	800717a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007140:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800714a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2220      	movs	r2, #32
 8007156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007166:	f043 0204 	orr.w	r2, r3, #4
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e046      	b.n	8007208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007180:	d021      	beq.n	80071c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007182:	f7fe f9c9 	bl	8005518 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	429a      	cmp	r2, r3
 8007190:	d302      	bcc.n	8007198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d116      	bne.n	80071c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b2:	f043 0220 	orr.w	r2, r3, #32
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e020      	b.n	8007208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	0c1b      	lsrs	r3, r3, #16
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d10c      	bne.n	80071ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	43da      	mvns	r2, r3
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	4013      	ands	r3, r2
 80071dc:	b29b      	uxth	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	bf14      	ite	ne
 80071e2:	2301      	movne	r3, #1
 80071e4:	2300      	moveq	r3, #0
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	e00b      	b.n	8007202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	43da      	mvns	r2, r3
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	4013      	ands	r3, r2
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	bf14      	ite	ne
 80071fc:	2301      	movne	r3, #1
 80071fe:	2300      	moveq	r3, #0
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d18d      	bne.n	8007122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800721c:	e02d      	b.n	800727a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 f8ce 	bl	80073c0 <I2C_IsAcknowledgeFailed>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d001      	beq.n	800722e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e02d      	b.n	800728a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007234:	d021      	beq.n	800727a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007236:	f7fe f96f 	bl	8005518 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	429a      	cmp	r2, r3
 8007244:	d302      	bcc.n	800724c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d116      	bne.n	800727a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2220      	movs	r2, #32
 8007256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007266:	f043 0220 	orr.w	r2, r3, #32
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e007      	b.n	800728a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007284:	2b80      	cmp	r3, #128	@ 0x80
 8007286:	d1ca      	bne.n	800721e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b084      	sub	sp, #16
 8007296:	af00      	add	r7, sp, #0
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	60b9      	str	r1, [r7, #8]
 800729c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800729e:	e02d      	b.n	80072fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 f88d 	bl	80073c0 <I2C_IsAcknowledgeFailed>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e02d      	b.n	800730c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b6:	d021      	beq.n	80072fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072b8:	f7fe f92e 	bl	8005518 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d302      	bcc.n	80072ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d116      	bne.n	80072fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e8:	f043 0220 	orr.w	r2, r3, #32
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e007      	b.n	800730c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	f003 0304 	and.w	r3, r3, #4
 8007306:	2b04      	cmp	r3, #4
 8007308:	d1ca      	bne.n	80072a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007320:	e042      	b.n	80073a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	f003 0310 	and.w	r3, r3, #16
 800732c:	2b10      	cmp	r3, #16
 800732e:	d119      	bne.n	8007364 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f06f 0210 	mvn.w	r2, #16
 8007338:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2220      	movs	r2, #32
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e029      	b.n	80073b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007364:	f7fe f8d8 	bl	8005518 <HAL_GetTick>
 8007368:	4602      	mov	r2, r0
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	429a      	cmp	r2, r3
 8007372:	d302      	bcc.n	800737a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d116      	bne.n	80073a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007394:	f043 0220 	orr.w	r2, r3, #32
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e007      	b.n	80073b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b2:	2b40      	cmp	r3, #64	@ 0x40
 80073b4:	d1b5      	bne.n	8007322 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073d6:	d11b      	bne.n	8007410 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80073e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fc:	f043 0204 	orr.w	r2, r3, #4
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e000      	b.n	8007412 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
	...

08007420 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e0bf      	b.n	80075b2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d106      	bne.n	800744c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f8ba 	bl	80075c0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699a      	ldr	r2, [r3, #24]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007462:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6999      	ldr	r1, [r3, #24]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007478:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6899      	ldr	r1, [r3, #8]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	4b4a      	ldr	r3, [pc, #296]	@ (80075bc <HAL_LTDC_Init+0x19c>)
 8007494:	400b      	ands	r3, r1
 8007496:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	041b      	lsls	r3, r3, #16
 800749e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6899      	ldr	r1, [r3, #8]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	699a      	ldr	r2, [r3, #24]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	431a      	orrs	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68d9      	ldr	r1, [r3, #12]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	4b3e      	ldr	r3, [pc, #248]	@ (80075bc <HAL_LTDC_Init+0x19c>)
 80074c2:	400b      	ands	r3, r1
 80074c4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	041b      	lsls	r3, r3, #16
 80074cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68d9      	ldr	r1, [r3, #12]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a1a      	ldr	r2, [r3, #32]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	431a      	orrs	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	430a      	orrs	r2, r1
 80074e2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6919      	ldr	r1, [r3, #16]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	4b33      	ldr	r3, [pc, #204]	@ (80075bc <HAL_LTDC_Init+0x19c>)
 80074f0:	400b      	ands	r3, r1
 80074f2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f8:	041b      	lsls	r3, r3, #16
 80074fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6919      	ldr	r1, [r3, #16]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	431a      	orrs	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6959      	ldr	r1, [r3, #20]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	4b27      	ldr	r3, [pc, #156]	@ (80075bc <HAL_LTDC_Init+0x19c>)
 800751e:	400b      	ands	r3, r1
 8007520:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007526:	041b      	lsls	r3, r3, #16
 8007528:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6959      	ldr	r1, [r3, #20]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	431a      	orrs	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007546:	021b      	lsls	r3, r3, #8
 8007548:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007550:	041b      	lsls	r3, r3, #16
 8007552:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007562:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4313      	orrs	r3, r2
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8007576:	431a      	orrs	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f042 0206 	orr.w	r2, r2, #6
 800758e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	699a      	ldr	r2, [r3, #24]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f042 0201 	orr.w	r2, r2, #1
 800759e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	f000f800 	.word	0xf000f800

080075c0 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80075d4:	b5b0      	push	{r4, r5, r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d101      	bne.n	80075ee <HAL_LTDC_ConfigLayer+0x1a>
 80075ea:	2302      	movs	r3, #2
 80075ec:	e02c      	b.n	8007648 <HAL_LTDC_ConfigLayer+0x74>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2202      	movs	r2, #2
 80075fa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2134      	movs	r1, #52	@ 0x34
 8007604:	fb01 f303 	mul.w	r3, r1, r3
 8007608:	4413      	add	r3, r2
 800760a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	4614      	mov	r4, r2
 8007612:	461d      	mov	r5, r3
 8007614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800761a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800761c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800761e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	68b9      	ldr	r1, [r7, #8]
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 f83b 	bl	80076a4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2201      	movs	r2, #1
 8007634:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bdb0      	pop	{r4, r5, r7, pc}

08007650 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800765e:	2b01      	cmp	r3, #1
 8007660:	d101      	bne.n	8007666 <HAL_LTDC_EnableDither+0x16>
 8007662:	2302      	movs	r3, #2
 8007664:	e016      	b.n	8007694 <HAL_LTDC_EnableDither+0x44>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2202      	movs	r2, #2
 8007672:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8007676:	4b0a      	ldr	r3, [pc, #40]	@ (80076a0 <HAL_LTDC_EnableDither+0x50>)
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	4a09      	ldr	r2, [pc, #36]	@ (80076a0 <HAL_LTDC_EnableDither+0x50>)
 800767c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007680:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	40016800 	.word	0x40016800

080076a4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b089      	sub	sp, #36	@ 0x24
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	0c1b      	lsrs	r3, r3, #16
 80076bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076c0:	4413      	add	r3, r2
 80076c2:	041b      	lsls	r3, r3, #16
 80076c4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	461a      	mov	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	01db      	lsls	r3, r3, #7
 80076d0:	4413      	add	r3, r2
 80076d2:	3384      	adds	r3, #132	@ 0x84
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	6812      	ldr	r2, [r2, #0]
 80076da:	4611      	mov	r1, r2
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	01d2      	lsls	r2, r2, #7
 80076e0:	440a      	add	r2, r1
 80076e2:	3284      	adds	r2, #132	@ 0x84
 80076e4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80076e8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	0c1b      	lsrs	r3, r3, #16
 80076f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076fa:	4413      	add	r3, r2
 80076fc:	1c5a      	adds	r2, r3, #1
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4619      	mov	r1, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	01db      	lsls	r3, r3, #7
 8007708:	440b      	add	r3, r1
 800770a:	3384      	adds	r3, #132	@ 0x84
 800770c:	4619      	mov	r1, r3
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	4313      	orrs	r3, r2
 8007712:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	68da      	ldr	r2, [r3, #12]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007722:	4413      	add	r3, r2
 8007724:	041b      	lsls	r3, r3, #16
 8007726:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	461a      	mov	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	01db      	lsls	r3, r3, #7
 8007732:	4413      	add	r3, r2
 8007734:	3384      	adds	r3, #132	@ 0x84
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	6812      	ldr	r2, [r2, #0]
 800773c:	4611      	mov	r1, r2
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	01d2      	lsls	r2, r2, #7
 8007742:	440a      	add	r2, r1
 8007744:	3284      	adds	r2, #132	@ 0x84
 8007746:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800774a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800775a:	4413      	add	r3, r2
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4619      	mov	r1, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	01db      	lsls	r3, r3, #7
 8007768:	440b      	add	r3, r1
 800776a:	3384      	adds	r3, #132	@ 0x84
 800776c:	4619      	mov	r1, r3
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	4313      	orrs	r3, r2
 8007772:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	461a      	mov	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	01db      	lsls	r3, r3, #7
 800777e:	4413      	add	r3, r2
 8007780:	3384      	adds	r3, #132	@ 0x84
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	6812      	ldr	r2, [r2, #0]
 8007788:	4611      	mov	r1, r2
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	01d2      	lsls	r2, r2, #7
 800778e:	440a      	add	r2, r1
 8007790:	3284      	adds	r2, #132	@ 0x84
 8007792:	f023 0307 	bic.w	r3, r3, #7
 8007796:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	461a      	mov	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	01db      	lsls	r3, r3, #7
 80077a2:	4413      	add	r3, r2
 80077a4:	3384      	adds	r3, #132	@ 0x84
 80077a6:	461a      	mov	r2, r3
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80077b4:	021b      	lsls	r3, r3, #8
 80077b6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80077be:	041b      	lsls	r3, r3, #16
 80077c0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	061b      	lsls	r3, r3, #24
 80077c8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	01db      	lsls	r3, r3, #7
 80077d4:	4413      	add	r3, r2
 80077d6:	3384      	adds	r3, #132	@ 0x84
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	461a      	mov	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	01db      	lsls	r3, r3, #7
 80077e4:	4413      	add	r3, r2
 80077e6:	3384      	adds	r3, #132	@ 0x84
 80077e8:	461a      	mov	r2, r3
 80077ea:	2300      	movs	r3, #0
 80077ec:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80077f4:	461a      	mov	r2, r3
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	431a      	orrs	r2, r3
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	431a      	orrs	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4619      	mov	r1, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	01db      	lsls	r3, r3, #7
 8007808:	440b      	add	r3, r1
 800780a:	3384      	adds	r3, #132	@ 0x84
 800780c:	4619      	mov	r1, r3
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	4313      	orrs	r3, r2
 8007812:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	01db      	lsls	r3, r3, #7
 800781e:	4413      	add	r3, r2
 8007820:	3384      	adds	r3, #132	@ 0x84
 8007822:	695b      	ldr	r3, [r3, #20]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	6812      	ldr	r2, [r2, #0]
 8007828:	4611      	mov	r1, r2
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	01d2      	lsls	r2, r2, #7
 800782e:	440a      	add	r2, r1
 8007830:	3284      	adds	r2, #132	@ 0x84
 8007832:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007836:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	01db      	lsls	r3, r3, #7
 8007842:	4413      	add	r3, r2
 8007844:	3384      	adds	r3, #132	@ 0x84
 8007846:	461a      	mov	r2, r3
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	01db      	lsls	r3, r3, #7
 8007858:	4413      	add	r3, r2
 800785a:	3384      	adds	r3, #132	@ 0x84
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	6812      	ldr	r2, [r2, #0]
 8007862:	4611      	mov	r1, r2
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	01d2      	lsls	r2, r2, #7
 8007868:	440a      	add	r2, r1
 800786a:	3284      	adds	r2, #132	@ 0x84
 800786c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007870:	f023 0307 	bic.w	r3, r3, #7
 8007874:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	69da      	ldr	r2, [r3, #28]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	68f9      	ldr	r1, [r7, #12]
 8007880:	6809      	ldr	r1, [r1, #0]
 8007882:	4608      	mov	r0, r1
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	01c9      	lsls	r1, r1, #7
 8007888:	4401      	add	r1, r0
 800788a:	3184      	adds	r1, #132	@ 0x84
 800788c:	4313      	orrs	r3, r2
 800788e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	461a      	mov	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	01db      	lsls	r3, r3, #7
 800789a:	4413      	add	r3, r2
 800789c:	3384      	adds	r3, #132	@ 0x84
 800789e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	461a      	mov	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	01db      	lsls	r3, r3, #7
 80078aa:	4413      	add	r3, r2
 80078ac:	3384      	adds	r3, #132	@ 0x84
 80078ae:	461a      	mov	r2, r3
 80078b0:	2300      	movs	r3, #0
 80078b2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	01db      	lsls	r3, r3, #7
 80078be:	4413      	add	r3, r2
 80078c0:	3384      	adds	r3, #132	@ 0x84
 80078c2:	461a      	mov	r2, r3
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d102      	bne.n	80078d8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80078d2:	2304      	movs	r3, #4
 80078d4:	61fb      	str	r3, [r7, #28]
 80078d6:	e01b      	b.n	8007910 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d102      	bne.n	80078e6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80078e0:	2303      	movs	r3, #3
 80078e2:	61fb      	str	r3, [r7, #28]
 80078e4:	e014      	b.n	8007910 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	d00b      	beq.n	8007906 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d007      	beq.n	8007906 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d003      	beq.n	8007906 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007902:	2b07      	cmp	r3, #7
 8007904:	d102      	bne.n	800790c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007906:	2302      	movs	r3, #2
 8007908:	61fb      	str	r3, [r7, #28]
 800790a:	e001      	b.n	8007910 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800790c:	2301      	movs	r3, #1
 800790e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	461a      	mov	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	01db      	lsls	r3, r3, #7
 800791a:	4413      	add	r3, r2
 800791c:	3384      	adds	r3, #132	@ 0x84
 800791e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	6812      	ldr	r2, [r2, #0]
 8007924:	4611      	mov	r1, r2
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	01d2      	lsls	r2, r2, #7
 800792a:	440a      	add	r2, r1
 800792c:	3284      	adds	r2, #132	@ 0x84
 800792e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007932:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007938:	69fa      	ldr	r2, [r7, #28]
 800793a:	fb02 f303 	mul.w	r3, r2, r3
 800793e:	041a      	lsls	r2, r3, #16
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	6859      	ldr	r1, [r3, #4]
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	1acb      	subs	r3, r1, r3
 800794a:	69f9      	ldr	r1, [r7, #28]
 800794c:	fb01 f303 	mul.w	r3, r1, r3
 8007950:	3303      	adds	r3, #3
 8007952:	68f9      	ldr	r1, [r7, #12]
 8007954:	6809      	ldr	r1, [r1, #0]
 8007956:	4608      	mov	r0, r1
 8007958:	6879      	ldr	r1, [r7, #4]
 800795a:	01c9      	lsls	r1, r1, #7
 800795c:	4401      	add	r1, r0
 800795e:	3184      	adds	r1, #132	@ 0x84
 8007960:	4313      	orrs	r3, r2
 8007962:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	461a      	mov	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	01db      	lsls	r3, r3, #7
 800796e:	4413      	add	r3, r2
 8007970:	3384      	adds	r3, #132	@ 0x84
 8007972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	6812      	ldr	r2, [r2, #0]
 8007978:	4611      	mov	r1, r2
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	01d2      	lsls	r2, r2, #7
 800797e:	440a      	add	r2, r1
 8007980:	3284      	adds	r2, #132	@ 0x84
 8007982:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007986:	f023 0307 	bic.w	r3, r3, #7
 800798a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	461a      	mov	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	01db      	lsls	r3, r3, #7
 8007996:	4413      	add	r3, r2
 8007998:	3384      	adds	r3, #132	@ 0x84
 800799a:	461a      	mov	r2, r3
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	01db      	lsls	r3, r3, #7
 80079ac:	4413      	add	r3, r2
 80079ae:	3384      	adds	r3, #132	@ 0x84
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	6812      	ldr	r2, [r2, #0]
 80079b6:	4611      	mov	r1, r2
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	01d2      	lsls	r2, r2, #7
 80079bc:	440a      	add	r2, r1
 80079be:	3284      	adds	r2, #132	@ 0x84
 80079c0:	f043 0301 	orr.w	r3, r3, #1
 80079c4:	6013      	str	r3, [r2, #0]
}
 80079c6:	bf00      	nop
 80079c8:	3724      	adds	r7, #36	@ 0x24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
	...

080079d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e25e      	b.n	8007ea4 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d075      	beq.n	8007ade <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80079f2:	4b88      	ldr	r3, [pc, #544]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f003 030c 	and.w	r3, r3, #12
 80079fa:	2b04      	cmp	r3, #4
 80079fc:	d00c      	beq.n	8007a18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079fe:	4b85      	ldr	r3, [pc, #532]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a06:	2b08      	cmp	r3, #8
 8007a08:	d112      	bne.n	8007a30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a0a:	4b82      	ldr	r3, [pc, #520]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a16:	d10b      	bne.n	8007a30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a18:	4b7e      	ldr	r3, [pc, #504]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d05b      	beq.n	8007adc <HAL_RCC_OscConfig+0x108>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d157      	bne.n	8007adc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e239      	b.n	8007ea4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a38:	d106      	bne.n	8007a48 <HAL_RCC_OscConfig+0x74>
 8007a3a:	4b76      	ldr	r3, [pc, #472]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a75      	ldr	r2, [pc, #468]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a44:	6013      	str	r3, [r2, #0]
 8007a46:	e01d      	b.n	8007a84 <HAL_RCC_OscConfig+0xb0>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a50:	d10c      	bne.n	8007a6c <HAL_RCC_OscConfig+0x98>
 8007a52:	4b70      	ldr	r3, [pc, #448]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a6f      	ldr	r2, [pc, #444]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	4b6d      	ldr	r3, [pc, #436]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a6c      	ldr	r2, [pc, #432]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a68:	6013      	str	r3, [r2, #0]
 8007a6a:	e00b      	b.n	8007a84 <HAL_RCC_OscConfig+0xb0>
 8007a6c:	4b69      	ldr	r3, [pc, #420]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a68      	ldr	r2, [pc, #416]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	4b66      	ldr	r3, [pc, #408]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a65      	ldr	r2, [pc, #404]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d013      	beq.n	8007ab4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a8c:	f7fd fd44 	bl	8005518 <HAL_GetTick>
 8007a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a92:	e008      	b.n	8007aa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a94:	f7fd fd40 	bl	8005518 <HAL_GetTick>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	2b64      	cmp	r3, #100	@ 0x64
 8007aa0:	d901      	bls.n	8007aa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e1fe      	b.n	8007ea4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aa6:	4b5b      	ldr	r3, [pc, #364]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d0f0      	beq.n	8007a94 <HAL_RCC_OscConfig+0xc0>
 8007ab2:	e014      	b.n	8007ade <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ab4:	f7fd fd30 	bl	8005518 <HAL_GetTick>
 8007ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aba:	e008      	b.n	8007ace <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007abc:	f7fd fd2c 	bl	8005518 <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	2b64      	cmp	r3, #100	@ 0x64
 8007ac8:	d901      	bls.n	8007ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e1ea      	b.n	8007ea4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ace:	4b51      	ldr	r3, [pc, #324]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1f0      	bne.n	8007abc <HAL_RCC_OscConfig+0xe8>
 8007ada:	e000      	b.n	8007ade <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0302 	and.w	r3, r3, #2
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d063      	beq.n	8007bb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007aea:	4b4a      	ldr	r3, [pc, #296]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f003 030c 	and.w	r3, r3, #12
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00b      	beq.n	8007b0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007af6:	4b47      	ldr	r3, [pc, #284]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007afe:	2b08      	cmp	r3, #8
 8007b00:	d11c      	bne.n	8007b3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b02:	4b44      	ldr	r3, [pc, #272]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d116      	bne.n	8007b3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b0e:	4b41      	ldr	r3, [pc, #260]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0302 	and.w	r3, r3, #2
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d005      	beq.n	8007b26 <HAL_RCC_OscConfig+0x152>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d001      	beq.n	8007b26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e1be      	b.n	8007ea4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b26:	4b3b      	ldr	r3, [pc, #236]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	00db      	lsls	r3, r3, #3
 8007b34:	4937      	ldr	r1, [pc, #220]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b3a:	e03a      	b.n	8007bb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d020      	beq.n	8007b86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b44:	4b34      	ldr	r3, [pc, #208]	@ (8007c18 <HAL_RCC_OscConfig+0x244>)
 8007b46:	2201      	movs	r2, #1
 8007b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b4a:	f7fd fce5 	bl	8005518 <HAL_GetTick>
 8007b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b50:	e008      	b.n	8007b64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b52:	f7fd fce1 	bl	8005518 <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d901      	bls.n	8007b64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e19f      	b.n	8007ea4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b64:	4b2b      	ldr	r3, [pc, #172]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0302 	and.w	r3, r3, #2
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0f0      	beq.n	8007b52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b70:	4b28      	ldr	r3, [pc, #160]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	00db      	lsls	r3, r3, #3
 8007b7e:	4925      	ldr	r1, [pc, #148]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	600b      	str	r3, [r1, #0]
 8007b84:	e015      	b.n	8007bb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b86:	4b24      	ldr	r3, [pc, #144]	@ (8007c18 <HAL_RCC_OscConfig+0x244>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b8c:	f7fd fcc4 	bl	8005518 <HAL_GetTick>
 8007b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b92:	e008      	b.n	8007ba6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b94:	f7fd fcc0 	bl	8005518 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d901      	bls.n	8007ba6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e17e      	b.n	8007ea4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0302 	and.w	r3, r3, #2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1f0      	bne.n	8007b94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0308 	and.w	r3, r3, #8
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d036      	beq.n	8007c2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d016      	beq.n	8007bf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bc6:	4b15      	ldr	r3, [pc, #84]	@ (8007c1c <HAL_RCC_OscConfig+0x248>)
 8007bc8:	2201      	movs	r2, #1
 8007bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bcc:	f7fd fca4 	bl	8005518 <HAL_GetTick>
 8007bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bd2:	e008      	b.n	8007be6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bd4:	f7fd fca0 	bl	8005518 <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d901      	bls.n	8007be6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e15e      	b.n	8007ea4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007be6:	4b0b      	ldr	r3, [pc, #44]	@ (8007c14 <HAL_RCC_OscConfig+0x240>)
 8007be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d0f0      	beq.n	8007bd4 <HAL_RCC_OscConfig+0x200>
 8007bf2:	e01b      	b.n	8007c2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bf4:	4b09      	ldr	r3, [pc, #36]	@ (8007c1c <HAL_RCC_OscConfig+0x248>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bfa:	f7fd fc8d 	bl	8005518 <HAL_GetTick>
 8007bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c00:	e00e      	b.n	8007c20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c02:	f7fd fc89 	bl	8005518 <HAL_GetTick>
 8007c06:	4602      	mov	r2, r0
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d907      	bls.n	8007c20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e147      	b.n	8007ea4 <HAL_RCC_OscConfig+0x4d0>
 8007c14:	40023800 	.word	0x40023800
 8007c18:	42470000 	.word	0x42470000
 8007c1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c20:	4b88      	ldr	r3, [pc, #544]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007c22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c24:	f003 0302 	and.w	r3, r3, #2
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1ea      	bne.n	8007c02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0304 	and.w	r3, r3, #4
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 8097 	beq.w	8007d68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c3e:	4b81      	ldr	r3, [pc, #516]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10f      	bne.n	8007c6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60bb      	str	r3, [r7, #8]
 8007c4e:	4b7d      	ldr	r3, [pc, #500]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c52:	4a7c      	ldr	r2, [pc, #496]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c5a:	4b7a      	ldr	r3, [pc, #488]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c62:	60bb      	str	r3, [r7, #8]
 8007c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c66:	2301      	movs	r3, #1
 8007c68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c6a:	4b77      	ldr	r3, [pc, #476]	@ (8007e48 <HAL_RCC_OscConfig+0x474>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d118      	bne.n	8007ca8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c76:	4b74      	ldr	r3, [pc, #464]	@ (8007e48 <HAL_RCC_OscConfig+0x474>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a73      	ldr	r2, [pc, #460]	@ (8007e48 <HAL_RCC_OscConfig+0x474>)
 8007c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c82:	f7fd fc49 	bl	8005518 <HAL_GetTick>
 8007c86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c88:	e008      	b.n	8007c9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c8a:	f7fd fc45 	bl	8005518 <HAL_GetTick>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d901      	bls.n	8007c9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e103      	b.n	8007ea4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8007e48 <HAL_RCC_OscConfig+0x474>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d0f0      	beq.n	8007c8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d106      	bne.n	8007cbe <HAL_RCC_OscConfig+0x2ea>
 8007cb0:	4b64      	ldr	r3, [pc, #400]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cb4:	4a63      	ldr	r2, [pc, #396]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007cb6:	f043 0301 	orr.w	r3, r3, #1
 8007cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cbc:	e01c      	b.n	8007cf8 <HAL_RCC_OscConfig+0x324>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	2b05      	cmp	r3, #5
 8007cc4:	d10c      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x30c>
 8007cc6:	4b5f      	ldr	r3, [pc, #380]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cca:	4a5e      	ldr	r2, [pc, #376]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007ccc:	f043 0304 	orr.w	r3, r3, #4
 8007cd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cd2:	4b5c      	ldr	r3, [pc, #368]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cd6:	4a5b      	ldr	r2, [pc, #364]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007cd8:	f043 0301 	orr.w	r3, r3, #1
 8007cdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cde:	e00b      	b.n	8007cf8 <HAL_RCC_OscConfig+0x324>
 8007ce0:	4b58      	ldr	r3, [pc, #352]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ce4:	4a57      	ldr	r2, [pc, #348]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007ce6:	f023 0301 	bic.w	r3, r3, #1
 8007cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cec:	4b55      	ldr	r3, [pc, #340]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cf0:	4a54      	ldr	r2, [pc, #336]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007cf2:	f023 0304 	bic.w	r3, r3, #4
 8007cf6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d015      	beq.n	8007d2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d00:	f7fd fc0a 	bl	8005518 <HAL_GetTick>
 8007d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d06:	e00a      	b.n	8007d1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d08:	f7fd fc06 	bl	8005518 <HAL_GetTick>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d901      	bls.n	8007d1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e0c2      	b.n	8007ea4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d1e:	4b49      	ldr	r3, [pc, #292]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d22:	f003 0302 	and.w	r3, r3, #2
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d0ee      	beq.n	8007d08 <HAL_RCC_OscConfig+0x334>
 8007d2a:	e014      	b.n	8007d56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d2c:	f7fd fbf4 	bl	8005518 <HAL_GetTick>
 8007d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d32:	e00a      	b.n	8007d4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d34:	f7fd fbf0 	bl	8005518 <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d901      	bls.n	8007d4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e0ac      	b.n	8007ea4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d4e:	f003 0302 	and.w	r3, r3, #2
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1ee      	bne.n	8007d34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d56:	7dfb      	ldrb	r3, [r7, #23]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d105      	bne.n	8007d68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d5c:	4b39      	ldr	r3, [pc, #228]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d60:	4a38      	ldr	r2, [pc, #224]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007d62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 8098 	beq.w	8007ea2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d72:	4b34      	ldr	r3, [pc, #208]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f003 030c 	and.w	r3, r3, #12
 8007d7a:	2b08      	cmp	r3, #8
 8007d7c:	d05c      	beq.n	8007e38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d141      	bne.n	8007e0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d86:	4b31      	ldr	r3, [pc, #196]	@ (8007e4c <HAL_RCC_OscConfig+0x478>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d8c:	f7fd fbc4 	bl	8005518 <HAL_GetTick>
 8007d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d92:	e008      	b.n	8007da6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d94:	f7fd fbc0 	bl	8005518 <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d901      	bls.n	8007da6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e07e      	b.n	8007ea4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007da6:	4b27      	ldr	r3, [pc, #156]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1f0      	bne.n	8007d94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	69da      	ldr	r2, [r3, #28]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	431a      	orrs	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc0:	019b      	lsls	r3, r3, #6
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dc8:	085b      	lsrs	r3, r3, #1
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	041b      	lsls	r3, r3, #16
 8007dce:	431a      	orrs	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd4:	061b      	lsls	r3, r3, #24
 8007dd6:	491b      	ldr	r1, [pc, #108]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8007e4c <HAL_RCC_OscConfig+0x478>)
 8007dde:	2201      	movs	r2, #1
 8007de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007de2:	f7fd fb99 	bl	8005518 <HAL_GetTick>
 8007de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007de8:	e008      	b.n	8007dfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dea:	f7fd fb95 	bl	8005518 <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d901      	bls.n	8007dfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e053      	b.n	8007ea4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dfc:	4b11      	ldr	r3, [pc, #68]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0f0      	beq.n	8007dea <HAL_RCC_OscConfig+0x416>
 8007e08:	e04b      	b.n	8007ea2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e0a:	4b10      	ldr	r3, [pc, #64]	@ (8007e4c <HAL_RCC_OscConfig+0x478>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e10:	f7fd fb82 	bl	8005518 <HAL_GetTick>
 8007e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e16:	e008      	b.n	8007e2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e18:	f7fd fb7e 	bl	8005518 <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d901      	bls.n	8007e2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e03c      	b.n	8007ea4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e2a:	4b06      	ldr	r3, [pc, #24]	@ (8007e44 <HAL_RCC_OscConfig+0x470>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1f0      	bne.n	8007e18 <HAL_RCC_OscConfig+0x444>
 8007e36:	e034      	b.n	8007ea2 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d107      	bne.n	8007e50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e02f      	b.n	8007ea4 <HAL_RCC_OscConfig+0x4d0>
 8007e44:	40023800 	.word	0x40023800
 8007e48:	40007000 	.word	0x40007000
 8007e4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e50:	4b16      	ldr	r3, [pc, #88]	@ (8007eac <HAL_RCC_OscConfig+0x4d8>)
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	69db      	ldr	r3, [r3, #28]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d11c      	bne.n	8007e9e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d115      	bne.n	8007e9e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007e78:	4013      	ands	r3, r2
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d10d      	bne.n	8007e9e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d106      	bne.n	8007e9e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d001      	beq.n	8007ea2 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e000      	b.n	8007ea4 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	40023800 	.word	0x40023800

08007eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d101      	bne.n	8007ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e0cc      	b.n	800805e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ec4:	4b68      	ldr	r3, [pc, #416]	@ (8008068 <HAL_RCC_ClockConfig+0x1b8>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 030f 	and.w	r3, r3, #15
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d90c      	bls.n	8007eec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ed2:	4b65      	ldr	r3, [pc, #404]	@ (8008068 <HAL_RCC_ClockConfig+0x1b8>)
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	b2d2      	uxtb	r2, r2
 8007ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eda:	4b63      	ldr	r3, [pc, #396]	@ (8008068 <HAL_RCC_ClockConfig+0x1b8>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 030f 	and.w	r3, r3, #15
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d001      	beq.n	8007eec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e0b8      	b.n	800805e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0302 	and.w	r3, r3, #2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d020      	beq.n	8007f3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0304 	and.w	r3, r3, #4
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d005      	beq.n	8007f10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f04:	4b59      	ldr	r3, [pc, #356]	@ (800806c <HAL_RCC_ClockConfig+0x1bc>)
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	4a58      	ldr	r2, [pc, #352]	@ (800806c <HAL_RCC_ClockConfig+0x1bc>)
 8007f0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007f0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0308 	and.w	r3, r3, #8
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d005      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f1c:	4b53      	ldr	r3, [pc, #332]	@ (800806c <HAL_RCC_ClockConfig+0x1bc>)
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	4a52      	ldr	r2, [pc, #328]	@ (800806c <HAL_RCC_ClockConfig+0x1bc>)
 8007f22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007f26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f28:	4b50      	ldr	r3, [pc, #320]	@ (800806c <HAL_RCC_ClockConfig+0x1bc>)
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	494d      	ldr	r1, [pc, #308]	@ (800806c <HAL_RCC_ClockConfig+0x1bc>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d044      	beq.n	8007fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d107      	bne.n	8007f5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f4e:	4b47      	ldr	r3, [pc, #284]	@ (800806c <HAL_RCC_ClockConfig+0x1bc>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d119      	bne.n	8007f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e07f      	b.n	800805e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d003      	beq.n	8007f6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f6a:	2b03      	cmp	r3, #3
 8007f6c:	d107      	bne.n	8007f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f6e:	4b3f      	ldr	r3, [pc, #252]	@ (800806c <HAL_RCC_ClockConfig+0x1bc>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d109      	bne.n	8007f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e06f      	b.n	800805e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800806c <HAL_RCC_ClockConfig+0x1bc>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0302 	and.w	r3, r3, #2
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e067      	b.n	800805e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f8e:	4b37      	ldr	r3, [pc, #220]	@ (800806c <HAL_RCC_ClockConfig+0x1bc>)
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f023 0203 	bic.w	r2, r3, #3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	4934      	ldr	r1, [pc, #208]	@ (800806c <HAL_RCC_ClockConfig+0x1bc>)
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007fa0:	f7fd faba 	bl	8005518 <HAL_GetTick>
 8007fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fa6:	e00a      	b.n	8007fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fa8:	f7fd fab6 	bl	8005518 <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d901      	bls.n	8007fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e04f      	b.n	800805e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800806c <HAL_RCC_ClockConfig+0x1bc>)
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f003 020c 	and.w	r2, r3, #12
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d1eb      	bne.n	8007fa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007fd0:	4b25      	ldr	r3, [pc, #148]	@ (8008068 <HAL_RCC_ClockConfig+0x1b8>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 030f 	and.w	r3, r3, #15
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d20c      	bcs.n	8007ff8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fde:	4b22      	ldr	r3, [pc, #136]	@ (8008068 <HAL_RCC_ClockConfig+0x1b8>)
 8007fe0:	683a      	ldr	r2, [r7, #0]
 8007fe2:	b2d2      	uxtb	r2, r2
 8007fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fe6:	4b20      	ldr	r3, [pc, #128]	@ (8008068 <HAL_RCC_ClockConfig+0x1b8>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 030f 	and.w	r3, r3, #15
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d001      	beq.n	8007ff8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e032      	b.n	800805e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0304 	and.w	r3, r3, #4
 8008000:	2b00      	cmp	r3, #0
 8008002:	d008      	beq.n	8008016 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008004:	4b19      	ldr	r3, [pc, #100]	@ (800806c <HAL_RCC_ClockConfig+0x1bc>)
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	4916      	ldr	r1, [pc, #88]	@ (800806c <HAL_RCC_ClockConfig+0x1bc>)
 8008012:	4313      	orrs	r3, r2
 8008014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0308 	and.w	r3, r3, #8
 800801e:	2b00      	cmp	r3, #0
 8008020:	d009      	beq.n	8008036 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008022:	4b12      	ldr	r3, [pc, #72]	@ (800806c <HAL_RCC_ClockConfig+0x1bc>)
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	00db      	lsls	r3, r3, #3
 8008030:	490e      	ldr	r1, [pc, #56]	@ (800806c <HAL_RCC_ClockConfig+0x1bc>)
 8008032:	4313      	orrs	r3, r2
 8008034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008036:	f000 f821 	bl	800807c <HAL_RCC_GetSysClockFreq>
 800803a:	4602      	mov	r2, r0
 800803c:	4b0b      	ldr	r3, [pc, #44]	@ (800806c <HAL_RCC_ClockConfig+0x1bc>)
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	091b      	lsrs	r3, r3, #4
 8008042:	f003 030f 	and.w	r3, r3, #15
 8008046:	490a      	ldr	r1, [pc, #40]	@ (8008070 <HAL_RCC_ClockConfig+0x1c0>)
 8008048:	5ccb      	ldrb	r3, [r1, r3]
 800804a:	fa22 f303 	lsr.w	r3, r2, r3
 800804e:	4a09      	ldr	r2, [pc, #36]	@ (8008074 <HAL_RCC_ClockConfig+0x1c4>)
 8008050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008052:	4b09      	ldr	r3, [pc, #36]	@ (8008078 <HAL_RCC_ClockConfig+0x1c8>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4618      	mov	r0, r3
 8008058:	f7fd fa1a 	bl	8005490 <HAL_InitTick>

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	40023c00 	.word	0x40023c00
 800806c:	40023800 	.word	0x40023800
 8008070:	0800dff0 	.word	0x0800dff0
 8008074:	20000104 	.word	0x20000104
 8008078:	20000194 	.word	0x20000194

0800807c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800807c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008080:	b094      	sub	sp, #80	@ 0x50
 8008082:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	647b      	str	r3, [r7, #68]	@ 0x44
 8008088:	2300      	movs	r3, #0
 800808a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800808c:	2300      	movs	r3, #0
 800808e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008090:	2300      	movs	r3, #0
 8008092:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008094:	4b79      	ldr	r3, [pc, #484]	@ (800827c <HAL_RCC_GetSysClockFreq+0x200>)
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f003 030c 	and.w	r3, r3, #12
 800809c:	2b08      	cmp	r3, #8
 800809e:	d00d      	beq.n	80080bc <HAL_RCC_GetSysClockFreq+0x40>
 80080a0:	2b08      	cmp	r3, #8
 80080a2:	f200 80e1 	bhi.w	8008268 <HAL_RCC_GetSysClockFreq+0x1ec>
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d002      	beq.n	80080b0 <HAL_RCC_GetSysClockFreq+0x34>
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	d003      	beq.n	80080b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80080ae:	e0db      	b.n	8008268 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080b0:	4b73      	ldr	r3, [pc, #460]	@ (8008280 <HAL_RCC_GetSysClockFreq+0x204>)
 80080b2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80080b4:	e0db      	b.n	800826e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080b6:	4b73      	ldr	r3, [pc, #460]	@ (8008284 <HAL_RCC_GetSysClockFreq+0x208>)
 80080b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80080ba:	e0d8      	b.n	800826e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080bc:	4b6f      	ldr	r3, [pc, #444]	@ (800827c <HAL_RCC_GetSysClockFreq+0x200>)
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080c6:	4b6d      	ldr	r3, [pc, #436]	@ (800827c <HAL_RCC_GetSysClockFreq+0x200>)
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d063      	beq.n	800819a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080d2:	4b6a      	ldr	r3, [pc, #424]	@ (800827c <HAL_RCC_GetSysClockFreq+0x200>)
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	099b      	lsrs	r3, r3, #6
 80080d8:	2200      	movs	r2, #0
 80080da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80080de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80080e6:	2300      	movs	r3, #0
 80080e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80080ee:	4622      	mov	r2, r4
 80080f0:	462b      	mov	r3, r5
 80080f2:	f04f 0000 	mov.w	r0, #0
 80080f6:	f04f 0100 	mov.w	r1, #0
 80080fa:	0159      	lsls	r1, r3, #5
 80080fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008100:	0150      	lsls	r0, r2, #5
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	4621      	mov	r1, r4
 8008108:	1a51      	subs	r1, r2, r1
 800810a:	6139      	str	r1, [r7, #16]
 800810c:	4629      	mov	r1, r5
 800810e:	eb63 0301 	sbc.w	r3, r3, r1
 8008112:	617b      	str	r3, [r7, #20]
 8008114:	f04f 0200 	mov.w	r2, #0
 8008118:	f04f 0300 	mov.w	r3, #0
 800811c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008120:	4659      	mov	r1, fp
 8008122:	018b      	lsls	r3, r1, #6
 8008124:	4651      	mov	r1, sl
 8008126:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800812a:	4651      	mov	r1, sl
 800812c:	018a      	lsls	r2, r1, #6
 800812e:	4651      	mov	r1, sl
 8008130:	ebb2 0801 	subs.w	r8, r2, r1
 8008134:	4659      	mov	r1, fp
 8008136:	eb63 0901 	sbc.w	r9, r3, r1
 800813a:	f04f 0200 	mov.w	r2, #0
 800813e:	f04f 0300 	mov.w	r3, #0
 8008142:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008146:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800814a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800814e:	4690      	mov	r8, r2
 8008150:	4699      	mov	r9, r3
 8008152:	4623      	mov	r3, r4
 8008154:	eb18 0303 	adds.w	r3, r8, r3
 8008158:	60bb      	str	r3, [r7, #8]
 800815a:	462b      	mov	r3, r5
 800815c:	eb49 0303 	adc.w	r3, r9, r3
 8008160:	60fb      	str	r3, [r7, #12]
 8008162:	f04f 0200 	mov.w	r2, #0
 8008166:	f04f 0300 	mov.w	r3, #0
 800816a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800816e:	4629      	mov	r1, r5
 8008170:	024b      	lsls	r3, r1, #9
 8008172:	4621      	mov	r1, r4
 8008174:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008178:	4621      	mov	r1, r4
 800817a:	024a      	lsls	r2, r1, #9
 800817c:	4610      	mov	r0, r2
 800817e:	4619      	mov	r1, r3
 8008180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008182:	2200      	movs	r2, #0
 8008184:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008186:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008188:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800818c:	f7f8 fd7c 	bl	8000c88 <__aeabi_uldivmod>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4613      	mov	r3, r2
 8008196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008198:	e058      	b.n	800824c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800819a:	4b38      	ldr	r3, [pc, #224]	@ (800827c <HAL_RCC_GetSysClockFreq+0x200>)
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	099b      	lsrs	r3, r3, #6
 80081a0:	2200      	movs	r2, #0
 80081a2:	4618      	mov	r0, r3
 80081a4:	4611      	mov	r1, r2
 80081a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80081aa:	623b      	str	r3, [r7, #32]
 80081ac:	2300      	movs	r3, #0
 80081ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80081b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80081b4:	4642      	mov	r2, r8
 80081b6:	464b      	mov	r3, r9
 80081b8:	f04f 0000 	mov.w	r0, #0
 80081bc:	f04f 0100 	mov.w	r1, #0
 80081c0:	0159      	lsls	r1, r3, #5
 80081c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081c6:	0150      	lsls	r0, r2, #5
 80081c8:	4602      	mov	r2, r0
 80081ca:	460b      	mov	r3, r1
 80081cc:	4641      	mov	r1, r8
 80081ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80081d2:	4649      	mov	r1, r9
 80081d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80081d8:	f04f 0200 	mov.w	r2, #0
 80081dc:	f04f 0300 	mov.w	r3, #0
 80081e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80081e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80081e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80081ec:	ebb2 040a 	subs.w	r4, r2, sl
 80081f0:	eb63 050b 	sbc.w	r5, r3, fp
 80081f4:	f04f 0200 	mov.w	r2, #0
 80081f8:	f04f 0300 	mov.w	r3, #0
 80081fc:	00eb      	lsls	r3, r5, #3
 80081fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008202:	00e2      	lsls	r2, r4, #3
 8008204:	4614      	mov	r4, r2
 8008206:	461d      	mov	r5, r3
 8008208:	4643      	mov	r3, r8
 800820a:	18e3      	adds	r3, r4, r3
 800820c:	603b      	str	r3, [r7, #0]
 800820e:	464b      	mov	r3, r9
 8008210:	eb45 0303 	adc.w	r3, r5, r3
 8008214:	607b      	str	r3, [r7, #4]
 8008216:	f04f 0200 	mov.w	r2, #0
 800821a:	f04f 0300 	mov.w	r3, #0
 800821e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008222:	4629      	mov	r1, r5
 8008224:	028b      	lsls	r3, r1, #10
 8008226:	4621      	mov	r1, r4
 8008228:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800822c:	4621      	mov	r1, r4
 800822e:	028a      	lsls	r2, r1, #10
 8008230:	4610      	mov	r0, r2
 8008232:	4619      	mov	r1, r3
 8008234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008236:	2200      	movs	r2, #0
 8008238:	61bb      	str	r3, [r7, #24]
 800823a:	61fa      	str	r2, [r7, #28]
 800823c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008240:	f7f8 fd22 	bl	8000c88 <__aeabi_uldivmod>
 8008244:	4602      	mov	r2, r0
 8008246:	460b      	mov	r3, r1
 8008248:	4613      	mov	r3, r2
 800824a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800824c:	4b0b      	ldr	r3, [pc, #44]	@ (800827c <HAL_RCC_GetSysClockFreq+0x200>)
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	0c1b      	lsrs	r3, r3, #16
 8008252:	f003 0303 	and.w	r3, r3, #3
 8008256:	3301      	adds	r3, #1
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800825c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800825e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008260:	fbb2 f3f3 	udiv	r3, r2, r3
 8008264:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008266:	e002      	b.n	800826e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008268:	4b05      	ldr	r3, [pc, #20]	@ (8008280 <HAL_RCC_GetSysClockFreq+0x204>)
 800826a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800826c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800826e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008270:	4618      	mov	r0, r3
 8008272:	3750      	adds	r7, #80	@ 0x50
 8008274:	46bd      	mov	sp, r7
 8008276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800827a:	bf00      	nop
 800827c:	40023800 	.word	0x40023800
 8008280:	00f42400 	.word	0x00f42400
 8008284:	007a1200 	.word	0x007a1200

08008288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008288:	b480      	push	{r7}
 800828a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800828c:	4b03      	ldr	r3, [pc, #12]	@ (800829c <HAL_RCC_GetHCLKFreq+0x14>)
 800828e:	681b      	ldr	r3, [r3, #0]
}
 8008290:	4618      	mov	r0, r3
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	20000104 	.word	0x20000104

080082a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80082a4:	f7ff fff0 	bl	8008288 <HAL_RCC_GetHCLKFreq>
 80082a8:	4602      	mov	r2, r0
 80082aa:	4b05      	ldr	r3, [pc, #20]	@ (80082c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	0a9b      	lsrs	r3, r3, #10
 80082b0:	f003 0307 	and.w	r3, r3, #7
 80082b4:	4903      	ldr	r1, [pc, #12]	@ (80082c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082b6:	5ccb      	ldrb	r3, [r1, r3]
 80082b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082bc:	4618      	mov	r0, r3
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	40023800 	.word	0x40023800
 80082c4:	0800e000 	.word	0x0800e000

080082c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80082cc:	f7ff ffdc 	bl	8008288 <HAL_RCC_GetHCLKFreq>
 80082d0:	4602      	mov	r2, r0
 80082d2:	4b05      	ldr	r3, [pc, #20]	@ (80082e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	0b5b      	lsrs	r3, r3, #13
 80082d8:	f003 0307 	and.w	r3, r3, #7
 80082dc:	4903      	ldr	r1, [pc, #12]	@ (80082ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80082de:	5ccb      	ldrb	r3, [r1, r3]
 80082e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	40023800 	.word	0x40023800
 80082ec:	0800e000 	.word	0x0800e000

080082f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10b      	bne.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008314:	2b00      	cmp	r3, #0
 8008316:	d105      	bne.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008320:	2b00      	cmp	r3, #0
 8008322:	d075      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008324:	4b91      	ldr	r3, [pc, #580]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008326:	2200      	movs	r2, #0
 8008328:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800832a:	f7fd f8f5 	bl	8005518 <HAL_GetTick>
 800832e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008330:	e008      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008332:	f7fd f8f1 	bl	8005518 <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	2b02      	cmp	r3, #2
 800833e:	d901      	bls.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e189      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008344:	4b8a      	ldr	r3, [pc, #552]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1f0      	bne.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	2b00      	cmp	r3, #0
 800835a:	d009      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	019a      	lsls	r2, r3, #6
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	071b      	lsls	r3, r3, #28
 8008368:	4981      	ldr	r1, [pc, #516]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800836a:	4313      	orrs	r3, r2
 800836c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0302 	and.w	r3, r3, #2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d01f      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800837c:	4b7c      	ldr	r3, [pc, #496]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800837e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008382:	0f1b      	lsrs	r3, r3, #28
 8008384:	f003 0307 	and.w	r3, r3, #7
 8008388:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	019a      	lsls	r2, r3, #6
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	061b      	lsls	r3, r3, #24
 8008396:	431a      	orrs	r2, r3
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	071b      	lsls	r3, r3, #28
 800839c:	4974      	ldr	r1, [pc, #464]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80083a4:	4b72      	ldr	r3, [pc, #456]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083aa:	f023 021f 	bic.w	r2, r3, #31
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	3b01      	subs	r3, #1
 80083b4:	496e      	ldr	r1, [pc, #440]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00d      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	019a      	lsls	r2, r3, #6
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	061b      	lsls	r3, r3, #24
 80083d4:	431a      	orrs	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	071b      	lsls	r3, r3, #28
 80083dc:	4964      	ldr	r1, [pc, #400]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80083e4:	4b61      	ldr	r3, [pc, #388]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80083e6:	2201      	movs	r2, #1
 80083e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80083ea:	f7fd f895 	bl	8005518 <HAL_GetTick>
 80083ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80083f0:	e008      	b.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80083f2:	f7fd f891 	bl	8005518 <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d901      	bls.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e129      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008404:	4b5a      	ldr	r3, [pc, #360]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d0f0      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0304 	and.w	r3, r3, #4
 8008418:	2b00      	cmp	r3, #0
 800841a:	d105      	bne.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008424:	2b00      	cmp	r3, #0
 8008426:	d079      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008428:	4b52      	ldr	r3, [pc, #328]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800842a:	2200      	movs	r2, #0
 800842c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800842e:	f7fd f873 	bl	8005518 <HAL_GetTick>
 8008432:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008434:	e008      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008436:	f7fd f86f 	bl	8005518 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d901      	bls.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e107      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008448:	4b49      	ldr	r3, [pc, #292]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008450:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008454:	d0ef      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0304 	and.w	r3, r3, #4
 800845e:	2b00      	cmp	r3, #0
 8008460:	d020      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008462:	4b43      	ldr	r3, [pc, #268]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008468:	0f1b      	lsrs	r3, r3, #28
 800846a:	f003 0307 	and.w	r3, r3, #7
 800846e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	019a      	lsls	r2, r3, #6
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	061b      	lsls	r3, r3, #24
 800847c:	431a      	orrs	r2, r3
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	071b      	lsls	r3, r3, #28
 8008482:	493b      	ldr	r1, [pc, #236]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008484:	4313      	orrs	r3, r2
 8008486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800848a:	4b39      	ldr	r3, [pc, #228]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800848c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008490:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a1b      	ldr	r3, [r3, #32]
 8008498:	3b01      	subs	r3, #1
 800849a:	021b      	lsls	r3, r3, #8
 800849c:	4934      	ldr	r1, [pc, #208]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0308 	and.w	r3, r3, #8
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d01e      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80084b0:	4b2f      	ldr	r3, [pc, #188]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084b6:	0e1b      	lsrs	r3, r3, #24
 80084b8:	f003 030f 	and.w	r3, r3, #15
 80084bc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	019a      	lsls	r2, r3, #6
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	061b      	lsls	r3, r3, #24
 80084c8:	431a      	orrs	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	071b      	lsls	r3, r3, #28
 80084d0:	4927      	ldr	r1, [pc, #156]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084d2:	4313      	orrs	r3, r2
 80084d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80084d8:	4b25      	ldr	r3, [pc, #148]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e6:	4922      	ldr	r1, [pc, #136]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80084ee:	4b21      	ldr	r3, [pc, #132]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80084f0:	2201      	movs	r2, #1
 80084f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80084f4:	f7fd f810 	bl	8005518 <HAL_GetTick>
 80084f8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80084fa:	e008      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80084fc:	f7fd f80c 	bl	8005518 <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	2b02      	cmp	r3, #2
 8008508:	d901      	bls.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e0a4      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800850e:	4b18      	ldr	r3, [pc, #96]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008516:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800851a:	d1ef      	bne.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0320 	and.w	r3, r3, #32
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 808b 	beq.w	8008640 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800852a:	2300      	movs	r3, #0
 800852c:	60fb      	str	r3, [r7, #12]
 800852e:	4b10      	ldr	r3, [pc, #64]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008532:	4a0f      	ldr	r2, [pc, #60]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008538:	6413      	str	r3, [r2, #64]	@ 0x40
 800853a:	4b0d      	ldr	r3, [pc, #52]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800853c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800853e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008546:	4b0c      	ldr	r3, [pc, #48]	@ (8008578 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a0b      	ldr	r2, [pc, #44]	@ (8008578 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800854c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008550:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008552:	f7fc ffe1 	bl	8005518 <HAL_GetTick>
 8008556:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008558:	e010      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800855a:	f7fc ffdd 	bl	8005518 <HAL_GetTick>
 800855e:	4602      	mov	r2, r0
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	2b02      	cmp	r3, #2
 8008566:	d909      	bls.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	e075      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800856c:	42470068 	.word	0x42470068
 8008570:	40023800 	.word	0x40023800
 8008574:	42470070 	.word	0x42470070
 8008578:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800857c:	4b38      	ldr	r3, [pc, #224]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008584:	2b00      	cmp	r3, #0
 8008586:	d0e8      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008588:	4b36      	ldr	r3, [pc, #216]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800858a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800858c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008590:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d02f      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800859c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d028      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085a6:	4b2f      	ldr	r3, [pc, #188]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80085b0:	4b2d      	ldr	r3, [pc, #180]	@ (8008668 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80085b2:	2201      	movs	r2, #1
 80085b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80085b6:	4b2c      	ldr	r3, [pc, #176]	@ (8008668 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80085bc:	4a29      	ldr	r2, [pc, #164]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80085c2:	4b28      	ldr	r3, [pc, #160]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d114      	bne.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80085ce:	f7fc ffa3 	bl	8005518 <HAL_GetTick>
 80085d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085d4:	e00a      	b.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085d6:	f7fc ff9f 	bl	8005518 <HAL_GetTick>
 80085da:	4602      	mov	r2, r0
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d901      	bls.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e035      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d0ee      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008600:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008604:	d10d      	bne.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008606:	4b17      	ldr	r3, [pc, #92]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008612:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800861a:	4912      	ldr	r1, [pc, #72]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800861c:	4313      	orrs	r3, r2
 800861e:	608b      	str	r3, [r1, #8]
 8008620:	e005      	b.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8008622:	4b10      	ldr	r3, [pc, #64]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	4a0f      	ldr	r2, [pc, #60]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008628:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800862c:	6093      	str	r3, [r2, #8]
 800862e:	4b0d      	ldr	r3, [pc, #52]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008630:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800863a:	490a      	ldr	r1, [pc, #40]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800863c:	4313      	orrs	r3, r2
 800863e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 0310 	and.w	r3, r3, #16
 8008648:	2b00      	cmp	r3, #0
 800864a:	d004      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8008652:	4b06      	ldr	r3, [pc, #24]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008654:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3718      	adds	r7, #24
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	40007000 	.word	0x40007000
 8008664:	40023800 	.word	0x40023800
 8008668:	42470e40 	.word	0x42470e40
 800866c:	424711e0 	.word	0x424711e0

08008670 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e025      	b.n	80086d0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800868a:	b2db      	uxtb	r3, r3
 800868c:	2b00      	cmp	r3, #0
 800868e:	d106      	bne.n	800869e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f81d 	bl	80086d8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2202      	movs	r2, #2
 80086a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	3304      	adds	r3, #4
 80086ae:	4619      	mov	r1, r3
 80086b0:	4610      	mov	r0, r2
 80086b2:	f001 fd0f 	bl	800a0d4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6818      	ldr	r0, [r3, #0]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	461a      	mov	r2, r3
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	f001 fd7a 	bl	800a1ba <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b02      	cmp	r3, #2
 8008702:	d101      	bne.n	8008708 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008704:	2302      	movs	r3, #2
 8008706:	e018      	b.n	800873a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2202      	movs	r2, #2
 800870c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	68b9      	ldr	r1, [r7, #8]
 8008718:	4618      	mov	r0, r3
 800871a:	f001 fdcd 	bl	800a2b8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2b02      	cmp	r3, #2
 8008724:	d104      	bne.n	8008730 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2205      	movs	r2, #5
 800872a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 800872e:	e003      	b.n	8008738 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }
  
  return HAL_OK;  
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b082      	sub	sp, #8
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b02      	cmp	r3, #2
 8008756:	d101      	bne.n	800875c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008758:	2302      	movs	r3, #2
 800875a:	e00e      	b.n	800877a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2202      	movs	r2, #2
 8008760:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6839      	ldr	r1, [r7, #0]
 800876a:	4618      	mov	r0, r3
 800876c:	f001 fde0 	bl	800a330 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;   
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b082      	sub	sp, #8
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e05d      	b.n	8008850 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b00      	cmp	r3, #0
 800879e:	d106      	bne.n	80087ae <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f87d 	bl	80088a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2202      	movs	r2, #2
 80087b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80087c4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685a      	ldr	r2, [r3, #4]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	431a      	orrs	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	431a      	orrs	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	431a      	orrs	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	695b      	ldr	r3, [r3, #20]
 80087e0:	431a      	orrs	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087ea:	431a      	orrs	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	69db      	ldr	r3, [r3, #28]
 80087f0:	431a      	orrs	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	ea42 0103 	orr.w	r1, r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	430a      	orrs	r2, r1
 8008804:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	0c1b      	lsrs	r3, r3, #16
 800880c:	f003 0104 	and.w	r1, r3, #4
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	430a      	orrs	r2, r1
 800881a:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008820:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008824:	d104      	bne.n	8008830 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800882e:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	69da      	ldr	r2, [r3, #28]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800883e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e01a      	b.n	80088a0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2202      	movs	r2, #2
 800886e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008880:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f81a 	bl	80088bc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b088      	sub	sp, #32
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	603b      	str	r3, [r7, #0]
 80088dc:	4613      	mov	r3, r2
 80088de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088e0:	2300      	movs	r3, #0
 80088e2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d101      	bne.n	80088f2 <HAL_SPI_Transmit+0x22>
 80088ee:	2302      	movs	r3, #2
 80088f0:	e140      	b.n	8008b74 <HAL_SPI_Transmit+0x2a4>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088fa:	f7fc fe0d 	bl	8005518 <HAL_GetTick>
 80088fe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008900:	88fb      	ldrh	r3, [r7, #6]
 8008902:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b01      	cmp	r3, #1
 800890e:	d002      	beq.n	8008916 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008910:	2302      	movs	r3, #2
 8008912:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008914:	e125      	b.n	8008b62 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d002      	beq.n	8008922 <HAL_SPI_Transmit+0x52>
 800891c:	88fb      	ldrh	r3, [r7, #6]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d102      	bne.n	8008928 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008926:	e11c      	b.n	8008b62 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2203      	movs	r2, #3
 800892c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	88fa      	ldrh	r2, [r7, #6]
 8008940:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	88fa      	ldrh	r2, [r7, #6]
 8008946:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800896e:	d107      	bne.n	8008980 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800897e:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008984:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008988:	d10f      	bne.n	80089aa <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008998:	601a      	str	r2, [r3, #0]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80089a8:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089b4:	2b40      	cmp	r3, #64	@ 0x40
 80089b6:	d007      	beq.n	80089c8 <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089d0:	d14b      	bne.n	8008a6a <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d002      	beq.n	80089e0 <HAL_SPI_Transmit+0x110>
 80089da:	8afb      	ldrh	r3, [r7, #22]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d13e      	bne.n	8008a5e <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089e4:	881a      	ldrh	r2, [r3, #0]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089f0:	1c9a      	adds	r2, r3, #2
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	3b01      	subs	r3, #1
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008a04:	e02b      	b.n	8008a5e <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f003 0302 	and.w	r3, r3, #2
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d112      	bne.n	8008a3a <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a18:	881a      	ldrh	r2, [r3, #0]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a24:	1c9a      	adds	r2, r3, #2
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	3b01      	subs	r3, #1
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008a38:	e011      	b.n	8008a5e <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a3a:	f7fc fd6d 	bl	8005518 <HAL_GetTick>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	683a      	ldr	r2, [r7, #0]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d803      	bhi.n	8008a52 <HAL_SPI_Transmit+0x182>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a50:	d102      	bne.n	8008a58 <HAL_SPI_Transmit+0x188>
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d102      	bne.n	8008a5e <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008a5c:	e081      	b.n	8008b62 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1ce      	bne.n	8008a06 <HAL_SPI_Transmit+0x136>
 8008a68:	e04c      	b.n	8008b04 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <HAL_SPI_Transmit+0x1a8>
 8008a72:	8afb      	ldrh	r3, [r7, #22]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d140      	bne.n	8008afa <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	330c      	adds	r3, #12
 8008a82:	7812      	ldrb	r2, [r2, #0]
 8008a84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a8a:	1c5a      	adds	r2, r3, #1
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	3b01      	subs	r3, #1
 8008a98:	b29a      	uxth	r2, r3
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008a9e:	e02c      	b.n	8008afa <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f003 0302 	and.w	r3, r3, #2
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d113      	bne.n	8008ad6 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	330c      	adds	r3, #12
 8008ab8:	7812      	ldrb	r2, [r2, #0]
 8008aba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ac0:	1c5a      	adds	r2, r3, #1
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	3b01      	subs	r3, #1
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008ad4:	e011      	b.n	8008afa <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ad6:	f7fc fd1f 	bl	8005518 <HAL_GetTick>
 8008ada:	4602      	mov	r2, r0
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d803      	bhi.n	8008aee <HAL_SPI_Transmit+0x21e>
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aec:	d102      	bne.n	8008af4 <HAL_SPI_Transmit+0x224>
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d102      	bne.n	8008afa <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008af8:	e033      	b.n	8008b62 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1cd      	bne.n	8008aa0 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b0c:	d107      	bne.n	8008b1e <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008b1c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	6839      	ldr	r1, [r7, #0]
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 fc94 	bl	8009450 <SPI_EndRxTxTransaction>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d002      	beq.n	8008b34 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2220      	movs	r2, #32
 8008b32:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d10a      	bne.n	8008b52 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	613b      	str	r3, [r7, #16]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	613b      	str	r3, [r7, #16]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	613b      	str	r3, [r7, #16]
 8008b50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d002      	beq.n	8008b60 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	77fb      	strb	r3, [r7, #31]
 8008b5e:	e000      	b.n	8008b62 <HAL_SPI_Transmit+0x292>
  }

error:
 8008b60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008b72:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3720      	adds	r7, #32
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b088      	sub	sp, #32
 8008b80:	af02      	add	r7, sp, #8
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	603b      	str	r3, [r7, #0]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b98:	d112      	bne.n	8008bc0 <HAL_SPI_Receive+0x44>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10e      	bne.n	8008bc0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2204      	movs	r2, #4
 8008ba6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008baa:	88fa      	ldrh	r2, [r7, #6]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	68b9      	ldr	r1, [r7, #8]
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f000 f95f 	bl	8008e7a <HAL_SPI_TransmitReceive>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	e158      	b.n	8008e72 <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d101      	bne.n	8008bce <HAL_SPI_Receive+0x52>
 8008bca:	2302      	movs	r3, #2
 8008bcc:	e151      	b.n	8008e72 <HAL_SPI_Receive+0x2f6>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bd6:	f7fc fc9f 	bl	8005518 <HAL_GetTick>
 8008bda:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d002      	beq.n	8008bee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008be8:	2302      	movs	r3, #2
 8008bea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008bec:	e138      	b.n	8008e60 <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <HAL_SPI_Receive+0x7e>
 8008bf4:	88fb      	ldrh	r3, [r7, #6]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d102      	bne.n	8008c00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008bfe:	e12f      	b.n	8008e60 <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2204      	movs	r2, #4
 8008c04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	88fa      	ldrh	r2, [r7, #6]
 8008c18:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	88fa      	ldrh	r2, [r7, #6]
 8008c1e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c46:	d116      	bne.n	8008c76 <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008c56:	601a      	str	r2, [r3, #0]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c66:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c7e:	d107      	bne.n	8008c90 <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008c8e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c9a:	2b40      	cmp	r3, #64	@ 0x40
 8008c9c:	d007      	beq.n	8008cae <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d162      	bne.n	8008d7c <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008cb6:	e02e      	b.n	8008d16 <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d115      	bne.n	8008cf2 <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f103 020c 	add.w	r2, r3, #12
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd2:	7812      	ldrb	r2, [r2, #0]
 8008cd4:	b2d2      	uxtb	r2, r2
 8008cd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cdc:	1c5a      	adds	r2, r3, #1
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	b29a      	uxth	r2, r3
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008cf0:	e011      	b.n	8008d16 <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cf2:	f7fc fc11 	bl	8005518 <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d803      	bhi.n	8008d0a <HAL_SPI_Receive+0x18e>
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d08:	d102      	bne.n	8008d10 <HAL_SPI_Receive+0x194>
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d102      	bne.n	8008d16 <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8008d10:	2303      	movs	r3, #3
 8008d12:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008d14:	e0a4      	b.n	8008e60 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1cb      	bne.n	8008cb8 <HAL_SPI_Receive+0x13c>
 8008d20:	e031      	b.n	8008d86 <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f003 0301 	and.w	r3, r3, #1
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d113      	bne.n	8008d58 <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68da      	ldr	r2, [r3, #12]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d3a:	b292      	uxth	r2, r2
 8008d3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d42:	1c9a      	adds	r2, r3, #2
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	b29a      	uxth	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008d56:	e011      	b.n	8008d7c <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d58:	f7fc fbde 	bl	8005518 <HAL_GetTick>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d803      	bhi.n	8008d70 <HAL_SPI_Receive+0x1f4>
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6e:	d102      	bne.n	8008d76 <HAL_SPI_Receive+0x1fa>
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d102      	bne.n	8008d7c <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008d7a:	e071      	b.n	8008e60 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1cd      	bne.n	8008d22 <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d8e:	d142      	bne.n	8008e16 <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008d9e:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	2201      	movs	r2, #1
 8008da8:	2101      	movs	r1, #1
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f000 fa81 	bl	80092b2 <SPI_WaitFlagStateUntilTimeout>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d002      	beq.n	8008dbc <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8008db6:	2303      	movs	r3, #3
 8008db8:	75fb      	strb	r3, [r7, #23]
      goto error;
 8008dba:	e051      	b.n	8008e60 <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008dc4:	d107      	bne.n	8008dd6 <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68da      	ldr	r2, [r3, #12]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd0:	b292      	uxth	r2, r2
 8008dd2:	801a      	strh	r2, [r3, #0]
 8008dd4:	e008      	b.n	8008de8 <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f103 020c 	add.w	r2, r3, #12
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de2:	7812      	ldrb	r2, [r2, #0]
 8008de4:	b2d2      	uxtb	r2, r2
 8008de6:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	2201      	movs	r2, #1
 8008df0:	2101      	movs	r1, #1
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f000 fa5d 	bl	80092b2 <SPI_WaitFlagStateUntilTimeout>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d008      	beq.n	8008e10 <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e02:	f043 0202 	orr.w	r2, r3, #2
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	75fb      	strb	r3, [r7, #23]
      goto error;
 8008e0e:	e027      	b.n	8008e60 <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f000 fab3 	bl	8009386 <SPI_EndRxTransaction>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d002      	beq.n	8008e2c <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2220      	movs	r2, #32
 8008e2a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	f003 0310 	and.w	r3, r3, #16
 8008e36:	2b10      	cmp	r3, #16
 8008e38:	d10a      	bne.n	8008e50 <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e3e:	f043 0202 	orr.w	r2, r3, #2
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8008e4e:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d002      	beq.n	8008e5e <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	75fb      	strb	r3, [r7, #23]
 8008e5c:	e000      	b.n	8008e60 <HAL_SPI_Receive+0x2e4>
  }

error :
 8008e5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3718      	adds	r7, #24
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b08e      	sub	sp, #56	@ 0x38
 8008e7e:	af02      	add	r7, sp, #8
 8008e80:	60f8      	str	r0, [r7, #12]
 8008e82:	60b9      	str	r1, [r7, #8]
 8008e84:	607a      	str	r2, [r7, #4]
 8008e86:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d101      	bne.n	8008ea0 <HAL_SPI_TransmitReceive+0x26>
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	e1f6      	b.n	800928e <HAL_SPI_TransmitReceive+0x414>
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ea8:	f7fc fb36 	bl	8005518 <HAL_GetTick>
 8008eac:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008eb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008ebe:	887b      	ldrh	r3, [r7, #2]
 8008ec0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008ec2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d00f      	beq.n	8008eea <HAL_SPI_TransmitReceive+0x70>
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ed0:	d107      	bne.n	8008ee2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d103      	bne.n	8008ee2 <HAL_SPI_TransmitReceive+0x68>
 8008eda:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008ede:	2b04      	cmp	r3, #4
 8008ee0:	d003      	beq.n	8008eea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008ee2:	2302      	movs	r3, #2
 8008ee4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008ee8:	e1c7      	b.n	800927a <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d005      	beq.n	8008efc <HAL_SPI_TransmitReceive+0x82>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d002      	beq.n	8008efc <HAL_SPI_TransmitReceive+0x82>
 8008ef6:	887b      	ldrh	r3, [r7, #2]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d103      	bne.n	8008f04 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008f02:	e1ba      	b.n	800927a <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b04      	cmp	r3, #4
 8008f0e:	d003      	beq.n	8008f18 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2205      	movs	r2, #5
 8008f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	887a      	ldrh	r2, [r7, #2]
 8008f28:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	887a      	ldrh	r2, [r7, #2]
 8008f2e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	887a      	ldrh	r2, [r7, #2]
 8008f3a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	887a      	ldrh	r2, [r7, #2]
 8008f40:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f56:	d10f      	bne.n	8008f78 <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f66:	601a      	str	r2, [r3, #0]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f76:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f82:	2b40      	cmp	r3, #64	@ 0x40
 8008f84:	d007      	beq.n	8008f96 <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f9e:	f040 808b 	bne.w	80090b8 <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d002      	beq.n	8008fb0 <HAL_SPI_TransmitReceive+0x136>
 8008faa:	8b7b      	ldrh	r3, [r7, #26]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d178      	bne.n	80090a2 <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb4:	881a      	ldrh	r2, [r3, #0]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fc0:	1c9a      	adds	r2, r3, #2
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fd4:	e065      	b.n	80090a2 <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	f003 0302 	and.w	r3, r3, #2
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d12d      	bne.n	8009040 <HAL_SPI_TransmitReceive+0x1c6>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d028      	beq.n	8009040 <HAL_SPI_TransmitReceive+0x1c6>
 8008fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d125      	bne.n	8009040 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ff8:	881a      	ldrh	r2, [r3, #0]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009004:	1c9a      	adds	r2, r3, #2
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800900e:	b29b      	uxth	r3, r3
 8009010:	3b01      	subs	r3, #1
 8009012:	b29a      	uxth	r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009018:	2300      	movs	r3, #0
 800901a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009020:	b29b      	uxth	r3, r3
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10c      	bne.n	8009040 <HAL_SPI_TransmitReceive+0x1c6>
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800902a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800902e:	d107      	bne.n	8009040 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800903e:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b01      	cmp	r3, #1
 800904c:	d119      	bne.n	8009082 <HAL_SPI_TransmitReceive+0x208>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009052:	b29b      	uxth	r3, r3
 8009054:	2b00      	cmp	r3, #0
 8009056:	d014      	beq.n	8009082 <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68da      	ldr	r2, [r3, #12]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009062:	b292      	uxth	r2, r2
 8009064:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800906a:	1c9a      	adds	r2, r3, #2
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009074:	b29b      	uxth	r3, r3
 8009076:	3b01      	subs	r3, #1
 8009078:	b29a      	uxth	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800907e:	2301      	movs	r3, #1
 8009080:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009082:	f7fc fa49 	bl	8005518 <HAL_GetTick>
 8009086:	4602      	mov	r2, r0
 8009088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800908e:	429a      	cmp	r2, r3
 8009090:	d807      	bhi.n	80090a2 <HAL_SPI_TransmitReceive+0x228>
 8009092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009098:	d003      	beq.n	80090a2 <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 800909a:	2303      	movs	r3, #3
 800909c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80090a0:	e0eb      	b.n	800927a <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d194      	bne.n	8008fd6 <HAL_SPI_TransmitReceive+0x15c>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d18f      	bne.n	8008fd6 <HAL_SPI_TransmitReceive+0x15c>
 80090b6:	e08e      	b.n	80091d6 <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d002      	beq.n	80090c6 <HAL_SPI_TransmitReceive+0x24c>
 80090c0:	8b7b      	ldrh	r3, [r7, #26]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d17d      	bne.n	80091c2 <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	330c      	adds	r3, #12
 80090d0:	7812      	ldrb	r2, [r2, #0]
 80090d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090d8:	1c5a      	adds	r2, r3, #1
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	3b01      	subs	r3, #1
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090ec:	e069      	b.n	80091c2 <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	f003 0302 	and.w	r3, r3, #2
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d12e      	bne.n	800915a <HAL_SPI_TransmitReceive+0x2e0>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009100:	b29b      	uxth	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	d029      	beq.n	800915a <HAL_SPI_TransmitReceive+0x2e0>
 8009106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009108:	2b01      	cmp	r3, #1
 800910a:	d126      	bne.n	800915a <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	330c      	adds	r3, #12
 8009116:	7812      	ldrb	r2, [r2, #0]
 8009118:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800911e:	1c5a      	adds	r2, r3, #1
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009128:	b29b      	uxth	r3, r3
 800912a:	3b01      	subs	r3, #1
 800912c:	b29a      	uxth	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009132:	2300      	movs	r3, #0
 8009134:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800913a:	b29b      	uxth	r3, r3
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10c      	bne.n	800915a <HAL_SPI_TransmitReceive+0x2e0>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009144:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009148:	d107      	bne.n	800915a <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009158:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	f003 0301 	and.w	r3, r3, #1
 8009164:	2b01      	cmp	r3, #1
 8009166:	d119      	bne.n	800919c <HAL_SPI_TransmitReceive+0x322>
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800916c:	b29b      	uxth	r3, r3
 800916e:	2b00      	cmp	r3, #0
 8009170:	d014      	beq.n	800919c <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68da      	ldr	r2, [r3, #12]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800917c:	b2d2      	uxtb	r2, r2
 800917e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009184:	1c5a      	adds	r2, r3, #1
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800918e:	b29b      	uxth	r3, r3
 8009190:	3b01      	subs	r3, #1
 8009192:	b29a      	uxth	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009198:	2301      	movs	r3, #1
 800919a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800919c:	f7fc f9bc 	bl	8005518 <HAL_GetTick>
 80091a0:	4602      	mov	r2, r0
 80091a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d803      	bhi.n	80091b4 <HAL_SPI_TransmitReceive+0x33a>
 80091ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b2:	d102      	bne.n	80091ba <HAL_SPI_TransmitReceive+0x340>
 80091b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d103      	bne.n	80091c2 <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80091c0:	e05b      	b.n	800927a <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d190      	bne.n	80090ee <HAL_SPI_TransmitReceive+0x274>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d18b      	bne.n	80090ee <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091de:	d117      	bne.n	8009210 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80091e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e6:	2201      	movs	r2, #1
 80091e8:	2101      	movs	r1, #1
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	f000 f861 	bl	80092b2 <SPI_WaitFlagStateUntilTimeout>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d009      	beq.n	800920a <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091fa:	f043 0202 	orr.w	r2, r3, #2
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      goto error;
 8009208:	e037      	b.n	800927a <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f003 0310 	and.w	r3, r3, #16
 800921a:	2b10      	cmp	r3, #16
 800921c:	d10d      	bne.n	800923a <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009222:	f043 0202 	orr.w	r2, r3, #2
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8009232:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800923a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800923c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f000 f906 	bl	8009450 <SPI_EndRxTxTransaction>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d006      	beq.n	8009258 <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2220      	movs	r2, #32
 8009254:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8009256:	e010      	b.n	800927a <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10b      	bne.n	8009278 <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009260:	2300      	movs	r3, #0
 8009262:	617b      	str	r3, [r7, #20]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	617b      	str	r3, [r7, #20]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	617b      	str	r3, [r7, #20]
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	e000      	b.n	800927a <HAL_SPI_TransmitReceive+0x400>
  }

error :
 8009278:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2201      	movs	r2, #1
 800927e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800928a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800928e:	4618      	mov	r0, r3
 8009290:	3730      	adds	r7, #48	@ 0x30
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009296:	b480      	push	{r7}
 8009298:	b083      	sub	sp, #12
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80092a4:	b2db      	uxtb	r3, r3
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	370c      	adds	r7, #12
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b084      	sub	sp, #16
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	60f8      	str	r0, [r7, #12]
 80092ba:	60b9      	str	r1, [r7, #8]
 80092bc:	603b      	str	r3, [r7, #0]
 80092be:	4613      	mov	r3, r2
 80092c0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80092c2:	e04c      	b.n	800935e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ca:	d048      	beq.n	800935e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80092cc:	f7fc f924 	bl	8005518 <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d902      	bls.n	80092e2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d13d      	bne.n	800935e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	685a      	ldr	r2, [r3, #4]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80092f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092fa:	d111      	bne.n	8009320 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009304:	d004      	beq.n	8009310 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800930e:	d107      	bne.n	8009320 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800931e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009328:	d10f      	bne.n	800934a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009338:	601a      	str	r2, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009348:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	e00f      	b.n	800937e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	689a      	ldr	r2, [r3, #8]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	4013      	ands	r3, r2
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	429a      	cmp	r2, r3
 800936c:	bf0c      	ite	eq
 800936e:	2301      	moveq	r3, #1
 8009370:	2300      	movne	r3, #0
 8009372:	b2db      	uxtb	r3, r3
 8009374:	461a      	mov	r2, r3
 8009376:	79fb      	ldrb	r3, [r7, #7]
 8009378:	429a      	cmp	r2, r3
 800937a:	d1a3      	bne.n	80092c4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b086      	sub	sp, #24
 800938a:	af02      	add	r7, sp, #8
 800938c:	60f8      	str	r0, [r7, #12]
 800938e:	60b9      	str	r1, [r7, #8]
 8009390:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800939a:	d111      	bne.n	80093c0 <SPI_EndRxTransaction+0x3a>
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093a4:	d004      	beq.n	80093b0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093ae:	d107      	bne.n	80093c0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093be:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093c8:	d12a      	bne.n	8009420 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093d2:	d012      	beq.n	80093fa <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	2200      	movs	r2, #0
 80093dc:	2180      	movs	r1, #128	@ 0x80
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f7ff ff67 	bl	80092b2 <SPI_WaitFlagStateUntilTimeout>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d02d      	beq.n	8009446 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ee:	f043 0220 	orr.w	r2, r3, #32
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e026      	b.n	8009448 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	2200      	movs	r2, #0
 8009402:	2101      	movs	r1, #1
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f7ff ff54 	bl	80092b2 <SPI_WaitFlagStateUntilTimeout>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d01a      	beq.n	8009446 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009414:	f043 0220 	orr.w	r2, r3, #32
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800941c:	2303      	movs	r3, #3
 800941e:	e013      	b.n	8009448 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	9300      	str	r3, [sp, #0]
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	2200      	movs	r2, #0
 8009428:	2101      	movs	r1, #1
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f7ff ff41 	bl	80092b2 <SPI_WaitFlagStateUntilTimeout>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d007      	beq.n	8009446 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800943a:	f043 0220 	orr.w	r2, r3, #32
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009442:	2303      	movs	r3, #3
 8009444:	e000      	b.n	8009448 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b088      	sub	sp, #32
 8009454:	af02      	add	r7, sp, #8
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800945c:	4b1b      	ldr	r3, [pc, #108]	@ (80094cc <SPI_EndRxTxTransaction+0x7c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a1b      	ldr	r2, [pc, #108]	@ (80094d0 <SPI_EndRxTxTransaction+0x80>)
 8009462:	fba2 2303 	umull	r2, r3, r2, r3
 8009466:	0d5b      	lsrs	r3, r3, #21
 8009468:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800946c:	fb02 f303 	mul.w	r3, r2, r3
 8009470:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800947a:	d112      	bne.n	80094a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	2200      	movs	r2, #0
 8009484:	2180      	movs	r1, #128	@ 0x80
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f7ff ff13 	bl	80092b2 <SPI_WaitFlagStateUntilTimeout>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d016      	beq.n	80094c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009496:	f043 0220 	orr.w	r2, r3, #32
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800949e:	2303      	movs	r3, #3
 80094a0:	e00f      	b.n	80094c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00a      	beq.n	80094be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	3b01      	subs	r3, #1
 80094ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094b8:	2b80      	cmp	r3, #128	@ 0x80
 80094ba:	d0f2      	beq.n	80094a2 <SPI_EndRxTxTransaction+0x52>
 80094bc:	e000      	b.n	80094c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80094be:	bf00      	nop
  }

  return HAL_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3718      	adds	r7, #24
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	20000104 	.word	0x20000104
 80094d0:	165e9f81 	.word	0x165e9f81

080094d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d101      	bne.n	80094e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e03f      	b.n	8009566 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d106      	bne.n	8009500 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7f9 fd34 	bl	8002f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2224      	movs	r2, #36	@ 0x24
 8009504:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68da      	ldr	r2, [r3, #12]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009516:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f90b 	bl	8009734 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	691a      	ldr	r2, [r3, #16]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800952c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	695a      	ldr	r2, [r3, #20]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800953c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68da      	ldr	r2, [r3, #12]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800954c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2220      	movs	r2, #32
 8009558:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2220      	movs	r2, #32
 8009560:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b088      	sub	sp, #32
 8009572:	af02      	add	r7, sp, #8
 8009574:	60f8      	str	r0, [r7, #12]
 8009576:	60b9      	str	r1, [r7, #8]
 8009578:	603b      	str	r3, [r7, #0]
 800957a:	4613      	mov	r3, r2
 800957c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800957e:	2300      	movs	r3, #0
 8009580:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8009588:	b2db      	uxtb	r3, r3
 800958a:	2b20      	cmp	r3, #32
 800958c:	f040 8083 	bne.w	8009696 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d002      	beq.n	800959c <HAL_UART_Transmit+0x2e>
 8009596:	88fb      	ldrh	r3, [r7, #6]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d101      	bne.n	80095a0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e07b      	b.n	8009698 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d101      	bne.n	80095ae <HAL_UART_Transmit+0x40>
 80095aa:	2302      	movs	r3, #2
 80095ac:	e074      	b.n	8009698 <HAL_UART_Transmit+0x12a>
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2200      	movs	r2, #0
 80095ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2221      	movs	r2, #33	@ 0x21
 80095c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80095c4:	f7fb ffa8 	bl	8005518 <HAL_GetTick>
 80095c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	88fa      	ldrh	r2, [r7, #6]
 80095ce:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	88fa      	ldrh	r2, [r7, #6]
 80095d4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 80095de:	e042      	b.n	8009666 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	3b01      	subs	r3, #1
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095f6:	d122      	bne.n	800963e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	2200      	movs	r2, #0
 8009600:	2180      	movs	r1, #128	@ 0x80
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f000 f84c 	bl	80096a0 <UART_WaitOnFlagUntilTimeout>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800960e:	2303      	movs	r3, #3
 8009610:	e042      	b.n	8009698 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	461a      	mov	r2, r3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009624:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d103      	bne.n	8009636 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	3302      	adds	r3, #2
 8009632:	60bb      	str	r3, [r7, #8]
 8009634:	e017      	b.n	8009666 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	3301      	adds	r3, #1
 800963a:	60bb      	str	r3, [r7, #8]
 800963c:	e013      	b.n	8009666 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	2200      	movs	r2, #0
 8009646:	2180      	movs	r1, #128	@ 0x80
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 f829 	bl	80096a0 <UART_WaitOnFlagUntilTimeout>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8009654:	2303      	movs	r3, #3
 8009656:	e01f      	b.n	8009698 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	1c5a      	adds	r2, r3, #1
 800965c:	60ba      	str	r2, [r7, #8]
 800965e:	781a      	ldrb	r2, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800966a:	b29b      	uxth	r3, r3
 800966c:	2b00      	cmp	r3, #0
 800966e:	d1b7      	bne.n	80095e0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	2200      	movs	r2, #0
 8009678:	2140      	movs	r1, #64	@ 0x40
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f000 f810 	bl	80096a0 <UART_WaitOnFlagUntilTimeout>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8009686:	2303      	movs	r3, #3
 8009688:	e006      	b.n	8009698 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2220      	movs	r2, #32
 800968e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 8009692:	2300      	movs	r3, #0
 8009694:	e000      	b.n	8009698 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8009696:	2302      	movs	r3, #2
  }
}
 8009698:	4618      	mov	r0, r3
 800969a:	3718      	adds	r7, #24
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	603b      	str	r3, [r7, #0]
 80096ac:	4613      	mov	r3, r2
 80096ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096b0:	e02c      	b.n	800970c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b8:	d028      	beq.n	800970c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d007      	beq.n	80096d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80096c0:	f7fb ff2a 	bl	8005518 <HAL_GetTick>
 80096c4:	4602      	mov	r2, r0
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	69ba      	ldr	r2, [r7, #24]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d21d      	bcs.n	800970c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68da      	ldr	r2, [r3, #12]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80096de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	695a      	ldr	r2, [r3, #20]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f022 0201 	bic.w	r2, r2, #1
 80096ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2220      	movs	r2, #32
 80096f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2220      	movs	r2, #32
 80096fc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8009708:	2303      	movs	r3, #3
 800970a:	e00f      	b.n	800972c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	4013      	ands	r3, r2
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	429a      	cmp	r2, r3
 800971a:	bf0c      	ite	eq
 800971c:	2301      	moveq	r3, #1
 800971e:	2300      	movne	r3, #0
 8009720:	b2db      	uxtb	r3, r3
 8009722:	461a      	mov	r2, r3
 8009724:	79fb      	ldrb	r3, [r7, #7]
 8009726:	429a      	cmp	r2, r3
 8009728:	d0c3      	beq.n	80096b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009738:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800973c:	af00      	add	r7, sp, #0
 800973e:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009742:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800974e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009752:	68d9      	ldr	r1, [r3, #12]
 8009754:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	ea40 0301 	orr.w	r3, r0, r1
 800975e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009760:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009764:	689a      	ldr	r2, [r3, #8]
 8009766:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	431a      	orrs	r2, r3
 800976e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009772:	695b      	ldr	r3, [r3, #20]
 8009774:	431a      	orrs	r2, r3
 8009776:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800977a:	69db      	ldr	r3, [r3, #28]
 800977c:	4313      	orrs	r3, r2
 800977e:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 8009782:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800978e:	f021 010c 	bic.w	r1, r1, #12
 8009792:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800979c:	430b      	orrs	r3, r1
 800979e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80097a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	695b      	ldr	r3, [r3, #20]
 80097a8:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80097ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80097b0:	6999      	ldr	r1, [r3, #24]
 80097b2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	ea40 0301 	orr.w	r3, r0, r1
 80097bc:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097c8:	f040 824a 	bne.w	8009c60 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	4b96      	ldr	r3, [pc, #600]	@ (8009a2c <UART_SetConfig+0x2f8>)
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d006      	beq.n	80097e6 <UART_SetConfig+0xb2>
 80097d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	4b94      	ldr	r3, [pc, #592]	@ (8009a30 <UART_SetConfig+0x2fc>)
 80097e0:	429a      	cmp	r2, r3
 80097e2:	f040 8129 	bne.w	8009a38 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80097e6:	f7fe fd6f 	bl	80082c8 <HAL_RCC_GetPCLK2Freq>
 80097ea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80097ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80097f2:	2200      	movs	r2, #0
 80097f4:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 80097f8:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 80097fc:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8009800:	4622      	mov	r2, r4
 8009802:	462b      	mov	r3, r5
 8009804:	1891      	adds	r1, r2, r2
 8009806:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800980a:	415b      	adcs	r3, r3
 800980c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009810:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8009814:	4621      	mov	r1, r4
 8009816:	1851      	adds	r1, r2, r1
 8009818:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 800981c:	4629      	mov	r1, r5
 800981e:	414b      	adcs	r3, r1
 8009820:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009824:	f04f 0200 	mov.w	r2, #0
 8009828:	f04f 0300 	mov.w	r3, #0
 800982c:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 8009830:	4649      	mov	r1, r9
 8009832:	00cb      	lsls	r3, r1, #3
 8009834:	4641      	mov	r1, r8
 8009836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800983a:	4641      	mov	r1, r8
 800983c:	00ca      	lsls	r2, r1, #3
 800983e:	4610      	mov	r0, r2
 8009840:	4619      	mov	r1, r3
 8009842:	4603      	mov	r3, r0
 8009844:	4622      	mov	r2, r4
 8009846:	189b      	adds	r3, r3, r2
 8009848:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800984c:	462b      	mov	r3, r5
 800984e:	460a      	mov	r2, r1
 8009850:	eb42 0303 	adc.w	r3, r2, r3
 8009854:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8009858:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8009864:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8009868:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 800986c:	460b      	mov	r3, r1
 800986e:	18db      	adds	r3, r3, r3
 8009870:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009874:	4613      	mov	r3, r2
 8009876:	eb42 0303 	adc.w	r3, r2, r3
 800987a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800987e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8009882:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8009886:	f7f7 f9ff 	bl	8000c88 <__aeabi_uldivmod>
 800988a:	4602      	mov	r2, r0
 800988c:	460b      	mov	r3, r1
 800988e:	4b69      	ldr	r3, [pc, #420]	@ (8009a34 <UART_SetConfig+0x300>)
 8009890:	fba3 2302 	umull	r2, r3, r3, r2
 8009894:	095b      	lsrs	r3, r3, #5
 8009896:	011c      	lsls	r4, r3, #4
 8009898:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800989c:	2200      	movs	r2, #0
 800989e:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 80098a2:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80098a6:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 80098aa:	4642      	mov	r2, r8
 80098ac:	464b      	mov	r3, r9
 80098ae:	1891      	adds	r1, r2, r2
 80098b0:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80098b4:	415b      	adcs	r3, r3
 80098b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80098ba:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80098be:	4641      	mov	r1, r8
 80098c0:	1851      	adds	r1, r2, r1
 80098c2:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80098c6:	4649      	mov	r1, r9
 80098c8:	414b      	adcs	r3, r1
 80098ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80098ce:	f04f 0200 	mov.w	r2, #0
 80098d2:	f04f 0300 	mov.w	r3, #0
 80098d6:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 80098da:	4659      	mov	r1, fp
 80098dc:	00cb      	lsls	r3, r1, #3
 80098de:	4651      	mov	r1, sl
 80098e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098e4:	4651      	mov	r1, sl
 80098e6:	00ca      	lsls	r2, r1, #3
 80098e8:	4610      	mov	r0, r2
 80098ea:	4619      	mov	r1, r3
 80098ec:	4603      	mov	r3, r0
 80098ee:	4642      	mov	r2, r8
 80098f0:	189b      	adds	r3, r3, r2
 80098f2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80098f6:	464b      	mov	r3, r9
 80098f8:	460a      	mov	r2, r1
 80098fa:	eb42 0303 	adc.w	r3, r2, r3
 80098fe:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8009902:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800990e:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8009912:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 8009916:	460b      	mov	r3, r1
 8009918:	18db      	adds	r3, r3, r3
 800991a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800991e:	4613      	mov	r3, r2
 8009920:	eb42 0303 	adc.w	r3, r2, r3
 8009924:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009928:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800992c:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8009930:	f7f7 f9aa 	bl	8000c88 <__aeabi_uldivmod>
 8009934:	4602      	mov	r2, r0
 8009936:	460b      	mov	r3, r1
 8009938:	4611      	mov	r1, r2
 800993a:	4b3e      	ldr	r3, [pc, #248]	@ (8009a34 <UART_SetConfig+0x300>)
 800993c:	fba3 2301 	umull	r2, r3, r3, r1
 8009940:	095b      	lsrs	r3, r3, #5
 8009942:	2264      	movs	r2, #100	@ 0x64
 8009944:	fb02 f303 	mul.w	r3, r2, r3
 8009948:	1acb      	subs	r3, r1, r3
 800994a:	00db      	lsls	r3, r3, #3
 800994c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009950:	4b38      	ldr	r3, [pc, #224]	@ (8009a34 <UART_SetConfig+0x300>)
 8009952:	fba3 2302 	umull	r2, r3, r3, r2
 8009956:	095b      	lsrs	r3, r3, #5
 8009958:	005b      	lsls	r3, r3, #1
 800995a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800995e:	441c      	add	r4, r3
 8009960:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009964:	2200      	movs	r2, #0
 8009966:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800996a:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 800996e:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8009972:	4642      	mov	r2, r8
 8009974:	464b      	mov	r3, r9
 8009976:	1891      	adds	r1, r2, r2
 8009978:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800997c:	415b      	adcs	r3, r3
 800997e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009982:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8009986:	4641      	mov	r1, r8
 8009988:	1851      	adds	r1, r2, r1
 800998a:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800998e:	4649      	mov	r1, r9
 8009990:	414b      	adcs	r3, r1
 8009992:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009996:	f04f 0200 	mov.w	r2, #0
 800999a:	f04f 0300 	mov.w	r3, #0
 800999e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 80099a2:	4659      	mov	r1, fp
 80099a4:	00cb      	lsls	r3, r1, #3
 80099a6:	4651      	mov	r1, sl
 80099a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099ac:	4651      	mov	r1, sl
 80099ae:	00ca      	lsls	r2, r1, #3
 80099b0:	4610      	mov	r0, r2
 80099b2:	4619      	mov	r1, r3
 80099b4:	4603      	mov	r3, r0
 80099b6:	4642      	mov	r2, r8
 80099b8:	189b      	adds	r3, r3, r2
 80099ba:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80099be:	464b      	mov	r3, r9
 80099c0:	460a      	mov	r2, r1
 80099c2:	eb42 0303 	adc.w	r3, r2, r3
 80099c6:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80099ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80099d6:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80099da:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 80099de:	460b      	mov	r3, r1
 80099e0:	18db      	adds	r3, r3, r3
 80099e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80099e6:	4613      	mov	r3, r2
 80099e8:	eb42 0303 	adc.w	r3, r2, r3
 80099ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80099f0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80099f4:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 80099f8:	f7f7 f946 	bl	8000c88 <__aeabi_uldivmod>
 80099fc:	4602      	mov	r2, r0
 80099fe:	460b      	mov	r3, r1
 8009a00:	4b0c      	ldr	r3, [pc, #48]	@ (8009a34 <UART_SetConfig+0x300>)
 8009a02:	fba3 1302 	umull	r1, r3, r3, r2
 8009a06:	095b      	lsrs	r3, r3, #5
 8009a08:	2164      	movs	r1, #100	@ 0x64
 8009a0a:	fb01 f303 	mul.w	r3, r1, r3
 8009a0e:	1ad3      	subs	r3, r2, r3
 8009a10:	00db      	lsls	r3, r3, #3
 8009a12:	3332      	adds	r3, #50	@ 0x32
 8009a14:	4a07      	ldr	r2, [pc, #28]	@ (8009a34 <UART_SetConfig+0x300>)
 8009a16:	fba2 2303 	umull	r2, r3, r2, r3
 8009a1a:	095b      	lsrs	r3, r3, #5
 8009a1c:	f003 0207 	and.w	r2, r3, #7
 8009a20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4422      	add	r2, r4
 8009a28:	609a      	str	r2, [r3, #8]
 8009a2a:	e34a      	b.n	800a0c2 <UART_SetConfig+0x98e>
 8009a2c:	40011000 	.word	0x40011000
 8009a30:	40011400 	.word	0x40011400
 8009a34:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a38:	f7fe fc32 	bl	80082a0 <HAL_RCC_GetPCLK1Freq>
 8009a3c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a40:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009a44:	2200      	movs	r2, #0
 8009a46:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8009a4a:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8009a4e:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 8009a52:	4622      	mov	r2, r4
 8009a54:	462b      	mov	r3, r5
 8009a56:	1891      	adds	r1, r2, r2
 8009a58:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8009a5c:	415b      	adcs	r3, r3
 8009a5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a62:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009a66:	4621      	mov	r1, r4
 8009a68:	eb12 0a01 	adds.w	sl, r2, r1
 8009a6c:	4629      	mov	r1, r5
 8009a6e:	eb43 0b01 	adc.w	fp, r3, r1
 8009a72:	f04f 0200 	mov.w	r2, #0
 8009a76:	f04f 0300 	mov.w	r3, #0
 8009a7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009a7e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009a82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a86:	4692      	mov	sl, r2
 8009a88:	469b      	mov	fp, r3
 8009a8a:	4623      	mov	r3, r4
 8009a8c:	eb1a 0303 	adds.w	r3, sl, r3
 8009a90:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8009a94:	462b      	mov	r3, r5
 8009a96:	eb4b 0303 	adc.w	r3, fp, r3
 8009a9a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8009a9e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8009aaa:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8009aae:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	18db      	adds	r3, r3, r3
 8009ab6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009aba:	4613      	mov	r3, r2
 8009abc:	eb42 0303 	adc.w	r3, r2, r3
 8009ac0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ac4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8009ac8:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8009acc:	f7f7 f8dc 	bl	8000c88 <__aeabi_uldivmod>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	4b61      	ldr	r3, [pc, #388]	@ (8009c5c <UART_SetConfig+0x528>)
 8009ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8009ada:	095b      	lsrs	r3, r3, #5
 8009adc:	011c      	lsls	r4, r3, #4
 8009ade:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8009ae8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8009aec:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 8009af0:	4642      	mov	r2, r8
 8009af2:	464b      	mov	r3, r9
 8009af4:	1891      	adds	r1, r2, r2
 8009af6:	67b9      	str	r1, [r7, #120]	@ 0x78
 8009af8:	415b      	adcs	r3, r3
 8009afa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009afc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8009b00:	4641      	mov	r1, r8
 8009b02:	1851      	adds	r1, r2, r1
 8009b04:	6739      	str	r1, [r7, #112]	@ 0x70
 8009b06:	4649      	mov	r1, r9
 8009b08:	414b      	adcs	r3, r1
 8009b0a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009b0c:	f04f 0200 	mov.w	r2, #0
 8009b10:	f04f 0300 	mov.w	r3, #0
 8009b14:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 8009b18:	4659      	mov	r1, fp
 8009b1a:	00cb      	lsls	r3, r1, #3
 8009b1c:	4651      	mov	r1, sl
 8009b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b22:	4651      	mov	r1, sl
 8009b24:	00ca      	lsls	r2, r1, #3
 8009b26:	4610      	mov	r0, r2
 8009b28:	4619      	mov	r1, r3
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	4642      	mov	r2, r8
 8009b2e:	189b      	adds	r3, r3, r2
 8009b30:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8009b34:	464b      	mov	r3, r9
 8009b36:	460a      	mov	r2, r1
 8009b38:	eb42 0303 	adc.w	r3, r2, r3
 8009b3c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8009b40:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8009b4c:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8009b50:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 8009b54:	460b      	mov	r3, r1
 8009b56:	18db      	adds	r3, r3, r3
 8009b58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	eb42 0303 	adc.w	r3, r2, r3
 8009b60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b62:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009b66:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8009b6a:	f7f7 f88d 	bl	8000c88 <__aeabi_uldivmod>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	4611      	mov	r1, r2
 8009b74:	4b39      	ldr	r3, [pc, #228]	@ (8009c5c <UART_SetConfig+0x528>)
 8009b76:	fba3 2301 	umull	r2, r3, r3, r1
 8009b7a:	095b      	lsrs	r3, r3, #5
 8009b7c:	2264      	movs	r2, #100	@ 0x64
 8009b7e:	fb02 f303 	mul.w	r3, r2, r3
 8009b82:	1acb      	subs	r3, r1, r3
 8009b84:	00db      	lsls	r3, r3, #3
 8009b86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009b8a:	4b34      	ldr	r3, [pc, #208]	@ (8009c5c <UART_SetConfig+0x528>)
 8009b8c:	fba3 2302 	umull	r2, r3, r3, r2
 8009b90:	095b      	lsrs	r3, r3, #5
 8009b92:	005b      	lsls	r3, r3, #1
 8009b94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009b98:	441c      	add	r4, r3
 8009b9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8009ba4:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8009ba8:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 8009bac:	4642      	mov	r2, r8
 8009bae:	464b      	mov	r3, r9
 8009bb0:	1891      	adds	r1, r2, r2
 8009bb2:	6639      	str	r1, [r7, #96]	@ 0x60
 8009bb4:	415b      	adcs	r3, r3
 8009bb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8009bb8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009bbc:	4641      	mov	r1, r8
 8009bbe:	1851      	adds	r1, r2, r1
 8009bc0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009bc2:	4649      	mov	r1, r9
 8009bc4:	414b      	adcs	r3, r1
 8009bc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bc8:	f04f 0200 	mov.w	r2, #0
 8009bcc:	f04f 0300 	mov.w	r3, #0
 8009bd0:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8009bd4:	4659      	mov	r1, fp
 8009bd6:	00cb      	lsls	r3, r1, #3
 8009bd8:	4651      	mov	r1, sl
 8009bda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bde:	4651      	mov	r1, sl
 8009be0:	00ca      	lsls	r2, r1, #3
 8009be2:	4610      	mov	r0, r2
 8009be4:	4619      	mov	r1, r3
 8009be6:	4603      	mov	r3, r0
 8009be8:	4642      	mov	r2, r8
 8009bea:	189b      	adds	r3, r3, r2
 8009bec:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8009bf0:	464b      	mov	r3, r9
 8009bf2:	460a      	mov	r2, r1
 8009bf4:	eb42 0303 	adc.w	r3, r2, r3
 8009bf8:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8009bfc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8009c08:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8009c0c:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8009c10:	460b      	mov	r3, r1
 8009c12:	18db      	adds	r3, r3, r3
 8009c14:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c16:	4613      	mov	r3, r2
 8009c18:	eb42 0303 	adc.w	r3, r2, r3
 8009c1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c1e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009c22:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8009c26:	f7f7 f82f 	bl	8000c88 <__aeabi_uldivmod>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8009c5c <UART_SetConfig+0x528>)
 8009c30:	fba3 1302 	umull	r1, r3, r3, r2
 8009c34:	095b      	lsrs	r3, r3, #5
 8009c36:	2164      	movs	r1, #100	@ 0x64
 8009c38:	fb01 f303 	mul.w	r3, r1, r3
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	00db      	lsls	r3, r3, #3
 8009c40:	3332      	adds	r3, #50	@ 0x32
 8009c42:	4a06      	ldr	r2, [pc, #24]	@ (8009c5c <UART_SetConfig+0x528>)
 8009c44:	fba2 2303 	umull	r2, r3, r2, r3
 8009c48:	095b      	lsrs	r3, r3, #5
 8009c4a:	f003 0207 	and.w	r2, r3, #7
 8009c4e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4422      	add	r2, r4
 8009c56:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009c58:	e233      	b.n	800a0c2 <UART_SetConfig+0x98e>
 8009c5a:	bf00      	nop
 8009c5c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	4b8d      	ldr	r3, [pc, #564]	@ (8009e9c <UART_SetConfig+0x768>)
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d006      	beq.n	8009c7a <UART_SetConfig+0x546>
 8009c6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	4b8b      	ldr	r3, [pc, #556]	@ (8009ea0 <UART_SetConfig+0x76c>)
 8009c74:	429a      	cmp	r2, r3
 8009c76:	f040 8117 	bne.w	8009ea8 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c7a:	f7fe fb25 	bl	80082c8 <HAL_RCC_GetPCLK2Freq>
 8009c7e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c82:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009c86:	2200      	movs	r2, #0
 8009c88:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8009c8c:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8009c90:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8009c94:	4622      	mov	r2, r4
 8009c96:	462b      	mov	r3, r5
 8009c98:	1891      	adds	r1, r2, r2
 8009c9a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009c9c:	415b      	adcs	r3, r3
 8009c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ca0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009ca4:	4621      	mov	r1, r4
 8009ca6:	eb12 0801 	adds.w	r8, r2, r1
 8009caa:	4629      	mov	r1, r5
 8009cac:	eb43 0901 	adc.w	r9, r3, r1
 8009cb0:	f04f 0200 	mov.w	r2, #0
 8009cb4:	f04f 0300 	mov.w	r3, #0
 8009cb8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009cbc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009cc0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009cc4:	4690      	mov	r8, r2
 8009cc6:	4699      	mov	r9, r3
 8009cc8:	4623      	mov	r3, r4
 8009cca:	eb18 0303 	adds.w	r3, r8, r3
 8009cce:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8009cd2:	462b      	mov	r3, r5
 8009cd4:	eb49 0303 	adc.w	r3, r9, r3
 8009cd8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8009cdc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8009ce8:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8009cec:	f04f 0200 	mov.w	r2, #0
 8009cf0:	f04f 0300 	mov.w	r3, #0
 8009cf4:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8009cf8:	4629      	mov	r1, r5
 8009cfa:	008b      	lsls	r3, r1, #2
 8009cfc:	4621      	mov	r1, r4
 8009cfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d02:	4621      	mov	r1, r4
 8009d04:	008a      	lsls	r2, r1, #2
 8009d06:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8009d0a:	f7f6 ffbd 	bl	8000c88 <__aeabi_uldivmod>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	460b      	mov	r3, r1
 8009d12:	4b64      	ldr	r3, [pc, #400]	@ (8009ea4 <UART_SetConfig+0x770>)
 8009d14:	fba3 2302 	umull	r2, r3, r3, r2
 8009d18:	095b      	lsrs	r3, r3, #5
 8009d1a:	011c      	lsls	r4, r3, #4
 8009d1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009d20:	2200      	movs	r2, #0
 8009d22:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8009d26:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8009d2a:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 8009d2e:	4642      	mov	r2, r8
 8009d30:	464b      	mov	r3, r9
 8009d32:	1891      	adds	r1, r2, r2
 8009d34:	6439      	str	r1, [r7, #64]	@ 0x40
 8009d36:	415b      	adcs	r3, r3
 8009d38:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009d3e:	4641      	mov	r1, r8
 8009d40:	1851      	adds	r1, r2, r1
 8009d42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009d44:	4649      	mov	r1, r9
 8009d46:	414b      	adcs	r3, r1
 8009d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d4a:	f04f 0200 	mov.w	r2, #0
 8009d4e:	f04f 0300 	mov.w	r3, #0
 8009d52:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8009d56:	4659      	mov	r1, fp
 8009d58:	00cb      	lsls	r3, r1, #3
 8009d5a:	4651      	mov	r1, sl
 8009d5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d60:	4651      	mov	r1, sl
 8009d62:	00ca      	lsls	r2, r1, #3
 8009d64:	4610      	mov	r0, r2
 8009d66:	4619      	mov	r1, r3
 8009d68:	4603      	mov	r3, r0
 8009d6a:	4642      	mov	r2, r8
 8009d6c:	189b      	adds	r3, r3, r2
 8009d6e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8009d72:	464b      	mov	r3, r9
 8009d74:	460a      	mov	r2, r1
 8009d76:	eb42 0303 	adc.w	r3, r2, r3
 8009d7a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8009d7e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8009d8a:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8009d8e:	f04f 0200 	mov.w	r2, #0
 8009d92:	f04f 0300 	mov.w	r3, #0
 8009d96:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8009d9a:	4649      	mov	r1, r9
 8009d9c:	008b      	lsls	r3, r1, #2
 8009d9e:	4641      	mov	r1, r8
 8009da0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009da4:	4641      	mov	r1, r8
 8009da6:	008a      	lsls	r2, r1, #2
 8009da8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8009dac:	f7f6 ff6c 	bl	8000c88 <__aeabi_uldivmod>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	4611      	mov	r1, r2
 8009db6:	4b3b      	ldr	r3, [pc, #236]	@ (8009ea4 <UART_SetConfig+0x770>)
 8009db8:	fba3 2301 	umull	r2, r3, r3, r1
 8009dbc:	095b      	lsrs	r3, r3, #5
 8009dbe:	2264      	movs	r2, #100	@ 0x64
 8009dc0:	fb02 f303 	mul.w	r3, r2, r3
 8009dc4:	1acb      	subs	r3, r1, r3
 8009dc6:	011b      	lsls	r3, r3, #4
 8009dc8:	3332      	adds	r3, #50	@ 0x32
 8009dca:	4a36      	ldr	r2, [pc, #216]	@ (8009ea4 <UART_SetConfig+0x770>)
 8009dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8009dd0:	095b      	lsrs	r3, r3, #5
 8009dd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009dd6:	441c      	add	r4, r3
 8009dd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009de2:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8009de6:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 8009dea:	4642      	mov	r2, r8
 8009dec:	464b      	mov	r3, r9
 8009dee:	1891      	adds	r1, r2, r2
 8009df0:	6339      	str	r1, [r7, #48]	@ 0x30
 8009df2:	415b      	adcs	r3, r3
 8009df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009df6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8009dfa:	4641      	mov	r1, r8
 8009dfc:	1851      	adds	r1, r2, r1
 8009dfe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009e00:	4649      	mov	r1, r9
 8009e02:	414b      	adcs	r3, r1
 8009e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e06:	f04f 0200 	mov.w	r2, #0
 8009e0a:	f04f 0300 	mov.w	r3, #0
 8009e0e:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8009e12:	4659      	mov	r1, fp
 8009e14:	00cb      	lsls	r3, r1, #3
 8009e16:	4651      	mov	r1, sl
 8009e18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e1c:	4651      	mov	r1, sl
 8009e1e:	00ca      	lsls	r2, r1, #3
 8009e20:	4610      	mov	r0, r2
 8009e22:	4619      	mov	r1, r3
 8009e24:	4603      	mov	r3, r0
 8009e26:	4642      	mov	r2, r8
 8009e28:	189b      	adds	r3, r3, r2
 8009e2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8009e2e:	464b      	mov	r3, r9
 8009e30:	460a      	mov	r2, r1
 8009e32:	eb42 0303 	adc.w	r3, r2, r3
 8009e36:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8009e3a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8009e46:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8009e4a:	f04f 0200 	mov.w	r2, #0
 8009e4e:	f04f 0300 	mov.w	r3, #0
 8009e52:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 8009e56:	4649      	mov	r1, r9
 8009e58:	008b      	lsls	r3, r1, #2
 8009e5a:	4641      	mov	r1, r8
 8009e5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e60:	4641      	mov	r1, r8
 8009e62:	008a      	lsls	r2, r1, #2
 8009e64:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8009e68:	f7f6 ff0e 	bl	8000c88 <__aeabi_uldivmod>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	460b      	mov	r3, r1
 8009e70:	4b0c      	ldr	r3, [pc, #48]	@ (8009ea4 <UART_SetConfig+0x770>)
 8009e72:	fba3 1302 	umull	r1, r3, r3, r2
 8009e76:	095b      	lsrs	r3, r3, #5
 8009e78:	2164      	movs	r1, #100	@ 0x64
 8009e7a:	fb01 f303 	mul.w	r3, r1, r3
 8009e7e:	1ad3      	subs	r3, r2, r3
 8009e80:	011b      	lsls	r3, r3, #4
 8009e82:	3332      	adds	r3, #50	@ 0x32
 8009e84:	4a07      	ldr	r2, [pc, #28]	@ (8009ea4 <UART_SetConfig+0x770>)
 8009e86:	fba2 2303 	umull	r2, r3, r2, r3
 8009e8a:	095b      	lsrs	r3, r3, #5
 8009e8c:	f003 020f 	and.w	r2, r3, #15
 8009e90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4422      	add	r2, r4
 8009e98:	609a      	str	r2, [r3, #8]
 8009e9a:	e112      	b.n	800a0c2 <UART_SetConfig+0x98e>
 8009e9c:	40011000 	.word	0x40011000
 8009ea0:	40011400 	.word	0x40011400
 8009ea4:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ea8:	f7fe f9fa 	bl	80082a0 <HAL_RCC_GetPCLK1Freq>
 8009eac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009eb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8009eba:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8009ebe:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 8009ec2:	4642      	mov	r2, r8
 8009ec4:	464b      	mov	r3, r9
 8009ec6:	1891      	adds	r1, r2, r2
 8009ec8:	6239      	str	r1, [r7, #32]
 8009eca:	415b      	adcs	r3, r3
 8009ecc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ece:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009ed2:	4641      	mov	r1, r8
 8009ed4:	1854      	adds	r4, r2, r1
 8009ed6:	4649      	mov	r1, r9
 8009ed8:	eb43 0501 	adc.w	r5, r3, r1
 8009edc:	f04f 0200 	mov.w	r2, #0
 8009ee0:	f04f 0300 	mov.w	r3, #0
 8009ee4:	00eb      	lsls	r3, r5, #3
 8009ee6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009eea:	00e2      	lsls	r2, r4, #3
 8009eec:	4614      	mov	r4, r2
 8009eee:	461d      	mov	r5, r3
 8009ef0:	4643      	mov	r3, r8
 8009ef2:	18e3      	adds	r3, r4, r3
 8009ef4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8009ef8:	464b      	mov	r3, r9
 8009efa:	eb45 0303 	adc.w	r3, r5, r3
 8009efe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8009f02:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009f0e:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8009f12:	f04f 0200 	mov.w	r2, #0
 8009f16:	f04f 0300 	mov.w	r3, #0
 8009f1a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8009f1e:	4629      	mov	r1, r5
 8009f20:	008b      	lsls	r3, r1, #2
 8009f22:	4621      	mov	r1, r4
 8009f24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f28:	4621      	mov	r1, r4
 8009f2a:	008a      	lsls	r2, r1, #2
 8009f2c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8009f30:	f7f6 feaa 	bl	8000c88 <__aeabi_uldivmod>
 8009f34:	4602      	mov	r2, r0
 8009f36:	460b      	mov	r3, r1
 8009f38:	4b65      	ldr	r3, [pc, #404]	@ (800a0d0 <UART_SetConfig+0x99c>)
 8009f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8009f3e:	095b      	lsrs	r3, r3, #5
 8009f40:	011c      	lsls	r4, r3, #4
 8009f42:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009f46:	2200      	movs	r2, #0
 8009f48:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009f4c:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8009f50:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8009f54:	4642      	mov	r2, r8
 8009f56:	464b      	mov	r3, r9
 8009f58:	1891      	adds	r1, r2, r2
 8009f5a:	61b9      	str	r1, [r7, #24]
 8009f5c:	415b      	adcs	r3, r3
 8009f5e:	61fb      	str	r3, [r7, #28]
 8009f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f64:	4641      	mov	r1, r8
 8009f66:	1851      	adds	r1, r2, r1
 8009f68:	6139      	str	r1, [r7, #16]
 8009f6a:	4649      	mov	r1, r9
 8009f6c:	414b      	adcs	r3, r1
 8009f6e:	617b      	str	r3, [r7, #20]
 8009f70:	f04f 0200 	mov.w	r2, #0
 8009f74:	f04f 0300 	mov.w	r3, #0
 8009f78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f7c:	4659      	mov	r1, fp
 8009f7e:	00cb      	lsls	r3, r1, #3
 8009f80:	4651      	mov	r1, sl
 8009f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f86:	4651      	mov	r1, sl
 8009f88:	00ca      	lsls	r2, r1, #3
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	4603      	mov	r3, r0
 8009f90:	4642      	mov	r2, r8
 8009f92:	189b      	adds	r3, r3, r2
 8009f94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009f98:	464b      	mov	r3, r9
 8009f9a:	460a      	mov	r2, r1
 8009f9c:	eb42 0303 	adc.w	r3, r2, r3
 8009fa0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009fa4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009fb0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8009fb4:	f04f 0200 	mov.w	r2, #0
 8009fb8:	f04f 0300 	mov.w	r3, #0
 8009fbc:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8009fc0:	4649      	mov	r1, r9
 8009fc2:	008b      	lsls	r3, r1, #2
 8009fc4:	4641      	mov	r1, r8
 8009fc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fca:	4641      	mov	r1, r8
 8009fcc:	008a      	lsls	r2, r1, #2
 8009fce:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8009fd2:	f7f6 fe59 	bl	8000c88 <__aeabi_uldivmod>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	460b      	mov	r3, r1
 8009fda:	4611      	mov	r1, r2
 8009fdc:	4b3c      	ldr	r3, [pc, #240]	@ (800a0d0 <UART_SetConfig+0x99c>)
 8009fde:	fba3 2301 	umull	r2, r3, r3, r1
 8009fe2:	095b      	lsrs	r3, r3, #5
 8009fe4:	2264      	movs	r2, #100	@ 0x64
 8009fe6:	fb02 f303 	mul.w	r3, r2, r3
 8009fea:	1acb      	subs	r3, r1, r3
 8009fec:	011b      	lsls	r3, r3, #4
 8009fee:	3332      	adds	r3, #50	@ 0x32
 8009ff0:	4a37      	ldr	r2, [pc, #220]	@ (800a0d0 <UART_SetConfig+0x99c>)
 8009ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ff6:	095b      	lsrs	r3, r3, #5
 8009ff8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ffc:	441c      	add	r4, r3
 8009ffe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800a002:	2200      	movs	r2, #0
 800a004:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a008:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a00c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800a010:	4642      	mov	r2, r8
 800a012:	464b      	mov	r3, r9
 800a014:	1891      	adds	r1, r2, r2
 800a016:	60b9      	str	r1, [r7, #8]
 800a018:	415b      	adcs	r3, r3
 800a01a:	60fb      	str	r3, [r7, #12]
 800a01c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a020:	4641      	mov	r1, r8
 800a022:	1851      	adds	r1, r2, r1
 800a024:	6039      	str	r1, [r7, #0]
 800a026:	4649      	mov	r1, r9
 800a028:	414b      	adcs	r3, r1
 800a02a:	607b      	str	r3, [r7, #4]
 800a02c:	f04f 0200 	mov.w	r2, #0
 800a030:	f04f 0300 	mov.w	r3, #0
 800a034:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a038:	4659      	mov	r1, fp
 800a03a:	00cb      	lsls	r3, r1, #3
 800a03c:	4651      	mov	r1, sl
 800a03e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a042:	4651      	mov	r1, sl
 800a044:	00ca      	lsls	r2, r1, #3
 800a046:	4610      	mov	r0, r2
 800a048:	4619      	mov	r1, r3
 800a04a:	4603      	mov	r3, r0
 800a04c:	4642      	mov	r2, r8
 800a04e:	189b      	adds	r3, r3, r2
 800a050:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a054:	464b      	mov	r3, r9
 800a056:	460a      	mov	r2, r1
 800a058:	eb42 0303 	adc.w	r3, r2, r3
 800a05c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a060:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a06c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a070:	f04f 0200 	mov.w	r2, #0
 800a074:	f04f 0300 	mov.w	r3, #0
 800a078:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800a07c:	4649      	mov	r1, r9
 800a07e:	008b      	lsls	r3, r1, #2
 800a080:	4641      	mov	r1, r8
 800a082:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a086:	4641      	mov	r1, r8
 800a088:	008a      	lsls	r2, r1, #2
 800a08a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a08e:	f7f6 fdfb 	bl	8000c88 <__aeabi_uldivmod>
 800a092:	4602      	mov	r2, r0
 800a094:	460b      	mov	r3, r1
 800a096:	4b0e      	ldr	r3, [pc, #56]	@ (800a0d0 <UART_SetConfig+0x99c>)
 800a098:	fba3 1302 	umull	r1, r3, r3, r2
 800a09c:	095b      	lsrs	r3, r3, #5
 800a09e:	2164      	movs	r1, #100	@ 0x64
 800a0a0:	fb01 f303 	mul.w	r3, r1, r3
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	011b      	lsls	r3, r3, #4
 800a0a8:	3332      	adds	r3, #50	@ 0x32
 800a0aa:	4a09      	ldr	r2, [pc, #36]	@ (800a0d0 <UART_SetConfig+0x99c>)
 800a0ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b0:	095b      	lsrs	r3, r3, #5
 800a0b2:	f003 020f 	and.w	r2, r3, #15
 800a0b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4422      	add	r2, r4
 800a0be:	609a      	str	r2, [r3, #8]
}
 800a0c0:	e7ff      	b.n	800a0c2 <UART_SetConfig+0x98e>
 800a0c2:	bf00      	nop
 800a0c4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0ce:	bf00      	nop
 800a0d0:	51eb851f 	.word	0x51eb851f

0800a0d4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d029      	beq.n	800a142 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a0fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a0fe:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a108:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800a10e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800a114:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800a11a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800a120:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800a126:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800a12c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                                               Init->ReadBurst          |\
 800a132:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a134:	68fa      	ldr	r2, [r7, #12]
 800a136:	4313      	orrs	r3, r2
 800a138:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	601a      	str	r2, [r3, #0]
 800a140:	e034      	b.n	800a1ac <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a14e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a158:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 800a15e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	4313      	orrs	r3, r2
 800a164:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a172:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a176:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a180:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800a186:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800a18c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800a192:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800a198:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3714      	adds	r7, #20
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a1ba:	b480      	push	{r7}
 800a1bc:	b087      	sub	sp, #28
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	60f8      	str	r0, [r7, #12]
 800a1c2:	60b9      	str	r1, [r7, #8]
 800a1c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d02e      	beq.n	800a232 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a1e0:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a1f0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a1fa:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	3b01      	subs	r3, #1
 800a202:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a204:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	3b01      	subs	r3, #1
 800a20c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a20e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	3b01      	subs	r3, #1
 800a216:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a218:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	3b01      	subs	r3, #1
 800a220:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a222:	4313      	orrs	r3, r2
 800a224:	697a      	ldr	r2, [r7, #20]
 800a226:	4313      	orrs	r3, r2
 800a228:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	697a      	ldr	r2, [r7, #20]
 800a22e:	609a      	str	r2, [r3, #8]
 800a230:	e03b      	b.n	800a2aa <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a23e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a242:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	3b01      	subs	r3, #1
 800a24a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	695b      	ldr	r3, [r3, #20]
 800a250:	3b01      	subs	r3, #1
 800a252:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a254:	4313      	orrs	r3, r2
 800a256:	697a      	ldr	r2, [r7, #20]
 800a258:	4313      	orrs	r3, r2
 800a25a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a268:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	3b01      	subs	r3, #1
 800a276:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a278:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	3b01      	subs	r3, #1
 800a280:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a282:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	3b01      	subs	r3, #1
 800a28a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a28c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	699b      	ldr	r3, [r3, #24]
 800a292:	3b01      	subs	r3, #1
 800a294:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a296:	4313      	orrs	r3, r2
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	697a      	ldr	r2, [r7, #20]
 800a2a2:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	371c      	adds	r7, #28
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a2d4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a2de:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800a2f0:	f7fb f912 	bl	8005518 <HAL_GetTick>
 800a2f4:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a2f6:	e010      	b.n	800a31a <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2fe:	d00c      	beq.n	800a31a <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d007      	beq.n	800a316 <FMC_SDRAM_SendCommand+0x5e>
 800a306:	f7fb f907 	bl	8005518 <HAL_GetTick>
 800a30a:	4602      	mov	r2, r0
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	1ad3      	subs	r3, r2, r3
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	429a      	cmp	r2, r3
 800a314:	d201      	bcs.n	800a31a <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800a316:	2303      	movs	r3, #3
 800a318:	e006      	b.n	800a328 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	699b      	ldr	r3, [r3, #24]
 800a31e:	f003 0320 	and.w	r3, r3, #32
 800a322:	2b20      	cmp	r3, #32
 800a324:	d0e8      	beq.n	800a2f8 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3718      	adds	r7, #24
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	695a      	ldr	r2, [r3, #20]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	005b      	lsls	r3, r3, #1
 800a342:	431a      	orrs	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
	...

0800a358 <arm_cfft_radix8by2_f32>:
 800a358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a35c:	ed2d 8b08 	vpush	{d8-d11}
 800a360:	4607      	mov	r7, r0
 800a362:	4608      	mov	r0, r1
 800a364:	f8b7 e000 	ldrh.w	lr, [r7]
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800a36e:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800a372:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800a376:	f000 80b0 	beq.w	800a4da <arm_cfft_radix8by2_f32+0x182>
 800a37a:	008b      	lsls	r3, r1, #2
 800a37c:	3310      	adds	r3, #16
 800a37e:	18c6      	adds	r6, r0, r3
 800a380:	3210      	adds	r2, #16
 800a382:	4443      	add	r3, r8
 800a384:	f100 0510 	add.w	r5, r0, #16
 800a388:	f108 0410 	add.w	r4, r8, #16
 800a38c:	ed54 1a04 	vldr	s3, [r4, #-16]
 800a390:	ed54 6a03 	vldr	s13, [r4, #-12]
 800a394:	ed13 4a04 	vldr	s8, [r3, #-16]
 800a398:	ed53 3a03 	vldr	s7, [r3, #-12]
 800a39c:	ed53 5a02 	vldr	s11, [r3, #-8]
 800a3a0:	ed13 5a01 	vldr	s10, [r3, #-4]
 800a3a4:	ed14 0a02 	vldr	s0, [r4, #-8]
 800a3a8:	ed54 7a01 	vldr	s15, [r4, #-4]
 800a3ac:	ed16 2a04 	vldr	s4, [r6, #-16]
 800a3b0:	ed56 2a03 	vldr	s5, [r6, #-12]
 800a3b4:	ed15 6a03 	vldr	s12, [r5, #-12]
 800a3b8:	ed15 7a01 	vldr	s14, [r5, #-4]
 800a3bc:	ed15 3a04 	vldr	s6, [r5, #-16]
 800a3c0:	ed56 0a02 	vldr	s1, [r6, #-8]
 800a3c4:	ed16 1a01 	vldr	s2, [r6, #-4]
 800a3c8:	ed55 4a02 	vldr	s9, [r5, #-8]
 800a3cc:	ee73 ba21 	vadd.f32	s23, s6, s3
 800a3d0:	ee36 ba26 	vadd.f32	s22, s12, s13
 800a3d4:	ee37 aa27 	vadd.f32	s20, s14, s15
 800a3d8:	ee72 9a04 	vadd.f32	s19, s4, s8
 800a3dc:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800a3e0:	ee31 8a05 	vadd.f32	s16, s2, s10
 800a3e4:	ee74 aa80 	vadd.f32	s21, s9, s0
 800a3e8:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800a3ec:	ed45 ba04 	vstr	s23, [r5, #-16]
 800a3f0:	ed05 ba03 	vstr	s22, [r5, #-12]
 800a3f4:	ed45 aa02 	vstr	s21, [r5, #-8]
 800a3f8:	ed05 aa01 	vstr	s20, [r5, #-4]
 800a3fc:	ed06 8a01 	vstr	s16, [r6, #-4]
 800a400:	ed46 9a04 	vstr	s19, [r6, #-16]
 800a404:	ed06 9a03 	vstr	s18, [r6, #-12]
 800a408:	ed46 8a02 	vstr	s17, [r6, #-8]
 800a40c:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a410:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800a414:	ed12 6a03 	vldr	s12, [r2, #-12]
 800a418:	ed52 2a04 	vldr	s5, [r2, #-16]
 800a41c:	ee33 3a61 	vsub.f32	s6, s6, s3
 800a420:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a424:	ee26 8a86 	vmul.f32	s16, s13, s12
 800a428:	ee24 2a06 	vmul.f32	s4, s8, s12
 800a42c:	ee63 1a22 	vmul.f32	s3, s6, s5
 800a430:	ee24 4a22 	vmul.f32	s8, s8, s5
 800a434:	ee23 3a06 	vmul.f32	s6, s6, s12
 800a438:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800a43c:	ee23 6a86 	vmul.f32	s12, s7, s12
 800a440:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800a444:	ee36 6a04 	vadd.f32	s12, s12, s8
 800a448:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800a44c:	ee72 3a63 	vsub.f32	s7, s4, s7
 800a450:	ee71 2a88 	vadd.f32	s5, s3, s16
 800a454:	ed44 6a03 	vstr	s13, [r4, #-12]
 800a458:	ed44 2a04 	vstr	s5, [r4, #-16]
 800a45c:	ed43 3a04 	vstr	s7, [r3, #-16]
 800a460:	ed03 6a03 	vstr	s12, [r3, #-12]
 800a464:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a468:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800a46c:	ed12 7a01 	vldr	s14, [r2, #-4]
 800a470:	ed52 5a02 	vldr	s11, [r2, #-8]
 800a474:	ee35 6a41 	vsub.f32	s12, s10, s2
 800a478:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800a47c:	ee67 3a87 	vmul.f32	s7, s15, s14
 800a480:	ee26 5a87 	vmul.f32	s10, s13, s14
 800a484:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800a488:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a48c:	ee64 4a87 	vmul.f32	s9, s9, s14
 800a490:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a494:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a498:	ee26 6a25 	vmul.f32	s12, s12, s11
 800a49c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a4a0:	ee74 5a23 	vadd.f32	s11, s8, s7
 800a4a4:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a4a8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a4ac:	f1be 0e01 	subs.w	lr, lr, #1
 800a4b0:	ed44 5a02 	vstr	s11, [r4, #-8]
 800a4b4:	f105 0510 	add.w	r5, r5, #16
 800a4b8:	ed44 7a01 	vstr	s15, [r4, #-4]
 800a4bc:	f106 0610 	add.w	r6, r6, #16
 800a4c0:	ed03 6a02 	vstr	s12, [r3, #-8]
 800a4c4:	ed03 7a01 	vstr	s14, [r3, #-4]
 800a4c8:	f102 0210 	add.w	r2, r2, #16
 800a4cc:	f104 0410 	add.w	r4, r4, #16
 800a4d0:	f103 0310 	add.w	r3, r3, #16
 800a4d4:	f47f af5a 	bne.w	800a38c <arm_cfft_radix8by2_f32+0x34>
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	b28c      	uxth	r4, r1
 800a4dc:	4621      	mov	r1, r4
 800a4de:	2302      	movs	r3, #2
 800a4e0:	f000 fb22 	bl	800ab28 <arm_radix8_butterfly_f32>
 800a4e4:	ecbd 8b08 	vpop	{d8-d11}
 800a4e8:	4621      	mov	r1, r4
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	4640      	mov	r0, r8
 800a4ee:	2302      	movs	r3, #2
 800a4f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f4:	f000 bb18 	b.w	800ab28 <arm_radix8_butterfly_f32>

0800a4f8 <arm_cfft_radix8by4_f32>:
 800a4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fc:	ed2d 8b0a 	vpush	{d8-d12}
 800a500:	8802      	ldrh	r2, [r0, #0]
 800a502:	ed91 6a00 	vldr	s12, [r1]
 800a506:	b08f      	sub	sp, #60	@ 0x3c
 800a508:	460f      	mov	r7, r1
 800a50a:	0852      	lsrs	r2, r2, #1
 800a50c:	6841      	ldr	r1, [r0, #4]
 800a50e:	900c      	str	r0, [sp, #48]	@ 0x30
 800a510:	0093      	lsls	r3, r2, #2
 800a512:	4638      	mov	r0, r7
 800a514:	4418      	add	r0, r3
 800a516:	4606      	mov	r6, r0
 800a518:	9009      	str	r0, [sp, #36]	@ 0x24
 800a51a:	4418      	add	r0, r3
 800a51c:	edd0 6a00 	vldr	s13, [r0]
 800a520:	ed96 4a00 	vldr	s8, [r6]
 800a524:	edd6 2a01 	vldr	s5, [r6, #4]
 800a528:	edd0 7a01 	vldr	s15, [r0, #4]
 800a52c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a52e:	ee76 5a26 	vadd.f32	s11, s12, s13
 800a532:	4604      	mov	r4, r0
 800a534:	4625      	mov	r5, r4
 800a536:	441c      	add	r4, r3
 800a538:	edd4 4a00 	vldr	s9, [r4]
 800a53c:	ed97 7a01 	vldr	s14, [r7, #4]
 800a540:	ed94 3a01 	vldr	s6, [r4, #4]
 800a544:	9401      	str	r4, [sp, #4]
 800a546:	ee35 5a84 	vadd.f32	s10, s11, s8
 800a54a:	4630      	mov	r0, r6
 800a54c:	ee35 5a24 	vadd.f32	s10, s10, s9
 800a550:	463e      	mov	r6, r7
 800a552:	ee15 ea10 	vmov	lr, s10
 800a556:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a55a:	f846 eb08 	str.w	lr, [r6], #8
 800a55e:	ee37 6a27 	vadd.f32	s12, s14, s15
 800a562:	ed90 5a01 	vldr	s10, [r0, #4]
 800a566:	9605      	str	r6, [sp, #20]
 800a568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a56c:	9e01      	ldr	r6, [sp, #4]
 800a56e:	9707      	str	r7, [sp, #28]
 800a570:	ee76 3aa2 	vadd.f32	s7, s13, s5
 800a574:	ed96 2a01 	vldr	s4, [r6, #4]
 800a578:	ee36 7a05 	vadd.f32	s14, s12, s10
 800a57c:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800a580:	ee37 5ac4 	vsub.f32	s10, s15, s8
 800a584:	ee77 7a84 	vadd.f32	s15, s15, s8
 800a588:	ee33 4ac3 	vsub.f32	s8, s7, s6
 800a58c:	4604      	mov	r4, r0
 800a58e:	46a3      	mov	fp, r4
 800a590:	ee37 7a02 	vadd.f32	s14, s14, s4
 800a594:	ee35 5a24 	vadd.f32	s10, s10, s9
 800a598:	ee14 8a10 	vmov	r8, s8
 800a59c:	46a4      	mov	ip, r4
 800a59e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800a5a2:	ed87 7a01 	vstr	s14, [r7, #4]
 800a5a6:	f84b 8b08 	str.w	r8, [fp], #8
 800a5aa:	f1ac 0704 	sub.w	r7, ip, #4
 800a5ae:	ed8c 5a01 	vstr	s10, [ip, #4]
 800a5b2:	f101 0c08 	add.w	ip, r1, #8
 800a5b6:	462c      	mov	r4, r5
 800a5b8:	f8cd c010 	str.w	ip, [sp, #16]
 800a5bc:	ee15 ca90 	vmov	ip, s11
 800a5c0:	ee36 6a62 	vsub.f32	s12, s12, s5
 800a5c4:	f844 cb08 	str.w	ip, [r4], #8
 800a5c8:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800a5cc:	ee36 6a43 	vsub.f32	s12, s12, s6
 800a5d0:	9406      	str	r4, [sp, #24]
 800a5d2:	ee76 6a83 	vadd.f32	s13, s13, s6
 800a5d6:	f101 0410 	add.w	r4, r1, #16
 800a5da:	0852      	lsrs	r2, r2, #1
 800a5dc:	9402      	str	r4, [sp, #8]
 800a5de:	ed85 6a01 	vstr	s12, [r5, #4]
 800a5e2:	462c      	mov	r4, r5
 800a5e4:	f101 0518 	add.w	r5, r1, #24
 800a5e8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a5ea:	46b2      	mov	sl, r6
 800a5ec:	9503      	str	r5, [sp, #12]
 800a5ee:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a5f2:	3a02      	subs	r2, #2
 800a5f4:	ee16 5a90 	vmov	r5, s13
 800a5f8:	46b6      	mov	lr, r6
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	0852      	lsrs	r2, r2, #1
 800a5fe:	f84a 5b08 	str.w	r5, [sl], #8
 800a602:	f1a0 0604 	sub.w	r6, r0, #4
 800a606:	edce 7a01 	vstr	s15, [lr, #4]
 800a60a:	9208      	str	r2, [sp, #32]
 800a60c:	f000 8130 	beq.w	800a870 <arm_cfft_radix8by4_f32+0x378>
 800a610:	4691      	mov	r9, r2
 800a612:	9a07      	ldr	r2, [sp, #28]
 800a614:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a618:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 800a61c:	3b08      	subs	r3, #8
 800a61e:	f102 0510 	add.w	r5, r2, #16
 800a622:	f101 0c20 	add.w	ip, r1, #32
 800a626:	f1a4 020c 	sub.w	r2, r4, #12
 800a62a:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800a62e:	4433      	add	r3, r6
 800a630:	3410      	adds	r4, #16
 800a632:	4650      	mov	r0, sl
 800a634:	4659      	mov	r1, fp
 800a636:	ed55 3a02 	vldr	s7, [r5, #-8]
 800a63a:	ed14 5a02 	vldr	s10, [r4, #-8]
 800a63e:	ed91 7a00 	vldr	s14, [r1]
 800a642:	edd0 7a00 	vldr	s15, [r0]
 800a646:	ed54 5a01 	vldr	s11, [r4, #-4]
 800a64a:	ed15 4a01 	vldr	s8, [r5, #-4]
 800a64e:	edd0 6a01 	vldr	s13, [r0, #4]
 800a652:	ed91 6a01 	vldr	s12, [r1, #4]
 800a656:	ee33 8a85 	vadd.f32	s16, s7, s10
 800a65a:	ee34 0a25 	vadd.f32	s0, s8, s11
 800a65e:	ee78 4a07 	vadd.f32	s9, s16, s14
 800a662:	ee74 5a65 	vsub.f32	s11, s8, s11
 800a666:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800a66a:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800a66e:	ed45 4a02 	vstr	s9, [r5, #-8]
 800a672:	edd1 4a01 	vldr	s9, [r1, #4]
 800a676:	ed90 4a01 	vldr	s8, [r0, #4]
 800a67a:	ee70 4a24 	vadd.f32	s9, s0, s9
 800a67e:	ee75 aa06 	vadd.f32	s21, s10, s12
 800a682:	ee74 4a84 	vadd.f32	s9, s9, s8
 800a686:	ee35 aac7 	vsub.f32	s20, s11, s14
 800a68a:	ed45 4a01 	vstr	s9, [r5, #-4]
 800a68e:	edd6 1a00 	vldr	s3, [r6]
 800a692:	edd7 0a00 	vldr	s1, [r7]
 800a696:	ed92 4a02 	vldr	s8, [r2, #8]
 800a69a:	edd3 3a02 	vldr	s7, [r3, #8]
 800a69e:	ed93 2a01 	vldr	s4, [r3, #4]
 800a6a2:	ed16 1a01 	vldr	s2, [r6, #-4]
 800a6a6:	edd2 2a01 	vldr	s5, [r2, #4]
 800a6aa:	ed57 9a01 	vldr	s19, [r7, #-4]
 800a6ae:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800a6b2:	ee39 3a81 	vadd.f32	s6, s19, s2
 800a6b6:	ee74 8a84 	vadd.f32	s17, s9, s8
 800a6ba:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800a6be:	ee78 8aa3 	vadd.f32	s17, s17, s7
 800a6c2:	ee7a aae6 	vsub.f32	s21, s21, s13
 800a6c6:	ee18 aa90 	vmov	sl, s17
 800a6ca:	f847 a908 	str.w	sl, [r7], #-8
 800a6ce:	edd2 8a01 	vldr	s17, [r2, #4]
 800a6d2:	ed93 9a01 	vldr	s18, [r3, #4]
 800a6d6:	ee73 8a28 	vadd.f32	s17, s6, s17
 800a6da:	ee3a aa27 	vadd.f32	s20, s20, s15
 800a6de:	ee78 8a89 	vadd.f32	s17, s17, s18
 800a6e2:	ee74 0a63 	vsub.f32	s1, s8, s7
 800a6e6:	edc7 8a01 	vstr	s17, [r7, #4]
 800a6ea:	ed18 ba02 	vldr	s22, [r8, #-8]
 800a6ee:	ed58 8a01 	vldr	s17, [r8, #-4]
 800a6f2:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800a6f6:	ee6a ba28 	vmul.f32	s23, s20, s17
 800a6fa:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800a6fe:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800a702:	ee31 9a20 	vadd.f32	s18, s2, s1
 800a706:	ee79 9a82 	vadd.f32	s19, s19, s4
 800a70a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800a70e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800a712:	ee69 baa8 	vmul.f32	s23, s19, s17
 800a716:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800a71a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800a71e:	ee69 8a28 	vmul.f32	s17, s18, s17
 800a722:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800a726:	ee1c aa10 	vmov	sl, s24
 800a72a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800a72e:	f841 ab08 	str.w	sl, [r1], #8
 800a732:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800a736:	ee3b bacb 	vsub.f32	s22, s23, s22
 800a73a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800a73e:	ee33 3a62 	vsub.f32	s6, s6, s5
 800a742:	ed01 aa01 	vstr	s20, [r1, #-4]
 800a746:	edc2 8a01 	vstr	s17, [r2, #4]
 800a74a:	ed82 ba02 	vstr	s22, [r2, #8]
 800a74e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800a752:	ee74 3a63 	vsub.f32	s7, s8, s7
 800a756:	ee38 8a47 	vsub.f32	s16, s16, s14
 800a75a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800a75e:	ee30 0a46 	vsub.f32	s0, s0, s12
 800a762:	ee33 3a42 	vsub.f32	s6, s6, s4
 800a766:	ee38 8a67 	vsub.f32	s16, s16, s15
 800a76a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a76e:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800a772:	ee63 8a04 	vmul.f32	s17, s6, s8
 800a776:	ee28 aa24 	vmul.f32	s20, s16, s9
 800a77a:	ee60 9a04 	vmul.f32	s19, s0, s8
 800a77e:	ee28 8a04 	vmul.f32	s16, s16, s8
 800a782:	ee20 0a24 	vmul.f32	s0, s0, s9
 800a786:	ee63 3a84 	vmul.f32	s7, s7, s8
 800a78a:	ee39 4a68 	vsub.f32	s8, s18, s17
 800a78e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800a792:	ee14 aa10 	vmov	sl, s8
 800a796:	ee30 0a48 	vsub.f32	s0, s0, s16
 800a79a:	ee63 4a24 	vmul.f32	s9, s6, s9
 800a79e:	ed44 9a02 	vstr	s19, [r4, #-8]
 800a7a2:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800a7a6:	ed04 0a01 	vstr	s0, [r4, #-4]
 800a7aa:	f846 a908 	str.w	sl, [r6], #-8
 800a7ae:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a7b2:	ee35 7a87 	vadd.f32	s14, s11, s14
 800a7b6:	edc6 3a01 	vstr	s7, [r6, #4]
 800a7ba:	ee76 6a26 	vadd.f32	s13, s12, s13
 800a7be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7c2:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 800a7c6:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 800a7ca:	ee67 5a86 	vmul.f32	s11, s15, s12
 800a7ce:	ee26 5a87 	vmul.f32	s10, s13, s14
 800a7d2:	ee72 2a62 	vsub.f32	s5, s4, s5
 800a7d6:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800a7da:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800a7de:	ee75 5a25 	vadd.f32	s11, s10, s11
 800a7e2:	ee62 0a86 	vmul.f32	s1, s5, s12
 800a7e6:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a7ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a7ee:	ee21 6a06 	vmul.f32	s12, s2, s12
 800a7f2:	ee62 2a87 	vmul.f32	s5, s5, s14
 800a7f6:	ee21 1a07 	vmul.f32	s2, s2, s14
 800a7fa:	ee15 aa90 	vmov	sl, s11
 800a7fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a802:	f840 ab08 	str.w	sl, [r0], #8
 800a806:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800a80a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800a80e:	f1b9 0901 	subs.w	r9, r9, #1
 800a812:	ed40 7a01 	vstr	s15, [r0, #-4]
 800a816:	f105 0508 	add.w	r5, r5, #8
 800a81a:	ed83 1a02 	vstr	s2, [r3, #8]
 800a81e:	edc3 2a01 	vstr	s5, [r3, #4]
 800a822:	f108 0808 	add.w	r8, r8, #8
 800a826:	f1a2 0208 	sub.w	r2, r2, #8
 800a82a:	f10c 0c10 	add.w	ip, ip, #16
 800a82e:	f104 0408 	add.w	r4, r4, #8
 800a832:	f10e 0e18 	add.w	lr, lr, #24
 800a836:	f1a3 0308 	sub.w	r3, r3, #8
 800a83a:	f47f aefc 	bne.w	800a636 <arm_cfft_radix8by4_f32+0x13e>
 800a83e:	9908      	ldr	r1, [sp, #32]
 800a840:	9802      	ldr	r0, [sp, #8]
 800a842:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 800a846:	00cb      	lsls	r3, r1, #3
 800a848:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a84c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a850:	9102      	str	r1, [sp, #8]
 800a852:	9905      	ldr	r1, [sp, #20]
 800a854:	4419      	add	r1, r3
 800a856:	9105      	str	r1, [sp, #20]
 800a858:	9904      	ldr	r1, [sp, #16]
 800a85a:	4419      	add	r1, r3
 800a85c:	9104      	str	r1, [sp, #16]
 800a85e:	9906      	ldr	r1, [sp, #24]
 800a860:	449b      	add	fp, r3
 800a862:	4419      	add	r1, r3
 800a864:	449a      	add	sl, r3
 800a866:	9b03      	ldr	r3, [sp, #12]
 800a868:	9106      	str	r1, [sp, #24]
 800a86a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a86e:	9303      	str	r3, [sp, #12]
 800a870:	9a05      	ldr	r2, [sp, #20]
 800a872:	9806      	ldr	r0, [sp, #24]
 800a874:	ed92 4a00 	vldr	s8, [r2]
 800a878:	ed90 7a00 	vldr	s14, [r0]
 800a87c:	ed9b 3a00 	vldr	s6, [fp]
 800a880:	edda 3a00 	vldr	s7, [sl]
 800a884:	edd2 4a01 	vldr	s9, [r2, #4]
 800a888:	edd0 6a01 	vldr	s13, [r0, #4]
 800a88c:	ed9a 2a01 	vldr	s4, [sl, #4]
 800a890:	eddb 7a01 	vldr	s15, [fp, #4]
 800a894:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 800a898:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a89a:	ee34 6a07 	vadd.f32	s12, s8, s14
 800a89e:	ee74 5aa6 	vadd.f32	s11, s9, s13
 800a8a2:	ee36 5a03 	vadd.f32	s10, s12, s6
 800a8a6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800a8aa:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a8ae:	ee34 7a47 	vsub.f32	s14, s8, s14
 800a8b2:	ed82 5a00 	vstr	s10, [r2]
 800a8b6:	ed9b 5a01 	vldr	s10, [fp, #4]
 800a8ba:	edda 4a01 	vldr	s9, [sl, #4]
 800a8be:	ee35 5a85 	vadd.f32	s10, s11, s10
 800a8c2:	ee37 4a27 	vadd.f32	s8, s14, s15
 800a8c6:	ee35 5a24 	vadd.f32	s10, s10, s9
 800a8ca:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800a8ce:	ed82 5a01 	vstr	s10, [r2, #4]
 800a8d2:	9a04      	ldr	r2, [sp, #16]
 800a8d4:	ee34 5aa3 	vadd.f32	s10, s9, s7
 800a8d8:	edd2 1a00 	vldr	s3, [r2]
 800a8dc:	edd2 2a01 	vldr	s5, [r2, #4]
 800a8e0:	9a02      	ldr	r2, [sp, #8]
 800a8e2:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a8e6:	ee36 6a43 	vsub.f32	s12, s12, s6
 800a8ea:	ee64 4a21 	vmul.f32	s9, s8, s3
 800a8ee:	ee24 4a22 	vmul.f32	s8, s8, s5
 800a8f2:	ee65 2a22 	vmul.f32	s5, s10, s5
 800a8f6:	ee25 5a21 	vmul.f32	s10, s10, s3
 800a8fa:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800a8fe:	ee35 5a44 	vsub.f32	s10, s10, s8
 800a902:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a906:	edcb 2a00 	vstr	s5, [fp]
 800a90a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800a90e:	ed92 4a01 	vldr	s8, [r2, #4]
 800a912:	ed92 5a00 	vldr	s10, [r2]
 800a916:	9a03      	ldr	r2, [sp, #12]
 800a918:	ee36 6a63 	vsub.f32	s12, s12, s7
 800a91c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800a920:	ee66 4a05 	vmul.f32	s9, s12, s10
 800a924:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a928:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a92c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800a930:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a934:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800a938:	ee76 6a83 	vadd.f32	s13, s13, s6
 800a93c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a940:	ed80 6a01 	vstr	s12, [r0, #4]
 800a944:	edc0 5a00 	vstr	s11, [r0]
 800a948:	edd2 5a01 	vldr	s11, [r2, #4]
 800a94c:	9807      	ldr	r0, [sp, #28]
 800a94e:	ee77 7a02 	vadd.f32	s15, s14, s4
 800a952:	ee36 7ae3 	vsub.f32	s14, s13, s7
 800a956:	edd2 6a00 	vldr	s13, [r2]
 800a95a:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800a95e:	ee67 6a26 	vmul.f32	s13, s14, s13
 800a962:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a966:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a96a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a96e:	ee36 7a07 	vadd.f32	s14, s12, s14
 800a972:	edca 7a01 	vstr	s15, [sl, #4]
 800a976:	ed8a 7a00 	vstr	s14, [sl]
 800a97a:	6872      	ldr	r2, [r6, #4]
 800a97c:	4621      	mov	r1, r4
 800a97e:	2304      	movs	r3, #4
 800a980:	f000 f8d2 	bl	800ab28 <arm_radix8_butterfly_f32>
 800a984:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a986:	6872      	ldr	r2, [r6, #4]
 800a988:	4621      	mov	r1, r4
 800a98a:	2304      	movs	r3, #4
 800a98c:	f000 f8cc 	bl	800ab28 <arm_radix8_butterfly_f32>
 800a990:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a992:	6872      	ldr	r2, [r6, #4]
 800a994:	4621      	mov	r1, r4
 800a996:	2304      	movs	r3, #4
 800a998:	f000 f8c6 	bl	800ab28 <arm_radix8_butterfly_f32>
 800a99c:	6872      	ldr	r2, [r6, #4]
 800a99e:	9801      	ldr	r0, [sp, #4]
 800a9a0:	4621      	mov	r1, r4
 800a9a2:	2304      	movs	r3, #4
 800a9a4:	b00f      	add	sp, #60	@ 0x3c
 800a9a6:	ecbd 8b0a 	vpop	{d8-d12}
 800a9aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ae:	f000 b8bb 	b.w	800ab28 <arm_radix8_butterfly_f32>
 800a9b2:	bf00      	nop

0800a9b4 <arm_cfft_f32>:
 800a9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b8:	2a01      	cmp	r2, #1
 800a9ba:	4606      	mov	r6, r0
 800a9bc:	4617      	mov	r7, r2
 800a9be:	460c      	mov	r4, r1
 800a9c0:	4698      	mov	r8, r3
 800a9c2:	8805      	ldrh	r5, [r0, #0]
 800a9c4:	d054      	beq.n	800aa70 <arm_cfft_f32+0xbc>
 800a9c6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800a9ca:	d04c      	beq.n	800aa66 <arm_cfft_f32+0xb2>
 800a9cc:	d916      	bls.n	800a9fc <arm_cfft_f32+0x48>
 800a9ce:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800a9d2:	d01a      	beq.n	800aa0a <arm_cfft_f32+0x56>
 800a9d4:	d95c      	bls.n	800aa90 <arm_cfft_f32+0xdc>
 800a9d6:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800a9da:	d044      	beq.n	800aa66 <arm_cfft_f32+0xb2>
 800a9dc:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800a9e0:	d105      	bne.n	800a9ee <arm_cfft_f32+0x3a>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	6872      	ldr	r2, [r6, #4]
 800a9e6:	4629      	mov	r1, r5
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f000 f89d 	bl	800ab28 <arm_radix8_butterfly_f32>
 800a9ee:	f1b8 0f00 	cmp.w	r8, #0
 800a9f2:	d111      	bne.n	800aa18 <arm_cfft_f32+0x64>
 800a9f4:	2f01      	cmp	r7, #1
 800a9f6:	d016      	beq.n	800aa26 <arm_cfft_f32+0x72>
 800a9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9fc:	2d20      	cmp	r5, #32
 800a9fe:	d032      	beq.n	800aa66 <arm_cfft_f32+0xb2>
 800aa00:	d94a      	bls.n	800aa98 <arm_cfft_f32+0xe4>
 800aa02:	2d40      	cmp	r5, #64	@ 0x40
 800aa04:	d0ed      	beq.n	800a9e2 <arm_cfft_f32+0x2e>
 800aa06:	2d80      	cmp	r5, #128	@ 0x80
 800aa08:	d1f1      	bne.n	800a9ee <arm_cfft_f32+0x3a>
 800aa0a:	4621      	mov	r1, r4
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	f7ff fca3 	bl	800a358 <arm_cfft_radix8by2_f32>
 800aa12:	f1b8 0f00 	cmp.w	r8, #0
 800aa16:	d0ed      	beq.n	800a9f4 <arm_cfft_f32+0x40>
 800aa18:	68b2      	ldr	r2, [r6, #8]
 800aa1a:	89b1      	ldrh	r1, [r6, #12]
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f7f5 fbe7 	bl	80001f0 <arm_bitreversal_32>
 800aa22:	2f01      	cmp	r7, #1
 800aa24:	d1e8      	bne.n	800a9f8 <arm_cfft_f32+0x44>
 800aa26:	ee07 5a90 	vmov	s15, r5
 800aa2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa32:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800aa36:	2d00      	cmp	r5, #0
 800aa38:	d0de      	beq.n	800a9f8 <arm_cfft_f32+0x44>
 800aa3a:	f104 0108 	add.w	r1, r4, #8
 800aa3e:	2300      	movs	r3, #0
 800aa40:	3301      	adds	r3, #1
 800aa42:	429d      	cmp	r5, r3
 800aa44:	f101 0108 	add.w	r1, r1, #8
 800aa48:	ed11 7a04 	vldr	s14, [r1, #-16]
 800aa4c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800aa50:	ee27 7a26 	vmul.f32	s14, s14, s13
 800aa54:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800aa58:	ed01 7a04 	vstr	s14, [r1, #-16]
 800aa5c:	ed41 7a03 	vstr	s15, [r1, #-12]
 800aa60:	d1ee      	bne.n	800aa40 <arm_cfft_f32+0x8c>
 800aa62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa66:	4621      	mov	r1, r4
 800aa68:	4630      	mov	r0, r6
 800aa6a:	f7ff fd45 	bl	800a4f8 <arm_cfft_radix8by4_f32>
 800aa6e:	e7be      	b.n	800a9ee <arm_cfft_f32+0x3a>
 800aa70:	b1ad      	cbz	r5, 800aa9e <arm_cfft_f32+0xea>
 800aa72:	f101 030c 	add.w	r3, r1, #12
 800aa76:	2200      	movs	r2, #0
 800aa78:	ed53 7a02 	vldr	s15, [r3, #-8]
 800aa7c:	3201      	adds	r2, #1
 800aa7e:	eef1 7a67 	vneg.f32	s15, s15
 800aa82:	4295      	cmp	r5, r2
 800aa84:	ed43 7a02 	vstr	s15, [r3, #-8]
 800aa88:	f103 0308 	add.w	r3, r3, #8
 800aa8c:	d1f4      	bne.n	800aa78 <arm_cfft_f32+0xc4>
 800aa8e:	e79a      	b.n	800a9c6 <arm_cfft_f32+0x12>
 800aa90:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800aa94:	d0a5      	beq.n	800a9e2 <arm_cfft_f32+0x2e>
 800aa96:	e7aa      	b.n	800a9ee <arm_cfft_f32+0x3a>
 800aa98:	2d10      	cmp	r5, #16
 800aa9a:	d0b6      	beq.n	800aa0a <arm_cfft_f32+0x56>
 800aa9c:	e7a7      	b.n	800a9ee <arm_cfft_f32+0x3a>
 800aa9e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800aaa2:	d894      	bhi.n	800a9ce <arm_cfft_f32+0x1a>
 800aaa4:	e7aa      	b.n	800a9fc <arm_cfft_f32+0x48>
 800aaa6:	bf00      	nop

0800aaa8 <arm_cos_f32>:
 800aaa8:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800ab1c <arm_cos_f32+0x74>
 800aaac:	ee20 0a27 	vmul.f32	s0, s0, s15
 800aab0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800aab4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aab8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aac0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800aac4:	d504      	bpl.n	800aad0 <arm_cos_f32+0x28>
 800aac6:	ee17 3a90 	vmov	r3, s15
 800aaca:	3b01      	subs	r3, #1
 800aacc:	ee07 3a90 	vmov	s15, r3
 800aad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aad4:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800ab20 <arm_cos_f32+0x78>
 800aad8:	4a12      	ldr	r2, [pc, #72]	@ (800ab24 <arm_cos_f32+0x7c>)
 800aada:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aade:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aae2:	ee20 0a26 	vmul.f32	s0, s0, s13
 800aae6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800aaea:	ee17 3a90 	vmov	r3, s15
 800aaee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaf2:	ee07 3a90 	vmov	s15, r3
 800aaf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aafa:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800aafe:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ab02:	edd1 6a01 	vldr	s13, [r1, #4]
 800ab06:	ed91 0a00 	vldr	s0, [r1]
 800ab0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ab0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ab12:	ee27 0a00 	vmul.f32	s0, s14, s0
 800ab16:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ab1a:	4770      	bx	lr
 800ab1c:	3e22f983 	.word	0x3e22f983
 800ab20:	44000000 	.word	0x44000000
 800ab24:	08018438 	.word	0x08018438

0800ab28 <arm_radix8_butterfly_f32>:
 800ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2c:	ed2d 8b10 	vpush	{d8-d15}
 800ab30:	461c      	mov	r4, r3
 800ab32:	b09d      	sub	sp, #116	@ 0x74
 800ab34:	4603      	mov	r3, r0
 800ab36:	3304      	adds	r3, #4
 800ab38:	ed9f bac4 	vldr	s22, [pc, #784]	@ 800ae4c <arm_radix8_butterfly_f32+0x324>
 800ab3c:	9019      	str	r0, [sp, #100]	@ 0x64
 800ab3e:	921a      	str	r2, [sp, #104]	@ 0x68
 800ab40:	468b      	mov	fp, r1
 800ab42:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ab44:	468a      	mov	sl, r1
 800ab46:	46a1      	mov	r9, r4
 800ab48:	4607      	mov	r7, r0
 800ab4a:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800ab4e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800ab52:	eb03 0508 	add.w	r5, r3, r8
 800ab56:	195c      	adds	r4, r3, r5
 800ab58:	00de      	lsls	r6, r3, #3
 800ab5a:	191a      	adds	r2, r3, r4
 800ab5c:	9600      	str	r6, [sp, #0]
 800ab5e:	1898      	adds	r0, r3, r2
 800ab60:	4619      	mov	r1, r3
 800ab62:	9e00      	ldr	r6, [sp, #0]
 800ab64:	9311      	str	r3, [sp, #68]	@ 0x44
 800ab66:	4401      	add	r1, r0
 800ab68:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800ab6c:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800ab70:	19be      	adds	r6, r7, r6
 800ab72:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800ab76:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800ab7a:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 800ab7e:	9f00      	ldr	r7, [sp, #0]
 800ab80:	011b      	lsls	r3, r3, #4
 800ab82:	eb06 0e07 	add.w	lr, r6, r7
 800ab86:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 800ab88:	9302      	str	r3, [sp, #8]
 800ab8a:	3204      	adds	r2, #4
 800ab8c:	3104      	adds	r1, #4
 800ab8e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ab92:	f04f 0c00 	mov.w	ip, #0
 800ab96:	edde 7a00 	vldr	s15, [lr]
 800ab9a:	edd6 6a00 	vldr	s13, [r6]
 800ab9e:	ed95 2a00 	vldr	s4, [r5]
 800aba2:	ed17 aa01 	vldr	s20, [r7, #-4]
 800aba6:	edd4 4a00 	vldr	s9, [r4]
 800abaa:	ed90 5a00 	vldr	s10, [r0]
 800abae:	ed12 7a01 	vldr	s14, [r2, #-4]
 800abb2:	ed51 0a01 	vldr	s1, [r1, #-4]
 800abb6:	ee77 8a85 	vadd.f32	s17, s15, s10
 800abba:	ee76 3a87 	vadd.f32	s7, s13, s14
 800abbe:	ee32 4a20 	vadd.f32	s8, s4, s1
 800abc2:	ee3a 3a24 	vadd.f32	s6, s20, s9
 800abc6:	ee33 6a84 	vadd.f32	s12, s7, s8
 800abca:	ee73 5a28 	vadd.f32	s11, s6, s17
 800abce:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800abd2:	ee75 6a86 	vadd.f32	s13, s11, s12
 800abd6:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800abda:	ed47 6a01 	vstr	s13, [r7, #-4]
 800abde:	edc4 5a00 	vstr	s11, [r4]
 800abe2:	ed92 9a00 	vldr	s18, [r2]
 800abe6:	ed95 1a01 	vldr	s2, [r5, #4]
 800abea:	edd6 5a01 	vldr	s11, [r6, #4]
 800abee:	ed91 6a00 	vldr	s12, [r1]
 800abf2:	edd7 2a00 	vldr	s5, [r7]
 800abf6:	edd4 1a01 	vldr	s3, [r4, #4]
 800abfa:	edde 6a01 	vldr	s13, [lr, #4]
 800abfe:	edd0 9a01 	vldr	s19, [r0, #4]
 800ac02:	ee72 0a60 	vsub.f32	s1, s4, s1
 800ac06:	ee71 aa46 	vsub.f32	s21, s2, s12
 800ac0a:	ee35 2ac9 	vsub.f32	s4, s11, s18
 800ac0e:	ee37 0a60 	vsub.f32	s0, s14, s1
 800ac12:	ee32 8a2a 	vadd.f32	s16, s4, s21
 800ac16:	ee37 7a20 	vadd.f32	s14, s14, s1
 800ac1a:	ee32 2a6a 	vsub.f32	s4, s4, s21
 800ac1e:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800ac22:	ee75 5a89 	vadd.f32	s11, s11, s18
 800ac26:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800ac2a:	ee7a 4a64 	vsub.f32	s9, s20, s9
 800ac2e:	ee31 6a06 	vadd.f32	s12, s2, s12
 800ac32:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800ac36:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800ac3a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800ac3e:	ee72 1ae1 	vsub.f32	s3, s5, s3
 800ac42:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800ac46:	ee62 2a0b 	vmul.f32	s5, s4, s22
 800ac4a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800ac4e:	ee33 3a68 	vsub.f32	s6, s6, s17
 800ac52:	ee36 0a88 	vadd.f32	s0, s13, s16
 800ac56:	ee75 8a86 	vadd.f32	s17, s11, s12
 800ac5a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800ac5e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800ac62:	ee74 6ae0 	vsub.f32	s13, s9, s1
 800ac66:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800ac6a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800ac6e:	ee75 4a27 	vadd.f32	s9, s10, s15
 800ac72:	ee71 5a49 	vsub.f32	s11, s2, s18
 800ac76:	ee31 2a09 	vadd.f32	s4, s2, s18
 800ac7a:	ee75 7a67 	vsub.f32	s15, s10, s15
 800ac7e:	ee31 1aa2 	vadd.f32	s2, s3, s5
 800ac82:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800ac86:	ee73 0a06 	vadd.f32	s1, s6, s12
 800ac8a:	ee75 1ac4 	vsub.f32	s3, s11, s8
 800ac8e:	ee36 5a87 	vadd.f32	s10, s13, s14
 800ac92:	ee32 8a28 	vadd.f32	s16, s4, s17
 800ac96:	ee33 6a46 	vsub.f32	s12, s6, s12
 800ac9a:	ee34 4a25 	vadd.f32	s8, s8, s11
 800ac9e:	ee33 3a80 	vadd.f32	s6, s7, s0
 800aca2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800aca6:	ee71 5a64 	vsub.f32	s11, s2, s9
 800acaa:	ee72 6ae7 	vsub.f32	s13, s5, s15
 800acae:	ee32 2a68 	vsub.f32	s4, s4, s17
 800acb2:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800acb6:	ee74 4a81 	vadd.f32	s9, s9, s2
 800acba:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800acbe:	44dc      	add	ip, fp
 800acc0:	45e2      	cmp	sl, ip
 800acc2:	ed87 8a00 	vstr	s16, [r7]
 800acc6:	ed84 2a01 	vstr	s4, [r4, #4]
 800acca:	441f      	add	r7, r3
 800accc:	edce 0a00 	vstr	s1, [lr]
 800acd0:	441c      	add	r4, r3
 800acd2:	ed80 6a00 	vstr	s12, [r0]
 800acd6:	edce 1a01 	vstr	s3, [lr, #4]
 800acda:	ed80 4a01 	vstr	s8, [r0, #4]
 800acde:	449e      	add	lr, r3
 800ace0:	ed86 3a00 	vstr	s6, [r6]
 800ace4:	4418      	add	r0, r3
 800ace6:	ed41 3a01 	vstr	s7, [r1, #-4]
 800acea:	ed02 5a01 	vstr	s10, [r2, #-4]
 800acee:	ed85 7a00 	vstr	s14, [r5]
 800acf2:	edc6 5a01 	vstr	s11, [r6, #4]
 800acf6:	edc1 4a00 	vstr	s9, [r1]
 800acfa:	441e      	add	r6, r3
 800acfc:	edc2 6a00 	vstr	s13, [r2]
 800ad00:	4419      	add	r1, r3
 800ad02:	edc5 7a01 	vstr	s15, [r5, #4]
 800ad06:	441a      	add	r2, r3
 800ad08:	441d      	add	r5, r3
 800ad0a:	f63f af44 	bhi.w	800ab96 <arm_radix8_butterfly_f32+0x6e>
 800ad0e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ad10:	2a07      	cmp	r2, #7
 800ad12:	f240 81f5 	bls.w	800b100 <arm_radix8_butterfly_f32+0x5d8>
 800ad16:	f108 0101 	add.w	r1, r8, #1
 800ad1a:	188f      	adds	r7, r1, r2
 800ad1c:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 800ad20:	19d6      	adds	r6, r2, r7
 800ad22:	eb08 0c09 	add.w	ip, r8, r9
 800ad26:	1994      	adds	r4, r2, r6
 800ad28:	eb0c 0e09 	add.w	lr, ip, r9
 800ad2c:	4610      	mov	r0, r2
 800ad2e:	9701      	str	r7, [sp, #4]
 800ad30:	4420      	add	r0, r4
 800ad32:	eb0e 0709 	add.w	r7, lr, r9
 800ad36:	1815      	adds	r5, r2, r0
 800ad38:	eb07 0209 	add.w	r2, r7, r9
 800ad3c:	9203      	str	r2, [sp, #12]
 800ad3e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ad40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ad44:	9117      	str	r1, [sp, #92]	@ 0x5c
 800ad46:	440a      	add	r2, r1
 800ad48:	9900      	ldr	r1, [sp, #0]
 800ad4a:	3108      	adds	r1, #8
 800ad4c:	9100      	str	r1, [sp, #0]
 800ad4e:	9902      	ldr	r1, [sp, #8]
 800ad50:	3108      	adds	r1, #8
 800ad52:	9102      	str	r1, [sp, #8]
 800ad54:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800ad56:	00ff      	lsls	r7, r7, #3
 800ad58:	9715      	str	r7, [sp, #84]	@ 0x54
 800ad5a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800ad5e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ad62:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800ad66:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800ad68:	9903      	ldr	r1, [sp, #12]
 800ad6a:	19d7      	adds	r7, r2, r7
 800ad6c:	00c9      	lsls	r1, r1, #3
 800ad6e:	9114      	str	r1, [sp, #80]	@ 0x50
 800ad70:	9710      	str	r7, [sp, #64]	@ 0x40
 800ad72:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800ad74:	9f00      	ldr	r7, [sp, #0]
 800ad76:	19cf      	adds	r7, r1, r7
 800ad78:	970d      	str	r7, [sp, #52]	@ 0x34
 800ad7a:	9f02      	ldr	r7, [sp, #8]
 800ad7c:	19cf      	adds	r7, r1, r7
 800ad7e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800ad82:	970c      	str	r7, [sp, #48]	@ 0x30
 800ad84:	9f01      	ldr	r7, [sp, #4]
 800ad86:	f8cd e058 	str.w	lr, [sp, #88]	@ 0x58
 800ad8a:	3504      	adds	r5, #4
 800ad8c:	3004      	adds	r0, #4
 800ad8e:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 800ad92:	9508      	str	r5, [sp, #32]
 800ad94:	9009      	str	r0, [sp, #36]	@ 0x24
 800ad96:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 800ad98:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800ad9a:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 800ad9e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800ada2:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 800ada6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800ada8:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
 800adac:	1945      	adds	r5, r0, r5
 800adae:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800adb2:	460f      	mov	r7, r1
 800adb4:	3404      	adds	r4, #4
 800adb6:	4641      	mov	r1, r8
 800adb8:	1841      	adds	r1, r0, r1
 800adba:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
 800adbe:	940a      	str	r4, [sp, #40]	@ 0x28
 800adc0:	eb00 0c06 	add.w	ip, r0, r6
 800adc4:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 800adc8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800adca:	9506      	str	r5, [sp, #24]
 800adcc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800adce:	9105      	str	r1, [sp, #20]
 800add0:	4639      	mov	r1, r7
 800add2:	1905      	adds	r5, r0, r4
 800add4:	3108      	adds	r1, #8
 800add6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800add8:	9507      	str	r5, [sp, #28]
 800adda:	910f      	str	r1, [sp, #60]	@ 0x3c
 800addc:	ea4f 1509 	mov.w	r5, r9, lsl #4
 800ade0:	2101      	movs	r1, #1
 800ade2:	eb00 0e06 	add.w	lr, r0, r6
 800ade6:	9518      	str	r5, [sp, #96]	@ 0x60
 800ade8:	9404      	str	r4, [sp, #16]
 800adea:	9103      	str	r1, [sp, #12]
 800adec:	4620      	mov	r0, r4
 800adee:	4689      	mov	r9, r1
 800adf0:	9e06      	ldr	r6, [sp, #24]
 800adf2:	ed90 fa00 	vldr	s30, [r0]
 800adf6:	edd6 7a01 	vldr	s15, [r6, #4]
 800adfa:	edd0 ba01 	vldr	s23, [r0, #4]
 800adfe:	edcd 7a00 	vstr	s15, [sp]
 800ae02:	a80d      	add	r0, sp, #52	@ 0x34
 800ae04:	edde 7a01 	vldr	s15, [lr, #4]
 800ae08:	9c05      	ldr	r4, [sp, #20]
 800ae0a:	9d07      	ldr	r5, [sp, #28]
 800ae0c:	edd2 fa00 	vldr	s31, [r2]
 800ae10:	ed92 ca01 	vldr	s24, [r2, #4]
 800ae14:	edcd 7a01 	vstr	s15, [sp, #4]
 800ae18:	c807      	ldmia	r0, {r0, r1, r2}
 800ae1a:	eddc 7a01 	vldr	s15, [ip, #4]
 800ae1e:	edd4 ea00 	vldr	s29, [r4]
 800ae22:	ed95 ea00 	vldr	s28, [r5]
 800ae26:	edd6 da00 	vldr	s27, [r6]
 800ae2a:	edd4 aa01 	vldr	s21, [r4, #4]
 800ae2e:	ed95 aa01 	vldr	s20, [r5, #4]
 800ae32:	ed9e da00 	vldr	s26, [lr]
 800ae36:	eddc ca00 	vldr	s25, [ip]
 800ae3a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae3e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800ae40:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ae42:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ae44:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800ae46:	edcd 7a02 	vstr	s15, [sp, #8]
 800ae4a:	e001      	b.n	800ae50 <arm_radix8_butterfly_f32+0x328>
 800ae4c:	3f3504f3 	.word	0x3f3504f3
 800ae50:	ed16 6a01 	vldr	s12, [r6, #-4]
 800ae54:	ed91 5a00 	vldr	s10, [r1]
 800ae58:	ed57 9a01 	vldr	s19, [r7, #-4]
 800ae5c:	edd5 7a00 	vldr	s15, [r5]
 800ae60:	ed18 7a01 	vldr	s14, [r8, #-4]
 800ae64:	edd2 3a00 	vldr	s7, [r2]
 800ae68:	ed94 3a00 	vldr	s6, [r4]
 800ae6c:	ed90 2a00 	vldr	s4, [r0]
 800ae70:	ed92 0a01 	vldr	s0, [r2, #4]
 800ae74:	ee33 8a85 	vadd.f32	s16, s7, s10
 800ae78:	ee32 1a06 	vadd.f32	s2, s4, s12
 800ae7c:	ee33 4a29 	vadd.f32	s8, s6, s19
 800ae80:	ee77 4a87 	vadd.f32	s9, s15, s14
 800ae84:	ee78 1a04 	vadd.f32	s3, s16, s8
 800ae88:	ee71 6a24 	vadd.f32	s13, s2, s9
 800ae8c:	ee32 2a46 	vsub.f32	s4, s4, s12
 800ae90:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800ae94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae98:	ed82 6a00 	vstr	s12, [r2]
 800ae9c:	edd5 8a01 	vldr	s17, [r5, #4]
 800aea0:	ed90 9a01 	vldr	s18, [r0, #4]
 800aea4:	edd6 2a00 	vldr	s5, [r6]
 800aea8:	ed98 7a00 	vldr	s14, [r8]
 800aeac:	edd4 0a01 	vldr	s1, [r4, #4]
 800aeb0:	ed91 6a01 	vldr	s12, [r1, #4]
 800aeb4:	edd7 5a00 	vldr	s11, [r7]
 800aeb8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800aebc:	ee33 3a69 	vsub.f32	s6, s6, s19
 800aec0:	ee39 5a62 	vsub.f32	s10, s18, s5
 800aec4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800aec8:	ee38 4a44 	vsub.f32	s8, s16, s8
 800aecc:	ee38 7a87 	vadd.f32	s14, s17, s14
 800aed0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800aed4:	ee79 2a22 	vadd.f32	s5, s18, s5
 800aed8:	ee75 8a69 	vsub.f32	s17, s10, s19
 800aedc:	ee32 9a27 	vadd.f32	s18, s4, s15
 800aee0:	ee35 5a29 	vadd.f32	s10, s10, s19
 800aee4:	ee72 7a67 	vsub.f32	s15, s4, s15
 800aee8:	ee30 2a06 	vadd.f32	s4, s0, s12
 800aeec:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800aef0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800aef4:	ee32 9a08 	vadd.f32	s18, s4, s16
 800aef8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800aefc:	ee32 2a48 	vsub.f32	s4, s4, s16
 800af00:	ee71 4a64 	vsub.f32	s9, s2, s9
 800af04:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800af08:	ee32 1a87 	vadd.f32	s2, s5, s14
 800af0c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800af10:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800af14:	ee30 6a46 	vsub.f32	s12, s0, s12
 800af18:	ee73 0a29 	vadd.f32	s1, s6, s19
 800af1c:	ee36 0a28 	vadd.f32	s0, s12, s17
 800af20:	ee33 3a69 	vsub.f32	s6, s6, s19
 800af24:	ee32 7a64 	vsub.f32	s14, s4, s9
 800af28:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800af2c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800af30:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800af34:	ee75 8a85 	vadd.f32	s17, s11, s10
 800af38:	ee74 3a22 	vadd.f32	s7, s8, s5
 800af3c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800af40:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800af44:	ee79 1a41 	vsub.f32	s3, s18, s2
 800af48:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800af4c:	ee76 5a43 	vsub.f32	s11, s12, s6
 800af50:	ee74 2a62 	vsub.f32	s5, s8, s5
 800af54:	ee74 4a82 	vadd.f32	s9, s9, s4
 800af58:	ee30 4a60 	vsub.f32	s8, s0, s1
 800af5c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800af60:	ee30 0a80 	vadd.f32	s0, s1, s0
 800af64:	ee77 9a85 	vadd.f32	s19, s15, s10
 800af68:	ee33 6a06 	vadd.f32	s12, s6, s12
 800af6c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800af70:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800af74:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800af78:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800af7c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800af80:	ee39 1a01 	vadd.f32	s2, s18, s2
 800af84:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800af88:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800af8c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800af90:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800af94:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800af98:	ee35 3a03 	vadd.f32	s6, s10, s6
 800af9c:	ee72 6a66 	vsub.f32	s13, s4, s13
 800afa0:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800afa4:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800afa8:	ed9d 4a02 	vldr	s8, [sp, #8]
 800afac:	ed82 1a01 	vstr	s2, [r2, #4]
 800afb0:	ee77 3a63 	vsub.f32	s7, s14, s7
 800afb4:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800afb8:	ed9d 7a01 	vldr	s14, [sp, #4]
 800afbc:	ed81 3a00 	vstr	s6, [r1]
 800afc0:	ee30 9a89 	vadd.f32	s18, s1, s18
 800afc4:	ee32 2a05 	vadd.f32	s4, s4, s10
 800afc8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800afcc:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800afd0:	ee67 2a22 	vmul.f32	s5, s14, s5
 800afd4:	ee64 1a00 	vmul.f32	s3, s8, s0
 800afd8:	ee27 7a24 	vmul.f32	s14, s14, s9
 800afdc:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800afe0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800afe4:	ee64 8a28 	vmul.f32	s17, s8, s17
 800afe8:	ed9d 4a00 	vldr	s8, [sp]
 800afec:	edc1 6a01 	vstr	s13, [r1, #4]
 800aff0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800aff4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800aff8:	ee64 9a29 	vmul.f32	s19, s8, s19
 800affc:	ee24 4a25 	vmul.f32	s8, s8, s11
 800b000:	ee30 7a87 	vadd.f32	s14, s1, s14
 800b004:	ee74 4a84 	vadd.f32	s9, s9, s8
 800b008:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800b00c:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800b010:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800b014:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800b018:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800b01c:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800b020:	ee75 1a21 	vadd.f32	s3, s10, s3
 800b024:	ee30 0a68 	vsub.f32	s0, s0, s17
 800b028:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800b02c:	ee70 0a84 	vadd.f32	s1, s1, s8
 800b030:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b034:	44d9      	add	r9, fp
 800b036:	45ca      	cmp	sl, r9
 800b038:	ed84 9a00 	vstr	s18, [r4]
 800b03c:	edc4 3a01 	vstr	s7, [r4, #4]
 800b040:	441a      	add	r2, r3
 800b042:	ed07 7a01 	vstr	s14, [r7, #-4]
 800b046:	edc7 2a00 	vstr	s5, [r7]
 800b04a:	4419      	add	r1, r3
 800b04c:	ed80 2a00 	vstr	s4, [r0]
 800b050:	ed80 8a01 	vstr	s16, [r0, #4]
 800b054:	441c      	add	r4, r3
 800b056:	ed48 1a01 	vstr	s3, [r8, #-4]
 800b05a:	ed88 0a00 	vstr	s0, [r8]
 800b05e:	441f      	add	r7, r3
 800b060:	ed46 4a01 	vstr	s9, [r6, #-4]
 800b064:	4418      	add	r0, r3
 800b066:	edc6 9a00 	vstr	s19, [r6]
 800b06a:	4498      	add	r8, r3
 800b06c:	edc5 0a00 	vstr	s1, [r5]
 800b070:	ed85 6a01 	vstr	s12, [r5, #4]
 800b074:	441e      	add	r6, r3
 800b076:	441d      	add	r5, r3
 800b078:	f63f aeea 	bhi.w	800ae50 <arm_radix8_butterfly_f32+0x328>
 800b07c:	9a03      	ldr	r2, [sp, #12]
 800b07e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800b080:	3201      	adds	r2, #1
 800b082:	4611      	mov	r1, r2
 800b084:	9203      	str	r2, [sp, #12]
 800b086:	9a04      	ldr	r2, [sp, #16]
 800b088:	4402      	add	r2, r0
 800b08a:	9204      	str	r2, [sp, #16]
 800b08c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800b08e:	9a05      	ldr	r2, [sp, #20]
 800b090:	4402      	add	r2, r0
 800b092:	9205      	str	r2, [sp, #20]
 800b094:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b096:	9a07      	ldr	r2, [sp, #28]
 800b098:	4402      	add	r2, r0
 800b09a:	9207      	str	r2, [sp, #28]
 800b09c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800b09e:	9a06      	ldr	r2, [sp, #24]
 800b0a0:	4402      	add	r2, r0
 800b0a2:	9206      	str	r2, [sp, #24]
 800b0a4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b0a6:	4496      	add	lr, r2
 800b0a8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b0aa:	4494      	add	ip, r2
 800b0ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b0ae:	3208      	adds	r2, #8
 800b0b0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b0b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0b4:	3208      	adds	r2, #8
 800b0b6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b0ba:	3208      	adds	r2, #8
 800b0bc:	920d      	str	r2, [sp, #52]	@ 0x34
 800b0be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b0c0:	3208      	adds	r2, #8
 800b0c2:	920c      	str	r2, [sp, #48]	@ 0x30
 800b0c4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b0c6:	3208      	adds	r2, #8
 800b0c8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b0ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b0cc:	3208      	adds	r2, #8
 800b0ce:	920a      	str	r2, [sp, #40]	@ 0x28
 800b0d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0d2:	3208      	adds	r2, #8
 800b0d4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0d6:	9a08      	ldr	r2, [sp, #32]
 800b0d8:	3208      	adds	r2, #8
 800b0da:	9208      	str	r2, [sp, #32]
 800b0dc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800b0de:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800b0e0:	4288      	cmp	r0, r1
 800b0e2:	4622      	mov	r2, r4
 800b0e4:	d007      	beq.n	800b0f6 <arm_radix8_butterfly_f32+0x5ce>
 800b0e6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800b0e8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b0ec:	4621      	mov	r1, r4
 800b0ee:	4401      	add	r1, r0
 800b0f0:	9110      	str	r1, [sp, #64]	@ 0x40
 800b0f2:	9804      	ldr	r0, [sp, #16]
 800b0f4:	e67c      	b.n	800adf0 <arm_radix8_butterfly_f32+0x2c8>
 800b0f6:	4683      	mov	fp, r0
 800b0f8:	f8bd 905c 	ldrh.w	r9, [sp, #92]	@ 0x5c
 800b0fc:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 800b0fe:	e524      	b.n	800ab4a <arm_radix8_butterfly_f32+0x22>
 800b100:	b01d      	add	sp, #116	@ 0x74
 800b102:	ecbd 8b10 	vpop	{d8-d15}
 800b106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10a:	bf00      	nop

0800b10c <__cvt>:
 800b10c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b110:	ec57 6b10 	vmov	r6, r7, d0
 800b114:	2f00      	cmp	r7, #0
 800b116:	460c      	mov	r4, r1
 800b118:	4619      	mov	r1, r3
 800b11a:	463b      	mov	r3, r7
 800b11c:	bfbb      	ittet	lt
 800b11e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b122:	461f      	movlt	r7, r3
 800b124:	2300      	movge	r3, #0
 800b126:	232d      	movlt	r3, #45	@ 0x2d
 800b128:	700b      	strb	r3, [r1, #0]
 800b12a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b12c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b130:	4691      	mov	r9, r2
 800b132:	f023 0820 	bic.w	r8, r3, #32
 800b136:	bfbc      	itt	lt
 800b138:	4632      	movlt	r2, r6
 800b13a:	4616      	movlt	r6, r2
 800b13c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b140:	d005      	beq.n	800b14e <__cvt+0x42>
 800b142:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b146:	d100      	bne.n	800b14a <__cvt+0x3e>
 800b148:	3401      	adds	r4, #1
 800b14a:	2102      	movs	r1, #2
 800b14c:	e000      	b.n	800b150 <__cvt+0x44>
 800b14e:	2103      	movs	r1, #3
 800b150:	ab03      	add	r3, sp, #12
 800b152:	9301      	str	r3, [sp, #4]
 800b154:	ab02      	add	r3, sp, #8
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	ec47 6b10 	vmov	d0, r6, r7
 800b15c:	4653      	mov	r3, sl
 800b15e:	4622      	mov	r2, r4
 800b160:	f000 fe8a 	bl	800be78 <_dtoa_r>
 800b164:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b168:	4605      	mov	r5, r0
 800b16a:	d119      	bne.n	800b1a0 <__cvt+0x94>
 800b16c:	f019 0f01 	tst.w	r9, #1
 800b170:	d00e      	beq.n	800b190 <__cvt+0x84>
 800b172:	eb00 0904 	add.w	r9, r0, r4
 800b176:	2200      	movs	r2, #0
 800b178:	2300      	movs	r3, #0
 800b17a:	4630      	mov	r0, r6
 800b17c:	4639      	mov	r1, r7
 800b17e:	f7f5 fd13 	bl	8000ba8 <__aeabi_dcmpeq>
 800b182:	b108      	cbz	r0, 800b188 <__cvt+0x7c>
 800b184:	f8cd 900c 	str.w	r9, [sp, #12]
 800b188:	2230      	movs	r2, #48	@ 0x30
 800b18a:	9b03      	ldr	r3, [sp, #12]
 800b18c:	454b      	cmp	r3, r9
 800b18e:	d31e      	bcc.n	800b1ce <__cvt+0xc2>
 800b190:	9b03      	ldr	r3, [sp, #12]
 800b192:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b194:	1b5b      	subs	r3, r3, r5
 800b196:	4628      	mov	r0, r5
 800b198:	6013      	str	r3, [r2, #0]
 800b19a:	b004      	add	sp, #16
 800b19c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b1a4:	eb00 0904 	add.w	r9, r0, r4
 800b1a8:	d1e5      	bne.n	800b176 <__cvt+0x6a>
 800b1aa:	7803      	ldrb	r3, [r0, #0]
 800b1ac:	2b30      	cmp	r3, #48	@ 0x30
 800b1ae:	d10a      	bne.n	800b1c6 <__cvt+0xba>
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	4639      	mov	r1, r7
 800b1b8:	f7f5 fcf6 	bl	8000ba8 <__aeabi_dcmpeq>
 800b1bc:	b918      	cbnz	r0, 800b1c6 <__cvt+0xba>
 800b1be:	f1c4 0401 	rsb	r4, r4, #1
 800b1c2:	f8ca 4000 	str.w	r4, [sl]
 800b1c6:	f8da 3000 	ldr.w	r3, [sl]
 800b1ca:	4499      	add	r9, r3
 800b1cc:	e7d3      	b.n	800b176 <__cvt+0x6a>
 800b1ce:	1c59      	adds	r1, r3, #1
 800b1d0:	9103      	str	r1, [sp, #12]
 800b1d2:	701a      	strb	r2, [r3, #0]
 800b1d4:	e7d9      	b.n	800b18a <__cvt+0x7e>

0800b1d6 <__exponent>:
 800b1d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1d8:	2900      	cmp	r1, #0
 800b1da:	bfba      	itte	lt
 800b1dc:	4249      	neglt	r1, r1
 800b1de:	232d      	movlt	r3, #45	@ 0x2d
 800b1e0:	232b      	movge	r3, #43	@ 0x2b
 800b1e2:	2909      	cmp	r1, #9
 800b1e4:	7002      	strb	r2, [r0, #0]
 800b1e6:	7043      	strb	r3, [r0, #1]
 800b1e8:	dd29      	ble.n	800b23e <__exponent+0x68>
 800b1ea:	f10d 0307 	add.w	r3, sp, #7
 800b1ee:	461d      	mov	r5, r3
 800b1f0:	270a      	movs	r7, #10
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	fbb1 f6f7 	udiv	r6, r1, r7
 800b1f8:	fb07 1416 	mls	r4, r7, r6, r1
 800b1fc:	3430      	adds	r4, #48	@ 0x30
 800b1fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b202:	460c      	mov	r4, r1
 800b204:	2c63      	cmp	r4, #99	@ 0x63
 800b206:	f103 33ff 	add.w	r3, r3, #4294967295
 800b20a:	4631      	mov	r1, r6
 800b20c:	dcf1      	bgt.n	800b1f2 <__exponent+0x1c>
 800b20e:	3130      	adds	r1, #48	@ 0x30
 800b210:	1e94      	subs	r4, r2, #2
 800b212:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b216:	1c41      	adds	r1, r0, #1
 800b218:	4623      	mov	r3, r4
 800b21a:	42ab      	cmp	r3, r5
 800b21c:	d30a      	bcc.n	800b234 <__exponent+0x5e>
 800b21e:	f10d 0309 	add.w	r3, sp, #9
 800b222:	1a9b      	subs	r3, r3, r2
 800b224:	42ac      	cmp	r4, r5
 800b226:	bf88      	it	hi
 800b228:	2300      	movhi	r3, #0
 800b22a:	3302      	adds	r3, #2
 800b22c:	4403      	add	r3, r0
 800b22e:	1a18      	subs	r0, r3, r0
 800b230:	b003      	add	sp, #12
 800b232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b234:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b238:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b23c:	e7ed      	b.n	800b21a <__exponent+0x44>
 800b23e:	2330      	movs	r3, #48	@ 0x30
 800b240:	3130      	adds	r1, #48	@ 0x30
 800b242:	7083      	strb	r3, [r0, #2]
 800b244:	70c1      	strb	r1, [r0, #3]
 800b246:	1d03      	adds	r3, r0, #4
 800b248:	e7f1      	b.n	800b22e <__exponent+0x58>
	...

0800b24c <_printf_float>:
 800b24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b250:	b08d      	sub	sp, #52	@ 0x34
 800b252:	460c      	mov	r4, r1
 800b254:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b258:	4616      	mov	r6, r2
 800b25a:	461f      	mov	r7, r3
 800b25c:	4605      	mov	r5, r0
 800b25e:	f000 fd11 	bl	800bc84 <_localeconv_r>
 800b262:	6803      	ldr	r3, [r0, #0]
 800b264:	9304      	str	r3, [sp, #16]
 800b266:	4618      	mov	r0, r3
 800b268:	f7f5 f872 	bl	8000350 <strlen>
 800b26c:	2300      	movs	r3, #0
 800b26e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b270:	f8d8 3000 	ldr.w	r3, [r8]
 800b274:	9005      	str	r0, [sp, #20]
 800b276:	3307      	adds	r3, #7
 800b278:	f023 0307 	bic.w	r3, r3, #7
 800b27c:	f103 0208 	add.w	r2, r3, #8
 800b280:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b284:	f8d4 b000 	ldr.w	fp, [r4]
 800b288:	f8c8 2000 	str.w	r2, [r8]
 800b28c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b290:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b294:	9307      	str	r3, [sp, #28]
 800b296:	f8cd 8018 	str.w	r8, [sp, #24]
 800b29a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b29e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2a2:	4b9c      	ldr	r3, [pc, #624]	@ (800b514 <_printf_float+0x2c8>)
 800b2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a8:	f7f5 fcb0 	bl	8000c0c <__aeabi_dcmpun>
 800b2ac:	bb70      	cbnz	r0, 800b30c <_printf_float+0xc0>
 800b2ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2b2:	4b98      	ldr	r3, [pc, #608]	@ (800b514 <_printf_float+0x2c8>)
 800b2b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2b8:	f7f5 fc8a 	bl	8000bd0 <__aeabi_dcmple>
 800b2bc:	bb30      	cbnz	r0, 800b30c <_printf_float+0xc0>
 800b2be:	2200      	movs	r2, #0
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	4640      	mov	r0, r8
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	f7f5 fc79 	bl	8000bbc <__aeabi_dcmplt>
 800b2ca:	b110      	cbz	r0, 800b2d2 <_printf_float+0x86>
 800b2cc:	232d      	movs	r3, #45	@ 0x2d
 800b2ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2d2:	4a91      	ldr	r2, [pc, #580]	@ (800b518 <_printf_float+0x2cc>)
 800b2d4:	4b91      	ldr	r3, [pc, #580]	@ (800b51c <_printf_float+0x2d0>)
 800b2d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b2da:	bf8c      	ite	hi
 800b2dc:	4690      	movhi	r8, r2
 800b2de:	4698      	movls	r8, r3
 800b2e0:	2303      	movs	r3, #3
 800b2e2:	6123      	str	r3, [r4, #16]
 800b2e4:	f02b 0304 	bic.w	r3, fp, #4
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	f04f 0900 	mov.w	r9, #0
 800b2ee:	9700      	str	r7, [sp, #0]
 800b2f0:	4633      	mov	r3, r6
 800b2f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	f000 f9d2 	bl	800b6a0 <_printf_common>
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	f040 808d 	bne.w	800b41c <_printf_float+0x1d0>
 800b302:	f04f 30ff 	mov.w	r0, #4294967295
 800b306:	b00d      	add	sp, #52	@ 0x34
 800b308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b30c:	4642      	mov	r2, r8
 800b30e:	464b      	mov	r3, r9
 800b310:	4640      	mov	r0, r8
 800b312:	4649      	mov	r1, r9
 800b314:	f7f5 fc7a 	bl	8000c0c <__aeabi_dcmpun>
 800b318:	b140      	cbz	r0, 800b32c <_printf_float+0xe0>
 800b31a:	464b      	mov	r3, r9
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	bfbc      	itt	lt
 800b320:	232d      	movlt	r3, #45	@ 0x2d
 800b322:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b326:	4a7e      	ldr	r2, [pc, #504]	@ (800b520 <_printf_float+0x2d4>)
 800b328:	4b7e      	ldr	r3, [pc, #504]	@ (800b524 <_printf_float+0x2d8>)
 800b32a:	e7d4      	b.n	800b2d6 <_printf_float+0x8a>
 800b32c:	6863      	ldr	r3, [r4, #4]
 800b32e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b332:	9206      	str	r2, [sp, #24]
 800b334:	1c5a      	adds	r2, r3, #1
 800b336:	d13b      	bne.n	800b3b0 <_printf_float+0x164>
 800b338:	2306      	movs	r3, #6
 800b33a:	6063      	str	r3, [r4, #4]
 800b33c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b340:	2300      	movs	r3, #0
 800b342:	6022      	str	r2, [r4, #0]
 800b344:	9303      	str	r3, [sp, #12]
 800b346:	ab0a      	add	r3, sp, #40	@ 0x28
 800b348:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b34c:	ab09      	add	r3, sp, #36	@ 0x24
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	6861      	ldr	r1, [r4, #4]
 800b352:	ec49 8b10 	vmov	d0, r8, r9
 800b356:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b35a:	4628      	mov	r0, r5
 800b35c:	f7ff fed6 	bl	800b10c <__cvt>
 800b360:	9b06      	ldr	r3, [sp, #24]
 800b362:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b364:	2b47      	cmp	r3, #71	@ 0x47
 800b366:	4680      	mov	r8, r0
 800b368:	d129      	bne.n	800b3be <_printf_float+0x172>
 800b36a:	1cc8      	adds	r0, r1, #3
 800b36c:	db02      	blt.n	800b374 <_printf_float+0x128>
 800b36e:	6863      	ldr	r3, [r4, #4]
 800b370:	4299      	cmp	r1, r3
 800b372:	dd41      	ble.n	800b3f8 <_printf_float+0x1ac>
 800b374:	f1aa 0a02 	sub.w	sl, sl, #2
 800b378:	fa5f fa8a 	uxtb.w	sl, sl
 800b37c:	3901      	subs	r1, #1
 800b37e:	4652      	mov	r2, sl
 800b380:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b384:	9109      	str	r1, [sp, #36]	@ 0x24
 800b386:	f7ff ff26 	bl	800b1d6 <__exponent>
 800b38a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b38c:	1813      	adds	r3, r2, r0
 800b38e:	2a01      	cmp	r2, #1
 800b390:	4681      	mov	r9, r0
 800b392:	6123      	str	r3, [r4, #16]
 800b394:	dc02      	bgt.n	800b39c <_printf_float+0x150>
 800b396:	6822      	ldr	r2, [r4, #0]
 800b398:	07d2      	lsls	r2, r2, #31
 800b39a:	d501      	bpl.n	800b3a0 <_printf_float+0x154>
 800b39c:	3301      	adds	r3, #1
 800b39e:	6123      	str	r3, [r4, #16]
 800b3a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d0a2      	beq.n	800b2ee <_printf_float+0xa2>
 800b3a8:	232d      	movs	r3, #45	@ 0x2d
 800b3aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3ae:	e79e      	b.n	800b2ee <_printf_float+0xa2>
 800b3b0:	9a06      	ldr	r2, [sp, #24]
 800b3b2:	2a47      	cmp	r2, #71	@ 0x47
 800b3b4:	d1c2      	bne.n	800b33c <_printf_float+0xf0>
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d1c0      	bne.n	800b33c <_printf_float+0xf0>
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e7bd      	b.n	800b33a <_printf_float+0xee>
 800b3be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b3c2:	d9db      	bls.n	800b37c <_printf_float+0x130>
 800b3c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b3c8:	d118      	bne.n	800b3fc <_printf_float+0x1b0>
 800b3ca:	2900      	cmp	r1, #0
 800b3cc:	6863      	ldr	r3, [r4, #4]
 800b3ce:	dd0b      	ble.n	800b3e8 <_printf_float+0x19c>
 800b3d0:	6121      	str	r1, [r4, #16]
 800b3d2:	b913      	cbnz	r3, 800b3da <_printf_float+0x18e>
 800b3d4:	6822      	ldr	r2, [r4, #0]
 800b3d6:	07d0      	lsls	r0, r2, #31
 800b3d8:	d502      	bpl.n	800b3e0 <_printf_float+0x194>
 800b3da:	3301      	adds	r3, #1
 800b3dc:	440b      	add	r3, r1
 800b3de:	6123      	str	r3, [r4, #16]
 800b3e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b3e2:	f04f 0900 	mov.w	r9, #0
 800b3e6:	e7db      	b.n	800b3a0 <_printf_float+0x154>
 800b3e8:	b913      	cbnz	r3, 800b3f0 <_printf_float+0x1a4>
 800b3ea:	6822      	ldr	r2, [r4, #0]
 800b3ec:	07d2      	lsls	r2, r2, #31
 800b3ee:	d501      	bpl.n	800b3f4 <_printf_float+0x1a8>
 800b3f0:	3302      	adds	r3, #2
 800b3f2:	e7f4      	b.n	800b3de <_printf_float+0x192>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e7f2      	b.n	800b3de <_printf_float+0x192>
 800b3f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b3fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3fe:	4299      	cmp	r1, r3
 800b400:	db05      	blt.n	800b40e <_printf_float+0x1c2>
 800b402:	6823      	ldr	r3, [r4, #0]
 800b404:	6121      	str	r1, [r4, #16]
 800b406:	07d8      	lsls	r0, r3, #31
 800b408:	d5ea      	bpl.n	800b3e0 <_printf_float+0x194>
 800b40a:	1c4b      	adds	r3, r1, #1
 800b40c:	e7e7      	b.n	800b3de <_printf_float+0x192>
 800b40e:	2900      	cmp	r1, #0
 800b410:	bfd4      	ite	le
 800b412:	f1c1 0202 	rsble	r2, r1, #2
 800b416:	2201      	movgt	r2, #1
 800b418:	4413      	add	r3, r2
 800b41a:	e7e0      	b.n	800b3de <_printf_float+0x192>
 800b41c:	6823      	ldr	r3, [r4, #0]
 800b41e:	055a      	lsls	r2, r3, #21
 800b420:	d407      	bmi.n	800b432 <_printf_float+0x1e6>
 800b422:	6923      	ldr	r3, [r4, #16]
 800b424:	4642      	mov	r2, r8
 800b426:	4631      	mov	r1, r6
 800b428:	4628      	mov	r0, r5
 800b42a:	47b8      	blx	r7
 800b42c:	3001      	adds	r0, #1
 800b42e:	d12b      	bne.n	800b488 <_printf_float+0x23c>
 800b430:	e767      	b.n	800b302 <_printf_float+0xb6>
 800b432:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b436:	f240 80dd 	bls.w	800b5f4 <_printf_float+0x3a8>
 800b43a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b43e:	2200      	movs	r2, #0
 800b440:	2300      	movs	r3, #0
 800b442:	f7f5 fbb1 	bl	8000ba8 <__aeabi_dcmpeq>
 800b446:	2800      	cmp	r0, #0
 800b448:	d033      	beq.n	800b4b2 <_printf_float+0x266>
 800b44a:	4a37      	ldr	r2, [pc, #220]	@ (800b528 <_printf_float+0x2dc>)
 800b44c:	2301      	movs	r3, #1
 800b44e:	4631      	mov	r1, r6
 800b450:	4628      	mov	r0, r5
 800b452:	47b8      	blx	r7
 800b454:	3001      	adds	r0, #1
 800b456:	f43f af54 	beq.w	800b302 <_printf_float+0xb6>
 800b45a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b45e:	4543      	cmp	r3, r8
 800b460:	db02      	blt.n	800b468 <_printf_float+0x21c>
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	07d8      	lsls	r0, r3, #31
 800b466:	d50f      	bpl.n	800b488 <_printf_float+0x23c>
 800b468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b46c:	4631      	mov	r1, r6
 800b46e:	4628      	mov	r0, r5
 800b470:	47b8      	blx	r7
 800b472:	3001      	adds	r0, #1
 800b474:	f43f af45 	beq.w	800b302 <_printf_float+0xb6>
 800b478:	f04f 0900 	mov.w	r9, #0
 800b47c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b480:	f104 0a1a 	add.w	sl, r4, #26
 800b484:	45c8      	cmp	r8, r9
 800b486:	dc09      	bgt.n	800b49c <_printf_float+0x250>
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	079b      	lsls	r3, r3, #30
 800b48c:	f100 8103 	bmi.w	800b696 <_printf_float+0x44a>
 800b490:	68e0      	ldr	r0, [r4, #12]
 800b492:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b494:	4298      	cmp	r0, r3
 800b496:	bfb8      	it	lt
 800b498:	4618      	movlt	r0, r3
 800b49a:	e734      	b.n	800b306 <_printf_float+0xba>
 800b49c:	2301      	movs	r3, #1
 800b49e:	4652      	mov	r2, sl
 800b4a0:	4631      	mov	r1, r6
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	47b8      	blx	r7
 800b4a6:	3001      	adds	r0, #1
 800b4a8:	f43f af2b 	beq.w	800b302 <_printf_float+0xb6>
 800b4ac:	f109 0901 	add.w	r9, r9, #1
 800b4b0:	e7e8      	b.n	800b484 <_printf_float+0x238>
 800b4b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	dc39      	bgt.n	800b52c <_printf_float+0x2e0>
 800b4b8:	4a1b      	ldr	r2, [pc, #108]	@ (800b528 <_printf_float+0x2dc>)
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	4631      	mov	r1, r6
 800b4be:	4628      	mov	r0, r5
 800b4c0:	47b8      	blx	r7
 800b4c2:	3001      	adds	r0, #1
 800b4c4:	f43f af1d 	beq.w	800b302 <_printf_float+0xb6>
 800b4c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b4cc:	ea59 0303 	orrs.w	r3, r9, r3
 800b4d0:	d102      	bne.n	800b4d8 <_printf_float+0x28c>
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	07d9      	lsls	r1, r3, #31
 800b4d6:	d5d7      	bpl.n	800b488 <_printf_float+0x23c>
 800b4d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4dc:	4631      	mov	r1, r6
 800b4de:	4628      	mov	r0, r5
 800b4e0:	47b8      	blx	r7
 800b4e2:	3001      	adds	r0, #1
 800b4e4:	f43f af0d 	beq.w	800b302 <_printf_float+0xb6>
 800b4e8:	f04f 0a00 	mov.w	sl, #0
 800b4ec:	f104 0b1a 	add.w	fp, r4, #26
 800b4f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4f2:	425b      	negs	r3, r3
 800b4f4:	4553      	cmp	r3, sl
 800b4f6:	dc01      	bgt.n	800b4fc <_printf_float+0x2b0>
 800b4f8:	464b      	mov	r3, r9
 800b4fa:	e793      	b.n	800b424 <_printf_float+0x1d8>
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	465a      	mov	r2, fp
 800b500:	4631      	mov	r1, r6
 800b502:	4628      	mov	r0, r5
 800b504:	47b8      	blx	r7
 800b506:	3001      	adds	r0, #1
 800b508:	f43f aefb 	beq.w	800b302 <_printf_float+0xb6>
 800b50c:	f10a 0a01 	add.w	sl, sl, #1
 800b510:	e7ee      	b.n	800b4f0 <_printf_float+0x2a4>
 800b512:	bf00      	nop
 800b514:	7fefffff 	.word	0x7fefffff
 800b518:	08026810 	.word	0x08026810
 800b51c:	0802680c 	.word	0x0802680c
 800b520:	08026818 	.word	0x08026818
 800b524:	08026814 	.word	0x08026814
 800b528:	0802681c 	.word	0x0802681c
 800b52c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b52e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b532:	4553      	cmp	r3, sl
 800b534:	bfa8      	it	ge
 800b536:	4653      	movge	r3, sl
 800b538:	2b00      	cmp	r3, #0
 800b53a:	4699      	mov	r9, r3
 800b53c:	dc36      	bgt.n	800b5ac <_printf_float+0x360>
 800b53e:	f04f 0b00 	mov.w	fp, #0
 800b542:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b546:	f104 021a 	add.w	r2, r4, #26
 800b54a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b54c:	9306      	str	r3, [sp, #24]
 800b54e:	eba3 0309 	sub.w	r3, r3, r9
 800b552:	455b      	cmp	r3, fp
 800b554:	dc31      	bgt.n	800b5ba <_printf_float+0x36e>
 800b556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b558:	459a      	cmp	sl, r3
 800b55a:	dc3a      	bgt.n	800b5d2 <_printf_float+0x386>
 800b55c:	6823      	ldr	r3, [r4, #0]
 800b55e:	07da      	lsls	r2, r3, #31
 800b560:	d437      	bmi.n	800b5d2 <_printf_float+0x386>
 800b562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b564:	ebaa 0903 	sub.w	r9, sl, r3
 800b568:	9b06      	ldr	r3, [sp, #24]
 800b56a:	ebaa 0303 	sub.w	r3, sl, r3
 800b56e:	4599      	cmp	r9, r3
 800b570:	bfa8      	it	ge
 800b572:	4699      	movge	r9, r3
 800b574:	f1b9 0f00 	cmp.w	r9, #0
 800b578:	dc33      	bgt.n	800b5e2 <_printf_float+0x396>
 800b57a:	f04f 0800 	mov.w	r8, #0
 800b57e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b582:	f104 0b1a 	add.w	fp, r4, #26
 800b586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b588:	ebaa 0303 	sub.w	r3, sl, r3
 800b58c:	eba3 0309 	sub.w	r3, r3, r9
 800b590:	4543      	cmp	r3, r8
 800b592:	f77f af79 	ble.w	800b488 <_printf_float+0x23c>
 800b596:	2301      	movs	r3, #1
 800b598:	465a      	mov	r2, fp
 800b59a:	4631      	mov	r1, r6
 800b59c:	4628      	mov	r0, r5
 800b59e:	47b8      	blx	r7
 800b5a0:	3001      	adds	r0, #1
 800b5a2:	f43f aeae 	beq.w	800b302 <_printf_float+0xb6>
 800b5a6:	f108 0801 	add.w	r8, r8, #1
 800b5aa:	e7ec      	b.n	800b586 <_printf_float+0x33a>
 800b5ac:	4642      	mov	r2, r8
 800b5ae:	4631      	mov	r1, r6
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	47b8      	blx	r7
 800b5b4:	3001      	adds	r0, #1
 800b5b6:	d1c2      	bne.n	800b53e <_printf_float+0x2f2>
 800b5b8:	e6a3      	b.n	800b302 <_printf_float+0xb6>
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	4631      	mov	r1, r6
 800b5be:	4628      	mov	r0, r5
 800b5c0:	9206      	str	r2, [sp, #24]
 800b5c2:	47b8      	blx	r7
 800b5c4:	3001      	adds	r0, #1
 800b5c6:	f43f ae9c 	beq.w	800b302 <_printf_float+0xb6>
 800b5ca:	9a06      	ldr	r2, [sp, #24]
 800b5cc:	f10b 0b01 	add.w	fp, fp, #1
 800b5d0:	e7bb      	b.n	800b54a <_printf_float+0x2fe>
 800b5d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	4628      	mov	r0, r5
 800b5da:	47b8      	blx	r7
 800b5dc:	3001      	adds	r0, #1
 800b5de:	d1c0      	bne.n	800b562 <_printf_float+0x316>
 800b5e0:	e68f      	b.n	800b302 <_printf_float+0xb6>
 800b5e2:	9a06      	ldr	r2, [sp, #24]
 800b5e4:	464b      	mov	r3, r9
 800b5e6:	4442      	add	r2, r8
 800b5e8:	4631      	mov	r1, r6
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	47b8      	blx	r7
 800b5ee:	3001      	adds	r0, #1
 800b5f0:	d1c3      	bne.n	800b57a <_printf_float+0x32e>
 800b5f2:	e686      	b.n	800b302 <_printf_float+0xb6>
 800b5f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b5f8:	f1ba 0f01 	cmp.w	sl, #1
 800b5fc:	dc01      	bgt.n	800b602 <_printf_float+0x3b6>
 800b5fe:	07db      	lsls	r3, r3, #31
 800b600:	d536      	bpl.n	800b670 <_printf_float+0x424>
 800b602:	2301      	movs	r3, #1
 800b604:	4642      	mov	r2, r8
 800b606:	4631      	mov	r1, r6
 800b608:	4628      	mov	r0, r5
 800b60a:	47b8      	blx	r7
 800b60c:	3001      	adds	r0, #1
 800b60e:	f43f ae78 	beq.w	800b302 <_printf_float+0xb6>
 800b612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b616:	4631      	mov	r1, r6
 800b618:	4628      	mov	r0, r5
 800b61a:	47b8      	blx	r7
 800b61c:	3001      	adds	r0, #1
 800b61e:	f43f ae70 	beq.w	800b302 <_printf_float+0xb6>
 800b622:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b626:	2200      	movs	r2, #0
 800b628:	2300      	movs	r3, #0
 800b62a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b62e:	f7f5 fabb 	bl	8000ba8 <__aeabi_dcmpeq>
 800b632:	b9c0      	cbnz	r0, 800b666 <_printf_float+0x41a>
 800b634:	4653      	mov	r3, sl
 800b636:	f108 0201 	add.w	r2, r8, #1
 800b63a:	4631      	mov	r1, r6
 800b63c:	4628      	mov	r0, r5
 800b63e:	47b8      	blx	r7
 800b640:	3001      	adds	r0, #1
 800b642:	d10c      	bne.n	800b65e <_printf_float+0x412>
 800b644:	e65d      	b.n	800b302 <_printf_float+0xb6>
 800b646:	2301      	movs	r3, #1
 800b648:	465a      	mov	r2, fp
 800b64a:	4631      	mov	r1, r6
 800b64c:	4628      	mov	r0, r5
 800b64e:	47b8      	blx	r7
 800b650:	3001      	adds	r0, #1
 800b652:	f43f ae56 	beq.w	800b302 <_printf_float+0xb6>
 800b656:	f108 0801 	add.w	r8, r8, #1
 800b65a:	45d0      	cmp	r8, sl
 800b65c:	dbf3      	blt.n	800b646 <_printf_float+0x3fa>
 800b65e:	464b      	mov	r3, r9
 800b660:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b664:	e6df      	b.n	800b426 <_printf_float+0x1da>
 800b666:	f04f 0800 	mov.w	r8, #0
 800b66a:	f104 0b1a 	add.w	fp, r4, #26
 800b66e:	e7f4      	b.n	800b65a <_printf_float+0x40e>
 800b670:	2301      	movs	r3, #1
 800b672:	4642      	mov	r2, r8
 800b674:	e7e1      	b.n	800b63a <_printf_float+0x3ee>
 800b676:	2301      	movs	r3, #1
 800b678:	464a      	mov	r2, r9
 800b67a:	4631      	mov	r1, r6
 800b67c:	4628      	mov	r0, r5
 800b67e:	47b8      	blx	r7
 800b680:	3001      	adds	r0, #1
 800b682:	f43f ae3e 	beq.w	800b302 <_printf_float+0xb6>
 800b686:	f108 0801 	add.w	r8, r8, #1
 800b68a:	68e3      	ldr	r3, [r4, #12]
 800b68c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b68e:	1a5b      	subs	r3, r3, r1
 800b690:	4543      	cmp	r3, r8
 800b692:	dcf0      	bgt.n	800b676 <_printf_float+0x42a>
 800b694:	e6fc      	b.n	800b490 <_printf_float+0x244>
 800b696:	f04f 0800 	mov.w	r8, #0
 800b69a:	f104 0919 	add.w	r9, r4, #25
 800b69e:	e7f4      	b.n	800b68a <_printf_float+0x43e>

0800b6a0 <_printf_common>:
 800b6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a4:	4616      	mov	r6, r2
 800b6a6:	4698      	mov	r8, r3
 800b6a8:	688a      	ldr	r2, [r1, #8]
 800b6aa:	690b      	ldr	r3, [r1, #16]
 800b6ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	bfb8      	it	lt
 800b6b4:	4613      	movlt	r3, r2
 800b6b6:	6033      	str	r3, [r6, #0]
 800b6b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b6bc:	4607      	mov	r7, r0
 800b6be:	460c      	mov	r4, r1
 800b6c0:	b10a      	cbz	r2, 800b6c6 <_printf_common+0x26>
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	6033      	str	r3, [r6, #0]
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	0699      	lsls	r1, r3, #26
 800b6ca:	bf42      	ittt	mi
 800b6cc:	6833      	ldrmi	r3, [r6, #0]
 800b6ce:	3302      	addmi	r3, #2
 800b6d0:	6033      	strmi	r3, [r6, #0]
 800b6d2:	6825      	ldr	r5, [r4, #0]
 800b6d4:	f015 0506 	ands.w	r5, r5, #6
 800b6d8:	d106      	bne.n	800b6e8 <_printf_common+0x48>
 800b6da:	f104 0a19 	add.w	sl, r4, #25
 800b6de:	68e3      	ldr	r3, [r4, #12]
 800b6e0:	6832      	ldr	r2, [r6, #0]
 800b6e2:	1a9b      	subs	r3, r3, r2
 800b6e4:	42ab      	cmp	r3, r5
 800b6e6:	dc26      	bgt.n	800b736 <_printf_common+0x96>
 800b6e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b6ec:	6822      	ldr	r2, [r4, #0]
 800b6ee:	3b00      	subs	r3, #0
 800b6f0:	bf18      	it	ne
 800b6f2:	2301      	movne	r3, #1
 800b6f4:	0692      	lsls	r2, r2, #26
 800b6f6:	d42b      	bmi.n	800b750 <_printf_common+0xb0>
 800b6f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b6fc:	4641      	mov	r1, r8
 800b6fe:	4638      	mov	r0, r7
 800b700:	47c8      	blx	r9
 800b702:	3001      	adds	r0, #1
 800b704:	d01e      	beq.n	800b744 <_printf_common+0xa4>
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	6922      	ldr	r2, [r4, #16]
 800b70a:	f003 0306 	and.w	r3, r3, #6
 800b70e:	2b04      	cmp	r3, #4
 800b710:	bf02      	ittt	eq
 800b712:	68e5      	ldreq	r5, [r4, #12]
 800b714:	6833      	ldreq	r3, [r6, #0]
 800b716:	1aed      	subeq	r5, r5, r3
 800b718:	68a3      	ldr	r3, [r4, #8]
 800b71a:	bf0c      	ite	eq
 800b71c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b720:	2500      	movne	r5, #0
 800b722:	4293      	cmp	r3, r2
 800b724:	bfc4      	itt	gt
 800b726:	1a9b      	subgt	r3, r3, r2
 800b728:	18ed      	addgt	r5, r5, r3
 800b72a:	2600      	movs	r6, #0
 800b72c:	341a      	adds	r4, #26
 800b72e:	42b5      	cmp	r5, r6
 800b730:	d11a      	bne.n	800b768 <_printf_common+0xc8>
 800b732:	2000      	movs	r0, #0
 800b734:	e008      	b.n	800b748 <_printf_common+0xa8>
 800b736:	2301      	movs	r3, #1
 800b738:	4652      	mov	r2, sl
 800b73a:	4641      	mov	r1, r8
 800b73c:	4638      	mov	r0, r7
 800b73e:	47c8      	blx	r9
 800b740:	3001      	adds	r0, #1
 800b742:	d103      	bne.n	800b74c <_printf_common+0xac>
 800b744:	f04f 30ff 	mov.w	r0, #4294967295
 800b748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b74c:	3501      	adds	r5, #1
 800b74e:	e7c6      	b.n	800b6de <_printf_common+0x3e>
 800b750:	18e1      	adds	r1, r4, r3
 800b752:	1c5a      	adds	r2, r3, #1
 800b754:	2030      	movs	r0, #48	@ 0x30
 800b756:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b75a:	4422      	add	r2, r4
 800b75c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b760:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b764:	3302      	adds	r3, #2
 800b766:	e7c7      	b.n	800b6f8 <_printf_common+0x58>
 800b768:	2301      	movs	r3, #1
 800b76a:	4622      	mov	r2, r4
 800b76c:	4641      	mov	r1, r8
 800b76e:	4638      	mov	r0, r7
 800b770:	47c8      	blx	r9
 800b772:	3001      	adds	r0, #1
 800b774:	d0e6      	beq.n	800b744 <_printf_common+0xa4>
 800b776:	3601      	adds	r6, #1
 800b778:	e7d9      	b.n	800b72e <_printf_common+0x8e>
	...

0800b77c <_printf_i>:
 800b77c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b780:	7e0f      	ldrb	r7, [r1, #24]
 800b782:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b784:	2f78      	cmp	r7, #120	@ 0x78
 800b786:	4691      	mov	r9, r2
 800b788:	4680      	mov	r8, r0
 800b78a:	460c      	mov	r4, r1
 800b78c:	469a      	mov	sl, r3
 800b78e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b792:	d807      	bhi.n	800b7a4 <_printf_i+0x28>
 800b794:	2f62      	cmp	r7, #98	@ 0x62
 800b796:	d80a      	bhi.n	800b7ae <_printf_i+0x32>
 800b798:	2f00      	cmp	r7, #0
 800b79a:	f000 80d1 	beq.w	800b940 <_printf_i+0x1c4>
 800b79e:	2f58      	cmp	r7, #88	@ 0x58
 800b7a0:	f000 80b8 	beq.w	800b914 <_printf_i+0x198>
 800b7a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b7ac:	e03a      	b.n	800b824 <_printf_i+0xa8>
 800b7ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b7b2:	2b15      	cmp	r3, #21
 800b7b4:	d8f6      	bhi.n	800b7a4 <_printf_i+0x28>
 800b7b6:	a101      	add	r1, pc, #4	@ (adr r1, 800b7bc <_printf_i+0x40>)
 800b7b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7bc:	0800b815 	.word	0x0800b815
 800b7c0:	0800b829 	.word	0x0800b829
 800b7c4:	0800b7a5 	.word	0x0800b7a5
 800b7c8:	0800b7a5 	.word	0x0800b7a5
 800b7cc:	0800b7a5 	.word	0x0800b7a5
 800b7d0:	0800b7a5 	.word	0x0800b7a5
 800b7d4:	0800b829 	.word	0x0800b829
 800b7d8:	0800b7a5 	.word	0x0800b7a5
 800b7dc:	0800b7a5 	.word	0x0800b7a5
 800b7e0:	0800b7a5 	.word	0x0800b7a5
 800b7e4:	0800b7a5 	.word	0x0800b7a5
 800b7e8:	0800b927 	.word	0x0800b927
 800b7ec:	0800b853 	.word	0x0800b853
 800b7f0:	0800b8e1 	.word	0x0800b8e1
 800b7f4:	0800b7a5 	.word	0x0800b7a5
 800b7f8:	0800b7a5 	.word	0x0800b7a5
 800b7fc:	0800b949 	.word	0x0800b949
 800b800:	0800b7a5 	.word	0x0800b7a5
 800b804:	0800b853 	.word	0x0800b853
 800b808:	0800b7a5 	.word	0x0800b7a5
 800b80c:	0800b7a5 	.word	0x0800b7a5
 800b810:	0800b8e9 	.word	0x0800b8e9
 800b814:	6833      	ldr	r3, [r6, #0]
 800b816:	1d1a      	adds	r2, r3, #4
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	6032      	str	r2, [r6, #0]
 800b81c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b820:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b824:	2301      	movs	r3, #1
 800b826:	e09c      	b.n	800b962 <_printf_i+0x1e6>
 800b828:	6833      	ldr	r3, [r6, #0]
 800b82a:	6820      	ldr	r0, [r4, #0]
 800b82c:	1d19      	adds	r1, r3, #4
 800b82e:	6031      	str	r1, [r6, #0]
 800b830:	0606      	lsls	r6, r0, #24
 800b832:	d501      	bpl.n	800b838 <_printf_i+0xbc>
 800b834:	681d      	ldr	r5, [r3, #0]
 800b836:	e003      	b.n	800b840 <_printf_i+0xc4>
 800b838:	0645      	lsls	r5, r0, #25
 800b83a:	d5fb      	bpl.n	800b834 <_printf_i+0xb8>
 800b83c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b840:	2d00      	cmp	r5, #0
 800b842:	da03      	bge.n	800b84c <_printf_i+0xd0>
 800b844:	232d      	movs	r3, #45	@ 0x2d
 800b846:	426d      	negs	r5, r5
 800b848:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b84c:	4858      	ldr	r0, [pc, #352]	@ (800b9b0 <_printf_i+0x234>)
 800b84e:	230a      	movs	r3, #10
 800b850:	e011      	b.n	800b876 <_printf_i+0xfa>
 800b852:	6821      	ldr	r1, [r4, #0]
 800b854:	6833      	ldr	r3, [r6, #0]
 800b856:	0608      	lsls	r0, r1, #24
 800b858:	f853 5b04 	ldr.w	r5, [r3], #4
 800b85c:	d402      	bmi.n	800b864 <_printf_i+0xe8>
 800b85e:	0649      	lsls	r1, r1, #25
 800b860:	bf48      	it	mi
 800b862:	b2ad      	uxthmi	r5, r5
 800b864:	2f6f      	cmp	r7, #111	@ 0x6f
 800b866:	4852      	ldr	r0, [pc, #328]	@ (800b9b0 <_printf_i+0x234>)
 800b868:	6033      	str	r3, [r6, #0]
 800b86a:	bf14      	ite	ne
 800b86c:	230a      	movne	r3, #10
 800b86e:	2308      	moveq	r3, #8
 800b870:	2100      	movs	r1, #0
 800b872:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b876:	6866      	ldr	r6, [r4, #4]
 800b878:	60a6      	str	r6, [r4, #8]
 800b87a:	2e00      	cmp	r6, #0
 800b87c:	db05      	blt.n	800b88a <_printf_i+0x10e>
 800b87e:	6821      	ldr	r1, [r4, #0]
 800b880:	432e      	orrs	r6, r5
 800b882:	f021 0104 	bic.w	r1, r1, #4
 800b886:	6021      	str	r1, [r4, #0]
 800b888:	d04b      	beq.n	800b922 <_printf_i+0x1a6>
 800b88a:	4616      	mov	r6, r2
 800b88c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b890:	fb03 5711 	mls	r7, r3, r1, r5
 800b894:	5dc7      	ldrb	r7, [r0, r7]
 800b896:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b89a:	462f      	mov	r7, r5
 800b89c:	42bb      	cmp	r3, r7
 800b89e:	460d      	mov	r5, r1
 800b8a0:	d9f4      	bls.n	800b88c <_printf_i+0x110>
 800b8a2:	2b08      	cmp	r3, #8
 800b8a4:	d10b      	bne.n	800b8be <_printf_i+0x142>
 800b8a6:	6823      	ldr	r3, [r4, #0]
 800b8a8:	07df      	lsls	r7, r3, #31
 800b8aa:	d508      	bpl.n	800b8be <_printf_i+0x142>
 800b8ac:	6923      	ldr	r3, [r4, #16]
 800b8ae:	6861      	ldr	r1, [r4, #4]
 800b8b0:	4299      	cmp	r1, r3
 800b8b2:	bfde      	ittt	le
 800b8b4:	2330      	movle	r3, #48	@ 0x30
 800b8b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b8ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b8be:	1b92      	subs	r2, r2, r6
 800b8c0:	6122      	str	r2, [r4, #16]
 800b8c2:	f8cd a000 	str.w	sl, [sp]
 800b8c6:	464b      	mov	r3, r9
 800b8c8:	aa03      	add	r2, sp, #12
 800b8ca:	4621      	mov	r1, r4
 800b8cc:	4640      	mov	r0, r8
 800b8ce:	f7ff fee7 	bl	800b6a0 <_printf_common>
 800b8d2:	3001      	adds	r0, #1
 800b8d4:	d14a      	bne.n	800b96c <_printf_i+0x1f0>
 800b8d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b8da:	b004      	add	sp, #16
 800b8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e0:	6823      	ldr	r3, [r4, #0]
 800b8e2:	f043 0320 	orr.w	r3, r3, #32
 800b8e6:	6023      	str	r3, [r4, #0]
 800b8e8:	4832      	ldr	r0, [pc, #200]	@ (800b9b4 <_printf_i+0x238>)
 800b8ea:	2778      	movs	r7, #120	@ 0x78
 800b8ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b8f0:	6823      	ldr	r3, [r4, #0]
 800b8f2:	6831      	ldr	r1, [r6, #0]
 800b8f4:	061f      	lsls	r7, r3, #24
 800b8f6:	f851 5b04 	ldr.w	r5, [r1], #4
 800b8fa:	d402      	bmi.n	800b902 <_printf_i+0x186>
 800b8fc:	065f      	lsls	r7, r3, #25
 800b8fe:	bf48      	it	mi
 800b900:	b2ad      	uxthmi	r5, r5
 800b902:	6031      	str	r1, [r6, #0]
 800b904:	07d9      	lsls	r1, r3, #31
 800b906:	bf44      	itt	mi
 800b908:	f043 0320 	orrmi.w	r3, r3, #32
 800b90c:	6023      	strmi	r3, [r4, #0]
 800b90e:	b11d      	cbz	r5, 800b918 <_printf_i+0x19c>
 800b910:	2310      	movs	r3, #16
 800b912:	e7ad      	b.n	800b870 <_printf_i+0xf4>
 800b914:	4826      	ldr	r0, [pc, #152]	@ (800b9b0 <_printf_i+0x234>)
 800b916:	e7e9      	b.n	800b8ec <_printf_i+0x170>
 800b918:	6823      	ldr	r3, [r4, #0]
 800b91a:	f023 0320 	bic.w	r3, r3, #32
 800b91e:	6023      	str	r3, [r4, #0]
 800b920:	e7f6      	b.n	800b910 <_printf_i+0x194>
 800b922:	4616      	mov	r6, r2
 800b924:	e7bd      	b.n	800b8a2 <_printf_i+0x126>
 800b926:	6833      	ldr	r3, [r6, #0]
 800b928:	6825      	ldr	r5, [r4, #0]
 800b92a:	6961      	ldr	r1, [r4, #20]
 800b92c:	1d18      	adds	r0, r3, #4
 800b92e:	6030      	str	r0, [r6, #0]
 800b930:	062e      	lsls	r6, r5, #24
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	d501      	bpl.n	800b93a <_printf_i+0x1be>
 800b936:	6019      	str	r1, [r3, #0]
 800b938:	e002      	b.n	800b940 <_printf_i+0x1c4>
 800b93a:	0668      	lsls	r0, r5, #25
 800b93c:	d5fb      	bpl.n	800b936 <_printf_i+0x1ba>
 800b93e:	8019      	strh	r1, [r3, #0]
 800b940:	2300      	movs	r3, #0
 800b942:	6123      	str	r3, [r4, #16]
 800b944:	4616      	mov	r6, r2
 800b946:	e7bc      	b.n	800b8c2 <_printf_i+0x146>
 800b948:	6833      	ldr	r3, [r6, #0]
 800b94a:	1d1a      	adds	r2, r3, #4
 800b94c:	6032      	str	r2, [r6, #0]
 800b94e:	681e      	ldr	r6, [r3, #0]
 800b950:	6862      	ldr	r2, [r4, #4]
 800b952:	2100      	movs	r1, #0
 800b954:	4630      	mov	r0, r6
 800b956:	f7f4 fcab 	bl	80002b0 <memchr>
 800b95a:	b108      	cbz	r0, 800b960 <_printf_i+0x1e4>
 800b95c:	1b80      	subs	r0, r0, r6
 800b95e:	6060      	str	r0, [r4, #4]
 800b960:	6863      	ldr	r3, [r4, #4]
 800b962:	6123      	str	r3, [r4, #16]
 800b964:	2300      	movs	r3, #0
 800b966:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b96a:	e7aa      	b.n	800b8c2 <_printf_i+0x146>
 800b96c:	6923      	ldr	r3, [r4, #16]
 800b96e:	4632      	mov	r2, r6
 800b970:	4649      	mov	r1, r9
 800b972:	4640      	mov	r0, r8
 800b974:	47d0      	blx	sl
 800b976:	3001      	adds	r0, #1
 800b978:	d0ad      	beq.n	800b8d6 <_printf_i+0x15a>
 800b97a:	6823      	ldr	r3, [r4, #0]
 800b97c:	079b      	lsls	r3, r3, #30
 800b97e:	d413      	bmi.n	800b9a8 <_printf_i+0x22c>
 800b980:	68e0      	ldr	r0, [r4, #12]
 800b982:	9b03      	ldr	r3, [sp, #12]
 800b984:	4298      	cmp	r0, r3
 800b986:	bfb8      	it	lt
 800b988:	4618      	movlt	r0, r3
 800b98a:	e7a6      	b.n	800b8da <_printf_i+0x15e>
 800b98c:	2301      	movs	r3, #1
 800b98e:	4632      	mov	r2, r6
 800b990:	4649      	mov	r1, r9
 800b992:	4640      	mov	r0, r8
 800b994:	47d0      	blx	sl
 800b996:	3001      	adds	r0, #1
 800b998:	d09d      	beq.n	800b8d6 <_printf_i+0x15a>
 800b99a:	3501      	adds	r5, #1
 800b99c:	68e3      	ldr	r3, [r4, #12]
 800b99e:	9903      	ldr	r1, [sp, #12]
 800b9a0:	1a5b      	subs	r3, r3, r1
 800b9a2:	42ab      	cmp	r3, r5
 800b9a4:	dcf2      	bgt.n	800b98c <_printf_i+0x210>
 800b9a6:	e7eb      	b.n	800b980 <_printf_i+0x204>
 800b9a8:	2500      	movs	r5, #0
 800b9aa:	f104 0619 	add.w	r6, r4, #25
 800b9ae:	e7f5      	b.n	800b99c <_printf_i+0x220>
 800b9b0:	0802681e 	.word	0x0802681e
 800b9b4:	0802682f 	.word	0x0802682f

0800b9b8 <std>:
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	b510      	push	{r4, lr}
 800b9bc:	4604      	mov	r4, r0
 800b9be:	e9c0 3300 	strd	r3, r3, [r0]
 800b9c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b9c6:	6083      	str	r3, [r0, #8]
 800b9c8:	8181      	strh	r1, [r0, #12]
 800b9ca:	6643      	str	r3, [r0, #100]	@ 0x64
 800b9cc:	81c2      	strh	r2, [r0, #14]
 800b9ce:	6183      	str	r3, [r0, #24]
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	2208      	movs	r2, #8
 800b9d4:	305c      	adds	r0, #92	@ 0x5c
 800b9d6:	f000 f94c 	bl	800bc72 <memset>
 800b9da:	4b0d      	ldr	r3, [pc, #52]	@ (800ba10 <std+0x58>)
 800b9dc:	6263      	str	r3, [r4, #36]	@ 0x24
 800b9de:	4b0d      	ldr	r3, [pc, #52]	@ (800ba14 <std+0x5c>)
 800b9e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b9e2:	4b0d      	ldr	r3, [pc, #52]	@ (800ba18 <std+0x60>)
 800b9e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b9e6:	4b0d      	ldr	r3, [pc, #52]	@ (800ba1c <std+0x64>)
 800b9e8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b9ea:	4b0d      	ldr	r3, [pc, #52]	@ (800ba20 <std+0x68>)
 800b9ec:	6224      	str	r4, [r4, #32]
 800b9ee:	429c      	cmp	r4, r3
 800b9f0:	d006      	beq.n	800ba00 <std+0x48>
 800b9f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b9f6:	4294      	cmp	r4, r2
 800b9f8:	d002      	beq.n	800ba00 <std+0x48>
 800b9fa:	33d0      	adds	r3, #208	@ 0xd0
 800b9fc:	429c      	cmp	r4, r3
 800b9fe:	d105      	bne.n	800ba0c <std+0x54>
 800ba00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ba04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba08:	f000 b9aa 	b.w	800bd60 <__retarget_lock_init_recursive>
 800ba0c:	bd10      	pop	{r4, pc}
 800ba0e:	bf00      	nop
 800ba10:	0800bbed 	.word	0x0800bbed
 800ba14:	0800bc0f 	.word	0x0800bc0f
 800ba18:	0800bc47 	.word	0x0800bc47
 800ba1c:	0800bc6b 	.word	0x0800bc6b
 800ba20:	200026bc 	.word	0x200026bc

0800ba24 <stdio_exit_handler>:
 800ba24:	4a02      	ldr	r2, [pc, #8]	@ (800ba30 <stdio_exit_handler+0xc>)
 800ba26:	4903      	ldr	r1, [pc, #12]	@ (800ba34 <stdio_exit_handler+0x10>)
 800ba28:	4803      	ldr	r0, [pc, #12]	@ (800ba38 <stdio_exit_handler+0x14>)
 800ba2a:	f000 b869 	b.w	800bb00 <_fwalk_sglue>
 800ba2e:	bf00      	nop
 800ba30:	2000019c 	.word	0x2000019c
 800ba34:	0800d6c5 	.word	0x0800d6c5
 800ba38:	200001ac 	.word	0x200001ac

0800ba3c <cleanup_stdio>:
 800ba3c:	6841      	ldr	r1, [r0, #4]
 800ba3e:	4b0c      	ldr	r3, [pc, #48]	@ (800ba70 <cleanup_stdio+0x34>)
 800ba40:	4299      	cmp	r1, r3
 800ba42:	b510      	push	{r4, lr}
 800ba44:	4604      	mov	r4, r0
 800ba46:	d001      	beq.n	800ba4c <cleanup_stdio+0x10>
 800ba48:	f001 fe3c 	bl	800d6c4 <_fflush_r>
 800ba4c:	68a1      	ldr	r1, [r4, #8]
 800ba4e:	4b09      	ldr	r3, [pc, #36]	@ (800ba74 <cleanup_stdio+0x38>)
 800ba50:	4299      	cmp	r1, r3
 800ba52:	d002      	beq.n	800ba5a <cleanup_stdio+0x1e>
 800ba54:	4620      	mov	r0, r4
 800ba56:	f001 fe35 	bl	800d6c4 <_fflush_r>
 800ba5a:	68e1      	ldr	r1, [r4, #12]
 800ba5c:	4b06      	ldr	r3, [pc, #24]	@ (800ba78 <cleanup_stdio+0x3c>)
 800ba5e:	4299      	cmp	r1, r3
 800ba60:	d004      	beq.n	800ba6c <cleanup_stdio+0x30>
 800ba62:	4620      	mov	r0, r4
 800ba64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba68:	f001 be2c 	b.w	800d6c4 <_fflush_r>
 800ba6c:	bd10      	pop	{r4, pc}
 800ba6e:	bf00      	nop
 800ba70:	200026bc 	.word	0x200026bc
 800ba74:	20002724 	.word	0x20002724
 800ba78:	2000278c 	.word	0x2000278c

0800ba7c <global_stdio_init.part.0>:
 800ba7c:	b510      	push	{r4, lr}
 800ba7e:	4b0b      	ldr	r3, [pc, #44]	@ (800baac <global_stdio_init.part.0+0x30>)
 800ba80:	4c0b      	ldr	r4, [pc, #44]	@ (800bab0 <global_stdio_init.part.0+0x34>)
 800ba82:	4a0c      	ldr	r2, [pc, #48]	@ (800bab4 <global_stdio_init.part.0+0x38>)
 800ba84:	601a      	str	r2, [r3, #0]
 800ba86:	4620      	mov	r0, r4
 800ba88:	2200      	movs	r2, #0
 800ba8a:	2104      	movs	r1, #4
 800ba8c:	f7ff ff94 	bl	800b9b8 <std>
 800ba90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ba94:	2201      	movs	r2, #1
 800ba96:	2109      	movs	r1, #9
 800ba98:	f7ff ff8e 	bl	800b9b8 <std>
 800ba9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800baa0:	2202      	movs	r2, #2
 800baa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baa6:	2112      	movs	r1, #18
 800baa8:	f7ff bf86 	b.w	800b9b8 <std>
 800baac:	200027f4 	.word	0x200027f4
 800bab0:	200026bc 	.word	0x200026bc
 800bab4:	0800ba25 	.word	0x0800ba25

0800bab8 <__sfp_lock_acquire>:
 800bab8:	4801      	ldr	r0, [pc, #4]	@ (800bac0 <__sfp_lock_acquire+0x8>)
 800baba:	f000 b952 	b.w	800bd62 <__retarget_lock_acquire_recursive>
 800babe:	bf00      	nop
 800bac0:	200027fd 	.word	0x200027fd

0800bac4 <__sfp_lock_release>:
 800bac4:	4801      	ldr	r0, [pc, #4]	@ (800bacc <__sfp_lock_release+0x8>)
 800bac6:	f000 b94d 	b.w	800bd64 <__retarget_lock_release_recursive>
 800baca:	bf00      	nop
 800bacc:	200027fd 	.word	0x200027fd

0800bad0 <__sinit>:
 800bad0:	b510      	push	{r4, lr}
 800bad2:	4604      	mov	r4, r0
 800bad4:	f7ff fff0 	bl	800bab8 <__sfp_lock_acquire>
 800bad8:	6a23      	ldr	r3, [r4, #32]
 800bada:	b11b      	cbz	r3, 800bae4 <__sinit+0x14>
 800badc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bae0:	f7ff bff0 	b.w	800bac4 <__sfp_lock_release>
 800bae4:	4b04      	ldr	r3, [pc, #16]	@ (800baf8 <__sinit+0x28>)
 800bae6:	6223      	str	r3, [r4, #32]
 800bae8:	4b04      	ldr	r3, [pc, #16]	@ (800bafc <__sinit+0x2c>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d1f5      	bne.n	800badc <__sinit+0xc>
 800baf0:	f7ff ffc4 	bl	800ba7c <global_stdio_init.part.0>
 800baf4:	e7f2      	b.n	800badc <__sinit+0xc>
 800baf6:	bf00      	nop
 800baf8:	0800ba3d 	.word	0x0800ba3d
 800bafc:	200027f4 	.word	0x200027f4

0800bb00 <_fwalk_sglue>:
 800bb00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb04:	4607      	mov	r7, r0
 800bb06:	4688      	mov	r8, r1
 800bb08:	4614      	mov	r4, r2
 800bb0a:	2600      	movs	r6, #0
 800bb0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb10:	f1b9 0901 	subs.w	r9, r9, #1
 800bb14:	d505      	bpl.n	800bb22 <_fwalk_sglue+0x22>
 800bb16:	6824      	ldr	r4, [r4, #0]
 800bb18:	2c00      	cmp	r4, #0
 800bb1a:	d1f7      	bne.n	800bb0c <_fwalk_sglue+0xc>
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb22:	89ab      	ldrh	r3, [r5, #12]
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d907      	bls.n	800bb38 <_fwalk_sglue+0x38>
 800bb28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	d003      	beq.n	800bb38 <_fwalk_sglue+0x38>
 800bb30:	4629      	mov	r1, r5
 800bb32:	4638      	mov	r0, r7
 800bb34:	47c0      	blx	r8
 800bb36:	4306      	orrs	r6, r0
 800bb38:	3568      	adds	r5, #104	@ 0x68
 800bb3a:	e7e9      	b.n	800bb10 <_fwalk_sglue+0x10>

0800bb3c <sniprintf>:
 800bb3c:	b40c      	push	{r2, r3}
 800bb3e:	b530      	push	{r4, r5, lr}
 800bb40:	4b18      	ldr	r3, [pc, #96]	@ (800bba4 <sniprintf+0x68>)
 800bb42:	1e0c      	subs	r4, r1, #0
 800bb44:	681d      	ldr	r5, [r3, #0]
 800bb46:	b09d      	sub	sp, #116	@ 0x74
 800bb48:	da08      	bge.n	800bb5c <sniprintf+0x20>
 800bb4a:	238b      	movs	r3, #139	@ 0x8b
 800bb4c:	602b      	str	r3, [r5, #0]
 800bb4e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb52:	b01d      	add	sp, #116	@ 0x74
 800bb54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb58:	b002      	add	sp, #8
 800bb5a:	4770      	bx	lr
 800bb5c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bb60:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bb64:	f04f 0300 	mov.w	r3, #0
 800bb68:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bb6a:	bf14      	ite	ne
 800bb6c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bb70:	4623      	moveq	r3, r4
 800bb72:	9304      	str	r3, [sp, #16]
 800bb74:	9307      	str	r3, [sp, #28]
 800bb76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bb7a:	9002      	str	r0, [sp, #8]
 800bb7c:	9006      	str	r0, [sp, #24]
 800bb7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb82:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bb84:	ab21      	add	r3, sp, #132	@ 0x84
 800bb86:	a902      	add	r1, sp, #8
 800bb88:	4628      	mov	r0, r5
 800bb8a:	9301      	str	r3, [sp, #4]
 800bb8c:	f001 fc1a 	bl	800d3c4 <_svfiprintf_r>
 800bb90:	1c43      	adds	r3, r0, #1
 800bb92:	bfbc      	itt	lt
 800bb94:	238b      	movlt	r3, #139	@ 0x8b
 800bb96:	602b      	strlt	r3, [r5, #0]
 800bb98:	2c00      	cmp	r4, #0
 800bb9a:	d0da      	beq.n	800bb52 <sniprintf+0x16>
 800bb9c:	9b02      	ldr	r3, [sp, #8]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	701a      	strb	r2, [r3, #0]
 800bba2:	e7d6      	b.n	800bb52 <sniprintf+0x16>
 800bba4:	200001a8 	.word	0x200001a8

0800bba8 <siprintf>:
 800bba8:	b40e      	push	{r1, r2, r3}
 800bbaa:	b510      	push	{r4, lr}
 800bbac:	b09d      	sub	sp, #116	@ 0x74
 800bbae:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bbb0:	9002      	str	r0, [sp, #8]
 800bbb2:	9006      	str	r0, [sp, #24]
 800bbb4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bbb8:	480a      	ldr	r0, [pc, #40]	@ (800bbe4 <siprintf+0x3c>)
 800bbba:	9107      	str	r1, [sp, #28]
 800bbbc:	9104      	str	r1, [sp, #16]
 800bbbe:	490a      	ldr	r1, [pc, #40]	@ (800bbe8 <siprintf+0x40>)
 800bbc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbc4:	9105      	str	r1, [sp, #20]
 800bbc6:	2400      	movs	r4, #0
 800bbc8:	a902      	add	r1, sp, #8
 800bbca:	6800      	ldr	r0, [r0, #0]
 800bbcc:	9301      	str	r3, [sp, #4]
 800bbce:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bbd0:	f001 fbf8 	bl	800d3c4 <_svfiprintf_r>
 800bbd4:	9b02      	ldr	r3, [sp, #8]
 800bbd6:	701c      	strb	r4, [r3, #0]
 800bbd8:	b01d      	add	sp, #116	@ 0x74
 800bbda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbde:	b003      	add	sp, #12
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop
 800bbe4:	200001a8 	.word	0x200001a8
 800bbe8:	ffff0208 	.word	0xffff0208

0800bbec <__sread>:
 800bbec:	b510      	push	{r4, lr}
 800bbee:	460c      	mov	r4, r1
 800bbf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbf4:	f000 f86c 	bl	800bcd0 <_read_r>
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	bfab      	itete	ge
 800bbfc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bbfe:	89a3      	ldrhlt	r3, [r4, #12]
 800bc00:	181b      	addge	r3, r3, r0
 800bc02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bc06:	bfac      	ite	ge
 800bc08:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bc0a:	81a3      	strhlt	r3, [r4, #12]
 800bc0c:	bd10      	pop	{r4, pc}

0800bc0e <__swrite>:
 800bc0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc12:	461f      	mov	r7, r3
 800bc14:	898b      	ldrh	r3, [r1, #12]
 800bc16:	05db      	lsls	r3, r3, #23
 800bc18:	4605      	mov	r5, r0
 800bc1a:	460c      	mov	r4, r1
 800bc1c:	4616      	mov	r6, r2
 800bc1e:	d505      	bpl.n	800bc2c <__swrite+0x1e>
 800bc20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc24:	2302      	movs	r3, #2
 800bc26:	2200      	movs	r2, #0
 800bc28:	f000 f840 	bl	800bcac <_lseek_r>
 800bc2c:	89a3      	ldrh	r3, [r4, #12]
 800bc2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bc36:	81a3      	strh	r3, [r4, #12]
 800bc38:	4632      	mov	r2, r6
 800bc3a:	463b      	mov	r3, r7
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc42:	f000 b857 	b.w	800bcf4 <_write_r>

0800bc46 <__sseek>:
 800bc46:	b510      	push	{r4, lr}
 800bc48:	460c      	mov	r4, r1
 800bc4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc4e:	f000 f82d 	bl	800bcac <_lseek_r>
 800bc52:	1c43      	adds	r3, r0, #1
 800bc54:	89a3      	ldrh	r3, [r4, #12]
 800bc56:	bf15      	itete	ne
 800bc58:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bc5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bc5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bc62:	81a3      	strheq	r3, [r4, #12]
 800bc64:	bf18      	it	ne
 800bc66:	81a3      	strhne	r3, [r4, #12]
 800bc68:	bd10      	pop	{r4, pc}

0800bc6a <__sclose>:
 800bc6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc6e:	f000 b80d 	b.w	800bc8c <_close_r>

0800bc72 <memset>:
 800bc72:	4402      	add	r2, r0
 800bc74:	4603      	mov	r3, r0
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d100      	bne.n	800bc7c <memset+0xa>
 800bc7a:	4770      	bx	lr
 800bc7c:	f803 1b01 	strb.w	r1, [r3], #1
 800bc80:	e7f9      	b.n	800bc76 <memset+0x4>
	...

0800bc84 <_localeconv_r>:
 800bc84:	4800      	ldr	r0, [pc, #0]	@ (800bc88 <_localeconv_r+0x4>)
 800bc86:	4770      	bx	lr
 800bc88:	200002e8 	.word	0x200002e8

0800bc8c <_close_r>:
 800bc8c:	b538      	push	{r3, r4, r5, lr}
 800bc8e:	4d06      	ldr	r5, [pc, #24]	@ (800bca8 <_close_r+0x1c>)
 800bc90:	2300      	movs	r3, #0
 800bc92:	4604      	mov	r4, r0
 800bc94:	4608      	mov	r0, r1
 800bc96:	602b      	str	r3, [r5, #0]
 800bc98:	f7f5 fb68 	bl	800136c <_close>
 800bc9c:	1c43      	adds	r3, r0, #1
 800bc9e:	d102      	bne.n	800bca6 <_close_r+0x1a>
 800bca0:	682b      	ldr	r3, [r5, #0]
 800bca2:	b103      	cbz	r3, 800bca6 <_close_r+0x1a>
 800bca4:	6023      	str	r3, [r4, #0]
 800bca6:	bd38      	pop	{r3, r4, r5, pc}
 800bca8:	200027f8 	.word	0x200027f8

0800bcac <_lseek_r>:
 800bcac:	b538      	push	{r3, r4, r5, lr}
 800bcae:	4d07      	ldr	r5, [pc, #28]	@ (800bccc <_lseek_r+0x20>)
 800bcb0:	4604      	mov	r4, r0
 800bcb2:	4608      	mov	r0, r1
 800bcb4:	4611      	mov	r1, r2
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	602a      	str	r2, [r5, #0]
 800bcba:	461a      	mov	r2, r3
 800bcbc:	f7f5 fb5d 	bl	800137a <_lseek>
 800bcc0:	1c43      	adds	r3, r0, #1
 800bcc2:	d102      	bne.n	800bcca <_lseek_r+0x1e>
 800bcc4:	682b      	ldr	r3, [r5, #0]
 800bcc6:	b103      	cbz	r3, 800bcca <_lseek_r+0x1e>
 800bcc8:	6023      	str	r3, [r4, #0]
 800bcca:	bd38      	pop	{r3, r4, r5, pc}
 800bccc:	200027f8 	.word	0x200027f8

0800bcd0 <_read_r>:
 800bcd0:	b538      	push	{r3, r4, r5, lr}
 800bcd2:	4d07      	ldr	r5, [pc, #28]	@ (800bcf0 <_read_r+0x20>)
 800bcd4:	4604      	mov	r4, r0
 800bcd6:	4608      	mov	r0, r1
 800bcd8:	4611      	mov	r1, r2
 800bcda:	2200      	movs	r2, #0
 800bcdc:	602a      	str	r2, [r5, #0]
 800bcde:	461a      	mov	r2, r3
 800bce0:	f7f5 fb52 	bl	8001388 <_read>
 800bce4:	1c43      	adds	r3, r0, #1
 800bce6:	d102      	bne.n	800bcee <_read_r+0x1e>
 800bce8:	682b      	ldr	r3, [r5, #0]
 800bcea:	b103      	cbz	r3, 800bcee <_read_r+0x1e>
 800bcec:	6023      	str	r3, [r4, #0]
 800bcee:	bd38      	pop	{r3, r4, r5, pc}
 800bcf0:	200027f8 	.word	0x200027f8

0800bcf4 <_write_r>:
 800bcf4:	b538      	push	{r3, r4, r5, lr}
 800bcf6:	4d07      	ldr	r5, [pc, #28]	@ (800bd14 <_write_r+0x20>)
 800bcf8:	4604      	mov	r4, r0
 800bcfa:	4608      	mov	r0, r1
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	2200      	movs	r2, #0
 800bd00:	602a      	str	r2, [r5, #0]
 800bd02:	461a      	mov	r2, r3
 800bd04:	f7f5 fb47 	bl	8001396 <_write>
 800bd08:	1c43      	adds	r3, r0, #1
 800bd0a:	d102      	bne.n	800bd12 <_write_r+0x1e>
 800bd0c:	682b      	ldr	r3, [r5, #0]
 800bd0e:	b103      	cbz	r3, 800bd12 <_write_r+0x1e>
 800bd10:	6023      	str	r3, [r4, #0]
 800bd12:	bd38      	pop	{r3, r4, r5, pc}
 800bd14:	200027f8 	.word	0x200027f8

0800bd18 <__libc_init_array>:
 800bd18:	b570      	push	{r4, r5, r6, lr}
 800bd1a:	4d0d      	ldr	r5, [pc, #52]	@ (800bd50 <__libc_init_array+0x38>)
 800bd1c:	4c0d      	ldr	r4, [pc, #52]	@ (800bd54 <__libc_init_array+0x3c>)
 800bd1e:	1b64      	subs	r4, r4, r5
 800bd20:	10a4      	asrs	r4, r4, #2
 800bd22:	2600      	movs	r6, #0
 800bd24:	42a6      	cmp	r6, r4
 800bd26:	d109      	bne.n	800bd3c <__libc_init_array+0x24>
 800bd28:	4d0b      	ldr	r5, [pc, #44]	@ (800bd58 <__libc_init_array+0x40>)
 800bd2a:	4c0c      	ldr	r4, [pc, #48]	@ (800bd5c <__libc_init_array+0x44>)
 800bd2c:	f002 f8c0 	bl	800deb0 <_init>
 800bd30:	1b64      	subs	r4, r4, r5
 800bd32:	10a4      	asrs	r4, r4, #2
 800bd34:	2600      	movs	r6, #0
 800bd36:	42a6      	cmp	r6, r4
 800bd38:	d105      	bne.n	800bd46 <__libc_init_array+0x2e>
 800bd3a:	bd70      	pop	{r4, r5, r6, pc}
 800bd3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd40:	4798      	blx	r3
 800bd42:	3601      	adds	r6, #1
 800bd44:	e7ee      	b.n	800bd24 <__libc_init_array+0xc>
 800bd46:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd4a:	4798      	blx	r3
 800bd4c:	3601      	adds	r6, #1
 800bd4e:	e7f2      	b.n	800bd36 <__libc_init_array+0x1e>
 800bd50:	08026b8c 	.word	0x08026b8c
 800bd54:	08026b8c 	.word	0x08026b8c
 800bd58:	08026b8c 	.word	0x08026b8c
 800bd5c:	08026b90 	.word	0x08026b90

0800bd60 <__retarget_lock_init_recursive>:
 800bd60:	4770      	bx	lr

0800bd62 <__retarget_lock_acquire_recursive>:
 800bd62:	4770      	bx	lr

0800bd64 <__retarget_lock_release_recursive>:
 800bd64:	4770      	bx	lr

0800bd66 <quorem>:
 800bd66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6a:	6903      	ldr	r3, [r0, #16]
 800bd6c:	690c      	ldr	r4, [r1, #16]
 800bd6e:	42a3      	cmp	r3, r4
 800bd70:	4607      	mov	r7, r0
 800bd72:	db7e      	blt.n	800be72 <quorem+0x10c>
 800bd74:	3c01      	subs	r4, #1
 800bd76:	f101 0814 	add.w	r8, r1, #20
 800bd7a:	00a3      	lsls	r3, r4, #2
 800bd7c:	f100 0514 	add.w	r5, r0, #20
 800bd80:	9300      	str	r3, [sp, #0]
 800bd82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd86:	9301      	str	r3, [sp, #4]
 800bd88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd90:	3301      	adds	r3, #1
 800bd92:	429a      	cmp	r2, r3
 800bd94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd98:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd9c:	d32e      	bcc.n	800bdfc <quorem+0x96>
 800bd9e:	f04f 0a00 	mov.w	sl, #0
 800bda2:	46c4      	mov	ip, r8
 800bda4:	46ae      	mov	lr, r5
 800bda6:	46d3      	mov	fp, sl
 800bda8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bdac:	b298      	uxth	r0, r3
 800bdae:	fb06 a000 	mla	r0, r6, r0, sl
 800bdb2:	0c02      	lsrs	r2, r0, #16
 800bdb4:	0c1b      	lsrs	r3, r3, #16
 800bdb6:	fb06 2303 	mla	r3, r6, r3, r2
 800bdba:	f8de 2000 	ldr.w	r2, [lr]
 800bdbe:	b280      	uxth	r0, r0
 800bdc0:	b292      	uxth	r2, r2
 800bdc2:	1a12      	subs	r2, r2, r0
 800bdc4:	445a      	add	r2, fp
 800bdc6:	f8de 0000 	ldr.w	r0, [lr]
 800bdca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bdd4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bdd8:	b292      	uxth	r2, r2
 800bdda:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bdde:	45e1      	cmp	r9, ip
 800bde0:	f84e 2b04 	str.w	r2, [lr], #4
 800bde4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bde8:	d2de      	bcs.n	800bda8 <quorem+0x42>
 800bdea:	9b00      	ldr	r3, [sp, #0]
 800bdec:	58eb      	ldr	r3, [r5, r3]
 800bdee:	b92b      	cbnz	r3, 800bdfc <quorem+0x96>
 800bdf0:	9b01      	ldr	r3, [sp, #4]
 800bdf2:	3b04      	subs	r3, #4
 800bdf4:	429d      	cmp	r5, r3
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	d32f      	bcc.n	800be5a <quorem+0xf4>
 800bdfa:	613c      	str	r4, [r7, #16]
 800bdfc:	4638      	mov	r0, r7
 800bdfe:	f001 f97d 	bl	800d0fc <__mcmp>
 800be02:	2800      	cmp	r0, #0
 800be04:	db25      	blt.n	800be52 <quorem+0xec>
 800be06:	4629      	mov	r1, r5
 800be08:	2000      	movs	r0, #0
 800be0a:	f858 2b04 	ldr.w	r2, [r8], #4
 800be0e:	f8d1 c000 	ldr.w	ip, [r1]
 800be12:	fa1f fe82 	uxth.w	lr, r2
 800be16:	fa1f f38c 	uxth.w	r3, ip
 800be1a:	eba3 030e 	sub.w	r3, r3, lr
 800be1e:	4403      	add	r3, r0
 800be20:	0c12      	lsrs	r2, r2, #16
 800be22:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800be26:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be30:	45c1      	cmp	r9, r8
 800be32:	f841 3b04 	str.w	r3, [r1], #4
 800be36:	ea4f 4022 	mov.w	r0, r2, asr #16
 800be3a:	d2e6      	bcs.n	800be0a <quorem+0xa4>
 800be3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be44:	b922      	cbnz	r2, 800be50 <quorem+0xea>
 800be46:	3b04      	subs	r3, #4
 800be48:	429d      	cmp	r5, r3
 800be4a:	461a      	mov	r2, r3
 800be4c:	d30b      	bcc.n	800be66 <quorem+0x100>
 800be4e:	613c      	str	r4, [r7, #16]
 800be50:	3601      	adds	r6, #1
 800be52:	4630      	mov	r0, r6
 800be54:	b003      	add	sp, #12
 800be56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be5a:	6812      	ldr	r2, [r2, #0]
 800be5c:	3b04      	subs	r3, #4
 800be5e:	2a00      	cmp	r2, #0
 800be60:	d1cb      	bne.n	800bdfa <quorem+0x94>
 800be62:	3c01      	subs	r4, #1
 800be64:	e7c6      	b.n	800bdf4 <quorem+0x8e>
 800be66:	6812      	ldr	r2, [r2, #0]
 800be68:	3b04      	subs	r3, #4
 800be6a:	2a00      	cmp	r2, #0
 800be6c:	d1ef      	bne.n	800be4e <quorem+0xe8>
 800be6e:	3c01      	subs	r4, #1
 800be70:	e7ea      	b.n	800be48 <quorem+0xe2>
 800be72:	2000      	movs	r0, #0
 800be74:	e7ee      	b.n	800be54 <quorem+0xee>
	...

0800be78 <_dtoa_r>:
 800be78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7c:	69c7      	ldr	r7, [r0, #28]
 800be7e:	b097      	sub	sp, #92	@ 0x5c
 800be80:	ed8d 0b04 	vstr	d0, [sp, #16]
 800be84:	ec55 4b10 	vmov	r4, r5, d0
 800be88:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800be8a:	9107      	str	r1, [sp, #28]
 800be8c:	4681      	mov	r9, r0
 800be8e:	920c      	str	r2, [sp, #48]	@ 0x30
 800be90:	9311      	str	r3, [sp, #68]	@ 0x44
 800be92:	b97f      	cbnz	r7, 800beb4 <_dtoa_r+0x3c>
 800be94:	2010      	movs	r0, #16
 800be96:	f000 fe09 	bl	800caac <malloc>
 800be9a:	4602      	mov	r2, r0
 800be9c:	f8c9 001c 	str.w	r0, [r9, #28]
 800bea0:	b920      	cbnz	r0, 800beac <_dtoa_r+0x34>
 800bea2:	4ba9      	ldr	r3, [pc, #676]	@ (800c148 <_dtoa_r+0x2d0>)
 800bea4:	21ef      	movs	r1, #239	@ 0xef
 800bea6:	48a9      	ldr	r0, [pc, #676]	@ (800c14c <_dtoa_r+0x2d4>)
 800bea8:	f001 fc6c 	bl	800d784 <__assert_func>
 800beac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800beb0:	6007      	str	r7, [r0, #0]
 800beb2:	60c7      	str	r7, [r0, #12]
 800beb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800beb8:	6819      	ldr	r1, [r3, #0]
 800beba:	b159      	cbz	r1, 800bed4 <_dtoa_r+0x5c>
 800bebc:	685a      	ldr	r2, [r3, #4]
 800bebe:	604a      	str	r2, [r1, #4]
 800bec0:	2301      	movs	r3, #1
 800bec2:	4093      	lsls	r3, r2
 800bec4:	608b      	str	r3, [r1, #8]
 800bec6:	4648      	mov	r0, r9
 800bec8:	f000 fee6 	bl	800cc98 <_Bfree>
 800becc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bed0:	2200      	movs	r2, #0
 800bed2:	601a      	str	r2, [r3, #0]
 800bed4:	1e2b      	subs	r3, r5, #0
 800bed6:	bfb9      	ittee	lt
 800bed8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bedc:	9305      	strlt	r3, [sp, #20]
 800bede:	2300      	movge	r3, #0
 800bee0:	6033      	strge	r3, [r6, #0]
 800bee2:	9f05      	ldr	r7, [sp, #20]
 800bee4:	4b9a      	ldr	r3, [pc, #616]	@ (800c150 <_dtoa_r+0x2d8>)
 800bee6:	bfbc      	itt	lt
 800bee8:	2201      	movlt	r2, #1
 800beea:	6032      	strlt	r2, [r6, #0]
 800beec:	43bb      	bics	r3, r7
 800beee:	d112      	bne.n	800bf16 <_dtoa_r+0x9e>
 800bef0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bef2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bef6:	6013      	str	r3, [r2, #0]
 800bef8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800befc:	4323      	orrs	r3, r4
 800befe:	f000 855a 	beq.w	800c9b6 <_dtoa_r+0xb3e>
 800bf02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf04:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c164 <_dtoa_r+0x2ec>
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	f000 855c 	beq.w	800c9c6 <_dtoa_r+0xb4e>
 800bf0e:	f10a 0303 	add.w	r3, sl, #3
 800bf12:	f000 bd56 	b.w	800c9c2 <_dtoa_r+0xb4a>
 800bf16:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	ec51 0b17 	vmov	r0, r1, d7
 800bf20:	2300      	movs	r3, #0
 800bf22:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bf26:	f7f4 fe3f 	bl	8000ba8 <__aeabi_dcmpeq>
 800bf2a:	4680      	mov	r8, r0
 800bf2c:	b158      	cbz	r0, 800bf46 <_dtoa_r+0xce>
 800bf2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf30:	2301      	movs	r3, #1
 800bf32:	6013      	str	r3, [r2, #0]
 800bf34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf36:	b113      	cbz	r3, 800bf3e <_dtoa_r+0xc6>
 800bf38:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bf3a:	4b86      	ldr	r3, [pc, #536]	@ (800c154 <_dtoa_r+0x2dc>)
 800bf3c:	6013      	str	r3, [r2, #0]
 800bf3e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c168 <_dtoa_r+0x2f0>
 800bf42:	f000 bd40 	b.w	800c9c6 <_dtoa_r+0xb4e>
 800bf46:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bf4a:	aa14      	add	r2, sp, #80	@ 0x50
 800bf4c:	a915      	add	r1, sp, #84	@ 0x54
 800bf4e:	4648      	mov	r0, r9
 800bf50:	f001 f984 	bl	800d25c <__d2b>
 800bf54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bf58:	9002      	str	r0, [sp, #8]
 800bf5a:	2e00      	cmp	r6, #0
 800bf5c:	d078      	beq.n	800c050 <_dtoa_r+0x1d8>
 800bf5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf60:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bf64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bf6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bf70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bf74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bf78:	4619      	mov	r1, r3
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	4b76      	ldr	r3, [pc, #472]	@ (800c158 <_dtoa_r+0x2e0>)
 800bf7e:	f7f4 f9f3 	bl	8000368 <__aeabi_dsub>
 800bf82:	a36b      	add	r3, pc, #428	@ (adr r3, 800c130 <_dtoa_r+0x2b8>)
 800bf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf88:	f7f4 fba6 	bl	80006d8 <__aeabi_dmul>
 800bf8c:	a36a      	add	r3, pc, #424	@ (adr r3, 800c138 <_dtoa_r+0x2c0>)
 800bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf92:	f7f4 f9eb 	bl	800036c <__adddf3>
 800bf96:	4604      	mov	r4, r0
 800bf98:	4630      	mov	r0, r6
 800bf9a:	460d      	mov	r5, r1
 800bf9c:	f7f4 fb32 	bl	8000604 <__aeabi_i2d>
 800bfa0:	a367      	add	r3, pc, #412	@ (adr r3, 800c140 <_dtoa_r+0x2c8>)
 800bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa6:	f7f4 fb97 	bl	80006d8 <__aeabi_dmul>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	460b      	mov	r3, r1
 800bfae:	4620      	mov	r0, r4
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	f7f4 f9db 	bl	800036c <__adddf3>
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	460d      	mov	r5, r1
 800bfba:	f7f4 fe3d 	bl	8000c38 <__aeabi_d2iz>
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	4607      	mov	r7, r0
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	f7f4 fdf8 	bl	8000bbc <__aeabi_dcmplt>
 800bfcc:	b140      	cbz	r0, 800bfe0 <_dtoa_r+0x168>
 800bfce:	4638      	mov	r0, r7
 800bfd0:	f7f4 fb18 	bl	8000604 <__aeabi_i2d>
 800bfd4:	4622      	mov	r2, r4
 800bfd6:	462b      	mov	r3, r5
 800bfd8:	f7f4 fde6 	bl	8000ba8 <__aeabi_dcmpeq>
 800bfdc:	b900      	cbnz	r0, 800bfe0 <_dtoa_r+0x168>
 800bfde:	3f01      	subs	r7, #1
 800bfe0:	2f16      	cmp	r7, #22
 800bfe2:	d852      	bhi.n	800c08a <_dtoa_r+0x212>
 800bfe4:	4b5d      	ldr	r3, [pc, #372]	@ (800c15c <_dtoa_r+0x2e4>)
 800bfe6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bff2:	f7f4 fde3 	bl	8000bbc <__aeabi_dcmplt>
 800bff6:	2800      	cmp	r0, #0
 800bff8:	d049      	beq.n	800c08e <_dtoa_r+0x216>
 800bffa:	3f01      	subs	r7, #1
 800bffc:	2300      	movs	r3, #0
 800bffe:	9310      	str	r3, [sp, #64]	@ 0x40
 800c000:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c002:	1b9b      	subs	r3, r3, r6
 800c004:	1e5a      	subs	r2, r3, #1
 800c006:	bf45      	ittet	mi
 800c008:	f1c3 0301 	rsbmi	r3, r3, #1
 800c00c:	9300      	strmi	r3, [sp, #0]
 800c00e:	2300      	movpl	r3, #0
 800c010:	2300      	movmi	r3, #0
 800c012:	9206      	str	r2, [sp, #24]
 800c014:	bf54      	ite	pl
 800c016:	9300      	strpl	r3, [sp, #0]
 800c018:	9306      	strmi	r3, [sp, #24]
 800c01a:	2f00      	cmp	r7, #0
 800c01c:	db39      	blt.n	800c092 <_dtoa_r+0x21a>
 800c01e:	9b06      	ldr	r3, [sp, #24]
 800c020:	970d      	str	r7, [sp, #52]	@ 0x34
 800c022:	443b      	add	r3, r7
 800c024:	9306      	str	r3, [sp, #24]
 800c026:	2300      	movs	r3, #0
 800c028:	9308      	str	r3, [sp, #32]
 800c02a:	9b07      	ldr	r3, [sp, #28]
 800c02c:	2b09      	cmp	r3, #9
 800c02e:	d863      	bhi.n	800c0f8 <_dtoa_r+0x280>
 800c030:	2b05      	cmp	r3, #5
 800c032:	bfc4      	itt	gt
 800c034:	3b04      	subgt	r3, #4
 800c036:	9307      	strgt	r3, [sp, #28]
 800c038:	9b07      	ldr	r3, [sp, #28]
 800c03a:	f1a3 0302 	sub.w	r3, r3, #2
 800c03e:	bfcc      	ite	gt
 800c040:	2400      	movgt	r4, #0
 800c042:	2401      	movle	r4, #1
 800c044:	2b03      	cmp	r3, #3
 800c046:	d863      	bhi.n	800c110 <_dtoa_r+0x298>
 800c048:	e8df f003 	tbb	[pc, r3]
 800c04c:	2b375452 	.word	0x2b375452
 800c050:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c054:	441e      	add	r6, r3
 800c056:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c05a:	2b20      	cmp	r3, #32
 800c05c:	bfc1      	itttt	gt
 800c05e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c062:	409f      	lslgt	r7, r3
 800c064:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c068:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c06c:	bfd6      	itet	le
 800c06e:	f1c3 0320 	rsble	r3, r3, #32
 800c072:	ea47 0003 	orrgt.w	r0, r7, r3
 800c076:	fa04 f003 	lslle.w	r0, r4, r3
 800c07a:	f7f4 fab3 	bl	80005e4 <__aeabi_ui2d>
 800c07e:	2201      	movs	r2, #1
 800c080:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c084:	3e01      	subs	r6, #1
 800c086:	9212      	str	r2, [sp, #72]	@ 0x48
 800c088:	e776      	b.n	800bf78 <_dtoa_r+0x100>
 800c08a:	2301      	movs	r3, #1
 800c08c:	e7b7      	b.n	800bffe <_dtoa_r+0x186>
 800c08e:	9010      	str	r0, [sp, #64]	@ 0x40
 800c090:	e7b6      	b.n	800c000 <_dtoa_r+0x188>
 800c092:	9b00      	ldr	r3, [sp, #0]
 800c094:	1bdb      	subs	r3, r3, r7
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	427b      	negs	r3, r7
 800c09a:	9308      	str	r3, [sp, #32]
 800c09c:	2300      	movs	r3, #0
 800c09e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c0a0:	e7c3      	b.n	800c02a <_dtoa_r+0x1b2>
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0a8:	eb07 0b03 	add.w	fp, r7, r3
 800c0ac:	f10b 0301 	add.w	r3, fp, #1
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	9303      	str	r3, [sp, #12]
 800c0b4:	bfb8      	it	lt
 800c0b6:	2301      	movlt	r3, #1
 800c0b8:	e006      	b.n	800c0c8 <_dtoa_r+0x250>
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	dd28      	ble.n	800c116 <_dtoa_r+0x29e>
 800c0c4:	469b      	mov	fp, r3
 800c0c6:	9303      	str	r3, [sp, #12]
 800c0c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c0cc:	2100      	movs	r1, #0
 800c0ce:	2204      	movs	r2, #4
 800c0d0:	f102 0514 	add.w	r5, r2, #20
 800c0d4:	429d      	cmp	r5, r3
 800c0d6:	d926      	bls.n	800c126 <_dtoa_r+0x2ae>
 800c0d8:	6041      	str	r1, [r0, #4]
 800c0da:	4648      	mov	r0, r9
 800c0dc:	f000 fd9c 	bl	800cc18 <_Balloc>
 800c0e0:	4682      	mov	sl, r0
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	d142      	bne.n	800c16c <_dtoa_r+0x2f4>
 800c0e6:	4b1e      	ldr	r3, [pc, #120]	@ (800c160 <_dtoa_r+0x2e8>)
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	f240 11af 	movw	r1, #431	@ 0x1af
 800c0ee:	e6da      	b.n	800bea6 <_dtoa_r+0x2e>
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	e7e3      	b.n	800c0bc <_dtoa_r+0x244>
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	e7d5      	b.n	800c0a4 <_dtoa_r+0x22c>
 800c0f8:	2401      	movs	r4, #1
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	9307      	str	r3, [sp, #28]
 800c0fe:	9409      	str	r4, [sp, #36]	@ 0x24
 800c100:	f04f 3bff 	mov.w	fp, #4294967295
 800c104:	2200      	movs	r2, #0
 800c106:	f8cd b00c 	str.w	fp, [sp, #12]
 800c10a:	2312      	movs	r3, #18
 800c10c:	920c      	str	r2, [sp, #48]	@ 0x30
 800c10e:	e7db      	b.n	800c0c8 <_dtoa_r+0x250>
 800c110:	2301      	movs	r3, #1
 800c112:	9309      	str	r3, [sp, #36]	@ 0x24
 800c114:	e7f4      	b.n	800c100 <_dtoa_r+0x288>
 800c116:	f04f 0b01 	mov.w	fp, #1
 800c11a:	f8cd b00c 	str.w	fp, [sp, #12]
 800c11e:	465b      	mov	r3, fp
 800c120:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c124:	e7d0      	b.n	800c0c8 <_dtoa_r+0x250>
 800c126:	3101      	adds	r1, #1
 800c128:	0052      	lsls	r2, r2, #1
 800c12a:	e7d1      	b.n	800c0d0 <_dtoa_r+0x258>
 800c12c:	f3af 8000 	nop.w
 800c130:	636f4361 	.word	0x636f4361
 800c134:	3fd287a7 	.word	0x3fd287a7
 800c138:	8b60c8b3 	.word	0x8b60c8b3
 800c13c:	3fc68a28 	.word	0x3fc68a28
 800c140:	509f79fb 	.word	0x509f79fb
 800c144:	3fd34413 	.word	0x3fd34413
 800c148:	0802684d 	.word	0x0802684d
 800c14c:	08026864 	.word	0x08026864
 800c150:	7ff00000 	.word	0x7ff00000
 800c154:	0802681d 	.word	0x0802681d
 800c158:	3ff80000 	.word	0x3ff80000
 800c15c:	080269b8 	.word	0x080269b8
 800c160:	080268bc 	.word	0x080268bc
 800c164:	08026849 	.word	0x08026849
 800c168:	0802681c 	.word	0x0802681c
 800c16c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c170:	6018      	str	r0, [r3, #0]
 800c172:	9b03      	ldr	r3, [sp, #12]
 800c174:	2b0e      	cmp	r3, #14
 800c176:	f200 80a1 	bhi.w	800c2bc <_dtoa_r+0x444>
 800c17a:	2c00      	cmp	r4, #0
 800c17c:	f000 809e 	beq.w	800c2bc <_dtoa_r+0x444>
 800c180:	2f00      	cmp	r7, #0
 800c182:	dd33      	ble.n	800c1ec <_dtoa_r+0x374>
 800c184:	4b9c      	ldr	r3, [pc, #624]	@ (800c3f8 <_dtoa_r+0x580>)
 800c186:	f007 020f 	and.w	r2, r7, #15
 800c18a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c18e:	ed93 7b00 	vldr	d7, [r3]
 800c192:	05f8      	lsls	r0, r7, #23
 800c194:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c198:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c19c:	d516      	bpl.n	800c1cc <_dtoa_r+0x354>
 800c19e:	4b97      	ldr	r3, [pc, #604]	@ (800c3fc <_dtoa_r+0x584>)
 800c1a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c1a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c1a8:	f7f4 fbc0 	bl	800092c <__aeabi_ddiv>
 800c1ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1b0:	f004 040f 	and.w	r4, r4, #15
 800c1b4:	2603      	movs	r6, #3
 800c1b6:	4d91      	ldr	r5, [pc, #580]	@ (800c3fc <_dtoa_r+0x584>)
 800c1b8:	b954      	cbnz	r4, 800c1d0 <_dtoa_r+0x358>
 800c1ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c1be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1c2:	f7f4 fbb3 	bl	800092c <__aeabi_ddiv>
 800c1c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1ca:	e028      	b.n	800c21e <_dtoa_r+0x3a6>
 800c1cc:	2602      	movs	r6, #2
 800c1ce:	e7f2      	b.n	800c1b6 <_dtoa_r+0x33e>
 800c1d0:	07e1      	lsls	r1, r4, #31
 800c1d2:	d508      	bpl.n	800c1e6 <_dtoa_r+0x36e>
 800c1d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c1d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c1dc:	f7f4 fa7c 	bl	80006d8 <__aeabi_dmul>
 800c1e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c1e4:	3601      	adds	r6, #1
 800c1e6:	1064      	asrs	r4, r4, #1
 800c1e8:	3508      	adds	r5, #8
 800c1ea:	e7e5      	b.n	800c1b8 <_dtoa_r+0x340>
 800c1ec:	f000 80af 	beq.w	800c34e <_dtoa_r+0x4d6>
 800c1f0:	427c      	negs	r4, r7
 800c1f2:	4b81      	ldr	r3, [pc, #516]	@ (800c3f8 <_dtoa_r+0x580>)
 800c1f4:	4d81      	ldr	r5, [pc, #516]	@ (800c3fc <_dtoa_r+0x584>)
 800c1f6:	f004 020f 	and.w	r2, r4, #15
 800c1fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c202:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c206:	f7f4 fa67 	bl	80006d8 <__aeabi_dmul>
 800c20a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c20e:	1124      	asrs	r4, r4, #4
 800c210:	2300      	movs	r3, #0
 800c212:	2602      	movs	r6, #2
 800c214:	2c00      	cmp	r4, #0
 800c216:	f040 808f 	bne.w	800c338 <_dtoa_r+0x4c0>
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1d3      	bne.n	800c1c6 <_dtoa_r+0x34e>
 800c21e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c220:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c224:	2b00      	cmp	r3, #0
 800c226:	f000 8094 	beq.w	800c352 <_dtoa_r+0x4da>
 800c22a:	4b75      	ldr	r3, [pc, #468]	@ (800c400 <_dtoa_r+0x588>)
 800c22c:	2200      	movs	r2, #0
 800c22e:	4620      	mov	r0, r4
 800c230:	4629      	mov	r1, r5
 800c232:	f7f4 fcc3 	bl	8000bbc <__aeabi_dcmplt>
 800c236:	2800      	cmp	r0, #0
 800c238:	f000 808b 	beq.w	800c352 <_dtoa_r+0x4da>
 800c23c:	9b03      	ldr	r3, [sp, #12]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f000 8087 	beq.w	800c352 <_dtoa_r+0x4da>
 800c244:	f1bb 0f00 	cmp.w	fp, #0
 800c248:	dd34      	ble.n	800c2b4 <_dtoa_r+0x43c>
 800c24a:	4620      	mov	r0, r4
 800c24c:	4b6d      	ldr	r3, [pc, #436]	@ (800c404 <_dtoa_r+0x58c>)
 800c24e:	2200      	movs	r2, #0
 800c250:	4629      	mov	r1, r5
 800c252:	f7f4 fa41 	bl	80006d8 <__aeabi_dmul>
 800c256:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c25a:	f107 38ff 	add.w	r8, r7, #4294967295
 800c25e:	3601      	adds	r6, #1
 800c260:	465c      	mov	r4, fp
 800c262:	4630      	mov	r0, r6
 800c264:	f7f4 f9ce 	bl	8000604 <__aeabi_i2d>
 800c268:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c26c:	f7f4 fa34 	bl	80006d8 <__aeabi_dmul>
 800c270:	4b65      	ldr	r3, [pc, #404]	@ (800c408 <_dtoa_r+0x590>)
 800c272:	2200      	movs	r2, #0
 800c274:	f7f4 f87a 	bl	800036c <__adddf3>
 800c278:	4605      	mov	r5, r0
 800c27a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c27e:	2c00      	cmp	r4, #0
 800c280:	d16a      	bne.n	800c358 <_dtoa_r+0x4e0>
 800c282:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c286:	4b61      	ldr	r3, [pc, #388]	@ (800c40c <_dtoa_r+0x594>)
 800c288:	2200      	movs	r2, #0
 800c28a:	f7f4 f86d 	bl	8000368 <__aeabi_dsub>
 800c28e:	4602      	mov	r2, r0
 800c290:	460b      	mov	r3, r1
 800c292:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c296:	462a      	mov	r2, r5
 800c298:	4633      	mov	r3, r6
 800c29a:	f7f4 fcad 	bl	8000bf8 <__aeabi_dcmpgt>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	f040 8298 	bne.w	800c7d4 <_dtoa_r+0x95c>
 800c2a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2a8:	462a      	mov	r2, r5
 800c2aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c2ae:	f7f4 fc85 	bl	8000bbc <__aeabi_dcmplt>
 800c2b2:	bb38      	cbnz	r0, 800c304 <_dtoa_r+0x48c>
 800c2b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c2b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c2bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f2c0 8157 	blt.w	800c572 <_dtoa_r+0x6fa>
 800c2c4:	2f0e      	cmp	r7, #14
 800c2c6:	f300 8154 	bgt.w	800c572 <_dtoa_r+0x6fa>
 800c2ca:	4b4b      	ldr	r3, [pc, #300]	@ (800c3f8 <_dtoa_r+0x580>)
 800c2cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c2d0:	ed93 7b00 	vldr	d7, [r3]
 800c2d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	ed8d 7b00 	vstr	d7, [sp]
 800c2dc:	f280 80e5 	bge.w	800c4aa <_dtoa_r+0x632>
 800c2e0:	9b03      	ldr	r3, [sp, #12]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f300 80e1 	bgt.w	800c4aa <_dtoa_r+0x632>
 800c2e8:	d10c      	bne.n	800c304 <_dtoa_r+0x48c>
 800c2ea:	4b48      	ldr	r3, [pc, #288]	@ (800c40c <_dtoa_r+0x594>)
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	ec51 0b17 	vmov	r0, r1, d7
 800c2f2:	f7f4 f9f1 	bl	80006d8 <__aeabi_dmul>
 800c2f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2fa:	f7f4 fc73 	bl	8000be4 <__aeabi_dcmpge>
 800c2fe:	2800      	cmp	r0, #0
 800c300:	f000 8266 	beq.w	800c7d0 <_dtoa_r+0x958>
 800c304:	2400      	movs	r4, #0
 800c306:	4625      	mov	r5, r4
 800c308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c30a:	4656      	mov	r6, sl
 800c30c:	ea6f 0803 	mvn.w	r8, r3
 800c310:	2700      	movs	r7, #0
 800c312:	4621      	mov	r1, r4
 800c314:	4648      	mov	r0, r9
 800c316:	f000 fcbf 	bl	800cc98 <_Bfree>
 800c31a:	2d00      	cmp	r5, #0
 800c31c:	f000 80bd 	beq.w	800c49a <_dtoa_r+0x622>
 800c320:	b12f      	cbz	r7, 800c32e <_dtoa_r+0x4b6>
 800c322:	42af      	cmp	r7, r5
 800c324:	d003      	beq.n	800c32e <_dtoa_r+0x4b6>
 800c326:	4639      	mov	r1, r7
 800c328:	4648      	mov	r0, r9
 800c32a:	f000 fcb5 	bl	800cc98 <_Bfree>
 800c32e:	4629      	mov	r1, r5
 800c330:	4648      	mov	r0, r9
 800c332:	f000 fcb1 	bl	800cc98 <_Bfree>
 800c336:	e0b0      	b.n	800c49a <_dtoa_r+0x622>
 800c338:	07e2      	lsls	r2, r4, #31
 800c33a:	d505      	bpl.n	800c348 <_dtoa_r+0x4d0>
 800c33c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c340:	f7f4 f9ca 	bl	80006d8 <__aeabi_dmul>
 800c344:	3601      	adds	r6, #1
 800c346:	2301      	movs	r3, #1
 800c348:	1064      	asrs	r4, r4, #1
 800c34a:	3508      	adds	r5, #8
 800c34c:	e762      	b.n	800c214 <_dtoa_r+0x39c>
 800c34e:	2602      	movs	r6, #2
 800c350:	e765      	b.n	800c21e <_dtoa_r+0x3a6>
 800c352:	9c03      	ldr	r4, [sp, #12]
 800c354:	46b8      	mov	r8, r7
 800c356:	e784      	b.n	800c262 <_dtoa_r+0x3ea>
 800c358:	4b27      	ldr	r3, [pc, #156]	@ (800c3f8 <_dtoa_r+0x580>)
 800c35a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c35c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c360:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c364:	4454      	add	r4, sl
 800c366:	2900      	cmp	r1, #0
 800c368:	d054      	beq.n	800c414 <_dtoa_r+0x59c>
 800c36a:	4929      	ldr	r1, [pc, #164]	@ (800c410 <_dtoa_r+0x598>)
 800c36c:	2000      	movs	r0, #0
 800c36e:	f7f4 fadd 	bl	800092c <__aeabi_ddiv>
 800c372:	4633      	mov	r3, r6
 800c374:	462a      	mov	r2, r5
 800c376:	f7f3 fff7 	bl	8000368 <__aeabi_dsub>
 800c37a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c37e:	4656      	mov	r6, sl
 800c380:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c384:	f7f4 fc58 	bl	8000c38 <__aeabi_d2iz>
 800c388:	4605      	mov	r5, r0
 800c38a:	f7f4 f93b 	bl	8000604 <__aeabi_i2d>
 800c38e:	4602      	mov	r2, r0
 800c390:	460b      	mov	r3, r1
 800c392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c396:	f7f3 ffe7 	bl	8000368 <__aeabi_dsub>
 800c39a:	3530      	adds	r5, #48	@ 0x30
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c3a4:	f806 5b01 	strb.w	r5, [r6], #1
 800c3a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c3ac:	f7f4 fc06 	bl	8000bbc <__aeabi_dcmplt>
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	d172      	bne.n	800c49a <_dtoa_r+0x622>
 800c3b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3b8:	4911      	ldr	r1, [pc, #68]	@ (800c400 <_dtoa_r+0x588>)
 800c3ba:	2000      	movs	r0, #0
 800c3bc:	f7f3 ffd4 	bl	8000368 <__aeabi_dsub>
 800c3c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c3c4:	f7f4 fbfa 	bl	8000bbc <__aeabi_dcmplt>
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	f040 80b4 	bne.w	800c536 <_dtoa_r+0x6be>
 800c3ce:	42a6      	cmp	r6, r4
 800c3d0:	f43f af70 	beq.w	800c2b4 <_dtoa_r+0x43c>
 800c3d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c3d8:	4b0a      	ldr	r3, [pc, #40]	@ (800c404 <_dtoa_r+0x58c>)
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f7f4 f97c 	bl	80006d8 <__aeabi_dmul>
 800c3e0:	4b08      	ldr	r3, [pc, #32]	@ (800c404 <_dtoa_r+0x58c>)
 800c3e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3ec:	f7f4 f974 	bl	80006d8 <__aeabi_dmul>
 800c3f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3f4:	e7c4      	b.n	800c380 <_dtoa_r+0x508>
 800c3f6:	bf00      	nop
 800c3f8:	080269b8 	.word	0x080269b8
 800c3fc:	08026990 	.word	0x08026990
 800c400:	3ff00000 	.word	0x3ff00000
 800c404:	40240000 	.word	0x40240000
 800c408:	401c0000 	.word	0x401c0000
 800c40c:	40140000 	.word	0x40140000
 800c410:	3fe00000 	.word	0x3fe00000
 800c414:	4631      	mov	r1, r6
 800c416:	4628      	mov	r0, r5
 800c418:	f7f4 f95e 	bl	80006d8 <__aeabi_dmul>
 800c41c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c420:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c422:	4656      	mov	r6, sl
 800c424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c428:	f7f4 fc06 	bl	8000c38 <__aeabi_d2iz>
 800c42c:	4605      	mov	r5, r0
 800c42e:	f7f4 f8e9 	bl	8000604 <__aeabi_i2d>
 800c432:	4602      	mov	r2, r0
 800c434:	460b      	mov	r3, r1
 800c436:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c43a:	f7f3 ff95 	bl	8000368 <__aeabi_dsub>
 800c43e:	3530      	adds	r5, #48	@ 0x30
 800c440:	f806 5b01 	strb.w	r5, [r6], #1
 800c444:	4602      	mov	r2, r0
 800c446:	460b      	mov	r3, r1
 800c448:	42a6      	cmp	r6, r4
 800c44a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c44e:	f04f 0200 	mov.w	r2, #0
 800c452:	d124      	bne.n	800c49e <_dtoa_r+0x626>
 800c454:	4baf      	ldr	r3, [pc, #700]	@ (800c714 <_dtoa_r+0x89c>)
 800c456:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c45a:	f7f3 ff87 	bl	800036c <__adddf3>
 800c45e:	4602      	mov	r2, r0
 800c460:	460b      	mov	r3, r1
 800c462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c466:	f7f4 fbc7 	bl	8000bf8 <__aeabi_dcmpgt>
 800c46a:	2800      	cmp	r0, #0
 800c46c:	d163      	bne.n	800c536 <_dtoa_r+0x6be>
 800c46e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c472:	49a8      	ldr	r1, [pc, #672]	@ (800c714 <_dtoa_r+0x89c>)
 800c474:	2000      	movs	r0, #0
 800c476:	f7f3 ff77 	bl	8000368 <__aeabi_dsub>
 800c47a:	4602      	mov	r2, r0
 800c47c:	460b      	mov	r3, r1
 800c47e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c482:	f7f4 fb9b 	bl	8000bbc <__aeabi_dcmplt>
 800c486:	2800      	cmp	r0, #0
 800c488:	f43f af14 	beq.w	800c2b4 <_dtoa_r+0x43c>
 800c48c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c48e:	1e73      	subs	r3, r6, #1
 800c490:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c492:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c496:	2b30      	cmp	r3, #48	@ 0x30
 800c498:	d0f8      	beq.n	800c48c <_dtoa_r+0x614>
 800c49a:	4647      	mov	r7, r8
 800c49c:	e03b      	b.n	800c516 <_dtoa_r+0x69e>
 800c49e:	4b9e      	ldr	r3, [pc, #632]	@ (800c718 <_dtoa_r+0x8a0>)
 800c4a0:	f7f4 f91a 	bl	80006d8 <__aeabi_dmul>
 800c4a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4a8:	e7bc      	b.n	800c424 <_dtoa_r+0x5ac>
 800c4aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c4ae:	4656      	mov	r6, sl
 800c4b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	4629      	mov	r1, r5
 800c4b8:	f7f4 fa38 	bl	800092c <__aeabi_ddiv>
 800c4bc:	f7f4 fbbc 	bl	8000c38 <__aeabi_d2iz>
 800c4c0:	4680      	mov	r8, r0
 800c4c2:	f7f4 f89f 	bl	8000604 <__aeabi_i2d>
 800c4c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4ca:	f7f4 f905 	bl	80006d8 <__aeabi_dmul>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c4da:	f7f3 ff45 	bl	8000368 <__aeabi_dsub>
 800c4de:	f806 4b01 	strb.w	r4, [r6], #1
 800c4e2:	9d03      	ldr	r5, [sp, #12]
 800c4e4:	eba6 040a 	sub.w	r4, r6, sl
 800c4e8:	42a5      	cmp	r5, r4
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	d133      	bne.n	800c558 <_dtoa_r+0x6e0>
 800c4f0:	f7f3 ff3c 	bl	800036c <__adddf3>
 800c4f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	460d      	mov	r5, r1
 800c4fc:	f7f4 fb7c 	bl	8000bf8 <__aeabi_dcmpgt>
 800c500:	b9c0      	cbnz	r0, 800c534 <_dtoa_r+0x6bc>
 800c502:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c506:	4620      	mov	r0, r4
 800c508:	4629      	mov	r1, r5
 800c50a:	f7f4 fb4d 	bl	8000ba8 <__aeabi_dcmpeq>
 800c50e:	b110      	cbz	r0, 800c516 <_dtoa_r+0x69e>
 800c510:	f018 0f01 	tst.w	r8, #1
 800c514:	d10e      	bne.n	800c534 <_dtoa_r+0x6bc>
 800c516:	9902      	ldr	r1, [sp, #8]
 800c518:	4648      	mov	r0, r9
 800c51a:	f000 fbbd 	bl	800cc98 <_Bfree>
 800c51e:	2300      	movs	r3, #0
 800c520:	7033      	strb	r3, [r6, #0]
 800c522:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c524:	3701      	adds	r7, #1
 800c526:	601f      	str	r7, [r3, #0]
 800c528:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f000 824b 	beq.w	800c9c6 <_dtoa_r+0xb4e>
 800c530:	601e      	str	r6, [r3, #0]
 800c532:	e248      	b.n	800c9c6 <_dtoa_r+0xb4e>
 800c534:	46b8      	mov	r8, r7
 800c536:	4633      	mov	r3, r6
 800c538:	461e      	mov	r6, r3
 800c53a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c53e:	2a39      	cmp	r2, #57	@ 0x39
 800c540:	d106      	bne.n	800c550 <_dtoa_r+0x6d8>
 800c542:	459a      	cmp	sl, r3
 800c544:	d1f8      	bne.n	800c538 <_dtoa_r+0x6c0>
 800c546:	2230      	movs	r2, #48	@ 0x30
 800c548:	f108 0801 	add.w	r8, r8, #1
 800c54c:	f88a 2000 	strb.w	r2, [sl]
 800c550:	781a      	ldrb	r2, [r3, #0]
 800c552:	3201      	adds	r2, #1
 800c554:	701a      	strb	r2, [r3, #0]
 800c556:	e7a0      	b.n	800c49a <_dtoa_r+0x622>
 800c558:	4b6f      	ldr	r3, [pc, #444]	@ (800c718 <_dtoa_r+0x8a0>)
 800c55a:	2200      	movs	r2, #0
 800c55c:	f7f4 f8bc 	bl	80006d8 <__aeabi_dmul>
 800c560:	2200      	movs	r2, #0
 800c562:	2300      	movs	r3, #0
 800c564:	4604      	mov	r4, r0
 800c566:	460d      	mov	r5, r1
 800c568:	f7f4 fb1e 	bl	8000ba8 <__aeabi_dcmpeq>
 800c56c:	2800      	cmp	r0, #0
 800c56e:	d09f      	beq.n	800c4b0 <_dtoa_r+0x638>
 800c570:	e7d1      	b.n	800c516 <_dtoa_r+0x69e>
 800c572:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c574:	2a00      	cmp	r2, #0
 800c576:	f000 80ea 	beq.w	800c74e <_dtoa_r+0x8d6>
 800c57a:	9a07      	ldr	r2, [sp, #28]
 800c57c:	2a01      	cmp	r2, #1
 800c57e:	f300 80cd 	bgt.w	800c71c <_dtoa_r+0x8a4>
 800c582:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c584:	2a00      	cmp	r2, #0
 800c586:	f000 80c1 	beq.w	800c70c <_dtoa_r+0x894>
 800c58a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c58e:	9c08      	ldr	r4, [sp, #32]
 800c590:	9e00      	ldr	r6, [sp, #0]
 800c592:	9a00      	ldr	r2, [sp, #0]
 800c594:	441a      	add	r2, r3
 800c596:	9200      	str	r2, [sp, #0]
 800c598:	9a06      	ldr	r2, [sp, #24]
 800c59a:	2101      	movs	r1, #1
 800c59c:	441a      	add	r2, r3
 800c59e:	4648      	mov	r0, r9
 800c5a0:	9206      	str	r2, [sp, #24]
 800c5a2:	f000 fc2d 	bl	800ce00 <__i2b>
 800c5a6:	4605      	mov	r5, r0
 800c5a8:	b166      	cbz	r6, 800c5c4 <_dtoa_r+0x74c>
 800c5aa:	9b06      	ldr	r3, [sp, #24]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	dd09      	ble.n	800c5c4 <_dtoa_r+0x74c>
 800c5b0:	42b3      	cmp	r3, r6
 800c5b2:	9a00      	ldr	r2, [sp, #0]
 800c5b4:	bfa8      	it	ge
 800c5b6:	4633      	movge	r3, r6
 800c5b8:	1ad2      	subs	r2, r2, r3
 800c5ba:	9200      	str	r2, [sp, #0]
 800c5bc:	9a06      	ldr	r2, [sp, #24]
 800c5be:	1af6      	subs	r6, r6, r3
 800c5c0:	1ad3      	subs	r3, r2, r3
 800c5c2:	9306      	str	r3, [sp, #24]
 800c5c4:	9b08      	ldr	r3, [sp, #32]
 800c5c6:	b30b      	cbz	r3, 800c60c <_dtoa_r+0x794>
 800c5c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	f000 80c6 	beq.w	800c75c <_dtoa_r+0x8e4>
 800c5d0:	2c00      	cmp	r4, #0
 800c5d2:	f000 80c0 	beq.w	800c756 <_dtoa_r+0x8de>
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	4622      	mov	r2, r4
 800c5da:	4648      	mov	r0, r9
 800c5dc:	f000 fcc8 	bl	800cf70 <__pow5mult>
 800c5e0:	9a02      	ldr	r2, [sp, #8]
 800c5e2:	4601      	mov	r1, r0
 800c5e4:	4605      	mov	r5, r0
 800c5e6:	4648      	mov	r0, r9
 800c5e8:	f000 fc20 	bl	800ce2c <__multiply>
 800c5ec:	9902      	ldr	r1, [sp, #8]
 800c5ee:	4680      	mov	r8, r0
 800c5f0:	4648      	mov	r0, r9
 800c5f2:	f000 fb51 	bl	800cc98 <_Bfree>
 800c5f6:	9b08      	ldr	r3, [sp, #32]
 800c5f8:	1b1b      	subs	r3, r3, r4
 800c5fa:	9308      	str	r3, [sp, #32]
 800c5fc:	f000 80b1 	beq.w	800c762 <_dtoa_r+0x8ea>
 800c600:	9a08      	ldr	r2, [sp, #32]
 800c602:	4641      	mov	r1, r8
 800c604:	4648      	mov	r0, r9
 800c606:	f000 fcb3 	bl	800cf70 <__pow5mult>
 800c60a:	9002      	str	r0, [sp, #8]
 800c60c:	2101      	movs	r1, #1
 800c60e:	4648      	mov	r0, r9
 800c610:	f000 fbf6 	bl	800ce00 <__i2b>
 800c614:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c616:	4604      	mov	r4, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f000 81d8 	beq.w	800c9ce <_dtoa_r+0xb56>
 800c61e:	461a      	mov	r2, r3
 800c620:	4601      	mov	r1, r0
 800c622:	4648      	mov	r0, r9
 800c624:	f000 fca4 	bl	800cf70 <__pow5mult>
 800c628:	9b07      	ldr	r3, [sp, #28]
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	4604      	mov	r4, r0
 800c62e:	f300 809f 	bgt.w	800c770 <_dtoa_r+0x8f8>
 800c632:	9b04      	ldr	r3, [sp, #16]
 800c634:	2b00      	cmp	r3, #0
 800c636:	f040 8097 	bne.w	800c768 <_dtoa_r+0x8f0>
 800c63a:	9b05      	ldr	r3, [sp, #20]
 800c63c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c640:	2b00      	cmp	r3, #0
 800c642:	f040 8093 	bne.w	800c76c <_dtoa_r+0x8f4>
 800c646:	9b05      	ldr	r3, [sp, #20]
 800c648:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c64c:	0d1b      	lsrs	r3, r3, #20
 800c64e:	051b      	lsls	r3, r3, #20
 800c650:	b133      	cbz	r3, 800c660 <_dtoa_r+0x7e8>
 800c652:	9b00      	ldr	r3, [sp, #0]
 800c654:	3301      	adds	r3, #1
 800c656:	9300      	str	r3, [sp, #0]
 800c658:	9b06      	ldr	r3, [sp, #24]
 800c65a:	3301      	adds	r3, #1
 800c65c:	9306      	str	r3, [sp, #24]
 800c65e:	2301      	movs	r3, #1
 800c660:	9308      	str	r3, [sp, #32]
 800c662:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c664:	2b00      	cmp	r3, #0
 800c666:	f000 81b8 	beq.w	800c9da <_dtoa_r+0xb62>
 800c66a:	6923      	ldr	r3, [r4, #16]
 800c66c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c670:	6918      	ldr	r0, [r3, #16]
 800c672:	f000 fb79 	bl	800cd68 <__hi0bits>
 800c676:	f1c0 0020 	rsb	r0, r0, #32
 800c67a:	9b06      	ldr	r3, [sp, #24]
 800c67c:	4418      	add	r0, r3
 800c67e:	f010 001f 	ands.w	r0, r0, #31
 800c682:	f000 8082 	beq.w	800c78a <_dtoa_r+0x912>
 800c686:	f1c0 0320 	rsb	r3, r0, #32
 800c68a:	2b04      	cmp	r3, #4
 800c68c:	dd73      	ble.n	800c776 <_dtoa_r+0x8fe>
 800c68e:	9b00      	ldr	r3, [sp, #0]
 800c690:	f1c0 001c 	rsb	r0, r0, #28
 800c694:	4403      	add	r3, r0
 800c696:	9300      	str	r3, [sp, #0]
 800c698:	9b06      	ldr	r3, [sp, #24]
 800c69a:	4403      	add	r3, r0
 800c69c:	4406      	add	r6, r0
 800c69e:	9306      	str	r3, [sp, #24]
 800c6a0:	9b00      	ldr	r3, [sp, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	dd05      	ble.n	800c6b2 <_dtoa_r+0x83a>
 800c6a6:	9902      	ldr	r1, [sp, #8]
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	4648      	mov	r0, r9
 800c6ac:	f000 fcba 	bl	800d024 <__lshift>
 800c6b0:	9002      	str	r0, [sp, #8]
 800c6b2:	9b06      	ldr	r3, [sp, #24]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	dd05      	ble.n	800c6c4 <_dtoa_r+0x84c>
 800c6b8:	4621      	mov	r1, r4
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	4648      	mov	r0, r9
 800c6be:	f000 fcb1 	bl	800d024 <__lshift>
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d061      	beq.n	800c78e <_dtoa_r+0x916>
 800c6ca:	9802      	ldr	r0, [sp, #8]
 800c6cc:	4621      	mov	r1, r4
 800c6ce:	f000 fd15 	bl	800d0fc <__mcmp>
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	da5b      	bge.n	800c78e <_dtoa_r+0x916>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	9902      	ldr	r1, [sp, #8]
 800c6da:	220a      	movs	r2, #10
 800c6dc:	4648      	mov	r0, r9
 800c6de:	f000 fafd 	bl	800ccdc <__multadd>
 800c6e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6e4:	9002      	str	r0, [sp, #8]
 800c6e6:	f107 38ff 	add.w	r8, r7, #4294967295
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	f000 8177 	beq.w	800c9de <_dtoa_r+0xb66>
 800c6f0:	4629      	mov	r1, r5
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	220a      	movs	r2, #10
 800c6f6:	4648      	mov	r0, r9
 800c6f8:	f000 faf0 	bl	800ccdc <__multadd>
 800c6fc:	f1bb 0f00 	cmp.w	fp, #0
 800c700:	4605      	mov	r5, r0
 800c702:	dc6f      	bgt.n	800c7e4 <_dtoa_r+0x96c>
 800c704:	9b07      	ldr	r3, [sp, #28]
 800c706:	2b02      	cmp	r3, #2
 800c708:	dc49      	bgt.n	800c79e <_dtoa_r+0x926>
 800c70a:	e06b      	b.n	800c7e4 <_dtoa_r+0x96c>
 800c70c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c70e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c712:	e73c      	b.n	800c58e <_dtoa_r+0x716>
 800c714:	3fe00000 	.word	0x3fe00000
 800c718:	40240000 	.word	0x40240000
 800c71c:	9b03      	ldr	r3, [sp, #12]
 800c71e:	1e5c      	subs	r4, r3, #1
 800c720:	9b08      	ldr	r3, [sp, #32]
 800c722:	42a3      	cmp	r3, r4
 800c724:	db09      	blt.n	800c73a <_dtoa_r+0x8c2>
 800c726:	1b1c      	subs	r4, r3, r4
 800c728:	9b03      	ldr	r3, [sp, #12]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f6bf af30 	bge.w	800c590 <_dtoa_r+0x718>
 800c730:	9b00      	ldr	r3, [sp, #0]
 800c732:	9a03      	ldr	r2, [sp, #12]
 800c734:	1a9e      	subs	r6, r3, r2
 800c736:	2300      	movs	r3, #0
 800c738:	e72b      	b.n	800c592 <_dtoa_r+0x71a>
 800c73a:	9b08      	ldr	r3, [sp, #32]
 800c73c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c73e:	9408      	str	r4, [sp, #32]
 800c740:	1ae3      	subs	r3, r4, r3
 800c742:	441a      	add	r2, r3
 800c744:	9e00      	ldr	r6, [sp, #0]
 800c746:	9b03      	ldr	r3, [sp, #12]
 800c748:	920d      	str	r2, [sp, #52]	@ 0x34
 800c74a:	2400      	movs	r4, #0
 800c74c:	e721      	b.n	800c592 <_dtoa_r+0x71a>
 800c74e:	9c08      	ldr	r4, [sp, #32]
 800c750:	9e00      	ldr	r6, [sp, #0]
 800c752:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c754:	e728      	b.n	800c5a8 <_dtoa_r+0x730>
 800c756:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c75a:	e751      	b.n	800c600 <_dtoa_r+0x788>
 800c75c:	9a08      	ldr	r2, [sp, #32]
 800c75e:	9902      	ldr	r1, [sp, #8]
 800c760:	e750      	b.n	800c604 <_dtoa_r+0x78c>
 800c762:	f8cd 8008 	str.w	r8, [sp, #8]
 800c766:	e751      	b.n	800c60c <_dtoa_r+0x794>
 800c768:	2300      	movs	r3, #0
 800c76a:	e779      	b.n	800c660 <_dtoa_r+0x7e8>
 800c76c:	9b04      	ldr	r3, [sp, #16]
 800c76e:	e777      	b.n	800c660 <_dtoa_r+0x7e8>
 800c770:	2300      	movs	r3, #0
 800c772:	9308      	str	r3, [sp, #32]
 800c774:	e779      	b.n	800c66a <_dtoa_r+0x7f2>
 800c776:	d093      	beq.n	800c6a0 <_dtoa_r+0x828>
 800c778:	9a00      	ldr	r2, [sp, #0]
 800c77a:	331c      	adds	r3, #28
 800c77c:	441a      	add	r2, r3
 800c77e:	9200      	str	r2, [sp, #0]
 800c780:	9a06      	ldr	r2, [sp, #24]
 800c782:	441a      	add	r2, r3
 800c784:	441e      	add	r6, r3
 800c786:	9206      	str	r2, [sp, #24]
 800c788:	e78a      	b.n	800c6a0 <_dtoa_r+0x828>
 800c78a:	4603      	mov	r3, r0
 800c78c:	e7f4      	b.n	800c778 <_dtoa_r+0x900>
 800c78e:	9b03      	ldr	r3, [sp, #12]
 800c790:	2b00      	cmp	r3, #0
 800c792:	46b8      	mov	r8, r7
 800c794:	dc20      	bgt.n	800c7d8 <_dtoa_r+0x960>
 800c796:	469b      	mov	fp, r3
 800c798:	9b07      	ldr	r3, [sp, #28]
 800c79a:	2b02      	cmp	r3, #2
 800c79c:	dd1e      	ble.n	800c7dc <_dtoa_r+0x964>
 800c79e:	f1bb 0f00 	cmp.w	fp, #0
 800c7a2:	f47f adb1 	bne.w	800c308 <_dtoa_r+0x490>
 800c7a6:	4621      	mov	r1, r4
 800c7a8:	465b      	mov	r3, fp
 800c7aa:	2205      	movs	r2, #5
 800c7ac:	4648      	mov	r0, r9
 800c7ae:	f000 fa95 	bl	800ccdc <__multadd>
 800c7b2:	4601      	mov	r1, r0
 800c7b4:	4604      	mov	r4, r0
 800c7b6:	9802      	ldr	r0, [sp, #8]
 800c7b8:	f000 fca0 	bl	800d0fc <__mcmp>
 800c7bc:	2800      	cmp	r0, #0
 800c7be:	f77f ada3 	ble.w	800c308 <_dtoa_r+0x490>
 800c7c2:	4656      	mov	r6, sl
 800c7c4:	2331      	movs	r3, #49	@ 0x31
 800c7c6:	f806 3b01 	strb.w	r3, [r6], #1
 800c7ca:	f108 0801 	add.w	r8, r8, #1
 800c7ce:	e59f      	b.n	800c310 <_dtoa_r+0x498>
 800c7d0:	9c03      	ldr	r4, [sp, #12]
 800c7d2:	46b8      	mov	r8, r7
 800c7d4:	4625      	mov	r5, r4
 800c7d6:	e7f4      	b.n	800c7c2 <_dtoa_r+0x94a>
 800c7d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c7dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	f000 8101 	beq.w	800c9e6 <_dtoa_r+0xb6e>
 800c7e4:	2e00      	cmp	r6, #0
 800c7e6:	dd05      	ble.n	800c7f4 <_dtoa_r+0x97c>
 800c7e8:	4629      	mov	r1, r5
 800c7ea:	4632      	mov	r2, r6
 800c7ec:	4648      	mov	r0, r9
 800c7ee:	f000 fc19 	bl	800d024 <__lshift>
 800c7f2:	4605      	mov	r5, r0
 800c7f4:	9b08      	ldr	r3, [sp, #32]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d05c      	beq.n	800c8b4 <_dtoa_r+0xa3c>
 800c7fa:	6869      	ldr	r1, [r5, #4]
 800c7fc:	4648      	mov	r0, r9
 800c7fe:	f000 fa0b 	bl	800cc18 <_Balloc>
 800c802:	4606      	mov	r6, r0
 800c804:	b928      	cbnz	r0, 800c812 <_dtoa_r+0x99a>
 800c806:	4b82      	ldr	r3, [pc, #520]	@ (800ca10 <_dtoa_r+0xb98>)
 800c808:	4602      	mov	r2, r0
 800c80a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c80e:	f7ff bb4a 	b.w	800bea6 <_dtoa_r+0x2e>
 800c812:	692a      	ldr	r2, [r5, #16]
 800c814:	3202      	adds	r2, #2
 800c816:	0092      	lsls	r2, r2, #2
 800c818:	f105 010c 	add.w	r1, r5, #12
 800c81c:	300c      	adds	r0, #12
 800c81e:	f000 ffa3 	bl	800d768 <memcpy>
 800c822:	2201      	movs	r2, #1
 800c824:	4631      	mov	r1, r6
 800c826:	4648      	mov	r0, r9
 800c828:	f000 fbfc 	bl	800d024 <__lshift>
 800c82c:	f10a 0301 	add.w	r3, sl, #1
 800c830:	9300      	str	r3, [sp, #0]
 800c832:	eb0a 030b 	add.w	r3, sl, fp
 800c836:	9308      	str	r3, [sp, #32]
 800c838:	9b04      	ldr	r3, [sp, #16]
 800c83a:	f003 0301 	and.w	r3, r3, #1
 800c83e:	462f      	mov	r7, r5
 800c840:	9306      	str	r3, [sp, #24]
 800c842:	4605      	mov	r5, r0
 800c844:	9b00      	ldr	r3, [sp, #0]
 800c846:	9802      	ldr	r0, [sp, #8]
 800c848:	4621      	mov	r1, r4
 800c84a:	f103 3bff 	add.w	fp, r3, #4294967295
 800c84e:	f7ff fa8a 	bl	800bd66 <quorem>
 800c852:	4603      	mov	r3, r0
 800c854:	3330      	adds	r3, #48	@ 0x30
 800c856:	9003      	str	r0, [sp, #12]
 800c858:	4639      	mov	r1, r7
 800c85a:	9802      	ldr	r0, [sp, #8]
 800c85c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c85e:	f000 fc4d 	bl	800d0fc <__mcmp>
 800c862:	462a      	mov	r2, r5
 800c864:	9004      	str	r0, [sp, #16]
 800c866:	4621      	mov	r1, r4
 800c868:	4648      	mov	r0, r9
 800c86a:	f000 fc63 	bl	800d134 <__mdiff>
 800c86e:	68c2      	ldr	r2, [r0, #12]
 800c870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c872:	4606      	mov	r6, r0
 800c874:	bb02      	cbnz	r2, 800c8b8 <_dtoa_r+0xa40>
 800c876:	4601      	mov	r1, r0
 800c878:	9802      	ldr	r0, [sp, #8]
 800c87a:	f000 fc3f 	bl	800d0fc <__mcmp>
 800c87e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c880:	4602      	mov	r2, r0
 800c882:	4631      	mov	r1, r6
 800c884:	4648      	mov	r0, r9
 800c886:	920c      	str	r2, [sp, #48]	@ 0x30
 800c888:	9309      	str	r3, [sp, #36]	@ 0x24
 800c88a:	f000 fa05 	bl	800cc98 <_Bfree>
 800c88e:	9b07      	ldr	r3, [sp, #28]
 800c890:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c892:	9e00      	ldr	r6, [sp, #0]
 800c894:	ea42 0103 	orr.w	r1, r2, r3
 800c898:	9b06      	ldr	r3, [sp, #24]
 800c89a:	4319      	orrs	r1, r3
 800c89c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c89e:	d10d      	bne.n	800c8bc <_dtoa_r+0xa44>
 800c8a0:	2b39      	cmp	r3, #57	@ 0x39
 800c8a2:	d027      	beq.n	800c8f4 <_dtoa_r+0xa7c>
 800c8a4:	9a04      	ldr	r2, [sp, #16]
 800c8a6:	2a00      	cmp	r2, #0
 800c8a8:	dd01      	ble.n	800c8ae <_dtoa_r+0xa36>
 800c8aa:	9b03      	ldr	r3, [sp, #12]
 800c8ac:	3331      	adds	r3, #49	@ 0x31
 800c8ae:	f88b 3000 	strb.w	r3, [fp]
 800c8b2:	e52e      	b.n	800c312 <_dtoa_r+0x49a>
 800c8b4:	4628      	mov	r0, r5
 800c8b6:	e7b9      	b.n	800c82c <_dtoa_r+0x9b4>
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	e7e2      	b.n	800c882 <_dtoa_r+0xa0a>
 800c8bc:	9904      	ldr	r1, [sp, #16]
 800c8be:	2900      	cmp	r1, #0
 800c8c0:	db04      	blt.n	800c8cc <_dtoa_r+0xa54>
 800c8c2:	9807      	ldr	r0, [sp, #28]
 800c8c4:	4301      	orrs	r1, r0
 800c8c6:	9806      	ldr	r0, [sp, #24]
 800c8c8:	4301      	orrs	r1, r0
 800c8ca:	d120      	bne.n	800c90e <_dtoa_r+0xa96>
 800c8cc:	2a00      	cmp	r2, #0
 800c8ce:	ddee      	ble.n	800c8ae <_dtoa_r+0xa36>
 800c8d0:	9902      	ldr	r1, [sp, #8]
 800c8d2:	9300      	str	r3, [sp, #0]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	4648      	mov	r0, r9
 800c8d8:	f000 fba4 	bl	800d024 <__lshift>
 800c8dc:	4621      	mov	r1, r4
 800c8de:	9002      	str	r0, [sp, #8]
 800c8e0:	f000 fc0c 	bl	800d0fc <__mcmp>
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	9b00      	ldr	r3, [sp, #0]
 800c8e8:	dc02      	bgt.n	800c8f0 <_dtoa_r+0xa78>
 800c8ea:	d1e0      	bne.n	800c8ae <_dtoa_r+0xa36>
 800c8ec:	07da      	lsls	r2, r3, #31
 800c8ee:	d5de      	bpl.n	800c8ae <_dtoa_r+0xa36>
 800c8f0:	2b39      	cmp	r3, #57	@ 0x39
 800c8f2:	d1da      	bne.n	800c8aa <_dtoa_r+0xa32>
 800c8f4:	2339      	movs	r3, #57	@ 0x39
 800c8f6:	f88b 3000 	strb.w	r3, [fp]
 800c8fa:	4633      	mov	r3, r6
 800c8fc:	461e      	mov	r6, r3
 800c8fe:	3b01      	subs	r3, #1
 800c900:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c904:	2a39      	cmp	r2, #57	@ 0x39
 800c906:	d04e      	beq.n	800c9a6 <_dtoa_r+0xb2e>
 800c908:	3201      	adds	r2, #1
 800c90a:	701a      	strb	r2, [r3, #0]
 800c90c:	e501      	b.n	800c312 <_dtoa_r+0x49a>
 800c90e:	2a00      	cmp	r2, #0
 800c910:	dd03      	ble.n	800c91a <_dtoa_r+0xaa2>
 800c912:	2b39      	cmp	r3, #57	@ 0x39
 800c914:	d0ee      	beq.n	800c8f4 <_dtoa_r+0xa7c>
 800c916:	3301      	adds	r3, #1
 800c918:	e7c9      	b.n	800c8ae <_dtoa_r+0xa36>
 800c91a:	9a00      	ldr	r2, [sp, #0]
 800c91c:	9908      	ldr	r1, [sp, #32]
 800c91e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c922:	428a      	cmp	r2, r1
 800c924:	d028      	beq.n	800c978 <_dtoa_r+0xb00>
 800c926:	9902      	ldr	r1, [sp, #8]
 800c928:	2300      	movs	r3, #0
 800c92a:	220a      	movs	r2, #10
 800c92c:	4648      	mov	r0, r9
 800c92e:	f000 f9d5 	bl	800ccdc <__multadd>
 800c932:	42af      	cmp	r7, r5
 800c934:	9002      	str	r0, [sp, #8]
 800c936:	f04f 0300 	mov.w	r3, #0
 800c93a:	f04f 020a 	mov.w	r2, #10
 800c93e:	4639      	mov	r1, r7
 800c940:	4648      	mov	r0, r9
 800c942:	d107      	bne.n	800c954 <_dtoa_r+0xadc>
 800c944:	f000 f9ca 	bl	800ccdc <__multadd>
 800c948:	4607      	mov	r7, r0
 800c94a:	4605      	mov	r5, r0
 800c94c:	9b00      	ldr	r3, [sp, #0]
 800c94e:	3301      	adds	r3, #1
 800c950:	9300      	str	r3, [sp, #0]
 800c952:	e777      	b.n	800c844 <_dtoa_r+0x9cc>
 800c954:	f000 f9c2 	bl	800ccdc <__multadd>
 800c958:	4629      	mov	r1, r5
 800c95a:	4607      	mov	r7, r0
 800c95c:	2300      	movs	r3, #0
 800c95e:	220a      	movs	r2, #10
 800c960:	4648      	mov	r0, r9
 800c962:	f000 f9bb 	bl	800ccdc <__multadd>
 800c966:	4605      	mov	r5, r0
 800c968:	e7f0      	b.n	800c94c <_dtoa_r+0xad4>
 800c96a:	f1bb 0f00 	cmp.w	fp, #0
 800c96e:	bfcc      	ite	gt
 800c970:	465e      	movgt	r6, fp
 800c972:	2601      	movle	r6, #1
 800c974:	4456      	add	r6, sl
 800c976:	2700      	movs	r7, #0
 800c978:	9902      	ldr	r1, [sp, #8]
 800c97a:	9300      	str	r3, [sp, #0]
 800c97c:	2201      	movs	r2, #1
 800c97e:	4648      	mov	r0, r9
 800c980:	f000 fb50 	bl	800d024 <__lshift>
 800c984:	4621      	mov	r1, r4
 800c986:	9002      	str	r0, [sp, #8]
 800c988:	f000 fbb8 	bl	800d0fc <__mcmp>
 800c98c:	2800      	cmp	r0, #0
 800c98e:	dcb4      	bgt.n	800c8fa <_dtoa_r+0xa82>
 800c990:	d102      	bne.n	800c998 <_dtoa_r+0xb20>
 800c992:	9b00      	ldr	r3, [sp, #0]
 800c994:	07db      	lsls	r3, r3, #31
 800c996:	d4b0      	bmi.n	800c8fa <_dtoa_r+0xa82>
 800c998:	4633      	mov	r3, r6
 800c99a:	461e      	mov	r6, r3
 800c99c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9a0:	2a30      	cmp	r2, #48	@ 0x30
 800c9a2:	d0fa      	beq.n	800c99a <_dtoa_r+0xb22>
 800c9a4:	e4b5      	b.n	800c312 <_dtoa_r+0x49a>
 800c9a6:	459a      	cmp	sl, r3
 800c9a8:	d1a8      	bne.n	800c8fc <_dtoa_r+0xa84>
 800c9aa:	2331      	movs	r3, #49	@ 0x31
 800c9ac:	f108 0801 	add.w	r8, r8, #1
 800c9b0:	f88a 3000 	strb.w	r3, [sl]
 800c9b4:	e4ad      	b.n	800c312 <_dtoa_r+0x49a>
 800c9b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c9b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ca14 <_dtoa_r+0xb9c>
 800c9bc:	b11b      	cbz	r3, 800c9c6 <_dtoa_r+0xb4e>
 800c9be:	f10a 0308 	add.w	r3, sl, #8
 800c9c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c9c4:	6013      	str	r3, [r2, #0]
 800c9c6:	4650      	mov	r0, sl
 800c9c8:	b017      	add	sp, #92	@ 0x5c
 800c9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ce:	9b07      	ldr	r3, [sp, #28]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	f77f ae2e 	ble.w	800c632 <_dtoa_r+0x7ba>
 800c9d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c9d8:	9308      	str	r3, [sp, #32]
 800c9da:	2001      	movs	r0, #1
 800c9dc:	e64d      	b.n	800c67a <_dtoa_r+0x802>
 800c9de:	f1bb 0f00 	cmp.w	fp, #0
 800c9e2:	f77f aed9 	ble.w	800c798 <_dtoa_r+0x920>
 800c9e6:	4656      	mov	r6, sl
 800c9e8:	9802      	ldr	r0, [sp, #8]
 800c9ea:	4621      	mov	r1, r4
 800c9ec:	f7ff f9bb 	bl	800bd66 <quorem>
 800c9f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c9f4:	f806 3b01 	strb.w	r3, [r6], #1
 800c9f8:	eba6 020a 	sub.w	r2, r6, sl
 800c9fc:	4593      	cmp	fp, r2
 800c9fe:	ddb4      	ble.n	800c96a <_dtoa_r+0xaf2>
 800ca00:	9902      	ldr	r1, [sp, #8]
 800ca02:	2300      	movs	r3, #0
 800ca04:	220a      	movs	r2, #10
 800ca06:	4648      	mov	r0, r9
 800ca08:	f000 f968 	bl	800ccdc <__multadd>
 800ca0c:	9002      	str	r0, [sp, #8]
 800ca0e:	e7eb      	b.n	800c9e8 <_dtoa_r+0xb70>
 800ca10:	080268bc 	.word	0x080268bc
 800ca14:	08026840 	.word	0x08026840

0800ca18 <_free_r>:
 800ca18:	b538      	push	{r3, r4, r5, lr}
 800ca1a:	4605      	mov	r5, r0
 800ca1c:	2900      	cmp	r1, #0
 800ca1e:	d041      	beq.n	800caa4 <_free_r+0x8c>
 800ca20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca24:	1f0c      	subs	r4, r1, #4
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	bfb8      	it	lt
 800ca2a:	18e4      	addlt	r4, r4, r3
 800ca2c:	f000 f8e8 	bl	800cc00 <__malloc_lock>
 800ca30:	4a1d      	ldr	r2, [pc, #116]	@ (800caa8 <_free_r+0x90>)
 800ca32:	6813      	ldr	r3, [r2, #0]
 800ca34:	b933      	cbnz	r3, 800ca44 <_free_r+0x2c>
 800ca36:	6063      	str	r3, [r4, #4]
 800ca38:	6014      	str	r4, [r2, #0]
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca40:	f000 b8e4 	b.w	800cc0c <__malloc_unlock>
 800ca44:	42a3      	cmp	r3, r4
 800ca46:	d908      	bls.n	800ca5a <_free_r+0x42>
 800ca48:	6820      	ldr	r0, [r4, #0]
 800ca4a:	1821      	adds	r1, r4, r0
 800ca4c:	428b      	cmp	r3, r1
 800ca4e:	bf01      	itttt	eq
 800ca50:	6819      	ldreq	r1, [r3, #0]
 800ca52:	685b      	ldreq	r3, [r3, #4]
 800ca54:	1809      	addeq	r1, r1, r0
 800ca56:	6021      	streq	r1, [r4, #0]
 800ca58:	e7ed      	b.n	800ca36 <_free_r+0x1e>
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	b10b      	cbz	r3, 800ca64 <_free_r+0x4c>
 800ca60:	42a3      	cmp	r3, r4
 800ca62:	d9fa      	bls.n	800ca5a <_free_r+0x42>
 800ca64:	6811      	ldr	r1, [r2, #0]
 800ca66:	1850      	adds	r0, r2, r1
 800ca68:	42a0      	cmp	r0, r4
 800ca6a:	d10b      	bne.n	800ca84 <_free_r+0x6c>
 800ca6c:	6820      	ldr	r0, [r4, #0]
 800ca6e:	4401      	add	r1, r0
 800ca70:	1850      	adds	r0, r2, r1
 800ca72:	4283      	cmp	r3, r0
 800ca74:	6011      	str	r1, [r2, #0]
 800ca76:	d1e0      	bne.n	800ca3a <_free_r+0x22>
 800ca78:	6818      	ldr	r0, [r3, #0]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	6053      	str	r3, [r2, #4]
 800ca7e:	4408      	add	r0, r1
 800ca80:	6010      	str	r0, [r2, #0]
 800ca82:	e7da      	b.n	800ca3a <_free_r+0x22>
 800ca84:	d902      	bls.n	800ca8c <_free_r+0x74>
 800ca86:	230c      	movs	r3, #12
 800ca88:	602b      	str	r3, [r5, #0]
 800ca8a:	e7d6      	b.n	800ca3a <_free_r+0x22>
 800ca8c:	6820      	ldr	r0, [r4, #0]
 800ca8e:	1821      	adds	r1, r4, r0
 800ca90:	428b      	cmp	r3, r1
 800ca92:	bf04      	itt	eq
 800ca94:	6819      	ldreq	r1, [r3, #0]
 800ca96:	685b      	ldreq	r3, [r3, #4]
 800ca98:	6063      	str	r3, [r4, #4]
 800ca9a:	bf04      	itt	eq
 800ca9c:	1809      	addeq	r1, r1, r0
 800ca9e:	6021      	streq	r1, [r4, #0]
 800caa0:	6054      	str	r4, [r2, #4]
 800caa2:	e7ca      	b.n	800ca3a <_free_r+0x22>
 800caa4:	bd38      	pop	{r3, r4, r5, pc}
 800caa6:	bf00      	nop
 800caa8:	20002804 	.word	0x20002804

0800caac <malloc>:
 800caac:	4b02      	ldr	r3, [pc, #8]	@ (800cab8 <malloc+0xc>)
 800caae:	4601      	mov	r1, r0
 800cab0:	6818      	ldr	r0, [r3, #0]
 800cab2:	f000 b825 	b.w	800cb00 <_malloc_r>
 800cab6:	bf00      	nop
 800cab8:	200001a8 	.word	0x200001a8

0800cabc <sbrk_aligned>:
 800cabc:	b570      	push	{r4, r5, r6, lr}
 800cabe:	4e0f      	ldr	r6, [pc, #60]	@ (800cafc <sbrk_aligned+0x40>)
 800cac0:	460c      	mov	r4, r1
 800cac2:	6831      	ldr	r1, [r6, #0]
 800cac4:	4605      	mov	r5, r0
 800cac6:	b911      	cbnz	r1, 800cace <sbrk_aligned+0x12>
 800cac8:	f000 fe3e 	bl	800d748 <_sbrk_r>
 800cacc:	6030      	str	r0, [r6, #0]
 800cace:	4621      	mov	r1, r4
 800cad0:	4628      	mov	r0, r5
 800cad2:	f000 fe39 	bl	800d748 <_sbrk_r>
 800cad6:	1c43      	adds	r3, r0, #1
 800cad8:	d103      	bne.n	800cae2 <sbrk_aligned+0x26>
 800cada:	f04f 34ff 	mov.w	r4, #4294967295
 800cade:	4620      	mov	r0, r4
 800cae0:	bd70      	pop	{r4, r5, r6, pc}
 800cae2:	1cc4      	adds	r4, r0, #3
 800cae4:	f024 0403 	bic.w	r4, r4, #3
 800cae8:	42a0      	cmp	r0, r4
 800caea:	d0f8      	beq.n	800cade <sbrk_aligned+0x22>
 800caec:	1a21      	subs	r1, r4, r0
 800caee:	4628      	mov	r0, r5
 800caf0:	f000 fe2a 	bl	800d748 <_sbrk_r>
 800caf4:	3001      	adds	r0, #1
 800caf6:	d1f2      	bne.n	800cade <sbrk_aligned+0x22>
 800caf8:	e7ef      	b.n	800cada <sbrk_aligned+0x1e>
 800cafa:	bf00      	nop
 800cafc:	20002800 	.word	0x20002800

0800cb00 <_malloc_r>:
 800cb00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb04:	1ccd      	adds	r5, r1, #3
 800cb06:	f025 0503 	bic.w	r5, r5, #3
 800cb0a:	3508      	adds	r5, #8
 800cb0c:	2d0c      	cmp	r5, #12
 800cb0e:	bf38      	it	cc
 800cb10:	250c      	movcc	r5, #12
 800cb12:	2d00      	cmp	r5, #0
 800cb14:	4606      	mov	r6, r0
 800cb16:	db01      	blt.n	800cb1c <_malloc_r+0x1c>
 800cb18:	42a9      	cmp	r1, r5
 800cb1a:	d904      	bls.n	800cb26 <_malloc_r+0x26>
 800cb1c:	230c      	movs	r3, #12
 800cb1e:	6033      	str	r3, [r6, #0]
 800cb20:	2000      	movs	r0, #0
 800cb22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cbfc <_malloc_r+0xfc>
 800cb2a:	f000 f869 	bl	800cc00 <__malloc_lock>
 800cb2e:	f8d8 3000 	ldr.w	r3, [r8]
 800cb32:	461c      	mov	r4, r3
 800cb34:	bb44      	cbnz	r4, 800cb88 <_malloc_r+0x88>
 800cb36:	4629      	mov	r1, r5
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f7ff ffbf 	bl	800cabc <sbrk_aligned>
 800cb3e:	1c43      	adds	r3, r0, #1
 800cb40:	4604      	mov	r4, r0
 800cb42:	d158      	bne.n	800cbf6 <_malloc_r+0xf6>
 800cb44:	f8d8 4000 	ldr.w	r4, [r8]
 800cb48:	4627      	mov	r7, r4
 800cb4a:	2f00      	cmp	r7, #0
 800cb4c:	d143      	bne.n	800cbd6 <_malloc_r+0xd6>
 800cb4e:	2c00      	cmp	r4, #0
 800cb50:	d04b      	beq.n	800cbea <_malloc_r+0xea>
 800cb52:	6823      	ldr	r3, [r4, #0]
 800cb54:	4639      	mov	r1, r7
 800cb56:	4630      	mov	r0, r6
 800cb58:	eb04 0903 	add.w	r9, r4, r3
 800cb5c:	f000 fdf4 	bl	800d748 <_sbrk_r>
 800cb60:	4581      	cmp	r9, r0
 800cb62:	d142      	bne.n	800cbea <_malloc_r+0xea>
 800cb64:	6821      	ldr	r1, [r4, #0]
 800cb66:	1a6d      	subs	r5, r5, r1
 800cb68:	4629      	mov	r1, r5
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	f7ff ffa6 	bl	800cabc <sbrk_aligned>
 800cb70:	3001      	adds	r0, #1
 800cb72:	d03a      	beq.n	800cbea <_malloc_r+0xea>
 800cb74:	6823      	ldr	r3, [r4, #0]
 800cb76:	442b      	add	r3, r5
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	f8d8 3000 	ldr.w	r3, [r8]
 800cb7e:	685a      	ldr	r2, [r3, #4]
 800cb80:	bb62      	cbnz	r2, 800cbdc <_malloc_r+0xdc>
 800cb82:	f8c8 7000 	str.w	r7, [r8]
 800cb86:	e00f      	b.n	800cba8 <_malloc_r+0xa8>
 800cb88:	6822      	ldr	r2, [r4, #0]
 800cb8a:	1b52      	subs	r2, r2, r5
 800cb8c:	d420      	bmi.n	800cbd0 <_malloc_r+0xd0>
 800cb8e:	2a0b      	cmp	r2, #11
 800cb90:	d917      	bls.n	800cbc2 <_malloc_r+0xc2>
 800cb92:	1961      	adds	r1, r4, r5
 800cb94:	42a3      	cmp	r3, r4
 800cb96:	6025      	str	r5, [r4, #0]
 800cb98:	bf18      	it	ne
 800cb9a:	6059      	strne	r1, [r3, #4]
 800cb9c:	6863      	ldr	r3, [r4, #4]
 800cb9e:	bf08      	it	eq
 800cba0:	f8c8 1000 	streq.w	r1, [r8]
 800cba4:	5162      	str	r2, [r4, r5]
 800cba6:	604b      	str	r3, [r1, #4]
 800cba8:	4630      	mov	r0, r6
 800cbaa:	f000 f82f 	bl	800cc0c <__malloc_unlock>
 800cbae:	f104 000b 	add.w	r0, r4, #11
 800cbb2:	1d23      	adds	r3, r4, #4
 800cbb4:	f020 0007 	bic.w	r0, r0, #7
 800cbb8:	1ac2      	subs	r2, r0, r3
 800cbba:	bf1c      	itt	ne
 800cbbc:	1a1b      	subne	r3, r3, r0
 800cbbe:	50a3      	strne	r3, [r4, r2]
 800cbc0:	e7af      	b.n	800cb22 <_malloc_r+0x22>
 800cbc2:	6862      	ldr	r2, [r4, #4]
 800cbc4:	42a3      	cmp	r3, r4
 800cbc6:	bf0c      	ite	eq
 800cbc8:	f8c8 2000 	streq.w	r2, [r8]
 800cbcc:	605a      	strne	r2, [r3, #4]
 800cbce:	e7eb      	b.n	800cba8 <_malloc_r+0xa8>
 800cbd0:	4623      	mov	r3, r4
 800cbd2:	6864      	ldr	r4, [r4, #4]
 800cbd4:	e7ae      	b.n	800cb34 <_malloc_r+0x34>
 800cbd6:	463c      	mov	r4, r7
 800cbd8:	687f      	ldr	r7, [r7, #4]
 800cbda:	e7b6      	b.n	800cb4a <_malloc_r+0x4a>
 800cbdc:	461a      	mov	r2, r3
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	42a3      	cmp	r3, r4
 800cbe2:	d1fb      	bne.n	800cbdc <_malloc_r+0xdc>
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	6053      	str	r3, [r2, #4]
 800cbe8:	e7de      	b.n	800cba8 <_malloc_r+0xa8>
 800cbea:	230c      	movs	r3, #12
 800cbec:	6033      	str	r3, [r6, #0]
 800cbee:	4630      	mov	r0, r6
 800cbf0:	f000 f80c 	bl	800cc0c <__malloc_unlock>
 800cbf4:	e794      	b.n	800cb20 <_malloc_r+0x20>
 800cbf6:	6005      	str	r5, [r0, #0]
 800cbf8:	e7d6      	b.n	800cba8 <_malloc_r+0xa8>
 800cbfa:	bf00      	nop
 800cbfc:	20002804 	.word	0x20002804

0800cc00 <__malloc_lock>:
 800cc00:	4801      	ldr	r0, [pc, #4]	@ (800cc08 <__malloc_lock+0x8>)
 800cc02:	f7ff b8ae 	b.w	800bd62 <__retarget_lock_acquire_recursive>
 800cc06:	bf00      	nop
 800cc08:	200027fc 	.word	0x200027fc

0800cc0c <__malloc_unlock>:
 800cc0c:	4801      	ldr	r0, [pc, #4]	@ (800cc14 <__malloc_unlock+0x8>)
 800cc0e:	f7ff b8a9 	b.w	800bd64 <__retarget_lock_release_recursive>
 800cc12:	bf00      	nop
 800cc14:	200027fc 	.word	0x200027fc

0800cc18 <_Balloc>:
 800cc18:	b570      	push	{r4, r5, r6, lr}
 800cc1a:	69c6      	ldr	r6, [r0, #28]
 800cc1c:	4604      	mov	r4, r0
 800cc1e:	460d      	mov	r5, r1
 800cc20:	b976      	cbnz	r6, 800cc40 <_Balloc+0x28>
 800cc22:	2010      	movs	r0, #16
 800cc24:	f7ff ff42 	bl	800caac <malloc>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	61e0      	str	r0, [r4, #28]
 800cc2c:	b920      	cbnz	r0, 800cc38 <_Balloc+0x20>
 800cc2e:	4b18      	ldr	r3, [pc, #96]	@ (800cc90 <_Balloc+0x78>)
 800cc30:	4818      	ldr	r0, [pc, #96]	@ (800cc94 <_Balloc+0x7c>)
 800cc32:	216b      	movs	r1, #107	@ 0x6b
 800cc34:	f000 fda6 	bl	800d784 <__assert_func>
 800cc38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc3c:	6006      	str	r6, [r0, #0]
 800cc3e:	60c6      	str	r6, [r0, #12]
 800cc40:	69e6      	ldr	r6, [r4, #28]
 800cc42:	68f3      	ldr	r3, [r6, #12]
 800cc44:	b183      	cbz	r3, 800cc68 <_Balloc+0x50>
 800cc46:	69e3      	ldr	r3, [r4, #28]
 800cc48:	68db      	ldr	r3, [r3, #12]
 800cc4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc4e:	b9b8      	cbnz	r0, 800cc80 <_Balloc+0x68>
 800cc50:	2101      	movs	r1, #1
 800cc52:	fa01 f605 	lsl.w	r6, r1, r5
 800cc56:	1d72      	adds	r2, r6, #5
 800cc58:	0092      	lsls	r2, r2, #2
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	f000 fdb0 	bl	800d7c0 <_calloc_r>
 800cc60:	b160      	cbz	r0, 800cc7c <_Balloc+0x64>
 800cc62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc66:	e00e      	b.n	800cc86 <_Balloc+0x6e>
 800cc68:	2221      	movs	r2, #33	@ 0x21
 800cc6a:	2104      	movs	r1, #4
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	f000 fda7 	bl	800d7c0 <_calloc_r>
 800cc72:	69e3      	ldr	r3, [r4, #28]
 800cc74:	60f0      	str	r0, [r6, #12]
 800cc76:	68db      	ldr	r3, [r3, #12]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d1e4      	bne.n	800cc46 <_Balloc+0x2e>
 800cc7c:	2000      	movs	r0, #0
 800cc7e:	bd70      	pop	{r4, r5, r6, pc}
 800cc80:	6802      	ldr	r2, [r0, #0]
 800cc82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cc86:	2300      	movs	r3, #0
 800cc88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc8c:	e7f7      	b.n	800cc7e <_Balloc+0x66>
 800cc8e:	bf00      	nop
 800cc90:	0802684d 	.word	0x0802684d
 800cc94:	080268cd 	.word	0x080268cd

0800cc98 <_Bfree>:
 800cc98:	b570      	push	{r4, r5, r6, lr}
 800cc9a:	69c6      	ldr	r6, [r0, #28]
 800cc9c:	4605      	mov	r5, r0
 800cc9e:	460c      	mov	r4, r1
 800cca0:	b976      	cbnz	r6, 800ccc0 <_Bfree+0x28>
 800cca2:	2010      	movs	r0, #16
 800cca4:	f7ff ff02 	bl	800caac <malloc>
 800cca8:	4602      	mov	r2, r0
 800ccaa:	61e8      	str	r0, [r5, #28]
 800ccac:	b920      	cbnz	r0, 800ccb8 <_Bfree+0x20>
 800ccae:	4b09      	ldr	r3, [pc, #36]	@ (800ccd4 <_Bfree+0x3c>)
 800ccb0:	4809      	ldr	r0, [pc, #36]	@ (800ccd8 <_Bfree+0x40>)
 800ccb2:	218f      	movs	r1, #143	@ 0x8f
 800ccb4:	f000 fd66 	bl	800d784 <__assert_func>
 800ccb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccbc:	6006      	str	r6, [r0, #0]
 800ccbe:	60c6      	str	r6, [r0, #12]
 800ccc0:	b13c      	cbz	r4, 800ccd2 <_Bfree+0x3a>
 800ccc2:	69eb      	ldr	r3, [r5, #28]
 800ccc4:	6862      	ldr	r2, [r4, #4]
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cccc:	6021      	str	r1, [r4, #0]
 800ccce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ccd2:	bd70      	pop	{r4, r5, r6, pc}
 800ccd4:	0802684d 	.word	0x0802684d
 800ccd8:	080268cd 	.word	0x080268cd

0800ccdc <__multadd>:
 800ccdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cce0:	690d      	ldr	r5, [r1, #16]
 800cce2:	4607      	mov	r7, r0
 800cce4:	460c      	mov	r4, r1
 800cce6:	461e      	mov	r6, r3
 800cce8:	f101 0c14 	add.w	ip, r1, #20
 800ccec:	2000      	movs	r0, #0
 800ccee:	f8dc 3000 	ldr.w	r3, [ip]
 800ccf2:	b299      	uxth	r1, r3
 800ccf4:	fb02 6101 	mla	r1, r2, r1, r6
 800ccf8:	0c1e      	lsrs	r6, r3, #16
 800ccfa:	0c0b      	lsrs	r3, r1, #16
 800ccfc:	fb02 3306 	mla	r3, r2, r6, r3
 800cd00:	b289      	uxth	r1, r1
 800cd02:	3001      	adds	r0, #1
 800cd04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd08:	4285      	cmp	r5, r0
 800cd0a:	f84c 1b04 	str.w	r1, [ip], #4
 800cd0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd12:	dcec      	bgt.n	800ccee <__multadd+0x12>
 800cd14:	b30e      	cbz	r6, 800cd5a <__multadd+0x7e>
 800cd16:	68a3      	ldr	r3, [r4, #8]
 800cd18:	42ab      	cmp	r3, r5
 800cd1a:	dc19      	bgt.n	800cd50 <__multadd+0x74>
 800cd1c:	6861      	ldr	r1, [r4, #4]
 800cd1e:	4638      	mov	r0, r7
 800cd20:	3101      	adds	r1, #1
 800cd22:	f7ff ff79 	bl	800cc18 <_Balloc>
 800cd26:	4680      	mov	r8, r0
 800cd28:	b928      	cbnz	r0, 800cd36 <__multadd+0x5a>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	4b0c      	ldr	r3, [pc, #48]	@ (800cd60 <__multadd+0x84>)
 800cd2e:	480d      	ldr	r0, [pc, #52]	@ (800cd64 <__multadd+0x88>)
 800cd30:	21ba      	movs	r1, #186	@ 0xba
 800cd32:	f000 fd27 	bl	800d784 <__assert_func>
 800cd36:	6922      	ldr	r2, [r4, #16]
 800cd38:	3202      	adds	r2, #2
 800cd3a:	f104 010c 	add.w	r1, r4, #12
 800cd3e:	0092      	lsls	r2, r2, #2
 800cd40:	300c      	adds	r0, #12
 800cd42:	f000 fd11 	bl	800d768 <memcpy>
 800cd46:	4621      	mov	r1, r4
 800cd48:	4638      	mov	r0, r7
 800cd4a:	f7ff ffa5 	bl	800cc98 <_Bfree>
 800cd4e:	4644      	mov	r4, r8
 800cd50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd54:	3501      	adds	r5, #1
 800cd56:	615e      	str	r6, [r3, #20]
 800cd58:	6125      	str	r5, [r4, #16]
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd60:	080268bc 	.word	0x080268bc
 800cd64:	080268cd 	.word	0x080268cd

0800cd68 <__hi0bits>:
 800cd68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	bf36      	itet	cc
 800cd70:	0403      	lslcc	r3, r0, #16
 800cd72:	2000      	movcs	r0, #0
 800cd74:	2010      	movcc	r0, #16
 800cd76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd7a:	bf3c      	itt	cc
 800cd7c:	021b      	lslcc	r3, r3, #8
 800cd7e:	3008      	addcc	r0, #8
 800cd80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd84:	bf3c      	itt	cc
 800cd86:	011b      	lslcc	r3, r3, #4
 800cd88:	3004      	addcc	r0, #4
 800cd8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd8e:	bf3c      	itt	cc
 800cd90:	009b      	lslcc	r3, r3, #2
 800cd92:	3002      	addcc	r0, #2
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	db05      	blt.n	800cda4 <__hi0bits+0x3c>
 800cd98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd9c:	f100 0001 	add.w	r0, r0, #1
 800cda0:	bf08      	it	eq
 800cda2:	2020      	moveq	r0, #32
 800cda4:	4770      	bx	lr

0800cda6 <__lo0bits>:
 800cda6:	6803      	ldr	r3, [r0, #0]
 800cda8:	4602      	mov	r2, r0
 800cdaa:	f013 0007 	ands.w	r0, r3, #7
 800cdae:	d00b      	beq.n	800cdc8 <__lo0bits+0x22>
 800cdb0:	07d9      	lsls	r1, r3, #31
 800cdb2:	d421      	bmi.n	800cdf8 <__lo0bits+0x52>
 800cdb4:	0798      	lsls	r0, r3, #30
 800cdb6:	bf49      	itett	mi
 800cdb8:	085b      	lsrmi	r3, r3, #1
 800cdba:	089b      	lsrpl	r3, r3, #2
 800cdbc:	2001      	movmi	r0, #1
 800cdbe:	6013      	strmi	r3, [r2, #0]
 800cdc0:	bf5c      	itt	pl
 800cdc2:	6013      	strpl	r3, [r2, #0]
 800cdc4:	2002      	movpl	r0, #2
 800cdc6:	4770      	bx	lr
 800cdc8:	b299      	uxth	r1, r3
 800cdca:	b909      	cbnz	r1, 800cdd0 <__lo0bits+0x2a>
 800cdcc:	0c1b      	lsrs	r3, r3, #16
 800cdce:	2010      	movs	r0, #16
 800cdd0:	b2d9      	uxtb	r1, r3
 800cdd2:	b909      	cbnz	r1, 800cdd8 <__lo0bits+0x32>
 800cdd4:	3008      	adds	r0, #8
 800cdd6:	0a1b      	lsrs	r3, r3, #8
 800cdd8:	0719      	lsls	r1, r3, #28
 800cdda:	bf04      	itt	eq
 800cddc:	091b      	lsreq	r3, r3, #4
 800cdde:	3004      	addeq	r0, #4
 800cde0:	0799      	lsls	r1, r3, #30
 800cde2:	bf04      	itt	eq
 800cde4:	089b      	lsreq	r3, r3, #2
 800cde6:	3002      	addeq	r0, #2
 800cde8:	07d9      	lsls	r1, r3, #31
 800cdea:	d403      	bmi.n	800cdf4 <__lo0bits+0x4e>
 800cdec:	085b      	lsrs	r3, r3, #1
 800cdee:	f100 0001 	add.w	r0, r0, #1
 800cdf2:	d003      	beq.n	800cdfc <__lo0bits+0x56>
 800cdf4:	6013      	str	r3, [r2, #0]
 800cdf6:	4770      	bx	lr
 800cdf8:	2000      	movs	r0, #0
 800cdfa:	4770      	bx	lr
 800cdfc:	2020      	movs	r0, #32
 800cdfe:	4770      	bx	lr

0800ce00 <__i2b>:
 800ce00:	b510      	push	{r4, lr}
 800ce02:	460c      	mov	r4, r1
 800ce04:	2101      	movs	r1, #1
 800ce06:	f7ff ff07 	bl	800cc18 <_Balloc>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	b928      	cbnz	r0, 800ce1a <__i2b+0x1a>
 800ce0e:	4b05      	ldr	r3, [pc, #20]	@ (800ce24 <__i2b+0x24>)
 800ce10:	4805      	ldr	r0, [pc, #20]	@ (800ce28 <__i2b+0x28>)
 800ce12:	f240 1145 	movw	r1, #325	@ 0x145
 800ce16:	f000 fcb5 	bl	800d784 <__assert_func>
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	6144      	str	r4, [r0, #20]
 800ce1e:	6103      	str	r3, [r0, #16]
 800ce20:	bd10      	pop	{r4, pc}
 800ce22:	bf00      	nop
 800ce24:	080268bc 	.word	0x080268bc
 800ce28:	080268cd 	.word	0x080268cd

0800ce2c <__multiply>:
 800ce2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce30:	4617      	mov	r7, r2
 800ce32:	690a      	ldr	r2, [r1, #16]
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	bfa8      	it	ge
 800ce3a:	463b      	movge	r3, r7
 800ce3c:	4689      	mov	r9, r1
 800ce3e:	bfa4      	itt	ge
 800ce40:	460f      	movge	r7, r1
 800ce42:	4699      	movge	r9, r3
 800ce44:	693d      	ldr	r5, [r7, #16]
 800ce46:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	6879      	ldr	r1, [r7, #4]
 800ce4e:	eb05 060a 	add.w	r6, r5, sl
 800ce52:	42b3      	cmp	r3, r6
 800ce54:	b085      	sub	sp, #20
 800ce56:	bfb8      	it	lt
 800ce58:	3101      	addlt	r1, #1
 800ce5a:	f7ff fedd 	bl	800cc18 <_Balloc>
 800ce5e:	b930      	cbnz	r0, 800ce6e <__multiply+0x42>
 800ce60:	4602      	mov	r2, r0
 800ce62:	4b41      	ldr	r3, [pc, #260]	@ (800cf68 <__multiply+0x13c>)
 800ce64:	4841      	ldr	r0, [pc, #260]	@ (800cf6c <__multiply+0x140>)
 800ce66:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ce6a:	f000 fc8b 	bl	800d784 <__assert_func>
 800ce6e:	f100 0414 	add.w	r4, r0, #20
 800ce72:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ce76:	4623      	mov	r3, r4
 800ce78:	2200      	movs	r2, #0
 800ce7a:	4573      	cmp	r3, lr
 800ce7c:	d320      	bcc.n	800cec0 <__multiply+0x94>
 800ce7e:	f107 0814 	add.w	r8, r7, #20
 800ce82:	f109 0114 	add.w	r1, r9, #20
 800ce86:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ce8a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ce8e:	9302      	str	r3, [sp, #8]
 800ce90:	1beb      	subs	r3, r5, r7
 800ce92:	3b15      	subs	r3, #21
 800ce94:	f023 0303 	bic.w	r3, r3, #3
 800ce98:	3304      	adds	r3, #4
 800ce9a:	3715      	adds	r7, #21
 800ce9c:	42bd      	cmp	r5, r7
 800ce9e:	bf38      	it	cc
 800cea0:	2304      	movcc	r3, #4
 800cea2:	9301      	str	r3, [sp, #4]
 800cea4:	9b02      	ldr	r3, [sp, #8]
 800cea6:	9103      	str	r1, [sp, #12]
 800cea8:	428b      	cmp	r3, r1
 800ceaa:	d80c      	bhi.n	800cec6 <__multiply+0x9a>
 800ceac:	2e00      	cmp	r6, #0
 800ceae:	dd03      	ble.n	800ceb8 <__multiply+0x8c>
 800ceb0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d055      	beq.n	800cf64 <__multiply+0x138>
 800ceb8:	6106      	str	r6, [r0, #16]
 800ceba:	b005      	add	sp, #20
 800cebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cec0:	f843 2b04 	str.w	r2, [r3], #4
 800cec4:	e7d9      	b.n	800ce7a <__multiply+0x4e>
 800cec6:	f8b1 a000 	ldrh.w	sl, [r1]
 800ceca:	f1ba 0f00 	cmp.w	sl, #0
 800cece:	d01f      	beq.n	800cf10 <__multiply+0xe4>
 800ced0:	46c4      	mov	ip, r8
 800ced2:	46a1      	mov	r9, r4
 800ced4:	2700      	movs	r7, #0
 800ced6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ceda:	f8d9 3000 	ldr.w	r3, [r9]
 800cede:	fa1f fb82 	uxth.w	fp, r2
 800cee2:	b29b      	uxth	r3, r3
 800cee4:	fb0a 330b 	mla	r3, sl, fp, r3
 800cee8:	443b      	add	r3, r7
 800ceea:	f8d9 7000 	ldr.w	r7, [r9]
 800ceee:	0c12      	lsrs	r2, r2, #16
 800cef0:	0c3f      	lsrs	r7, r7, #16
 800cef2:	fb0a 7202 	mla	r2, sl, r2, r7
 800cef6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf00:	4565      	cmp	r5, ip
 800cf02:	f849 3b04 	str.w	r3, [r9], #4
 800cf06:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cf0a:	d8e4      	bhi.n	800ced6 <__multiply+0xaa>
 800cf0c:	9b01      	ldr	r3, [sp, #4]
 800cf0e:	50e7      	str	r7, [r4, r3]
 800cf10:	9b03      	ldr	r3, [sp, #12]
 800cf12:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cf16:	3104      	adds	r1, #4
 800cf18:	f1b9 0f00 	cmp.w	r9, #0
 800cf1c:	d020      	beq.n	800cf60 <__multiply+0x134>
 800cf1e:	6823      	ldr	r3, [r4, #0]
 800cf20:	4647      	mov	r7, r8
 800cf22:	46a4      	mov	ip, r4
 800cf24:	f04f 0a00 	mov.w	sl, #0
 800cf28:	f8b7 b000 	ldrh.w	fp, [r7]
 800cf2c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cf30:	fb09 220b 	mla	r2, r9, fp, r2
 800cf34:	4452      	add	r2, sl
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf3c:	f84c 3b04 	str.w	r3, [ip], #4
 800cf40:	f857 3b04 	ldr.w	r3, [r7], #4
 800cf44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf48:	f8bc 3000 	ldrh.w	r3, [ip]
 800cf4c:	fb09 330a 	mla	r3, r9, sl, r3
 800cf50:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cf54:	42bd      	cmp	r5, r7
 800cf56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf5a:	d8e5      	bhi.n	800cf28 <__multiply+0xfc>
 800cf5c:	9a01      	ldr	r2, [sp, #4]
 800cf5e:	50a3      	str	r3, [r4, r2]
 800cf60:	3404      	adds	r4, #4
 800cf62:	e79f      	b.n	800cea4 <__multiply+0x78>
 800cf64:	3e01      	subs	r6, #1
 800cf66:	e7a1      	b.n	800ceac <__multiply+0x80>
 800cf68:	080268bc 	.word	0x080268bc
 800cf6c:	080268cd 	.word	0x080268cd

0800cf70 <__pow5mult>:
 800cf70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf74:	4615      	mov	r5, r2
 800cf76:	f012 0203 	ands.w	r2, r2, #3
 800cf7a:	4607      	mov	r7, r0
 800cf7c:	460e      	mov	r6, r1
 800cf7e:	d007      	beq.n	800cf90 <__pow5mult+0x20>
 800cf80:	4c25      	ldr	r4, [pc, #148]	@ (800d018 <__pow5mult+0xa8>)
 800cf82:	3a01      	subs	r2, #1
 800cf84:	2300      	movs	r3, #0
 800cf86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf8a:	f7ff fea7 	bl	800ccdc <__multadd>
 800cf8e:	4606      	mov	r6, r0
 800cf90:	10ad      	asrs	r5, r5, #2
 800cf92:	d03d      	beq.n	800d010 <__pow5mult+0xa0>
 800cf94:	69fc      	ldr	r4, [r7, #28]
 800cf96:	b97c      	cbnz	r4, 800cfb8 <__pow5mult+0x48>
 800cf98:	2010      	movs	r0, #16
 800cf9a:	f7ff fd87 	bl	800caac <malloc>
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	61f8      	str	r0, [r7, #28]
 800cfa2:	b928      	cbnz	r0, 800cfb0 <__pow5mult+0x40>
 800cfa4:	4b1d      	ldr	r3, [pc, #116]	@ (800d01c <__pow5mult+0xac>)
 800cfa6:	481e      	ldr	r0, [pc, #120]	@ (800d020 <__pow5mult+0xb0>)
 800cfa8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cfac:	f000 fbea 	bl	800d784 <__assert_func>
 800cfb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cfb4:	6004      	str	r4, [r0, #0]
 800cfb6:	60c4      	str	r4, [r0, #12]
 800cfb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cfbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cfc0:	b94c      	cbnz	r4, 800cfd6 <__pow5mult+0x66>
 800cfc2:	f240 2171 	movw	r1, #625	@ 0x271
 800cfc6:	4638      	mov	r0, r7
 800cfc8:	f7ff ff1a 	bl	800ce00 <__i2b>
 800cfcc:	2300      	movs	r3, #0
 800cfce:	f8c8 0008 	str.w	r0, [r8, #8]
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	6003      	str	r3, [r0, #0]
 800cfd6:	f04f 0900 	mov.w	r9, #0
 800cfda:	07eb      	lsls	r3, r5, #31
 800cfdc:	d50a      	bpl.n	800cff4 <__pow5mult+0x84>
 800cfde:	4631      	mov	r1, r6
 800cfe0:	4622      	mov	r2, r4
 800cfe2:	4638      	mov	r0, r7
 800cfe4:	f7ff ff22 	bl	800ce2c <__multiply>
 800cfe8:	4631      	mov	r1, r6
 800cfea:	4680      	mov	r8, r0
 800cfec:	4638      	mov	r0, r7
 800cfee:	f7ff fe53 	bl	800cc98 <_Bfree>
 800cff2:	4646      	mov	r6, r8
 800cff4:	106d      	asrs	r5, r5, #1
 800cff6:	d00b      	beq.n	800d010 <__pow5mult+0xa0>
 800cff8:	6820      	ldr	r0, [r4, #0]
 800cffa:	b938      	cbnz	r0, 800d00c <__pow5mult+0x9c>
 800cffc:	4622      	mov	r2, r4
 800cffe:	4621      	mov	r1, r4
 800d000:	4638      	mov	r0, r7
 800d002:	f7ff ff13 	bl	800ce2c <__multiply>
 800d006:	6020      	str	r0, [r4, #0]
 800d008:	f8c0 9000 	str.w	r9, [r0]
 800d00c:	4604      	mov	r4, r0
 800d00e:	e7e4      	b.n	800cfda <__pow5mult+0x6a>
 800d010:	4630      	mov	r0, r6
 800d012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d016:	bf00      	nop
 800d018:	08026980 	.word	0x08026980
 800d01c:	0802684d 	.word	0x0802684d
 800d020:	080268cd 	.word	0x080268cd

0800d024 <__lshift>:
 800d024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d028:	460c      	mov	r4, r1
 800d02a:	6849      	ldr	r1, [r1, #4]
 800d02c:	6923      	ldr	r3, [r4, #16]
 800d02e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d032:	68a3      	ldr	r3, [r4, #8]
 800d034:	4607      	mov	r7, r0
 800d036:	4691      	mov	r9, r2
 800d038:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d03c:	f108 0601 	add.w	r6, r8, #1
 800d040:	42b3      	cmp	r3, r6
 800d042:	db0b      	blt.n	800d05c <__lshift+0x38>
 800d044:	4638      	mov	r0, r7
 800d046:	f7ff fde7 	bl	800cc18 <_Balloc>
 800d04a:	4605      	mov	r5, r0
 800d04c:	b948      	cbnz	r0, 800d062 <__lshift+0x3e>
 800d04e:	4602      	mov	r2, r0
 800d050:	4b28      	ldr	r3, [pc, #160]	@ (800d0f4 <__lshift+0xd0>)
 800d052:	4829      	ldr	r0, [pc, #164]	@ (800d0f8 <__lshift+0xd4>)
 800d054:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d058:	f000 fb94 	bl	800d784 <__assert_func>
 800d05c:	3101      	adds	r1, #1
 800d05e:	005b      	lsls	r3, r3, #1
 800d060:	e7ee      	b.n	800d040 <__lshift+0x1c>
 800d062:	2300      	movs	r3, #0
 800d064:	f100 0114 	add.w	r1, r0, #20
 800d068:	f100 0210 	add.w	r2, r0, #16
 800d06c:	4618      	mov	r0, r3
 800d06e:	4553      	cmp	r3, sl
 800d070:	db33      	blt.n	800d0da <__lshift+0xb6>
 800d072:	6920      	ldr	r0, [r4, #16]
 800d074:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d078:	f104 0314 	add.w	r3, r4, #20
 800d07c:	f019 091f 	ands.w	r9, r9, #31
 800d080:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d084:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d088:	d02b      	beq.n	800d0e2 <__lshift+0xbe>
 800d08a:	f1c9 0e20 	rsb	lr, r9, #32
 800d08e:	468a      	mov	sl, r1
 800d090:	2200      	movs	r2, #0
 800d092:	6818      	ldr	r0, [r3, #0]
 800d094:	fa00 f009 	lsl.w	r0, r0, r9
 800d098:	4310      	orrs	r0, r2
 800d09a:	f84a 0b04 	str.w	r0, [sl], #4
 800d09e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0a2:	459c      	cmp	ip, r3
 800d0a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d0a8:	d8f3      	bhi.n	800d092 <__lshift+0x6e>
 800d0aa:	ebac 0304 	sub.w	r3, ip, r4
 800d0ae:	3b15      	subs	r3, #21
 800d0b0:	f023 0303 	bic.w	r3, r3, #3
 800d0b4:	3304      	adds	r3, #4
 800d0b6:	f104 0015 	add.w	r0, r4, #21
 800d0ba:	4560      	cmp	r0, ip
 800d0bc:	bf88      	it	hi
 800d0be:	2304      	movhi	r3, #4
 800d0c0:	50ca      	str	r2, [r1, r3]
 800d0c2:	b10a      	cbz	r2, 800d0c8 <__lshift+0xa4>
 800d0c4:	f108 0602 	add.w	r6, r8, #2
 800d0c8:	3e01      	subs	r6, #1
 800d0ca:	4638      	mov	r0, r7
 800d0cc:	612e      	str	r6, [r5, #16]
 800d0ce:	4621      	mov	r1, r4
 800d0d0:	f7ff fde2 	bl	800cc98 <_Bfree>
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0da:	f842 0f04 	str.w	r0, [r2, #4]!
 800d0de:	3301      	adds	r3, #1
 800d0e0:	e7c5      	b.n	800d06e <__lshift+0x4a>
 800d0e2:	3904      	subs	r1, #4
 800d0e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d0ec:	459c      	cmp	ip, r3
 800d0ee:	d8f9      	bhi.n	800d0e4 <__lshift+0xc0>
 800d0f0:	e7ea      	b.n	800d0c8 <__lshift+0xa4>
 800d0f2:	bf00      	nop
 800d0f4:	080268bc 	.word	0x080268bc
 800d0f8:	080268cd 	.word	0x080268cd

0800d0fc <__mcmp>:
 800d0fc:	690a      	ldr	r2, [r1, #16]
 800d0fe:	4603      	mov	r3, r0
 800d100:	6900      	ldr	r0, [r0, #16]
 800d102:	1a80      	subs	r0, r0, r2
 800d104:	b530      	push	{r4, r5, lr}
 800d106:	d10e      	bne.n	800d126 <__mcmp+0x2a>
 800d108:	3314      	adds	r3, #20
 800d10a:	3114      	adds	r1, #20
 800d10c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d110:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d114:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d118:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d11c:	4295      	cmp	r5, r2
 800d11e:	d003      	beq.n	800d128 <__mcmp+0x2c>
 800d120:	d205      	bcs.n	800d12e <__mcmp+0x32>
 800d122:	f04f 30ff 	mov.w	r0, #4294967295
 800d126:	bd30      	pop	{r4, r5, pc}
 800d128:	42a3      	cmp	r3, r4
 800d12a:	d3f3      	bcc.n	800d114 <__mcmp+0x18>
 800d12c:	e7fb      	b.n	800d126 <__mcmp+0x2a>
 800d12e:	2001      	movs	r0, #1
 800d130:	e7f9      	b.n	800d126 <__mcmp+0x2a>
	...

0800d134 <__mdiff>:
 800d134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d138:	4689      	mov	r9, r1
 800d13a:	4606      	mov	r6, r0
 800d13c:	4611      	mov	r1, r2
 800d13e:	4648      	mov	r0, r9
 800d140:	4614      	mov	r4, r2
 800d142:	f7ff ffdb 	bl	800d0fc <__mcmp>
 800d146:	1e05      	subs	r5, r0, #0
 800d148:	d112      	bne.n	800d170 <__mdiff+0x3c>
 800d14a:	4629      	mov	r1, r5
 800d14c:	4630      	mov	r0, r6
 800d14e:	f7ff fd63 	bl	800cc18 <_Balloc>
 800d152:	4602      	mov	r2, r0
 800d154:	b928      	cbnz	r0, 800d162 <__mdiff+0x2e>
 800d156:	4b3f      	ldr	r3, [pc, #252]	@ (800d254 <__mdiff+0x120>)
 800d158:	f240 2137 	movw	r1, #567	@ 0x237
 800d15c:	483e      	ldr	r0, [pc, #248]	@ (800d258 <__mdiff+0x124>)
 800d15e:	f000 fb11 	bl	800d784 <__assert_func>
 800d162:	2301      	movs	r3, #1
 800d164:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d168:	4610      	mov	r0, r2
 800d16a:	b003      	add	sp, #12
 800d16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d170:	bfbc      	itt	lt
 800d172:	464b      	movlt	r3, r9
 800d174:	46a1      	movlt	r9, r4
 800d176:	4630      	mov	r0, r6
 800d178:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d17c:	bfba      	itte	lt
 800d17e:	461c      	movlt	r4, r3
 800d180:	2501      	movlt	r5, #1
 800d182:	2500      	movge	r5, #0
 800d184:	f7ff fd48 	bl	800cc18 <_Balloc>
 800d188:	4602      	mov	r2, r0
 800d18a:	b918      	cbnz	r0, 800d194 <__mdiff+0x60>
 800d18c:	4b31      	ldr	r3, [pc, #196]	@ (800d254 <__mdiff+0x120>)
 800d18e:	f240 2145 	movw	r1, #581	@ 0x245
 800d192:	e7e3      	b.n	800d15c <__mdiff+0x28>
 800d194:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d198:	6926      	ldr	r6, [r4, #16]
 800d19a:	60c5      	str	r5, [r0, #12]
 800d19c:	f109 0310 	add.w	r3, r9, #16
 800d1a0:	f109 0514 	add.w	r5, r9, #20
 800d1a4:	f104 0e14 	add.w	lr, r4, #20
 800d1a8:	f100 0b14 	add.w	fp, r0, #20
 800d1ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d1b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d1b4:	9301      	str	r3, [sp, #4]
 800d1b6:	46d9      	mov	r9, fp
 800d1b8:	f04f 0c00 	mov.w	ip, #0
 800d1bc:	9b01      	ldr	r3, [sp, #4]
 800d1be:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d1c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d1c6:	9301      	str	r3, [sp, #4]
 800d1c8:	fa1f f38a 	uxth.w	r3, sl
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	b283      	uxth	r3, r0
 800d1d0:	1acb      	subs	r3, r1, r3
 800d1d2:	0c00      	lsrs	r0, r0, #16
 800d1d4:	4463      	add	r3, ip
 800d1d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d1da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d1e4:	4576      	cmp	r6, lr
 800d1e6:	f849 3b04 	str.w	r3, [r9], #4
 800d1ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1ee:	d8e5      	bhi.n	800d1bc <__mdiff+0x88>
 800d1f0:	1b33      	subs	r3, r6, r4
 800d1f2:	3b15      	subs	r3, #21
 800d1f4:	f023 0303 	bic.w	r3, r3, #3
 800d1f8:	3415      	adds	r4, #21
 800d1fa:	3304      	adds	r3, #4
 800d1fc:	42a6      	cmp	r6, r4
 800d1fe:	bf38      	it	cc
 800d200:	2304      	movcc	r3, #4
 800d202:	441d      	add	r5, r3
 800d204:	445b      	add	r3, fp
 800d206:	461e      	mov	r6, r3
 800d208:	462c      	mov	r4, r5
 800d20a:	4544      	cmp	r4, r8
 800d20c:	d30e      	bcc.n	800d22c <__mdiff+0xf8>
 800d20e:	f108 0103 	add.w	r1, r8, #3
 800d212:	1b49      	subs	r1, r1, r5
 800d214:	f021 0103 	bic.w	r1, r1, #3
 800d218:	3d03      	subs	r5, #3
 800d21a:	45a8      	cmp	r8, r5
 800d21c:	bf38      	it	cc
 800d21e:	2100      	movcc	r1, #0
 800d220:	440b      	add	r3, r1
 800d222:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d226:	b191      	cbz	r1, 800d24e <__mdiff+0x11a>
 800d228:	6117      	str	r7, [r2, #16]
 800d22a:	e79d      	b.n	800d168 <__mdiff+0x34>
 800d22c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d230:	46e6      	mov	lr, ip
 800d232:	0c08      	lsrs	r0, r1, #16
 800d234:	fa1c fc81 	uxtah	ip, ip, r1
 800d238:	4471      	add	r1, lr
 800d23a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d23e:	b289      	uxth	r1, r1
 800d240:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d244:	f846 1b04 	str.w	r1, [r6], #4
 800d248:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d24c:	e7dd      	b.n	800d20a <__mdiff+0xd6>
 800d24e:	3f01      	subs	r7, #1
 800d250:	e7e7      	b.n	800d222 <__mdiff+0xee>
 800d252:	bf00      	nop
 800d254:	080268bc 	.word	0x080268bc
 800d258:	080268cd 	.word	0x080268cd

0800d25c <__d2b>:
 800d25c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d260:	460f      	mov	r7, r1
 800d262:	2101      	movs	r1, #1
 800d264:	ec59 8b10 	vmov	r8, r9, d0
 800d268:	4616      	mov	r6, r2
 800d26a:	f7ff fcd5 	bl	800cc18 <_Balloc>
 800d26e:	4604      	mov	r4, r0
 800d270:	b930      	cbnz	r0, 800d280 <__d2b+0x24>
 800d272:	4602      	mov	r2, r0
 800d274:	4b23      	ldr	r3, [pc, #140]	@ (800d304 <__d2b+0xa8>)
 800d276:	4824      	ldr	r0, [pc, #144]	@ (800d308 <__d2b+0xac>)
 800d278:	f240 310f 	movw	r1, #783	@ 0x30f
 800d27c:	f000 fa82 	bl	800d784 <__assert_func>
 800d280:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d284:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d288:	b10d      	cbz	r5, 800d28e <__d2b+0x32>
 800d28a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d28e:	9301      	str	r3, [sp, #4]
 800d290:	f1b8 0300 	subs.w	r3, r8, #0
 800d294:	d023      	beq.n	800d2de <__d2b+0x82>
 800d296:	4668      	mov	r0, sp
 800d298:	9300      	str	r3, [sp, #0]
 800d29a:	f7ff fd84 	bl	800cda6 <__lo0bits>
 800d29e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d2a2:	b1d0      	cbz	r0, 800d2da <__d2b+0x7e>
 800d2a4:	f1c0 0320 	rsb	r3, r0, #32
 800d2a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ac:	430b      	orrs	r3, r1
 800d2ae:	40c2      	lsrs	r2, r0
 800d2b0:	6163      	str	r3, [r4, #20]
 800d2b2:	9201      	str	r2, [sp, #4]
 800d2b4:	9b01      	ldr	r3, [sp, #4]
 800d2b6:	61a3      	str	r3, [r4, #24]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	bf0c      	ite	eq
 800d2bc:	2201      	moveq	r2, #1
 800d2be:	2202      	movne	r2, #2
 800d2c0:	6122      	str	r2, [r4, #16]
 800d2c2:	b1a5      	cbz	r5, 800d2ee <__d2b+0x92>
 800d2c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d2c8:	4405      	add	r5, r0
 800d2ca:	603d      	str	r5, [r7, #0]
 800d2cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d2d0:	6030      	str	r0, [r6, #0]
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	b003      	add	sp, #12
 800d2d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2da:	6161      	str	r1, [r4, #20]
 800d2dc:	e7ea      	b.n	800d2b4 <__d2b+0x58>
 800d2de:	a801      	add	r0, sp, #4
 800d2e0:	f7ff fd61 	bl	800cda6 <__lo0bits>
 800d2e4:	9b01      	ldr	r3, [sp, #4]
 800d2e6:	6163      	str	r3, [r4, #20]
 800d2e8:	3020      	adds	r0, #32
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	e7e8      	b.n	800d2c0 <__d2b+0x64>
 800d2ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d2f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d2f6:	6038      	str	r0, [r7, #0]
 800d2f8:	6918      	ldr	r0, [r3, #16]
 800d2fa:	f7ff fd35 	bl	800cd68 <__hi0bits>
 800d2fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d302:	e7e5      	b.n	800d2d0 <__d2b+0x74>
 800d304:	080268bc 	.word	0x080268bc
 800d308:	080268cd 	.word	0x080268cd

0800d30c <__ssputs_r>:
 800d30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d310:	688e      	ldr	r6, [r1, #8]
 800d312:	461f      	mov	r7, r3
 800d314:	42be      	cmp	r6, r7
 800d316:	680b      	ldr	r3, [r1, #0]
 800d318:	4682      	mov	sl, r0
 800d31a:	460c      	mov	r4, r1
 800d31c:	4690      	mov	r8, r2
 800d31e:	d82d      	bhi.n	800d37c <__ssputs_r+0x70>
 800d320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d324:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d328:	d026      	beq.n	800d378 <__ssputs_r+0x6c>
 800d32a:	6965      	ldr	r5, [r4, #20]
 800d32c:	6909      	ldr	r1, [r1, #16]
 800d32e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d332:	eba3 0901 	sub.w	r9, r3, r1
 800d336:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d33a:	1c7b      	adds	r3, r7, #1
 800d33c:	444b      	add	r3, r9
 800d33e:	106d      	asrs	r5, r5, #1
 800d340:	429d      	cmp	r5, r3
 800d342:	bf38      	it	cc
 800d344:	461d      	movcc	r5, r3
 800d346:	0553      	lsls	r3, r2, #21
 800d348:	d527      	bpl.n	800d39a <__ssputs_r+0x8e>
 800d34a:	4629      	mov	r1, r5
 800d34c:	f7ff fbd8 	bl	800cb00 <_malloc_r>
 800d350:	4606      	mov	r6, r0
 800d352:	b360      	cbz	r0, 800d3ae <__ssputs_r+0xa2>
 800d354:	6921      	ldr	r1, [r4, #16]
 800d356:	464a      	mov	r2, r9
 800d358:	f000 fa06 	bl	800d768 <memcpy>
 800d35c:	89a3      	ldrh	r3, [r4, #12]
 800d35e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d366:	81a3      	strh	r3, [r4, #12]
 800d368:	6126      	str	r6, [r4, #16]
 800d36a:	6165      	str	r5, [r4, #20]
 800d36c:	444e      	add	r6, r9
 800d36e:	eba5 0509 	sub.w	r5, r5, r9
 800d372:	6026      	str	r6, [r4, #0]
 800d374:	60a5      	str	r5, [r4, #8]
 800d376:	463e      	mov	r6, r7
 800d378:	42be      	cmp	r6, r7
 800d37a:	d900      	bls.n	800d37e <__ssputs_r+0x72>
 800d37c:	463e      	mov	r6, r7
 800d37e:	6820      	ldr	r0, [r4, #0]
 800d380:	4632      	mov	r2, r6
 800d382:	4641      	mov	r1, r8
 800d384:	f000 f9c6 	bl	800d714 <memmove>
 800d388:	68a3      	ldr	r3, [r4, #8]
 800d38a:	1b9b      	subs	r3, r3, r6
 800d38c:	60a3      	str	r3, [r4, #8]
 800d38e:	6823      	ldr	r3, [r4, #0]
 800d390:	4433      	add	r3, r6
 800d392:	6023      	str	r3, [r4, #0]
 800d394:	2000      	movs	r0, #0
 800d396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d39a:	462a      	mov	r2, r5
 800d39c:	f000 fa36 	bl	800d80c <_realloc_r>
 800d3a0:	4606      	mov	r6, r0
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	d1e0      	bne.n	800d368 <__ssputs_r+0x5c>
 800d3a6:	6921      	ldr	r1, [r4, #16]
 800d3a8:	4650      	mov	r0, sl
 800d3aa:	f7ff fb35 	bl	800ca18 <_free_r>
 800d3ae:	230c      	movs	r3, #12
 800d3b0:	f8ca 3000 	str.w	r3, [sl]
 800d3b4:	89a3      	ldrh	r3, [r4, #12]
 800d3b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3ba:	81a3      	strh	r3, [r4, #12]
 800d3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c0:	e7e9      	b.n	800d396 <__ssputs_r+0x8a>
	...

0800d3c4 <_svfiprintf_r>:
 800d3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c8:	4698      	mov	r8, r3
 800d3ca:	898b      	ldrh	r3, [r1, #12]
 800d3cc:	061b      	lsls	r3, r3, #24
 800d3ce:	b09d      	sub	sp, #116	@ 0x74
 800d3d0:	4607      	mov	r7, r0
 800d3d2:	460d      	mov	r5, r1
 800d3d4:	4614      	mov	r4, r2
 800d3d6:	d510      	bpl.n	800d3fa <_svfiprintf_r+0x36>
 800d3d8:	690b      	ldr	r3, [r1, #16]
 800d3da:	b973      	cbnz	r3, 800d3fa <_svfiprintf_r+0x36>
 800d3dc:	2140      	movs	r1, #64	@ 0x40
 800d3de:	f7ff fb8f 	bl	800cb00 <_malloc_r>
 800d3e2:	6028      	str	r0, [r5, #0]
 800d3e4:	6128      	str	r0, [r5, #16]
 800d3e6:	b930      	cbnz	r0, 800d3f6 <_svfiprintf_r+0x32>
 800d3e8:	230c      	movs	r3, #12
 800d3ea:	603b      	str	r3, [r7, #0]
 800d3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f0:	b01d      	add	sp, #116	@ 0x74
 800d3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3f6:	2340      	movs	r3, #64	@ 0x40
 800d3f8:	616b      	str	r3, [r5, #20]
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3fe:	2320      	movs	r3, #32
 800d400:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d404:	f8cd 800c 	str.w	r8, [sp, #12]
 800d408:	2330      	movs	r3, #48	@ 0x30
 800d40a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d5a8 <_svfiprintf_r+0x1e4>
 800d40e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d412:	f04f 0901 	mov.w	r9, #1
 800d416:	4623      	mov	r3, r4
 800d418:	469a      	mov	sl, r3
 800d41a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d41e:	b10a      	cbz	r2, 800d424 <_svfiprintf_r+0x60>
 800d420:	2a25      	cmp	r2, #37	@ 0x25
 800d422:	d1f9      	bne.n	800d418 <_svfiprintf_r+0x54>
 800d424:	ebba 0b04 	subs.w	fp, sl, r4
 800d428:	d00b      	beq.n	800d442 <_svfiprintf_r+0x7e>
 800d42a:	465b      	mov	r3, fp
 800d42c:	4622      	mov	r2, r4
 800d42e:	4629      	mov	r1, r5
 800d430:	4638      	mov	r0, r7
 800d432:	f7ff ff6b 	bl	800d30c <__ssputs_r>
 800d436:	3001      	adds	r0, #1
 800d438:	f000 80a7 	beq.w	800d58a <_svfiprintf_r+0x1c6>
 800d43c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d43e:	445a      	add	r2, fp
 800d440:	9209      	str	r2, [sp, #36]	@ 0x24
 800d442:	f89a 3000 	ldrb.w	r3, [sl]
 800d446:	2b00      	cmp	r3, #0
 800d448:	f000 809f 	beq.w	800d58a <_svfiprintf_r+0x1c6>
 800d44c:	2300      	movs	r3, #0
 800d44e:	f04f 32ff 	mov.w	r2, #4294967295
 800d452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d456:	f10a 0a01 	add.w	sl, sl, #1
 800d45a:	9304      	str	r3, [sp, #16]
 800d45c:	9307      	str	r3, [sp, #28]
 800d45e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d462:	931a      	str	r3, [sp, #104]	@ 0x68
 800d464:	4654      	mov	r4, sl
 800d466:	2205      	movs	r2, #5
 800d468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d46c:	484e      	ldr	r0, [pc, #312]	@ (800d5a8 <_svfiprintf_r+0x1e4>)
 800d46e:	f7f2 ff1f 	bl	80002b0 <memchr>
 800d472:	9a04      	ldr	r2, [sp, #16]
 800d474:	b9d8      	cbnz	r0, 800d4ae <_svfiprintf_r+0xea>
 800d476:	06d0      	lsls	r0, r2, #27
 800d478:	bf44      	itt	mi
 800d47a:	2320      	movmi	r3, #32
 800d47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d480:	0711      	lsls	r1, r2, #28
 800d482:	bf44      	itt	mi
 800d484:	232b      	movmi	r3, #43	@ 0x2b
 800d486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d48a:	f89a 3000 	ldrb.w	r3, [sl]
 800d48e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d490:	d015      	beq.n	800d4be <_svfiprintf_r+0xfa>
 800d492:	9a07      	ldr	r2, [sp, #28]
 800d494:	4654      	mov	r4, sl
 800d496:	2000      	movs	r0, #0
 800d498:	f04f 0c0a 	mov.w	ip, #10
 800d49c:	4621      	mov	r1, r4
 800d49e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4a2:	3b30      	subs	r3, #48	@ 0x30
 800d4a4:	2b09      	cmp	r3, #9
 800d4a6:	d94b      	bls.n	800d540 <_svfiprintf_r+0x17c>
 800d4a8:	b1b0      	cbz	r0, 800d4d8 <_svfiprintf_r+0x114>
 800d4aa:	9207      	str	r2, [sp, #28]
 800d4ac:	e014      	b.n	800d4d8 <_svfiprintf_r+0x114>
 800d4ae:	eba0 0308 	sub.w	r3, r0, r8
 800d4b2:	fa09 f303 	lsl.w	r3, r9, r3
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	9304      	str	r3, [sp, #16]
 800d4ba:	46a2      	mov	sl, r4
 800d4bc:	e7d2      	b.n	800d464 <_svfiprintf_r+0xa0>
 800d4be:	9b03      	ldr	r3, [sp, #12]
 800d4c0:	1d19      	adds	r1, r3, #4
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	9103      	str	r1, [sp, #12]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	bfbb      	ittet	lt
 800d4ca:	425b      	neglt	r3, r3
 800d4cc:	f042 0202 	orrlt.w	r2, r2, #2
 800d4d0:	9307      	strge	r3, [sp, #28]
 800d4d2:	9307      	strlt	r3, [sp, #28]
 800d4d4:	bfb8      	it	lt
 800d4d6:	9204      	strlt	r2, [sp, #16]
 800d4d8:	7823      	ldrb	r3, [r4, #0]
 800d4da:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4dc:	d10a      	bne.n	800d4f4 <_svfiprintf_r+0x130>
 800d4de:	7863      	ldrb	r3, [r4, #1]
 800d4e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4e2:	d132      	bne.n	800d54a <_svfiprintf_r+0x186>
 800d4e4:	9b03      	ldr	r3, [sp, #12]
 800d4e6:	1d1a      	adds	r2, r3, #4
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	9203      	str	r2, [sp, #12]
 800d4ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4f0:	3402      	adds	r4, #2
 800d4f2:	9305      	str	r3, [sp, #20]
 800d4f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d5b8 <_svfiprintf_r+0x1f4>
 800d4f8:	7821      	ldrb	r1, [r4, #0]
 800d4fa:	2203      	movs	r2, #3
 800d4fc:	4650      	mov	r0, sl
 800d4fe:	f7f2 fed7 	bl	80002b0 <memchr>
 800d502:	b138      	cbz	r0, 800d514 <_svfiprintf_r+0x150>
 800d504:	9b04      	ldr	r3, [sp, #16]
 800d506:	eba0 000a 	sub.w	r0, r0, sl
 800d50a:	2240      	movs	r2, #64	@ 0x40
 800d50c:	4082      	lsls	r2, r0
 800d50e:	4313      	orrs	r3, r2
 800d510:	3401      	adds	r4, #1
 800d512:	9304      	str	r3, [sp, #16]
 800d514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d518:	4824      	ldr	r0, [pc, #144]	@ (800d5ac <_svfiprintf_r+0x1e8>)
 800d51a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d51e:	2206      	movs	r2, #6
 800d520:	f7f2 fec6 	bl	80002b0 <memchr>
 800d524:	2800      	cmp	r0, #0
 800d526:	d036      	beq.n	800d596 <_svfiprintf_r+0x1d2>
 800d528:	4b21      	ldr	r3, [pc, #132]	@ (800d5b0 <_svfiprintf_r+0x1ec>)
 800d52a:	bb1b      	cbnz	r3, 800d574 <_svfiprintf_r+0x1b0>
 800d52c:	9b03      	ldr	r3, [sp, #12]
 800d52e:	3307      	adds	r3, #7
 800d530:	f023 0307 	bic.w	r3, r3, #7
 800d534:	3308      	adds	r3, #8
 800d536:	9303      	str	r3, [sp, #12]
 800d538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d53a:	4433      	add	r3, r6
 800d53c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d53e:	e76a      	b.n	800d416 <_svfiprintf_r+0x52>
 800d540:	fb0c 3202 	mla	r2, ip, r2, r3
 800d544:	460c      	mov	r4, r1
 800d546:	2001      	movs	r0, #1
 800d548:	e7a8      	b.n	800d49c <_svfiprintf_r+0xd8>
 800d54a:	2300      	movs	r3, #0
 800d54c:	3401      	adds	r4, #1
 800d54e:	9305      	str	r3, [sp, #20]
 800d550:	4619      	mov	r1, r3
 800d552:	f04f 0c0a 	mov.w	ip, #10
 800d556:	4620      	mov	r0, r4
 800d558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d55c:	3a30      	subs	r2, #48	@ 0x30
 800d55e:	2a09      	cmp	r2, #9
 800d560:	d903      	bls.n	800d56a <_svfiprintf_r+0x1a6>
 800d562:	2b00      	cmp	r3, #0
 800d564:	d0c6      	beq.n	800d4f4 <_svfiprintf_r+0x130>
 800d566:	9105      	str	r1, [sp, #20]
 800d568:	e7c4      	b.n	800d4f4 <_svfiprintf_r+0x130>
 800d56a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d56e:	4604      	mov	r4, r0
 800d570:	2301      	movs	r3, #1
 800d572:	e7f0      	b.n	800d556 <_svfiprintf_r+0x192>
 800d574:	ab03      	add	r3, sp, #12
 800d576:	9300      	str	r3, [sp, #0]
 800d578:	462a      	mov	r2, r5
 800d57a:	4b0e      	ldr	r3, [pc, #56]	@ (800d5b4 <_svfiprintf_r+0x1f0>)
 800d57c:	a904      	add	r1, sp, #16
 800d57e:	4638      	mov	r0, r7
 800d580:	f7fd fe64 	bl	800b24c <_printf_float>
 800d584:	1c42      	adds	r2, r0, #1
 800d586:	4606      	mov	r6, r0
 800d588:	d1d6      	bne.n	800d538 <_svfiprintf_r+0x174>
 800d58a:	89ab      	ldrh	r3, [r5, #12]
 800d58c:	065b      	lsls	r3, r3, #25
 800d58e:	f53f af2d 	bmi.w	800d3ec <_svfiprintf_r+0x28>
 800d592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d594:	e72c      	b.n	800d3f0 <_svfiprintf_r+0x2c>
 800d596:	ab03      	add	r3, sp, #12
 800d598:	9300      	str	r3, [sp, #0]
 800d59a:	462a      	mov	r2, r5
 800d59c:	4b05      	ldr	r3, [pc, #20]	@ (800d5b4 <_svfiprintf_r+0x1f0>)
 800d59e:	a904      	add	r1, sp, #16
 800d5a0:	4638      	mov	r0, r7
 800d5a2:	f7fe f8eb 	bl	800b77c <_printf_i>
 800d5a6:	e7ed      	b.n	800d584 <_svfiprintf_r+0x1c0>
 800d5a8:	08026926 	.word	0x08026926
 800d5ac:	08026930 	.word	0x08026930
 800d5b0:	0800b24d 	.word	0x0800b24d
 800d5b4:	0800d30d 	.word	0x0800d30d
 800d5b8:	0802692c 	.word	0x0802692c

0800d5bc <__sflush_r>:
 800d5bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c4:	0716      	lsls	r6, r2, #28
 800d5c6:	4605      	mov	r5, r0
 800d5c8:	460c      	mov	r4, r1
 800d5ca:	d454      	bmi.n	800d676 <__sflush_r+0xba>
 800d5cc:	684b      	ldr	r3, [r1, #4]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	dc02      	bgt.n	800d5d8 <__sflush_r+0x1c>
 800d5d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	dd48      	ble.n	800d66a <__sflush_r+0xae>
 800d5d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5da:	2e00      	cmp	r6, #0
 800d5dc:	d045      	beq.n	800d66a <__sflush_r+0xae>
 800d5de:	2300      	movs	r3, #0
 800d5e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d5e4:	682f      	ldr	r7, [r5, #0]
 800d5e6:	6a21      	ldr	r1, [r4, #32]
 800d5e8:	602b      	str	r3, [r5, #0]
 800d5ea:	d030      	beq.n	800d64e <__sflush_r+0x92>
 800d5ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d5ee:	89a3      	ldrh	r3, [r4, #12]
 800d5f0:	0759      	lsls	r1, r3, #29
 800d5f2:	d505      	bpl.n	800d600 <__sflush_r+0x44>
 800d5f4:	6863      	ldr	r3, [r4, #4]
 800d5f6:	1ad2      	subs	r2, r2, r3
 800d5f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d5fa:	b10b      	cbz	r3, 800d600 <__sflush_r+0x44>
 800d5fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d5fe:	1ad2      	subs	r2, r2, r3
 800d600:	2300      	movs	r3, #0
 800d602:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d604:	6a21      	ldr	r1, [r4, #32]
 800d606:	4628      	mov	r0, r5
 800d608:	47b0      	blx	r6
 800d60a:	1c43      	adds	r3, r0, #1
 800d60c:	89a3      	ldrh	r3, [r4, #12]
 800d60e:	d106      	bne.n	800d61e <__sflush_r+0x62>
 800d610:	6829      	ldr	r1, [r5, #0]
 800d612:	291d      	cmp	r1, #29
 800d614:	d82b      	bhi.n	800d66e <__sflush_r+0xb2>
 800d616:	4a2a      	ldr	r2, [pc, #168]	@ (800d6c0 <__sflush_r+0x104>)
 800d618:	40ca      	lsrs	r2, r1
 800d61a:	07d6      	lsls	r6, r2, #31
 800d61c:	d527      	bpl.n	800d66e <__sflush_r+0xb2>
 800d61e:	2200      	movs	r2, #0
 800d620:	6062      	str	r2, [r4, #4]
 800d622:	04d9      	lsls	r1, r3, #19
 800d624:	6922      	ldr	r2, [r4, #16]
 800d626:	6022      	str	r2, [r4, #0]
 800d628:	d504      	bpl.n	800d634 <__sflush_r+0x78>
 800d62a:	1c42      	adds	r2, r0, #1
 800d62c:	d101      	bne.n	800d632 <__sflush_r+0x76>
 800d62e:	682b      	ldr	r3, [r5, #0]
 800d630:	b903      	cbnz	r3, 800d634 <__sflush_r+0x78>
 800d632:	6560      	str	r0, [r4, #84]	@ 0x54
 800d634:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d636:	602f      	str	r7, [r5, #0]
 800d638:	b1b9      	cbz	r1, 800d66a <__sflush_r+0xae>
 800d63a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d63e:	4299      	cmp	r1, r3
 800d640:	d002      	beq.n	800d648 <__sflush_r+0x8c>
 800d642:	4628      	mov	r0, r5
 800d644:	f7ff f9e8 	bl	800ca18 <_free_r>
 800d648:	2300      	movs	r3, #0
 800d64a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d64c:	e00d      	b.n	800d66a <__sflush_r+0xae>
 800d64e:	2301      	movs	r3, #1
 800d650:	4628      	mov	r0, r5
 800d652:	47b0      	blx	r6
 800d654:	4602      	mov	r2, r0
 800d656:	1c50      	adds	r0, r2, #1
 800d658:	d1c9      	bne.n	800d5ee <__sflush_r+0x32>
 800d65a:	682b      	ldr	r3, [r5, #0]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d0c6      	beq.n	800d5ee <__sflush_r+0x32>
 800d660:	2b1d      	cmp	r3, #29
 800d662:	d001      	beq.n	800d668 <__sflush_r+0xac>
 800d664:	2b16      	cmp	r3, #22
 800d666:	d11e      	bne.n	800d6a6 <__sflush_r+0xea>
 800d668:	602f      	str	r7, [r5, #0]
 800d66a:	2000      	movs	r0, #0
 800d66c:	e022      	b.n	800d6b4 <__sflush_r+0xf8>
 800d66e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d672:	b21b      	sxth	r3, r3
 800d674:	e01b      	b.n	800d6ae <__sflush_r+0xf2>
 800d676:	690f      	ldr	r7, [r1, #16]
 800d678:	2f00      	cmp	r7, #0
 800d67a:	d0f6      	beq.n	800d66a <__sflush_r+0xae>
 800d67c:	0793      	lsls	r3, r2, #30
 800d67e:	680e      	ldr	r6, [r1, #0]
 800d680:	bf08      	it	eq
 800d682:	694b      	ldreq	r3, [r1, #20]
 800d684:	600f      	str	r7, [r1, #0]
 800d686:	bf18      	it	ne
 800d688:	2300      	movne	r3, #0
 800d68a:	eba6 0807 	sub.w	r8, r6, r7
 800d68e:	608b      	str	r3, [r1, #8]
 800d690:	f1b8 0f00 	cmp.w	r8, #0
 800d694:	dde9      	ble.n	800d66a <__sflush_r+0xae>
 800d696:	6a21      	ldr	r1, [r4, #32]
 800d698:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d69a:	4643      	mov	r3, r8
 800d69c:	463a      	mov	r2, r7
 800d69e:	4628      	mov	r0, r5
 800d6a0:	47b0      	blx	r6
 800d6a2:	2800      	cmp	r0, #0
 800d6a4:	dc08      	bgt.n	800d6b8 <__sflush_r+0xfc>
 800d6a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6ae:	81a3      	strh	r3, [r4, #12]
 800d6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b8:	4407      	add	r7, r0
 800d6ba:	eba8 0800 	sub.w	r8, r8, r0
 800d6be:	e7e7      	b.n	800d690 <__sflush_r+0xd4>
 800d6c0:	20400001 	.word	0x20400001

0800d6c4 <_fflush_r>:
 800d6c4:	b538      	push	{r3, r4, r5, lr}
 800d6c6:	690b      	ldr	r3, [r1, #16]
 800d6c8:	4605      	mov	r5, r0
 800d6ca:	460c      	mov	r4, r1
 800d6cc:	b913      	cbnz	r3, 800d6d4 <_fflush_r+0x10>
 800d6ce:	2500      	movs	r5, #0
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	bd38      	pop	{r3, r4, r5, pc}
 800d6d4:	b118      	cbz	r0, 800d6de <_fflush_r+0x1a>
 800d6d6:	6a03      	ldr	r3, [r0, #32]
 800d6d8:	b90b      	cbnz	r3, 800d6de <_fflush_r+0x1a>
 800d6da:	f7fe f9f9 	bl	800bad0 <__sinit>
 800d6de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d0f3      	beq.n	800d6ce <_fflush_r+0xa>
 800d6e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d6e8:	07d0      	lsls	r0, r2, #31
 800d6ea:	d404      	bmi.n	800d6f6 <_fflush_r+0x32>
 800d6ec:	0599      	lsls	r1, r3, #22
 800d6ee:	d402      	bmi.n	800d6f6 <_fflush_r+0x32>
 800d6f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6f2:	f7fe fb36 	bl	800bd62 <__retarget_lock_acquire_recursive>
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	4621      	mov	r1, r4
 800d6fa:	f7ff ff5f 	bl	800d5bc <__sflush_r>
 800d6fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d700:	07da      	lsls	r2, r3, #31
 800d702:	4605      	mov	r5, r0
 800d704:	d4e4      	bmi.n	800d6d0 <_fflush_r+0xc>
 800d706:	89a3      	ldrh	r3, [r4, #12]
 800d708:	059b      	lsls	r3, r3, #22
 800d70a:	d4e1      	bmi.n	800d6d0 <_fflush_r+0xc>
 800d70c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d70e:	f7fe fb29 	bl	800bd64 <__retarget_lock_release_recursive>
 800d712:	e7dd      	b.n	800d6d0 <_fflush_r+0xc>

0800d714 <memmove>:
 800d714:	4288      	cmp	r0, r1
 800d716:	b510      	push	{r4, lr}
 800d718:	eb01 0402 	add.w	r4, r1, r2
 800d71c:	d902      	bls.n	800d724 <memmove+0x10>
 800d71e:	4284      	cmp	r4, r0
 800d720:	4623      	mov	r3, r4
 800d722:	d807      	bhi.n	800d734 <memmove+0x20>
 800d724:	1e43      	subs	r3, r0, #1
 800d726:	42a1      	cmp	r1, r4
 800d728:	d008      	beq.n	800d73c <memmove+0x28>
 800d72a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d72e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d732:	e7f8      	b.n	800d726 <memmove+0x12>
 800d734:	4402      	add	r2, r0
 800d736:	4601      	mov	r1, r0
 800d738:	428a      	cmp	r2, r1
 800d73a:	d100      	bne.n	800d73e <memmove+0x2a>
 800d73c:	bd10      	pop	{r4, pc}
 800d73e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d746:	e7f7      	b.n	800d738 <memmove+0x24>

0800d748 <_sbrk_r>:
 800d748:	b538      	push	{r3, r4, r5, lr}
 800d74a:	4d06      	ldr	r5, [pc, #24]	@ (800d764 <_sbrk_r+0x1c>)
 800d74c:	2300      	movs	r3, #0
 800d74e:	4604      	mov	r4, r0
 800d750:	4608      	mov	r0, r1
 800d752:	602b      	str	r3, [r5, #0]
 800d754:	f000 fb9c 	bl	800de90 <_sbrk>
 800d758:	1c43      	adds	r3, r0, #1
 800d75a:	d102      	bne.n	800d762 <_sbrk_r+0x1a>
 800d75c:	682b      	ldr	r3, [r5, #0]
 800d75e:	b103      	cbz	r3, 800d762 <_sbrk_r+0x1a>
 800d760:	6023      	str	r3, [r4, #0]
 800d762:	bd38      	pop	{r3, r4, r5, pc}
 800d764:	200027f8 	.word	0x200027f8

0800d768 <memcpy>:
 800d768:	440a      	add	r2, r1
 800d76a:	4291      	cmp	r1, r2
 800d76c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d770:	d100      	bne.n	800d774 <memcpy+0xc>
 800d772:	4770      	bx	lr
 800d774:	b510      	push	{r4, lr}
 800d776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d77a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d77e:	4291      	cmp	r1, r2
 800d780:	d1f9      	bne.n	800d776 <memcpy+0xe>
 800d782:	bd10      	pop	{r4, pc}

0800d784 <__assert_func>:
 800d784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d786:	4614      	mov	r4, r2
 800d788:	461a      	mov	r2, r3
 800d78a:	4b09      	ldr	r3, [pc, #36]	@ (800d7b0 <__assert_func+0x2c>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4605      	mov	r5, r0
 800d790:	68d8      	ldr	r0, [r3, #12]
 800d792:	b14c      	cbz	r4, 800d7a8 <__assert_func+0x24>
 800d794:	4b07      	ldr	r3, [pc, #28]	@ (800d7b4 <__assert_func+0x30>)
 800d796:	9100      	str	r1, [sp, #0]
 800d798:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d79c:	4906      	ldr	r1, [pc, #24]	@ (800d7b8 <__assert_func+0x34>)
 800d79e:	462b      	mov	r3, r5
 800d7a0:	f000 f870 	bl	800d884 <fiprintf>
 800d7a4:	f000 f880 	bl	800d8a8 <abort>
 800d7a8:	4b04      	ldr	r3, [pc, #16]	@ (800d7bc <__assert_func+0x38>)
 800d7aa:	461c      	mov	r4, r3
 800d7ac:	e7f3      	b.n	800d796 <__assert_func+0x12>
 800d7ae:	bf00      	nop
 800d7b0:	200001a8 	.word	0x200001a8
 800d7b4:	08026941 	.word	0x08026941
 800d7b8:	0802694e 	.word	0x0802694e
 800d7bc:	0802697c 	.word	0x0802697c

0800d7c0 <_calloc_r>:
 800d7c0:	b570      	push	{r4, r5, r6, lr}
 800d7c2:	fba1 5402 	umull	r5, r4, r1, r2
 800d7c6:	b934      	cbnz	r4, 800d7d6 <_calloc_r+0x16>
 800d7c8:	4629      	mov	r1, r5
 800d7ca:	f7ff f999 	bl	800cb00 <_malloc_r>
 800d7ce:	4606      	mov	r6, r0
 800d7d0:	b928      	cbnz	r0, 800d7de <_calloc_r+0x1e>
 800d7d2:	4630      	mov	r0, r6
 800d7d4:	bd70      	pop	{r4, r5, r6, pc}
 800d7d6:	220c      	movs	r2, #12
 800d7d8:	6002      	str	r2, [r0, #0]
 800d7da:	2600      	movs	r6, #0
 800d7dc:	e7f9      	b.n	800d7d2 <_calloc_r+0x12>
 800d7de:	462a      	mov	r2, r5
 800d7e0:	4621      	mov	r1, r4
 800d7e2:	f7fe fa46 	bl	800bc72 <memset>
 800d7e6:	e7f4      	b.n	800d7d2 <_calloc_r+0x12>

0800d7e8 <__ascii_mbtowc>:
 800d7e8:	b082      	sub	sp, #8
 800d7ea:	b901      	cbnz	r1, 800d7ee <__ascii_mbtowc+0x6>
 800d7ec:	a901      	add	r1, sp, #4
 800d7ee:	b142      	cbz	r2, 800d802 <__ascii_mbtowc+0x1a>
 800d7f0:	b14b      	cbz	r3, 800d806 <__ascii_mbtowc+0x1e>
 800d7f2:	7813      	ldrb	r3, [r2, #0]
 800d7f4:	600b      	str	r3, [r1, #0]
 800d7f6:	7812      	ldrb	r2, [r2, #0]
 800d7f8:	1e10      	subs	r0, r2, #0
 800d7fa:	bf18      	it	ne
 800d7fc:	2001      	movne	r0, #1
 800d7fe:	b002      	add	sp, #8
 800d800:	4770      	bx	lr
 800d802:	4610      	mov	r0, r2
 800d804:	e7fb      	b.n	800d7fe <__ascii_mbtowc+0x16>
 800d806:	f06f 0001 	mvn.w	r0, #1
 800d80a:	e7f8      	b.n	800d7fe <__ascii_mbtowc+0x16>

0800d80c <_realloc_r>:
 800d80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d810:	4607      	mov	r7, r0
 800d812:	4614      	mov	r4, r2
 800d814:	460d      	mov	r5, r1
 800d816:	b921      	cbnz	r1, 800d822 <_realloc_r+0x16>
 800d818:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d81c:	4611      	mov	r1, r2
 800d81e:	f7ff b96f 	b.w	800cb00 <_malloc_r>
 800d822:	b92a      	cbnz	r2, 800d830 <_realloc_r+0x24>
 800d824:	f7ff f8f8 	bl	800ca18 <_free_r>
 800d828:	4625      	mov	r5, r4
 800d82a:	4628      	mov	r0, r5
 800d82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d830:	f000 f841 	bl	800d8b6 <_malloc_usable_size_r>
 800d834:	4284      	cmp	r4, r0
 800d836:	4606      	mov	r6, r0
 800d838:	d802      	bhi.n	800d840 <_realloc_r+0x34>
 800d83a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d83e:	d8f4      	bhi.n	800d82a <_realloc_r+0x1e>
 800d840:	4621      	mov	r1, r4
 800d842:	4638      	mov	r0, r7
 800d844:	f7ff f95c 	bl	800cb00 <_malloc_r>
 800d848:	4680      	mov	r8, r0
 800d84a:	b908      	cbnz	r0, 800d850 <_realloc_r+0x44>
 800d84c:	4645      	mov	r5, r8
 800d84e:	e7ec      	b.n	800d82a <_realloc_r+0x1e>
 800d850:	42b4      	cmp	r4, r6
 800d852:	4622      	mov	r2, r4
 800d854:	4629      	mov	r1, r5
 800d856:	bf28      	it	cs
 800d858:	4632      	movcs	r2, r6
 800d85a:	f7ff ff85 	bl	800d768 <memcpy>
 800d85e:	4629      	mov	r1, r5
 800d860:	4638      	mov	r0, r7
 800d862:	f7ff f8d9 	bl	800ca18 <_free_r>
 800d866:	e7f1      	b.n	800d84c <_realloc_r+0x40>

0800d868 <__ascii_wctomb>:
 800d868:	4603      	mov	r3, r0
 800d86a:	4608      	mov	r0, r1
 800d86c:	b141      	cbz	r1, 800d880 <__ascii_wctomb+0x18>
 800d86e:	2aff      	cmp	r2, #255	@ 0xff
 800d870:	d904      	bls.n	800d87c <__ascii_wctomb+0x14>
 800d872:	228a      	movs	r2, #138	@ 0x8a
 800d874:	601a      	str	r2, [r3, #0]
 800d876:	f04f 30ff 	mov.w	r0, #4294967295
 800d87a:	4770      	bx	lr
 800d87c:	700a      	strb	r2, [r1, #0]
 800d87e:	2001      	movs	r0, #1
 800d880:	4770      	bx	lr
	...

0800d884 <fiprintf>:
 800d884:	b40e      	push	{r1, r2, r3}
 800d886:	b503      	push	{r0, r1, lr}
 800d888:	4601      	mov	r1, r0
 800d88a:	ab03      	add	r3, sp, #12
 800d88c:	4805      	ldr	r0, [pc, #20]	@ (800d8a4 <fiprintf+0x20>)
 800d88e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d892:	6800      	ldr	r0, [r0, #0]
 800d894:	9301      	str	r3, [sp, #4]
 800d896:	f000 f83f 	bl	800d918 <_vfiprintf_r>
 800d89a:	b002      	add	sp, #8
 800d89c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8a0:	b003      	add	sp, #12
 800d8a2:	4770      	bx	lr
 800d8a4:	200001a8 	.word	0x200001a8

0800d8a8 <abort>:
 800d8a8:	b508      	push	{r3, lr}
 800d8aa:	2006      	movs	r0, #6
 800d8ac:	f000 fa08 	bl	800dcc0 <raise>
 800d8b0:	2001      	movs	r0, #1
 800d8b2:	f000 fafb 	bl	800deac <_exit>

0800d8b6 <_malloc_usable_size_r>:
 800d8b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8ba:	1f18      	subs	r0, r3, #4
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	bfbc      	itt	lt
 800d8c0:	580b      	ldrlt	r3, [r1, r0]
 800d8c2:	18c0      	addlt	r0, r0, r3
 800d8c4:	4770      	bx	lr

0800d8c6 <__sfputc_r>:
 800d8c6:	6893      	ldr	r3, [r2, #8]
 800d8c8:	3b01      	subs	r3, #1
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	b410      	push	{r4}
 800d8ce:	6093      	str	r3, [r2, #8]
 800d8d0:	da08      	bge.n	800d8e4 <__sfputc_r+0x1e>
 800d8d2:	6994      	ldr	r4, [r2, #24]
 800d8d4:	42a3      	cmp	r3, r4
 800d8d6:	db01      	blt.n	800d8dc <__sfputc_r+0x16>
 800d8d8:	290a      	cmp	r1, #10
 800d8da:	d103      	bne.n	800d8e4 <__sfputc_r+0x1e>
 800d8dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8e0:	f000 b932 	b.w	800db48 <__swbuf_r>
 800d8e4:	6813      	ldr	r3, [r2, #0]
 800d8e6:	1c58      	adds	r0, r3, #1
 800d8e8:	6010      	str	r0, [r2, #0]
 800d8ea:	7019      	strb	r1, [r3, #0]
 800d8ec:	4608      	mov	r0, r1
 800d8ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8f2:	4770      	bx	lr

0800d8f4 <__sfputs_r>:
 800d8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8f6:	4606      	mov	r6, r0
 800d8f8:	460f      	mov	r7, r1
 800d8fa:	4614      	mov	r4, r2
 800d8fc:	18d5      	adds	r5, r2, r3
 800d8fe:	42ac      	cmp	r4, r5
 800d900:	d101      	bne.n	800d906 <__sfputs_r+0x12>
 800d902:	2000      	movs	r0, #0
 800d904:	e007      	b.n	800d916 <__sfputs_r+0x22>
 800d906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d90a:	463a      	mov	r2, r7
 800d90c:	4630      	mov	r0, r6
 800d90e:	f7ff ffda 	bl	800d8c6 <__sfputc_r>
 800d912:	1c43      	adds	r3, r0, #1
 800d914:	d1f3      	bne.n	800d8fe <__sfputs_r+0xa>
 800d916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d918 <_vfiprintf_r>:
 800d918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d91c:	460d      	mov	r5, r1
 800d91e:	b09d      	sub	sp, #116	@ 0x74
 800d920:	4614      	mov	r4, r2
 800d922:	4698      	mov	r8, r3
 800d924:	4606      	mov	r6, r0
 800d926:	b118      	cbz	r0, 800d930 <_vfiprintf_r+0x18>
 800d928:	6a03      	ldr	r3, [r0, #32]
 800d92a:	b90b      	cbnz	r3, 800d930 <_vfiprintf_r+0x18>
 800d92c:	f7fe f8d0 	bl	800bad0 <__sinit>
 800d930:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d932:	07d9      	lsls	r1, r3, #31
 800d934:	d405      	bmi.n	800d942 <_vfiprintf_r+0x2a>
 800d936:	89ab      	ldrh	r3, [r5, #12]
 800d938:	059a      	lsls	r2, r3, #22
 800d93a:	d402      	bmi.n	800d942 <_vfiprintf_r+0x2a>
 800d93c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d93e:	f7fe fa10 	bl	800bd62 <__retarget_lock_acquire_recursive>
 800d942:	89ab      	ldrh	r3, [r5, #12]
 800d944:	071b      	lsls	r3, r3, #28
 800d946:	d501      	bpl.n	800d94c <_vfiprintf_r+0x34>
 800d948:	692b      	ldr	r3, [r5, #16]
 800d94a:	b99b      	cbnz	r3, 800d974 <_vfiprintf_r+0x5c>
 800d94c:	4629      	mov	r1, r5
 800d94e:	4630      	mov	r0, r6
 800d950:	f000 f938 	bl	800dbc4 <__swsetup_r>
 800d954:	b170      	cbz	r0, 800d974 <_vfiprintf_r+0x5c>
 800d956:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d958:	07dc      	lsls	r4, r3, #31
 800d95a:	d504      	bpl.n	800d966 <_vfiprintf_r+0x4e>
 800d95c:	f04f 30ff 	mov.w	r0, #4294967295
 800d960:	b01d      	add	sp, #116	@ 0x74
 800d962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d966:	89ab      	ldrh	r3, [r5, #12]
 800d968:	0598      	lsls	r0, r3, #22
 800d96a:	d4f7      	bmi.n	800d95c <_vfiprintf_r+0x44>
 800d96c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d96e:	f7fe f9f9 	bl	800bd64 <__retarget_lock_release_recursive>
 800d972:	e7f3      	b.n	800d95c <_vfiprintf_r+0x44>
 800d974:	2300      	movs	r3, #0
 800d976:	9309      	str	r3, [sp, #36]	@ 0x24
 800d978:	2320      	movs	r3, #32
 800d97a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d97e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d982:	2330      	movs	r3, #48	@ 0x30
 800d984:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800db34 <_vfiprintf_r+0x21c>
 800d988:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d98c:	f04f 0901 	mov.w	r9, #1
 800d990:	4623      	mov	r3, r4
 800d992:	469a      	mov	sl, r3
 800d994:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d998:	b10a      	cbz	r2, 800d99e <_vfiprintf_r+0x86>
 800d99a:	2a25      	cmp	r2, #37	@ 0x25
 800d99c:	d1f9      	bne.n	800d992 <_vfiprintf_r+0x7a>
 800d99e:	ebba 0b04 	subs.w	fp, sl, r4
 800d9a2:	d00b      	beq.n	800d9bc <_vfiprintf_r+0xa4>
 800d9a4:	465b      	mov	r3, fp
 800d9a6:	4622      	mov	r2, r4
 800d9a8:	4629      	mov	r1, r5
 800d9aa:	4630      	mov	r0, r6
 800d9ac:	f7ff ffa2 	bl	800d8f4 <__sfputs_r>
 800d9b0:	3001      	adds	r0, #1
 800d9b2:	f000 80a7 	beq.w	800db04 <_vfiprintf_r+0x1ec>
 800d9b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9b8:	445a      	add	r2, fp
 800d9ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800d9bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	f000 809f 	beq.w	800db04 <_vfiprintf_r+0x1ec>
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d9cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9d0:	f10a 0a01 	add.w	sl, sl, #1
 800d9d4:	9304      	str	r3, [sp, #16]
 800d9d6:	9307      	str	r3, [sp, #28]
 800d9d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d9dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d9de:	4654      	mov	r4, sl
 800d9e0:	2205      	movs	r2, #5
 800d9e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9e6:	4853      	ldr	r0, [pc, #332]	@ (800db34 <_vfiprintf_r+0x21c>)
 800d9e8:	f7f2 fc62 	bl	80002b0 <memchr>
 800d9ec:	9a04      	ldr	r2, [sp, #16]
 800d9ee:	b9d8      	cbnz	r0, 800da28 <_vfiprintf_r+0x110>
 800d9f0:	06d1      	lsls	r1, r2, #27
 800d9f2:	bf44      	itt	mi
 800d9f4:	2320      	movmi	r3, #32
 800d9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9fa:	0713      	lsls	r3, r2, #28
 800d9fc:	bf44      	itt	mi
 800d9fe:	232b      	movmi	r3, #43	@ 0x2b
 800da00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da04:	f89a 3000 	ldrb.w	r3, [sl]
 800da08:	2b2a      	cmp	r3, #42	@ 0x2a
 800da0a:	d015      	beq.n	800da38 <_vfiprintf_r+0x120>
 800da0c:	9a07      	ldr	r2, [sp, #28]
 800da0e:	4654      	mov	r4, sl
 800da10:	2000      	movs	r0, #0
 800da12:	f04f 0c0a 	mov.w	ip, #10
 800da16:	4621      	mov	r1, r4
 800da18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da1c:	3b30      	subs	r3, #48	@ 0x30
 800da1e:	2b09      	cmp	r3, #9
 800da20:	d94b      	bls.n	800daba <_vfiprintf_r+0x1a2>
 800da22:	b1b0      	cbz	r0, 800da52 <_vfiprintf_r+0x13a>
 800da24:	9207      	str	r2, [sp, #28]
 800da26:	e014      	b.n	800da52 <_vfiprintf_r+0x13a>
 800da28:	eba0 0308 	sub.w	r3, r0, r8
 800da2c:	fa09 f303 	lsl.w	r3, r9, r3
 800da30:	4313      	orrs	r3, r2
 800da32:	9304      	str	r3, [sp, #16]
 800da34:	46a2      	mov	sl, r4
 800da36:	e7d2      	b.n	800d9de <_vfiprintf_r+0xc6>
 800da38:	9b03      	ldr	r3, [sp, #12]
 800da3a:	1d19      	adds	r1, r3, #4
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	9103      	str	r1, [sp, #12]
 800da40:	2b00      	cmp	r3, #0
 800da42:	bfbb      	ittet	lt
 800da44:	425b      	neglt	r3, r3
 800da46:	f042 0202 	orrlt.w	r2, r2, #2
 800da4a:	9307      	strge	r3, [sp, #28]
 800da4c:	9307      	strlt	r3, [sp, #28]
 800da4e:	bfb8      	it	lt
 800da50:	9204      	strlt	r2, [sp, #16]
 800da52:	7823      	ldrb	r3, [r4, #0]
 800da54:	2b2e      	cmp	r3, #46	@ 0x2e
 800da56:	d10a      	bne.n	800da6e <_vfiprintf_r+0x156>
 800da58:	7863      	ldrb	r3, [r4, #1]
 800da5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800da5c:	d132      	bne.n	800dac4 <_vfiprintf_r+0x1ac>
 800da5e:	9b03      	ldr	r3, [sp, #12]
 800da60:	1d1a      	adds	r2, r3, #4
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	9203      	str	r2, [sp, #12]
 800da66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da6a:	3402      	adds	r4, #2
 800da6c:	9305      	str	r3, [sp, #20]
 800da6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800db44 <_vfiprintf_r+0x22c>
 800da72:	7821      	ldrb	r1, [r4, #0]
 800da74:	2203      	movs	r2, #3
 800da76:	4650      	mov	r0, sl
 800da78:	f7f2 fc1a 	bl	80002b0 <memchr>
 800da7c:	b138      	cbz	r0, 800da8e <_vfiprintf_r+0x176>
 800da7e:	9b04      	ldr	r3, [sp, #16]
 800da80:	eba0 000a 	sub.w	r0, r0, sl
 800da84:	2240      	movs	r2, #64	@ 0x40
 800da86:	4082      	lsls	r2, r0
 800da88:	4313      	orrs	r3, r2
 800da8a:	3401      	adds	r4, #1
 800da8c:	9304      	str	r3, [sp, #16]
 800da8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da92:	4829      	ldr	r0, [pc, #164]	@ (800db38 <_vfiprintf_r+0x220>)
 800da94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800da98:	2206      	movs	r2, #6
 800da9a:	f7f2 fc09 	bl	80002b0 <memchr>
 800da9e:	2800      	cmp	r0, #0
 800daa0:	d03f      	beq.n	800db22 <_vfiprintf_r+0x20a>
 800daa2:	4b26      	ldr	r3, [pc, #152]	@ (800db3c <_vfiprintf_r+0x224>)
 800daa4:	bb1b      	cbnz	r3, 800daee <_vfiprintf_r+0x1d6>
 800daa6:	9b03      	ldr	r3, [sp, #12]
 800daa8:	3307      	adds	r3, #7
 800daaa:	f023 0307 	bic.w	r3, r3, #7
 800daae:	3308      	adds	r3, #8
 800dab0:	9303      	str	r3, [sp, #12]
 800dab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dab4:	443b      	add	r3, r7
 800dab6:	9309      	str	r3, [sp, #36]	@ 0x24
 800dab8:	e76a      	b.n	800d990 <_vfiprintf_r+0x78>
 800daba:	fb0c 3202 	mla	r2, ip, r2, r3
 800dabe:	460c      	mov	r4, r1
 800dac0:	2001      	movs	r0, #1
 800dac2:	e7a8      	b.n	800da16 <_vfiprintf_r+0xfe>
 800dac4:	2300      	movs	r3, #0
 800dac6:	3401      	adds	r4, #1
 800dac8:	9305      	str	r3, [sp, #20]
 800daca:	4619      	mov	r1, r3
 800dacc:	f04f 0c0a 	mov.w	ip, #10
 800dad0:	4620      	mov	r0, r4
 800dad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dad6:	3a30      	subs	r2, #48	@ 0x30
 800dad8:	2a09      	cmp	r2, #9
 800dada:	d903      	bls.n	800dae4 <_vfiprintf_r+0x1cc>
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d0c6      	beq.n	800da6e <_vfiprintf_r+0x156>
 800dae0:	9105      	str	r1, [sp, #20]
 800dae2:	e7c4      	b.n	800da6e <_vfiprintf_r+0x156>
 800dae4:	fb0c 2101 	mla	r1, ip, r1, r2
 800dae8:	4604      	mov	r4, r0
 800daea:	2301      	movs	r3, #1
 800daec:	e7f0      	b.n	800dad0 <_vfiprintf_r+0x1b8>
 800daee:	ab03      	add	r3, sp, #12
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	462a      	mov	r2, r5
 800daf4:	4b12      	ldr	r3, [pc, #72]	@ (800db40 <_vfiprintf_r+0x228>)
 800daf6:	a904      	add	r1, sp, #16
 800daf8:	4630      	mov	r0, r6
 800dafa:	f7fd fba7 	bl	800b24c <_printf_float>
 800dafe:	4607      	mov	r7, r0
 800db00:	1c78      	adds	r0, r7, #1
 800db02:	d1d6      	bne.n	800dab2 <_vfiprintf_r+0x19a>
 800db04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db06:	07d9      	lsls	r1, r3, #31
 800db08:	d405      	bmi.n	800db16 <_vfiprintf_r+0x1fe>
 800db0a:	89ab      	ldrh	r3, [r5, #12]
 800db0c:	059a      	lsls	r2, r3, #22
 800db0e:	d402      	bmi.n	800db16 <_vfiprintf_r+0x1fe>
 800db10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db12:	f7fe f927 	bl	800bd64 <__retarget_lock_release_recursive>
 800db16:	89ab      	ldrh	r3, [r5, #12]
 800db18:	065b      	lsls	r3, r3, #25
 800db1a:	f53f af1f 	bmi.w	800d95c <_vfiprintf_r+0x44>
 800db1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db20:	e71e      	b.n	800d960 <_vfiprintf_r+0x48>
 800db22:	ab03      	add	r3, sp, #12
 800db24:	9300      	str	r3, [sp, #0]
 800db26:	462a      	mov	r2, r5
 800db28:	4b05      	ldr	r3, [pc, #20]	@ (800db40 <_vfiprintf_r+0x228>)
 800db2a:	a904      	add	r1, sp, #16
 800db2c:	4630      	mov	r0, r6
 800db2e:	f7fd fe25 	bl	800b77c <_printf_i>
 800db32:	e7e4      	b.n	800dafe <_vfiprintf_r+0x1e6>
 800db34:	08026926 	.word	0x08026926
 800db38:	08026930 	.word	0x08026930
 800db3c:	0800b24d 	.word	0x0800b24d
 800db40:	0800d8f5 	.word	0x0800d8f5
 800db44:	0802692c 	.word	0x0802692c

0800db48 <__swbuf_r>:
 800db48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db4a:	460e      	mov	r6, r1
 800db4c:	4614      	mov	r4, r2
 800db4e:	4605      	mov	r5, r0
 800db50:	b118      	cbz	r0, 800db5a <__swbuf_r+0x12>
 800db52:	6a03      	ldr	r3, [r0, #32]
 800db54:	b90b      	cbnz	r3, 800db5a <__swbuf_r+0x12>
 800db56:	f7fd ffbb 	bl	800bad0 <__sinit>
 800db5a:	69a3      	ldr	r3, [r4, #24]
 800db5c:	60a3      	str	r3, [r4, #8]
 800db5e:	89a3      	ldrh	r3, [r4, #12]
 800db60:	071a      	lsls	r2, r3, #28
 800db62:	d501      	bpl.n	800db68 <__swbuf_r+0x20>
 800db64:	6923      	ldr	r3, [r4, #16]
 800db66:	b943      	cbnz	r3, 800db7a <__swbuf_r+0x32>
 800db68:	4621      	mov	r1, r4
 800db6a:	4628      	mov	r0, r5
 800db6c:	f000 f82a 	bl	800dbc4 <__swsetup_r>
 800db70:	b118      	cbz	r0, 800db7a <__swbuf_r+0x32>
 800db72:	f04f 37ff 	mov.w	r7, #4294967295
 800db76:	4638      	mov	r0, r7
 800db78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db7a:	6823      	ldr	r3, [r4, #0]
 800db7c:	6922      	ldr	r2, [r4, #16]
 800db7e:	1a98      	subs	r0, r3, r2
 800db80:	6963      	ldr	r3, [r4, #20]
 800db82:	b2f6      	uxtb	r6, r6
 800db84:	4283      	cmp	r3, r0
 800db86:	4637      	mov	r7, r6
 800db88:	dc05      	bgt.n	800db96 <__swbuf_r+0x4e>
 800db8a:	4621      	mov	r1, r4
 800db8c:	4628      	mov	r0, r5
 800db8e:	f7ff fd99 	bl	800d6c4 <_fflush_r>
 800db92:	2800      	cmp	r0, #0
 800db94:	d1ed      	bne.n	800db72 <__swbuf_r+0x2a>
 800db96:	68a3      	ldr	r3, [r4, #8]
 800db98:	3b01      	subs	r3, #1
 800db9a:	60a3      	str	r3, [r4, #8]
 800db9c:	6823      	ldr	r3, [r4, #0]
 800db9e:	1c5a      	adds	r2, r3, #1
 800dba0:	6022      	str	r2, [r4, #0]
 800dba2:	701e      	strb	r6, [r3, #0]
 800dba4:	6962      	ldr	r2, [r4, #20]
 800dba6:	1c43      	adds	r3, r0, #1
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d004      	beq.n	800dbb6 <__swbuf_r+0x6e>
 800dbac:	89a3      	ldrh	r3, [r4, #12]
 800dbae:	07db      	lsls	r3, r3, #31
 800dbb0:	d5e1      	bpl.n	800db76 <__swbuf_r+0x2e>
 800dbb2:	2e0a      	cmp	r6, #10
 800dbb4:	d1df      	bne.n	800db76 <__swbuf_r+0x2e>
 800dbb6:	4621      	mov	r1, r4
 800dbb8:	4628      	mov	r0, r5
 800dbba:	f7ff fd83 	bl	800d6c4 <_fflush_r>
 800dbbe:	2800      	cmp	r0, #0
 800dbc0:	d0d9      	beq.n	800db76 <__swbuf_r+0x2e>
 800dbc2:	e7d6      	b.n	800db72 <__swbuf_r+0x2a>

0800dbc4 <__swsetup_r>:
 800dbc4:	b538      	push	{r3, r4, r5, lr}
 800dbc6:	4b29      	ldr	r3, [pc, #164]	@ (800dc6c <__swsetup_r+0xa8>)
 800dbc8:	4605      	mov	r5, r0
 800dbca:	6818      	ldr	r0, [r3, #0]
 800dbcc:	460c      	mov	r4, r1
 800dbce:	b118      	cbz	r0, 800dbd8 <__swsetup_r+0x14>
 800dbd0:	6a03      	ldr	r3, [r0, #32]
 800dbd2:	b90b      	cbnz	r3, 800dbd8 <__swsetup_r+0x14>
 800dbd4:	f7fd ff7c 	bl	800bad0 <__sinit>
 800dbd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbdc:	0719      	lsls	r1, r3, #28
 800dbde:	d422      	bmi.n	800dc26 <__swsetup_r+0x62>
 800dbe0:	06da      	lsls	r2, r3, #27
 800dbe2:	d407      	bmi.n	800dbf4 <__swsetup_r+0x30>
 800dbe4:	2209      	movs	r2, #9
 800dbe6:	602a      	str	r2, [r5, #0]
 800dbe8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbec:	81a3      	strh	r3, [r4, #12]
 800dbee:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf2:	e033      	b.n	800dc5c <__swsetup_r+0x98>
 800dbf4:	0758      	lsls	r0, r3, #29
 800dbf6:	d512      	bpl.n	800dc1e <__swsetup_r+0x5a>
 800dbf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dbfa:	b141      	cbz	r1, 800dc0e <__swsetup_r+0x4a>
 800dbfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc00:	4299      	cmp	r1, r3
 800dc02:	d002      	beq.n	800dc0a <__swsetup_r+0x46>
 800dc04:	4628      	mov	r0, r5
 800dc06:	f7fe ff07 	bl	800ca18 <_free_r>
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc0e:	89a3      	ldrh	r3, [r4, #12]
 800dc10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dc14:	81a3      	strh	r3, [r4, #12]
 800dc16:	2300      	movs	r3, #0
 800dc18:	6063      	str	r3, [r4, #4]
 800dc1a:	6923      	ldr	r3, [r4, #16]
 800dc1c:	6023      	str	r3, [r4, #0]
 800dc1e:	89a3      	ldrh	r3, [r4, #12]
 800dc20:	f043 0308 	orr.w	r3, r3, #8
 800dc24:	81a3      	strh	r3, [r4, #12]
 800dc26:	6923      	ldr	r3, [r4, #16]
 800dc28:	b94b      	cbnz	r3, 800dc3e <__swsetup_r+0x7a>
 800dc2a:	89a3      	ldrh	r3, [r4, #12]
 800dc2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dc30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc34:	d003      	beq.n	800dc3e <__swsetup_r+0x7a>
 800dc36:	4621      	mov	r1, r4
 800dc38:	4628      	mov	r0, r5
 800dc3a:	f000 f883 	bl	800dd44 <__smakebuf_r>
 800dc3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc42:	f013 0201 	ands.w	r2, r3, #1
 800dc46:	d00a      	beq.n	800dc5e <__swsetup_r+0x9a>
 800dc48:	2200      	movs	r2, #0
 800dc4a:	60a2      	str	r2, [r4, #8]
 800dc4c:	6962      	ldr	r2, [r4, #20]
 800dc4e:	4252      	negs	r2, r2
 800dc50:	61a2      	str	r2, [r4, #24]
 800dc52:	6922      	ldr	r2, [r4, #16]
 800dc54:	b942      	cbnz	r2, 800dc68 <__swsetup_r+0xa4>
 800dc56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dc5a:	d1c5      	bne.n	800dbe8 <__swsetup_r+0x24>
 800dc5c:	bd38      	pop	{r3, r4, r5, pc}
 800dc5e:	0799      	lsls	r1, r3, #30
 800dc60:	bf58      	it	pl
 800dc62:	6962      	ldrpl	r2, [r4, #20]
 800dc64:	60a2      	str	r2, [r4, #8]
 800dc66:	e7f4      	b.n	800dc52 <__swsetup_r+0x8e>
 800dc68:	2000      	movs	r0, #0
 800dc6a:	e7f7      	b.n	800dc5c <__swsetup_r+0x98>
 800dc6c:	200001a8 	.word	0x200001a8

0800dc70 <_raise_r>:
 800dc70:	291f      	cmp	r1, #31
 800dc72:	b538      	push	{r3, r4, r5, lr}
 800dc74:	4605      	mov	r5, r0
 800dc76:	460c      	mov	r4, r1
 800dc78:	d904      	bls.n	800dc84 <_raise_r+0x14>
 800dc7a:	2316      	movs	r3, #22
 800dc7c:	6003      	str	r3, [r0, #0]
 800dc7e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc82:	bd38      	pop	{r3, r4, r5, pc}
 800dc84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dc86:	b112      	cbz	r2, 800dc8e <_raise_r+0x1e>
 800dc88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc8c:	b94b      	cbnz	r3, 800dca2 <_raise_r+0x32>
 800dc8e:	4628      	mov	r0, r5
 800dc90:	f000 f830 	bl	800dcf4 <_getpid_r>
 800dc94:	4622      	mov	r2, r4
 800dc96:	4601      	mov	r1, r0
 800dc98:	4628      	mov	r0, r5
 800dc9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc9e:	f000 b817 	b.w	800dcd0 <_kill_r>
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d00a      	beq.n	800dcbc <_raise_r+0x4c>
 800dca6:	1c59      	adds	r1, r3, #1
 800dca8:	d103      	bne.n	800dcb2 <_raise_r+0x42>
 800dcaa:	2316      	movs	r3, #22
 800dcac:	6003      	str	r3, [r0, #0]
 800dcae:	2001      	movs	r0, #1
 800dcb0:	e7e7      	b.n	800dc82 <_raise_r+0x12>
 800dcb2:	2100      	movs	r1, #0
 800dcb4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dcb8:	4620      	mov	r0, r4
 800dcba:	4798      	blx	r3
 800dcbc:	2000      	movs	r0, #0
 800dcbe:	e7e0      	b.n	800dc82 <_raise_r+0x12>

0800dcc0 <raise>:
 800dcc0:	4b02      	ldr	r3, [pc, #8]	@ (800dccc <raise+0xc>)
 800dcc2:	4601      	mov	r1, r0
 800dcc4:	6818      	ldr	r0, [r3, #0]
 800dcc6:	f7ff bfd3 	b.w	800dc70 <_raise_r>
 800dcca:	bf00      	nop
 800dccc:	200001a8 	.word	0x200001a8

0800dcd0 <_kill_r>:
 800dcd0:	b538      	push	{r3, r4, r5, lr}
 800dcd2:	4d07      	ldr	r5, [pc, #28]	@ (800dcf0 <_kill_r+0x20>)
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	4604      	mov	r4, r0
 800dcd8:	4608      	mov	r0, r1
 800dcda:	4611      	mov	r1, r2
 800dcdc:	602b      	str	r3, [r5, #0]
 800dcde:	f000 f8cf 	bl	800de80 <_kill>
 800dce2:	1c43      	adds	r3, r0, #1
 800dce4:	d102      	bne.n	800dcec <_kill_r+0x1c>
 800dce6:	682b      	ldr	r3, [r5, #0]
 800dce8:	b103      	cbz	r3, 800dcec <_kill_r+0x1c>
 800dcea:	6023      	str	r3, [r4, #0]
 800dcec:	bd38      	pop	{r3, r4, r5, pc}
 800dcee:	bf00      	nop
 800dcf0:	200027f8 	.word	0x200027f8

0800dcf4 <_getpid_r>:
 800dcf4:	f000 b8b4 	b.w	800de60 <_getpid>

0800dcf8 <__swhatbuf_r>:
 800dcf8:	b570      	push	{r4, r5, r6, lr}
 800dcfa:	460c      	mov	r4, r1
 800dcfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd00:	2900      	cmp	r1, #0
 800dd02:	b096      	sub	sp, #88	@ 0x58
 800dd04:	4615      	mov	r5, r2
 800dd06:	461e      	mov	r6, r3
 800dd08:	da0d      	bge.n	800dd26 <__swhatbuf_r+0x2e>
 800dd0a:	89a3      	ldrh	r3, [r4, #12]
 800dd0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dd10:	f04f 0100 	mov.w	r1, #0
 800dd14:	bf14      	ite	ne
 800dd16:	2340      	movne	r3, #64	@ 0x40
 800dd18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dd1c:	2000      	movs	r0, #0
 800dd1e:	6031      	str	r1, [r6, #0]
 800dd20:	602b      	str	r3, [r5, #0]
 800dd22:	b016      	add	sp, #88	@ 0x58
 800dd24:	bd70      	pop	{r4, r5, r6, pc}
 800dd26:	466a      	mov	r2, sp
 800dd28:	f000 f848 	bl	800ddbc <_fstat_r>
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	dbec      	blt.n	800dd0a <__swhatbuf_r+0x12>
 800dd30:	9901      	ldr	r1, [sp, #4]
 800dd32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dd36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dd3a:	4259      	negs	r1, r3
 800dd3c:	4159      	adcs	r1, r3
 800dd3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd42:	e7eb      	b.n	800dd1c <__swhatbuf_r+0x24>

0800dd44 <__smakebuf_r>:
 800dd44:	898b      	ldrh	r3, [r1, #12]
 800dd46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd48:	079d      	lsls	r5, r3, #30
 800dd4a:	4606      	mov	r6, r0
 800dd4c:	460c      	mov	r4, r1
 800dd4e:	d507      	bpl.n	800dd60 <__smakebuf_r+0x1c>
 800dd50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dd54:	6023      	str	r3, [r4, #0]
 800dd56:	6123      	str	r3, [r4, #16]
 800dd58:	2301      	movs	r3, #1
 800dd5a:	6163      	str	r3, [r4, #20]
 800dd5c:	b003      	add	sp, #12
 800dd5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd60:	ab01      	add	r3, sp, #4
 800dd62:	466a      	mov	r2, sp
 800dd64:	f7ff ffc8 	bl	800dcf8 <__swhatbuf_r>
 800dd68:	9f00      	ldr	r7, [sp, #0]
 800dd6a:	4605      	mov	r5, r0
 800dd6c:	4639      	mov	r1, r7
 800dd6e:	4630      	mov	r0, r6
 800dd70:	f7fe fec6 	bl	800cb00 <_malloc_r>
 800dd74:	b948      	cbnz	r0, 800dd8a <__smakebuf_r+0x46>
 800dd76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd7a:	059a      	lsls	r2, r3, #22
 800dd7c:	d4ee      	bmi.n	800dd5c <__smakebuf_r+0x18>
 800dd7e:	f023 0303 	bic.w	r3, r3, #3
 800dd82:	f043 0302 	orr.w	r3, r3, #2
 800dd86:	81a3      	strh	r3, [r4, #12]
 800dd88:	e7e2      	b.n	800dd50 <__smakebuf_r+0xc>
 800dd8a:	89a3      	ldrh	r3, [r4, #12]
 800dd8c:	6020      	str	r0, [r4, #0]
 800dd8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd92:	81a3      	strh	r3, [r4, #12]
 800dd94:	9b01      	ldr	r3, [sp, #4]
 800dd96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dd9a:	b15b      	cbz	r3, 800ddb4 <__smakebuf_r+0x70>
 800dd9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dda0:	4630      	mov	r0, r6
 800dda2:	f000 f81d 	bl	800dde0 <_isatty_r>
 800dda6:	b128      	cbz	r0, 800ddb4 <__smakebuf_r+0x70>
 800dda8:	89a3      	ldrh	r3, [r4, #12]
 800ddaa:	f023 0303 	bic.w	r3, r3, #3
 800ddae:	f043 0301 	orr.w	r3, r3, #1
 800ddb2:	81a3      	strh	r3, [r4, #12]
 800ddb4:	89a3      	ldrh	r3, [r4, #12]
 800ddb6:	431d      	orrs	r5, r3
 800ddb8:	81a5      	strh	r5, [r4, #12]
 800ddba:	e7cf      	b.n	800dd5c <__smakebuf_r+0x18>

0800ddbc <_fstat_r>:
 800ddbc:	b538      	push	{r3, r4, r5, lr}
 800ddbe:	4d07      	ldr	r5, [pc, #28]	@ (800dddc <_fstat_r+0x20>)
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	4608      	mov	r0, r1
 800ddc6:	4611      	mov	r1, r2
 800ddc8:	602b      	str	r3, [r5, #0]
 800ddca:	f000 f841 	bl	800de50 <_fstat>
 800ddce:	1c43      	adds	r3, r0, #1
 800ddd0:	d102      	bne.n	800ddd8 <_fstat_r+0x1c>
 800ddd2:	682b      	ldr	r3, [r5, #0]
 800ddd4:	b103      	cbz	r3, 800ddd8 <_fstat_r+0x1c>
 800ddd6:	6023      	str	r3, [r4, #0]
 800ddd8:	bd38      	pop	{r3, r4, r5, pc}
 800ddda:	bf00      	nop
 800dddc:	200027f8 	.word	0x200027f8

0800dde0 <_isatty_r>:
 800dde0:	b538      	push	{r3, r4, r5, lr}
 800dde2:	4d06      	ldr	r5, [pc, #24]	@ (800ddfc <_isatty_r+0x1c>)
 800dde4:	2300      	movs	r3, #0
 800dde6:	4604      	mov	r4, r0
 800dde8:	4608      	mov	r0, r1
 800ddea:	602b      	str	r3, [r5, #0]
 800ddec:	f000 f840 	bl	800de70 <_isatty>
 800ddf0:	1c43      	adds	r3, r0, #1
 800ddf2:	d102      	bne.n	800ddfa <_isatty_r+0x1a>
 800ddf4:	682b      	ldr	r3, [r5, #0]
 800ddf6:	b103      	cbz	r3, 800ddfa <_isatty_r+0x1a>
 800ddf8:	6023      	str	r3, [r4, #0]
 800ddfa:	bd38      	pop	{r3, r4, r5, pc}
 800ddfc:	200027f8 	.word	0x200027f8

0800de00 <sqrtf>:
 800de00:	b508      	push	{r3, lr}
 800de02:	ed2d 8b02 	vpush	{d8}
 800de06:	eeb0 8a40 	vmov.f32	s16, s0
 800de0a:	f000 f817 	bl	800de3c <__ieee754_sqrtf>
 800de0e:	eeb4 8a48 	vcmp.f32	s16, s16
 800de12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de16:	d60c      	bvs.n	800de32 <sqrtf+0x32>
 800de18:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800de38 <sqrtf+0x38>
 800de1c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800de20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de24:	d505      	bpl.n	800de32 <sqrtf+0x32>
 800de26:	f000 f80d 	bl	800de44 <__errno>
 800de2a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800de2e:	2321      	movs	r3, #33	@ 0x21
 800de30:	6003      	str	r3, [r0, #0]
 800de32:	ecbd 8b02 	vpop	{d8}
 800de36:	bd08      	pop	{r3, pc}
 800de38:	00000000 	.word	0x00000000

0800de3c <__ieee754_sqrtf>:
 800de3c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800de40:	4770      	bx	lr
	...

0800de44 <__errno>:
 800de44:	4b01      	ldr	r3, [pc, #4]	@ (800de4c <__errno+0x8>)
 800de46:	6818      	ldr	r0, [r3, #0]
 800de48:	4770      	bx	lr
 800de4a:	bf00      	nop
 800de4c:	200001a8 	.word	0x200001a8

0800de50 <_fstat>:
 800de50:	4b02      	ldr	r3, [pc, #8]	@ (800de5c <_fstat+0xc>)
 800de52:	2258      	movs	r2, #88	@ 0x58
 800de54:	601a      	str	r2, [r3, #0]
 800de56:	f04f 30ff 	mov.w	r0, #4294967295
 800de5a:	4770      	bx	lr
 800de5c:	200027f8 	.word	0x200027f8

0800de60 <_getpid>:
 800de60:	4b02      	ldr	r3, [pc, #8]	@ (800de6c <_getpid+0xc>)
 800de62:	2258      	movs	r2, #88	@ 0x58
 800de64:	601a      	str	r2, [r3, #0]
 800de66:	f04f 30ff 	mov.w	r0, #4294967295
 800de6a:	4770      	bx	lr
 800de6c:	200027f8 	.word	0x200027f8

0800de70 <_isatty>:
 800de70:	4b02      	ldr	r3, [pc, #8]	@ (800de7c <_isatty+0xc>)
 800de72:	2258      	movs	r2, #88	@ 0x58
 800de74:	601a      	str	r2, [r3, #0]
 800de76:	2000      	movs	r0, #0
 800de78:	4770      	bx	lr
 800de7a:	bf00      	nop
 800de7c:	200027f8 	.word	0x200027f8

0800de80 <_kill>:
 800de80:	4b02      	ldr	r3, [pc, #8]	@ (800de8c <_kill+0xc>)
 800de82:	2258      	movs	r2, #88	@ 0x58
 800de84:	601a      	str	r2, [r3, #0]
 800de86:	f04f 30ff 	mov.w	r0, #4294967295
 800de8a:	4770      	bx	lr
 800de8c:	200027f8 	.word	0x200027f8

0800de90 <_sbrk>:
 800de90:	4a04      	ldr	r2, [pc, #16]	@ (800dea4 <_sbrk+0x14>)
 800de92:	6811      	ldr	r1, [r2, #0]
 800de94:	4603      	mov	r3, r0
 800de96:	b909      	cbnz	r1, 800de9c <_sbrk+0xc>
 800de98:	4903      	ldr	r1, [pc, #12]	@ (800dea8 <_sbrk+0x18>)
 800de9a:	6011      	str	r1, [r2, #0]
 800de9c:	6810      	ldr	r0, [r2, #0]
 800de9e:	4403      	add	r3, r0
 800dea0:	6013      	str	r3, [r2, #0]
 800dea2:	4770      	bx	lr
 800dea4:	20002808 	.word	0x20002808
 800dea8:	20002810 	.word	0x20002810

0800deac <_exit>:
 800deac:	e7fe      	b.n	800deac <_exit>
	...

0800deb0 <_init>:
 800deb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deb2:	bf00      	nop
 800deb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deb6:	bc08      	pop	{r3}
 800deb8:	469e      	mov	lr, r3
 800deba:	4770      	bx	lr

0800debc <_fini>:
 800debc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800debe:	bf00      	nop
 800dec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dec2:	bc08      	pop	{r3}
 800dec4:	469e      	mov	lr, r3
 800dec6:	4770      	bx	lr
