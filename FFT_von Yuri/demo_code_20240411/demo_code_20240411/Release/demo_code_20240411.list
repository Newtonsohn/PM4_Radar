
demo_code_20240411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b350  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00017fa8  0800b500  0800b500  0000c500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080234a8  080234a8  00025100  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080234a8  080234a8  000244a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080234b0  080234b0  00025100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080234b0  080234b0  000244b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080234b4  080234b4  000244b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  080234b8  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a8  20000100  080235b8  00025100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009a8  080235b8  000259a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b1e  00000000  00000000  00025130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000405e  00000000  00000000  0003ec4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  00042cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012fc  00000000  00000000  00044620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bcc  00000000  00000000  0004591c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001def4  00000000  00000000  0006d4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7b03  00000000  00000000  0008b3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00172edf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f6c  00000000  00000000  00172f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00179efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002178  00000000  00000000  00179f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000110  00000000  00000000  0017c0fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000100 	.word	0x20000100
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b4e8 	.word	0x0800b4e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000104 	.word	0x20000104
 80001ec:	0800b4e8 	.word	0x0800b4e8

080001f0 <arm_bitreversal_32>:
 80001f0:	1c4b      	adds	r3, r1, #1
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	bf98      	it	ls
 80001f6:	4770      	bxls	lr
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001fc:	1c91      	adds	r1, r2, #2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000208:	880a      	ldrh	r2, [r1, #0]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020e:	4480      	add	r8, r0
 8000210:	4481      	add	r9, r0
 8000212:	4402      	add	r2, r0
 8000214:	4484      	add	ip, r0
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
 800021e:	6815      	ldr	r5, [r2, #0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
 8000224:	f8c9 6000 	str.w	r6, [r9]
 8000228:	f8c8 7000 	str.w	r7, [r8]
 800022c:	f8cc 5000 	str.w	r5, [ip]
 8000230:	6014      	str	r4, [r2, #0]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800023a:	6855      	ldr	r5, [r2, #4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
 800024c:	6054      	str	r4, [r2, #4]
 800024e:	3108      	adds	r1, #8
 8000250:	3b01      	subs	r3, #1
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
 800025a:	1c4b      	adds	r3, r1, #1
 800025c:	2b01      	cmp	r3, #1
 800025e:	bf98      	it	ls
 8000260:	4770      	bxls	lr
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000266:	1c91      	adds	r1, r2, #2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000272:	880a      	ldrh	r2, [r1, #0]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
 8000290:	6815      	ldr	r5, [r2, #0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
 8000296:	f8c9 6000 	str.w	r6, [r9]
 800029a:	f8c8 7000 	str.w	r7, [r8]
 800029e:	f8cc 5000 	str.w	r5, [ip]
 80002a2:	6014      	str	r4, [r2, #0]
 80002a4:	3108      	adds	r1, #8
 80002a6:	3b01      	subs	r3, #1
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ae:	4770      	bx	lr

080002b0 <strcmp>:
 80002b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	bf28      	it	cs
 80002bc:	429a      	cmpcs	r2, r3
 80002be:	d0f7      	beq.n	80002b0 <strcmp>
 80002c0:	1ad0      	subs	r0, r2, r3
 80002c2:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_uldivmod>:
 8000370:	b953      	cbnz	r3, 8000388 <__aeabi_uldivmod+0x18>
 8000372:	b94a      	cbnz	r2, 8000388 <__aeabi_uldivmod+0x18>
 8000374:	2900      	cmp	r1, #0
 8000376:	bf08      	it	eq
 8000378:	2800      	cmpeq	r0, #0
 800037a:	bf1c      	itt	ne
 800037c:	f04f 31ff 	movne.w	r1, #4294967295
 8000380:	f04f 30ff 	movne.w	r0, #4294967295
 8000384:	f000 b988 	b.w	8000698 <__aeabi_idiv0>
 8000388:	f1ad 0c08 	sub.w	ip, sp, #8
 800038c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000390:	f000 f806 	bl	80003a0 <__udivmoddi4>
 8000394:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800039c:	b004      	add	sp, #16
 800039e:	4770      	bx	lr

080003a0 <__udivmoddi4>:
 80003a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003a4:	9d08      	ldr	r5, [sp, #32]
 80003a6:	468e      	mov	lr, r1
 80003a8:	4604      	mov	r4, r0
 80003aa:	4688      	mov	r8, r1
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d14a      	bne.n	8000446 <__udivmoddi4+0xa6>
 80003b0:	428a      	cmp	r2, r1
 80003b2:	4617      	mov	r7, r2
 80003b4:	d962      	bls.n	800047c <__udivmoddi4+0xdc>
 80003b6:	fab2 f682 	clz	r6, r2
 80003ba:	b14e      	cbz	r6, 80003d0 <__udivmoddi4+0x30>
 80003bc:	f1c6 0320 	rsb	r3, r6, #32
 80003c0:	fa01 f806 	lsl.w	r8, r1, r6
 80003c4:	fa20 f303 	lsr.w	r3, r0, r3
 80003c8:	40b7      	lsls	r7, r6
 80003ca:	ea43 0808 	orr.w	r8, r3, r8
 80003ce:	40b4      	lsls	r4, r6
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	fa1f fc87 	uxth.w	ip, r7
 80003d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003dc:	0c23      	lsrs	r3, r4, #16
 80003de:	fb0e 8811 	mls	r8, lr, r1, r8
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fb01 f20c 	mul.w	r2, r1, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0x62>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80003f4:	f080 80ea 	bcs.w	80005cc <__udivmoddi4+0x22c>
 80003f8:	429a      	cmp	r2, r3
 80003fa:	f240 80e7 	bls.w	80005cc <__udivmoddi4+0x22c>
 80003fe:	3902      	subs	r1, #2
 8000400:	443b      	add	r3, r7
 8000402:	1a9a      	subs	r2, r3, r2
 8000404:	b2a3      	uxth	r3, r4
 8000406:	fbb2 f0fe 	udiv	r0, r2, lr
 800040a:	fb0e 2210 	mls	r2, lr, r0, r2
 800040e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000412:	fb00 fc0c 	mul.w	ip, r0, ip
 8000416:	459c      	cmp	ip, r3
 8000418:	d909      	bls.n	800042e <__udivmoddi4+0x8e>
 800041a:	18fb      	adds	r3, r7, r3
 800041c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000420:	f080 80d6 	bcs.w	80005d0 <__udivmoddi4+0x230>
 8000424:	459c      	cmp	ip, r3
 8000426:	f240 80d3 	bls.w	80005d0 <__udivmoddi4+0x230>
 800042a:	443b      	add	r3, r7
 800042c:	3802      	subs	r0, #2
 800042e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000432:	eba3 030c 	sub.w	r3, r3, ip
 8000436:	2100      	movs	r1, #0
 8000438:	b11d      	cbz	r5, 8000442 <__udivmoddi4+0xa2>
 800043a:	40f3      	lsrs	r3, r6
 800043c:	2200      	movs	r2, #0
 800043e:	e9c5 3200 	strd	r3, r2, [r5]
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	428b      	cmp	r3, r1
 8000448:	d905      	bls.n	8000456 <__udivmoddi4+0xb6>
 800044a:	b10d      	cbz	r5, 8000450 <__udivmoddi4+0xb0>
 800044c:	e9c5 0100 	strd	r0, r1, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	4608      	mov	r0, r1
 8000454:	e7f5      	b.n	8000442 <__udivmoddi4+0xa2>
 8000456:	fab3 f183 	clz	r1, r3
 800045a:	2900      	cmp	r1, #0
 800045c:	d146      	bne.n	80004ec <__udivmoddi4+0x14c>
 800045e:	4573      	cmp	r3, lr
 8000460:	d302      	bcc.n	8000468 <__udivmoddi4+0xc8>
 8000462:	4282      	cmp	r2, r0
 8000464:	f200 8105 	bhi.w	8000672 <__udivmoddi4+0x2d2>
 8000468:	1a84      	subs	r4, r0, r2
 800046a:	eb6e 0203 	sbc.w	r2, lr, r3
 800046e:	2001      	movs	r0, #1
 8000470:	4690      	mov	r8, r2
 8000472:	2d00      	cmp	r5, #0
 8000474:	d0e5      	beq.n	8000442 <__udivmoddi4+0xa2>
 8000476:	e9c5 4800 	strd	r4, r8, [r5]
 800047a:	e7e2      	b.n	8000442 <__udivmoddi4+0xa2>
 800047c:	2a00      	cmp	r2, #0
 800047e:	f000 8090 	beq.w	80005a2 <__udivmoddi4+0x202>
 8000482:	fab2 f682 	clz	r6, r2
 8000486:	2e00      	cmp	r6, #0
 8000488:	f040 80a4 	bne.w	80005d4 <__udivmoddi4+0x234>
 800048c:	1a8a      	subs	r2, r1, r2
 800048e:	0c03      	lsrs	r3, r0, #16
 8000490:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000494:	b280      	uxth	r0, r0
 8000496:	b2bc      	uxth	r4, r7
 8000498:	2101      	movs	r1, #1
 800049a:	fbb2 fcfe 	udiv	ip, r2, lr
 800049e:	fb0e 221c 	mls	r2, lr, ip, r2
 80004a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004a6:	fb04 f20c 	mul.w	r2, r4, ip
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x11e>
 80004ae:	18fb      	adds	r3, r7, r3
 80004b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004b4:	d202      	bcs.n	80004bc <__udivmoddi4+0x11c>
 80004b6:	429a      	cmp	r2, r3
 80004b8:	f200 80e0 	bhi.w	800067c <__udivmoddi4+0x2dc>
 80004bc:	46c4      	mov	ip, r8
 80004be:	1a9b      	subs	r3, r3, r2
 80004c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004cc:	fb02 f404 	mul.w	r4, r2, r4
 80004d0:	429c      	cmp	r4, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x144>
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x142>
 80004dc:	429c      	cmp	r4, r3
 80004de:	f200 80ca 	bhi.w	8000676 <__udivmoddi4+0x2d6>
 80004e2:	4602      	mov	r2, r0
 80004e4:	1b1b      	subs	r3, r3, r4
 80004e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004ea:	e7a5      	b.n	8000438 <__udivmoddi4+0x98>
 80004ec:	f1c1 0620 	rsb	r6, r1, #32
 80004f0:	408b      	lsls	r3, r1
 80004f2:	fa22 f706 	lsr.w	r7, r2, r6
 80004f6:	431f      	orrs	r7, r3
 80004f8:	fa0e f401 	lsl.w	r4, lr, r1
 80004fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000500:	fa2e fe06 	lsr.w	lr, lr, r6
 8000504:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000508:	4323      	orrs	r3, r4
 800050a:	fa00 f801 	lsl.w	r8, r0, r1
 800050e:	fa1f fc87 	uxth.w	ip, r7
 8000512:	fbbe f0f9 	udiv	r0, lr, r9
 8000516:	0c1c      	lsrs	r4, r3, #16
 8000518:	fb09 ee10 	mls	lr, r9, r0, lr
 800051c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000520:	fb00 fe0c 	mul.w	lr, r0, ip
 8000524:	45a6      	cmp	lr, r4
 8000526:	fa02 f201 	lsl.w	r2, r2, r1
 800052a:	d909      	bls.n	8000540 <__udivmoddi4+0x1a0>
 800052c:	193c      	adds	r4, r7, r4
 800052e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000532:	f080 809c 	bcs.w	800066e <__udivmoddi4+0x2ce>
 8000536:	45a6      	cmp	lr, r4
 8000538:	f240 8099 	bls.w	800066e <__udivmoddi4+0x2ce>
 800053c:	3802      	subs	r0, #2
 800053e:	443c      	add	r4, r7
 8000540:	eba4 040e 	sub.w	r4, r4, lr
 8000544:	fa1f fe83 	uxth.w	lr, r3
 8000548:	fbb4 f3f9 	udiv	r3, r4, r9
 800054c:	fb09 4413 	mls	r4, r9, r3, r4
 8000550:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000554:	fb03 fc0c 	mul.w	ip, r3, ip
 8000558:	45a4      	cmp	ip, r4
 800055a:	d908      	bls.n	800056e <__udivmoddi4+0x1ce>
 800055c:	193c      	adds	r4, r7, r4
 800055e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000562:	f080 8082 	bcs.w	800066a <__udivmoddi4+0x2ca>
 8000566:	45a4      	cmp	ip, r4
 8000568:	d97f      	bls.n	800066a <__udivmoddi4+0x2ca>
 800056a:	3b02      	subs	r3, #2
 800056c:	443c      	add	r4, r7
 800056e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000572:	eba4 040c 	sub.w	r4, r4, ip
 8000576:	fba0 ec02 	umull	lr, ip, r0, r2
 800057a:	4564      	cmp	r4, ip
 800057c:	4673      	mov	r3, lr
 800057e:	46e1      	mov	r9, ip
 8000580:	d362      	bcc.n	8000648 <__udivmoddi4+0x2a8>
 8000582:	d05f      	beq.n	8000644 <__udivmoddi4+0x2a4>
 8000584:	b15d      	cbz	r5, 800059e <__udivmoddi4+0x1fe>
 8000586:	ebb8 0203 	subs.w	r2, r8, r3
 800058a:	eb64 0409 	sbc.w	r4, r4, r9
 800058e:	fa04 f606 	lsl.w	r6, r4, r6
 8000592:	fa22 f301 	lsr.w	r3, r2, r1
 8000596:	431e      	orrs	r6, r3
 8000598:	40cc      	lsrs	r4, r1
 800059a:	e9c5 6400 	strd	r6, r4, [r5]
 800059e:	2100      	movs	r1, #0
 80005a0:	e74f      	b.n	8000442 <__udivmoddi4+0xa2>
 80005a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005a6:	0c01      	lsrs	r1, r0, #16
 80005a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005ac:	b280      	uxth	r0, r0
 80005ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005b2:	463b      	mov	r3, r7
 80005b4:	4638      	mov	r0, r7
 80005b6:	463c      	mov	r4, r7
 80005b8:	46b8      	mov	r8, r7
 80005ba:	46be      	mov	lr, r7
 80005bc:	2620      	movs	r6, #32
 80005be:	fbb1 f1f7 	udiv	r1, r1, r7
 80005c2:	eba2 0208 	sub.w	r2, r2, r8
 80005c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ca:	e766      	b.n	800049a <__udivmoddi4+0xfa>
 80005cc:	4601      	mov	r1, r0
 80005ce:	e718      	b.n	8000402 <__udivmoddi4+0x62>
 80005d0:	4610      	mov	r0, r2
 80005d2:	e72c      	b.n	800042e <__udivmoddi4+0x8e>
 80005d4:	f1c6 0220 	rsb	r2, r6, #32
 80005d8:	fa2e f302 	lsr.w	r3, lr, r2
 80005dc:	40b7      	lsls	r7, r6
 80005de:	40b1      	lsls	r1, r6
 80005e0:	fa20 f202 	lsr.w	r2, r0, r2
 80005e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005e8:	430a      	orrs	r2, r1
 80005ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80005ee:	b2bc      	uxth	r4, r7
 80005f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb08 f904 	mul.w	r9, r8, r4
 80005fe:	40b0      	lsls	r0, r6
 8000600:	4589      	cmp	r9, r1
 8000602:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000606:	b280      	uxth	r0, r0
 8000608:	d93e      	bls.n	8000688 <__udivmoddi4+0x2e8>
 800060a:	1879      	adds	r1, r7, r1
 800060c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000610:	d201      	bcs.n	8000616 <__udivmoddi4+0x276>
 8000612:	4589      	cmp	r9, r1
 8000614:	d81f      	bhi.n	8000656 <__udivmoddi4+0x2b6>
 8000616:	eba1 0109 	sub.w	r1, r1, r9
 800061a:	fbb1 f9fe 	udiv	r9, r1, lr
 800061e:	fb09 f804 	mul.w	r8, r9, r4
 8000622:	fb0e 1119 	mls	r1, lr, r9, r1
 8000626:	b292      	uxth	r2, r2
 8000628:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800062c:	4542      	cmp	r2, r8
 800062e:	d229      	bcs.n	8000684 <__udivmoddi4+0x2e4>
 8000630:	18ba      	adds	r2, r7, r2
 8000632:	f109 31ff 	add.w	r1, r9, #4294967295
 8000636:	d2c4      	bcs.n	80005c2 <__udivmoddi4+0x222>
 8000638:	4542      	cmp	r2, r8
 800063a:	d2c2      	bcs.n	80005c2 <__udivmoddi4+0x222>
 800063c:	f1a9 0102 	sub.w	r1, r9, #2
 8000640:	443a      	add	r2, r7
 8000642:	e7be      	b.n	80005c2 <__udivmoddi4+0x222>
 8000644:	45f0      	cmp	r8, lr
 8000646:	d29d      	bcs.n	8000584 <__udivmoddi4+0x1e4>
 8000648:	ebbe 0302 	subs.w	r3, lr, r2
 800064c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000650:	3801      	subs	r0, #1
 8000652:	46e1      	mov	r9, ip
 8000654:	e796      	b.n	8000584 <__udivmoddi4+0x1e4>
 8000656:	eba7 0909 	sub.w	r9, r7, r9
 800065a:	4449      	add	r1, r9
 800065c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000660:	fbb1 f9fe 	udiv	r9, r1, lr
 8000664:	fb09 f804 	mul.w	r8, r9, r4
 8000668:	e7db      	b.n	8000622 <__udivmoddi4+0x282>
 800066a:	4673      	mov	r3, lr
 800066c:	e77f      	b.n	800056e <__udivmoddi4+0x1ce>
 800066e:	4650      	mov	r0, sl
 8000670:	e766      	b.n	8000540 <__udivmoddi4+0x1a0>
 8000672:	4608      	mov	r0, r1
 8000674:	e6fd      	b.n	8000472 <__udivmoddi4+0xd2>
 8000676:	443b      	add	r3, r7
 8000678:	3a02      	subs	r2, #2
 800067a:	e733      	b.n	80004e4 <__udivmoddi4+0x144>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	443b      	add	r3, r7
 8000682:	e71c      	b.n	80004be <__udivmoddi4+0x11e>
 8000684:	4649      	mov	r1, r9
 8000686:	e79c      	b.n	80005c2 <__udivmoddi4+0x222>
 8000688:	eba1 0109 	sub.w	r1, r1, r9
 800068c:	46c4      	mov	ip, r8
 800068e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000692:	fb09 f804 	mul.w	r8, r9, r4
 8000696:	e7c4      	b.n	8000622 <__udivmoddi4+0x282>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 80006a8:	2300      	movs	r3, #0
 80006aa:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	887a      	ldrh	r2, [r7, #2]
 80006b0:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80006c0:	d02c      	beq.n	800071c <arm_cfft_init_f32+0x80>
 80006c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80006c6:	f300 809e 	bgt.w	8000806 <arm_cfft_init_f32+0x16a>
 80006ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006ce:	d032      	beq.n	8000736 <arm_cfft_init_f32+0x9a>
 80006d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006d4:	f300 8097 	bgt.w	8000806 <arm_cfft_init_f32+0x16a>
 80006d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006dc:	d038      	beq.n	8000750 <arm_cfft_init_f32+0xb4>
 80006de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006e2:	f300 8090 	bgt.w	8000806 <arm_cfft_init_f32+0x16a>
 80006e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006ea:	d03e      	beq.n	800076a <arm_cfft_init_f32+0xce>
 80006ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006f0:	f300 8089 	bgt.w	8000806 <arm_cfft_init_f32+0x16a>
 80006f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80006f8:	d044      	beq.n	8000784 <arm_cfft_init_f32+0xe8>
 80006fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80006fe:	f300 8082 	bgt.w	8000806 <arm_cfft_init_f32+0x16a>
 8000702:	2b80      	cmp	r3, #128	@ 0x80
 8000704:	d04b      	beq.n	800079e <arm_cfft_init_f32+0x102>
 8000706:	2b80      	cmp	r3, #128	@ 0x80
 8000708:	dc7d      	bgt.n	8000806 <arm_cfft_init_f32+0x16a>
 800070a:	2b40      	cmp	r3, #64	@ 0x40
 800070c:	d054      	beq.n	80007b8 <arm_cfft_init_f32+0x11c>
 800070e:	2b40      	cmp	r3, #64	@ 0x40
 8000710:	dc79      	bgt.n	8000806 <arm_cfft_init_f32+0x16a>
 8000712:	2b10      	cmp	r3, #16
 8000714:	d06a      	beq.n	80007ec <arm_cfft_init_f32+0x150>
 8000716:	2b20      	cmp	r3, #32
 8000718:	d05b      	beq.n	80007d2 <arm_cfft_init_f32+0x136>
 800071a:	e074      	b.n	8000806 <arm_cfft_init_f32+0x16a>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 800071c:	4b3f      	ldr	r3, [pc, #252]	@ (800081c <arm_cfft_init_f32+0x180>)
 800071e:	899a      	ldrh	r2, [r3, #12]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	819a      	strh	r2, [r3, #12]
 8000724:	4b3d      	ldr	r3, [pc, #244]	@ (800081c <arm_cfft_init_f32+0x180>)
 8000726:	689a      	ldr	r2, [r3, #8]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	4b3b      	ldr	r3, [pc, #236]	@ (800081c <arm_cfft_init_f32+0x180>)
 800072e:	685a      	ldr	r2, [r3, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	605a      	str	r2, [r3, #4]
            break;
 8000734:	e06a      	b.n	800080c <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 8000736:	4b3a      	ldr	r3, [pc, #232]	@ (8000820 <arm_cfft_init_f32+0x184>)
 8000738:	899a      	ldrh	r2, [r3, #12]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	819a      	strh	r2, [r3, #12]
 800073e:	4b38      	ldr	r3, [pc, #224]	@ (8000820 <arm_cfft_init_f32+0x184>)
 8000740:	689a      	ldr	r2, [r3, #8]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	4b36      	ldr	r3, [pc, #216]	@ (8000820 <arm_cfft_init_f32+0x184>)
 8000748:	685a      	ldr	r2, [r3, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	605a      	str	r2, [r3, #4]

            break;
 800074e:	e05d      	b.n	800080c <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 8000750:	4b34      	ldr	r3, [pc, #208]	@ (8000824 <arm_cfft_init_f32+0x188>)
 8000752:	899a      	ldrh	r2, [r3, #12]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	819a      	strh	r2, [r3, #12]
 8000758:	4b32      	ldr	r3, [pc, #200]	@ (8000824 <arm_cfft_init_f32+0x188>)
 800075a:	689a      	ldr	r2, [r3, #8]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	4b30      	ldr	r3, [pc, #192]	@ (8000824 <arm_cfft_init_f32+0x188>)
 8000762:	685a      	ldr	r2, [r3, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	605a      	str	r2, [r3, #4]

            break;
 8000768:	e050      	b.n	800080c <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 800076a:	4b2f      	ldr	r3, [pc, #188]	@ (8000828 <arm_cfft_init_f32+0x18c>)
 800076c:	899a      	ldrh	r2, [r3, #12]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	819a      	strh	r2, [r3, #12]
 8000772:	4b2d      	ldr	r3, [pc, #180]	@ (8000828 <arm_cfft_init_f32+0x18c>)
 8000774:	689a      	ldr	r2, [r3, #8]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	4b2b      	ldr	r3, [pc, #172]	@ (8000828 <arm_cfft_init_f32+0x18c>)
 800077c:	685a      	ldr	r2, [r3, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	605a      	str	r2, [r3, #4]
            break;
 8000782:	e043      	b.n	800080c <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 8000784:	4b29      	ldr	r3, [pc, #164]	@ (800082c <arm_cfft_init_f32+0x190>)
 8000786:	899a      	ldrh	r2, [r3, #12]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	819a      	strh	r2, [r3, #12]
 800078c:	4b27      	ldr	r3, [pc, #156]	@ (800082c <arm_cfft_init_f32+0x190>)
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	4b25      	ldr	r3, [pc, #148]	@ (800082c <arm_cfft_init_f32+0x190>)
 8000796:	685a      	ldr	r2, [r3, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	605a      	str	r2, [r3, #4]
            break;
 800079c:	e036      	b.n	800080c <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 800079e:	4b24      	ldr	r3, [pc, #144]	@ (8000830 <arm_cfft_init_f32+0x194>)
 80007a0:	899a      	ldrh	r2, [r3, #12]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	819a      	strh	r2, [r3, #12]
 80007a6:	4b22      	ldr	r3, [pc, #136]	@ (8000830 <arm_cfft_init_f32+0x194>)
 80007a8:	689a      	ldr	r2, [r3, #8]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	4b20      	ldr	r3, [pc, #128]	@ (8000830 <arm_cfft_init_f32+0x194>)
 80007b0:	685a      	ldr	r2, [r3, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	605a      	str	r2, [r3, #4]
            break;
 80007b6:	e029      	b.n	800080c <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 80007b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000834 <arm_cfft_init_f32+0x198>)
 80007ba:	899a      	ldrh	r2, [r3, #12]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	819a      	strh	r2, [r3, #12]
 80007c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <arm_cfft_init_f32+0x198>)
 80007c2:	689a      	ldr	r2, [r3, #8]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <arm_cfft_init_f32+0x198>)
 80007ca:	685a      	ldr	r2, [r3, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	605a      	str	r2, [r3, #4]
            break;
 80007d0:	e01c      	b.n	800080c <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 80007d2:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <arm_cfft_init_f32+0x19c>)
 80007d4:	899a      	ldrh	r2, [r3, #12]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	819a      	strh	r2, [r3, #12]
 80007da:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <arm_cfft_init_f32+0x19c>)
 80007dc:	689a      	ldr	r2, [r3, #8]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <arm_cfft_init_f32+0x19c>)
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	605a      	str	r2, [r3, #4]
            break;
 80007ea:	e00f      	b.n	800080c <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 80007ec:	4b13      	ldr	r3, [pc, #76]	@ (800083c <arm_cfft_init_f32+0x1a0>)
 80007ee:	899a      	ldrh	r2, [r3, #12]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	819a      	strh	r2, [r3, #12]
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <arm_cfft_init_f32+0x1a0>)
 80007f6:	689a      	ldr	r2, [r3, #8]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <arm_cfft_init_f32+0x1a0>)
 80007fe:	685a      	ldr	r2, [r3, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	605a      	str	r2, [r3, #4]
            break;
 8000804:	e002      	b.n	800080c <arm_cfft_init_f32+0x170>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 8000806:	23ff      	movs	r3, #255	@ 0xff
 8000808:	73fb      	strb	r3, [r7, #15]
            break;
 800080a:	bf00      	nop
        }


        return (status);
 800080c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	0800dfbc 	.word	0x0800dfbc
 8000820:	0800dfec 	.word	0x0800dfec
 8000824:	0800df8c 	.word	0x0800df8c
 8000828:	0800dfcc 	.word	0x0800dfcc
 800082c:	0800dffc 	.word	0x0800dffc
 8000830:	0800dfac 	.word	0x0800dfac
 8000834:	0800df9c 	.word	0x0800df9c
 8000838:	0800e00c 	.word	0x0800e00c
 800083c:	0800dfdc 	.word	0x0800dfdc

08000840 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 8000846:	f004 fc51 	bl	80050ec <HAL_Init>

	SystemClock_Config();				// Configure system clocks
 800084a:	f000 f93b 	bl	8000ac4 <SystemClock_Config>

#ifdef FLIPPED_LCD
	BSP_LCD_Init_Flipped();				// Initialize the LCD for flipped orientation
 800084e:	f003 fb5f 	bl	8003f10 <BSP_LCD_Init_Flipped>
#else
	BSP_LCD_Init();						// Initialize the LCD display
#endif
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8000852:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8000856:	2001      	movs	r0, #1
 8000858:	f003 fbe8 	bl	800402c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 800085c:	2001      	movs	r0, #1
 800085e:	f003 fc49 	bl	80040f4 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8000862:	f003 ff51 	bl	8004708 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000866:	f04f 30ff 	mov.w	r0, #4294967295
 800086a:	f003 fc9f 	bl	80041ac <BSP_LCD_Clear>
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 800086e:	f003 fbc5 	bl	8003ffc <BSP_LCD_GetXSize>
 8000872:	4603      	mov	r3, r0
 8000874:	b29c      	uxth	r4, r3
 8000876:	f003 fbcd 	bl	8004014 <BSP_LCD_GetYSize>
 800087a:	4603      	mov	r3, r0
 800087c:	b29b      	uxth	r3, r3
 800087e:	4619      	mov	r1, r3
 8000880:	4620      	mov	r0, r4
 8000882:	f004 fb2f 	bl	8004ee4 <BSP_TS_Init>
	/* Uncomment next line to enable touchscreen interrupt */
	// BSP_TS_ITConfig();					// Enable Touchscreen interrupt

	PB_init();							// Initialize the user pushbutton
 8000886:	f002 f9f7 	bl	8002c78 <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 800088a:	f002 fa15 	bl	8002cb8 <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 800088e:	2000      	movs	r0, #0
 8000890:	f002 ff28 	bl	80036e4 <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 8000894:	2001      	movs	r0, #1
 8000896:	f002 ff25 	bl	80036e4 <BSP_LED_Init>

	//MENU_draw();						// Draw the menu
	//MENU_hint();						// Show hint at startup

	gyro_disable();						// Disable gyro, use those analog inputs
 800089a:	f000 f991 	bl	8000bc0 <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 800089e:	f000 fb31 	bl	8000f04 <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 80008a2:	f000 fc03 	bl	80010ac <MEAS_timer_init>

	//init_radar();
	MX_GPIO_Init();
 80008a6:	f000 f9eb 	bl	8000c80 <MX_GPIO_Init>
	MX_TIM3_Init();
 80008aa:	f000 fa19 	bl	8000ce0 <MX_TIM3_Init>
	ADC1_IN11_ADC2_IN13_dual_init();
 80008ae:	f001 f881 	bl	80019b4 <ADC1_IN11_ADC2_IN13_dual_init>
	ADC1_IN11_ADC2_IN13_dual_start();
 80008b2:	f001 f929 	bl	8001b08 <ADC1_IN11_ADC2_IN13_dual_start>
	int select_state = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
	int8_t alarmset = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	73fb      	strb	r3, [r7, #15]
	int8_t t = 1;
 80008be:	2301      	movs	r3, #1
 80008c0:	73bb      	strb	r3, [r7, #14]
	static char soll_pin[7] = "1234";
	typedef enum{
		STARTMENU = 0, ARMED, TRIGGERED, SUBMENU, ALARM
	}SYSTEMSTATE;
	SYSTEMSTATE STATE = STARTMENU;
 80008c2:	2300      	movs	r3, #0
 80008c4:	737b      	strb	r3, [r7, #13]
	/* Infinite while loop */
	while (1) {							// Infinitely loop in main function
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 80008c6:	2000      	movs	r0, #0
 80008c8:	f002 ff94 	bl	80037f4 <BSP_LED_Toggle>
		switch (STATE)
 80008cc:	7b7b      	ldrb	r3, [r7, #13]
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	d87d      	bhi.n	80009ce <main+0x18e>
 80008d2:	a201      	add	r2, pc, #4	@ (adr r2, 80008d8 <main+0x98>)
 80008d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d8:	080008ed 	.word	0x080008ed
 80008dc:	08000921 	.word	0x08000921
 80008e0:	08000953 	.word	0x08000953
 80008e4:	080009a3 	.word	0x080009a3
 80008e8:	080009c5 	.word	0x080009c5
		{
		case STARTMENU:
			alarmset = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]
			PWM_Stop();
 80008f0:	f000 fa46 	bl	8000d80 <PWM_Stop>
			select_state = SHOW_STARTMENU();
 80008f4:	f001 fb04 	bl	8001f00 <SHOW_STARTMENU>
 80008f8:	60b8      	str	r0, [r7, #8]
			if(select_state == 1)
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d109      	bne.n	8000914 <main+0xd4>
			{
				STATE = ARMED;
 8000900:	2301      	movs	r3, #1
 8000902:	737b      	strb	r3, [r7, #13]
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000904:	f04f 30ff 	mov.w	r0, #4294967295
 8000908:	f003 fc50 	bl	80041ac <BSP_LCD_Clear>
				start_countdown(10);
 800090c:	200a      	movs	r0, #10
 800090e:	f002 f91b 	bl	8002b48 <start_countdown>
			}
			else if(select_state == 2)
			{
				STATE = SUBMENU;
			}
			break;
 8000912:	e05e      	b.n	80009d2 <main+0x192>
			else if(select_state == 2)
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	2b02      	cmp	r3, #2
 8000918:	d15b      	bne.n	80009d2 <main+0x192>
				STATE = SUBMENU;
 800091a:	2303      	movs	r3, #3
 800091c:	737b      	strb	r3, [r7, #13]
			break;
 800091e:	e058      	b.n	80009d2 <main+0x192>
		case ARMED:
			if(t > 0)
 8000920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000924:	2b00      	cmp	r3, #0
 8000926:	dd03      	ble.n	8000930 <main+0xf0>
				t = update_countdown();
 8000928:	f002 f92a 	bl	8002b80 <update_countdown>
 800092c:	4603      	mov	r3, r0
 800092e:	73bb      	strb	r3, [r7, #14]
			if ((motion != 0)&&(t <= 0))
 8000930:	4b5f      	ldr	r3, [pc, #380]	@ (8000ab0 <main+0x270>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d04e      	beq.n	80009d6 <main+0x196>
 8000938:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800093c:	2b00      	cmp	r3, #0
 800093e:	dc4a      	bgt.n	80009d6 <main+0x196>
			{
				STATE = TRIGGERED;
 8000940:	2302      	movs	r3, #2
 8000942:	737b      	strb	r3, [r7, #13]
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f003 fc30 	bl	80041ac <BSP_LCD_Clear>
				t = 1;
 800094c:	2301      	movs	r3, #1
 800094e:	73bb      	strb	r3, [r7, #14]
			}
			break;
 8000950:	e041      	b.n	80009d6 <main+0x196>
		case TRIGGERED:
		{
			char* entered_pin = SHOW_TRIGGEREDMENU(alarmset);
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fb8f 	bl	8002078 <SHOW_TRIGGEREDMENU>
 800095a:	6038      	str	r0, [r7, #0]
			if(entered_pin != NULL)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d013      	beq.n	800098a <main+0x14a>
			{
				if(strcmp(entered_pin, soll_pin) == 0)
 8000962:	4954      	ldr	r1, [pc, #336]	@ (8000ab4 <main+0x274>)
 8000964:	6838      	ldr	r0, [r7, #0]
 8000966:	f7ff fca3 	bl	80002b0 <strcmp>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d106      	bne.n	800097e <main+0x13e>
				{
					STATE = STARTMENU;
 8000970:	2300      	movs	r3, #0
 8000972:	737b      	strb	r3, [r7, #13]
					BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f003 fc18 	bl	80041ac <BSP_LCD_Clear>
				STATE = ALARM;
				BSP_LCD_Clear(LCD_COLOR_RED);
				PWM_SetFrequency(2000);
				PWM_Start();
			}
			break;
 800097c:	e02e      	b.n	80009dc <main+0x19c>
					STATE = ALARM;
 800097e:	2304      	movs	r3, #4
 8000980:	737b      	strb	r3, [r7, #13]
					BSP_LCD_Clear(LCD_COLOR_RED);
 8000982:	484d      	ldr	r0, [pc, #308]	@ (8000ab8 <main+0x278>)
 8000984:	f003 fc12 	bl	80041ac <BSP_LCD_Clear>
			break;
 8000988:	e028      	b.n	80009dc <main+0x19c>
				STATE = ALARM;
 800098a:	2304      	movs	r3, #4
 800098c:	737b      	strb	r3, [r7, #13]
				BSP_LCD_Clear(LCD_COLOR_RED);
 800098e:	484a      	ldr	r0, [pc, #296]	@ (8000ab8 <main+0x278>)
 8000990:	f003 fc0c 	bl	80041ac <BSP_LCD_Clear>
				PWM_SetFrequency(2000);
 8000994:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000998:	f000 fa00 	bl	8000d9c <PWM_SetFrequency>
				PWM_Start();
 800099c:	f000 f9e6 	bl	8000d6c <PWM_Start>
			break;
 80009a0:	e01c      	b.n	80009dc <main+0x19c>
		}
		case SUBMENU:
			char* new_pin = change_pin();
 80009a2:	f001 fe8d 	bl	80026c0 <change_pin>
 80009a6:	6078      	str	r0, [r7, #4]
			if (new_pin != NULL) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d015      	beq.n	80009da <main+0x19a>
			    strcpy(soll_pin, new_pin);  // ✅ Inhalt in das statische Array kopieren
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	4840      	ldr	r0, [pc, #256]	@ (8000ab4 <main+0x274>)
 80009b2:	f00a f911 	bl	800abd8 <strcpy>
			    STATE = STARTMENU;
 80009b6:	2300      	movs	r3, #0
 80009b8:	737b      	strb	r3, [r7, #13]
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 80009ba:	f04f 30ff 	mov.w	r0, #4294967295
 80009be:	f003 fbf5 	bl	80041ac <BSP_LCD_Clear>
			}
			break;
 80009c2:	e00a      	b.n	80009da <main+0x19a>
		case ALARM:
			alarmset = 1;
 80009c4:	2301      	movs	r3, #1
 80009c6:	73fb      	strb	r3, [r7, #15]
			STATE = TRIGGERED;
 80009c8:	2302      	movs	r3, #2
 80009ca:	737b      	strb	r3, [r7, #13]
			break;
 80009cc:	e006      	b.n	80009dc <main+0x19c>

		default:
			break;
 80009ce:	bf00      	nop
 80009d0:	e004      	b.n	80009dc <main+0x19c>
			break;
 80009d2:	bf00      	nop
 80009d4:	e002      	b.n	80009dc <main+0x19c>
			break;
 80009d6:	bf00      	nop
 80009d8:	e000      	b.n	80009dc <main+0x19c>
			break;
 80009da:	bf00      	nop
		}

		//subsystem_test();

		if (MEAS_data_ready) {			// Show data if new data available
 80009dc:	4b37      	ldr	r3, [pc, #220]	@ (8000abc <main+0x27c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d00b      	beq.n	80009fc <main+0x1bc>
			MEAS_data_ready = false;
 80009e4:	4b35      	ldr	r3, [pc, #212]	@ (8000abc <main+0x27c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]


			//MEAS_show_data();
			motion = fft();
 80009ea:	f001 f8b7 	bl	8001b5c <fft>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4a2f      	ldr	r2, [pc, #188]	@ (8000ab0 <main+0x270>)
 80009f2:	6013      	str	r3, [r2, #0]

			//ADC1_IN11_timer_init();
			//ADC1_IN11_timer_start();
			ADC1_IN11_ADC2_IN13_dual_init();
 80009f4:	f000 ffde 	bl	80019b4 <ADC1_IN11_ADC2_IN13_dual_init>
			ADC1_IN11_ADC2_IN13_dual_start();
 80009f8:	f001 f886 	bl	8001b08 <ADC1_IN11_ADC2_IN13_dual_start>
		}

		if (PB_pressed()) {				// Check if user pushbutton was pressed
 80009fc:	f002 f98e 	bl	8002d1c <PB_pressed>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d01d      	beq.n	8000a42 <main+0x202>
			DAC_active = !DAC_active;	// Toggle DAC on/off
 8000a06:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac0 <main+0x280>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bf14      	ite	ne
 8000a0e:	2301      	movne	r3, #1
 8000a10:	2300      	moveq	r3, #0
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	f083 0301 	eor.w	r3, r3, #1
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	4b27      	ldr	r3, [pc, #156]	@ (8000ac0 <main+0x280>)
 8000a22:	701a      	strb	r2, [r3, #0]
			if (DAC_active) {
 8000a24:	4b26      	ldr	r3, [pc, #152]	@ (8000ac0 <main+0x280>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d005      	beq.n	8000a38 <main+0x1f8>
				DAC_init();
 8000a2c:	f000 fae2 	bl	8000ff4 <DAC_init>
				BSP_LED_On(LED4);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f002 feab 	bl	800378c <BSP_LED_On>
 8000a36:	e004      	b.n	8000a42 <main+0x202>
			} else {
				DAC_reset();
 8000a38:	f000 fac6 	bl	8000fc8 <DAC_reset>
				BSP_LED_Off(LED4);
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f002 febf 	bl	80037c0 <BSP_LED_Off>
			}
		}

		/* Comment next line if touchscreen interrupt is enabled */
		MENU_check_transition();
 8000a42:	f001 f9cd 	bl	8001de0 <MENU_check_transition>

		switch (MENU_get_transition()) {	// Handle user menu choice
 8000a46:	f001 f9b9 	bl	8001dbc <MENU_get_transition>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b06      	cmp	r3, #6
 8000a4e:	d82a      	bhi.n	8000aa6 <main+0x266>
 8000a50:	a201      	add	r2, pc, #4	@ (adr r2, 8000a58 <main+0x218>)
 8000a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a56:	bf00      	nop
 8000a58:	08000a75 	.word	0x08000a75
 8000a5c:	08000aa7 	.word	0x08000aa7
 8000a60:	08000a7f 	.word	0x08000a7f
 8000a64:	08000a89 	.word	0x08000a89
 8000a68:	08000a93 	.word	0x08000a93
 8000a6c:	08000a9d 	.word	0x08000a9d
 8000a70:	08000aa7 	.word	0x08000aa7
		case MENU_ZERO:
			//ADC3_IN4_single_init();
			//ADC3_IN4_single_read();
			//ADC1_IN11_timer_init();
			//ADC1_IN11_timer_start();
			ADC1_IN11_ADC2_IN13_dual_init();
 8000a74:	f000 ff9e 	bl	80019b4 <ADC1_IN11_ADC2_IN13_dual_init>
			ADC1_IN11_ADC2_IN13_dual_start();
 8000a78:	f001 f846 	bl	8001b08 <ADC1_IN11_ADC2_IN13_dual_start>
			break;
 8000a7c:	e014      	b.n	8000aa8 <main+0x268>
		case MENU_ONE:
			//ADC3_IN4_timer_init();
			//ADC3_IN4_timer_start();
			break;
		case MENU_TWO:
			ADC3_IN4_DMA_init();
 8000a7e:	f000 fb4b 	bl	8001118 <ADC3_IN4_DMA_init>
			ADC3_IN4_DMA_start();
 8000a82:	f000 fbd7 	bl	8001234 <ADC3_IN4_DMA_start>
			break;
 8000a86:	e00f      	b.n	8000aa8 <main+0x268>
		case MENU_THREE:
			ADC1_IN13_ADC2_IN5_dual_init();
 8000a88:	f000 fbf6 	bl	8001278 <ADC1_IN13_ADC2_IN5_dual_init>
			ADC1_IN13_ADC2_IN5_dual_start();
 8000a8c:	f000 fc9e 	bl	80013cc <ADC1_IN13_ADC2_IN5_dual_start>
			break;
 8000a90:	e00a      	b.n	8000aa8 <main+0x268>
		case MENU_FOUR:
			ADC2_IN13_IN5_scan_init();
 8000a92:	f000 fcc5 	bl	8001420 <ADC2_IN13_IN5_scan_init>
			ADC2_IN13_IN5_scan_start();
 8000a96:	f000 fd65 	bl	8001564 <ADC2_IN13_IN5_scan_start>
			break;
 8000a9a:	e005      	b.n	8000aa8 <main+0x268>
		case MENU_FIVE:
			ADC3_IN13_IN4_scan_init();
 8000a9c:	f000 fd84 	bl	80015a8 <ADC3_IN13_IN4_scan_init>
			ADC3_IN13_IN4_scan_start();
 8000aa0:	f000 fe24 	bl	80016ec <ADC3_IN13_IN4_scan_start>
			break;
 8000aa4:	e000      	b.n	8000aa8 <main+0x268>
		default:						// Should never occur
			break;
 8000aa6:	bf00      	nop
		}

		HAL_Delay(200);					// Wait or sleep
 8000aa8:	20c8      	movs	r0, #200	@ 0xc8
 8000aaa:	f004 fb99 	bl	80051e0 <HAL_Delay>
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8000aae:	e70a      	b.n	80008c6 <main+0x86>
 8000ab0:	2000015c 	.word	0x2000015c
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	ffff0000 	.word	0xffff0000
 8000abc:	20000160 	.word	0x20000160
 8000ac0:	20000161 	.word	0x20000161

08000ac4 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b0a0      	sub	sp, #128	@ 0x80
 8000ac8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000ace:	2230      	movs	r2, #48	@ 0x30
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f00a f852 	bl	800ab7c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	2230      	movs	r2, #48	@ 0x30
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f00a f843 	bl	800ab7c <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb4 <SystemClock_Config+0xf0>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afe:	4a2d      	ldr	r2, [pc, #180]	@ (8000bb4 <SystemClock_Config+0xf0>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b06:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb4 <SystemClock_Config+0xf0>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b28      	ldr	r3, [pc, #160]	@ (8000bb8 <SystemClock_Config+0xf4>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a27      	ldr	r2, [pc, #156]	@ (8000bb8 <SystemClock_Config+0xf4>)
 8000b1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b20:	6013      	str	r3, [r2, #0]
 8000b22:	4b25      	ldr	r3, [pc, #148]	@ (8000bb8 <SystemClock_Config+0xf4>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b36:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b3c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b40:	66fb      	str	r3, [r7, #108]	@ 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000b42:	2308      	movs	r3, #8
 8000b44:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000b46:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b4a:	677b      	str	r3, [r7, #116]	@ 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b50:	2307      	movs	r3, #7
 8000b52:	67fb      	str	r3, [r7, #124]	@ 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000b54:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f006 fd93 	bl	8007684 <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b5e:	230f      	movs	r3, #15
 8000b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b62:	2302      	movs	r3, #2
 8000b64:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b6a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b74:	64fb      	str	r3, [r7, #76]	@ 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000b76:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000b7a:	2105      	movs	r1, #5
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f006 ffef 	bl	8007b60 <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000b82:	2308      	movs	r3, #8
 8000b84:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b86:	23c0      	movs	r3, #192	@ 0xc0
 8000b88:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000b92:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f007 f9ed 	bl	8007f78 <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	@ (8000bbc <SystemClock_Config+0xf8>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	4a06      	ldr	r2, [pc, #24]	@ (8000bbc <SystemClock_Config+0xf8>)
 8000ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ba8:	6053      	str	r3, [r2, #4]
}
 8000baa:	bf00      	nop
 8000bac:	3780      	adds	r7, #128	@ 0x80
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40007000 	.word	0x40007000
 8000bbc:	40012300 	.word	0x40012300

08000bc0 <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b2a      	ldr	r3, [pc, #168]	@ (8000c74 <gyro_disable+0xb4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a29      	ldr	r2, [pc, #164]	@ (8000c74 <gyro_disable+0xb4>)
 8000bd0:	f043 0304 	orr.w	r3, r3, #4
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b27      	ldr	r3, [pc, #156]	@ (8000c74 <gyro_disable+0xb4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;	// Reset mode for PC1
 8000be2:	4b25      	ldr	r3, [pc, #148]	@ (8000c78 <gyro_disable+0xb8>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a24      	ldr	r2, [pc, #144]	@ (8000c78 <gyro_disable+0xb8>)
 8000be8:	f023 030c 	bic.w	r3, r3, #12
 8000bec:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;	// Set PC1 as output
 8000bee:	4b22      	ldr	r3, [pc, #136]	@ (8000c78 <gyro_disable+0xb8>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a21      	ldr	r2, [pc, #132]	@ (8000c78 <gyro_disable+0xb8>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 8000bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8000c78 <gyro_disable+0xb8>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8000c78 <gyro_disable+0xb8>)
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c04:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 8000c06:	200a      	movs	r0, #10
 8000c08:	f004 faea 	bl	80051e0 <HAL_Delay>
	GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;	// Analog PC1 = ADC123_IN11
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <gyro_disable+0xb8>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a19      	ldr	r2, [pc, #100]	@ (8000c78 <gyro_disable+0xb8>)
 8000c12:	f043 030c 	orr.w	r3, r3, #12
 8000c16:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8000c18:	2300      	movs	r3, #0
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <gyro_disable+0xb4>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c20:	4a14      	ldr	r2, [pc, #80]	@ (8000c74 <gyro_disable+0xb4>)
 8000c22:	f043 0320 	orr.w	r3, r3, #32
 8000c26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c28:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <gyro_disable+0xb4>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2c:	f003 0320 	and.w	r3, r3, #32
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;	// Reset speed of PF8
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <gyro_disable+0xbc>)
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	4a10      	ldr	r2, [pc, #64]	@ (8000c7c <gyro_disable+0xbc>)
 8000c3a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000c3e:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;	// Reset alternate function of PF8
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <gyro_disable+0xbc>)
 8000c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c44:	4a0d      	ldr	r2, [pc, #52]	@ (8000c7c <gyro_disable+0xbc>)
 8000c46:	f023 030f 	bic.w	r3, r3, #15
 8000c4a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;	// Reset pulup/down of PF8
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <gyro_disable+0xbc>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <gyro_disable+0xbc>)
 8000c52:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000c56:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 8000c58:	200a      	movs	r0, #10
 8000c5a:	f004 fac1 	bl	80051e0 <HAL_Delay>
	GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos; // Analog mode PF8 = ADC3_IN4
 8000c5e:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <gyro_disable+0xbc>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a06      	ldr	r2, [pc, #24]	@ (8000c7c <gyro_disable+0xbc>)
 8000c64:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8000c68:	6013      	str	r3, [r2, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40021400 	.word	0x40021400

08000c80 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <MX_GPIO_Init+0x58>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a12      	ldr	r2, [pc, #72]	@ (8000cd8 <MX_GPIO_Init+0x58>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <MX_GPIO_Init+0x58>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_7;  // ← PA7 statt PA6
 8000cb0:	2380      	movs	r3, #128	@ 0x80
 8000cb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;  // ← gleich wie bei PA6
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4804      	ldr	r0, [pc, #16]	@ (8000cdc <MX_GPIO_Init+0x5c>)
 8000cca:	f005 f813 	bl	8005cf4 <HAL_GPIO_Init>
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <MX_TIM3_Init+0x80>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	4a1c      	ldr	r2, [pc, #112]	@ (8000d60 <MX_TIM3_Init+0x80>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <MX_TIM3_Init+0x80>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	615a      	str	r2, [r3, #20]
 8000d12:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000d14:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <MX_TIM3_Init+0x84>)
 8000d16:	4a14      	ldr	r2, [pc, #80]	@ (8000d68 <MX_TIM3_Init+0x88>)
 8000d18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84 - 1;       // 84 MHz / 84 = 1 MHz Timer-Takt
 8000d1a:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <MX_TIM3_Init+0x84>)
 8000d1c:	2253      	movs	r2, #83	@ 0x53
 8000d1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <MX_TIM3_Init+0x84>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500 - 1;         // 2 kHz PWM
 8000d26:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <MX_TIM3_Init+0x84>)
 8000d28:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000d2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d64 <MX_TIM3_Init+0x84>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(&htim3);
 8000d34:	480b      	ldr	r0, [pc, #44]	@ (8000d64 <MX_TIM3_Init+0x84>)
 8000d36:	f008 fa11 	bl	800915c <HAL_TIM_PWM_Init>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d3a:	2360      	movs	r3, #96	@ 0x60
 8000d3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;               // 50 % Duty Cycle
 8000d3e:	23fa      	movs	r3, #250	@ 0xfa
 8000d40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);  // ← CH2!
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4804      	ldr	r0, [pc, #16]	@ (8000d64 <MX_TIM3_Init+0x84>)
 8000d52:	f008 fa77 	bl	8009244 <HAL_TIM_PWM_ConfigChannel>
}
 8000d56:	bf00      	nop
 8000d58:	3720      	adds	r7, #32
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800
 8000d64:	2000011c 	.word	0x2000011c
 8000d68:	40000400 	.word	0x40000400

08000d6c <PWM_Start>:


void PWM_Start(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000d70:	2104      	movs	r1, #4
 8000d72:	4802      	ldr	r0, [pc, #8]	@ (8000d7c <PWM_Start+0x10>)
 8000d74:	f008 fa28 	bl	80091c8 <HAL_TIM_PWM_Start>
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	2000011c 	.word	0x2000011c

08000d80 <PWM_Stop>:

void PWM_Stop(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
	 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);  // Duty = 0% → Ausgang LOW
 8000d84:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <PWM_Stop+0x18>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	2000011c 	.word	0x2000011c

08000d9c <PWM_SetFrequency>:

void PWM_SetFrequency(uint32_t frequency_hz)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	@ 0x30
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t timer_clock = 1000000;  // 1 MHz durch Prescaler
 8000da4:	4b25      	ldr	r3, [pc, #148]	@ (8000e3c <PWM_SetFrequency+0xa0>)
 8000da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t period = timer_clock / frequency_hz;
 8000da8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db0:	62bb      	str	r3, [r7, #40]	@ 0x28

  __HAL_TIM_DISABLE(&htim3);
 8000db2:	4b23      	ldr	r3, [pc, #140]	@ (8000e40 <PWM_SetFrequency+0xa4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6a1a      	ldr	r2, [r3, #32]
 8000db8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10f      	bne.n	8000de2 <PWM_SetFrequency+0x46>
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e40 <PWM_SetFrequency+0xa4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6a1a      	ldr	r2, [r3, #32]
 8000dc8:	f240 4344 	movw	r3, #1092	@ 0x444
 8000dcc:	4013      	ands	r3, r2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d107      	bne.n	8000de2 <PWM_SetFrequency+0x46>
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e40 <PWM_SetFrequency+0xa4>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b19      	ldr	r3, [pc, #100]	@ (8000e40 <PWM_SetFrequency+0xa4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f022 0201 	bic.w	r2, r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
  htim3.Init.Period = period - 1;
 8000de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000de4:	3b01      	subs	r3, #1
 8000de6:	4a16      	ldr	r2, [pc, #88]	@ (8000e40 <PWM_SetFrequency+0xa4>)
 8000de8:	60d3      	str	r3, [r2, #12]
  HAL_TIM_PWM_Init(&htim3);
 8000dea:	4815      	ldr	r0, [pc, #84]	@ (8000e40 <PWM_SetFrequency+0xa4>)
 8000dec:	f008 f9b6 	bl	800915c <HAL_TIM_PWM_Init>

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	615a      	str	r2, [r3, #20]
 8000e02:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e04:	2360      	movs	r3, #96	@ 0x60
 8000e06:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = (period / 2);  // 50%
 8000e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e0a:	085b      	lsrs	r3, r3, #1
 8000e0c:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]

  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);  // ← CH2!
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	2204      	movs	r2, #4
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4808      	ldr	r0, [pc, #32]	@ (8000e40 <PWM_SetFrequency+0xa4>)
 8000e20:	f008 fa10 	bl	8009244 <HAL_TIM_PWM_ConfigChannel>
  __HAL_TIM_ENABLE(&htim3);
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <PWM_SetFrequency+0xa4>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <PWM_SetFrequency+0xa4>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f042 0201 	orr.w	r2, r2, #1
 8000e32:	601a      	str	r2, [r3, #0]
}
 8000e34:	bf00      	nop
 8000e36:	3730      	adds	r7, #48	@ 0x30
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	000f4240 	.word	0x000f4240
 8000e40:	2000011c 	.word	0x2000011c

08000e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db0b      	blt.n	8000e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 021f 	and.w	r2, r3, #31
 8000e5c:	4907      	ldr	r1, [pc, #28]	@ (8000e7c <__NVIC_EnableIRQ+0x38>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	095b      	lsrs	r3, r3, #5
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db12      	blt.n	8000eb8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	490a      	ldr	r1, [pc, #40]	@ (8000ec4 <__NVIC_DisableIRQ+0x44>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	3320      	adds	r3, #32
 8000ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000eac:	f3bf 8f4f 	dsb	sy
}
 8000eb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb2:	f3bf 8f6f 	isb	sy
}
 8000eb6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	db0c      	blt.n	8000ef4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 021f 	and.w	r2, r3, #31
 8000ee0:	4907      	ldr	r1, [pc, #28]	@ (8000f00 <__NVIC_ClearPendingIRQ+0x38>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	2001      	movs	r0, #1
 8000eea:	fa00 f202 	lsl.w	r2, r0, r2
 8000eee:	3360      	adds	r3, #96	@ 0x60
 8000ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb8 <MEAS_GPIO_analog_init+0xb4>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a29      	ldr	r2, [pc, #164]	@ (8000fb8 <MEAS_GPIO_analog_init+0xb4>)
 8000f14:	f043 0320 	orr.w	r3, r3, #32
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b27      	ldr	r3, [pc, #156]	@ (8000fb8 <MEAS_GPIO_analog_init+0xb4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0320 	and.w	r3, r3, #32
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
	GPIOF->MODER |= (3UL << GPIO_MODER_MODER6_Pos);	// Analog PF6 = ADC3_IN4
 8000f26:	4b25      	ldr	r3, [pc, #148]	@ (8000fbc <MEAS_GPIO_analog_init+0xb8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a24      	ldr	r2, [pc, #144]	@ (8000fbc <MEAS_GPIO_analog_init+0xb8>)
 8000f2c:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000f30:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	4b20      	ldr	r3, [pc, #128]	@ (8000fb8 <MEAS_GPIO_analog_init+0xb4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000fb8 <MEAS_GPIO_analog_init+0xb4>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <MEAS_GPIO_analog_init+0xb4>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
	GPIOC->MODER |= (3UL << GPIO_MODER_MODER3_Pos);	// Analog PC3 = ADC123_IN13
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <MEAS_GPIO_analog_init+0xbc>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc0 <MEAS_GPIO_analog_init+0xbc>)
 8000f54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000f58:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <MEAS_GPIO_analog_init+0xb4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a15      	ldr	r2, [pc, #84]	@ (8000fb8 <MEAS_GPIO_analog_init+0xb4>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <MEAS_GPIO_analog_init+0xb4>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (3UL << GPIO_MODER_MODER5_Pos);	// Analog PA5 ADC12_IN5
 8000f76:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <MEAS_GPIO_analog_init+0xc0>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a12      	ldr	r2, [pc, #72]	@ (8000fc4 <MEAS_GPIO_analog_init+0xc0>)
 8000f7c:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000f80:	6013      	str	r3, [r2, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <MEAS_GPIO_analog_init+0xb4>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb8 <MEAS_GPIO_analog_init+0xb4>)
 8000f8c:	f043 0304 	orr.w	r3, r3, #4
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <MEAS_GPIO_analog_init+0xb4>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0304 	and.w	r3, r3, #4
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]
    // Für ADC1_IN14 (PC4) und ADC2_IN15 (PC5)
    GPIOC->MODER |= (3UL << GPIO_MODER_MODER4_Pos) | (3UL << GPIO_MODER_MODER5_Pos);
 8000f9e:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <MEAS_GPIO_analog_init+0xbc>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a07      	ldr	r2, [pc, #28]	@ (8000fc0 <MEAS_GPIO_analog_init+0xbc>)
 8000fa4:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000fa8:	6013      	str	r3, [r2, #0]

}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40021400 	.word	0x40021400
 8000fc0:	40020800 	.word	0x40020800
 8000fc4:	40020000 	.word	0x40020000

08000fc8 <DAC_reset>:
/** ***************************************************************************
 * @brief Resets the DAC
 *
 * when it is no longer used.
 *****************************************************************************/
void DAC_reset(void) {
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
	RCC->APB1RSTR |= RCC_APB1RSTR_DACRST;	// Reset the DAC
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <DAC_reset+0x28>)
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	4a07      	ldr	r2, [pc, #28]	@ (8000ff0 <DAC_reset+0x28>)
 8000fd2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000fd6:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_DACRST;	// Release reset of the DAC
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <DAC_reset+0x28>)
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <DAC_reset+0x28>)
 8000fde:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000fe2:	6213      	str	r3, [r2, #32]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <DAC_init>:
 * The output used is DAC_OUT2 = GPIO PA5
 * @n As DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 * it is possible to monitor the output voltage DAC_OUT2 by the input ADC12_IN5.
 *****************************************************************************/
void DAC_init(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
	__HAL_RCC_DAC_CLK_ENABLE();			// Enable Clock for DAC
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <DAC_init+0x3c>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	4a0b      	ldr	r2, [pc, #44]	@ (8001030 <DAC_init+0x3c>)
 8001004:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001008:	6413      	str	r3, [r2, #64]	@ 0x40
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <DAC_init+0x3c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
	DAC->CR |= DAC_CR_EN2;				// Enable DAC output 2
 8001016:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <DAC_init+0x40>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a06      	ldr	r2, [pc, #24]	@ (8001034 <DAC_init+0x40>)
 800101c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001020:	6013      	str	r3, [r2, #0]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	40007400 	.word	0x40007400

08001038 <DAC_increment>:

/** ***************************************************************************
 * @brief Increment the DAC value and write it to the output
 *
 *****************************************************************************/
void DAC_increment(void) {
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
	DAC_sample += 20;				// Increment DAC output
 800103c:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <DAC_increment+0x30>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3314      	adds	r3, #20
 8001042:	4a09      	ldr	r2, [pc, #36]	@ (8001068 <DAC_increment+0x30>)
 8001044:	6013      	str	r3, [r2, #0]
	if (DAC_sample >= (1UL << ADC_DAC_RES)) { DAC_sample = 0; }	// Go to 0
 8001046:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <DAC_increment+0x30>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800104e:	d302      	bcc.n	8001056 <DAC_increment+0x1e>
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <DAC_increment+0x30>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
	DAC->DHR12R2 = DAC_sample;		// Write new DAC output value
 8001056:	4a05      	ldr	r2, [pc, #20]	@ (800106c <DAC_increment+0x34>)
 8001058:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <DAC_increment+0x30>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6153      	str	r3, [r2, #20]
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	20000568 	.word	0x20000568
 800106c:	40007400 	.word	0x40007400

08001070 <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 8001074:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <ADC_reset+0x38>)
 8001076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001078:	4a0b      	ldr	r2, [pc, #44]	@ (80010a8 <ADC_reset+0x38>)
 800107a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800107e:	6253      	str	r3, [r2, #36]	@ 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 8001080:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <ADC_reset+0x38>)
 8001082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001084:	4a08      	ldr	r2, [pc, #32]	@ (80010a8 <ADC_reset+0x38>)
 8001086:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800108a:	6253      	str	r3, [r2, #36]	@ 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 800108c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001096:	f023 0301 	bic.w	r3, r3, #1
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <MEAS_timer_init+0x68>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	4a16      	ldr	r2, [pc, #88]	@ (8001114 <MEAS_timer_init+0x68>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c2:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <MEAS_timer_init+0x68>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 80010ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010d2:	f240 628f 	movw	r2, #1679	@ 0x68f
 80010d6:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 80010d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010dc:	2209      	movs	r2, #9
 80010de:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 80010e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010ea:	f043 0320 	orr.w	r3, r3, #32
 80010ee:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 80010f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 8001100:	201c      	movs	r0, #28
 8001102:	f7ff fee1 	bl	8000ec8 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 8001106:	201c      	movs	r0, #28
 8001108:	f7ff fe9c 	bl	8000e44 <__NVIC_EnableIRQ>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40023800 	.word	0x40023800

08001118 <ADC3_IN4_DMA_init>:
 * to memory without CPU intervention.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input is ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN4_DMA_init(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
	MEAS_input_count = 1;				// Only 1 input is converted
 800111e:	4b3e      	ldr	r3, [pc, #248]	@ (8001218 <ADC3_IN4_DMA_init+0x100>)
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	4b3c      	ldr	r3, [pc, #240]	@ (800121c <ADC3_IN4_DMA_init+0x104>)
 800112a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112c:	4a3b      	ldr	r2, [pc, #236]	@ (800121c <ADC3_IN4_DMA_init+0x104>)
 800112e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001132:	6453      	str	r3, [r2, #68]	@ 0x44
 8001134:	4b39      	ldr	r3, [pc, #228]	@ (800121c <ADC3_IN4_DMA_init+0x104>)
 8001136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ1_Pos);	// Input 4 = first conversion
 8001140:	4b37      	ldr	r3, [pc, #220]	@ (8001220 <ADC3_IN4_DMA_init+0x108>)
 8001142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001144:	4a36      	ldr	r2, [pc, #216]	@ (8001220 <ADC3_IN4_DMA_init+0x108>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 800114c:	4b34      	ldr	r3, [pc, #208]	@ (8001220 <ADC3_IN4_DMA_init+0x108>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	4a33      	ldr	r2, [pc, #204]	@ (8001220 <ADC3_IN4_DMA_init+0x108>)
 8001152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001156:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001158:	4b31      	ldr	r3, [pc, #196]	@ (8001220 <ADC3_IN4_DMA_init+0x108>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	4a30      	ldr	r2, [pc, #192]	@ (8001220 <ADC3_IN4_DMA_init+0x108>)
 800115e:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8001162:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001164:	4b2e      	ldr	r3, [pc, #184]	@ (8001220 <ADC3_IN4_DMA_init+0x108>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	4a2d      	ldr	r2, [pc, #180]	@ (8001220 <ADC3_IN4_DMA_init+0x108>)
 800116a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800116e:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001170:	2300      	movs	r3, #0
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	4b29      	ldr	r3, [pc, #164]	@ (800121c <ADC3_IN4_DMA_init+0x104>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001178:	4a28      	ldr	r2, [pc, #160]	@ (800121c <ADC3_IN4_DMA_init+0x104>)
 800117a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800117e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001180:	4b26      	ldr	r3, [pc, #152]	@ (800121c <ADC3_IN4_DMA_init+0x104>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001184:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 800118c:	4b25      	ldr	r3, [pc, #148]	@ (8001224 <ADC3_IN4_DMA_init+0x10c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a24      	ldr	r2, [pc, #144]	@ (8001224 <ADC3_IN4_DMA_init+0x10c>)
 8001192:	f023 0301 	bic.w	r3, r3, #1
 8001196:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001198:	bf00      	nop
 800119a:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <ADC3_IN4_DMA_init+0x10c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f9      	bne.n	800119a <ADC3_IN4_DMA_init+0x82>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 80011a6:	4b20      	ldr	r3, [pc, #128]	@ (8001228 <ADC3_IN4_DMA_init+0x110>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001228 <ADC3_IN4_DMA_init+0x110>)
 80011ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011b0:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 80011b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <ADC3_IN4_DMA_init+0x10c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001224 <ADC3_IN4_DMA_init+0x10c>)
 80011b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011bc:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 80011be:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <ADC3_IN4_DMA_init+0x10c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a18      	ldr	r2, [pc, #96]	@ (8001224 <ADC3_IN4_DMA_init+0x10c>)
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c8:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <ADC3_IN4_DMA_init+0x10c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a15      	ldr	r2, [pc, #84]	@ (8001224 <ADC3_IN4_DMA_init+0x10c>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d4:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 80011d6:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <ADC3_IN4_DMA_init+0x10c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <ADC3_IN4_DMA_init+0x10c>)
 80011dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011e0:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 80011e2:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <ADC3_IN4_DMA_init+0x10c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001224 <ADC3_IN4_DMA_init+0x10c>)
 80011e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ec:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 80011ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <ADC3_IN4_DMA_init+0x10c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001224 <ADC3_IN4_DMA_init+0x10c>)
 80011f4:	f043 0310 	orr.w	r3, r3, #16
 80011f8:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = ADC_NUMS;		// Number of data items to transfer
 80011fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <ADC3_IN4_DMA_init+0x10c>)
 80011fc:	2280      	movs	r2, #128	@ 0x80
 80011fe:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 8001200:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <ADC3_IN4_DMA_init+0x10c>)
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <ADC3_IN4_DMA_init+0x114>)
 8001204:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <ADC3_IN4_DMA_init+0x10c>)
 8001208:	4a09      	ldr	r2, [pc, #36]	@ (8001230 <ADC3_IN4_DMA_init+0x118>)
 800120a:	60da      	str	r2, [r3, #12]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	20000008 	.word	0x20000008
 800121c:	40023800 	.word	0x40023800
 8001220:	40012200 	.word	0x40012200
 8001224:	40026428 	.word	0x40026428
 8001228:	40026400 	.word	0x40026400
 800122c:	4001224c 	.word	0x4001224c
 8001230:	20000168 	.word	0x20000168

08001234 <ADC3_IN4_DMA_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_IN4_DMA_start(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 8001238:	4b0d      	ldr	r3, [pc, #52]	@ (8001270 <ADC3_IN4_DMA_start+0x3c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0c      	ldr	r2, [pc, #48]	@ (8001270 <ADC3_IN4_DMA_start+0x3c>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 8001244:	2039      	movs	r0, #57	@ 0x39
 8001246:	f7ff fe3f 	bl	8000ec8 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 800124a:	2039      	movs	r0, #57	@ 0x39
 800124c:	f7ff fdfa 	bl	8000e44 <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <ADC3_IN4_DMA_start+0x40>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4a07      	ldr	r2, [pc, #28]	@ (8001274 <ADC3_IN4_DMA_start+0x40>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 800125c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40026428 	.word	0x40026428
 8001274:	40012200 	.word	0x40012200

08001278 <ADC1_IN13_ADC2_IN5_dual_init>:
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input used with ADC1 is ADC123_IN13 = GPIO PC3
 * @n The input used with ADC2 is ADC12_IN5 = GPIO PA5
 *****************************************************************************/
void ADC1_IN13_ADC2_IN5_dual_init(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 800127e:	4b4a      	ldr	r3, [pc, #296]	@ (80013a8 <ADC1_IN13_ADC2_IN5_dual_init+0x130>)
 8001280:	2202      	movs	r2, #2
 8001282:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC1_CLK_ENABLE();		// Enable Clock for ADC1
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	4b48      	ldr	r3, [pc, #288]	@ (80013ac <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 800128a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128c:	4a47      	ldr	r2, [pc, #284]	@ (80013ac <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 800128e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001292:	6453      	str	r3, [r2, #68]	@ 0x44
 8001294:	4b45      	ldr	r3, [pc, #276]	@ (80013ac <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8001296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	4b41      	ldr	r3, [pc, #260]	@ (80013ac <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 80012a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a8:	4a40      	ldr	r2, [pc, #256]	@ (80013ac <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 80012aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80012b0:	4b3e      	ldr	r3, [pc, #248]	@ (80013ac <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 80012b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
	ADC->CCR |= ADC_CCR_DMA_1;			// Enable DMA mode 2 = dual DMA
 80012bc:	4b3c      	ldr	r3, [pc, #240]	@ (80013b0 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4a3b      	ldr	r2, [pc, #236]	@ (80013b0 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 80012c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012c6:	6053      	str	r3, [r2, #4]
	ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2 simultan.
 80012c8:	4b39      	ldr	r3, [pc, #228]	@ (80013b0 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a38      	ldr	r2, [pc, #224]	@ (80013b0 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 80012ce:	f043 0306 	orr.w	r3, r3, #6
 80012d2:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 80012d4:	4b37      	ldr	r3, [pc, #220]	@ (80013b4 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	4a36      	ldr	r2, [pc, #216]	@ (80013b4 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 80012da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012de:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 80012e0:	4b34      	ldr	r3, [pc, #208]	@ (80013b4 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	4a33      	ldr	r2, [pc, #204]	@ (80013b4 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 80012e6:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 80012ea:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 80012ec:	4b31      	ldr	r3, [pc, #196]	@ (80013b4 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 80012ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012f0:	4a30      	ldr	r2, [pc, #192]	@ (80013b4 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 80012f2:	f043 030d 	orr.w	r3, r3, #13
 80012f6:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->SQR3 |= (5UL << ADC_SQR3_SQ1_Pos);	// Input 5 = first conversion
 80012f8:	4b2f      	ldr	r3, [pc, #188]	@ (80013b8 <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 80012fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012fc:	4a2e      	ldr	r2, [pc, #184]	@ (80013b8 <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 80012fe:	f043 0305 	orr.w	r3, r3, #5
 8001302:	6353      	str	r3, [r2, #52]	@ 0x34
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130c:	4a27      	ldr	r2, [pc, #156]	@ (80013ac <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 800130e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001312:	6313      	str	r3, [r2, #48]	@ 0x30
 8001314:	4b25      	ldr	r3, [pc, #148]	@ (80013ac <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001318:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	687b      	ldr	r3, [r7, #4]
	DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 4
 8001320:	4b26      	ldr	r3, [pc, #152]	@ (80013bc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a25      	ldr	r2, [pc, #148]	@ (80013bc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001326:	f023 0301 	bic.w	r3, r3, #1
 800132a:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 800132c:	bf00      	nop
 800132e:	4b23      	ldr	r3, [pc, #140]	@ (80013bc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f9      	bne.n	800132e <ADC1_IN13_ADC2_IN5_dual_init+0xb6>
	DMA2->HIFCR |= DMA_HIFCR_CTCIF4;	// Clear transfer complete interrupt fl.
 800133a:	4b21      	ldr	r3, [pc, #132]	@ (80013c0 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	4a20      	ldr	r2, [pc, #128]	@ (80013c0 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001340:	f043 0320 	orr.w	r3, r3, #32
 8001344:	60d3      	str	r3, [r2, #12]
	DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);	// Select channel 0
 8001346:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001348:	4a1c      	ldr	r2, [pc, #112]	@ (80013bc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PL_1;		// Priority high
 800134e:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a1a      	ldr	r2, [pc, #104]	@ (80013bc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001358:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 800135a:	4b18      	ldr	r3, [pc, #96]	@ (80013bc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a17      	ldr	r2, [pc, #92]	@ (80013bc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001364:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001366:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a14      	ldr	r2, [pc, #80]	@ (80013bc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 800136c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001370:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001372:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a11      	ldr	r2, [pc, #68]	@ (80013bc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001378:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800137c:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 800137e:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a0e      	ldr	r2, [pc, #56]	@ (80013bc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001384:	f043 0310 	orr.w	r3, r3, #16
 8001388:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->NDTR = ADC_NUMS;		// Number of data items to transfer
 800138a:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 800138c:	2280      	movs	r2, #128	@ 0x80
 800138e:	605a      	str	r2, [r3, #4]
	DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;	// Peripheral register address
 8001390:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001392:	4a0c      	ldr	r2, [pc, #48]	@ (80013c4 <ADC1_IN13_ADC2_IN5_dual_init+0x14c>)
 8001394:	609a      	str	r2, [r3, #8]
	DMA2_Stream4->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001396:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001398:	4a0b      	ldr	r2, [pc, #44]	@ (80013c8 <ADC1_IN13_ADC2_IN5_dual_init+0x150>)
 800139a:	60da      	str	r2, [r3, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	20000008 	.word	0x20000008
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40012300 	.word	0x40012300
 80013b4:	40012000 	.word	0x40012000
 80013b8:	40012100 	.word	0x40012100
 80013bc:	40026470 	.word	0x40026470
 80013c0:	40026400 	.word	0x40026400
 80013c4:	40012308 	.word	0x40012308
 80013c8:	20000168 	.word	0x20000168

080013cc <ADC1_IN13_ADC2_IN5_dual_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC1_IN13_ADC2_IN5_dual_start(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	DMA2_Stream4->CR |= DMA_SxCR_EN;	// Enable DMA
 80013d0:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <ADC1_IN13_ADC2_IN5_dual_start+0x48>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001414 <ADC1_IN13_ADC2_IN5_dual_start+0x48>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);	// Clear pending DMA interrupt
 80013dc:	203c      	movs	r0, #60	@ 0x3c
 80013de:	f7ff fd73 	bl	8000ec8 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);	// Enable DMA interrupt in the NVIC
 80013e2:	203c      	movs	r0, #60	@ 0x3c
 80013e4:	f7ff fd2e 	bl	8000e44 <__NVIC_EnableIRQ>
	ADC1->CR2 |= ADC_CR2_ADON;			// Enable ADC1
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <ADC1_IN13_ADC2_IN5_dual_start+0x4c>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <ADC1_IN13_ADC2_IN5_dual_start+0x4c>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 80013f4:	4b09      	ldr	r3, [pc, #36]	@ (800141c <ADC1_IN13_ADC2_IN5_dual_start+0x50>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	4a08      	ldr	r2, [pc, #32]	@ (800141c <ADC1_IN13_ADC2_IN5_dual_start+0x50>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001400:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40026470 	.word	0x40026470
 8001418:	40012000 	.word	0x40012000
 800141c:	40012100 	.word	0x40012100

08001420 <ADC2_IN13_IN5_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC12_IN5 = GPIO PA5
 *****************************************************************************/
void ADC2_IN13_IN5_scan_init(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 8001426:	4b48      	ldr	r3, [pc, #288]	@ (8001548 <ADC2_IN13_IN5_scan_init+0x128>)
 8001428:	2202      	movs	r2, #2
 800142a:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	4b46      	ldr	r3, [pc, #280]	@ (800154c <ADC2_IN13_IN5_scan_init+0x12c>)
 8001432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001434:	4a45      	ldr	r2, [pc, #276]	@ (800154c <ADC2_IN13_IN5_scan_init+0x12c>)
 8001436:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800143a:	6453      	str	r3, [r2, #68]	@ 0x44
 800143c:	4b43      	ldr	r3, [pc, #268]	@ (800154c <ADC2_IN13_IN5_scan_init+0x12c>)
 800143e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001440:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
	ADC2->SQR1 |= (1UL << ADC_SQR1_L_Pos);			// Convert 2 inputs
 8001448:	4b41      	ldr	r3, [pc, #260]	@ (8001550 <ADC2_IN13_IN5_scan_init+0x130>)
 800144a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144c:	4a40      	ldr	r2, [pc, #256]	@ (8001550 <ADC2_IN13_IN5_scan_init+0x130>)
 800144e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001452:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC2->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8001454:	4b3e      	ldr	r3, [pc, #248]	@ (8001550 <ADC2_IN13_IN5_scan_init+0x130>)
 8001456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001458:	4a3d      	ldr	r2, [pc, #244]	@ (8001550 <ADC2_IN13_IN5_scan_init+0x130>)
 800145a:	f043 030d 	orr.w	r3, r3, #13
 800145e:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->SQR3 |= (5UL << ADC_SQR3_SQ2_Pos);	// Input 5 = second conversion
 8001460:	4b3b      	ldr	r3, [pc, #236]	@ (8001550 <ADC2_IN13_IN5_scan_init+0x130>)
 8001462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001464:	4a3a      	ldr	r2, [pc, #232]	@ (8001550 <ADC2_IN13_IN5_scan_init+0x130>)
 8001466:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800146a:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 800146c:	4b38      	ldr	r3, [pc, #224]	@ (8001550 <ADC2_IN13_IN5_scan_init+0x130>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a37      	ldr	r2, [pc, #220]	@ (8001550 <ADC2_IN13_IN5_scan_init+0x130>)
 8001472:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001476:	6053      	str	r3, [r2, #4]
	ADC2->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001478:	4b35      	ldr	r3, [pc, #212]	@ (8001550 <ADC2_IN13_IN5_scan_init+0x130>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	4a34      	ldr	r2, [pc, #208]	@ (8001550 <ADC2_IN13_IN5_scan_init+0x130>)
 800147e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001482:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001484:	4b32      	ldr	r3, [pc, #200]	@ (8001550 <ADC2_IN13_IN5_scan_init+0x130>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	4a31      	ldr	r2, [pc, #196]	@ (8001550 <ADC2_IN13_IN5_scan_init+0x130>)
 800148a:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 800148e:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001490:	4b2f      	ldr	r3, [pc, #188]	@ (8001550 <ADC2_IN13_IN5_scan_init+0x130>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	4a2e      	ldr	r2, [pc, #184]	@ (8001550 <ADC2_IN13_IN5_scan_init+0x130>)
 8001496:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800149a:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 800149c:	2300      	movs	r3, #0
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	4b2a      	ldr	r3, [pc, #168]	@ (800154c <ADC2_IN13_IN5_scan_init+0x12c>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a4:	4a29      	ldr	r2, [pc, #164]	@ (800154c <ADC2_IN13_IN5_scan_init+0x12c>)
 80014a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ac:	4b27      	ldr	r3, [pc, #156]	@ (800154c <ADC2_IN13_IN5_scan_init+0x12c>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 3
 80014b8:	4b26      	ldr	r3, [pc, #152]	@ (8001554 <ADC2_IN13_IN5_scan_init+0x134>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a25      	ldr	r2, [pc, #148]	@ (8001554 <ADC2_IN13_IN5_scan_init+0x134>)
 80014be:	f023 0301 	bic.w	r3, r3, #1
 80014c2:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80014c4:	bf00      	nop
 80014c6:	4b23      	ldr	r3, [pc, #140]	@ (8001554 <ADC2_IN13_IN5_scan_init+0x134>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f9      	bne.n	80014c6 <ADC2_IN13_IN5_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF3;	// Clear transfer complete interrupt fl.
 80014d2:	4b21      	ldr	r3, [pc, #132]	@ (8001558 <ADC2_IN13_IN5_scan_init+0x138>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	4a20      	ldr	r2, [pc, #128]	@ (8001558 <ADC2_IN13_IN5_scan_init+0x138>)
 80014d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014dc:	6093      	str	r3, [r2, #8]
	DMA2_Stream3->CR |= (1UL << DMA_SxCR_CHSEL_Pos);	// Select channel 1
 80014de:	4b1d      	ldr	r3, [pc, #116]	@ (8001554 <ADC2_IN13_IN5_scan_init+0x134>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001554 <ADC2_IN13_IN5_scan_init+0x134>)
 80014e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014e8:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_PL_1;		// Priority high
 80014ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <ADC2_IN13_IN5_scan_init+0x134>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a19      	ldr	r2, [pc, #100]	@ (8001554 <ADC2_IN13_IN5_scan_init+0x134>)
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014f4:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 80014f6:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <ADC2_IN13_IN5_scan_init+0x134>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a16      	ldr	r2, [pc, #88]	@ (8001554 <ADC2_IN13_IN5_scan_init+0x134>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001500:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001502:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <ADC2_IN13_IN5_scan_init+0x134>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a13      	ldr	r2, [pc, #76]	@ (8001554 <ADC2_IN13_IN5_scan_init+0x134>)
 8001508:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800150c:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <ADC2_IN13_IN5_scan_init+0x134>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a10      	ldr	r2, [pc, #64]	@ (8001554 <ADC2_IN13_IN5_scan_init+0x134>)
 8001514:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001518:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <ADC2_IN13_IN5_scan_init+0x134>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a0d      	ldr	r2, [pc, #52]	@ (8001554 <ADC2_IN13_IN5_scan_init+0x134>)
 8001520:	f043 0310 	orr.w	r3, r3, #16
 8001524:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 8001526:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <ADC2_IN13_IN5_scan_init+0x134>)
 8001528:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800152c:	605a      	str	r2, [r3, #4]
	DMA2_Stream3->PAR = (uint32_t)&ADC2->DR;	// Peripheral register address
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <ADC2_IN13_IN5_scan_init+0x134>)
 8001530:	4a0a      	ldr	r2, [pc, #40]	@ (800155c <ADC2_IN13_IN5_scan_init+0x13c>)
 8001532:	609a      	str	r2, [r3, #8]
	DMA2_Stream3->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001534:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <ADC2_IN13_IN5_scan_init+0x134>)
 8001536:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <ADC2_IN13_IN5_scan_init+0x140>)
 8001538:	60da      	str	r2, [r3, #12]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008
 800154c:	40023800 	.word	0x40023800
 8001550:	40012100 	.word	0x40012100
 8001554:	40026458 	.word	0x40026458
 8001558:	40026400 	.word	0x40026400
 800155c:	4001214c 	.word	0x4001214c
 8001560:	20000168 	.word	0x20000168

08001564 <ADC2_IN13_IN5_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC2_IN13_IN5_scan_start(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	DMA2_Stream3->CR |= DMA_SxCR_EN;	// Enable DMA
 8001568:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <ADC2_IN13_IN5_scan_start+0x3c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0c      	ldr	r2, [pc, #48]	@ (80015a0 <ADC2_IN13_IN5_scan_start+0x3c>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);	// Clear pending DMA interrupt
 8001574:	203b      	movs	r0, #59	@ 0x3b
 8001576:	f7ff fca7 	bl	8000ec8 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream3_IRQn);	// Enable DMA interrupt in the NVIC
 800157a:	203b      	movs	r0, #59	@ 0x3b
 800157c:	f7ff fc62 	bl	8000e44 <__NVIC_EnableIRQ>
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 8001580:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <ADC2_IN13_IN5_scan_start+0x40>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	4a07      	ldr	r2, [pc, #28]	@ (80015a4 <ADC2_IN13_IN5_scan_start+0x40>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 800158c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40026458 	.word	0x40026458
 80015a4:	40012100 	.word	0x40012100

080015a8 <ADC3_IN13_IN4_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN13_IN4_scan_init(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 80015ae:	4b48      	ldr	r3, [pc, #288]	@ (80016d0 <ADC3_IN13_IN4_scan_init+0x128>)
 80015b0:	2202      	movs	r2, #2
 80015b2:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	4b46      	ldr	r3, [pc, #280]	@ (80016d4 <ADC3_IN13_IN4_scan_init+0x12c>)
 80015ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015bc:	4a45      	ldr	r2, [pc, #276]	@ (80016d4 <ADC3_IN13_IN4_scan_init+0x12c>)
 80015be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80015c4:	4b43      	ldr	r3, [pc, #268]	@ (80016d4 <ADC3_IN13_IN4_scan_init+0x12c>)
 80015c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR1 |= (1UL << ADC_SQR1_L_Pos);		// Convert 2 inputs
 80015d0:	4b41      	ldr	r3, [pc, #260]	@ (80016d8 <ADC3_IN13_IN4_scan_init+0x130>)
 80015d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d4:	4a40      	ldr	r2, [pc, #256]	@ (80016d8 <ADC3_IN13_IN4_scan_init+0x130>)
 80015d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80015da:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC3->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 80015dc:	4b3e      	ldr	r3, [pc, #248]	@ (80016d8 <ADC3_IN13_IN4_scan_init+0x130>)
 80015de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015e0:	4a3d      	ldr	r2, [pc, #244]	@ (80016d8 <ADC3_IN13_IN4_scan_init+0x130>)
 80015e2:	f043 030d 	orr.w	r3, r3, #13
 80015e6:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ2_Pos);	// Input 4 = second conversion
 80015e8:	4b3b      	ldr	r3, [pc, #236]	@ (80016d8 <ADC3_IN13_IN4_scan_init+0x130>)
 80015ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015ec:	4a3a      	ldr	r2, [pc, #232]	@ (80016d8 <ADC3_IN13_IN4_scan_init+0x130>)
 80015ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015f2:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 80015f4:	4b38      	ldr	r3, [pc, #224]	@ (80016d8 <ADC3_IN13_IN4_scan_init+0x130>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4a37      	ldr	r2, [pc, #220]	@ (80016d8 <ADC3_IN13_IN4_scan_init+0x130>)
 80015fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015fe:	6053      	str	r3, [r2, #4]
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001600:	4b35      	ldr	r3, [pc, #212]	@ (80016d8 <ADC3_IN13_IN4_scan_init+0x130>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	4a34      	ldr	r2, [pc, #208]	@ (80016d8 <ADC3_IN13_IN4_scan_init+0x130>)
 8001606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800160a:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 800160c:	4b32      	ldr	r3, [pc, #200]	@ (80016d8 <ADC3_IN13_IN4_scan_init+0x130>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	4a31      	ldr	r2, [pc, #196]	@ (80016d8 <ADC3_IN13_IN4_scan_init+0x130>)
 8001612:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8001616:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001618:	4b2f      	ldr	r3, [pc, #188]	@ (80016d8 <ADC3_IN13_IN4_scan_init+0x130>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	4a2e      	ldr	r2, [pc, #184]	@ (80016d8 <ADC3_IN13_IN4_scan_init+0x130>)
 800161e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001622:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001624:	2300      	movs	r3, #0
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	4b2a      	ldr	r3, [pc, #168]	@ (80016d4 <ADC3_IN13_IN4_scan_init+0x12c>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162c:	4a29      	ldr	r2, [pc, #164]	@ (80016d4 <ADC3_IN13_IN4_scan_init+0x12c>)
 800162e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001632:	6313      	str	r3, [r2, #48]	@ 0x30
 8001634:	4b27      	ldr	r3, [pc, #156]	@ (80016d4 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001638:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 8001640:	4b26      	ldr	r3, [pc, #152]	@ (80016dc <ADC3_IN13_IN4_scan_init+0x134>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a25      	ldr	r2, [pc, #148]	@ (80016dc <ADC3_IN13_IN4_scan_init+0x134>)
 8001646:	f023 0301 	bic.w	r3, r3, #1
 800164a:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 800164c:	bf00      	nop
 800164e:	4b23      	ldr	r3, [pc, #140]	@ (80016dc <ADC3_IN13_IN4_scan_init+0x134>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f9      	bne.n	800164e <ADC3_IN13_IN4_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 800165a:	4b21      	ldr	r3, [pc, #132]	@ (80016e0 <ADC3_IN13_IN4_scan_init+0x138>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	4a20      	ldr	r2, [pc, #128]	@ (80016e0 <ADC3_IN13_IN4_scan_init+0x138>)
 8001660:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001664:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 8001666:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <ADC3_IN13_IN4_scan_init+0x134>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a1c      	ldr	r2, [pc, #112]	@ (80016dc <ADC3_IN13_IN4_scan_init+0x134>)
 800166c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001670:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 8001672:	4b1a      	ldr	r3, [pc, #104]	@ (80016dc <ADC3_IN13_IN4_scan_init+0x134>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a19      	ldr	r2, [pc, #100]	@ (80016dc <ADC3_IN13_IN4_scan_init+0x134>)
 8001678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800167c:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 800167e:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <ADC3_IN13_IN4_scan_init+0x134>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a16      	ldr	r2, [pc, #88]	@ (80016dc <ADC3_IN13_IN4_scan_init+0x134>)
 8001684:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001688:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 800168a:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <ADC3_IN13_IN4_scan_init+0x134>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a13      	ldr	r2, [pc, #76]	@ (80016dc <ADC3_IN13_IN4_scan_init+0x134>)
 8001690:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001694:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001696:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <ADC3_IN13_IN4_scan_init+0x134>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a10      	ldr	r2, [pc, #64]	@ (80016dc <ADC3_IN13_IN4_scan_init+0x134>)
 800169c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016a0:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <ADC3_IN13_IN4_scan_init+0x134>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a0d      	ldr	r2, [pc, #52]	@ (80016dc <ADC3_IN13_IN4_scan_init+0x134>)
 80016a8:	f043 0310 	orr.w	r3, r3, #16
 80016ac:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 80016ae:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <ADC3_IN13_IN4_scan_init+0x134>)
 80016b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016b4:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <ADC3_IN13_IN4_scan_init+0x134>)
 80016b8:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <ADC3_IN13_IN4_scan_init+0x13c>)
 80016ba:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 80016bc:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <ADC3_IN13_IN4_scan_init+0x134>)
 80016be:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <ADC3_IN13_IN4_scan_init+0x140>)
 80016c0:	60da      	str	r2, [r3, #12]

}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000008 	.word	0x20000008
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40012200 	.word	0x40012200
 80016dc:	40026428 	.word	0x40026428
 80016e0:	40026400 	.word	0x40026400
 80016e4:	4001224c 	.word	0x4001224c
 80016e8:	20000168 	.word	0x20000168

080016ec <ADC3_IN13_IN4_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_IN13_IN4_scan_start(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 80016f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <ADC3_IN13_IN4_scan_start+0x3c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001728 <ADC3_IN13_IN4_scan_start+0x3c>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 80016fc:	2039      	movs	r0, #57	@ 0x39
 80016fe:	f7ff fbe3 	bl	8000ec8 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 8001702:	2039      	movs	r0, #57	@ 0x39
 8001704:	f7ff fb9e 	bl	8000e44 <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8001708:	4b08      	ldr	r3, [pc, #32]	@ (800172c <ADC3_IN13_IN4_scan_start+0x40>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	4a07      	ldr	r2, [pc, #28]	@ (800172c <ADC3_IN13_IN4_scan_start+0x40>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001714:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40026428 	.word	0x40026428
 800172c:	40012200 	.word	0x40012200

08001730 <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 8001734:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800173e:	f023 0301 	bic.w	r3, r3, #1
 8001742:	6113      	str	r3, [r2, #16]
	if (DAC_active) {
 8001744:	4b03      	ldr	r3, [pc, #12]	@ (8001754 <TIM2_IRQHandler+0x24>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <TIM2_IRQHandler+0x20>
		DAC_increment();
 800174c:	f7ff fc74 	bl	8001038 <DAC_increment>
	}
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000161 	.word	0x20000161

08001758 <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 800175c:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <ADC_IRQHandler+0x58>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 8001768:	4911      	ldr	r1, [pc, #68]	@ (80017b0 <ADC_IRQHandler+0x58>)
 800176a:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <ADC_IRQHandler+0x5c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	4810      	ldr	r0, [pc, #64]	@ (80017b4 <ADC_IRQHandler+0x5c>)
 8001772:	6002      	str	r2, [r0, #0]
 8001774:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001776:	4910      	ldr	r1, [pc, #64]	@ (80017b8 <ADC_IRQHandler+0x60>)
 8001778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 800177c:	4b0d      	ldr	r3, [pc, #52]	@ (80017b4 <ADC_IRQHandler+0x5c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b7f      	cmp	r3, #127	@ 0x7f
 8001782:	d912      	bls.n	80017aa <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 8001784:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <ADC_IRQHandler+0x58>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a05      	ldr	r2, [pc, #20]	@ (80017b0 <ADC_IRQHandler+0x58>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	6093      	str	r3, [r2, #8]
			ADC_reset();
 80017a0:	f7ff fc66 	bl	8001070 <ADC_reset>
			MEAS_data_ready = true;
 80017a4:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <ADC_IRQHandler+0x64>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
		}

	}
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40012200 	.word	0x40012200
 80017b4:	20000164 	.word	0x20000164
 80017b8:	20000168 	.word	0x20000168
 80017bc:	20000160 	.word	0x20000160

080017c0 <DMA2_Stream1_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF1) {	// Stream1 transfer compl. interrupt f.
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <DMA2_Stream1_IRQHandler+0x78>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d031      	beq.n	8001834 <DMA2_Stream1_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream1_IRQn);	// Disable DMA interrupt in the NVIC
 80017d0:	2039      	movs	r0, #57	@ 0x39
 80017d2:	f7ff fb55 	bl	8000e80 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);// Clear pending DMA interrupt
 80017d6:	2039      	movs	r0, #57	@ 0x39
 80017d8:	f7ff fb76 	bl	8000ec8 <__NVIC_ClearPendingIRQ>
		DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 80017dc:	4b17      	ldr	r3, [pc, #92]	@ (800183c <DMA2_Stream1_IRQHandler+0x7c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a16      	ldr	r2, [pc, #88]	@ (800183c <DMA2_Stream1_IRQHandler+0x7c>)
 80017e2:	f023 0301 	bic.w	r3, r3, #1
 80017e6:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80017e8:	bf00      	nop
 80017ea:	4b14      	ldr	r3, [pc, #80]	@ (800183c <DMA2_Stream1_IRQHandler+0x7c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f9      	bne.n	80017ea <DMA2_Stream1_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF1;// Clear transfer complete interrupt fl.
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <DMA2_Stream1_IRQHandler+0x78>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001838 <DMA2_Stream1_IRQHandler+0x78>)
 80017fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001800:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001802:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	6013      	str	r3, [r2, #0]
		ADC3->CR2 &= ~ADC_CR2_ADON;		// Disable ADC3
 8001812:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <DMA2_Stream1_IRQHandler+0x80>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <DMA2_Stream1_IRQHandler+0x80>)
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	6093      	str	r3, [r2, #8]
		ADC3->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 800181e:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <DMA2_Stream1_IRQHandler+0x80>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	4a07      	ldr	r2, [pc, #28]	@ (8001840 <DMA2_Stream1_IRQHandler+0x80>)
 8001824:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001828:	6093      	str	r3, [r2, #8]
		ADC_reset();
 800182a:	f7ff fc21 	bl	8001070 <ADC_reset>
		MEAS_data_ready = true;
 800182e:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <DMA2_Stream1_IRQHandler+0x84>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
	}
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40026400 	.word	0x40026400
 800183c:	40026428 	.word	0x40026428
 8001840:	40012200 	.word	0x40012200
 8001844:	20000160 	.word	0x20000160

08001848 <DMA2_Stream3_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream3_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF3) {	// Stream3 transfer compl. interrupt f.
 800184c:	4b1c      	ldr	r3, [pc, #112]	@ (80018c0 <DMA2_Stream3_IRQHandler+0x78>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d031      	beq.n	80018bc <DMA2_Stream3_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream3_IRQn);	// Disable DMA interrupt in the NVIC
 8001858:	203b      	movs	r0, #59	@ 0x3b
 800185a:	f7ff fb11 	bl	8000e80 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);// Clear pending DMA interrupt
 800185e:	203b      	movs	r0, #59	@ 0x3b
 8001860:	f7ff fb32 	bl	8000ec8 <__NVIC_ClearPendingIRQ>
		DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8001864:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <DMA2_Stream3_IRQHandler+0x7c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a16      	ldr	r2, [pc, #88]	@ (80018c4 <DMA2_Stream3_IRQHandler+0x7c>)
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001870:	bf00      	nop
 8001872:	4b14      	ldr	r3, [pc, #80]	@ (80018c4 <DMA2_Stream3_IRQHandler+0x7c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f9      	bne.n	8001872 <DMA2_Stream3_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF3;// Clear transfer complete interrupt fl.
 800187e:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <DMA2_Stream3_IRQHandler+0x78>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	4a0f      	ldr	r2, [pc, #60]	@ (80018c0 <DMA2_Stream3_IRQHandler+0x78>)
 8001884:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001888:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 800188a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001894:	f023 0301 	bic.w	r3, r3, #1
 8001898:	6013      	str	r3, [r2, #0]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 800189a:	4b0b      	ldr	r3, [pc, #44]	@ (80018c8 <DMA2_Stream3_IRQHandler+0x80>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <DMA2_Stream3_IRQHandler+0x80>)
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 80018a6:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <DMA2_Stream3_IRQHandler+0x80>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	4a07      	ldr	r2, [pc, #28]	@ (80018c8 <DMA2_Stream3_IRQHandler+0x80>)
 80018ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018b0:	6093      	str	r3, [r2, #8]
		ADC_reset();
 80018b2:	f7ff fbdd 	bl	8001070 <ADC_reset>
		MEAS_data_ready = true;
 80018b6:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <DMA2_Stream3_IRQHandler+0x84>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	701a      	strb	r2, [r3, #0]
	}
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40026400 	.word	0x40026400
 80018c4:	40026458 	.word	0x40026458
 80018c8:	40012100 	.word	0x40012100
 80018cc:	20000160 	.word	0x20000160

080018d0 <DMA2_Stream4_IRQHandler>:
 * @note In dual ADC mode two values are combined (packed) in a single uint32_t
 * ADC_CDR[31:0] = ADC2_DR[15:0] | ADC1_DR[15:0]
 * and are therefore extracted before further processing.
 *****************************************************************************/
void DMA2_Stream4_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
	if (DMA2->HISR & DMA_HISR_TCIF4) {	// Stream4 transfer compl. interrupt f.
 80018d6:	4b30      	ldr	r3, [pc, #192]	@ (8001998 <DMA2_Stream4_IRQHandler+0xc8>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0320 	and.w	r3, r3, #32
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d055      	beq.n	800198e <DMA2_Stream4_IRQHandler+0xbe>
		NVIC_DisableIRQ(DMA2_Stream4_IRQn);	// Disable DMA interrupt in the NVIC
 80018e2:	203c      	movs	r0, #60	@ 0x3c
 80018e4:	f7ff facc 	bl	8000e80 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);// Clear pending DMA interrupt
 80018e8:	203c      	movs	r0, #60	@ 0x3c
 80018ea:	f7ff faed 	bl	8000ec8 <__NVIC_ClearPendingIRQ>
		DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 80018ee:	4b2b      	ldr	r3, [pc, #172]	@ (800199c <DMA2_Stream4_IRQHandler+0xcc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a2a      	ldr	r2, [pc, #168]	@ (800199c <DMA2_Stream4_IRQHandler+0xcc>)
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80018fa:	bf00      	nop
 80018fc:	4b27      	ldr	r3, [pc, #156]	@ (800199c <DMA2_Stream4_IRQHandler+0xcc>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f9      	bne.n	80018fc <DMA2_Stream4_IRQHandler+0x2c>
		DMA2->HIFCR |= DMA_HIFCR_CTCIF4;// Clear transfer complete interrupt fl.
 8001908:	4b23      	ldr	r3, [pc, #140]	@ (8001998 <DMA2_Stream4_IRQHandler+0xc8>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	4a22      	ldr	r2, [pc, #136]	@ (8001998 <DMA2_Stream4_IRQHandler+0xc8>)
 800190e:	f043 0320 	orr.w	r3, r3, #32
 8001912:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001914:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	6013      	str	r3, [r2, #0]
		ADC1->CR2 &= ~ADC_CR2_ADON;		// Disable ADC1
 8001924:	4b1e      	ldr	r3, [pc, #120]	@ (80019a0 <DMA2_Stream4_IRQHandler+0xd0>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	4a1d      	ldr	r2, [pc, #116]	@ (80019a0 <DMA2_Stream4_IRQHandler+0xd0>)
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 8001930:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <DMA2_Stream4_IRQHandler+0xd4>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a1b      	ldr	r2, [pc, #108]	@ (80019a4 <DMA2_Stream4_IRQHandler+0xd4>)
 8001936:	f023 0301 	bic.w	r3, r3, #1
 800193a:	6093      	str	r3, [r2, #8]
		ADC->CCR &= ~ADC_CCR_DMA_1;		// Disable DMA mode
 800193c:	4b1a      	ldr	r3, [pc, #104]	@ (80019a8 <DMA2_Stream4_IRQHandler+0xd8>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4a19      	ldr	r2, [pc, #100]	@ (80019a8 <DMA2_Stream4_IRQHandler+0xd8>)
 8001942:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001946:	6053      	str	r3, [r2, #4]
		/* Extract combined samples */
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 8001948:	237f      	movs	r3, #127	@ 0x7f
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	e017      	b.n	800197e <DMA2_Stream4_IRQHandler+0xae>
			ADC_samples[2*i+1] = (ADC_samples[i] >> 16);
 800194e:	4a17      	ldr	r2, [pc, #92]	@ (80019ac <DMA2_Stream4_IRQHandler+0xdc>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	3301      	adds	r3, #1
 800195c:	0c12      	lsrs	r2, r2, #16
 800195e:	4913      	ldr	r1, [pc, #76]	@ (80019ac <DMA2_Stream4_IRQHandler+0xdc>)
 8001960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_samples[2*i]   = (ADC_samples[i] & 0xffff);
 8001964:	4a11      	ldr	r2, [pc, #68]	@ (80019ac <DMA2_Stream4_IRQHandler+0xdc>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	b292      	uxth	r2, r2
 8001972:	490e      	ldr	r1, [pc, #56]	@ (80019ac <DMA2_Stream4_IRQHandler+0xdc>)
 8001974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	dae4      	bge.n	800194e <DMA2_Stream4_IRQHandler+0x7e>
		}
		ADC_reset();
 8001984:	f7ff fb74 	bl	8001070 <ADC_reset>
		MEAS_data_ready = true;
 8001988:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <DMA2_Stream4_IRQHandler+0xe0>)
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
	}
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40026400 	.word	0x40026400
 800199c:	40026470 	.word	0x40026470
 80019a0:	40012000 	.word	0x40012000
 80019a4:	40012100 	.word	0x40012100
 80019a8:	40012300 	.word	0x40012300
 80019ac:	20000168 	.word	0x20000168
 80019b0:	20000160 	.word	0x20000160

080019b4 <ADC1_IN11_ADC2_IN13_dual_init>:
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
}


void ADC1_IN11_ADC2_IN13_dual_init(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0

    MEAS_input_count = 2;                // 2 inputs are converted
 80019ba:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae4 <ADC1_IN11_ADC2_IN13_dual_init+0x130>)
 80019bc:	2202      	movs	r2, #2
 80019be:	601a      	str	r2, [r3, #0]
    __HAL_RCC_ADC1_CLK_ENABLE();        // Enable Clock for ADC1
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	4b48      	ldr	r3, [pc, #288]	@ (8001ae8 <ADC1_IN11_ADC2_IN13_dual_init+0x134>)
 80019c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c8:	4a47      	ldr	r2, [pc, #284]	@ (8001ae8 <ADC1_IN11_ADC2_IN13_dual_init+0x134>)
 80019ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80019d0:	4b45      	ldr	r3, [pc, #276]	@ (8001ae8 <ADC1_IN11_ADC2_IN13_dual_init+0x134>)
 80019d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_ADC2_CLK_ENABLE();        // Enable Clock for ADC2
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	4b41      	ldr	r3, [pc, #260]	@ (8001ae8 <ADC1_IN11_ADC2_IN13_dual_init+0x134>)
 80019e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e4:	4a40      	ldr	r2, [pc, #256]	@ (8001ae8 <ADC1_IN11_ADC2_IN13_dual_init+0x134>)
 80019e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ec:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae8 <ADC1_IN11_ADC2_IN13_dual_init+0x134>)
 80019ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]

    // Common ADC configuration
    ADC->CCR |= ADC_CCR_DMA_1;            // Enable DMA mode 2 = dual DMA
 80019f8:	4b3c      	ldr	r3, [pc, #240]	@ (8001aec <ADC1_IN11_ADC2_IN13_dual_init+0x138>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	4a3b      	ldr	r2, [pc, #236]	@ (8001aec <ADC1_IN11_ADC2_IN13_dual_init+0x138>)
 80019fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a02:	6053      	str	r3, [r2, #4]
    ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2 simultaneous
 8001a04:	4b39      	ldr	r3, [pc, #228]	@ (8001aec <ADC1_IN11_ADC2_IN13_dual_init+0x138>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4a38      	ldr	r2, [pc, #224]	@ (8001aec <ADC1_IN11_ADC2_IN13_dual_init+0x138>)
 8001a0a:	f043 0306 	orr.w	r3, r3, #6
 8001a0e:	6053      	str	r3, [r2, #4]

    // ADC1 configuration
    ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);    // Enable external trigger on rising edge
 8001a10:	4b37      	ldr	r3, [pc, #220]	@ (8001af0 <ADC1_IN11_ADC2_IN13_dual_init+0x13c>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a36      	ldr	r2, [pc, #216]	@ (8001af0 <ADC1_IN11_ADC2_IN13_dual_init+0x13c>)
 8001a16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a1a:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);   // Timer 2 TRGO event
 8001a1c:	4b34      	ldr	r3, [pc, #208]	@ (8001af0 <ADC1_IN11_ADC2_IN13_dual_init+0x13c>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4a33      	ldr	r2, [pc, #204]	@ (8001af0 <ADC1_IN11_ADC2_IN13_dual_init+0x13c>)
 8001a22:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8001a26:	6093      	str	r3, [r2, #8]
    ADC1->SQR3 |= (14UL << ADC_SQR3_SQ1_Pos);   // Input 14 = first conversion (changed from 13)
 8001a28:	4b31      	ldr	r3, [pc, #196]	@ (8001af0 <ADC1_IN11_ADC2_IN13_dual_init+0x13c>)
 8001a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a2c:	4a30      	ldr	r2, [pc, #192]	@ (8001af0 <ADC1_IN11_ADC2_IN13_dual_init+0x13c>)
 8001a2e:	f043 030e 	orr.w	r3, r3, #14
 8001a32:	6353      	str	r3, [r2, #52]	@ 0x34

    // ADC2 configuration
    ADC2->SQR3 |= (15UL << ADC_SQR3_SQ1_Pos);   // Input 15 = first conversion (changed from 5)
 8001a34:	4b2f      	ldr	r3, [pc, #188]	@ (8001af4 <ADC1_IN11_ADC2_IN13_dual_init+0x140>)
 8001a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a38:	4a2e      	ldr	r2, [pc, #184]	@ (8001af4 <ADC1_IN11_ADC2_IN13_dual_init+0x140>)
 8001a3a:	f043 030f 	orr.w	r3, r3, #15
 8001a3e:	6353      	str	r3, [r2, #52]	@ 0x34

    // DMA configuration
    __HAL_RCC_DMA2_CLK_ENABLE();        // Enable Clock for DMA2
 8001a40:	2300      	movs	r3, #0
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	4b28      	ldr	r3, [pc, #160]	@ (8001ae8 <ADC1_IN11_ADC2_IN13_dual_init+0x134>)
 8001a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a48:	4a27      	ldr	r2, [pc, #156]	@ (8001ae8 <ADC1_IN11_ADC2_IN13_dual_init+0x134>)
 8001a4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a50:	4b25      	ldr	r3, [pc, #148]	@ (8001ae8 <ADC1_IN11_ADC2_IN13_dual_init+0x134>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
    DMA2_Stream4->CR &= ~DMA_SxCR_EN;    // Disable the DMA stream 4
 8001a5c:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a25      	ldr	r2, [pc, #148]	@ (8001af8 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a62:	f023 0301 	bic.w	r3, r3, #1
 8001a66:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }    // Wait for DMA to finish
 8001a68:	bf00      	nop
 8001a6a:	4b23      	ldr	r3, [pc, #140]	@ (8001af8 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f9      	bne.n	8001a6a <ADC1_IN11_ADC2_IN13_dual_init+0xb6>

    DMA2->HIFCR |= DMA_HIFCR_CTCIF4;    // Clear transfer complete interrupt flag
 8001a76:	4b21      	ldr	r3, [pc, #132]	@ (8001afc <ADC1_IN11_ADC2_IN13_dual_init+0x148>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	4a20      	ldr	r2, [pc, #128]	@ (8001afc <ADC1_IN11_ADC2_IN13_dual_init+0x148>)
 8001a7c:	f043 0320 	orr.w	r3, r3, #32
 8001a80:	60d3      	str	r3, [r2, #12]
    DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);    // Select channel 0
 8001a82:	4b1d      	ldr	r3, [pc, #116]	@ (8001af8 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a84:	4a1c      	ldr	r2, [pc, #112]	@ (8001af8 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_PL_1;        // Priority high
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001af8 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8001af8 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a94:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;    // Memory data size = 32 bit
 8001a96:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a17      	ldr	r2, [pc, #92]	@ (8001af8 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aa0:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;    // Peripheral data size = 32 bit
 8001aa2:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a14      	ldr	r2, [pc, #80]	@ (8001af8 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001aa8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001aac:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_MINC;        // Increment memory address pointer
 8001aae:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a11      	ldr	r2, [pc, #68]	@ (8001af8 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001ab4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ab8:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_TCIE;        // Transfer complete interrupt enable
 8001aba:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a0e      	ldr	r2, [pc, #56]	@ (8001af8 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001ac0:	f043 0310 	orr.w	r3, r3, #16
 8001ac4:	6013      	str	r3, [r2, #0]

    DMA2_Stream4->NDTR = ADC_NUMS;        // Number of data items to transfer
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001ac8:	2280      	movs	r2, #128	@ 0x80
 8001aca:	605a      	str	r2, [r3, #4]
    DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;    // Peripheral register address
 8001acc:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001ace:	4a0c      	ldr	r2, [pc, #48]	@ (8001b00 <ADC1_IN11_ADC2_IN13_dual_init+0x14c>)
 8001ad0:	609a      	str	r2, [r3, #8]
    DMA2_Stream4->M0AR = (uint32_t)ADC_samples;    // Buffer memory location address
 8001ad2:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001ad4:	4a0b      	ldr	r2, [pc, #44]	@ (8001b04 <ADC1_IN11_ADC2_IN13_dual_init+0x150>)
 8001ad6:	60da      	str	r2, [r3, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40012300 	.word	0x40012300
 8001af0:	40012000 	.word	0x40012000
 8001af4:	40012100 	.word	0x40012100
 8001af8:	40026470 	.word	0x40026470
 8001afc:	40026400 	.word	0x40026400
 8001b00:	40012308 	.word	0x40012308
 8001b04:	20000168 	.word	0x20000168

08001b08 <ADC1_IN11_ADC2_IN13_dual_start>:



void ADC1_IN11_ADC2_IN13_dual_start(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
    DMA2_Stream4->CR |= DMA_SxCR_EN;          // DMA-Stream aktivieren
 8001b0c:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <ADC1_IN11_ADC2_IN13_dual_start+0x48>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0f      	ldr	r2, [pc, #60]	@ (8001b50 <ADC1_IN11_ADC2_IN13_dual_start+0x48>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6013      	str	r3, [r2, #0]
    NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);  // Ausstehende DMA-Interrupts löschen
 8001b18:	203c      	movs	r0, #60	@ 0x3c
 8001b1a:	f7ff f9d5 	bl	8000ec8 <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(DMA2_Stream4_IRQn);        // DMA-Interrupt im NVIC aktivieren
 8001b1e:	203c      	movs	r0, #60	@ 0x3c
 8001b20:	f7ff f990 	bl	8000e44 <__NVIC_EnableIRQ>

    ADC1->CR2 |= ADC_CR2_ADON;                // ADC1 einschalten
 8001b24:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <ADC1_IN11_ADC2_IN13_dual_start+0x4c>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <ADC1_IN11_ADC2_IN13_dual_start+0x4c>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6093      	str	r3, [r2, #8]
    ADC2->CR2 |= ADC_CR2_ADON;                // ADC2 einschalten
 8001b30:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <ADC1_IN11_ADC2_IN13_dual_start+0x50>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4a08      	ldr	r2, [pc, #32]	@ (8001b58 <ADC1_IN11_ADC2_IN13_dual_start+0x50>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6093      	str	r3, [r2, #8]

    TIM2->CR1 |= TIM_CR1_CEN;                 // Timer starten
 8001b3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40026470 	.word	0x40026470
 8001b54:	40012000 	.word	0x40012000
 8001b58:	40012100 	.word	0x40012100

08001b5c <fft>:

uint32_t fft(void)
{
 8001b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b60:	b09b      	sub	sp, #108	@ 0x6c
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	466b      	mov	r3, sp
 8001b66:	607b      	str	r3, [r7, #4]
	uint32_t fftSize = ADC_NUMS;
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	657b      	str	r3, [r7, #84]	@ 0x54

	float32_t in[2*fftSize];
 8001b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b6e:	005e      	lsls	r6, r3, #1
 8001b70:	4633      	mov	r3, r6
 8001b72:	3b01      	subs	r3, #1
 8001b74:	653b      	str	r3, [r7, #80]	@ 0x50
 8001b76:	2300      	movs	r3, #0
 8001b78:	46b2      	mov	sl, r6
 8001b7a:	469b      	mov	fp, r3
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001b88:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001b8c:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001b90:	2300      	movs	r3, #0
 8001b92:	46b0      	mov	r8, r6
 8001b94:	4699      	mov	r9, r3
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001ba2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001ba6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001baa:	00b3      	lsls	r3, r6, #2
 8001bac:	3307      	adds	r3, #7
 8001bae:	08db      	lsrs	r3, r3, #3
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	ebad 0d03 	sub.w	sp, sp, r3
 8001bb6:	466b      	mov	r3, sp
 8001bb8:	3303      	adds	r3, #3
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
	float32_t out[fftSize];
 8001bc0:	6d7e      	ldr	r6, [r7, #84]	@ 0x54
 8001bc2:	4633      	mov	r3, r6
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bc8:	2300      	movs	r3, #0
 8001bca:	4634      	mov	r4, r6
 8001bcc:	461d      	mov	r5, r3
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	016b      	lsls	r3, r5, #5
 8001bd8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001bdc:	0162      	lsls	r2, r4, #5
 8001bde:	2300      	movs	r3, #0
 8001be0:	4630      	mov	r0, r6
 8001be2:	4619      	mov	r1, r3
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	014b      	lsls	r3, r1, #5
 8001bee:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bf2:	0142      	lsls	r2, r0, #5
 8001bf4:	00b3      	lsls	r3, r6, #2
 8001bf6:	3307      	adds	r3, #7
 8001bf8:	08db      	lsrs	r3, r3, #3
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	ebad 0d03 	sub.w	sp, sp, r3
 8001c00:	466b      	mov	r3, sp
 8001c02:	3303      	adds	r3, #3
 8001c04:	089b      	lsrs	r3, r3, #2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	647b      	str	r3, [r7, #68]	@ 0x44
	float32_t avg = 0;
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	667b      	str	r3, [r7, #100]	@ 0x64

	for (uint32_t i = 0; i < ADC_NUMS*2; i++)
 8001c10:	2300      	movs	r3, #0
 8001c12:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c14:	e010      	b.n	8001c38 <fft+0xdc>
	{
		//Q_in[i] = (float32_t) ADC_samples[2*i];
		//I_in[i] = (float32_t) ADC_samples[2*i+1];

		avg += ADC_samples[i];
 8001c16:	4a65      	ldr	r2, [pc, #404]	@ (8001dac <fft+0x250>)
 8001c18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	ee07 3a90 	vmov	s15, r3
 8001c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c26:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2e:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	for (uint32_t i = 0; i < ADC_NUMS*2; i++)
 8001c32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c34:	3301      	adds	r3, #1
 8001c36:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c3a:	2bff      	cmp	r3, #255	@ 0xff
 8001c3c:	d9eb      	bls.n	8001c16 <fft+0xba>
	}
	avg /= (ADC_NUMS*2);
 8001c3e:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001c42:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001db0 <fft+0x254>
 8001c46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c4a:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	for (uint32_t i = 0; i < ADC_NUMS*2; i++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c52:	e01f      	b.n	8001c94 <fft+0x138>
	{
		if(i >=  ADC_NUMS*2)
 8001c54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c56:	2bff      	cmp	r3, #255	@ 0xff
 8001c58:	d907      	bls.n	8001c6a <fft+0x10e>
		{
			in[i] = 0;
 8001c5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e011      	b.n	8001c8e <fft+0x132>
		}
		else
		{
			in[i] = (float32_t) (ADC_samples[i] - avg);
 8001c6a:	4a50      	ldr	r2, [pc, #320]	@ (8001dac <fft+0x250>)
 8001c6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c72:	ee07 3a90 	vmov	s15, r3
 8001c76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c7a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001c7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t i = 0; i < ADC_NUMS*2; i++)
 8001c8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c90:	3301      	adds	r3, #1
 8001c92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c96:	2bff      	cmp	r3, #255	@ 0xff
 8001c98:	d9dc      	bls.n	8001c54 <fft+0xf8>
		//in[i] = 1;
	}



	uint32_t ifftFlag = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	643b      	str	r3, [r7, #64]	@ 0x40
	uint32_t doBitReverse = 1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	arm_cfft_instance_f32 varInstCfftF32;
	/* Reference index at which max energy of bin ocuurs */
	uint32_t refIndex = 213, testIndex = 0;
 8001ca2:	23d5      	movs	r3, #213	@ 0xd5
 8001ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
	* Max magnitude FFT Bin test
	* ------------------------------------------------------------------- */

	arm_status status;
	float32_t maxValue;
	status = ARM_MATH_SUCCESS;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	status=arm_cfft_init_f32(&varInstCfftF32,fftSize);
 8001cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	f107 0320 	add.w	r3, r7, #32
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fcee 	bl	800069c <arm_cfft_init_f32>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	/* Process the data through the CFFT/CIFFT module */
	arm_cfft_f32(&varInstCfftF32, in, ifftFlag, doBitReverse);
 8001cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	f107 0020 	add.w	r0, r7, #32
 8001cd2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001cd4:	f008 fac8 	bl	800a268 <arm_cfft_f32>
	/* Process the data through the Complex Magnitude Module for
	calculating the magnitude at each bin */
	arm_cmplx_mag_f32(in, out, fftSize);
 8001cd8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001cda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001cdc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001cde:	f008 fb3d 	bl	800a35c <arm_cmplx_mag_f32>
	/* Calculates maxValue and returns corresponding BIN value */
	arm_max_f32(out, fftSize, &maxValue, &testIndex);
 8001ce2:	f107 031c 	add.w	r3, r7, #28
 8001ce6:	f107 0218 	add.w	r2, r7, #24
 8001cea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001cec:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001cee:	f007 ff25 	bl	8009b3c <arm_max_f32>
	status = (testIndex != refIndex) ? ARM_MATH_TEST_FAILURE : ARM_MATH_SUCCESS;
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d002      	beq.n	8001d00 <fft+0x1a4>
 8001cfa:	f06f 0305 	mvn.w	r3, #5
 8001cfe:	e000      	b.n	8001d02 <fft+0x1a6>
 8001d00:	2300      	movs	r3, #0
 8001d02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (status != ARM_MATH_SUCCESS)
	{
	  //while(1);
	}

	float df = ADC_FS / fftSize;
 8001d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d10:	ee07 3a90 	vmov	s15, r3
 8001d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d18:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	int32_t f_dominant = 0;//df * testIndex;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	65bb      	str	r3, [r7, #88]	@ 0x58

	BSP_LCD_SetFont(&Font24);
 8001d20:	4824      	ldr	r0, [pc, #144]	@ (8001db4 <fft+0x258>)
 8001d22:	f002 fa29 	bl	8004178 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001d26:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2a:	f002 fa0b 	bl	8004144 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001d2e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001d32:	f002 f9ef 	bl	8004114 <BSP_LCD_SetTextColor>
	char text[16];

	if(maxValue < 1000)
 8001d36:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d3a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001db8 <fft+0x25c>
 8001d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	d502      	bpl.n	8001d4e <fft+0x1f2>
	{
		f_dominant = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d4c:	e025      	b.n	8001d9a <fft+0x23e>
	}
	else if(testIndex > fftSize/2)
 8001d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d50:	085a      	lsrs	r2, r3, #1
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d212      	bcs.n	8001d7e <fft+0x222>
	{
		f_dominant = -(df * (fftSize - testIndex));
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d66:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d6e:	eef1 7a67 	vneg.f32	s15, s15
 8001d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d76:	ee17 3a90 	vmov	r3, s15
 8001d7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d7c:	e00d      	b.n	8001d9a <fft+0x23e>
	}
	else
	{
		f_dominant = df * testIndex;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	ee07 3a90 	vmov	s15, r3
 8001d84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d88:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d94:	ee17 3a90 	vmov	r3, s15
 8001d98:	65bb      	str	r3, [r7, #88]	@ 0x58
		data_last = data;
		data = (out[i]) / f;
		if (data > 99) { data = 99; }// Limit value (max 60'000)
		BSP_LCD_DrawLine((int) (Xspacing*(i-1)), Y_OFFSET-data_last,(int) (Xspacing*i), Y_OFFSET-data);
	}*/
	return f_dominant;
 8001d9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d9c:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	376c      	adds	r7, #108	@ 0x6c
 8001da4:	46bd      	mov	sp, r7
 8001da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001daa:	bf00      	nop
 8001dac:	20000168 	.word	0x20000168
 8001db0:	43800000 	.word	0x43800000
 8001db4:	20000094 	.word	0x20000094
 8001db8:	447a0000 	.word	0x447a0000

08001dbc <MENU_get_transition>:
 * MENU_transition is used as a flag.
 * When the value is read by calling MENU_get_transition()
 * this flag is cleared, respectively set to MENU_NONE.
 *****************************************************************************/
MENU_item_t MENU_get_transition(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
	MENU_item_t item = MENU_transition;
 8001dc2:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <MENU_get_transition+0x20>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
	MENU_transition = MENU_NONE;
 8001dc8:	4b04      	ldr	r3, [pc, #16]	@ (8001ddc <MENU_get_transition+0x20>)
 8001dca:	2206      	movs	r2, #6
 8001dcc:	701a      	strb	r2, [r3, #0]
	return item;
 8001dce:	79fb      	ldrb	r3, [r7, #7]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	2000000c 	.word	0x2000000c

08001de0 <MENU_check_transition>:
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
void MENU_check_transition(void)
{
 8001de0:	b598      	push	{r3, r4, r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 8001de4:	4830      	ldr	r0, [pc, #192]	@ (8001ea8 <MENU_check_transition+0xc8>)
 8001de6:	f003 f8c3 	bl	8004f70 <BSP_TS_GetState>


// Evalboard revision E (blue) has an inverted y-axis in the touch controller
#ifdef EVAL_REV_E
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8001dea:	f002 f913 	bl	8004014 <BSP_LCD_GetYSize>
 8001dee:	4603      	mov	r3, r0
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea8 <MENU_check_transition+0xc8>)
 8001df4:	889b      	ldrh	r3, [r3, #4]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea8 <MENU_check_transition+0xc8>)
 8001dfc:	809a      	strh	r2, [r3, #4]
#endif
	// Invert x- and y-axis if LCD is flipped
#ifdef FLIPPED_LCD
	TS_State.X = BSP_LCD_GetXSize() - TS_State.X;	// Invert the x-axis
 8001dfe:	f002 f8fd 	bl	8003ffc <BSP_LCD_GetXSize>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	4b28      	ldr	r3, [pc, #160]	@ (8001ea8 <MENU_check_transition+0xc8>)
 8001e08:	885b      	ldrh	r3, [r3, #2]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	4b26      	ldr	r3, [pc, #152]	@ (8001ea8 <MENU_check_transition+0xc8>)
 8001e10:	805a      	strh	r2, [r3, #2]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8001e12:	f002 f8ff 	bl	8004014 <BSP_LCD_GetYSize>
 8001e16:	4603      	mov	r3, r0
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	4b23      	ldr	r3, [pc, #140]	@ (8001ea8 <MENU_check_transition+0xc8>)
 8001e1c:	889b      	ldrh	r3, [r3, #4]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	4b21      	ldr	r3, [pc, #132]	@ (8001ea8 <MENU_check_transition+0xc8>)
 8001e24:	809a      	strh	r2, [r3, #4]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
#endif
#ifdef EVAL_REV_E
#endif
*/
	if (TS_State.TouchDetected) {		// If a touch was detected
 8001e26:	4b20      	ldr	r3, [pc, #128]	@ (8001ea8 <MENU_check_transition+0xc8>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d039      	beq.n	8001ea2 <MENU_check_transition+0xc2>
		/* Do only if last transition not pending anymore */
		if (MENU_NONE == MENU_transition) {
 8001e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001eac <MENU_check_transition+0xcc>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d135      	bne.n	8001ea2 <MENU_check_transition+0xc2>
			item_old = item_new;		// Store old item
 8001e36:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb0 <MENU_check_transition+0xd0>)
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb4 <MENU_check_transition+0xd4>)
 8001e3c:	701a      	strb	r2, [r3, #0]
			/* If touched within the menu bar? */
			if ((MENU_Y < TS_State.Y) && (MENU_Y+MENU_HEIGHT > TS_State.Y)) {
 8001e3e:	f002 f8e9 	bl	8004014 <BSP_LCD_GetYSize>
 8001e42:	4603      	mov	r3, r0
 8001e44:	3b28      	subs	r3, #40	@ 0x28
 8001e46:	4a18      	ldr	r2, [pc, #96]	@ (8001ea8 <MENU_check_transition+0xc8>)
 8001e48:	8892      	ldrh	r2, [r2, #4]
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d229      	bcs.n	8001ea2 <MENU_check_transition+0xc2>
 8001e4e:	f002 f8e1 	bl	8004014 <BSP_LCD_GetYSize>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4a14      	ldr	r2, [pc, #80]	@ (8001ea8 <MENU_check_transition+0xc8>)
 8001e56:	8892      	ldrh	r2, [r2, #4]
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d922      	bls.n	8001ea2 <MENU_check_transition+0xc2>
				item_new = TS_State.X	// Calculate new item
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <MENU_check_transition+0xc8>)
 8001e5e:	885b      	ldrh	r3, [r3, #2]
 8001e60:	461c      	mov	r4, r3
						/ (BSP_LCD_GetXSize()/MENU_ENTRY_COUNT);
 8001e62:	f002 f8cb 	bl	8003ffc <BSP_LCD_GetXSize>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a13      	ldr	r2, [pc, #76]	@ (8001eb8 <MENU_check_transition+0xd8>)
 8001e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	fbb4 f3f3 	udiv	r3, r4, r3
 8001e74:	b2da      	uxtb	r2, r3
				item_new = TS_State.X	// Calculate new item
 8001e76:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <MENU_check_transition+0xd0>)
 8001e78:	701a      	strb	r2, [r3, #0]
				if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb0 <MENU_check_transition+0xd0>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b05      	cmp	r3, #5
 8001e80:	d902      	bls.n	8001e88 <MENU_check_transition+0xa8>
					item_new = MENU_NONE;	// Out of bounds
 8001e82:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <MENU_check_transition+0xd0>)
 8001e84:	2206      	movs	r2, #6
 8001e86:	701a      	strb	r2, [r3, #0]
				}
				if (item_new == item_old) {	// 2 times the same menu item
 8001e88:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <MENU_check_transition+0xd0>)
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	4b09      	ldr	r3, [pc, #36]	@ (8001eb4 <MENU_check_transition+0xd4>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d106      	bne.n	8001ea2 <MENU_check_transition+0xc2>
					item_new = MENU_NONE;
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <MENU_check_transition+0xd0>)
 8001e96:	2206      	movs	r2, #6
 8001e98:	701a      	strb	r2, [r3, #0]
					MENU_transition = item_old;
 8001e9a:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <MENU_check_transition+0xd4>)
 8001e9c:	781a      	ldrb	r2, [r3, #0]
 8001e9e:	4b03      	ldr	r3, [pc, #12]	@ (8001eac <MENU_check_transition+0xcc>)
 8001ea0:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 8001ea2:	bf00      	nop
 8001ea4:	bd98      	pop	{r3, r4, r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	2000056c 	.word	0x2000056c
 8001eac:	2000000c 	.word	0x2000000c
 8001eb0:	20000018 	.word	0x20000018
 8001eb4:	20000019 	.word	0x20000019
 8001eb8:	aaaaaaab 	.word	0xaaaaaaab

08001ebc <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <EXTI15_10_IRQHandler+0x40>)
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d014      	beq.n	8001ef6 <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <EXTI15_10_IRQHandler+0x40>)
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <EXTI15_10_IRQHandler+0x40>)
 8001ed2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ed6:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 8001ed8:	f003 f83e 	bl	8004f58 <BSP_TS_ITGetStatus>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 8001ee2:	f003 f8f7 	bl	80050d4 <BSP_TS_ITClear>
			MENU_check_transition();
 8001ee6:	f7ff ff7b 	bl	8001de0 <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8001eea:	4b04      	ldr	r3, [pc, #16]	@ (8001efc <EXTI15_10_IRQHandler+0x40>)
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	4a03      	ldr	r2, [pc, #12]	@ (8001efc <EXTI15_10_IRQHandler+0x40>)
 8001ef0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ef4:	6153      	str	r3, [r2, #20]
	}
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40013c00 	.word	0x40013c00

08001f00 <SHOW_STARTMENU>:



int SHOW_STARTMENU(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0

	int pressed = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]


	int xSize = 240;
 8001f0a:	23f0      	movs	r3, #240	@ 0xf0
 8001f0c:	607b      	str	r3, [r7, #4]

	BSP_LCD_SetFont(&Font20);
 8001f0e:	4851      	ldr	r0, [pc, #324]	@ (8002054 <SHOW_STARTMENU+0x154>)
 8001f10:	f002 f932 	bl	8004178 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001f14:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001f18:	f002 f8fc 	bl	8004114 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f002 f910 	bl	8004144 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(0, 3, (uint8_t *)"Security System", CENTER_MODE);
 8001f24:	2301      	movs	r3, #1
 8001f26:	4a4c      	ldr	r2, [pc, #304]	@ (8002058 <SHOW_STARTMENU+0x158>)
 8001f28:	2103      	movs	r1, #3
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f002 f9aa 	bl	8004284 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001f30:	484a      	ldr	r0, [pc, #296]	@ (800205c <SHOW_STARTMENU+0x15c>)
 8001f32:	f002 f8ef 	bl	8004114 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(BTN_GAP, 200, 100, 100);
 8001f36:	2364      	movs	r3, #100	@ 0x64
 8001f38:	2264      	movs	r2, #100	@ 0x64
 8001f3a:	21c8      	movs	r1, #200	@ 0xc8
 8001f3c:	200d      	movs	r0, #13
 8001f3e:	f002 fb61 	bl	8004604 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001f42:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001f46:	f002 f8e5 	bl	8004114 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001f4a:	4844      	ldr	r0, [pc, #272]	@ (800205c <SHOW_STARTMENU+0x15c>)
 8001f4c:	f002 f8fa 	bl	8004144 <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font24);
 8001f50:	4843      	ldr	r0, [pc, #268]	@ (8002060 <SHOW_STARTMENU+0x160>)
 8001f52:	f002 f911 	bl	8004178 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(BTN_GAP+26, 240, (uint8_t *)"ARM", LEFT_MODE);
 8001f56:	2303      	movs	r3, #3
 8001f58:	4a42      	ldr	r2, [pc, #264]	@ (8002064 <SHOW_STARTMENU+0x164>)
 8001f5a:	21f0      	movs	r1, #240	@ 0xf0
 8001f5c:	2027      	movs	r0, #39	@ 0x27
 8001f5e:	f002 f991 	bl	8004284 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 8001f62:	4841      	ldr	r0, [pc, #260]	@ (8002068 <SHOW_STARTMENU+0x168>)
 8001f64:	f002 f8d6 	bl	8004114 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(BTN_GAP+BTN_SIZE+BTN_GAP, 200, 100, 100);
 8001f68:	2364      	movs	r3, #100	@ 0x64
 8001f6a:	2264      	movs	r2, #100	@ 0x64
 8001f6c:	21c8      	movs	r1, #200	@ 0xc8
 8001f6e:	207e      	movs	r0, #126	@ 0x7e
 8001f70:	f002 fb48 	bl	8004604 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001f74:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001f78:	f002 f8cc 	bl	8004114 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_LIGHTBLUE);
 8001f7c:	483a      	ldr	r0, [pc, #232]	@ (8002068 <SHOW_STARTMENU+0x168>)
 8001f7e:	f002 f8e1 	bl	8004144 <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font24);
 8001f82:	4837      	ldr	r0, [pc, #220]	@ (8002060 <SHOW_STARTMENU+0x160>)
 8001f84:	f002 f8f8 	bl	8004178 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(BTN_GAP+BTN_SIZE+BTN_GAP+26, 230, (uint8_t *)"SET", LEFT_MODE);
 8001f88:	2303      	movs	r3, #3
 8001f8a:	4a38      	ldr	r2, [pc, #224]	@ (800206c <SHOW_STARTMENU+0x16c>)
 8001f8c:	21e6      	movs	r1, #230	@ 0xe6
 8001f8e:	2098      	movs	r0, #152	@ 0x98
 8001f90:	f002 f978 	bl	8004284 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(BTN_GAP+BTN_SIZE+BTN_GAP+26, 250, (uint8_t *)"PIN", LEFT_MODE);
 8001f94:	2303      	movs	r3, #3
 8001f96:	4a36      	ldr	r2, [pc, #216]	@ (8002070 <SHOW_STARTMENU+0x170>)
 8001f98:	21fa      	movs	r1, #250	@ 0xfa
 8001f9a:	2098      	movs	r0, #152	@ 0x98
 8001f9c:	f002 f972 	bl	8004284 <BSP_LCD_DisplayStringAt>
	while(1)
	{
		uint16_t touched = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	817b      	strh	r3, [r7, #10]
		static TS_StateTypeDef  TS_State;	// State of the touch controller
		BSP_TS_GetState(&TS_State);
 8001fa4:	4833      	ldr	r0, [pc, #204]	@ (8002074 <SHOW_STARTMENU+0x174>)
 8001fa6:	f002 ffe3 	bl	8004f70 <BSP_TS_GetState>
		uint16_t x = TS_State.X;
 8001faa:	4b32      	ldr	r3, [pc, #200]	@ (8002074 <SHOW_STARTMENU+0x174>)
 8001fac:	885b      	ldrh	r3, [r3, #2]
 8001fae:	807b      	strh	r3, [r7, #2]
		uint16_t y = TS_State.Y;
 8001fb0:	4b30      	ldr	r3, [pc, #192]	@ (8002074 <SHOW_STARTMENU+0x174>)
 8001fb2:	889b      	ldrh	r3, [r3, #4]
 8001fb4:	803b      	strh	r3, [r7, #0]


		if (TS_State.TouchDetected)
 8001fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8002074 <SHOW_STARTMENU+0x174>)
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d03b      	beq.n	8002036 <SHOW_STARTMENU+0x136>
		{
			#ifdef EVAL_REV_E
				y = BSP_LCD_GetYSize() - y;
 8001fbe:	f002 f829 	bl	8004014 <BSP_LCD_GetYSize>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	883b      	ldrh	r3, [r7, #0]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	803b      	strh	r3, [r7, #0]
			#endif
			#ifdef FLIPPED_LCD
				x = BSP_LCD_GetXSize() - x;
 8001fcc:	f002 f816 	bl	8003ffc <BSP_LCD_GetXSize>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	887b      	ldrh	r3, [r7, #2]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	807b      	strh	r3, [r7, #2]
				y = BSP_LCD_GetYSize() - y;
 8001fda:	f002 f81b 	bl	8004014 <BSP_LCD_GetYSize>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	883b      	ldrh	r3, [r7, #0]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	803b      	strh	r3, [r7, #0]
			#endif
			if((x >= BTN_GAP)&&(x <= (BTN_GAP+BTN_SIZE))&& (y>=240)&&(y<=350))
 8001fe8:	887b      	ldrh	r3, [r7, #2]
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	d90e      	bls.n	800200c <SHOW_STARTMENU+0x10c>
 8001fee:	887b      	ldrh	r3, [r7, #2]
 8001ff0:	2b71      	cmp	r3, #113	@ 0x71
 8001ff2:	d80b      	bhi.n	800200c <SHOW_STARTMENU+0x10c>
 8001ff4:	883b      	ldrh	r3, [r7, #0]
 8001ff6:	2bef      	cmp	r3, #239	@ 0xef
 8001ff8:	d908      	bls.n	800200c <SHOW_STARTMENU+0x10c>
 8001ffa:	883b      	ldrh	r3, [r7, #0]
 8001ffc:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8002000:	d804      	bhi.n	800200c <SHOW_STARTMENU+0x10c>
			{
				pressed = 1;
 8002002:	2301      	movs	r3, #1
 8002004:	60fb      	str	r3, [r7, #12]
				touched = 1;
 8002006:	2301      	movs	r3, #1
 8002008:	817b      	strh	r3, [r7, #10]
 800200a:	e010      	b.n	800202e <SHOW_STARTMENU+0x12e>
			}
			else if((x >= (BTN_GAP+BTN_SIZE+BTN_GAP))&&(x <= (BTN_GAP+BTN_SIZE+BTN_GAP+BTN_SIZE))&& (y>=240)&&(y<=350))
 800200c:	887b      	ldrh	r3, [r7, #2]
 800200e:	2b7d      	cmp	r3, #125	@ 0x7d
 8002010:	d911      	bls.n	8002036 <SHOW_STARTMENU+0x136>
 8002012:	887b      	ldrh	r3, [r7, #2]
 8002014:	2be2      	cmp	r3, #226	@ 0xe2
 8002016:	d80e      	bhi.n	8002036 <SHOW_STARTMENU+0x136>
 8002018:	883b      	ldrh	r3, [r7, #0]
 800201a:	2bef      	cmp	r3, #239	@ 0xef
 800201c:	d90b      	bls.n	8002036 <SHOW_STARTMENU+0x136>
 800201e:	883b      	ldrh	r3, [r7, #0]
 8002020:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8002024:	d807      	bhi.n	8002036 <SHOW_STARTMENU+0x136>
			{
				pressed = 2;
 8002026:	2302      	movs	r3, #2
 8002028:	60fb      	str	r3, [r7, #12]
				touched = 1;
 800202a:	2301      	movs	r3, #1
 800202c:	817b      	strh	r3, [r7, #10]
			}
		}
		while(TS_State.TouchDetected)
 800202e:	e002      	b.n	8002036 <SHOW_STARTMENU+0x136>
		{
			BSP_TS_GetState(&TS_State);
 8002030:	4810      	ldr	r0, [pc, #64]	@ (8002074 <SHOW_STARTMENU+0x174>)
 8002032:	f002 ff9d 	bl	8004f70 <BSP_TS_GetState>
		while(TS_State.TouchDetected)
 8002036:	4b0f      	ldr	r3, [pc, #60]	@ (8002074 <SHOW_STARTMENU+0x174>)
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f8      	bne.n	8002030 <SHOW_STARTMENU+0x130>
		}
		if(touched ==1)
 800203e:	897b      	ldrh	r3, [r7, #10]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d000      	beq.n	8002046 <SHOW_STARTMENU+0x146>
	{
 8002044:	e7ac      	b.n	8001fa0 <SHOW_STARTMENU+0xa0>
			break;
 8002046:	bf00      	nop
	}


	return pressed;
 8002048:	68fb      	ldr	r3, [r7, #12]

}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	2000009c 	.word	0x2000009c
 8002058:	0800b58c 	.word	0x0800b58c
 800205c:	ffff0000 	.word	0xffff0000
 8002060:	20000094 	.word	0x20000094
 8002064:	0800b59c 	.word	0x0800b59c
 8002068:	ff8080ff 	.word	0xff8080ff
 800206c:	0800b5a0 	.word	0x0800b5a0
 8002070:	0800b5a4 	.word	0x0800b5a4
 8002074:	20000574 	.word	0x20000574

08002078 <SHOW_TRIGGEREDMENU>:
char* SHOW_TRIGGEREDMENU(uint8_t alarmset)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b092      	sub	sp, #72	@ 0x48
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]

	start_countdown(TIME_DEFUSE);
 8002082:	200a      	movs	r0, #10
 8002084:	f000 fd60 	bl	8002b48 <start_countdown>
    static char pin_buffer[PIN_MAX_LEN + 1] = {0}; // Rückgabe-Buffer
    uint8_t pin_index = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    TS_StateTypeDef TS_State;
    const uint16_t btn_w = 60, btn_h = 60;
 800208e:	233c      	movs	r3, #60	@ 0x3c
 8002090:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002094:	233c      	movs	r3, #60	@ 0x3c
 8002096:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    const uint16_t start_x = 20, start_y = 50;
 800209a:	2314      	movs	r3, #20
 800209c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800209e:	2332      	movs	r3, #50	@ 0x32
 80020a0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    const uint16_t gap = 10;
 80020a2:	230a      	movs	r3, #10
 80020a4:	877b      	strh	r3, [r7, #58]	@ 0x3a


    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80020a6:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80020aa:	f002 f833 	bl	8004114 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80020ae:	f04f 30ff 	mov.w	r0, #4294967295
 80020b2:	f002 f847 	bl	8004144 <BSP_LCD_SetBackColor>
    BSP_LCD_SetFont(&Font24);
 80020b6:	4891      	ldr	r0, [pc, #580]	@ (80022fc <SHOW_TRIGGEREDMENU+0x284>)
 80020b8:	f002 f85e 	bl	8004178 <BSP_LCD_SetFont>
    HAL_Delay(1000);
 80020bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020c0:	f003 f88e 	bl	80051e0 <HAL_Delay>

    char label[2] = {'0', '\0'};
 80020c4:	2330      	movs	r3, #48	@ 0x30
 80020c6:	81bb      	strh	r3, [r7, #12]
	for (uint8_t i = 1; i <= 9; i++) {
 80020c8:	2301      	movs	r3, #1
 80020ca:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80020ce:	e04b      	b.n	8002168 <SHOW_TRIGGEREDMENU+0xf0>
		uint16_t row = (i - 1) / 3;
 80020d0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80020d4:	3b01      	subs	r3, #1
 80020d6:	4a8a      	ldr	r2, [pc, #552]	@ (8002300 <SHOW_TRIGGEREDMENU+0x288>)
 80020d8:	fb82 1203 	smull	r1, r2, r2, r3
 80020dc:	17db      	asrs	r3, r3, #31
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	843b      	strh	r3, [r7, #32]
		uint16_t col = (i - 1) % 3;
 80020e2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80020e6:	1e5a      	subs	r2, r3, #1
 80020e8:	4b85      	ldr	r3, [pc, #532]	@ (8002300 <SHOW_TRIGGEREDMENU+0x288>)
 80020ea:	fb83 3102 	smull	r3, r1, r3, r2
 80020ee:	17d3      	asrs	r3, r2, #31
 80020f0:	1ac9      	subs	r1, r1, r3
 80020f2:	460b      	mov	r3, r1
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	440b      	add	r3, r1
 80020f8:	1ad1      	subs	r1, r2, r3
 80020fa:	460b      	mov	r3, r1
 80020fc:	83fb      	strh	r3, [r7, #30]
		uint16_t x = start_x + col * (btn_w + gap);
 80020fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8002102:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002104:	4413      	add	r3, r2
 8002106:	b29b      	uxth	r3, r3
 8002108:	8bfa      	ldrh	r2, [r7, #30]
 800210a:	fb12 f303 	smulbb	r3, r2, r3
 800210e:	b29a      	uxth	r2, r3
 8002110:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002112:	4413      	add	r3, r2
 8002114:	83bb      	strh	r3, [r7, #28]
		uint16_t y = start_y + row * (btn_h + gap);
 8002116:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800211a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800211c:	4413      	add	r3, r2
 800211e:	b29b      	uxth	r3, r3
 8002120:	8c3a      	ldrh	r2, [r7, #32]
 8002122:	fb12 f303 	smulbb	r3, r2, r3
 8002126:	b29a      	uxth	r2, r3
 8002128:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800212a:	4413      	add	r3, r2
 800212c:	837b      	strh	r3, [r7, #26]
		BSP_LCD_DrawRect(x, y, btn_w, btn_h);
 800212e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002132:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8002136:	8b79      	ldrh	r1, [r7, #26]
 8002138:	8bb8      	ldrh	r0, [r7, #28]
 800213a:	f002 fa31 	bl	80045a0 <BSP_LCD_DrawRect>
		label[0] = '0' + i;
 800213e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002142:	3330      	adds	r3, #48	@ 0x30
 8002144:	b2db      	uxtb	r3, r3
 8002146:	733b      	strb	r3, [r7, #12]
		BSP_LCD_DisplayStringAt(x + 20, y + 20, (uint8_t *)label, LEFT_MODE);
 8002148:	8bbb      	ldrh	r3, [r7, #28]
 800214a:	3314      	adds	r3, #20
 800214c:	b298      	uxth	r0, r3
 800214e:	8b7b      	ldrh	r3, [r7, #26]
 8002150:	3314      	adds	r3, #20
 8002152:	b299      	uxth	r1, r3
 8002154:	f107 020c 	add.w	r2, r7, #12
 8002158:	2303      	movs	r3, #3
 800215a:	f002 f893 	bl	8004284 <BSP_LCD_DisplayStringAt>
	for (uint8_t i = 1; i <= 9; i++) {
 800215e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002162:	3301      	adds	r3, #1
 8002164:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8002168:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800216c:	2b09      	cmp	r3, #9
 800216e:	d9af      	bls.n	80020d0 <SHOW_TRIGGEREDMENU+0x58>
	}
	// Button 0
	BSP_LCD_DrawRect(start_x + btn_w + gap, start_y + 3 * (btn_h + gap), btn_w, btn_h);
 8002170:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002172:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002176:	4413      	add	r3, r2
 8002178:	b29a      	uxth	r2, r3
 800217a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800217c:	4413      	add	r3, r2
 800217e:	b298      	uxth	r0, r3
 8002180:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002184:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002186:	4413      	add	r3, r2
 8002188:	b29b      	uxth	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	0052      	lsls	r2, r2, #1
 800218e:	4413      	add	r3, r2
 8002190:	b29a      	uxth	r2, r3
 8002192:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002194:	4413      	add	r3, r2
 8002196:	b299      	uxth	r1, r3
 8002198:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800219c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80021a0:	f002 f9fe 	bl	80045a0 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(start_x + btn_w + gap + 20, start_y + 3 * (btn_h + gap) + 20, (uint8_t *)"0", LEFT_MODE);
 80021a4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80021a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80021aa:	4413      	add	r3, r2
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80021b0:	4413      	add	r3, r2
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	3314      	adds	r3, #20
 80021b6:	b298      	uxth	r0, r3
 80021b8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80021bc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80021be:	4413      	add	r3, r2
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	0052      	lsls	r2, r2, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80021cc:	4413      	add	r3, r2
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3314      	adds	r3, #20
 80021d2:	b299      	uxth	r1, r3
 80021d4:	2303      	movs	r3, #3
 80021d6:	4a4b      	ldr	r2, [pc, #300]	@ (8002304 <SHOW_TRIGGEREDMENU+0x28c>)
 80021d8:	f002 f854 	bl	8004284 <BSP_LCD_DisplayStringAt>

	// OK-Button
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80021dc:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80021e0:	f001 ff98 	bl	8004114 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(start_x, start_y + 3 * (btn_h + gap), btn_w, btn_h);
 80021e4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80021e8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80021ea:	4413      	add	r3, r2
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	0052      	lsls	r2, r2, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80021f8:	4413      	add	r3, r2
 80021fa:	b299      	uxth	r1, r3
 80021fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002200:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8002204:	8ff8      	ldrh	r0, [r7, #62]	@ 0x3e
 8002206:	f002 f9cb 	bl	80045a0 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(start_x + 10, start_y + 3 * (btn_h + gap) + 20, (uint8_t *)"OK", LEFT_MODE);
 800220a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800220c:	330a      	adds	r3, #10
 800220e:	b298      	uxth	r0, r3
 8002210:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002214:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002216:	4413      	add	r3, r2
 8002218:	b29b      	uxth	r3, r3
 800221a:	461a      	mov	r2, r3
 800221c:	0052      	lsls	r2, r2, #1
 800221e:	4413      	add	r3, r2
 8002220:	b29a      	uxth	r2, r3
 8002222:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002224:	4413      	add	r3, r2
 8002226:	b29b      	uxth	r3, r3
 8002228:	3314      	adds	r3, #20
 800222a:	b299      	uxth	r1, r3
 800222c:	2303      	movs	r3, #3
 800222e:	4a36      	ldr	r2, [pc, #216]	@ (8002308 <SHOW_TRIGGEREDMENU+0x290>)
 8002230:	f002 f828 	bl	8004284 <BSP_LCD_DisplayStringAt>

	// Clear-Button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002234:	4835      	ldr	r0, [pc, #212]	@ (800230c <SHOW_TRIGGEREDMENU+0x294>)
 8002236:	f001 ff6d 	bl	8004114 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(start_x + 2 * (btn_w + gap), start_y + 3 * (btn_h + gap), btn_w, btn_h);
 800223a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800223e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002240:	4413      	add	r3, r2
 8002242:	b29b      	uxth	r3, r3
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800224a:	4413      	add	r3, r2
 800224c:	b298      	uxth	r0, r3
 800224e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002252:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002254:	4413      	add	r3, r2
 8002256:	b29b      	uxth	r3, r3
 8002258:	461a      	mov	r2, r3
 800225a:	0052      	lsls	r2, r2, #1
 800225c:	4413      	add	r3, r2
 800225e:	b29a      	uxth	r2, r3
 8002260:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002262:	4413      	add	r3, r2
 8002264:	b299      	uxth	r1, r3
 8002266:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800226a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800226e:	f002 f997 	bl	80045a0 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(start_x + 10 + 2 * (btn_w + gap), start_y + 3 * (btn_h + gap) + 20, (uint8_t *)"CLR", LEFT_MODE);
 8002272:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8002276:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002278:	4413      	add	r3, r2
 800227a:	b29b      	uxth	r3, r3
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002282:	4413      	add	r3, r2
 8002284:	b29b      	uxth	r3, r3
 8002286:	330a      	adds	r3, #10
 8002288:	b298      	uxth	r0, r3
 800228a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800228e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002290:	4413      	add	r3, r2
 8002292:	b29b      	uxth	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	0052      	lsls	r2, r2, #1
 8002298:	4413      	add	r3, r2
 800229a:	b29a      	uxth	r2, r3
 800229c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800229e:	4413      	add	r3, r2
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	3314      	adds	r3, #20
 80022a4:	b299      	uxth	r1, r3
 80022a6:	2303      	movs	r3, #3
 80022a8:	4a19      	ldr	r2, [pc, #100]	@ (8002310 <SHOW_TRIGGEREDMENU+0x298>)
 80022aa:	f001 ffeb 	bl	8004284 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK); // Reset Farbe
 80022ae:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80022b2:	f001 ff2f 	bl	8004114 <BSP_LCD_SetTextColor>
	while (1) {
		if(alarmset)
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <SHOW_TRIGGEREDMENU+0x24a>
		{
			BSP_LED_Toggle(LED4);			// Visual feedback when running
 80022bc:	2001      	movs	r0, #1
 80022be:	f001 fa99 	bl	80037f4 <BSP_LED_Toggle>
		}
		if(update_countdown() <= 0)
 80022c2:	f000 fc5d 	bl	8002b80 <update_countdown>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <SHOW_TRIGGEREDMENU+0x258>
			return NULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e1e3      	b.n	8002698 <SHOW_TRIGGEREDMENU+0x620>
		BSP_TS_GetState(&TS_State);
 80022d0:	f107 0310 	add.w	r3, r7, #16
 80022d4:	4618      	mov	r0, r3
 80022d6:	f002 fe4b 	bl	8004f70 <BSP_TS_GetState>
		if (TS_State.TouchDetected) {
 80022da:	8a3b      	ldrh	r3, [r7, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0ea      	beq.n	80022b6 <SHOW_TRIGGEREDMENU+0x23e>


			uint16_t tx = 240 - TS_State.X;  // X spiegeln
 80022e0:	8a7b      	ldrh	r3, [r7, #18]
 80022e2:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80022e6:	873b      	strh	r3, [r7, #56]	@ 0x38
			uint16_t ty = TS_State.Y;        // Y bleibt gleich
 80022e8:	8abb      	ldrh	r3, [r7, #20]
 80022ea:	86fb      	strh	r3, [r7, #54]	@ 0x36

			// Touchscreen-Ausrichtung korrigieren (STM32F429I-Discovery)
			HAL_Delay(150); // Debounce
 80022ec:	2096      	movs	r0, #150	@ 0x96
 80022ee:	f002 ff77 	bl	80051e0 <HAL_Delay>

			// Ziffern-Buttons
			for (uint8_t i = 1; i <= 9; i++) {
 80022f2:	2301      	movs	r3, #1
 80022f4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80022f8:	e06b      	b.n	80023d2 <SHOW_TRIGGEREDMENU+0x35a>
 80022fa:	bf00      	nop
 80022fc:	20000094 	.word	0x20000094
 8002300:	55555556 	.word	0x55555556
 8002304:	0800b5a8 	.word	0x0800b5a8
 8002308:	0800b5ac 	.word	0x0800b5ac
 800230c:	ffff0000 	.word	0xffff0000
 8002310:	0800b5b0 	.word	0x0800b5b0
				uint16_t row = (i - 1) / 3;
 8002314:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002318:	3b01      	subs	r3, #1
 800231a:	4a61      	ldr	r2, [pc, #388]	@ (80024a0 <SHOW_TRIGGEREDMENU+0x428>)
 800231c:	fb82 1203 	smull	r1, r2, r2, r3
 8002320:	17db      	asrs	r3, r3, #31
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	853b      	strh	r3, [r7, #40]	@ 0x28
				uint16_t col = (i - 1) % 3;
 8002326:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800232a:	1e5a      	subs	r2, r3, #1
 800232c:	4b5c      	ldr	r3, [pc, #368]	@ (80024a0 <SHOW_TRIGGEREDMENU+0x428>)
 800232e:	fb83 3102 	smull	r3, r1, r3, r2
 8002332:	17d3      	asrs	r3, r2, #31
 8002334:	1ac9      	subs	r1, r1, r3
 8002336:	460b      	mov	r3, r1
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	440b      	add	r3, r1
 800233c:	1ad1      	subs	r1, r2, r3
 800233e:	460b      	mov	r3, r1
 8002340:	84fb      	strh	r3, [r7, #38]	@ 0x26
				uint16_t x = start_x + col * (btn_w + gap);
 8002342:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8002346:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002348:	4413      	add	r3, r2
 800234a:	b29b      	uxth	r3, r3
 800234c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800234e:	fb12 f303 	smulbb	r3, r2, r3
 8002352:	b29a      	uxth	r2, r3
 8002354:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002356:	4413      	add	r3, r2
 8002358:	84bb      	strh	r3, [r7, #36]	@ 0x24
				uint16_t y = start_y + row * (btn_h + gap);
 800235a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800235e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002360:	4413      	add	r3, r2
 8002362:	b29b      	uxth	r3, r3
 8002364:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002366:	fb12 f303 	smulbb	r3, r2, r3
 800236a:	b29a      	uxth	r2, r3
 800236c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800236e:	4413      	add	r3, r2
 8002370:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (tx >= x && tx <= x + btn_w && ty >= y && ty <= y + btn_h) {
 8002372:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002374:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002376:	429a      	cmp	r2, r3
 8002378:	d326      	bcc.n	80023c8 <SHOW_TRIGGEREDMENU+0x350>
 800237a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800237c:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800237e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002382:	440b      	add	r3, r1
 8002384:	429a      	cmp	r2, r3
 8002386:	dc1f      	bgt.n	80023c8 <SHOW_TRIGGEREDMENU+0x350>
 8002388:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800238a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800238c:	429a      	cmp	r2, r3
 800238e:	d31b      	bcc.n	80023c8 <SHOW_TRIGGEREDMENU+0x350>
 8002390:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002392:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8002394:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002398:	440b      	add	r3, r1
 800239a:	429a      	cmp	r2, r3
 800239c:	dc14      	bgt.n	80023c8 <SHOW_TRIGGEREDMENU+0x350>
					if (pin_index < PIN_MAX_LEN) {
 800239e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80023a2:	2b05      	cmp	r3, #5
 80023a4:	d810      	bhi.n	80023c8 <SHOW_TRIGGEREDMENU+0x350>
						pin_buffer[pin_index++] = '0' + i;
 80023a6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	f887 2047 	strb.w	r2, [r7, #71]	@ 0x47
 80023b0:	461a      	mov	r2, r3
 80023b2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80023b6:	3330      	adds	r3, #48	@ 0x30
 80023b8:	b2d9      	uxtb	r1, r3
 80023ba:	4b3a      	ldr	r3, [pc, #232]	@ (80024a4 <SHOW_TRIGGEREDMENU+0x42c>)
 80023bc:	5499      	strb	r1, [r3, r2]
						pin_buffer[pin_index] = '\0';
 80023be:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80023c2:	4a38      	ldr	r2, [pc, #224]	@ (80024a4 <SHOW_TRIGGEREDMENU+0x42c>)
 80023c4:	2100      	movs	r1, #0
 80023c6:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 1; i <= 9; i++) {
 80023c8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80023cc:	3301      	adds	r3, #1
 80023ce:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80023d2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80023d6:	2b09      	cmp	r3, #9
 80023d8:	d99c      	bls.n	8002314 <SHOW_TRIGGEREDMENU+0x29c>
					}
				}
			}
			// Button 0
			uint16_t x0 = start_x + btn_w + gap;
 80023da:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80023dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80023e0:	4413      	add	r3, r2
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80023e6:	4413      	add	r3, r2
 80023e8:	86bb      	strh	r3, [r7, #52]	@ 0x34
			uint16_t y0 = start_y + 3 * (btn_h + gap);
 80023ea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80023ee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80023f0:	4413      	add	r3, r2
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	0052      	lsls	r2, r2, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80023fe:	4413      	add	r3, r2
 8002400:	867b      	strh	r3, [r7, #50]	@ 0x32
			if (tx >= x0 && tx <= x0 + btn_w && ty >= y0 && ty <= y0 + btn_h) {
 8002402:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002404:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002406:	429a      	cmp	r2, r3
 8002408:	d323      	bcc.n	8002452 <SHOW_TRIGGEREDMENU+0x3da>
 800240a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800240c:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 800240e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002412:	440b      	add	r3, r1
 8002414:	429a      	cmp	r2, r3
 8002416:	dc1c      	bgt.n	8002452 <SHOW_TRIGGEREDMENU+0x3da>
 8002418:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800241a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800241c:	429a      	cmp	r2, r3
 800241e:	d318      	bcc.n	8002452 <SHOW_TRIGGEREDMENU+0x3da>
 8002420:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002422:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 8002424:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002428:	440b      	add	r3, r1
 800242a:	429a      	cmp	r2, r3
 800242c:	dc11      	bgt.n	8002452 <SHOW_TRIGGEREDMENU+0x3da>
				if (pin_index < PIN_MAX_LEN) {
 800242e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002432:	2b05      	cmp	r3, #5
 8002434:	d80d      	bhi.n	8002452 <SHOW_TRIGGEREDMENU+0x3da>
					pin_buffer[pin_index++] = '0';
 8002436:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	f887 2047 	strb.w	r2, [r7, #71]	@ 0x47
 8002440:	461a      	mov	r2, r3
 8002442:	4b18      	ldr	r3, [pc, #96]	@ (80024a4 <SHOW_TRIGGEREDMENU+0x42c>)
 8002444:	2130      	movs	r1, #48	@ 0x30
 8002446:	5499      	strb	r1, [r3, r2]
					pin_buffer[pin_index] = '\0';
 8002448:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800244c:	4a15      	ldr	r2, [pc, #84]	@ (80024a4 <SHOW_TRIGGEREDMENU+0x42c>)
 800244e:	2100      	movs	r1, #0
 8002450:	54d1      	strb	r1, [r2, r3]
				}
			}
			// OK Button
			uint16_t ok_x = start_x;
 8002452:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002454:	863b      	strh	r3, [r7, #48]	@ 0x30
			uint16_t ok_y = start_y + 3 * (btn_h + gap);
 8002456:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800245a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800245c:	4413      	add	r3, r2
 800245e:	b29b      	uxth	r3, r3
 8002460:	461a      	mov	r2, r3
 8002462:	0052      	lsls	r2, r2, #1
 8002464:	4413      	add	r3, r2
 8002466:	b29a      	uxth	r2, r3
 8002468:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800246a:	4413      	add	r3, r2
 800246c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			if (tx >= ok_x && tx <= ok_x + btn_w && ty >= ok_y && ty <= ok_y + btn_h) {
 800246e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002470:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002472:	429a      	cmp	r2, r3
 8002474:	d318      	bcc.n	80024a8 <SHOW_TRIGGEREDMENU+0x430>
 8002476:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002478:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 800247a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800247e:	440b      	add	r3, r1
 8002480:	429a      	cmp	r2, r3
 8002482:	dc11      	bgt.n	80024a8 <SHOW_TRIGGEREDMENU+0x430>
 8002484:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002486:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002488:	429a      	cmp	r2, r3
 800248a:	d30d      	bcc.n	80024a8 <SHOW_TRIGGEREDMENU+0x430>
 800248c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800248e:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8002490:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002494:	440b      	add	r3, r1
 8002496:	429a      	cmp	r2, r3
 8002498:	dc06      	bgt.n	80024a8 <SHOW_TRIGGEREDMENU+0x430>
				return pin_buffer;
 800249a:	4b02      	ldr	r3, [pc, #8]	@ (80024a4 <SHOW_TRIGGEREDMENU+0x42c>)
 800249c:	e0fc      	b.n	8002698 <SHOW_TRIGGEREDMENU+0x620>
 800249e:	bf00      	nop
 80024a0:	55555556 	.word	0x55555556
 80024a4:	2000057c 	.word	0x2000057c
			}
			// CLR Button
			uint16_t clr_x = start_x + 2 * (btn_w + gap);
 80024a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80024ac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80024ae:	4413      	add	r3, r2
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80024b8:	4413      	add	r3, r2
 80024ba:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			uint16_t clr_y = start_y + 3 * (btn_h + gap);
 80024bc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80024c0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80024c2:	4413      	add	r3, r2
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	0052      	lsls	r2, r2, #1
 80024ca:	4413      	add	r3, r2
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80024d0:	4413      	add	r3, r2
 80024d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
			if (tx >= clr_x && tx <= clr_x + btn_w && ty >= clr_y && ty <= clr_y + btn_h) {
 80024d4:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80024d6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80024d8:	429a      	cmp	r2, r3
 80024da:	d31f      	bcc.n	800251c <SHOW_TRIGGEREDMENU+0x4a4>
 80024dc:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80024de:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 80024e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80024e4:	440b      	add	r3, r1
 80024e6:	429a      	cmp	r2, r3
 80024e8:	dc18      	bgt.n	800251c <SHOW_TRIGGEREDMENU+0x4a4>
 80024ea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80024ec:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d314      	bcc.n	800251c <SHOW_TRIGGEREDMENU+0x4a4>
 80024f2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80024f4:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80024f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80024fa:	440b      	add	r3, r1
 80024fc:	429a      	cmp	r2, r3
 80024fe:	dc0d      	bgt.n	800251c <SHOW_TRIGGEREDMENU+0x4a4>
				memset(pin_buffer, 0, sizeof(pin_buffer));
 8002500:	2207      	movs	r2, #7
 8002502:	2100      	movs	r1, #0
 8002504:	4866      	ldr	r0, [pc, #408]	@ (80026a0 <SHOW_TRIGGEREDMENU+0x628>)
 8002506:	f008 fb39 	bl	800ab7c <memset>
				BSP_LCD_DisplayStringAt(0, 3,(uint8_t *)"       ", LEFT_MODE);
 800250a:	2303      	movs	r3, #3
 800250c:	4a65      	ldr	r2, [pc, #404]	@ (80026a4 <SHOW_TRIGGEREDMENU+0x62c>)
 800250e:	2103      	movs	r1, #3
 8002510:	2000      	movs	r0, #0
 8002512:	f001 feb7 	bl	8004284 <BSP_LCD_DisplayStringAt>
				pin_index = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}

			// Anzeige aktualisieren
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	f001 fdf8 	bl	8004114 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(0, ySize - 40, xSize, 30);
 8002524:	4b60      	ldr	r3, [pc, #384]	@ (80026a8 <SHOW_TRIGGEREDMENU+0x630>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	b29b      	uxth	r3, r3
 800252a:	3b28      	subs	r3, #40	@ 0x28
 800252c:	b299      	uxth	r1, r3
 800252e:	4b5f      	ldr	r3, [pc, #380]	@ (80026ac <SHOW_TRIGGEREDMENU+0x634>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	b29a      	uxth	r2, r3
 8002534:	231e      	movs	r3, #30
 8002536:	2000      	movs	r0, #0
 8002538:	f002 f864 	bl	8004604 <BSP_LCD_FillRect>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800253c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002540:	f001 fde8 	bl	8004114 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(0, 3, (uint8_t *)pin_buffer, LEFT_MODE);
 8002544:	2303      	movs	r3, #3
 8002546:	4a56      	ldr	r2, [pc, #344]	@ (80026a0 <SHOW_TRIGGEREDMENU+0x628>)
 8002548:	2103      	movs	r1, #3
 800254a:	2000      	movs	r0, #0
 800254c:	f001 fe9a 	bl	8004284 <BSP_LCD_DisplayStringAt>
			// Button 0
			BSP_LCD_DrawRect(start_x + btn_w + gap, start_y + 3 * (btn_h + gap), btn_w, btn_h);
 8002550:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002552:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002556:	4413      	add	r3, r2
 8002558:	b29a      	uxth	r2, r3
 800255a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800255c:	4413      	add	r3, r2
 800255e:	b298      	uxth	r0, r3
 8002560:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002564:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002566:	4413      	add	r3, r2
 8002568:	b29b      	uxth	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	0052      	lsls	r2, r2, #1
 800256e:	4413      	add	r3, r2
 8002570:	b29a      	uxth	r2, r3
 8002572:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002574:	4413      	add	r3, r2
 8002576:	b299      	uxth	r1, r3
 8002578:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800257c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8002580:	f002 f80e 	bl	80045a0 <BSP_LCD_DrawRect>
			BSP_LCD_DisplayStringAt(start_x + btn_w + gap + 20, start_y + 3 * (btn_h + gap) + 20, (uint8_t *)"0", LEFT_MODE);
 8002584:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002586:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800258a:	4413      	add	r3, r2
 800258c:	b29a      	uxth	r2, r3
 800258e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002590:	4413      	add	r3, r2
 8002592:	b29b      	uxth	r3, r3
 8002594:	3314      	adds	r3, #20
 8002596:	b298      	uxth	r0, r3
 8002598:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800259c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800259e:	4413      	add	r3, r2
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	0052      	lsls	r2, r2, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80025ac:	4413      	add	r3, r2
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3314      	adds	r3, #20
 80025b2:	b299      	uxth	r1, r3
 80025b4:	2303      	movs	r3, #3
 80025b6:	4a3e      	ldr	r2, [pc, #248]	@ (80026b0 <SHOW_TRIGGEREDMENU+0x638>)
 80025b8:	f001 fe64 	bl	8004284 <BSP_LCD_DisplayStringAt>

			// OK-Button
			BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80025bc:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80025c0:	f001 fda8 	bl	8004114 <BSP_LCD_SetTextColor>
			BSP_LCD_DrawRect(start_x, start_y + 3 * (btn_h + gap), btn_w, btn_h);
 80025c4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80025c8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80025ca:	4413      	add	r3, r2
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	0052      	lsls	r2, r2, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80025d8:	4413      	add	r3, r2
 80025da:	b299      	uxth	r1, r3
 80025dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80025e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80025e4:	8ff8      	ldrh	r0, [r7, #62]	@ 0x3e
 80025e6:	f001 ffdb 	bl	80045a0 <BSP_LCD_DrawRect>
			BSP_LCD_DisplayStringAt(start_x + 10, start_y + 3 * (btn_h + gap) + 15, (uint8_t *)"OK", LEFT_MODE);
 80025ea:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80025ec:	330a      	adds	r3, #10
 80025ee:	b298      	uxth	r0, r3
 80025f0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80025f4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80025f6:	4413      	add	r3, r2
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	0052      	lsls	r2, r2, #1
 80025fe:	4413      	add	r3, r2
 8002600:	b29a      	uxth	r2, r3
 8002602:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002604:	4413      	add	r3, r2
 8002606:	b29b      	uxth	r3, r3
 8002608:	330f      	adds	r3, #15
 800260a:	b299      	uxth	r1, r3
 800260c:	2303      	movs	r3, #3
 800260e:	4a29      	ldr	r2, [pc, #164]	@ (80026b4 <SHOW_TRIGGEREDMENU+0x63c>)
 8002610:	f001 fe38 	bl	8004284 <BSP_LCD_DisplayStringAt>

			// Clear-Button
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002614:	4828      	ldr	r0, [pc, #160]	@ (80026b8 <SHOW_TRIGGEREDMENU+0x640>)
 8002616:	f001 fd7d 	bl	8004114 <BSP_LCD_SetTextColor>
			BSP_LCD_DrawRect(start_x + 2 * (btn_w + gap), start_y + 3 * (btn_h + gap), btn_w, btn_h);
 800261a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800261e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002620:	4413      	add	r3, r2
 8002622:	b29b      	uxth	r3, r3
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800262a:	4413      	add	r3, r2
 800262c:	b298      	uxth	r0, r3
 800262e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002632:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002634:	4413      	add	r3, r2
 8002636:	b29b      	uxth	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	0052      	lsls	r2, r2, #1
 800263c:	4413      	add	r3, r2
 800263e:	b29a      	uxth	r2, r3
 8002640:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002642:	4413      	add	r3, r2
 8002644:	b299      	uxth	r1, r3
 8002646:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800264a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800264e:	f001 ffa7 	bl	80045a0 <BSP_LCD_DrawRect>
			BSP_LCD_DisplayStringAt(start_x + 10 + 2 * (btn_w + gap), start_y + 3 * (btn_h + gap) + 20, (uint8_t *)"CLR", LEFT_MODE);
 8002652:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8002656:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002658:	4413      	add	r3, r2
 800265a:	b29b      	uxth	r3, r3
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002662:	4413      	add	r3, r2
 8002664:	b29b      	uxth	r3, r3
 8002666:	330a      	adds	r3, #10
 8002668:	b298      	uxth	r0, r3
 800266a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800266e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002670:	4413      	add	r3, r2
 8002672:	b29b      	uxth	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	0052      	lsls	r2, r2, #1
 8002678:	4413      	add	r3, r2
 800267a:	b29a      	uxth	r2, r3
 800267c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800267e:	4413      	add	r3, r2
 8002680:	b29b      	uxth	r3, r3
 8002682:	3314      	adds	r3, #20
 8002684:	b299      	uxth	r1, r3
 8002686:	2303      	movs	r3, #3
 8002688:	4a0c      	ldr	r2, [pc, #48]	@ (80026bc <SHOW_TRIGGEREDMENU+0x644>)
 800268a:	f001 fdfb 	bl	8004284 <BSP_LCD_DisplayStringAt>

			BSP_LCD_SetTextColor(LCD_COLOR_BLACK); // Reset Farbe
 800268e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002692:	f001 fd3f 	bl	8004114 <BSP_LCD_SetTextColor>
		if(alarmset)
 8002696:	e60e      	b.n	80022b6 <SHOW_TRIGGEREDMENU+0x23e>
		}
	}
	return NULL;

}
 8002698:	4618      	mov	r0, r3
 800269a:	3748      	adds	r7, #72	@ 0x48
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	2000057c 	.word	0x2000057c
 80026a4:	0800b5b4 	.word	0x0800b5b4
 80026a8:	20000014 	.word	0x20000014
 80026ac:	20000010 	.word	0x20000010
 80026b0:	0800b5a8 	.word	0x0800b5a8
 80026b4:	0800b5ac 	.word	0x0800b5ac
 80026b8:	ffff0000 	.word	0xffff0000
 80026bc:	0800b5b0 	.word	0x0800b5b0

080026c0 <change_pin>:


char* change_pin(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b090      	sub	sp, #64	@ 0x40
 80026c4:	af00      	add	r7, sp, #0
    static char new_pin[PIN_MAX_LEN + 1] = {0};
    uint8_t pin_index = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    TS_StateTypeDef TS_State;
    const uint16_t btn_w = 60, btn_h = 60;
 80026cc:	233c      	movs	r3, #60	@ 0x3c
 80026ce:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80026d0:	233c      	movs	r3, #60	@ 0x3c
 80026d2:	873b      	strh	r3, [r7, #56]	@ 0x38
    const uint16_t start_x = 20, start_y = 50;
 80026d4:	2314      	movs	r3, #20
 80026d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80026d8:	2332      	movs	r3, #50	@ 0x32
 80026da:	86bb      	strh	r3, [r7, #52]	@ 0x34
    const uint16_t gap = 10;
 80026dc:	230a      	movs	r3, #10
 80026de:	867b      	strh	r3, [r7, #50]	@ 0x32

    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295
 80026e4:	f001 fd62 	bl	80041ac <BSP_LCD_Clear>
    BSP_LCD_SetFont(&Font24);
 80026e8:	4881      	ldr	r0, [pc, #516]	@ (80028f0 <change_pin+0x230>)
 80026ea:	f001 fd45 	bl	8004178 <BSP_LCD_SetFont>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80026ee:	f04f 30ff 	mov.w	r0, #4294967295
 80026f2:	f001 fd27 	bl	8004144 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80026f6:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80026fa:	f001 fd0b 	bl	8004114 <BSP_LCD_SetTextColor>

    // Zeichne Tastenfeld
    char label[2] = {'0', '\0'};
 80026fe:	2330      	movs	r3, #48	@ 0x30
 8002700:	80bb      	strh	r3, [r7, #4]
    for (uint8_t i = 1; i <= 9; i++) {
 8002702:	2301      	movs	r3, #1
 8002704:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8002708:	e046      	b.n	8002798 <change_pin+0xd8>
        uint16_t row = (i - 1) / 3;
 800270a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800270e:	3b01      	subs	r3, #1
 8002710:	4a78      	ldr	r2, [pc, #480]	@ (80028f4 <change_pin+0x234>)
 8002712:	fb82 1203 	smull	r1, r2, r2, r3
 8002716:	17db      	asrs	r3, r3, #31
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	833b      	strh	r3, [r7, #24]
        uint16_t col = (i - 1) % 3;
 800271c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002720:	1e5a      	subs	r2, r3, #1
 8002722:	4b74      	ldr	r3, [pc, #464]	@ (80028f4 <change_pin+0x234>)
 8002724:	fb83 3102 	smull	r3, r1, r3, r2
 8002728:	17d3      	asrs	r3, r2, #31
 800272a:	1ac9      	subs	r1, r1, r3
 800272c:	460b      	mov	r3, r1
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	440b      	add	r3, r1
 8002732:	1ad1      	subs	r1, r2, r3
 8002734:	460b      	mov	r3, r1
 8002736:	82fb      	strh	r3, [r7, #22]
        uint16_t x = start_x + col * (btn_w + gap);
 8002738:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800273a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800273c:	4413      	add	r3, r2
 800273e:	b29b      	uxth	r3, r3
 8002740:	8afa      	ldrh	r2, [r7, #22]
 8002742:	fb12 f303 	smulbb	r3, r2, r3
 8002746:	b29a      	uxth	r2, r3
 8002748:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800274a:	4413      	add	r3, r2
 800274c:	82bb      	strh	r3, [r7, #20]
        uint16_t y = start_y + row * (btn_h + gap);
 800274e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002750:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002752:	4413      	add	r3, r2
 8002754:	b29b      	uxth	r3, r3
 8002756:	8b3a      	ldrh	r2, [r7, #24]
 8002758:	fb12 f303 	smulbb	r3, r2, r3
 800275c:	b29a      	uxth	r2, r3
 800275e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002760:	4413      	add	r3, r2
 8002762:	827b      	strh	r3, [r7, #18]
        BSP_LCD_DrawRect(x, y, btn_w, btn_h);
 8002764:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002766:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8002768:	8a79      	ldrh	r1, [r7, #18]
 800276a:	8ab8      	ldrh	r0, [r7, #20]
 800276c:	f001 ff18 	bl	80045a0 <BSP_LCD_DrawRect>
        label[0] = '0' + i;
 8002770:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002774:	3330      	adds	r3, #48	@ 0x30
 8002776:	b2db      	uxtb	r3, r3
 8002778:	713b      	strb	r3, [r7, #4]
        BSP_LCD_DisplayStringAt(x + 20, y + 20, (uint8_t *)label, LEFT_MODE);
 800277a:	8abb      	ldrh	r3, [r7, #20]
 800277c:	3314      	adds	r3, #20
 800277e:	b298      	uxth	r0, r3
 8002780:	8a7b      	ldrh	r3, [r7, #18]
 8002782:	3314      	adds	r3, #20
 8002784:	b299      	uxth	r1, r3
 8002786:	1d3a      	adds	r2, r7, #4
 8002788:	2303      	movs	r3, #3
 800278a:	f001 fd7b 	bl	8004284 <BSP_LCD_DisplayStringAt>
    for (uint8_t i = 1; i <= 9; i++) {
 800278e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002792:	3301      	adds	r3, #1
 8002794:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8002798:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800279c:	2b09      	cmp	r3, #9
 800279e:	d9b4      	bls.n	800270a <change_pin+0x4a>
    }

    // Taste 0
    BSP_LCD_DrawRect(start_x + btn_w + gap, start_y + 3 * (btn_h + gap), btn_w, btn_h);
 80027a0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80027a2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80027a4:	4413      	add	r3, r2
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80027aa:	4413      	add	r3, r2
 80027ac:	b298      	uxth	r0, r3
 80027ae:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80027b0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80027b2:	4413      	add	r3, r2
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	0052      	lsls	r2, r2, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	b29a      	uxth	r2, r3
 80027be:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80027c0:	4413      	add	r3, r2
 80027c2:	b299      	uxth	r1, r3
 80027c4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80027c6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80027c8:	f001 feea 	bl	80045a0 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(start_x + btn_w + gap + 20, start_y + 3 * (btn_h + gap) + 20, (uint8_t *)"0", LEFT_MODE);
 80027cc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80027ce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80027d0:	4413      	add	r3, r2
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80027d6:	4413      	add	r3, r2
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3314      	adds	r3, #20
 80027dc:	b298      	uxth	r0, r3
 80027de:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80027e0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80027e2:	4413      	add	r3, r2
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	0052      	lsls	r2, r2, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80027f0:	4413      	add	r3, r2
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3314      	adds	r3, #20
 80027f6:	b299      	uxth	r1, r3
 80027f8:	2303      	movs	r3, #3
 80027fa:	4a3f      	ldr	r2, [pc, #252]	@ (80028f8 <change_pin+0x238>)
 80027fc:	f001 fd42 	bl	8004284 <BSP_LCD_DisplayStringAt>

    // OK-Taste
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8002800:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8002804:	f001 fc86 	bl	8004114 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawRect(start_x, start_y + 3 * (btn_h + gap), btn_w, btn_h);
 8002808:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800280a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800280c:	4413      	add	r3, r2
 800280e:	b29b      	uxth	r3, r3
 8002810:	461a      	mov	r2, r3
 8002812:	0052      	lsls	r2, r2, #1
 8002814:	4413      	add	r3, r2
 8002816:	b29a      	uxth	r2, r3
 8002818:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800281a:	4413      	add	r3, r2
 800281c:	b299      	uxth	r1, r3
 800281e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002820:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8002822:	8ef8      	ldrh	r0, [r7, #54]	@ 0x36
 8002824:	f001 febc 	bl	80045a0 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(start_x + 10, start_y + 3 * (btn_h + gap) + 20, (uint8_t *)"OK", LEFT_MODE);
 8002828:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800282a:	330a      	adds	r3, #10
 800282c:	b298      	uxth	r0, r3
 800282e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002830:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002832:	4413      	add	r3, r2
 8002834:	b29b      	uxth	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	0052      	lsls	r2, r2, #1
 800283a:	4413      	add	r3, r2
 800283c:	b29a      	uxth	r2, r3
 800283e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002840:	4413      	add	r3, r2
 8002842:	b29b      	uxth	r3, r3
 8002844:	3314      	adds	r3, #20
 8002846:	b299      	uxth	r1, r3
 8002848:	2303      	movs	r3, #3
 800284a:	4a2c      	ldr	r2, [pc, #176]	@ (80028fc <change_pin+0x23c>)
 800284c:	f001 fd1a 	bl	8004284 <BSP_LCD_DisplayStringAt>

    // CLR-Taste
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002850:	482b      	ldr	r0, [pc, #172]	@ (8002900 <change_pin+0x240>)
 8002852:	f001 fc5f 	bl	8004114 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawRect(start_x + 2 * (btn_w + gap), start_y + 3 * (btn_h + gap), btn_w, btn_h);
 8002856:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8002858:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800285a:	4413      	add	r3, r2
 800285c:	b29b      	uxth	r3, r3
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002864:	4413      	add	r3, r2
 8002866:	b298      	uxth	r0, r3
 8002868:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800286a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800286c:	4413      	add	r3, r2
 800286e:	b29b      	uxth	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	0052      	lsls	r2, r2, #1
 8002874:	4413      	add	r3, r2
 8002876:	b29a      	uxth	r2, r3
 8002878:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800287a:	4413      	add	r3, r2
 800287c:	b299      	uxth	r1, r3
 800287e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002880:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8002882:	f001 fe8d 	bl	80045a0 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(start_x + 10 + 2 * (btn_w + gap), start_y + 3 * (btn_h + gap) + 20, (uint8_t *)"CLR", LEFT_MODE);
 8002886:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8002888:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800288a:	4413      	add	r3, r2
 800288c:	b29b      	uxth	r3, r3
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002894:	4413      	add	r3, r2
 8002896:	b29b      	uxth	r3, r3
 8002898:	330a      	adds	r3, #10
 800289a:	b298      	uxth	r0, r3
 800289c:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800289e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80028a0:	4413      	add	r3, r2
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	0052      	lsls	r2, r2, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80028ae:	4413      	add	r3, r2
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3314      	adds	r3, #20
 80028b4:	b299      	uxth	r1, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4a12      	ldr	r2, [pc, #72]	@ (8002904 <change_pin+0x244>)
 80028ba:	f001 fce3 	bl	8004284 <BSP_LCD_DisplayStringAt>

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80028be:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80028c2:	f001 fc27 	bl	8004114 <BSP_LCD_SetTextColor>

    while (1) {
        BSP_TS_GetState(&TS_State);
 80028c6:	f107 0308 	add.w	r3, r7, #8
 80028ca:	4618      	mov	r0, r3
 80028cc:	f002 fb50 	bl	8004f70 <BSP_TS_GetState>
        if (TS_State.TouchDetected) {
 80028d0:	893b      	ldrh	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f7      	beq.n	80028c6 <change_pin+0x206>
            HAL_Delay(150); // Debounce
 80028d6:	2096      	movs	r0, #150	@ 0x96
 80028d8:	f002 fc82 	bl	80051e0 <HAL_Delay>
            uint16_t tx = 240 - TS_State.X;
 80028dc:	897b      	ldrh	r3, [r7, #10]
 80028de:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80028e2:	863b      	strh	r3, [r7, #48]	@ 0x30
            uint16_t ty = TS_State.Y;
 80028e4:	89bb      	ldrh	r3, [r7, #12]
 80028e6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            // Prüfe Zahlen-Buttons
            for (uint8_t i = 1; i <= 9; i++) {
 80028e8:	2301      	movs	r3, #1
 80028ea:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80028ee:	e066      	b.n	80029be <change_pin+0x2fe>
 80028f0:	20000094 	.word	0x20000094
 80028f4:	55555556 	.word	0x55555556
 80028f8:	0800b5a8 	.word	0x0800b5a8
 80028fc:	0800b5ac 	.word	0x0800b5ac
 8002900:	ffff0000 	.word	0xffff0000
 8002904:	0800b5b0 	.word	0x0800b5b0
                uint16_t row = (i - 1) / 3;
 8002908:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800290c:	3b01      	subs	r3, #1
 800290e:	4a8a      	ldr	r2, [pc, #552]	@ (8002b38 <change_pin+0x478>)
 8002910:	fb82 1203 	smull	r1, r2, r2, r3
 8002914:	17db      	asrs	r3, r3, #31
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	843b      	strh	r3, [r7, #32]
                uint16_t col = (i - 1) % 3;
 800291a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800291e:	1e5a      	subs	r2, r3, #1
 8002920:	4b85      	ldr	r3, [pc, #532]	@ (8002b38 <change_pin+0x478>)
 8002922:	fb83 3102 	smull	r3, r1, r3, r2
 8002926:	17d3      	asrs	r3, r2, #31
 8002928:	1ac9      	subs	r1, r1, r3
 800292a:	460b      	mov	r3, r1
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	440b      	add	r3, r1
 8002930:	1ad1      	subs	r1, r2, r3
 8002932:	460b      	mov	r3, r1
 8002934:	83fb      	strh	r3, [r7, #30]
                uint16_t x = start_x + col * (btn_w + gap);
 8002936:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8002938:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800293a:	4413      	add	r3, r2
 800293c:	b29b      	uxth	r3, r3
 800293e:	8bfa      	ldrh	r2, [r7, #30]
 8002940:	fb12 f303 	smulbb	r3, r2, r3
 8002944:	b29a      	uxth	r2, r3
 8002946:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002948:	4413      	add	r3, r2
 800294a:	83bb      	strh	r3, [r7, #28]
                uint16_t y = start_y + row * (btn_h + gap);
 800294c:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800294e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002950:	4413      	add	r3, r2
 8002952:	b29b      	uxth	r3, r3
 8002954:	8c3a      	ldrh	r2, [r7, #32]
 8002956:	fb12 f303 	smulbb	r3, r2, r3
 800295a:	b29a      	uxth	r2, r3
 800295c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800295e:	4413      	add	r3, r2
 8002960:	837b      	strh	r3, [r7, #26]
                if (tx >= x && tx <= x + btn_w && ty >= y && ty <= y + btn_h) {
 8002962:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002964:	8bbb      	ldrh	r3, [r7, #28]
 8002966:	429a      	cmp	r2, r3
 8002968:	d324      	bcc.n	80029b4 <change_pin+0x2f4>
 800296a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800296c:	8bb9      	ldrh	r1, [r7, #28]
 800296e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002970:	440b      	add	r3, r1
 8002972:	429a      	cmp	r2, r3
 8002974:	dc1e      	bgt.n	80029b4 <change_pin+0x2f4>
 8002976:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002978:	8b7b      	ldrh	r3, [r7, #26]
 800297a:	429a      	cmp	r2, r3
 800297c:	d31a      	bcc.n	80029b4 <change_pin+0x2f4>
 800297e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002980:	8b79      	ldrh	r1, [r7, #26]
 8002982:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002984:	440b      	add	r3, r1
 8002986:	429a      	cmp	r2, r3
 8002988:	dc14      	bgt.n	80029b4 <change_pin+0x2f4>
                    if (pin_index < PIN_MAX_LEN) {
 800298a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800298e:	2b05      	cmp	r3, #5
 8002990:	d810      	bhi.n	80029b4 <change_pin+0x2f4>
                        new_pin[pin_index++] = '0' + i;
 8002992:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800299c:	461a      	mov	r2, r3
 800299e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80029a2:	3330      	adds	r3, #48	@ 0x30
 80029a4:	b2d9      	uxtb	r1, r3
 80029a6:	4b65      	ldr	r3, [pc, #404]	@ (8002b3c <change_pin+0x47c>)
 80029a8:	5499      	strb	r1, [r3, r2]
                        new_pin[pin_index] = '\0';
 80029aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80029ae:	4a63      	ldr	r2, [pc, #396]	@ (8002b3c <change_pin+0x47c>)
 80029b0:	2100      	movs	r1, #0
 80029b2:	54d1      	strb	r1, [r2, r3]
            for (uint8_t i = 1; i <= 9; i++) {
 80029b4:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80029b8:	3301      	adds	r3, #1
 80029ba:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80029be:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80029c2:	2b09      	cmp	r3, #9
 80029c4:	d9a0      	bls.n	8002908 <change_pin+0x248>
                    }
                }
            }

            // Taste 0
            uint16_t x0 = start_x + btn_w + gap;
 80029c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80029c8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80029ca:	4413      	add	r3, r2
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80029d0:	4413      	add	r3, r2
 80029d2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            uint16_t y0 = start_y + 3 * (btn_h + gap);
 80029d4:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80029d6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80029d8:	4413      	add	r3, r2
 80029da:	b29b      	uxth	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	0052      	lsls	r2, r2, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80029e6:	4413      	add	r3, r2
 80029e8:	857b      	strh	r3, [r7, #42]	@ 0x2a
            if (tx >= x0 && tx <= x0 + btn_w && ty >= y0 && ty <= y0 + btn_h) {
 80029ea:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80029ec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d321      	bcc.n	8002a36 <change_pin+0x376>
 80029f2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80029f4:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 80029f6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80029f8:	440b      	add	r3, r1
 80029fa:	429a      	cmp	r2, r3
 80029fc:	dc1b      	bgt.n	8002a36 <change_pin+0x376>
 80029fe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002a00:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d317      	bcc.n	8002a36 <change_pin+0x376>
 8002a06:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002a08:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8002a0a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002a0c:	440b      	add	r3, r1
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	dc11      	bgt.n	8002a36 <change_pin+0x376>
                if (pin_index < PIN_MAX_LEN) {
 8002a12:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a16:	2b05      	cmp	r3, #5
 8002a18:	d80d      	bhi.n	8002a36 <change_pin+0x376>
                    new_pin[pin_index++] = '0';
 8002a1a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8002a24:	461a      	mov	r2, r3
 8002a26:	4b45      	ldr	r3, [pc, #276]	@ (8002b3c <change_pin+0x47c>)
 8002a28:	2130      	movs	r1, #48	@ 0x30
 8002a2a:	5499      	strb	r1, [r3, r2]
                    new_pin[pin_index] = '\0';
 8002a2c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a30:	4a42      	ldr	r2, [pc, #264]	@ (8002b3c <change_pin+0x47c>)
 8002a32:	2100      	movs	r1, #0
 8002a34:	54d1      	strb	r1, [r2, r3]
                }
            }

            // OK-Taste
            uint16_t ok_x = start_x;
 8002a36:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002a38:	853b      	strh	r3, [r7, #40]	@ 0x28
            uint16_t ok_y = start_y + 3 * (btn_h + gap);
 8002a3a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002a3c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002a3e:	4413      	add	r3, r2
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	461a      	mov	r2, r3
 8002a44:	0052      	lsls	r2, r2, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002a4c:	4413      	add	r3, r2
 8002a4e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            if (tx >= ok_x && tx <= ok_x + btn_w && ty >= ok_y && ty <= ok_y + btn_h) {
 8002a50:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002a52:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d31b      	bcc.n	8002a90 <change_pin+0x3d0>
 8002a58:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002a5a:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8002a5c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002a5e:	440b      	add	r3, r1
 8002a60:	429a      	cmp	r2, r3
 8002a62:	dc15      	bgt.n	8002a90 <change_pin+0x3d0>
 8002a64:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002a66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d311      	bcc.n	8002a90 <change_pin+0x3d0>
 8002a6c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002a6e:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8002a70:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002a72:	440b      	add	r3, r1
 8002a74:	429a      	cmp	r2, r3
 8002a76:	dc0b      	bgt.n	8002a90 <change_pin+0x3d0>
                if (pin_index >= PIN_MIN_LEN) {
 8002a78:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d901      	bls.n	8002a84 <change_pin+0x3c4>
                    return new_pin;
 8002a80:	4b2e      	ldr	r3, [pc, #184]	@ (8002b3c <change_pin+0x47c>)
 8002a82:	e054      	b.n	8002b2e <change_pin+0x46e>
                } else {
                    BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"PIN zu kurz!", CENTER_MODE);
 8002a84:	2301      	movs	r3, #1
 8002a86:	4a2e      	ldr	r2, [pc, #184]	@ (8002b40 <change_pin+0x480>)
 8002a88:	210a      	movs	r1, #10
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f001 fbfa 	bl	8004284 <BSP_LCD_DisplayStringAt>
                }
            }

            // CLR-Taste
            uint16_t clr_x = start_x + 2 * (btn_w + gap);
 8002a90:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8002a92:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002a94:	4413      	add	r3, r2
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002a9e:	4413      	add	r3, r2
 8002aa0:	84bb      	strh	r3, [r7, #36]	@ 0x24
            uint16_t clr_y = start_y + 3 * (btn_h + gap);
 8002aa2:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002aa4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002aa6:	4413      	add	r3, r2
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	0052      	lsls	r2, r2, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002ab4:	4413      	add	r3, r2
 8002ab6:	847b      	strh	r3, [r7, #34]	@ 0x22
            if (tx >= clr_x && tx <= clr_x + btn_w && ty >= clr_y && ty <= clr_y + btn_h) {
 8002ab8:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002aba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d31f      	bcc.n	8002b00 <change_pin+0x440>
 8002ac0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002ac2:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8002ac4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002ac6:	440b      	add	r3, r1
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	dc19      	bgt.n	8002b00 <change_pin+0x440>
 8002acc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002ace:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d315      	bcc.n	8002b00 <change_pin+0x440>
 8002ad4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002ad6:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8002ad8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002ada:	440b      	add	r3, r1
 8002adc:	429a      	cmp	r2, r3
 8002ade:	dc0f      	bgt.n	8002b00 <change_pin+0x440>
                memset(new_pin, 0, sizeof(new_pin));
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4815      	ldr	r0, [pc, #84]	@ (8002b3c <change_pin+0x47c>)
 8002ae6:	f008 f849 	bl	800ab7c <memset>
                pin_index = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                BSP_LCD_FillRect(0, 0, xSize, 30);  // PIN-Anzeige löschen
 8002af0:	4b14      	ldr	r3, [pc, #80]	@ (8002b44 <change_pin+0x484>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	231e      	movs	r3, #30
 8002af8:	2100      	movs	r1, #0
 8002afa:	2000      	movs	r0, #0
 8002afc:	f001 fd82 	bl	8004604 <BSP_LCD_FillRect>
            }

            // Eingabeanzeige aktualisieren
            BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002b00:	f04f 30ff 	mov.w	r0, #4294967295
 8002b04:	f001 fb06 	bl	8004114 <BSP_LCD_SetTextColor>
            BSP_LCD_FillRect(0, 0, xSize, 30);
 8002b08:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <change_pin+0x484>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	231e      	movs	r3, #30
 8002b10:	2100      	movs	r1, #0
 8002b12:	2000      	movs	r0, #0
 8002b14:	f001 fd76 	bl	8004604 <BSP_LCD_FillRect>
            BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002b18:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002b1c:	f001 fafa 	bl	8004114 <BSP_LCD_SetTextColor>
            BSP_LCD_DisplayStringAt(0, 3, (uint8_t *)new_pin, LEFT_MODE);
 8002b20:	2303      	movs	r3, #3
 8002b22:	4a06      	ldr	r2, [pc, #24]	@ (8002b3c <change_pin+0x47c>)
 8002b24:	2103      	movs	r1, #3
 8002b26:	2000      	movs	r0, #0
 8002b28:	f001 fbac 	bl	8004284 <BSP_LCD_DisplayStringAt>
        BSP_TS_GetState(&TS_State);
 8002b2c:	e6cb      	b.n	80028c6 <change_pin+0x206>
        }
    }
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3740      	adds	r7, #64	@ 0x40
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	55555556 	.word	0x55555556
 8002b3c:	20000584 	.word	0x20000584
 8002b40:	0800b5bc 	.word	0x0800b5bc
 8002b44:	20000010 	.word	0x20000010

08002b48 <start_countdown>:
#include <stdio.h>

uint32_t countdown_start = 0;
uint32_t countdown_last_update = 0;
int32_t countdown_remaining = 30;  // Sekunden
void start_countdown(uint8_t timer) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
    countdown_start = HAL_GetTick();
 8002b52:	f002 fb39 	bl	80051c8 <HAL_GetTick>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4a06      	ldr	r2, [pc, #24]	@ (8002b74 <start_countdown+0x2c>)
 8002b5a:	6013      	str	r3, [r2, #0]
    countdown_last_update = countdown_start;
 8002b5c:	4b05      	ldr	r3, [pc, #20]	@ (8002b74 <start_countdown+0x2c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a05      	ldr	r2, [pc, #20]	@ (8002b78 <start_countdown+0x30>)
 8002b62:	6013      	str	r3, [r2, #0]
    countdown_remaining = timer;
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	4a05      	ldr	r2, [pc, #20]	@ (8002b7c <start_countdown+0x34>)
 8002b68:	6013      	str	r3, [r2, #0]
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2000058c 	.word	0x2000058c
 8002b78:	20000590 	.word	0x20000590
 8002b7c:	2000001c 	.word	0x2000001c

08002b80 <update_countdown>:
uint16_t update_countdown() {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	@ 0x28
 8002b84:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 8002b86:	f002 fb1f 	bl	80051c8 <HAL_GetTick>
 8002b8a:	6278      	str	r0, [r7, #36]	@ 0x24

    // Alle 1000 ms aktualisieren
    if (now - countdown_last_update >= 1000) {
 8002b8c:	4b18      	ldr	r3, [pc, #96]	@ (8002bf0 <update_countdown+0x70>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b98:	d322      	bcc.n	8002be0 <update_countdown+0x60>
        countdown_remaining--;
 8002b9a:	4b16      	ldr	r3, [pc, #88]	@ (8002bf4 <update_countdown+0x74>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	4a14      	ldr	r2, [pc, #80]	@ (8002bf4 <update_countdown+0x74>)
 8002ba2:	6013      	str	r3, [r2, #0]
        countdown_last_update = now;
 8002ba4:	4a12      	ldr	r2, [pc, #72]	@ (8002bf0 <update_countdown+0x70>)
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	6013      	str	r3, [r2, #0]

        // Anzeige aktualisieren
        char buffer[32];
        snprintf(buffer, sizeof(buffer), "%lds", countdown_remaining);
 8002baa:	4b12      	ldr	r3, [pc, #72]	@ (8002bf4 <update_countdown+0x74>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	1d38      	adds	r0, r7, #4
 8002bb0:	4a11      	ldr	r2, [pc, #68]	@ (8002bf8 <update_countdown+0x78>)
 8002bb2:	2120      	movs	r1, #32
 8002bb4:	f007 ffac 	bl	800ab10 <sniprintf>
        BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbc:	f001 fac2 	bl	8004144 <BSP_LCD_SetBackColor>
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002bc0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002bc4:	f001 faa6 	bl	8004114 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(0, 3, (uint8_t *)"   ", RIGHT_MODE);
 8002bc8:	2302      	movs	r3, #2
 8002bca:	4a0c      	ldr	r2, [pc, #48]	@ (8002bfc <update_countdown+0x7c>)
 8002bcc:	2103      	movs	r1, #3
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f001 fb58 	bl	8004284 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0, 3, (uint8_t *)buffer, RIGHT_MODE);
 8002bd4:	1d3a      	adds	r2, r7, #4
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	2103      	movs	r1, #3
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f001 fb52 	bl	8004284 <BSP_LCD_DisplayStringAt>
    }
    return countdown_remaining;
 8002be0:	4b04      	ldr	r3, [pc, #16]	@ (8002bf4 <update_countdown+0x74>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	b29b      	uxth	r3, r3
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3728      	adds	r7, #40	@ 0x28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000590 	.word	0x20000590
 8002bf4:	2000001c 	.word	0x2000001c
 8002bf8:	0800b5cc 	.word	0x0800b5cc
 8002bfc:	0800b5d4 	.word	0x0800b5d4

08002c00 <__NVIC_EnableIRQ>:
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	db0b      	blt.n	8002c2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	f003 021f 	and.w	r2, r3, #31
 8002c18:	4907      	ldr	r1, [pc, #28]	@ (8002c38 <__NVIC_EnableIRQ+0x38>)
 8002c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	2001      	movs	r0, #1
 8002c22:	fa00 f202 	lsl.w	r2, r0, r2
 8002c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	e000e100 	.word	0xe000e100

08002c3c <__NVIC_ClearPendingIRQ>:
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	db0c      	blt.n	8002c68 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	f003 021f 	and.w	r2, r3, #31
 8002c54:	4907      	ldr	r1, [pc, #28]	@ (8002c74 <__NVIC_ClearPendingIRQ+0x38>)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c62:	3360      	adds	r3, #96	@ 0x60
 8002c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000e100 	.word	0xe000e100

08002c78 <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8002c7e:	2300      	movs	r3, #0
 8002c80:	607b      	str	r3, [r7, #4]
 8002c82:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <PB_init+0x38>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb0 <PB_init+0x38>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c8e:	4b08      	ldr	r3, [pc, #32]	@ (8002cb0 <PB_init+0x38>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	607b      	str	r3, [r7, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8002c9a:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <PB_init+0x3c>)
 8002c9c:	4a05      	ldr	r2, [pc, #20]	@ (8002cb4 <PB_init+0x3c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6013      	str	r3, [r2, #0]
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40020000 	.word	0x40020000

08002cb8 <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
 8002cc2:	4b13      	ldr	r3, [pc, #76]	@ (8002d10 <PB_enableIRQ+0x58>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc6:	4a12      	ldr	r2, [pc, #72]	@ (8002d10 <PB_enableIRQ+0x58>)
 8002cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cce:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <PB_enableIRQ+0x58>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 8002cda:	4b0e      	ldr	r3, [pc, #56]	@ (8002d14 <PB_enableIRQ+0x5c>)
 8002cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d14 <PB_enableIRQ+0x5c>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d18 <PB_enableIRQ+0x60>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	4a0c      	ldr	r2, [pc, #48]	@ (8002d18 <PB_enableIRQ+0x60>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 8002cee:	4b0a      	ldr	r3, [pc, #40]	@ (8002d18 <PB_enableIRQ+0x60>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a09      	ldr	r2, [pc, #36]	@ (8002d18 <PB_enableIRQ+0x60>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 8002cfa:	2006      	movs	r0, #6
 8002cfc:	f7ff ff9e 	bl	8002c3c <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8002d00:	2006      	movs	r0, #6
 8002d02:	f7ff ff7d 	bl	8002c00 <__NVIC_EnableIRQ>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40013800 	.word	0x40013800
 8002d18:	40013c00 	.word	0x40013c00

08002d1c <PB_pressed>:
 * @brief Was the pushbutton pressed?
 *
 * @return true if pushbutton was pressed
 *****************************************************************************/
bool PB_pressed(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
	bool pressed = PB_pressed_flag;		// Read/store value of flag
 8002d22:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <PB_pressed+0x20>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	71fb      	strb	r3, [r7, #7]
	PB_pressed_flag = false;			// Reset flag
 8002d28:	4b04      	ldr	r3, [pc, #16]	@ (8002d3c <PB_pressed+0x20>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
	return pressed;
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	20000594 	.word	0x20000594

08002d40 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 8002d44:	4b09      	ldr	r3, [pc, #36]	@ (8002d6c <EXTI0_IRQHandler+0x2c>)
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d008      	beq.n	8002d62 <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8002d50:	4b06      	ldr	r3, [pc, #24]	@ (8002d6c <EXTI0_IRQHandler+0x2c>)
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	4a05      	ldr	r2, [pc, #20]	@ (8002d6c <EXTI0_IRQHandler+0x2c>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8002d5c:	4b04      	ldr	r3, [pc, #16]	@ (8002d70 <EXTI0_IRQHandler+0x30>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
	}
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	40013c00 	.word	0x40013c00
 8002d70:	20000594 	.word	0x20000594

08002d74 <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 8002d86:	bf00      	nop
 8002d88:	e7fd      	b.n	8002d86 <HardFault_Handler+0x4>

08002d8a <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 8002d8e:	bf00      	nop
 8002d90:	e7fd      	b.n	8002d8e <MemManage_Handler+0x4>

08002d92 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 8002d96:	bf00      	nop
 8002d98:	e7fd      	b.n	8002d96 <BusFault_Handler+0x4>

08002d9a <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 8002d9e:	bf00      	nop
 8002da0:	e7fd      	b.n	8002d9e <UsageFault_Handler+0x4>

08002da2 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8002da2:	b480      	push	{r7}
 8002da4:	af00      	add	r7, sp, #0
}
 8002da6:	bf00      	nop
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
}
 8002dc2:	bf00      	nop
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8002dd0:	f002 f9e6 	bl	80051a0 <HAL_IncTick>
}
 8002dd4:	bf00      	nop
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ddc:	4b16      	ldr	r3, [pc, #88]	@ (8002e38 <SystemInit+0x60>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de2:	4a15      	ldr	r2, [pc, #84]	@ (8002e38 <SystemInit+0x60>)
 8002de4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002de8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002dec:	4b13      	ldr	r3, [pc, #76]	@ (8002e3c <SystemInit+0x64>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a12      	ldr	r2, [pc, #72]	@ (8002e3c <SystemInit+0x64>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002df8:	4b10      	ldr	r3, [pc, #64]	@ (8002e3c <SystemInit+0x64>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8002e3c <SystemInit+0x64>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a0e      	ldr	r2, [pc, #56]	@ (8002e3c <SystemInit+0x64>)
 8002e04:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8002e08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e0c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e3c <SystemInit+0x64>)
 8002e10:	4a0b      	ldr	r2, [pc, #44]	@ (8002e40 <SystemInit+0x68>)
 8002e12:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e14:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <SystemInit+0x64>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a08      	ldr	r2, [pc, #32]	@ (8002e3c <SystemInit+0x64>)
 8002e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002e20:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <SystemInit+0x64>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e26:	4b04      	ldr	r3, [pc, #16]	@ (8002e38 <SystemInit+0x60>)
 8002e28:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e2c:	609a      	str	r2, [r3, #8]
#endif
}
 8002e2e:	bf00      	nop
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000ed00 	.word	0xe000ed00
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	24003010 	.word	0x24003010

08002e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002e44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e7c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e4a:	e003      	b.n	8002e54 <LoopCopyDataInit>

08002e4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e52:	3104      	adds	r1, #4

08002e54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e54:	480b      	ldr	r0, [pc, #44]	@ (8002e84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e56:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e5c:	d3f6      	bcc.n	8002e4c <CopyDataInit>
  ldr  r2, =_sbss
 8002e5e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e60:	e002      	b.n	8002e68 <LoopFillZerobss>

08002e62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e64:	f842 3b04 	str.w	r3, [r2], #4

08002e68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e68:	4b09      	ldr	r3, [pc, #36]	@ (8002e90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e6c:	d3f9      	bcc.n	8002e62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e6e:	f7ff ffb3 	bl	8002dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e72:	f007 fe8b 	bl	800ab8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e76:	f7fd fce3 	bl	8000840 <main>
  bx  lr    
 8002e7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002e7c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002e80:	080234b8 	.word	0x080234b8
  ldr  r0, =_sdata
 8002e84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e88:	20000100 	.word	0x20000100
  ldr  r2, =_sbss
 8002e8c:	20000100 	.word	0x20000100
  ldr  r3, = _ebss
 8002e90:	200009a8 	.word	0x200009a8

08002e94 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e94:	e7fe      	b.n	8002e94 <CAN1_RX0_IRQHandler>

08002e96 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002e9a:	f000 feed 	bl	8003c78 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002e9e:	20ca      	movs	r0, #202	@ 0xca
 8002ea0:	f000 f95d 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002ea4:	20c3      	movs	r0, #195	@ 0xc3
 8002ea6:	f000 f967 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002eaa:	2008      	movs	r0, #8
 8002eac:	f000 f964 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002eb0:	2050      	movs	r0, #80	@ 0x50
 8002eb2:	f000 f961 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002eb6:	20cf      	movs	r0, #207	@ 0xcf
 8002eb8:	f000 f951 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f000 f95b 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002ec2:	20c1      	movs	r0, #193	@ 0xc1
 8002ec4:	f000 f958 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002ec8:	2030      	movs	r0, #48	@ 0x30
 8002eca:	f000 f955 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002ece:	20ed      	movs	r0, #237	@ 0xed
 8002ed0:	f000 f945 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002ed4:	2064      	movs	r0, #100	@ 0x64
 8002ed6:	f000 f94f 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002eda:	2003      	movs	r0, #3
 8002edc:	f000 f94c 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002ee0:	2012      	movs	r0, #18
 8002ee2:	f000 f949 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002ee6:	2081      	movs	r0, #129	@ 0x81
 8002ee8:	f000 f946 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002eec:	20e8      	movs	r0, #232	@ 0xe8
 8002eee:	f000 f936 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002ef2:	2085      	movs	r0, #133	@ 0x85
 8002ef4:	f000 f940 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ef8:	2000      	movs	r0, #0
 8002efa:	f000 f93d 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002efe:	2078      	movs	r0, #120	@ 0x78
 8002f00:	f000 f93a 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002f04:	20cb      	movs	r0, #203	@ 0xcb
 8002f06:	f000 f92a 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002f0a:	2039      	movs	r0, #57	@ 0x39
 8002f0c:	f000 f934 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002f10:	202c      	movs	r0, #44	@ 0x2c
 8002f12:	f000 f931 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f16:	2000      	movs	r0, #0
 8002f18:	f000 f92e 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002f1c:	2034      	movs	r0, #52	@ 0x34
 8002f1e:	f000 f92b 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002f22:	2002      	movs	r0, #2
 8002f24:	f000 f928 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002f28:	20f7      	movs	r0, #247	@ 0xf7
 8002f2a:	f000 f918 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002f2e:	2020      	movs	r0, #32
 8002f30:	f000 f922 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002f34:	20ea      	movs	r0, #234	@ 0xea
 8002f36:	f000 f912 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f000 f91c 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f40:	2000      	movs	r0, #0
 8002f42:	f000 f919 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002f46:	20b1      	movs	r0, #177	@ 0xb1
 8002f48:	f000 f909 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f000 f913 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002f52:	201b      	movs	r0, #27
 8002f54:	f000 f910 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002f58:	20b6      	movs	r0, #182	@ 0xb6
 8002f5a:	f000 f900 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002f5e:	200a      	movs	r0, #10
 8002f60:	f000 f90a 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002f64:	20a2      	movs	r0, #162	@ 0xa2
 8002f66:	f000 f907 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002f6a:	20c0      	movs	r0, #192	@ 0xc0
 8002f6c:	f000 f8f7 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002f70:	2010      	movs	r0, #16
 8002f72:	f000 f901 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002f76:	20c1      	movs	r0, #193	@ 0xc1
 8002f78:	f000 f8f1 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002f7c:	2010      	movs	r0, #16
 8002f7e:	f000 f8fb 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002f82:	20c5      	movs	r0, #197	@ 0xc5
 8002f84:	f000 f8eb 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002f88:	2045      	movs	r0, #69	@ 0x45
 8002f8a:	f000 f8f5 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002f8e:	2015      	movs	r0, #21
 8002f90:	f000 f8f2 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002f94:	20c7      	movs	r0, #199	@ 0xc7
 8002f96:	f000 f8e2 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002f9a:	2090      	movs	r0, #144	@ 0x90
 8002f9c:	f000 f8ec 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002fa0:	2036      	movs	r0, #54	@ 0x36
 8002fa2:	f000 f8dc 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002fa6:	20c8      	movs	r0, #200	@ 0xc8
 8002fa8:	f000 f8e6 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002fac:	20f2      	movs	r0, #242	@ 0xf2
 8002fae:	f000 f8d6 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	f000 f8e0 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002fb8:	20b0      	movs	r0, #176	@ 0xb0
 8002fba:	f000 f8d0 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002fbe:	20c2      	movs	r0, #194	@ 0xc2
 8002fc0:	f000 f8da 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002fc4:	20b6      	movs	r0, #182	@ 0xb6
 8002fc6:	f000 f8ca 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002fca:	200a      	movs	r0, #10
 8002fcc:	f000 f8d4 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002fd0:	20a7      	movs	r0, #167	@ 0xa7
 8002fd2:	f000 f8d1 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002fd6:	2027      	movs	r0, #39	@ 0x27
 8002fd8:	f000 f8ce 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002fdc:	2004      	movs	r0, #4
 8002fde:	f000 f8cb 	bl	8003178 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002fe2:	202a      	movs	r0, #42	@ 0x2a
 8002fe4:	f000 f8bb 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f000 f8c5 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002fee:	2000      	movs	r0, #0
 8002ff0:	f000 f8c2 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f000 f8bf 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002ffa:	20ef      	movs	r0, #239	@ 0xef
 8002ffc:	f000 f8bc 	bl	8003178 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8003000:	202b      	movs	r0, #43	@ 0x2b
 8003002:	f000 f8ac 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003006:	2000      	movs	r0, #0
 8003008:	f000 f8b6 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800300c:	2000      	movs	r0, #0
 800300e:	f000 f8b3 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8003012:	2001      	movs	r0, #1
 8003014:	f000 f8b0 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8003018:	203f      	movs	r0, #63	@ 0x3f
 800301a:	f000 f8ad 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800301e:	20f6      	movs	r0, #246	@ 0xf6
 8003020:	f000 f89d 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8003024:	2001      	movs	r0, #1
 8003026:	f000 f8a7 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800302a:	2000      	movs	r0, #0
 800302c:	f000 f8a4 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8003030:	2006      	movs	r0, #6
 8003032:	f000 f8a1 	bl	8003178 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8003036:	202c      	movs	r0, #44	@ 0x2c
 8003038:	f000 f891 	bl	800315e <ili9341_WriteReg>
  LCD_Delay(200);
 800303c:	20c8      	movs	r0, #200	@ 0xc8
 800303e:	f000 ff09 	bl	8003e54 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8003042:	2026      	movs	r0, #38	@ 0x26
 8003044:	f000 f88b 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8003048:	2001      	movs	r0, #1
 800304a:	f000 f895 	bl	8003178 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800304e:	20e0      	movs	r0, #224	@ 0xe0
 8003050:	f000 f885 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8003054:	200f      	movs	r0, #15
 8003056:	f000 f88f 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800305a:	2029      	movs	r0, #41	@ 0x29
 800305c:	f000 f88c 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8003060:	2024      	movs	r0, #36	@ 0x24
 8003062:	f000 f889 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003066:	200c      	movs	r0, #12
 8003068:	f000 f886 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800306c:	200e      	movs	r0, #14
 800306e:	f000 f883 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8003072:	2009      	movs	r0, #9
 8003074:	f000 f880 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8003078:	204e      	movs	r0, #78	@ 0x4e
 800307a:	f000 f87d 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800307e:	2078      	movs	r0, #120	@ 0x78
 8003080:	f000 f87a 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8003084:	203c      	movs	r0, #60	@ 0x3c
 8003086:	f000 f877 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800308a:	2009      	movs	r0, #9
 800308c:	f000 f874 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8003090:	2013      	movs	r0, #19
 8003092:	f000 f871 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8003096:	2005      	movs	r0, #5
 8003098:	f000 f86e 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800309c:	2017      	movs	r0, #23
 800309e:	f000 f86b 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80030a2:	2011      	movs	r0, #17
 80030a4:	f000 f868 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80030a8:	2000      	movs	r0, #0
 80030aa:	f000 f865 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80030ae:	20e1      	movs	r0, #225	@ 0xe1
 80030b0:	f000 f855 	bl	800315e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80030b4:	2000      	movs	r0, #0
 80030b6:	f000 f85f 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80030ba:	2016      	movs	r0, #22
 80030bc:	f000 f85c 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80030c0:	201b      	movs	r0, #27
 80030c2:	f000 f859 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80030c6:	2004      	movs	r0, #4
 80030c8:	f000 f856 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80030cc:	2011      	movs	r0, #17
 80030ce:	f000 f853 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80030d2:	2007      	movs	r0, #7
 80030d4:	f000 f850 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80030d8:	2031      	movs	r0, #49	@ 0x31
 80030da:	f000 f84d 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80030de:	2033      	movs	r0, #51	@ 0x33
 80030e0:	f000 f84a 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80030e4:	2042      	movs	r0, #66	@ 0x42
 80030e6:	f000 f847 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80030ea:	2005      	movs	r0, #5
 80030ec:	f000 f844 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80030f0:	200c      	movs	r0, #12
 80030f2:	f000 f841 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80030f6:	200a      	movs	r0, #10
 80030f8:	f000 f83e 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80030fc:	2028      	movs	r0, #40	@ 0x28
 80030fe:	f000 f83b 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8003102:	202f      	movs	r0, #47	@ 0x2f
 8003104:	f000 f838 	bl	8003178 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8003108:	200f      	movs	r0, #15
 800310a:	f000 f835 	bl	8003178 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800310e:	2011      	movs	r0, #17
 8003110:	f000 f825 	bl	800315e <ili9341_WriteReg>
  LCD_Delay(200);
 8003114:	20c8      	movs	r0, #200	@ 0xc8
 8003116:	f000 fe9d 	bl	8003e54 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800311a:	2029      	movs	r0, #41	@ 0x29
 800311c:	f000 f81f 	bl	800315e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8003120:	202c      	movs	r0, #44	@ 0x2c
 8003122:	f000 f81c 	bl	800315e <ili9341_WriteReg>
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}

0800312a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800312e:	f000 fda3 	bl	8003c78 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8003132:	2103      	movs	r1, #3
 8003134:	20d3      	movs	r0, #211	@ 0xd3
 8003136:	f000 f82c 	bl	8003192 <ili9341_ReadData>
 800313a:	4603      	mov	r3, r0
 800313c:	b29b      	uxth	r3, r3
}
 800313e:	4618      	mov	r0, r3
 8003140:	bd80      	pop	{r7, pc}

08003142 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8003146:	2029      	movs	r0, #41	@ 0x29
 8003148:	f000 f809 	bl	800315e <ili9341_WriteReg>
}
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}

08003150 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8003154:	2028      	movs	r0, #40	@ 0x28
 8003156:	f000 f802 	bl	800315e <ili9341_WriteReg>
}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}

0800315e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	4603      	mov	r3, r0
 8003166:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fe1e 	bl	8003dac <LCD_IO_WriteReg>
}
 8003170:	bf00      	nop
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fdef 	bl	8003d68 <LCD_IO_WriteData>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	4603      	mov	r3, r0
 800319a:	460a      	mov	r2, r1
 800319c:	80fb      	strh	r3, [r7, #6]
 800319e:	4613      	mov	r3, r2
 80031a0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80031a2:	797a      	ldrb	r2, [r7, #5]
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	4611      	mov	r1, r2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fe21 	bl	8003df0 <LCD_IO_ReadData>
 80031ae:	4603      	mov	r3, r0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80031bc:	23f0      	movs	r3, #240	@ 0xf0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80031cc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fa59 	bl	80036a0 <stmpe811_GetInstance>
 80031ee:	4603      	mov	r3, r0
 80031f0:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	2bff      	cmp	r3, #255	@ 0xff
 80031f6:	d112      	bne.n	800321e <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 80031f8:	2000      	movs	r0, #0
 80031fa:	f000 fa51 	bl	80036a0 <stmpe811_GetInstance>
 80031fe:	4603      	mov	r3, r0
 8003200:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8003202:	7bbb      	ldrb	r3, [r7, #14]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d80a      	bhi.n	800321e <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8003208:	7bbb      	ldrb	r3, [r7, #14]
 800320a:	88fa      	ldrh	r2, [r7, #6]
 800320c:	b2d1      	uxtb	r1, r2
 800320e:	4a06      	ldr	r2, [pc, #24]	@ (8003228 <stmpe811_Init+0x4c>)
 8003210:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8003212:	f000 fe2a 	bl	8003e6a <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	4618      	mov	r0, r3
 800321a:	f000 f807 	bl	800322c <stmpe811_Reset>
    }
  }
}
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000598 	.word	0x20000598

0800322c <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2202      	movs	r2, #2
 800323c:	2103      	movs	r1, #3
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fe1f 	bl	8003e82 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8003244:	200a      	movs	r0, #10
 8003246:	f000 fe58 	bl	8003efa <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2200      	movs	r2, #0
 8003250:	2103      	movs	r1, #3
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fe15 	bl	8003e82 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8003258:	2002      	movs	r0, #2
 800325a:	f000 fe4e 	bl	8003efa <IOE_Delay>
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8003266:	b590      	push	{r4, r7, lr}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	4603      	mov	r3, r0
 800326e:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8003270:	f000 fdfb 	bl	8003e6a <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2100      	movs	r1, #0
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fe14 	bl	8003ea8 <IOE_Read>
 8003280:	4603      	mov	r3, r0
 8003282:	b21b      	sxth	r3, r3
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2101      	movs	r1, #1
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fe0a 	bl	8003ea8 <IOE_Read>
 8003294:	4603      	mov	r3, r0
 8003296:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003298:	4323      	orrs	r3, r4
 800329a:	b21b      	sxth	r3, r3
 800329c:	b29b      	uxth	r3, r3
}
 800329e:	4618      	mov	r0, r3
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd90      	pop	{r4, r7, pc}

080032a6 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	4603      	mov	r3, r0
 80032ae:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80032b4:	88fb      	ldrh	r3, [r7, #6]
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2109      	movs	r1, #9
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fdf4 	bl	8003ea8 <IOE_Read>
 80032c0:	4603      	mov	r3, r0
 80032c2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	2109      	movs	r1, #9
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fdd4 	bl	8003e82 <IOE_Write>
}
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	4603      	mov	r3, r0
 80032ea:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2109      	movs	r1, #9
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fdd6 	bl	8003ea8 <IOE_Read>
 80032fc:	4603      	mov	r3, r0
 80032fe:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	f023 0301 	bic.w	r3, r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8003308:	88fb      	ldrh	r3, [r7, #6]
 800330a:	b2db      	uxtb	r3, r3
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	2109      	movs	r1, #9
 8003310:	4618      	mov	r0, r3
 8003312:	f000 fdb6 	bl	8003e82 <IOE_Write>
    
}
 8003316:	bf00      	nop
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	4603      	mov	r3, r0
 8003326:	460a      	mov	r2, r1
 8003328:	80fb      	strh	r3, [r7, #6]
 800332a:	4613      	mov	r3, r2
 800332c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	210a      	movs	r1, #10
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fdb5 	bl	8003ea8 <IOE_Read>
 800333e:	4603      	mov	r3, r0
 8003340:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8003342:	7bfa      	ldrb	r2, [r7, #15]
 8003344:	797b      	ldrb	r3, [r7, #5]
 8003346:	4313      	orrs	r3, r2
 8003348:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	7bfa      	ldrb	r2, [r7, #15]
 8003350:	210a      	movs	r1, #10
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fd95 	bl	8003e82 <IOE_Write>
}
 8003358:	bf00      	nop
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	460a      	mov	r2, r1
 800336a:	80fb      	strh	r3, [r7, #6]
 800336c:	4613      	mov	r3, r2
 800336e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	210a      	movs	r1, #10
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fd94 	bl	8003ea8 <IOE_Read>
 8003380:	4603      	mov	r3, r0
 8003382:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8003384:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003388:	43db      	mvns	r3, r3
 800338a:	b25a      	sxtb	r2, r3
 800338c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003390:	4013      	ands	r3, r2
 8003392:	b25b      	sxtb	r3, r3
 8003394:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003396:	88fb      	ldrh	r3, [r7, #6]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	7bfa      	ldrb	r2, [r7, #15]
 800339c:	210a      	movs	r1, #10
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fd6f 	bl	8003e82 <IOE_Write>
}
 80033a4:	bf00      	nop
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	460a      	mov	r2, r1
 80033b6:	80fb      	strh	r3, [r7, #6]
 80033b8:	4613      	mov	r3, r2
 80033ba:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	210b      	movs	r1, #11
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fd70 	bl	8003ea8 <IOE_Read>
 80033c8:	4603      	mov	r3, r0
 80033ca:	461a      	mov	r2, r3
 80033cc:	797b      	ldrb	r3, [r7, #5]
 80033ce:	4013      	ands	r3, r2
 80033d0:	b2db      	uxtb	r3, r3
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	4603      	mov	r3, r0
 80033e2:	460a      	mov	r2, r1
 80033e4:	80fb      	strh	r3, [r7, #6]
 80033e6:	4613      	mov	r3, r2
 80033e8:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	797a      	ldrb	r2, [r7, #5]
 80033f0:	210b      	movs	r1, #11
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fd45 	bl	8003e82 <IOE_Write>
}
 80033f8:	bf00      	nop
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	6039      	str	r1, [r7, #0]
 800340a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8003410:	88fb      	ldrh	r3, [r7, #6]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2117      	movs	r1, #23
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fd46 	bl	8003ea8 <IOE_Read>
 800341c:	4603      	mov	r3, r0
 800341e:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	b25b      	sxtb	r3, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	b25a      	sxtb	r2, r3
 8003428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342c:	4013      	ands	r3, r2
 800342e:	b25b      	sxtb	r3, r3
 8003430:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	7bfa      	ldrb	r2, [r7, #15]
 8003438:	2117      	movs	r1, #23
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fd21 	bl	8003e82 <IOE_Write>
}
 8003440:	bf00      	nop
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2104      	movs	r1, #4
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fd25 	bl	8003ea8 <IOE_Read>
 800345e:	4603      	mov	r3, r0
 8003460:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	f023 0304 	bic.w	r3, r3, #4
 8003468:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	7bfa      	ldrb	r2, [r7, #15]
 8003470:	2104      	movs	r1, #4
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fd05 	bl	8003e82 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	21f0      	movs	r1, #240	@ 0xf0
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff ffbf 	bl	8003400 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	f023 0303 	bic.w	r3, r3, #3
 8003488:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	2104      	movs	r1, #4
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fcf5 	bl	8003e82 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2249      	movs	r2, #73	@ 0x49
 800349e:	2120      	movs	r1, #32
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fcee 	bl	8003e82 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80034a6:	2002      	movs	r0, #2
 80034a8:	f000 fd27 	bl	8003efa <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2201      	movs	r2, #1
 80034b2:	2121      	movs	r1, #33	@ 0x21
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fce4 	bl	8003e82 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	229a      	movs	r2, #154	@ 0x9a
 80034c0:	2141      	movs	r1, #65	@ 0x41
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fcdd 	bl	8003e82 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80034c8:	88fb      	ldrh	r3, [r7, #6]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2201      	movs	r2, #1
 80034ce:	214a      	movs	r1, #74	@ 0x4a
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fcd6 	bl	8003e82 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80034d6:	88fb      	ldrh	r3, [r7, #6]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2201      	movs	r2, #1
 80034dc:	214b      	movs	r1, #75	@ 0x4b
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fccf 	bl	8003e82 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2200      	movs	r2, #0
 80034ea:	214b      	movs	r1, #75	@ 0x4b
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fcc8 	bl	8003e82 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2201      	movs	r2, #1
 80034f8:	2156      	movs	r1, #86	@ 0x56
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fcc1 	bl	8003e82 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2201      	movs	r2, #1
 8003506:	2158      	movs	r1, #88	@ 0x58
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fcba 	bl	8003e82 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2201      	movs	r2, #1
 8003514:	2140      	movs	r1, #64	@ 0x40
 8003516:	4618      	mov	r0, r3
 8003518:	f000 fcb3 	bl	8003e82 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	b2db      	uxtb	r3, r3
 8003520:	22ff      	movs	r2, #255	@ 0xff
 8003522:	210b      	movs	r1, #11
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fcac 	bl	8003e82 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 800352a:	2002      	movs	r0, #2
 800352c:	f000 fce5 	bl	8003efa <IOE_Delay>
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2140      	movs	r1, #64	@ 0x40
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fcab 	bl	8003ea8 <IOE_Read>
 8003552:	4603      	mov	r3, r0
 8003554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003558:	2b80      	cmp	r3, #128	@ 0x80
 800355a:	bf0c      	ite	eq
 800355c:	2301      	moveq	r3, #1
 800355e:	2300      	movne	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8003564:	7bbb      	ldrb	r3, [r7, #14]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00b      	beq.n	8003582 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	214c      	movs	r1, #76	@ 0x4c
 8003570:	4618      	mov	r0, r3
 8003572:	f000 fc99 	bl	8003ea8 <IOE_Read>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d010      	beq.n	800359e <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
 8003580:	e00d      	b.n	800359e <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2201      	movs	r2, #1
 8003588:	214b      	movs	r1, #75	@ 0x4b
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fc79 	bl	8003e82 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2200      	movs	r2, #0
 8003596:	214b      	movs	r1, #75	@ 0x4b
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fc72 	bl	8003e82 <IOE_Write>
  }
  
  return ret;
 800359e:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80035b6:	89fb      	ldrh	r3, [r7, #14]
 80035b8:	b2d8      	uxtb	r0, r3
 80035ba:	f107 0210 	add.w	r2, r7, #16
 80035be:	2304      	movs	r3, #4
 80035c0:	21d7      	movs	r1, #215	@ 0xd7
 80035c2:	f000 fc84 	bl	8003ece <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80035c6:	7c3b      	ldrb	r3, [r7, #16]
 80035c8:	061a      	lsls	r2, r3, #24
 80035ca:	7c7b      	ldrb	r3, [r7, #17]
 80035cc:	041b      	lsls	r3, r3, #16
 80035ce:	431a      	orrs	r2, r3
 80035d0:	7cbb      	ldrb	r3, [r7, #18]
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	4313      	orrs	r3, r2
 80035d6:	7cfa      	ldrb	r2, [r7, #19]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	0d1b      	lsrs	r3, r3, #20
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	0a1b      	lsrs	r3, r3, #8
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80035f6:	89fb      	ldrh	r3, [r7, #14]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2201      	movs	r2, #1
 80035fc:	214b      	movs	r1, #75	@ 0x4b
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fc3f 	bl	8003e82 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003604:	89fb      	ldrh	r3, [r7, #14]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2200      	movs	r2, #0
 800360a:	214b      	movs	r1, #75	@ 0x4b
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fc38 	bl	8003e82 <IOE_Write>
}
 8003612:	bf00      	nop
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	4603      	mov	r3, r0
 8003622:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8003624:	f000 fc27 	bl	8003e76 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	211f      	movs	r1, #31
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff fe76 	bl	800331e <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff fe36 	bl	80032a6 <stmpe811_EnableGlobalIT>
}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	4603      	mov	r3, r0
 800364a:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800364c:	88fb      	ldrh	r3, [r7, #6]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fe47 	bl	80032e2 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003654:	88fb      	ldrh	r3, [r7, #6]
 8003656:	211f      	movs	r1, #31
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fe81 	bl	8003360 <stmpe811_DisableITSource>
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	4603      	mov	r3, r0
 800366e:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	211f      	movs	r1, #31
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fe99 	bl	80033ac <stmpe811_ReadGITStatus>
 800367a:	4603      	mov	r3, r0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	211f      	movs	r1, #31
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff fea1 	bl	80033da <stmpe811_ClearGlobalIT>
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80036ae:	2300      	movs	r3, #0
 80036b0:	73fb      	strb	r3, [r7, #15]
 80036b2:	e00b      	b.n	80036cc <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
 80036b6:	4a0a      	ldr	r2, [pc, #40]	@ (80036e0 <stmpe811_GetInstance+0x40>)
 80036b8:	5cd3      	ldrb	r3, [r2, r3]
 80036ba:	461a      	mov	r2, r3
 80036bc:	88fb      	ldrh	r3, [r7, #6]
 80036be:	4293      	cmp	r3, r2
 80036c0:	d101      	bne.n	80036c6 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	e006      	b.n	80036d4 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	3301      	adds	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d9f0      	bls.n	80036b4 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80036d2:	23ff      	movs	r3, #255	@ 0xff
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	20000598 	.word	0x20000598

080036e4 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08a      	sub	sp, #40	@ 0x28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10e      	bne.n	8003712 <BSP_LED_Init+0x2e>
 80036f4:	2300      	movs	r3, #0
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	4b21      	ldr	r3, [pc, #132]	@ (8003780 <BSP_LED_Init+0x9c>)
 80036fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fc:	4a20      	ldr	r2, [pc, #128]	@ (8003780 <BSP_LED_Init+0x9c>)
 80036fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003702:	6313      	str	r3, [r2, #48]	@ 0x30
 8003704:	4b1e      	ldr	r3, [pc, #120]	@ (8003780 <BSP_LED_Init+0x9c>)
 8003706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	e010      	b.n	8003734 <BSP_LED_Init+0x50>
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d10d      	bne.n	8003734 <BSP_LED_Init+0x50>
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	4b18      	ldr	r3, [pc, #96]	@ (8003780 <BSP_LED_Init+0x9c>)
 800371e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003720:	4a17      	ldr	r2, [pc, #92]	@ (8003780 <BSP_LED_Init+0x9c>)
 8003722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003726:	6313      	str	r3, [r2, #48]	@ 0x30
 8003728:	4b15      	ldr	r3, [pc, #84]	@ (8003780 <BSP_LED_Init+0x9c>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	4a13      	ldr	r2, [pc, #76]	@ (8003784 <BSP_LED_Init+0xa0>)
 8003738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800373c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800373e:	2301      	movs	r3, #1
 8003740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003742:	2301      	movs	r3, #1
 8003744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003746:	2302      	movs	r3, #2
 8003748:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	4a0e      	ldr	r2, [pc, #56]	@ (8003788 <BSP_LED_Init+0xa4>)
 800374e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003752:	f107 0214 	add.w	r2, r7, #20
 8003756:	4611      	mov	r1, r2
 8003758:	4618      	mov	r0, r3
 800375a:	f002 facb 	bl	8005cf4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	4a09      	ldr	r2, [pc, #36]	@ (8003788 <BSP_LED_Init+0xa4>)
 8003762:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	4a06      	ldr	r2, [pc, #24]	@ (8003784 <BSP_LED_Init+0xa0>)
 800376a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800376e:	2200      	movs	r2, #0
 8003770:	4619      	mov	r1, r3
 8003772:	f002 fc6b 	bl	800604c <HAL_GPIO_WritePin>
}
 8003776:	bf00      	nop
 8003778:	3728      	adds	r7, #40	@ 0x28
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40023800 	.word	0x40023800
 8003784:	0800b5f0 	.word	0x0800b5f0
 8003788:	20000084 	.word	0x20000084

0800378c <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	4a07      	ldr	r2, [pc, #28]	@ (80037b8 <BSP_LED_On+0x2c>)
 800379a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	4a06      	ldr	r2, [pc, #24]	@ (80037bc <BSP_LED_On+0x30>)
 80037a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037a6:	2201      	movs	r2, #1
 80037a8:	4619      	mov	r1, r3
 80037aa:	f002 fc4f 	bl	800604c <HAL_GPIO_WritePin>
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000084 	.word	0x20000084
 80037bc:	0800b5f0 	.word	0x0800b5f0

080037c0 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	4a07      	ldr	r2, [pc, #28]	@ (80037ec <BSP_LED_Off+0x2c>)
 80037ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	4a06      	ldr	r2, [pc, #24]	@ (80037f0 <BSP_LED_Off+0x30>)
 80037d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037da:	2200      	movs	r2, #0
 80037dc:	4619      	mov	r1, r3
 80037de:	f002 fc35 	bl	800604c <HAL_GPIO_WritePin>
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000084 	.word	0x20000084
 80037f0:	0800b5f0 	.word	0x0800b5f0

080037f4 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	4a07      	ldr	r2, [pc, #28]	@ (8003820 <BSP_LED_Toggle+0x2c>)
 8003802:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	4906      	ldr	r1, [pc, #24]	@ (8003824 <BSP_LED_Toggle+0x30>)
 800380a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800380e:	4619      	mov	r1, r3
 8003810:	4610      	mov	r0, r2
 8003812:	f002 fc34 	bl	800607e <HAL_GPIO_TogglePin>
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000084 	.word	0x20000084
 8003824:	0800b5f0 	.word	0x0800b5f0

08003828 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08a      	sub	sp, #40	@ 0x28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a33      	ldr	r2, [pc, #204]	@ (8003904 <I2Cx_MspInit+0xdc>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d15f      	bne.n	80038fa <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	4b32      	ldr	r3, [pc, #200]	@ (8003908 <I2Cx_MspInit+0xe0>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003842:	4a31      	ldr	r2, [pc, #196]	@ (8003908 <I2Cx_MspInit+0xe0>)
 8003844:	f043 0304 	orr.w	r3, r3, #4
 8003848:	6313      	str	r3, [r2, #48]	@ 0x30
 800384a:	4b2f      	ldr	r3, [pc, #188]	@ (8003908 <I2Cx_MspInit+0xe0>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	4b2b      	ldr	r3, [pc, #172]	@ (8003908 <I2Cx_MspInit+0xe0>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385e:	4a2a      	ldr	r2, [pc, #168]	@ (8003908 <I2Cx_MspInit+0xe0>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6313      	str	r3, [r2, #48]	@ 0x30
 8003866:	4b28      	ldr	r3, [pc, #160]	@ (8003908 <I2Cx_MspInit+0xe0>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8003872:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8003878:	2312      	movs	r3, #18
 800387a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800387c:	2300      	movs	r3, #0
 800387e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8003880:	2302      	movs	r3, #2
 8003882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003884:	2304      	movs	r3, #4
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003888:	f107 0314 	add.w	r3, r7, #20
 800388c:	4619      	mov	r1, r3
 800388e:	481f      	ldr	r0, [pc, #124]	@ (800390c <I2Cx_MspInit+0xe4>)
 8003890:	f002 fa30 	bl	8005cf4 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8003894:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003898:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800389a:	f107 0314 	add.w	r3, r7, #20
 800389e:	4619      	mov	r1, r3
 80038a0:	481b      	ldr	r0, [pc, #108]	@ (8003910 <I2Cx_MspInit+0xe8>)
 80038a2:	f002 fa27 	bl	8005cf4 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	4b17      	ldr	r3, [pc, #92]	@ (8003908 <I2Cx_MspInit+0xe0>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	4a16      	ldr	r2, [pc, #88]	@ (8003908 <I2Cx_MspInit+0xe0>)
 80038b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038b6:	4b14      	ldr	r3, [pc, #80]	@ (8003908 <I2Cx_MspInit+0xe0>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 80038c2:	4b11      	ldr	r3, [pc, #68]	@ (8003908 <I2Cx_MspInit+0xe0>)
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	4a10      	ldr	r2, [pc, #64]	@ (8003908 <I2Cx_MspInit+0xe0>)
 80038c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038cc:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80038ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003908 <I2Cx_MspInit+0xe0>)
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003908 <I2Cx_MspInit+0xe0>)
 80038d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80038d8:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80038da:	2200      	movs	r2, #0
 80038dc:	210f      	movs	r1, #15
 80038de:	2048      	movs	r0, #72	@ 0x48
 80038e0:	f001 fd7d 	bl	80053de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80038e4:	2048      	movs	r0, #72	@ 0x48
 80038e6:	f001 fd96 	bl	8005416 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80038ea:	2200      	movs	r2, #0
 80038ec:	210f      	movs	r1, #15
 80038ee:	2049      	movs	r0, #73	@ 0x49
 80038f0:	f001 fd75 	bl	80053de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80038f4:	2049      	movs	r0, #73	@ 0x49
 80038f6:	f001 fd8e 	bl	8005416 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 80038fa:	bf00      	nop
 80038fc:	3728      	adds	r7, #40	@ 0x28
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40005c00 	.word	0x40005c00
 8003908:	40023800 	.word	0x40023800
 800390c:	40020000 	.word	0x40020000
 8003910:	40020800 	.word	0x40020800

08003914 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8003918:	4814      	ldr	r0, [pc, #80]	@ (800396c <I2Cx_Init+0x58>)
 800391a:	f003 f873 	bl	8006a04 <HAL_I2C_GetState>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d121      	bne.n	8003968 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8003924:	4b11      	ldr	r3, [pc, #68]	@ (800396c <I2Cx_Init+0x58>)
 8003926:	4a12      	ldr	r2, [pc, #72]	@ (8003970 <I2Cx_Init+0x5c>)
 8003928:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800392a:	4b10      	ldr	r3, [pc, #64]	@ (800396c <I2Cx_Init+0x58>)
 800392c:	4a11      	ldr	r2, [pc, #68]	@ (8003974 <I2Cx_Init+0x60>)
 800392e:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8003930:	4b0e      	ldr	r3, [pc, #56]	@ (800396c <I2Cx_Init+0x58>)
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8003936:	4b0d      	ldr	r3, [pc, #52]	@ (800396c <I2Cx_Init+0x58>)
 8003938:	2200      	movs	r2, #0
 800393a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800393c:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <I2Cx_Init+0x58>)
 800393e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003942:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8003944:	4b09      	ldr	r3, [pc, #36]	@ (800396c <I2Cx_Init+0x58>)
 8003946:	2200      	movs	r2, #0
 8003948:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800394a:	4b08      	ldr	r3, [pc, #32]	@ (800396c <I2Cx_Init+0x58>)
 800394c:	2200      	movs	r2, #0
 800394e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8003950:	4b06      	ldr	r3, [pc, #24]	@ (800396c <I2Cx_Init+0x58>)
 8003952:	2200      	movs	r2, #0
 8003954:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8003956:	4b05      	ldr	r3, [pc, #20]	@ (800396c <I2Cx_Init+0x58>)
 8003958:	2200      	movs	r2, #0
 800395a:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 800395c:	4803      	ldr	r0, [pc, #12]	@ (800396c <I2Cx_Init+0x58>)
 800395e:	f7ff ff63 	bl	8003828 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8003962:	4802      	ldr	r0, [pc, #8]	@ (800396c <I2Cx_Init+0x58>)
 8003964:	f002 fba6 	bl	80060b4 <HAL_I2C_Init>
  }
}
 8003968:	bf00      	nop
 800396a:	bd80      	pop	{r7, pc}
 800396c:	2000059c 	.word	0x2000059c
 8003970:	40005c00 	.word	0x40005c00
 8003974:	000186a0 	.word	0x000186a0

08003978 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	603b      	str	r3, [r7, #0]
 8003982:	4b13      	ldr	r3, [pc, #76]	@ (80039d0 <I2Cx_ITConfig+0x58>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003986:	4a12      	ldr	r2, [pc, #72]	@ (80039d0 <I2Cx_ITConfig+0x58>)
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	6313      	str	r3, [r2, #48]	@ 0x30
 800398e:	4b10      	ldr	r3, [pc, #64]	@ (80039d0 <I2Cx_ITConfig+0x58>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 800399a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800399e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80039a0:	2301      	movs	r3, #1
 80039a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80039a8:	4b0a      	ldr	r3, [pc, #40]	@ (80039d4 <I2Cx_ITConfig+0x5c>)
 80039aa:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80039ac:	1d3b      	adds	r3, r7, #4
 80039ae:	4619      	mov	r1, r3
 80039b0:	4809      	ldr	r0, [pc, #36]	@ (80039d8 <I2Cx_ITConfig+0x60>)
 80039b2:	f002 f99f 	bl	8005cf4 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80039b6:	2200      	movs	r2, #0
 80039b8:	210f      	movs	r1, #15
 80039ba:	2028      	movs	r0, #40	@ 0x28
 80039bc:	f001 fd0f 	bl	80053de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80039c0:	2028      	movs	r0, #40	@ 0x28
 80039c2:	f001 fd28 	bl	8005416 <HAL_NVIC_EnableIRQ>
}
 80039c6:	bf00      	nop
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40023800 	.word	0x40023800
 80039d4:	10210000 	.word	0x10210000
 80039d8:	40020000 	.word	0x40020000

080039dc <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af04      	add	r7, sp, #16
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]
 80039e6:	460b      	mov	r3, r1
 80039e8:	71bb      	strb	r3, [r7, #6]
 80039ea:	4613      	mov	r3, r2
 80039ec:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	b299      	uxth	r1, r3
 80039f6:	79bb      	ldrb	r3, [r7, #6]
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003a28 <I2Cx_WriteData+0x4c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	9302      	str	r3, [sp, #8]
 8003a00:	2301      	movs	r3, #1
 8003a02:	9301      	str	r3, [sp, #4]
 8003a04:	1d7b      	adds	r3, r7, #5
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	2301      	movs	r3, #1
 8003a0a:	4808      	ldr	r0, [pc, #32]	@ (8003a2c <I2Cx_WriteData+0x50>)
 8003a0c:	f002 fcda 	bl	80063c4 <HAL_I2C_Mem_Write>
 8003a10:	4603      	mov	r3, r0
 8003a12:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003a1a:	f000 f863 	bl	8003ae4 <I2Cx_Error>
  }        
}
 8003a1e:	bf00      	nop
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	2000008c 	.word	0x2000008c
 8003a2c:	2000059c 	.word	0x2000059c

08003a30 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af04      	add	r7, sp, #16
 8003a36:	4603      	mov	r3, r0
 8003a38:	460a      	mov	r2, r1
 8003a3a:	71fb      	strb	r3, [r7, #7]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	b299      	uxth	r1, r3
 8003a4c:	79bb      	ldrb	r3, [r7, #6]
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <I2Cx_ReadData+0x50>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	9302      	str	r3, [sp, #8]
 8003a56:	2301      	movs	r3, #1
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	f107 030e 	add.w	r3, r7, #14
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	2301      	movs	r3, #1
 8003a62:	4808      	ldr	r0, [pc, #32]	@ (8003a84 <I2Cx_ReadData+0x54>)
 8003a64:	f002 fda8 	bl	80065b8 <HAL_I2C_Mem_Read>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003a72:	f000 f837 	bl	8003ae4 <I2Cx_Error>
  
  }
  return value;
 8003a76:	7bbb      	ldrb	r3, [r7, #14]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	2000008c 	.word	0x2000008c
 8003a84:	2000059c 	.word	0x2000059c

08003a88 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af04      	add	r7, sp, #16
 8003a8e:	603a      	str	r2, [r7, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	4603      	mov	r3, r0
 8003a94:	71fb      	strb	r3, [r7, #7]
 8003a96:	460b      	mov	r3, r1
 8003a98:	71bb      	strb	r3, [r7, #6]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	b299      	uxth	r1, r3
 8003aa6:	79bb      	ldrb	r3, [r7, #6]
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8003adc <I2Cx_ReadBuffer+0x54>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	9302      	str	r3, [sp, #8]
 8003ab0:	88bb      	ldrh	r3, [r7, #4]
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	2301      	movs	r3, #1
 8003aba:	4809      	ldr	r0, [pc, #36]	@ (8003ae0 <I2Cx_ReadBuffer+0x58>)
 8003abc:	f002 fd7c 	bl	80065b8 <HAL_I2C_Mem_Read>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	e002      	b.n	8003ad4 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003ace:	f000 f809 	bl	8003ae4 <I2Cx_Error>

    return 1;
 8003ad2:	2301      	movs	r3, #1
  }
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	2000008c 	.word	0x2000008c
 8003ae0:	2000059c 	.word	0x2000059c

08003ae4 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003ae8:	4803      	ldr	r0, [pc, #12]	@ (8003af8 <I2Cx_Error+0x14>)
 8003aea:	f002 fc27 	bl	800633c <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8003aee:	f7ff ff11 	bl	8003914 <I2Cx_Init>
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	2000059c 	.word	0x2000059c

08003afc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003b00:	4819      	ldr	r0, [pc, #100]	@ (8003b68 <SPIx_Init+0x6c>)
 8003b02:	f005 fa0c 	bl	8008f1e <HAL_SPI_GetState>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d12b      	bne.n	8003b64 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003b0c:	4b16      	ldr	r3, [pc, #88]	@ (8003b68 <SPIx_Init+0x6c>)
 8003b0e:	4a17      	ldr	r2, [pc, #92]	@ (8003b6c <SPIx_Init+0x70>)
 8003b10:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003b12:	4b15      	ldr	r3, [pc, #84]	@ (8003b68 <SPIx_Init+0x6c>)
 8003b14:	2218      	movs	r2, #24
 8003b16:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003b18:	4b13      	ldr	r3, [pc, #76]	@ (8003b68 <SPIx_Init+0x6c>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003b1e:	4b12      	ldr	r3, [pc, #72]	@ (8003b68 <SPIx_Init+0x6c>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003b24:	4b10      	ldr	r3, [pc, #64]	@ (8003b68 <SPIx_Init+0x6c>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b68 <SPIx_Init+0x6c>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003b30:	4b0d      	ldr	r3, [pc, #52]	@ (8003b68 <SPIx_Init+0x6c>)
 8003b32:	2207      	movs	r2, #7
 8003b34:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003b36:	4b0c      	ldr	r3, [pc, #48]	@ (8003b68 <SPIx_Init+0x6c>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b68 <SPIx_Init+0x6c>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003b42:	4b09      	ldr	r3, [pc, #36]	@ (8003b68 <SPIx_Init+0x6c>)
 8003b44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b48:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003b4a:	4b07      	ldr	r3, [pc, #28]	@ (8003b68 <SPIx_Init+0x6c>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003b50:	4b05      	ldr	r3, [pc, #20]	@ (8003b68 <SPIx_Init+0x6c>)
 8003b52:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b56:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8003b58:	4803      	ldr	r0, [pc, #12]	@ (8003b68 <SPIx_Init+0x6c>)
 8003b5a:	f000 f853 	bl	8003c04 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003b5e:	4802      	ldr	r0, [pc, #8]	@ (8003b68 <SPIx_Init+0x6c>)
 8003b60:	f004 fc53 	bl	800840a <HAL_SPI_Init>
  } 
}
 8003b64:	bf00      	nop
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	200005f0 	.word	0x200005f0
 8003b6c:	40015000 	.word	0x40015000

08003b70 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	4b09      	ldr	r3, [pc, #36]	@ (8003ba8 <SPIx_Read+0x38>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f107 0108 	add.w	r1, r7, #8
 8003b8a:	4808      	ldr	r0, [pc, #32]	@ (8003bac <SPIx_Read+0x3c>)
 8003b8c:	f004 fe3a 	bl	8008804 <HAL_SPI_Receive>
 8003b90:	4603      	mov	r3, r0
 8003b92:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003b9a:	f000 f827 	bl	8003bec <SPIx_Error>
  }
  
  return readvalue;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20000090 	.word	0x20000090
 8003bac:	200005f0 	.word	0x200005f0

08003bb0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8003bbe:	4b09      	ldr	r3, [pc, #36]	@ (8003be4 <SPIx_Write+0x34>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	1db9      	adds	r1, r7, #6
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	4808      	ldr	r0, [pc, #32]	@ (8003be8 <SPIx_Write+0x38>)
 8003bc8:	f004 fcc6 	bl	8008558 <HAL_SPI_Transmit>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003bd6:	f000 f809 	bl	8003bec <SPIx_Error>
  }
}
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000090 	.word	0x20000090
 8003be8:	200005f0 	.word	0x200005f0

08003bec <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003bf0:	4803      	ldr	r0, [pc, #12]	@ (8003c00 <SPIx_Error+0x14>)
 8003bf2:	f004 fc75 	bl	80084e0 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003bf6:	f7ff ff81 	bl	8003afc <SPIx_Init>
}
 8003bfa:	bf00      	nop
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	200005f0 	.word	0x200005f0

08003c04 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	@ 0x28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	4b17      	ldr	r3, [pc, #92]	@ (8003c70 <SPIx_MspInit+0x6c>)
 8003c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c14:	4a16      	ldr	r2, [pc, #88]	@ (8003c70 <SPIx_MspInit+0x6c>)
 8003c16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c1c:	4b14      	ldr	r3, [pc, #80]	@ (8003c70 <SPIx_MspInit+0x6c>)
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	4b10      	ldr	r3, [pc, #64]	@ (8003c70 <SPIx_MspInit+0x6c>)
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c30:	4a0f      	ldr	r2, [pc, #60]	@ (8003c70 <SPIx_MspInit+0x6c>)
 8003c32:	f043 0320 	orr.w	r3, r3, #32
 8003c36:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c38:	4b0d      	ldr	r3, [pc, #52]	@ (8003c70 <SPIx_MspInit+0x6c>)
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003c44:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003c4e:	2302      	movs	r3, #2
 8003c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003c52:	2301      	movs	r3, #1
 8003c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003c56:	2305      	movs	r3, #5
 8003c58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8003c5a:	f107 0314 	add.w	r3, r7, #20
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4804      	ldr	r0, [pc, #16]	@ (8003c74 <SPIx_MspInit+0x70>)
 8003c62:	f002 f847 	bl	8005cf4 <HAL_GPIO_Init>
}
 8003c66:	bf00      	nop
 8003c68:	3728      	adds	r7, #40	@ 0x28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40023800 	.word	0x40023800
 8003c74:	40021400 	.word	0x40021400

08003c78 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8003c7e:	4b36      	ldr	r3, [pc, #216]	@ (8003d58 <LCD_IO_Init+0xe0>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d164      	bne.n	8003d50 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8003c86:	4b34      	ldr	r3, [pc, #208]	@ (8003d58 <LCD_IO_Init+0xe0>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60bb      	str	r3, [r7, #8]
 8003c90:	4b32      	ldr	r3, [pc, #200]	@ (8003d5c <LCD_IO_Init+0xe4>)
 8003c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c94:	4a31      	ldr	r2, [pc, #196]	@ (8003d5c <LCD_IO_Init+0xe4>)
 8003c96:	f043 0308 	orr.w	r3, r3, #8
 8003c9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8003d5c <LCD_IO_Init+0xe4>)
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003ca8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003cac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003cba:	f107 030c 	add.w	r3, r7, #12
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4827      	ldr	r0, [pc, #156]	@ (8003d60 <LCD_IO_Init+0xe8>)
 8003cc2:	f002 f817 	bl	8005cf4 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	4b24      	ldr	r3, [pc, #144]	@ (8003d5c <LCD_IO_Init+0xe4>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cce:	4a23      	ldr	r2, [pc, #140]	@ (8003d5c <LCD_IO_Init+0xe4>)
 8003cd0:	f043 0308 	orr.w	r3, r3, #8
 8003cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cd6:	4b21      	ldr	r3, [pc, #132]	@ (8003d5c <LCD_IO_Init+0xe4>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	607b      	str	r3, [r7, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003ce2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ce6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003cf4:	f107 030c 	add.w	r3, r7, #12
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4819      	ldr	r0, [pc, #100]	@ (8003d60 <LCD_IO_Init+0xe8>)
 8003cfc:	f001 fffa 	bl	8005cf4 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003d00:	2300      	movs	r3, #0
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	4b15      	ldr	r3, [pc, #84]	@ (8003d5c <LCD_IO_Init+0xe4>)
 8003d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d08:	4a14      	ldr	r2, [pc, #80]	@ (8003d5c <LCD_IO_Init+0xe4>)
 8003d0a:	f043 0304 	orr.w	r3, r3, #4
 8003d0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d10:	4b12      	ldr	r3, [pc, #72]	@ (8003d5c <LCD_IO_Init+0xe4>)
 8003d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	603b      	str	r3, [r7, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003d20:	2301      	movs	r3, #1
 8003d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003d2c:	f107 030c 	add.w	r3, r7, #12
 8003d30:	4619      	mov	r1, r3
 8003d32:	480c      	ldr	r0, [pc, #48]	@ (8003d64 <LCD_IO_Init+0xec>)
 8003d34:	f001 ffde 	bl	8005cf4 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2104      	movs	r1, #4
 8003d3c:	4809      	ldr	r0, [pc, #36]	@ (8003d64 <LCD_IO_Init+0xec>)
 8003d3e:	f002 f985 	bl	800604c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003d42:	2201      	movs	r2, #1
 8003d44:	2104      	movs	r1, #4
 8003d46:	4807      	ldr	r0, [pc, #28]	@ (8003d64 <LCD_IO_Init+0xec>)
 8003d48:	f002 f980 	bl	800604c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8003d4c:	f7ff fed6 	bl	8003afc <SPIx_Init>
  }
}
 8003d50:	bf00      	nop
 8003d52:	3720      	adds	r7, #32
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	20000648 	.word	0x20000648
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40020c00 	.word	0x40020c00
 8003d64:	40020800 	.word	0x40020800

08003d68 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003d72:	2201      	movs	r2, #1
 8003d74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003d78:	480a      	ldr	r0, [pc, #40]	@ (8003da4 <LCD_IO_WriteData+0x3c>)
 8003d7a:	f002 f967 	bl	800604c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2104      	movs	r1, #4
 8003d82:	4809      	ldr	r0, [pc, #36]	@ (8003da8 <LCD_IO_WriteData+0x40>)
 8003d84:	f002 f962 	bl	800604c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff ff10 	bl	8003bb0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003d90:	2201      	movs	r2, #1
 8003d92:	2104      	movs	r1, #4
 8003d94:	4804      	ldr	r0, [pc, #16]	@ (8003da8 <LCD_IO_WriteData+0x40>)
 8003d96:	f002 f959 	bl	800604c <HAL_GPIO_WritePin>
}
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40020c00 	.word	0x40020c00
 8003da8:	40020800 	.word	0x40020800

08003dac <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003db6:	2200      	movs	r2, #0
 8003db8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003dbc:	480a      	ldr	r0, [pc, #40]	@ (8003de8 <LCD_IO_WriteReg+0x3c>)
 8003dbe:	f002 f945 	bl	800604c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2104      	movs	r1, #4
 8003dc6:	4809      	ldr	r0, [pc, #36]	@ (8003dec <LCD_IO_WriteReg+0x40>)
 8003dc8:	f002 f940 	bl	800604c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff feed 	bl	8003bb0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	2104      	movs	r1, #4
 8003dda:	4804      	ldr	r0, [pc, #16]	@ (8003dec <LCD_IO_WriteReg+0x40>)
 8003ddc:	f002 f936 	bl	800604c <HAL_GPIO_WritePin>
}
 8003de0:	bf00      	nop
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40020c00 	.word	0x40020c00
 8003dec:	40020800 	.word	0x40020800

08003df0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	460a      	mov	r2, r1
 8003dfa:	80fb      	strh	r3, [r7, #6]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003e04:	2200      	movs	r2, #0
 8003e06:	2104      	movs	r1, #4
 8003e08:	4810      	ldr	r0, [pc, #64]	@ (8003e4c <LCD_IO_ReadData+0x5c>)
 8003e0a:	f002 f91f 	bl	800604c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e14:	480e      	ldr	r0, [pc, #56]	@ (8003e50 <LCD_IO_ReadData+0x60>)
 8003e16:	f002 f919 	bl	800604c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff fec7 	bl	8003bb0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8003e22:	797b      	ldrb	r3, [r7, #5]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff fea3 	bl	8003b70 <SPIx_Read>
 8003e2a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e32:	4807      	ldr	r0, [pc, #28]	@ (8003e50 <LCD_IO_ReadData+0x60>)
 8003e34:	f002 f90a 	bl	800604c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003e38:	2201      	movs	r2, #1
 8003e3a:	2104      	movs	r1, #4
 8003e3c:	4803      	ldr	r0, [pc, #12]	@ (8003e4c <LCD_IO_ReadData+0x5c>)
 8003e3e:	f002 f905 	bl	800604c <HAL_GPIO_WritePin>
  
  return readvalue;
 8003e42:	68fb      	ldr	r3, [r7, #12]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40020800 	.word	0x40020800
 8003e50:	40020c00 	.word	0x40020c00

08003e54 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f001 f9bf 	bl	80051e0 <HAL_Delay>
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8003e6e:	f7ff fd51 	bl	8003914 <I2Cx_Init>
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8003e7a:	f7ff fd7d 	bl	8003978 <I2Cx_ITConfig>
}
 8003e7e:	bf00      	nop
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	4603      	mov	r3, r0
 8003e8a:	71fb      	strb	r3, [r7, #7]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	71bb      	strb	r3, [r7, #6]
 8003e90:	4613      	mov	r3, r2
 8003e92:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8003e94:	797a      	ldrb	r2, [r7, #5]
 8003e96:	79b9      	ldrb	r1, [r7, #6]
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff fd9e 	bl	80039dc <I2Cx_WriteData>
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	460a      	mov	r2, r1
 8003eb2:	71fb      	strb	r3, [r7, #7]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8003eb8:	79ba      	ldrb	r2, [r7, #6]
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff fdb6 	bl	8003a30 <I2Cx_ReadData>
 8003ec4:	4603      	mov	r3, r0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b082      	sub	sp, #8
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	603a      	str	r2, [r7, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	4603      	mov	r3, r0
 8003eda:	71fb      	strb	r3, [r7, #7]
 8003edc:	460b      	mov	r3, r1
 8003ede:	71bb      	strb	r3, [r7, #6]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8003ee4:	88bb      	ldrh	r3, [r7, #4]
 8003ee6:	79b9      	ldrb	r1, [r7, #6]
 8003ee8:	79f8      	ldrb	r0, [r7, #7]
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	f7ff fdcc 	bl	8003a88 <I2Cx_ReadBuffer>
 8003ef0:	4603      	mov	r3, r0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f001 f96c 	bl	80051e0 <HAL_Delay>
}
 8003f08:	bf00      	nop
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <BSP_LCD_Init_Flipped>:
/**
 * @brief  Initializes the LCD for flipped operation.
 * LCD orientation is rotated by 180°.
 * @retval LCD state
 */
uint8_t BSP_LCD_Init_Flipped(void){
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
	flippedLcd = true;
 8003f14:	4b03      	ldr	r3, [pc, #12]	@ (8003f24 <BSP_LCD_Init_Flipped+0x14>)
 8003f16:	2201      	movs	r2, #1
 8003f18:	701a      	strb	r2, [r3, #0]
	return BSP_LCD_Init();
 8003f1a:	f000 f805 	bl	8003f28 <BSP_LCD_Init>
 8003f1e:	4603      	mov	r3, r0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20000784 	.word	0x20000784

08003f28 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8003f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8003fe4 <BSP_LCD_Init+0xbc>)
 8003f2e:	4a2e      	ldr	r2, [pc, #184]	@ (8003fe8 <BSP_LCD_Init+0xc0>)
 8003f30:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8003f32:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe4 <BSP_LCD_Init+0xbc>)
 8003f34:	2209      	movs	r2, #9
 8003f36:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003f38:	4b2a      	ldr	r3, [pc, #168]	@ (8003fe4 <BSP_LCD_Init+0xbc>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8003f3e:	4b29      	ldr	r3, [pc, #164]	@ (8003fe4 <BSP_LCD_Init+0xbc>)
 8003f40:	221d      	movs	r2, #29
 8003f42:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003f44:	4b27      	ldr	r3, [pc, #156]	@ (8003fe4 <BSP_LCD_Init+0xbc>)
 8003f46:	2203      	movs	r2, #3
 8003f48:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8003f4a:	4b26      	ldr	r3, [pc, #152]	@ (8003fe4 <BSP_LCD_Init+0xbc>)
 8003f4c:	f240 120d 	movw	r2, #269	@ 0x10d
 8003f50:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8003f52:	4b24      	ldr	r3, [pc, #144]	@ (8003fe4 <BSP_LCD_Init+0xbc>)
 8003f54:	f240 1243 	movw	r2, #323	@ 0x143
 8003f58:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8003f5a:	4b22      	ldr	r3, [pc, #136]	@ (8003fe4 <BSP_LCD_Init+0xbc>)
 8003f5c:	f240 1217 	movw	r2, #279	@ 0x117
 8003f60:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8003f62:	4b20      	ldr	r3, [pc, #128]	@ (8003fe4 <BSP_LCD_Init+0xbc>)
 8003f64:	f240 1247 	movw	r2, #327	@ 0x147
 8003f68:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8003f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fe4 <BSP_LCD_Init+0xbc>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8003f72:	4b1c      	ldr	r3, [pc, #112]	@ (8003fe4 <BSP_LCD_Init+0xbc>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8003f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe4 <BSP_LCD_Init+0xbc>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003f82:	4b1a      	ldr	r3, [pc, #104]	@ (8003fec <BSP_LCD_Init+0xc4>)
 8003f84:	2208      	movs	r2, #8
 8003f86:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003f88:	4b18      	ldr	r3, [pc, #96]	@ (8003fec <BSP_LCD_Init+0xc4>)
 8003f8a:	22c0      	movs	r2, #192	@ 0xc0
 8003f8c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003f8e:	4b17      	ldr	r3, [pc, #92]	@ (8003fec <BSP_LCD_Init+0xc4>)
 8003f90:	2204      	movs	r2, #4
 8003f92:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003f94:	4b15      	ldr	r3, [pc, #84]	@ (8003fec <BSP_LCD_Init+0xc4>)
 8003f96:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f9a:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003f9c:	4813      	ldr	r0, [pc, #76]	@ (8003fec <BSP_LCD_Init+0xc4>)
 8003f9e:	f003 ffeb 	bl	8007f78 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003fa2:	4b10      	ldr	r3, [pc, #64]	@ (8003fe4 <BSP_LCD_Init+0xbc>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe4 <BSP_LCD_Init+0xbc>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003fae:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe4 <BSP_LCD_Init+0xbc>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe4 <BSP_LCD_Init+0xbc>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8003fba:	f000 fbb5 	bl	8004728 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003fbe:	4809      	ldr	r0, [pc, #36]	@ (8003fe4 <BSP_LCD_Init+0xbc>)
 8003fc0:	f003 f886 	bl	80070d0 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff0 <BSP_LCD_Init+0xc8>)
 8003fc6:	4a0b      	ldr	r2, [pc, #44]	@ (8003ff4 <BSP_LCD_Init+0xcc>)
 8003fc8:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8003fca:	4b09      	ldr	r3, [pc, #36]	@ (8003ff0 <BSP_LCD_Init+0xc8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8003fd2:	f000 fdbd 	bl	8004b50 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003fd6:	4808      	ldr	r0, [pc, #32]	@ (8003ff8 <BSP_LCD_Init+0xd0>)
 8003fd8:	f000 f8ce 	bl	8004178 <BSP_LCD_SetFont>

  return LCD_OK;
 8003fdc:	2300      	movs	r3, #0
}  
 8003fde:	4618      	mov	r0, r3
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	2000064c 	.word	0x2000064c
 8003fe8:	40016800 	.word	0x40016800
 8003fec:	20000734 	.word	0x20000734
 8003ff0:	20000780 	.word	0x20000780
 8003ff4:	20000024 	.word	0x20000024
 8003ff8:	20000094 	.word	0x20000094

08003ffc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8004000:	4b03      	ldr	r3, [pc, #12]	@ (8004010 <BSP_LCD_GetXSize+0x14>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004006:	4798      	blx	r3
 8004008:	4603      	mov	r3, r0
}
 800400a:	4618      	mov	r0, r3
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20000780 	.word	0x20000780

08004014 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8004018:	4b03      	ldr	r3, [pc, #12]	@ (8004028 <BSP_LCD_GetYSize+0x14>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401e:	4798      	blx	r3
 8004020:	4603      	mov	r3, r0
}
 8004022:	4618      	mov	r0, r3
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000780 	.word	0x20000780

0800402c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800402c:	b580      	push	{r7, lr}
 800402e:	b090      	sub	sp, #64	@ 0x40
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	6039      	str	r1, [r7, #0]
 8004036:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800403c:	f7ff ffde 	bl	8003ffc <BSP_LCD_GetXSize>
 8004040:	4603      	mov	r3, r0
 8004042:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004048:	f7ff ffe4 	bl	8004014 <BSP_LCD_GetYSize>
 800404c:	4603      	mov	r3, r0
 800404e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004050:	2300      	movs	r3, #0
 8004052:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8004058:	23ff      	movs	r3, #255	@ 0xff
 800405a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8004060:	2300      	movs	r3, #0
 8004062:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8004066:	2300      	movs	r3, #0
 8004068:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004072:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004076:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004078:	2307      	movs	r3, #7
 800407a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800407c:	f7ff ffbe 	bl	8003ffc <BSP_LCD_GetXSize>
 8004080:	4603      	mov	r3, r0
 8004082:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8004084:	f7ff ffc6 	bl	8004014 <BSP_LCD_GetYSize>
 8004088:	4603      	mov	r3, r0
 800408a:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800408c:	88fa      	ldrh	r2, [r7, #6]
 800408e:	f107 030c 	add.w	r3, r7, #12
 8004092:	4619      	mov	r1, r3
 8004094:	4814      	ldr	r0, [pc, #80]	@ (80040e8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004096:	f003 f8f5 	bl	8007284 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800409a:	88fa      	ldrh	r2, [r7, #6]
 800409c:	4913      	ldr	r1, [pc, #76]	@ (80040ec <BSP_LCD_LayerDefaultInit+0xc0>)
 800409e:	4613      	mov	r3, r2
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	3304      	adds	r3, #4
 80040aa:	f04f 32ff 	mov.w	r2, #4294967295
 80040ae:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80040b0:	88fa      	ldrh	r2, [r7, #6]
 80040b2:	490e      	ldr	r1, [pc, #56]	@ (80040ec <BSP_LCD_LayerDefaultInit+0xc0>)
 80040b4:	4613      	mov	r3, r2
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	3308      	adds	r3, #8
 80040c0:	4a0b      	ldr	r2, [pc, #44]	@ (80040f0 <BSP_LCD_LayerDefaultInit+0xc4>)
 80040c2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80040c4:	88fa      	ldrh	r2, [r7, #6]
 80040c6:	4909      	ldr	r1, [pc, #36]	@ (80040ec <BSP_LCD_LayerDefaultInit+0xc0>)
 80040c8:	4613      	mov	r3, r2
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80040d6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80040d8:	4803      	ldr	r0, [pc, #12]	@ (80040e8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80040da:	f003 f911 	bl	8007300 <HAL_LTDC_EnableDither>
}
 80040de:	bf00      	nop
 80040e0:	3740      	adds	r7, #64	@ 0x40
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	2000064c 	.word	0x2000064c
 80040ec:	20000768 	.word	0x20000768
 80040f0:	20000094 	.word	0x20000094

080040f4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80040fc:	4a04      	ldr	r2, [pc, #16]	@ (8004110 <BSP_LCD_SelectLayer+0x1c>)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6013      	str	r3, [r2, #0]
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20000764 	.word	0x20000764

08004114 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800411c:	4b07      	ldr	r3, [pc, #28]	@ (800413c <BSP_LCD_SetTextColor+0x28>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	4907      	ldr	r1, [pc, #28]	@ (8004140 <BSP_LCD_SetTextColor+0x2c>)
 8004122:	4613      	mov	r3, r2
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	601a      	str	r2, [r3, #0]
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	20000764 	.word	0x20000764
 8004140:	20000768 	.word	0x20000768

08004144 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800414c:	4b08      	ldr	r3, [pc, #32]	@ (8004170 <BSP_LCD_SetBackColor+0x2c>)
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	4908      	ldr	r1, [pc, #32]	@ (8004174 <BSP_LCD_SetBackColor+0x30>)
 8004152:	4613      	mov	r3, r2
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	3304      	adds	r3, #4
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	601a      	str	r2, [r3, #0]
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000764 	.word	0x20000764
 8004174:	20000768 	.word	0x20000768

08004178 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8004180:	4b08      	ldr	r3, [pc, #32]	@ (80041a4 <BSP_LCD_SetFont+0x2c>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4908      	ldr	r1, [pc, #32]	@ (80041a8 <BSP_LCD_SetFont+0x30>)
 8004186:	4613      	mov	r3, r2
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	3308      	adds	r3, #8
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	601a      	str	r2, [r3, #0]
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20000764 	.word	0x20000764
 80041a8:	20000768 	.word	0x20000768

080041ac <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80041ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80041b4:	4b0f      	ldr	r3, [pc, #60]	@ (80041f4 <BSP_LCD_Clear+0x48>)
 80041b6:	681c      	ldr	r4, [r3, #0]
 80041b8:	4b0e      	ldr	r3, [pc, #56]	@ (80041f4 <BSP_LCD_Clear+0x48>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a0e      	ldr	r2, [pc, #56]	@ (80041f8 <BSP_LCD_Clear+0x4c>)
 80041be:	2134      	movs	r1, #52	@ 0x34
 80041c0:	fb01 f303 	mul.w	r3, r1, r3
 80041c4:	4413      	add	r3, r2
 80041c6:	335c      	adds	r3, #92	@ 0x5c
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	461e      	mov	r6, r3
 80041cc:	f7ff ff16 	bl	8003ffc <BSP_LCD_GetXSize>
 80041d0:	4605      	mov	r5, r0
 80041d2:	f7ff ff1f 	bl	8004014 <BSP_LCD_GetYSize>
 80041d6:	4602      	mov	r2, r0
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	2300      	movs	r3, #0
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	4613      	mov	r3, r2
 80041e2:	462a      	mov	r2, r5
 80041e4:	4631      	mov	r1, r6
 80041e6:	4620      	mov	r0, r4
 80041e8:	f000 fc7a 	bl	8004ae0 <FillBuffer>
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041f4:	20000764 	.word	0x20000764
 80041f8:	2000064c 	.word	0x2000064c

080041fc <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	80fb      	strh	r3, [r7, #6]
 8004206:	460b      	mov	r3, r1
 8004208:	80bb      	strh	r3, [r7, #4]
 800420a:	4613      	mov	r3, r2
 800420c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800420e:	4b1b      	ldr	r3, [pc, #108]	@ (800427c <BSP_LCD_DisplayChar+0x80>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	491b      	ldr	r1, [pc, #108]	@ (8004280 <BSP_LCD_DisplayChar+0x84>)
 8004214:	4613      	mov	r3, r2
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	3308      	adds	r3, #8
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6819      	ldr	r1, [r3, #0]
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800422a:	4b14      	ldr	r3, [pc, #80]	@ (800427c <BSP_LCD_DisplayChar+0x80>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4c14      	ldr	r4, [pc, #80]	@ (8004280 <BSP_LCD_DisplayChar+0x84>)
 8004230:	4613      	mov	r3, r2
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	4413      	add	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4423      	add	r3, r4
 800423a:	3308      	adds	r3, #8
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004240:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004244:	4b0d      	ldr	r3, [pc, #52]	@ (800427c <BSP_LCD_DisplayChar+0x80>)
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	4c0d      	ldr	r4, [pc, #52]	@ (8004280 <BSP_LCD_DisplayChar+0x84>)
 800424a:	4613      	mov	r3, r2
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	4413      	add	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4423      	add	r3, r4
 8004254:	3308      	adds	r3, #8
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	889b      	ldrh	r3, [r3, #4]
 800425a:	3307      	adds	r3, #7
 800425c:	2b00      	cmp	r3, #0
 800425e:	da00      	bge.n	8004262 <BSP_LCD_DisplayChar+0x66>
 8004260:	3307      	adds	r3, #7
 8004262:	10db      	asrs	r3, r3, #3
 8004264:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004268:	18ca      	adds	r2, r1, r3
 800426a:	88b9      	ldrh	r1, [r7, #4]
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fb7c 	bl	800496c <DrawChar>
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	bd90      	pop	{r4, r7, pc}
 800427c:	20000764 	.word	0x20000764
 8004280:	20000768 	.word	0x20000768

08004284 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8004284:	b5b0      	push	{r4, r5, r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af00      	add	r7, sp, #0
 800428a:	60ba      	str	r2, [r7, #8]
 800428c:	461a      	mov	r2, r3
 800428e:	4603      	mov	r3, r0
 8004290:	81fb      	strh	r3, [r7, #14]
 8004292:	460b      	mov	r3, r1
 8004294:	81bb      	strh	r3, [r7, #12]
 8004296:	4613      	mov	r3, r2
 8004298:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800429a:	2301      	movs	r3, #1
 800429c:	83fb      	strh	r3, [r7, #30]
 800429e:	2300      	movs	r3, #0
 80042a0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80042a2:	2300      	movs	r3, #0
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	2300      	movs	r3, #0
 80042a8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80042ae:	e002      	b.n	80042b6 <BSP_LCD_DisplayStringAt+0x32>
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	3301      	adds	r3, #1
 80042b4:	61bb      	str	r3, [r7, #24]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	617a      	str	r2, [r7, #20]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f6      	bne.n	80042b0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80042c2:	f7ff fe9b 	bl	8003ffc <BSP_LCD_GetXSize>
 80042c6:	4601      	mov	r1, r0
 80042c8:	4b4b      	ldr	r3, [pc, #300]	@ (80043f8 <BSP_LCD_DisplayStringAt+0x174>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	484b      	ldr	r0, [pc, #300]	@ (80043fc <BSP_LCD_DisplayStringAt+0x178>)
 80042ce:	4613      	mov	r3, r2
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4403      	add	r3, r0
 80042d8:	3308      	adds	r3, #8
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	889b      	ldrh	r3, [r3, #4]
 80042de:	fbb1 f3f3 	udiv	r3, r1, r3
 80042e2:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d01c      	beq.n	8004324 <BSP_LCD_DisplayStringAt+0xa0>
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	dc33      	bgt.n	8004356 <BSP_LCD_DisplayStringAt+0xd2>
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d002      	beq.n	80042f8 <BSP_LCD_DisplayStringAt+0x74>
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d019      	beq.n	800432a <BSP_LCD_DisplayStringAt+0xa6>
 80042f6:	e02e      	b.n	8004356 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	1ad1      	subs	r1, r2, r3
 80042fe:	4b3e      	ldr	r3, [pc, #248]	@ (80043f8 <BSP_LCD_DisplayStringAt+0x174>)
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	483e      	ldr	r0, [pc, #248]	@ (80043fc <BSP_LCD_DisplayStringAt+0x178>)
 8004304:	4613      	mov	r3, r2
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4403      	add	r3, r0
 800430e:	3308      	adds	r3, #8
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	889b      	ldrh	r3, [r3, #4]
 8004314:	fb01 f303 	mul.w	r3, r1, r3
 8004318:	085b      	lsrs	r3, r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	89fb      	ldrh	r3, [r7, #14]
 800431e:	4413      	add	r3, r2
 8004320:	83fb      	strh	r3, [r7, #30]
      break;
 8004322:	e01b      	b.n	800435c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8004324:	89fb      	ldrh	r3, [r7, #14]
 8004326:	83fb      	strh	r3, [r7, #30]
      break;
 8004328:	e018      	b.n	800435c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	b299      	uxth	r1, r3
 8004332:	4b31      	ldr	r3, [pc, #196]	@ (80043f8 <BSP_LCD_DisplayStringAt+0x174>)
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	4831      	ldr	r0, [pc, #196]	@ (80043fc <BSP_LCD_DisplayStringAt+0x178>)
 8004338:	4613      	mov	r3, r2
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	4413      	add	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4403      	add	r3, r0
 8004342:	3308      	adds	r3, #8
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	889b      	ldrh	r3, [r3, #4]
 8004348:	fb11 f303 	smulbb	r3, r1, r3
 800434c:	b29a      	uxth	r2, r3
 800434e:	89fb      	ldrh	r3, [r7, #14]
 8004350:	4413      	add	r3, r2
 8004352:	83fb      	strh	r3, [r7, #30]
      break;
 8004354:	e002      	b.n	800435c <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8004356:	89fb      	ldrh	r3, [r7, #14]
 8004358:	83fb      	strh	r3, [r7, #30]
      break;
 800435a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800435c:	e01a      	b.n	8004394 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	781a      	ldrb	r2, [r3, #0]
 8004362:	89b9      	ldrh	r1, [r7, #12]
 8004364:	8bfb      	ldrh	r3, [r7, #30]
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff ff48 	bl	80041fc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800436c:	4b22      	ldr	r3, [pc, #136]	@ (80043f8 <BSP_LCD_DisplayStringAt+0x174>)
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4922      	ldr	r1, [pc, #136]	@ (80043fc <BSP_LCD_DisplayStringAt+0x178>)
 8004372:	4613      	mov	r3, r2
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	4413      	add	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	3308      	adds	r3, #8
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	889a      	ldrh	r2, [r3, #4]
 8004382:	8bfb      	ldrh	r3, [r7, #30]
 8004384:	4413      	add	r3, r2
 8004386:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	3301      	adds	r3, #1
 800438c:	60bb      	str	r3, [r7, #8]
    i++;
 800438e:	8bbb      	ldrh	r3, [r7, #28]
 8004390:	3301      	adds	r3, #1
 8004392:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	bf14      	ite	ne
 800439c:	2301      	movne	r3, #1
 800439e:	2300      	moveq	r3, #0
 80043a0:	b2dc      	uxtb	r4, r3
 80043a2:	f7ff fe2b 	bl	8003ffc <BSP_LCD_GetXSize>
 80043a6:	8bb9      	ldrh	r1, [r7, #28]
 80043a8:	4b13      	ldr	r3, [pc, #76]	@ (80043f8 <BSP_LCD_DisplayStringAt+0x174>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	4d13      	ldr	r5, [pc, #76]	@ (80043fc <BSP_LCD_DisplayStringAt+0x178>)
 80043ae:	4613      	mov	r3, r2
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	442b      	add	r3, r5
 80043b8:	3308      	adds	r3, #8
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	889b      	ldrh	r3, [r3, #4]
 80043be:	fb01 f303 	mul.w	r3, r1, r3
 80043c2:	1ac3      	subs	r3, r0, r3
 80043c4:	b299      	uxth	r1, r3
 80043c6:	4b0c      	ldr	r3, [pc, #48]	@ (80043f8 <BSP_LCD_DisplayStringAt+0x174>)
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	480c      	ldr	r0, [pc, #48]	@ (80043fc <BSP_LCD_DisplayStringAt+0x178>)
 80043cc:	4613      	mov	r3, r2
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4403      	add	r3, r0
 80043d6:	3308      	adds	r3, #8
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	889b      	ldrh	r3, [r3, #4]
 80043dc:	4299      	cmp	r1, r3
 80043de:	bf2c      	ite	cs
 80043e0:	2301      	movcs	r3, #1
 80043e2:	2300      	movcc	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	4023      	ands	r3, r4
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1b7      	bne.n	800435e <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80043ee:	bf00      	nop
 80043f0:	bf00      	nop
 80043f2:	3720      	adds	r7, #32
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bdb0      	pop	{r4, r5, r7, pc}
 80043f8:	20000764 	.word	0x20000764
 80043fc:	20000768 	.word	0x20000768

08004400 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004402:	b087      	sub	sp, #28
 8004404:	af02      	add	r7, sp, #8
 8004406:	4603      	mov	r3, r0
 8004408:	80fb      	strh	r3, [r7, #6]
 800440a:	460b      	mov	r3, r1
 800440c:	80bb      	strh	r3, [r7, #4]
 800440e:	4613      	mov	r3, r2
 8004410:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if (flippedLcd)
 8004416:	4b29      	ldr	r3, [pc, #164]	@ (80044bc <BSP_LCD_DrawHLine+0xbc>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d021      	beq.n	8004462 <BSP_LCD_DrawHLine+0x62>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+1) - (Xpos+Length) +BSP_LCD_GetXSize()*BSP_LCD_GetYSize()); //Rotate by 180°
 800441e:	4b28      	ldr	r3, [pc, #160]	@ (80044c0 <BSP_LCD_DrawHLine+0xc0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a28      	ldr	r2, [pc, #160]	@ (80044c4 <BSP_LCD_DrawHLine+0xc4>)
 8004424:	2134      	movs	r1, #52	@ 0x34
 8004426:	fb01 f303 	mul.w	r3, r1, r3
 800442a:	4413      	add	r3, r2
 800442c:	335c      	adds	r3, #92	@ 0x5c
 800442e:	681c      	ldr	r4, [r3, #0]
 8004430:	f7ff fde4 	bl	8003ffc <BSP_LCD_GetXSize>
 8004434:	4603      	mov	r3, r0
 8004436:	425b      	negs	r3, r3
 8004438:	88ba      	ldrh	r2, [r7, #4]
 800443a:	3201      	adds	r2, #1
 800443c:	fb02 f503 	mul.w	r5, r2, r3
 8004440:	f7ff fddc 	bl	8003ffc <BSP_LCD_GetXSize>
 8004444:	4606      	mov	r6, r0
 8004446:	f7ff fde5 	bl	8004014 <BSP_LCD_GetYSize>
 800444a:	4603      	mov	r3, r0
 800444c:	fb06 f303 	mul.w	r3, r6, r3
 8004450:	442b      	add	r3, r5
 8004452:	88f9      	ldrh	r1, [r7, #6]
 8004454:	887a      	ldrh	r2, [r7, #2]
 8004456:	440a      	add	r2, r1
 8004458:	1a9b      	subs	r3, r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4423      	add	r3, r4
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	e013      	b.n	800448a <BSP_LCD_DrawHLine+0x8a>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004462:	4b17      	ldr	r3, [pc, #92]	@ (80044c0 <BSP_LCD_DrawHLine+0xc0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a17      	ldr	r2, [pc, #92]	@ (80044c4 <BSP_LCD_DrawHLine+0xc4>)
 8004468:	2134      	movs	r1, #52	@ 0x34
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	4413      	add	r3, r2
 8004470:	335c      	adds	r3, #92	@ 0x5c
 8004472:	681c      	ldr	r4, [r3, #0]
 8004474:	f7ff fdc2 	bl	8003ffc <BSP_LCD_GetXSize>
 8004478:	4602      	mov	r2, r0
 800447a:	88bb      	ldrh	r3, [r7, #4]
 800447c:	fb03 f202 	mul.w	r2, r3, r2
 8004480:	88fb      	ldrh	r3, [r7, #6]
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4423      	add	r3, r4
 8004488:	60fb      	str	r3, [r7, #12]
  }
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800448a:	4b0d      	ldr	r3, [pc, #52]	@ (80044c0 <BSP_LCD_DrawHLine+0xc0>)
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	68f9      	ldr	r1, [r7, #12]
 8004490:	887c      	ldrh	r4, [r7, #2]
 8004492:	4b0b      	ldr	r3, [pc, #44]	@ (80044c0 <BSP_LCD_DrawHLine+0xc0>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4d0c      	ldr	r5, [pc, #48]	@ (80044c8 <BSP_LCD_DrawHLine+0xc8>)
 8004498:	4613      	mov	r3, r2
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	442b      	add	r3, r5
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	9301      	str	r3, [sp, #4]
 80044a6:	2300      	movs	r3, #0
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	2301      	movs	r3, #1
 80044ac:	4622      	mov	r2, r4
 80044ae:	f000 fb17 	bl	8004ae0 <FillBuffer>
}
 80044b2:	bf00      	nop
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20000784 	.word	0x20000784
 80044c0:	20000764 	.word	0x20000764
 80044c4:	2000064c 	.word	0x2000064c
 80044c8:	20000768 	.word	0x20000768

080044cc <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80044cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	4603      	mov	r3, r0
 80044d4:	80fb      	strh	r3, [r7, #6]
 80044d6:	460b      	mov	r3, r1
 80044d8:	80bb      	strh	r3, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if (flippedLcd)
 80044e2:	4b2b      	ldr	r3, [pc, #172]	@ (8004590 <BSP_LCD_DrawVLine+0xc4>)
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d021      	beq.n	800452e <BSP_LCD_DrawVLine+0x62>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Length) - (Xpos+1) +BSP_LCD_GetXSize()*BSP_LCD_GetYSize()); //Rotate by 180°
 80044ea:	4b2a      	ldr	r3, [pc, #168]	@ (8004594 <BSP_LCD_DrawVLine+0xc8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004598 <BSP_LCD_DrawVLine+0xcc>)
 80044f0:	2134      	movs	r1, #52	@ 0x34
 80044f2:	fb01 f303 	mul.w	r3, r1, r3
 80044f6:	4413      	add	r3, r2
 80044f8:	335c      	adds	r3, #92	@ 0x5c
 80044fa:	681c      	ldr	r4, [r3, #0]
 80044fc:	f7ff fd7e 	bl	8003ffc <BSP_LCD_GetXSize>
 8004500:	4603      	mov	r3, r0
 8004502:	425b      	negs	r3, r3
 8004504:	88b9      	ldrh	r1, [r7, #4]
 8004506:	887a      	ldrh	r2, [r7, #2]
 8004508:	440a      	add	r2, r1
 800450a:	fb03 f202 	mul.w	r2, r3, r2
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	1ad5      	subs	r5, r2, r3
 8004512:	f7ff fd73 	bl	8003ffc <BSP_LCD_GetXSize>
 8004516:	4606      	mov	r6, r0
 8004518:	f7ff fd7c 	bl	8004014 <BSP_LCD_GetYSize>
 800451c:	4603      	mov	r3, r0
 800451e:	fb06 f303 	mul.w	r3, r6, r3
 8004522:	442b      	add	r3, r5
 8004524:	3b01      	subs	r3, #1
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4423      	add	r3, r4
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	e013      	b.n	8004556 <BSP_LCD_DrawVLine+0x8a>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800452e:	4b19      	ldr	r3, [pc, #100]	@ (8004594 <BSP_LCD_DrawVLine+0xc8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a19      	ldr	r2, [pc, #100]	@ (8004598 <BSP_LCD_DrawVLine+0xcc>)
 8004534:	2134      	movs	r1, #52	@ 0x34
 8004536:	fb01 f303 	mul.w	r3, r1, r3
 800453a:	4413      	add	r3, r2
 800453c:	335c      	adds	r3, #92	@ 0x5c
 800453e:	681c      	ldr	r4, [r3, #0]
 8004540:	f7ff fd5c 	bl	8003ffc <BSP_LCD_GetXSize>
 8004544:	4602      	mov	r2, r0
 8004546:	88bb      	ldrh	r3, [r7, #4]
 8004548:	fb03 f202 	mul.w	r2, r3, r2
 800454c:	88fb      	ldrh	r3, [r7, #6]
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4423      	add	r3, r4
 8004554:	60fb      	str	r3, [r7, #12]
  }
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8004556:	4b0f      	ldr	r3, [pc, #60]	@ (8004594 <BSP_LCD_DrawVLine+0xc8>)
 8004558:	681c      	ldr	r4, [r3, #0]
 800455a:	68fd      	ldr	r5, [r7, #12]
 800455c:	887e      	ldrh	r6, [r7, #2]
 800455e:	f7ff fd4d 	bl	8003ffc <BSP_LCD_GetXSize>
 8004562:	4603      	mov	r3, r0
 8004564:	1e59      	subs	r1, r3, #1
 8004566:	4b0b      	ldr	r3, [pc, #44]	@ (8004594 <BSP_LCD_DrawVLine+0xc8>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	480c      	ldr	r0, [pc, #48]	@ (800459c <BSP_LCD_DrawVLine+0xd0>)
 800456c:	4613      	mov	r3, r2
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4403      	add	r3, r0
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	9301      	str	r3, [sp, #4]
 800457a:	9100      	str	r1, [sp, #0]
 800457c:	4633      	mov	r3, r6
 800457e:	2201      	movs	r2, #1
 8004580:	4629      	mov	r1, r5
 8004582:	4620      	mov	r0, r4
 8004584:	f000 faac 	bl	8004ae0 <FillBuffer>
}
 8004588:	bf00      	nop
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004590:	20000784 	.word	0x20000784
 8004594:	20000764 	.word	0x20000764
 8004598:	2000064c 	.word	0x2000064c
 800459c:	20000768 	.word	0x20000768

080045a0 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80045a0:	b590      	push	{r4, r7, lr}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4604      	mov	r4, r0
 80045a8:	4608      	mov	r0, r1
 80045aa:	4611      	mov	r1, r2
 80045ac:	461a      	mov	r2, r3
 80045ae:	4623      	mov	r3, r4
 80045b0:	80fb      	strh	r3, [r7, #6]
 80045b2:	4603      	mov	r3, r0
 80045b4:	80bb      	strh	r3, [r7, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	807b      	strh	r3, [r7, #2]
 80045ba:	4613      	mov	r3, r2
 80045bc:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80045be:	887a      	ldrh	r2, [r7, #2]
 80045c0:	88b9      	ldrh	r1, [r7, #4]
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff ff1b 	bl	8004400 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 80045ca:	88ba      	ldrh	r2, [r7, #4]
 80045cc:	883b      	ldrh	r3, [r7, #0]
 80045ce:	4413      	add	r3, r2
 80045d0:	b299      	uxth	r1, r3
 80045d2:	887a      	ldrh	r2, [r7, #2]
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff ff12 	bl	8004400 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80045dc:	883a      	ldrh	r2, [r7, #0]
 80045de:	88b9      	ldrh	r1, [r7, #4]
 80045e0:	88fb      	ldrh	r3, [r7, #6]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff ff72 	bl	80044cc <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80045e8:	88fa      	ldrh	r2, [r7, #6]
 80045ea:	887b      	ldrh	r3, [r7, #2]
 80045ec:	4413      	add	r3, r2
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	883a      	ldrh	r2, [r7, #0]
 80045f2:	88b9      	ldrh	r1, [r7, #4]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff ff69 	bl	80044cc <BSP_LCD_DrawVLine>
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd90      	pop	{r4, r7, pc}
	...

08004604 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004608:	b086      	sub	sp, #24
 800460a:	af02      	add	r7, sp, #8
 800460c:	4604      	mov	r4, r0
 800460e:	4608      	mov	r0, r1
 8004610:	4611      	mov	r1, r2
 8004612:	461a      	mov	r2, r3
 8004614:	4623      	mov	r3, r4
 8004616:	80fb      	strh	r3, [r7, #6]
 8004618:	4603      	mov	r3, r0
 800461a:	80bb      	strh	r3, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	807b      	strh	r3, [r7, #2]
 8004620:	4613      	mov	r3, r2
 8004622:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004628:	4b33      	ldr	r3, [pc, #204]	@ (80046f8 <BSP_LCD_FillRect+0xf4>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	4933      	ldr	r1, [pc, #204]	@ (80046fc <BSP_LCD_FillRect+0xf8>)
 800462e:	4613      	mov	r3, r2
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff fd6a 	bl	8004114 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 8004640:	4b2f      	ldr	r3, [pc, #188]	@ (8004700 <BSP_LCD_FillRect+0xfc>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d022      	beq.n	800468e <BSP_LCD_FillRect+0x8a>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +BSP_LCD_GetXSize()*BSP_LCD_GetYSize()); //Rotate by 180°
 8004648:	4b2b      	ldr	r3, [pc, #172]	@ (80046f8 <BSP_LCD_FillRect+0xf4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a2d      	ldr	r2, [pc, #180]	@ (8004704 <BSP_LCD_FillRect+0x100>)
 800464e:	2134      	movs	r1, #52	@ 0x34
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	4413      	add	r3, r2
 8004656:	335c      	adds	r3, #92	@ 0x5c
 8004658:	681c      	ldr	r4, [r3, #0]
 800465a:	f7ff fccf 	bl	8003ffc <BSP_LCD_GetXSize>
 800465e:	4603      	mov	r3, r0
 8004660:	425b      	negs	r3, r3
 8004662:	88b9      	ldrh	r1, [r7, #4]
 8004664:	883a      	ldrh	r2, [r7, #0]
 8004666:	440a      	add	r2, r1
 8004668:	fb02 f503 	mul.w	r5, r2, r3
 800466c:	f7ff fcc6 	bl	8003ffc <BSP_LCD_GetXSize>
 8004670:	4606      	mov	r6, r0
 8004672:	f7ff fccf 	bl	8004014 <BSP_LCD_GetYSize>
 8004676:	4603      	mov	r3, r0
 8004678:	fb06 f303 	mul.w	r3, r6, r3
 800467c:	442b      	add	r3, r5
 800467e:	88f9      	ldrh	r1, [r7, #6]
 8004680:	887a      	ldrh	r2, [r7, #2]
 8004682:	440a      	add	r2, r1
 8004684:	1a9b      	subs	r3, r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4423      	add	r3, r4
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	e013      	b.n	80046b6 <BSP_LCD_FillRect+0xb2>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800468e:	4b1a      	ldr	r3, [pc, #104]	@ (80046f8 <BSP_LCD_FillRect+0xf4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1c      	ldr	r2, [pc, #112]	@ (8004704 <BSP_LCD_FillRect+0x100>)
 8004694:	2134      	movs	r1, #52	@ 0x34
 8004696:	fb01 f303 	mul.w	r3, r1, r3
 800469a:	4413      	add	r3, r2
 800469c:	335c      	adds	r3, #92	@ 0x5c
 800469e:	681c      	ldr	r4, [r3, #0]
 80046a0:	f7ff fcac 	bl	8003ffc <BSP_LCD_GetXSize>
 80046a4:	4602      	mov	r2, r0
 80046a6:	88bb      	ldrh	r3, [r7, #4]
 80046a8:	fb03 f202 	mul.w	r2, r3, r2
 80046ac:	88fb      	ldrh	r3, [r7, #6]
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4423      	add	r3, r4
 80046b4:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80046b6:	4b10      	ldr	r3, [pc, #64]	@ (80046f8 <BSP_LCD_FillRect+0xf4>)
 80046b8:	681c      	ldr	r4, [r3, #0]
 80046ba:	68fd      	ldr	r5, [r7, #12]
 80046bc:	887e      	ldrh	r6, [r7, #2]
 80046be:	f8b7 8000 	ldrh.w	r8, [r7]
 80046c2:	f7ff fc9b 	bl	8003ffc <BSP_LCD_GetXSize>
 80046c6:	4602      	mov	r2, r0
 80046c8:	887b      	ldrh	r3, [r7, #2]
 80046ca:	1ad1      	subs	r1, r2, r3
 80046cc:	4b0a      	ldr	r3, [pc, #40]	@ (80046f8 <BSP_LCD_FillRect+0xf4>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	480a      	ldr	r0, [pc, #40]	@ (80046fc <BSP_LCD_FillRect+0xf8>)
 80046d2:	4613      	mov	r3, r2
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4403      	add	r3, r0
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	9301      	str	r3, [sp, #4]
 80046e0:	9100      	str	r1, [sp, #0]
 80046e2:	4643      	mov	r3, r8
 80046e4:	4632      	mov	r2, r6
 80046e6:	4629      	mov	r1, r5
 80046e8:	4620      	mov	r0, r4
 80046ea:	f000 f9f9 	bl	8004ae0 <FillBuffer>
}
 80046ee:	bf00      	nop
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046f8:	20000764 	.word	0x20000764
 80046fc:	20000768 	.word	0x20000768
 8004700:	20000784 	.word	0x20000784
 8004704:	2000064c 	.word	0x2000064c

08004708 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 800470c:	4b05      	ldr	r3, [pc, #20]	@ (8004724 <BSP_LCD_DisplayOn+0x1c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8004716:	4b03      	ldr	r3, [pc, #12]	@ (8004724 <BSP_LCD_DisplayOn+0x1c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	4798      	blx	r3
  }
}
 800471e:	bf00      	nop
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000780 	.word	0x20000780

08004728 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08e      	sub	sp, #56	@ 0x38
 800472c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800472e:	2300      	movs	r3, #0
 8004730:	623b      	str	r3, [r7, #32]
 8004732:	4b61      	ldr	r3, [pc, #388]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 8004734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004736:	4a60      	ldr	r2, [pc, #384]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 8004738:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800473c:	6453      	str	r3, [r2, #68]	@ 0x44
 800473e:	4b5e      	ldr	r3, [pc, #376]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 8004740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004742:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004746:	623b      	str	r3, [r7, #32]
 8004748:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
 800474e:	4b5a      	ldr	r3, [pc, #360]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004752:	4a59      	ldr	r2, [pc, #356]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 8004754:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004758:	6313      	str	r3, [r2, #48]	@ 0x30
 800475a:	4b57      	ldr	r3, [pc, #348]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 800475c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004762:	61fb      	str	r3, [r7, #28]
 8004764:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	4b53      	ldr	r3, [pc, #332]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476e:	4a52      	ldr	r2, [pc, #328]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	6313      	str	r3, [r2, #48]	@ 0x30
 8004776:	4b50      	ldr	r3, [pc, #320]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	61bb      	str	r3, [r7, #24]
 8004780:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004782:	2300      	movs	r3, #0
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	4b4c      	ldr	r3, [pc, #304]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478a:	4a4b      	ldr	r2, [pc, #300]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 800478c:	f043 0302 	orr.w	r3, r3, #2
 8004790:	6313      	str	r3, [r2, #48]	@ 0x30
 8004792:	4b49      	ldr	r3, [pc, #292]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 8004794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	4b45      	ldr	r3, [pc, #276]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a6:	4a44      	ldr	r2, [pc, #272]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 80047a8:	f043 0304 	orr.w	r3, r3, #4
 80047ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80047ae:	4b42      	ldr	r3, [pc, #264]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	4b3e      	ldr	r3, [pc, #248]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 80047c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c2:	4a3d      	ldr	r2, [pc, #244]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 80047c4:	f043 0308 	orr.w	r3, r3, #8
 80047c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80047ca:	4b3b      	ldr	r3, [pc, #236]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 80047cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80047d6:	2300      	movs	r3, #0
 80047d8:	60bb      	str	r3, [r7, #8]
 80047da:	4b37      	ldr	r3, [pc, #220]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047de:	4a36      	ldr	r2, [pc, #216]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 80047e0:	f043 0320 	orr.w	r3, r3, #32
 80047e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80047e6:	4b34      	ldr	r3, [pc, #208]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80047f2:	2300      	movs	r3, #0
 80047f4:	607b      	str	r3, [r7, #4]
 80047f6:	4b30      	ldr	r3, [pc, #192]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 80047f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fa:	4a2f      	ldr	r2, [pc, #188]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 80047fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004800:	6313      	str	r3, [r2, #48]	@ 0x30
 8004802:	4b2d      	ldr	r3, [pc, #180]	@ (80048b8 <BSP_LCD_MspInit+0x190>)
 8004804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800480a:	607b      	str	r3, [r7, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800480e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8004812:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004814:	2302      	movs	r3, #2
 8004816:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004818:	2300      	movs	r3, #0
 800481a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800481c:	2302      	movs	r3, #2
 800481e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8004820:	230e      	movs	r3, #14
 8004822:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004828:	4619      	mov	r1, r3
 800482a:	4824      	ldr	r0, [pc, #144]	@ (80048bc <BSP_LCD_MspInit+0x194>)
 800482c:	f001 fa62 	bl	8005cf4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8004830:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8004834:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800483a:	4619      	mov	r1, r3
 800483c:	4820      	ldr	r0, [pc, #128]	@ (80048c0 <BSP_LCD_MspInit+0x198>)
 800483e:	f001 fa59 	bl	8005cf4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8004842:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8004846:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800484c:	4619      	mov	r1, r3
 800484e:	481d      	ldr	r0, [pc, #116]	@ (80048c4 <BSP_LCD_MspInit+0x19c>)
 8004850:	f001 fa50 	bl	8005cf4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8004854:	2348      	movs	r3, #72	@ 0x48
 8004856:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800485c:	4619      	mov	r1, r3
 800485e:	481a      	ldr	r0, [pc, #104]	@ (80048c8 <BSP_LCD_MspInit+0x1a0>)
 8004860:	f001 fa48 	bl	8005cf4 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8004864:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004868:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800486a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800486e:	4619      	mov	r1, r3
 8004870:	4816      	ldr	r0, [pc, #88]	@ (80048cc <BSP_LCD_MspInit+0x1a4>)
 8004872:	f001 fa3f 	bl	8005cf4 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8004876:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800487a:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800487c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004880:	4619      	mov	r1, r3
 8004882:	4813      	ldr	r0, [pc, #76]	@ (80048d0 <BSP_LCD_MspInit+0x1a8>)
 8004884:	f001 fa36 	bl	8005cf4 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004888:	2303      	movs	r3, #3
 800488a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800488c:	2309      	movs	r3, #9
 800488e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004890:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004894:	4619      	mov	r1, r3
 8004896:	480a      	ldr	r0, [pc, #40]	@ (80048c0 <BSP_LCD_MspInit+0x198>)
 8004898:	f001 fa2c 	bl	8005cf4 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800489c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80048a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80048a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048a6:	4619      	mov	r1, r3
 80048a8:	4809      	ldr	r0, [pc, #36]	@ (80048d0 <BSP_LCD_MspInit+0x1a8>)
 80048aa:	f001 fa23 	bl	8005cf4 <HAL_GPIO_Init>
}
 80048ae:	bf00      	nop
 80048b0:	3738      	adds	r7, #56	@ 0x38
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40023800 	.word	0x40023800
 80048bc:	40020000 	.word	0x40020000
 80048c0:	40020400 	.word	0x40020400
 80048c4:	40020800 	.word	0x40020800
 80048c8:	40020c00 	.word	0x40020c00
 80048cc:	40021400 	.word	0x40021400
 80048d0:	40021800 	.word	0x40021800

080048d4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80048d4:	b5b0      	push	{r4, r5, r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	4603      	mov	r3, r0
 80048dc:	603a      	str	r2, [r7, #0]
 80048de:	80fb      	strh	r3, [r7, #6]
 80048e0:	460b      	mov	r3, r1
 80048e2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 80048e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004960 <BSP_LCD_DrawPixel+0x8c>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01f      	beq.n	800492c <BSP_LCD_DrawPixel+0x58>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (BSP_LCD_GetXSize()*BSP_LCD_GetYSize() - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 80048ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004964 <BSP_LCD_DrawPixel+0x90>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004968 <BSP_LCD_DrawPixel+0x94>)
 80048f2:	2134      	movs	r1, #52	@ 0x34
 80048f4:	fb01 f303 	mul.w	r3, r1, r3
 80048f8:	4413      	add	r3, r2
 80048fa:	335c      	adds	r3, #92	@ 0x5c
 80048fc:	681c      	ldr	r4, [r3, #0]
 80048fe:	f7ff fb7d 	bl	8003ffc <BSP_LCD_GetXSize>
 8004902:	4605      	mov	r5, r0
 8004904:	f7ff fb86 	bl	8004014 <BSP_LCD_GetYSize>
 8004908:	4603      	mov	r3, r0
 800490a:	fb03 f205 	mul.w	r2, r3, r5
 800490e:	88fb      	ldrh	r3, [r7, #6]
 8004910:	1ad5      	subs	r5, r2, r3
 8004912:	f7ff fb73 	bl	8003ffc <BSP_LCD_GetXSize>
 8004916:	4602      	mov	r2, r0
 8004918:	88bb      	ldrh	r3, [r7, #4]
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	1aeb      	subs	r3, r5, r3
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4423      	add	r3, r4
 8004924:	461a      	mov	r2, r3
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800492a:	e015      	b.n	8004958 <BSP_LCD_DrawPixel+0x84>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800492c:	4b0d      	ldr	r3, [pc, #52]	@ (8004964 <BSP_LCD_DrawPixel+0x90>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a0d      	ldr	r2, [pc, #52]	@ (8004968 <BSP_LCD_DrawPixel+0x94>)
 8004932:	2134      	movs	r1, #52	@ 0x34
 8004934:	fb01 f303 	mul.w	r3, r1, r3
 8004938:	4413      	add	r3, r2
 800493a:	335c      	adds	r3, #92	@ 0x5c
 800493c:	681c      	ldr	r4, [r3, #0]
 800493e:	88bd      	ldrh	r5, [r7, #4]
 8004940:	f7ff fb5c 	bl	8003ffc <BSP_LCD_GetXSize>
 8004944:	4603      	mov	r3, r0
 8004946:	fb03 f205 	mul.w	r2, r3, r5
 800494a:	88fb      	ldrh	r3, [r7, #6]
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4423      	add	r3, r4
 8004952:	461a      	mov	r2, r3
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	6013      	str	r3, [r2, #0]
}
 8004958:	bf00      	nop
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bdb0      	pop	{r4, r5, r7, pc}
 8004960:	20000784 	.word	0x20000784
 8004964:	20000764 	.word	0x20000764
 8004968:	2000064c 	.word	0x2000064c

0800496c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af00      	add	r7, sp, #0
 8004972:	4603      	mov	r3, r0
 8004974:	603a      	str	r2, [r7, #0]
 8004976:	80fb      	strh	r3, [r7, #6]
 8004978:	460b      	mov	r3, r1
 800497a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800497c:	2300      	movs	r3, #0
 800497e:	61fb      	str	r3, [r7, #28]
 8004980:	2300      	movs	r3, #0
 8004982:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8004984:	2300      	movs	r3, #0
 8004986:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8004988:	4b53      	ldr	r3, [pc, #332]	@ (8004ad8 <DrawChar+0x16c>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4953      	ldr	r1, [pc, #332]	@ (8004adc <DrawChar+0x170>)
 800498e:	4613      	mov	r3, r2
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	440b      	add	r3, r1
 8004998:	3308      	adds	r3, #8
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	88db      	ldrh	r3, [r3, #6]
 800499e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80049a0:	4b4d      	ldr	r3, [pc, #308]	@ (8004ad8 <DrawChar+0x16c>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	494d      	ldr	r1, [pc, #308]	@ (8004adc <DrawChar+0x170>)
 80049a6:	4613      	mov	r3, r2
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	4413      	add	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	440b      	add	r3, r1
 80049b0:	3308      	adds	r3, #8
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	889b      	ldrh	r3, [r3, #4]
 80049b6:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80049b8:	8a3b      	ldrh	r3, [r7, #16]
 80049ba:	3307      	adds	r3, #7
 80049bc:	2b00      	cmp	r3, #0
 80049be:	da00      	bge.n	80049c2 <DrawChar+0x56>
 80049c0:	3307      	adds	r3, #7
 80049c2:	10db      	asrs	r3, r3, #3
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	8a3b      	ldrh	r3, [r7, #16]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80049d2:	2300      	movs	r3, #0
 80049d4:	61fb      	str	r3, [r7, #28]
 80049d6:	e076      	b.n	8004ac6 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80049d8:	8a3b      	ldrh	r3, [r7, #16]
 80049da:	3307      	adds	r3, #7
 80049dc:	2b00      	cmp	r3, #0
 80049de:	da00      	bge.n	80049e2 <DrawChar+0x76>
 80049e0:	3307      	adds	r3, #7
 80049e2:	10db      	asrs	r3, r3, #3
 80049e4:	461a      	mov	r2, r3
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	fb02 f303 	mul.w	r3, r2, r3
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	4413      	add	r3, r2
 80049f0:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80049f2:	8a3b      	ldrh	r3, [r7, #16]
 80049f4:	3307      	adds	r3, #7
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	da00      	bge.n	80049fc <DrawChar+0x90>
 80049fa:	3307      	adds	r3, #7
 80049fc:	10db      	asrs	r3, r3, #3
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d002      	beq.n	8004a08 <DrawChar+0x9c>
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d004      	beq.n	8004a10 <DrawChar+0xa4>
 8004a06:	e00c      	b.n	8004a22 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	617b      	str	r3, [r7, #20]
      break;
 8004a0e:	e016      	b.n	8004a3e <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	3201      	adds	r2, #1
 8004a1a:	7812      	ldrb	r2, [r2, #0]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	617b      	str	r3, [r7, #20]
      break;
 8004a20:	e00d      	b.n	8004a3e <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	041a      	lsls	r2, r3, #16
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	4313      	orrs	r3, r2
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	3202      	adds	r2, #2
 8004a36:	7812      	ldrb	r2, [r2, #0]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]
      break;
 8004a3c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61bb      	str	r3, [r7, #24]
 8004a42:	e036      	b.n	8004ab2 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004a44:	8a3a      	ldrh	r2, [r7, #16]
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	1ad2      	subs	r2, r2, r3
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	2201      	movs	r2, #1
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	461a      	mov	r2, r3
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d012      	beq.n	8004a86 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	88fb      	ldrh	r3, [r7, #6]
 8004a66:	4413      	add	r3, r2
 8004a68:	b298      	uxth	r0, r3
 8004a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad8 <DrawChar+0x16c>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	491b      	ldr	r1, [pc, #108]	@ (8004adc <DrawChar+0x170>)
 8004a70:	4613      	mov	r3, r2
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	88bb      	ldrh	r3, [r7, #4]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	f7ff ff28 	bl	80048d4 <BSP_LCD_DrawPixel>
 8004a84:	e012      	b.n	8004aac <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	88fb      	ldrh	r3, [r7, #6]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	b298      	uxth	r0, r3
 8004a90:	4b11      	ldr	r3, [pc, #68]	@ (8004ad8 <DrawChar+0x16c>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4911      	ldr	r1, [pc, #68]	@ (8004adc <DrawChar+0x170>)
 8004a96:	4613      	mov	r3, r2
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	88bb      	ldrh	r3, [r7, #4]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	f7ff ff14 	bl	80048d4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	8a3b      	ldrh	r3, [r7, #16]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d3c4      	bcc.n	8004a44 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8004aba:	88bb      	ldrh	r3, [r7, #4]
 8004abc:	3301      	adds	r3, #1
 8004abe:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	61fb      	str	r3, [r7, #28]
 8004ac6:	8a7b      	ldrh	r3, [r7, #18]
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d384      	bcc.n	80049d8 <DrawChar+0x6c>
  }
}
 8004ace:	bf00      	nop
 8004ad0:	bf00      	nop
 8004ad2:	3720      	adds	r7, #32
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	20000764 	.word	0x20000764
 8004adc:	20000768 	.word	0x20000768

08004ae0 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af02      	add	r7, sp, #8
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8004aee:	4b16      	ldr	r3, [pc, #88]	@ (8004b48 <FillBuffer+0x68>)
 8004af0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004af4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004af6:	4b14      	ldr	r3, [pc, #80]	@ (8004b48 <FillBuffer+0x68>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8004afc:	4a12      	ldr	r2, [pc, #72]	@ (8004b48 <FillBuffer+0x68>)
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8004b02:	4b11      	ldr	r3, [pc, #68]	@ (8004b48 <FillBuffer+0x68>)
 8004b04:	4a11      	ldr	r2, [pc, #68]	@ (8004b4c <FillBuffer+0x6c>)
 8004b06:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8004b08:	480f      	ldr	r0, [pc, #60]	@ (8004b48 <FillBuffer+0x68>)
 8004b0a:	f000 fe5d 	bl	80057c8 <HAL_DMA2D_Init>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d115      	bne.n	8004b40 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8004b14:	68f9      	ldr	r1, [r7, #12]
 8004b16:	480c      	ldr	r0, [pc, #48]	@ (8004b48 <FillBuffer+0x68>)
 8004b18:	f000 ffbe 	bl	8005a98 <HAL_DMA2D_ConfigLayer>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10e      	bne.n	8004b40 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	69f9      	ldr	r1, [r7, #28]
 8004b2c:	4806      	ldr	r0, [pc, #24]	@ (8004b48 <FillBuffer+0x68>)
 8004b2e:	f000 fe9e 	bl	800586e <HAL_DMA2D_Start>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d103      	bne.n	8004b40 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004b38:	210a      	movs	r1, #10
 8004b3a:	4803      	ldr	r0, [pc, #12]	@ (8004b48 <FillBuffer+0x68>)
 8004b3c:	f000 fec2 	bl	80058c4 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004b40:	bf00      	nop
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	200006f4 	.word	0x200006f4
 8004b4c:	4002b000 	.word	0x4002b000

08004b50 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004b54:	4b29      	ldr	r3, [pc, #164]	@ (8004bfc <BSP_SDRAM_Init+0xac>)
 8004b56:	4a2a      	ldr	r2, [pc, #168]	@ (8004c00 <BSP_SDRAM_Init+0xb0>)
 8004b58:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8004c04 <BSP_SDRAM_Init+0xb4>)
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004b60:	4b28      	ldr	r3, [pc, #160]	@ (8004c04 <BSP_SDRAM_Init+0xb4>)
 8004b62:	2207      	movs	r2, #7
 8004b64:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8004b66:	4b27      	ldr	r3, [pc, #156]	@ (8004c04 <BSP_SDRAM_Init+0xb4>)
 8004b68:	2204      	movs	r2, #4
 8004b6a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004b6c:	4b25      	ldr	r3, [pc, #148]	@ (8004c04 <BSP_SDRAM_Init+0xb4>)
 8004b6e:	2207      	movs	r2, #7
 8004b70:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8004b72:	4b24      	ldr	r3, [pc, #144]	@ (8004c04 <BSP_SDRAM_Init+0xb4>)
 8004b74:	2202      	movs	r2, #2
 8004b76:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8004b78:	4b22      	ldr	r3, [pc, #136]	@ (8004c04 <BSP_SDRAM_Init+0xb4>)
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8004b7e:	4b21      	ldr	r3, [pc, #132]	@ (8004c04 <BSP_SDRAM_Init+0xb4>)
 8004b80:	2202      	movs	r2, #2
 8004b82:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004b84:	4b1d      	ldr	r3, [pc, #116]	@ (8004bfc <BSP_SDRAM_Init+0xac>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8004bfc <BSP_SDRAM_Init+0xac>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004b90:	4b1a      	ldr	r3, [pc, #104]	@ (8004bfc <BSP_SDRAM_Init+0xac>)
 8004b92:	2204      	movs	r2, #4
 8004b94:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004b96:	4b19      	ldr	r3, [pc, #100]	@ (8004bfc <BSP_SDRAM_Init+0xac>)
 8004b98:	2210      	movs	r2, #16
 8004b9a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004b9c:	4b17      	ldr	r3, [pc, #92]	@ (8004bfc <BSP_SDRAM_Init+0xac>)
 8004b9e:	2240      	movs	r2, #64	@ 0x40
 8004ba0:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8004ba2:	4b16      	ldr	r3, [pc, #88]	@ (8004bfc <BSP_SDRAM_Init+0xac>)
 8004ba4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004ba8:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004baa:	4b14      	ldr	r3, [pc, #80]	@ (8004bfc <BSP_SDRAM_Init+0xac>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004bb0:	4b12      	ldr	r3, [pc, #72]	@ (8004bfc <BSP_SDRAM_Init+0xac>)
 8004bb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bb6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8004bb8:	4b10      	ldr	r3, [pc, #64]	@ (8004bfc <BSP_SDRAM_Init+0xac>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8004bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8004bfc <BSP_SDRAM_Init+0xac>)
 8004bc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004bc4:	629a      	str	r2, [r3, #40]	@ 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	480c      	ldr	r0, [pc, #48]	@ (8004bfc <BSP_SDRAM_Init+0xac>)
 8004bca:	f000 f87f 	bl	8004ccc <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8004bce:	490d      	ldr	r1, [pc, #52]	@ (8004c04 <BSP_SDRAM_Init+0xb4>)
 8004bd0:	480a      	ldr	r0, [pc, #40]	@ (8004bfc <BSP_SDRAM_Init+0xac>)
 8004bd2:	f003 fb91 	bl	80082f8 <HAL_SDRAM_Init>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004c08 <BSP_SDRAM_Init+0xb8>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	e002      	b.n	8004bea <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004be4:	4b08      	ldr	r3, [pc, #32]	@ (8004c08 <BSP_SDRAM_Init+0xb8>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004bea:	f240 506a 	movw	r0, #1386	@ 0x56a
 8004bee:	f000 f80d 	bl	8004c0c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004bf2:	4b05      	ldr	r3, [pc, #20]	@ (8004c08 <BSP_SDRAM_Init+0xb8>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000788 	.word	0x20000788
 8004c00:	a0000140 	.word	0xa0000140
 8004c04:	200007bc 	.word	0x200007bc
 8004c08:	200000a4 	.word	0x200000a4

08004c0c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004c18:	4b2a      	ldr	r3, [pc, #168]	@ (8004cc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004c1e:	4b29      	ldr	r3, [pc, #164]	@ (8004cc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c20:	2208      	movs	r2, #8
 8004c22:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004c24:	4b27      	ldr	r3, [pc, #156]	@ (8004cc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004c2a:	4b26      	ldr	r3, [pc, #152]	@ (8004cc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004c30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c34:	4923      	ldr	r1, [pc, #140]	@ (8004cc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c36:	4824      	ldr	r0, [pc, #144]	@ (8004cc8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c38:	f003 fb9c 	bl	8008374 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004c3c:	2001      	movs	r0, #1
 8004c3e:	f000 facf 	bl	80051e0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8004c42:	4b20      	ldr	r3, [pc, #128]	@ (8004cc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c44:	2202      	movs	r2, #2
 8004c46:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004c48:	4b1e      	ldr	r3, [pc, #120]	@ (8004cc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c4a:	2208      	movs	r2, #8
 8004c4c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c50:	2201      	movs	r2, #1
 8004c52:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004c54:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8004c5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c5e:	4919      	ldr	r1, [pc, #100]	@ (8004cc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c60:	4819      	ldr	r0, [pc, #100]	@ (8004cc8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c62:	f003 fb87 	bl	8008374 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004c66:	4b17      	ldr	r3, [pc, #92]	@ (8004cc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c68:	2203      	movs	r2, #3
 8004c6a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004c6c:	4b15      	ldr	r3, [pc, #84]	@ (8004cc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c6e:	2208      	movs	r2, #8
 8004c70:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8004c72:	4b14      	ldr	r3, [pc, #80]	@ (8004cc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c74:	2204      	movs	r2, #4
 8004c76:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004c78:	4b12      	ldr	r3, [pc, #72]	@ (8004cc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004c7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c82:	4910      	ldr	r1, [pc, #64]	@ (8004cc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c84:	4810      	ldr	r0, [pc, #64]	@ (8004cc8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c86:	f003 fb75 	bl	8008374 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8004c8a:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8004c8e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004c90:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c92:	2204      	movs	r2, #4
 8004c94:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004c96:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c98:	2208      	movs	r2, #8
 8004c9a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004c9c:	4b09      	ldr	r3, [pc, #36]	@ (8004cc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4a07      	ldr	r2, [pc, #28]	@ (8004cc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ca6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004ca8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cac:	4905      	ldr	r1, [pc, #20]	@ (8004cc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004cae:	4806      	ldr	r0, [pc, #24]	@ (8004cc8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004cb0:	f003 fb60 	bl	8008374 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	4804      	ldr	r0, [pc, #16]	@ (8004cc8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004cb8:	f003 fb87 	bl	80083ca <HAL_SDRAM_ProgramRefreshRate>
}
 8004cbc:	bf00      	nop
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	200007d8 	.word	0x200007d8
 8004cc8:	20000788 	.word	0x20000788

08004ccc <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b090      	sub	sp, #64	@ 0x40
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 80ec 	beq.w	8004eb6 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004cde:	2300      	movs	r3, #0
 8004ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ce2:	4b77      	ldr	r3, [pc, #476]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce6:	4a76      	ldr	r2, [pc, #472]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	6393      	str	r3, [r2, #56]	@ 0x38
 8004cee:	4b74      	ldr	r3, [pc, #464]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cfe:	4b70      	ldr	r3, [pc, #448]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d02:	4a6f      	ldr	r2, [pc, #444]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d0a:	4b6d      	ldr	r3, [pc, #436]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d16:	2300      	movs	r3, #0
 8004d18:	623b      	str	r3, [r7, #32]
 8004d1a:	4b69      	ldr	r3, [pc, #420]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1e:	4a68      	ldr	r2, [pc, #416]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d20:	f043 0302 	orr.w	r3, r3, #2
 8004d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d26:	4b66      	ldr	r3, [pc, #408]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	623b      	str	r3, [r7, #32]
 8004d30:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
 8004d36:	4b62      	ldr	r3, [pc, #392]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3a:	4a61      	ldr	r2, [pc, #388]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d3c:	f043 0304 	orr.w	r3, r3, #4
 8004d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d42:	4b5f      	ldr	r3, [pc, #380]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	4b5b      	ldr	r3, [pc, #364]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d56:	4a5a      	ldr	r2, [pc, #360]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d58:	f043 0308 	orr.w	r3, r3, #8
 8004d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d5e:	4b58      	ldr	r3, [pc, #352]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	61bb      	str	r3, [r7, #24]
 8004d68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	4b54      	ldr	r3, [pc, #336]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d72:	4a53      	ldr	r2, [pc, #332]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d74:	f043 0310 	orr.w	r3, r3, #16
 8004d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d7a:	4b51      	ldr	r3, [pc, #324]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7e:	f003 0310 	and.w	r3, r3, #16
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d86:	2300      	movs	r3, #0
 8004d88:	613b      	str	r3, [r7, #16]
 8004d8a:	4b4d      	ldr	r3, [pc, #308]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8e:	4a4c      	ldr	r2, [pc, #304]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d90:	f043 0320 	orr.w	r3, r3, #32
 8004d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d96:	4b4a      	ldr	r3, [pc, #296]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	4b46      	ldr	r3, [pc, #280]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004daa:	4a45      	ldr	r2, [pc, #276]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004dac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004db2:	4b43      	ldr	r3, [pc, #268]	@ (8004ec0 <BSP_SDRAM_MspInit+0x1f4>)
 8004db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004dca:	230c      	movs	r3, #12
 8004dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8004dce:	2360      	movs	r3, #96	@ 0x60
 8004dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8004dd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	483a      	ldr	r0, [pc, #232]	@ (8004ec4 <BSP_SDRAM_MspInit+0x1f8>)
 8004dda:	f000 ff8b 	bl	8005cf4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8004dde:	2301      	movs	r3, #1
 8004de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8004de2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004de6:	4619      	mov	r1, r3
 8004de8:	4837      	ldr	r0, [pc, #220]	@ (8004ec8 <BSP_SDRAM_MspInit+0x1fc>)
 8004dea:	f000 ff83 	bl	8005cf4 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8004dee:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004df4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4834      	ldr	r0, [pc, #208]	@ (8004ecc <BSP_SDRAM_MspInit+0x200>)
 8004dfc:	f000 ff7a 	bl	8005cf4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004e00:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004e06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4830      	ldr	r0, [pc, #192]	@ (8004ed0 <BSP_SDRAM_MspInit+0x204>)
 8004e0e:	f000 ff71 	bl	8005cf4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8004e12:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004e18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	482d      	ldr	r0, [pc, #180]	@ (8004ed4 <BSP_SDRAM_MspInit+0x208>)
 8004e20:	f000 ff68 	bl	8005cf4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004e24:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004e2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4829      	ldr	r0, [pc, #164]	@ (8004ed8 <BSP_SDRAM_MspInit+0x20c>)
 8004e32:	f000 ff5f 	bl	8005cf4 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004e36:	4b29      	ldr	r3, [pc, #164]	@ (8004edc <BSP_SDRAM_MspInit+0x210>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004e3c:	4b27      	ldr	r3, [pc, #156]	@ (8004edc <BSP_SDRAM_MspInit+0x210>)
 8004e3e:	2280      	movs	r2, #128	@ 0x80
 8004e40:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004e42:	4b26      	ldr	r3, [pc, #152]	@ (8004edc <BSP_SDRAM_MspInit+0x210>)
 8004e44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e48:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004e4a:	4b24      	ldr	r3, [pc, #144]	@ (8004edc <BSP_SDRAM_MspInit+0x210>)
 8004e4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e50:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004e52:	4b22      	ldr	r3, [pc, #136]	@ (8004edc <BSP_SDRAM_MspInit+0x210>)
 8004e54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004e58:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004e5a:	4b20      	ldr	r3, [pc, #128]	@ (8004edc <BSP_SDRAM_MspInit+0x210>)
 8004e5c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004e60:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8004e62:	4b1e      	ldr	r3, [pc, #120]	@ (8004edc <BSP_SDRAM_MspInit+0x210>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004e68:	4b1c      	ldr	r3, [pc, #112]	@ (8004edc <BSP_SDRAM_MspInit+0x210>)
 8004e6a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004e6e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004e70:	4b1a      	ldr	r3, [pc, #104]	@ (8004edc <BSP_SDRAM_MspInit+0x210>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	625a      	str	r2, [r3, #36]	@ 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004e76:	4b19      	ldr	r3, [pc, #100]	@ (8004edc <BSP_SDRAM_MspInit+0x210>)
 8004e78:	2203      	movs	r2, #3
 8004e7a:	629a      	str	r2, [r3, #40]	@ 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004e7c:	4b17      	ldr	r3, [pc, #92]	@ (8004edc <BSP_SDRAM_MspInit+0x210>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004e82:	4b16      	ldr	r3, [pc, #88]	@ (8004edc <BSP_SDRAM_MspInit+0x210>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004e88:	4b14      	ldr	r3, [pc, #80]	@ (8004edc <BSP_SDRAM_MspInit+0x210>)
 8004e8a:	4a15      	ldr	r2, [pc, #84]	@ (8004ee0 <BSP_SDRAM_MspInit+0x214>)
 8004e8c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a12      	ldr	r2, [pc, #72]	@ (8004edc <BSP_SDRAM_MspInit+0x210>)
 8004e92:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e94:	4a11      	ldr	r2, [pc, #68]	@ (8004edc <BSP_SDRAM_MspInit+0x210>)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8004e9a:	4810      	ldr	r0, [pc, #64]	@ (8004edc <BSP_SDRAM_MspInit+0x210>)
 8004e9c:	f000 fb84 	bl	80055a8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8004ea0:	480e      	ldr	r0, [pc, #56]	@ (8004edc <BSP_SDRAM_MspInit+0x210>)
 8004ea2:	f000 fad3 	bl	800544c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	210f      	movs	r1, #15
 8004eaa:	2038      	movs	r0, #56	@ 0x38
 8004eac:	f000 fa97 	bl	80053de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004eb0:	2038      	movs	r0, #56	@ 0x38
 8004eb2:	f000 fab0 	bl	8005416 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8004eb6:	bf00      	nop
 8004eb8:	3740      	adds	r7, #64	@ 0x40
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	40020400 	.word	0x40020400
 8004ec8:	40020800 	.word	0x40020800
 8004ecc:	40020c00 	.word	0x40020c00
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	40021400 	.word	0x40021400
 8004ed8:	40021800 	.word	0x40021800
 8004edc:	200007e8 	.word	0x200007e8
 8004ee0:	40026410 	.word	0x40026410

08004ee4 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	4603      	mov	r3, r0
 8004eec:	460a      	mov	r2, r1
 8004eee:	80fb      	strh	r3, [r7, #6]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8004ef8:	4a13      	ldr	r2, [pc, #76]	@ (8004f48 <BSP_TS_Init+0x64>)
 8004efa:	88fb      	ldrh	r3, [r7, #6]
 8004efc:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8004efe:	4a13      	ldr	r2, [pc, #76]	@ (8004f4c <BSP_TS_Init+0x68>)
 8004f00:	88bb      	ldrh	r3, [r7, #4]
 8004f02:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8004f04:	4b12      	ldr	r3, [pc, #72]	@ (8004f50 <BSP_TS_Init+0x6c>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2082      	movs	r0, #130	@ 0x82
 8004f0a:	4798      	blx	r3
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f640 0311 	movw	r3, #2065	@ 0x811
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d104      	bne.n	8004f22 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8004f18:	4b0e      	ldr	r3, [pc, #56]	@ (8004f54 <BSP_TS_Init+0x70>)
 8004f1a:	4a0d      	ldr	r2, [pc, #52]	@ (8004f50 <BSP_TS_Init+0x6c>)
 8004f1c:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d109      	bne.n	8004f3c <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8004f28:	4b0a      	ldr	r3, [pc, #40]	@ (8004f54 <BSP_TS_Init+0x70>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2082      	movs	r0, #130	@ 0x82
 8004f30:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8004f32:	4b08      	ldr	r3, [pc, #32]	@ (8004f54 <BSP_TS_Init+0x70>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	2082      	movs	r0, #130	@ 0x82
 8004f3a:	4798      	blx	r3
  }

  return ret;
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	2000084c 	.word	0x2000084c
 8004f4c:	2000084e 	.word	0x2000084e
 8004f50:	2000005c 	.word	0x2000005c
 8004f54:	20000848 	.word	0x20000848

08004f58 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8004f5c:	4b03      	ldr	r3, [pc, #12]	@ (8004f6c <BSP_TS_ITGetStatus+0x14>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	2082      	movs	r0, #130	@ 0x82
 8004f64:	4798      	blx	r3
 8004f66:	4603      	mov	r3, r0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20000848 	.word	0x20000848

08004f70 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004f78:	4b4f      	ldr	r3, [pc, #316]	@ (80050b8 <BSP_TS_GetState+0x148>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	2082      	movs	r0, #130	@ 0x82
 8004f80:	4798      	blx	r3
 8004f82:	4603      	mov	r3, r0
 8004f84:	461a      	mov	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 808d 	beq.w	80050ae <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8004f94:	4b48      	ldr	r3, [pc, #288]	@ (80050b8 <BSP_TS_GetState+0x148>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f107 020c 	add.w	r2, r7, #12
 8004f9e:	f107 010e 	add.w	r1, r7, #14
 8004fa2:	2082      	movs	r0, #130	@ 0x82
 8004fa4:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8004fa6:	89bb      	ldrh	r3, [r7, #12]
 8004fa8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8004fb0:	89bb      	ldrh	r3, [r7, #12]
 8004fb2:	4a42      	ldr	r2, [pc, #264]	@ (80050bc <BSP_TS_GetState+0x14c>)
 8004fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb8:	08db      	lsrs	r3, r3, #3
 8004fba:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8004fbc:	8abb      	ldrh	r3, [r7, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d102      	bne.n	8004fc8 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	82bb      	strh	r3, [r7, #20]
 8004fc6:	e008      	b.n	8004fda <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8004fc8:	4b3d      	ldr	r3, [pc, #244]	@ (80050c0 <BSP_TS_GetState+0x150>)
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	8aba      	ldrh	r2, [r7, #20]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d903      	bls.n	8004fda <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8004fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80050c0 <BSP_TS_GetState+0x150>)
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8004fda:	8abb      	ldrh	r3, [r7, #20]
 8004fdc:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8004fde:	89fb      	ldrh	r3, [r7, #14]
 8004fe0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d806      	bhi.n	8004ff6 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8004fe8:	89fb      	ldrh	r3, [r7, #14]
 8004fea:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 8004fee:	330e      	adds	r3, #14
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	81fb      	strh	r3, [r7, #14]
 8004ff4:	e005      	b.n	8005002 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8004ff6:	89fb      	ldrh	r3, [r7, #14]
 8004ff8:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8005002:	89fb      	ldrh	r3, [r7, #14]
 8005004:	4a2f      	ldr	r2, [pc, #188]	@ (80050c4 <BSP_TS_GetState+0x154>)
 8005006:	fba2 2303 	umull	r2, r3, r2, r3
 800500a:	08db      	lsrs	r3, r3, #3
 800500c:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 800500e:	8afb      	ldrh	r3, [r7, #22]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d102      	bne.n	800501a <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	82fb      	strh	r3, [r7, #22]
 8005018:	e008      	b.n	800502c <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800501a:	4b2b      	ldr	r3, [pc, #172]	@ (80050c8 <BSP_TS_GetState+0x158>)
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	8afa      	ldrh	r2, [r7, #22]
 8005020:	429a      	cmp	r2, r3
 8005022:	d903      	bls.n	800502c <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8005024:	4b28      	ldr	r3, [pc, #160]	@ (80050c8 <BSP_TS_GetState+0x158>)
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	3b01      	subs	r3, #1
 800502a:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 800502c:	8afb      	ldrh	r3, [r7, #22]
 800502e:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8005030:	89fb      	ldrh	r3, [r7, #14]
 8005032:	461a      	mov	r2, r3
 8005034:	4b25      	ldr	r3, [pc, #148]	@ (80050cc <BSP_TS_GetState+0x15c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d906      	bls.n	800504a <BSP_TS_GetState+0xda>
 800503c:	89fa      	ldrh	r2, [r7, #14]
 800503e:	4b23      	ldr	r3, [pc, #140]	@ (80050cc <BSP_TS_GetState+0x15c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	b29b      	uxth	r3, r3
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	b29b      	uxth	r3, r3
 8005048:	e005      	b.n	8005056 <BSP_TS_GetState+0xe6>
 800504a:	4b20      	ldr	r3, [pc, #128]	@ (80050cc <BSP_TS_GetState+0x15c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	b29a      	uxth	r2, r3
 8005050:	89fb      	ldrh	r3, [r7, #14]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	b29b      	uxth	r3, r3
 8005056:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8005058:	89bb      	ldrh	r3, [r7, #12]
 800505a:	461a      	mov	r2, r3
 800505c:	4b1c      	ldr	r3, [pc, #112]	@ (80050d0 <BSP_TS_GetState+0x160>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d906      	bls.n	8005072 <BSP_TS_GetState+0x102>
 8005064:	89ba      	ldrh	r2, [r7, #12]
 8005066:	4b1a      	ldr	r3, [pc, #104]	@ (80050d0 <BSP_TS_GetState+0x160>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	b29b      	uxth	r3, r3
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	b29b      	uxth	r3, r3
 8005070:	e005      	b.n	800507e <BSP_TS_GetState+0x10e>
 8005072:	4b17      	ldr	r3, [pc, #92]	@ (80050d0 <BSP_TS_GetState+0x160>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	b29a      	uxth	r2, r3
 8005078:	89bb      	ldrh	r3, [r7, #12]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	b29b      	uxth	r3, r3
 800507e:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8005080:	8a7a      	ldrh	r2, [r7, #18]
 8005082:	8a3b      	ldrh	r3, [r7, #16]
 8005084:	4413      	add	r3, r2
 8005086:	2b05      	cmp	r3, #5
 8005088:	dd07      	ble.n	800509a <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800508a:	89fb      	ldrh	r3, [r7, #14]
 800508c:	461a      	mov	r2, r3
 800508e:	4b0f      	ldr	r3, [pc, #60]	@ (80050cc <BSP_TS_GetState+0x15c>)
 8005090:	601a      	str	r2, [r3, #0]
      _y = y; 
 8005092:	89bb      	ldrh	r3, [r7, #12]
 8005094:	461a      	mov	r2, r3
 8005096:	4b0e      	ldr	r3, [pc, #56]	@ (80050d0 <BSP_TS_GetState+0x160>)
 8005098:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 800509a:	4b0c      	ldr	r3, [pc, #48]	@ (80050cc <BSP_TS_GetState+0x15c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	b29a      	uxth	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 80050a4:	4b0a      	ldr	r3, [pc, #40]	@ (80050d0 <BSP_TS_GetState+0x160>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	809a      	strh	r2, [r3, #4]
  }
}
 80050ae:	bf00      	nop
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	20000848 	.word	0x20000848
 80050bc:	ba2e8ba3 	.word	0xba2e8ba3
 80050c0:	2000084e 	.word	0x2000084e
 80050c4:	88888889 	.word	0x88888889
 80050c8:	2000084c 	.word	0x2000084c
 80050cc:	20000850 	.word	0x20000850
 80050d0:	20000854 	.word	0x20000854

080050d4 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 80050d8:	4b03      	ldr	r3, [pc, #12]	@ (80050e8 <BSP_TS_ITClear+0x14>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	2082      	movs	r0, #130	@ 0x82
 80050e0:	4798      	blx	r3
}
 80050e2:	bf00      	nop
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000848 	.word	0x20000848

080050ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80050f0:	4b0e      	ldr	r3, [pc, #56]	@ (800512c <HAL_Init+0x40>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a0d      	ldr	r2, [pc, #52]	@ (800512c <HAL_Init+0x40>)
 80050f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80050fc:	4b0b      	ldr	r3, [pc, #44]	@ (800512c <HAL_Init+0x40>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a0a      	ldr	r2, [pc, #40]	@ (800512c <HAL_Init+0x40>)
 8005102:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005106:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005108:	4b08      	ldr	r3, [pc, #32]	@ (800512c <HAL_Init+0x40>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a07      	ldr	r2, [pc, #28]	@ (800512c <HAL_Init+0x40>)
 800510e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005114:	2003      	movs	r0, #3
 8005116:	f000 f957 	bl	80053c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800511a:	200f      	movs	r0, #15
 800511c:	f000 f810 	bl	8005140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005120:	f000 f806 	bl	8005130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	40023c00 	.word	0x40023c00

08005130 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8005134:	bf00      	nop
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
	...

08005140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005148:	4b12      	ldr	r3, [pc, #72]	@ (8005194 <HAL_InitTick+0x54>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	4b12      	ldr	r3, [pc, #72]	@ (8005198 <HAL_InitTick+0x58>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	4619      	mov	r1, r3
 8005152:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005156:	fbb3 f3f1 	udiv	r3, r3, r1
 800515a:	fbb2 f3f3 	udiv	r3, r2, r3
 800515e:	4618      	mov	r0, r3
 8005160:	f000 f967 	bl	8005432 <HAL_SYSTICK_Config>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e00e      	b.n	800518c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b0f      	cmp	r3, #15
 8005172:	d80a      	bhi.n	800518a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005174:	2200      	movs	r2, #0
 8005176:	6879      	ldr	r1, [r7, #4]
 8005178:	f04f 30ff 	mov.w	r0, #4294967295
 800517c:	f000 f92f 	bl	80053de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005180:	4a06      	ldr	r2, [pc, #24]	@ (800519c <HAL_InitTick+0x5c>)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	e000      	b.n	800518c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
}
 800518c:	4618      	mov	r0, r3
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	20000020 	.word	0x20000020
 8005198:	200000ac 	.word	0x200000ac
 800519c:	200000a8 	.word	0x200000a8

080051a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051a4:	4b06      	ldr	r3, [pc, #24]	@ (80051c0 <HAL_IncTick+0x20>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	4b06      	ldr	r3, [pc, #24]	@ (80051c4 <HAL_IncTick+0x24>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4413      	add	r3, r2
 80051b0:	4a04      	ldr	r2, [pc, #16]	@ (80051c4 <HAL_IncTick+0x24>)
 80051b2:	6013      	str	r3, [r2, #0]
}
 80051b4:	bf00      	nop
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	200000ac 	.word	0x200000ac
 80051c4:	20000858 	.word	0x20000858

080051c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  return uwTick;
 80051cc:	4b03      	ldr	r3, [pc, #12]	@ (80051dc <HAL_GetTick+0x14>)
 80051ce:	681b      	ldr	r3, [r3, #0]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	20000858 	.word	0x20000858

080051e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051e8:	f7ff ffee 	bl	80051c8 <HAL_GetTick>
 80051ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f8:	d005      	beq.n	8005206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80051fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005224 <HAL_Delay+0x44>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005206:	bf00      	nop
 8005208:	f7ff ffde 	bl	80051c8 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	429a      	cmp	r2, r3
 8005216:	d8f7      	bhi.n	8005208 <HAL_Delay+0x28>
  {
  }
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	200000ac 	.word	0x200000ac

08005228 <__NVIC_SetPriorityGrouping>:
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005238:	4b0c      	ldr	r3, [pc, #48]	@ (800526c <__NVIC_SetPriorityGrouping+0x44>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005244:	4013      	ands	r3, r2
 8005246:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005250:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800525a:	4a04      	ldr	r2, [pc, #16]	@ (800526c <__NVIC_SetPriorityGrouping+0x44>)
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	60d3      	str	r3, [r2, #12]
}
 8005260:	bf00      	nop
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	e000ed00 	.word	0xe000ed00

08005270 <__NVIC_GetPriorityGrouping>:
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005274:	4b04      	ldr	r3, [pc, #16]	@ (8005288 <__NVIC_GetPriorityGrouping+0x18>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	0a1b      	lsrs	r3, r3, #8
 800527a:	f003 0307 	and.w	r3, r3, #7
}
 800527e:	4618      	mov	r0, r3
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	e000ed00 	.word	0xe000ed00

0800528c <__NVIC_EnableIRQ>:
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800529a:	2b00      	cmp	r3, #0
 800529c:	db0b      	blt.n	80052b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	f003 021f 	and.w	r2, r3, #31
 80052a4:	4907      	ldr	r1, [pc, #28]	@ (80052c4 <__NVIC_EnableIRQ+0x38>)
 80052a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	2001      	movs	r0, #1
 80052ae:	fa00 f202 	lsl.w	r2, r0, r2
 80052b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	e000e100 	.word	0xe000e100

080052c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	6039      	str	r1, [r7, #0]
 80052d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	db0a      	blt.n	80052f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	490c      	ldr	r1, [pc, #48]	@ (8005314 <__NVIC_SetPriority+0x4c>)
 80052e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e6:	0112      	lsls	r2, r2, #4
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	440b      	add	r3, r1
 80052ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052f0:	e00a      	b.n	8005308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	4908      	ldr	r1, [pc, #32]	@ (8005318 <__NVIC_SetPriority+0x50>)
 80052f8:	79fb      	ldrb	r3, [r7, #7]
 80052fa:	f003 030f 	and.w	r3, r3, #15
 80052fe:	3b04      	subs	r3, #4
 8005300:	0112      	lsls	r2, r2, #4
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	440b      	add	r3, r1
 8005306:	761a      	strb	r2, [r3, #24]
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	e000e100 	.word	0xe000e100
 8005318:	e000ed00 	.word	0xe000ed00

0800531c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800531c:	b480      	push	{r7}
 800531e:	b089      	sub	sp, #36	@ 0x24
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	f1c3 0307 	rsb	r3, r3, #7
 8005336:	2b04      	cmp	r3, #4
 8005338:	bf28      	it	cs
 800533a:	2304      	movcs	r3, #4
 800533c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	3304      	adds	r3, #4
 8005342:	2b06      	cmp	r3, #6
 8005344:	d902      	bls.n	800534c <NVIC_EncodePriority+0x30>
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	3b03      	subs	r3, #3
 800534a:	e000      	b.n	800534e <NVIC_EncodePriority+0x32>
 800534c:	2300      	movs	r3, #0
 800534e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005350:	f04f 32ff 	mov.w	r2, #4294967295
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	fa02 f303 	lsl.w	r3, r2, r3
 800535a:	43da      	mvns	r2, r3
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	401a      	ands	r2, r3
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005364:	f04f 31ff 	mov.w	r1, #4294967295
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	fa01 f303 	lsl.w	r3, r1, r3
 800536e:	43d9      	mvns	r1, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005374:	4313      	orrs	r3, r2
         );
}
 8005376:	4618      	mov	r0, r3
 8005378:	3724      	adds	r7, #36	@ 0x24
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
	...

08005384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3b01      	subs	r3, #1
 8005390:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005394:	d301      	bcc.n	800539a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005396:	2301      	movs	r3, #1
 8005398:	e00f      	b.n	80053ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800539a:	4a0a      	ldr	r2, [pc, #40]	@ (80053c4 <SysTick_Config+0x40>)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3b01      	subs	r3, #1
 80053a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053a2:	210f      	movs	r1, #15
 80053a4:	f04f 30ff 	mov.w	r0, #4294967295
 80053a8:	f7ff ff8e 	bl	80052c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053ac:	4b05      	ldr	r3, [pc, #20]	@ (80053c4 <SysTick_Config+0x40>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053b2:	4b04      	ldr	r3, [pc, #16]	@ (80053c4 <SysTick_Config+0x40>)
 80053b4:	2207      	movs	r2, #7
 80053b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	e000e010 	.word	0xe000e010

080053c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff ff29 	bl	8005228 <__NVIC_SetPriorityGrouping>
}
 80053d6:	bf00      	nop
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053de:	b580      	push	{r7, lr}
 80053e0:	b086      	sub	sp, #24
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	4603      	mov	r3, r0
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
 80053ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053f0:	f7ff ff3e 	bl	8005270 <__NVIC_GetPriorityGrouping>
 80053f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	6978      	ldr	r0, [r7, #20]
 80053fc:	f7ff ff8e 	bl	800531c <NVIC_EncodePriority>
 8005400:	4602      	mov	r2, r0
 8005402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005406:	4611      	mov	r1, r2
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff ff5d 	bl	80052c8 <__NVIC_SetPriority>
}
 800540e:	bf00      	nop
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	4603      	mov	r3, r0
 800541e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff ff31 	bl	800528c <__NVIC_EnableIRQ>
}
 800542a:	bf00      	nop
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b082      	sub	sp, #8
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff ffa2 	bl	8005384 <SysTick_Config>
 8005440:	4603      	mov	r3, r0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
	...

0800544c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005458:	f7ff feb6 	bl	80051c8 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e099      	b.n	800559c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0201 	bic.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005488:	e00f      	b.n	80054aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800548a:	f7ff fe9d 	bl	80051c8 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b05      	cmp	r3, #5
 8005496:	d908      	bls.n	80054aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2203      	movs	r2, #3
 80054a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e078      	b.n	800559c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e8      	bne.n	800548a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	4b38      	ldr	r3, [pc, #224]	@ (80055a4 <HAL_DMA_Init+0x158>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005500:	2b04      	cmp	r3, #4
 8005502:	d107      	bne.n	8005514 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550c:	4313      	orrs	r3, r2
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f023 0307 	bic.w	r3, r3, #7
 800552a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553a:	2b04      	cmp	r3, #4
 800553c:	d117      	bne.n	800556e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00e      	beq.n	800556e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f8bd 	bl	80056d0 <DMA_CheckFifoParam>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d008      	beq.n	800556e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2240      	movs	r2, #64	@ 0x40
 8005560:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800556a:	2301      	movs	r3, #1
 800556c:	e016      	b.n	800559c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f874 	bl	8005664 <DMA_CalcBaseAndBitshift>
 800557c:	4603      	mov	r3, r0
 800557e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005584:	223f      	movs	r2, #63	@ 0x3f
 8005586:	409a      	lsls	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	f010803f 	.word	0xf010803f

080055a8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e050      	b.n	800565c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d101      	bne.n	80055ca <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80055c6:	2302      	movs	r3, #2
 80055c8:	e048      	b.n	800565c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0201 	bic.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2200      	movs	r2, #0
 80055e8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2200      	movs	r2, #0
 80055f0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2200      	movs	r2, #0
 80055f8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2200      	movs	r2, #0
 8005600:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2221      	movs	r2, #33	@ 0x21
 8005608:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f82a 	bl	8005664 <DMA_CalcBaseAndBitshift>
 8005610:	4603      	mov	r3, r0
 8005612:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800563c:	223f      	movs	r2, #63	@ 0x3f
 800563e:	409a      	lsls	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	3b10      	subs	r3, #16
 8005674:	4a14      	ldr	r2, [pc, #80]	@ (80056c8 <DMA_CalcBaseAndBitshift+0x64>)
 8005676:	fba2 2303 	umull	r2, r3, r2, r3
 800567a:	091b      	lsrs	r3, r3, #4
 800567c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800567e:	4a13      	ldr	r2, [pc, #76]	@ (80056cc <DMA_CalcBaseAndBitshift+0x68>)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b03      	cmp	r3, #3
 8005690:	d909      	bls.n	80056a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800569a:	f023 0303 	bic.w	r3, r3, #3
 800569e:	1d1a      	adds	r2, r3, #4
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80056a4:	e007      	b.n	80056b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80056ae:	f023 0303 	bic.w	r3, r3, #3
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	aaaaaaab 	.word	0xaaaaaaab
 80056cc:	0800df84 	.word	0x0800df84

080056d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d11f      	bne.n	800572a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d856      	bhi.n	800579e <DMA_CheckFifoParam+0xce>
 80056f0:	a201      	add	r2, pc, #4	@ (adr r2, 80056f8 <DMA_CheckFifoParam+0x28>)
 80056f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f6:	bf00      	nop
 80056f8:	08005709 	.word	0x08005709
 80056fc:	0800571b 	.word	0x0800571b
 8005700:	08005709 	.word	0x08005709
 8005704:	0800579f 	.word	0x0800579f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d046      	beq.n	80057a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005718:	e043      	b.n	80057a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005722:	d140      	bne.n	80057a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005728:	e03d      	b.n	80057a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005732:	d121      	bne.n	8005778 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b03      	cmp	r3, #3
 8005738:	d837      	bhi.n	80057aa <DMA_CheckFifoParam+0xda>
 800573a:	a201      	add	r2, pc, #4	@ (adr r2, 8005740 <DMA_CheckFifoParam+0x70>)
 800573c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005740:	08005751 	.word	0x08005751
 8005744:	08005757 	.word	0x08005757
 8005748:	08005751 	.word	0x08005751
 800574c:	08005769 	.word	0x08005769
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
      break;
 8005754:	e030      	b.n	80057b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d025      	beq.n	80057ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005766:	e022      	b.n	80057ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005770:	d11f      	bne.n	80057b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005776:	e01c      	b.n	80057b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2b02      	cmp	r3, #2
 800577c:	d903      	bls.n	8005786 <DMA_CheckFifoParam+0xb6>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b03      	cmp	r3, #3
 8005782:	d003      	beq.n	800578c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005784:	e018      	b.n	80057b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	73fb      	strb	r3, [r7, #15]
      break;
 800578a:	e015      	b.n	80057b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005790:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00e      	beq.n	80057b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	73fb      	strb	r3, [r7, #15]
      break;
 800579c:	e00b      	b.n	80057b6 <DMA_CheckFifoParam+0xe6>
      break;
 800579e:	bf00      	nop
 80057a0:	e00a      	b.n	80057b8 <DMA_CheckFifoParam+0xe8>
      break;
 80057a2:	bf00      	nop
 80057a4:	e008      	b.n	80057b8 <DMA_CheckFifoParam+0xe8>
      break;
 80057a6:	bf00      	nop
 80057a8:	e006      	b.n	80057b8 <DMA_CheckFifoParam+0xe8>
      break;
 80057aa:	bf00      	nop
 80057ac:	e004      	b.n	80057b8 <DMA_CheckFifoParam+0xe8>
      break;
 80057ae:	bf00      	nop
 80057b0:	e002      	b.n	80057b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80057b2:	bf00      	nop
 80057b4:	e000      	b.n	80057b8 <DMA_CheckFifoParam+0xe8>
      break;
 80057b6:	bf00      	nop
    }
  } 
  
  return status; 
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop

080057c8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e03b      	b.n	8005852 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f833 	bl	800585a <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005818:	f023 0107 	bic.w	r1, r3, #7
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005832:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	68d1      	ldr	r1, [r2, #12]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	6812      	ldr	r2, [r2, #0]
 800583e:	430b      	orrs	r3, r1
 8005840:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b086      	sub	sp, #24
 8005872:	af02      	add	r7, sp, #8
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	607a      	str	r2, [r7, #4]
 800587a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_DMA2D_Start+0x1c>
 8005886:	2302      	movs	r3, #2
 8005888:	e018      	b.n	80058bc <HAL_DMA2D_Start+0x4e>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2202      	movs	r2, #2
 8005896:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	68b9      	ldr	r1, [r7, #8]
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 f989 	bl	8005bbc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0201 	orr.w	r2, r2, #1
 80058b8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d056      	beq.n	800598e <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80058e0:	f7ff fc72 	bl	80051c8 <HAL_GetTick>
 80058e4:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80058e6:	e04b      	b.n	8005980 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d023      	beq.n	8005942 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f003 0320 	and.w	r3, r3, #32
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005908:	f043 0202 	orr.w	r2, r3, #2
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d005      	beq.n	8005926 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591e:	f043 0201 	orr.w	r2, r3, #1
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2221      	movs	r2, #33	@ 0x21
 800592c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2204      	movs	r2, #4
 8005932:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e0a5      	b.n	8005a8e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005948:	d01a      	beq.n	8005980 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800594a:	f7ff fc3d 	bl	80051c8 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	d302      	bcc.n	8005960 <HAL_DMA2D_PollForTransfer+0x9c>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10f      	bne.n	8005980 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005964:	f043 0220 	orr.w	r2, r3, #32
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2203      	movs	r2, #3
 8005970:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e086      	b.n	8005a8e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d0ac      	beq.n	80058e8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	f003 0320 	and.w	r3, r3, #32
 8005998:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a0:	f003 0320 	and.w	r3, r3, #32
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d061      	beq.n	8005a74 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80059b0:	f7ff fc0a 	bl	80051c8 <HAL_GetTick>
 80059b4:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80059b6:	e056      	b.n	8005a66 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d02e      	beq.n	8005a28 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f003 0308 	and.w	r3, r3, #8
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d005      	beq.n	80059e0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d8:	f043 0204 	orr.w	r2, r3, #4
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d005      	beq.n	80059f6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ee:	f043 0202 	orr.w	r2, r3, #2
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a04:	f043 0201 	orr.w	r2, r3, #1
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2229      	movs	r2, #41	@ 0x29
 8005a12:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2204      	movs	r2, #4
 8005a18:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e032      	b.n	8005a8e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2e:	d01a      	beq.n	8005a66 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005a30:	f7ff fbca 	bl	80051c8 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d302      	bcc.n	8005a46 <HAL_DMA2D_PollForTransfer+0x182>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10f      	bne.n	8005a66 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a4a:	f043 0220 	orr.w	r2, r3, #32
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2203      	movs	r2, #3
 8005a56:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e013      	b.n	8005a8e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f003 0310 	and.w	r3, r3, #16
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0a1      	beq.n	80059b8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2212      	movs	r2, #18
 8005a7a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3718      	adds	r7, #24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <HAL_DMA2D_ConfigLayer+0x20>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e079      	b.n	8005bac <HAL_DMA2D_ConfigLayer+0x114>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	011b      	lsls	r3, r3, #4
 8005acc:	3318      	adds	r3, #24
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	041b      	lsls	r3, r3, #16
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005ae2:	4b35      	ldr	r3, [pc, #212]	@ (8005bb8 <HAL_DMA2D_ConfigLayer+0x120>)
 8005ae4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2b0a      	cmp	r3, #10
 8005aec:	d003      	beq.n	8005af6 <HAL_DMA2D_ConfigLayer+0x5e>
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b09      	cmp	r3, #9
 8005af4:	d107      	bne.n	8005b06 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	e005      	b.n	8005b12 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	061b      	lsls	r3, r3, #24
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d120      	bne.n	8005b5a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	43db      	mvns	r3, r3
 8005b22:	ea02 0103 	and.w	r1, r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	2b0a      	cmp	r3, #10
 8005b40:	d003      	beq.n	8005b4a <HAL_DMA2D_ConfigLayer+0xb2>
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2b09      	cmp	r3, #9
 8005b48:	d127      	bne.n	8005b9a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005b56:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b58:	e01f      	b.n	8005b9a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69da      	ldr	r2, [r3, #28]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	43db      	mvns	r3, r3
 8005b64:	ea02 0103 	and.w	r1, r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	6812      	ldr	r2, [r2, #0]
 8005b7a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b0a      	cmp	r3, #10
 8005b82:	d003      	beq.n	8005b8c <HAL_DMA2D_ConfigLayer+0xf4>
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2b09      	cmp	r3, #9
 8005b8a:	d106      	bne.n	8005b9a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005b98:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	371c      	adds	r7, #28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	ff03000f 	.word	0xff03000f

08005bbc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b08b      	sub	sp, #44	@ 0x2c
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
 8005bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd0:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	041a      	lsls	r2, r3, #16
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bf4:	d174      	bne.n	8005ce0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005bfc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005c04:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005c0c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d108      	bne.n	8005c2e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	431a      	orrs	r2, r3
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c2c:	e053      	b.n	8005cd6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d106      	bne.n	8005c44 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c42:	e048      	b.n	8005cd6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d111      	bne.n	8005c70 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	0cdb      	lsrs	r3, r3, #19
 8005c50:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	0a9b      	lsrs	r3, r3, #10
 8005c56:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	08db      	lsrs	r3, r3, #3
 8005c5c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	02db      	lsls	r3, r3, #11
 8005c66:	4313      	orrs	r3, r2
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c6e:	e032      	b.n	8005cd6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d117      	bne.n	8005ca8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	0fdb      	lsrs	r3, r3, #31
 8005c7c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	0cdb      	lsrs	r3, r3, #19
 8005c82:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	0adb      	lsrs	r3, r3, #11
 8005c88:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	08db      	lsrs	r3, r3, #3
 8005c8e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	029b      	lsls	r3, r3, #10
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	03db      	lsls	r3, r3, #15
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ca6:	e016      	b.n	8005cd6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	0f1b      	lsrs	r3, r3, #28
 8005cac:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	0d1b      	lsrs	r3, r3, #20
 8005cb2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	0b1b      	lsrs	r3, r3, #12
 8005cb8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	091b      	lsrs	r3, r3, #4
 8005cbe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	011a      	lsls	r2, r3, #4
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	021b      	lsls	r3, r3, #8
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	031b      	lsls	r3, r3, #12
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cdc:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005cde:	e003      	b.n	8005ce8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	60da      	str	r2, [r3, #12]
}
 8005ce8:	bf00      	nop
 8005cea:	372c      	adds	r7, #44	@ 0x2c
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b089      	sub	sp, #36	@ 0x24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61fb      	str	r3, [r7, #28]
 8005d0e:	e177      	b.n	8006000 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d10:	2201      	movs	r2, #1
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	fa02 f303 	lsl.w	r3, r2, r3
 8005d18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4013      	ands	r3, r2
 8005d22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	f040 8166 	bne.w	8005ffa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d00b      	beq.n	8005d4e <HAL_GPIO_Init+0x5a>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d007      	beq.n	8005d4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d42:	2b11      	cmp	r3, #17
 8005d44:	d003      	beq.n	8005d4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2b12      	cmp	r3, #18
 8005d4c:	d130      	bne.n	8005db0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	2203      	movs	r2, #3
 8005d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5e:	43db      	mvns	r3, r3
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	4013      	ands	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d84:	2201      	movs	r2, #1
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	43db      	mvns	r3, r3
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	4013      	ands	r3, r2
 8005d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	091b      	lsrs	r3, r3, #4
 8005d9a:	f003 0201 	and.w	r2, r3, #1
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	fa02 f303 	lsl.w	r3, r2, r3
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	2203      	movs	r2, #3
 8005dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc0:	43db      	mvns	r3, r3
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d003      	beq.n	8005df0 <HAL_GPIO_Init+0xfc>
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	2b12      	cmp	r3, #18
 8005dee:	d123      	bne.n	8005e38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	08da      	lsrs	r2, r3, #3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3208      	adds	r2, #8
 8005df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	220f      	movs	r2, #15
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4013      	ands	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	691a      	ldr	r2, [r3, #16]
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	f003 0307 	and.w	r3, r3, #7
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	08da      	lsrs	r2, r3, #3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3208      	adds	r2, #8
 8005e32:	69b9      	ldr	r1, [r7, #24]
 8005e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	2203      	movs	r2, #3
 8005e44:	fa02 f303 	lsl.w	r3, r2, r3
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f003 0203 	and.w	r2, r3, #3
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 80c0 	beq.w	8005ffa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
 8005e7e:	4b66      	ldr	r3, [pc, #408]	@ (8006018 <HAL_GPIO_Init+0x324>)
 8005e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e82:	4a65      	ldr	r2, [pc, #404]	@ (8006018 <HAL_GPIO_Init+0x324>)
 8005e84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e88:	6453      	str	r3, [r2, #68]	@ 0x44
 8005e8a:	4b63      	ldr	r3, [pc, #396]	@ (8006018 <HAL_GPIO_Init+0x324>)
 8005e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e96:	4a61      	ldr	r2, [pc, #388]	@ (800601c <HAL_GPIO_Init+0x328>)
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	089b      	lsrs	r3, r3, #2
 8005e9c:	3302      	adds	r3, #2
 8005e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	220f      	movs	r2, #15
 8005eae:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a58      	ldr	r2, [pc, #352]	@ (8006020 <HAL_GPIO_Init+0x32c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d037      	beq.n	8005f32 <HAL_GPIO_Init+0x23e>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a57      	ldr	r2, [pc, #348]	@ (8006024 <HAL_GPIO_Init+0x330>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d031      	beq.n	8005f2e <HAL_GPIO_Init+0x23a>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a56      	ldr	r2, [pc, #344]	@ (8006028 <HAL_GPIO_Init+0x334>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d02b      	beq.n	8005f2a <HAL_GPIO_Init+0x236>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a55      	ldr	r2, [pc, #340]	@ (800602c <HAL_GPIO_Init+0x338>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d025      	beq.n	8005f26 <HAL_GPIO_Init+0x232>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a54      	ldr	r2, [pc, #336]	@ (8006030 <HAL_GPIO_Init+0x33c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d01f      	beq.n	8005f22 <HAL_GPIO_Init+0x22e>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a53      	ldr	r2, [pc, #332]	@ (8006034 <HAL_GPIO_Init+0x340>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d019      	beq.n	8005f1e <HAL_GPIO_Init+0x22a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a52      	ldr	r2, [pc, #328]	@ (8006038 <HAL_GPIO_Init+0x344>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d013      	beq.n	8005f1a <HAL_GPIO_Init+0x226>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a51      	ldr	r2, [pc, #324]	@ (800603c <HAL_GPIO_Init+0x348>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00d      	beq.n	8005f16 <HAL_GPIO_Init+0x222>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a50      	ldr	r2, [pc, #320]	@ (8006040 <HAL_GPIO_Init+0x34c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d007      	beq.n	8005f12 <HAL_GPIO_Init+0x21e>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a4f      	ldr	r2, [pc, #316]	@ (8006044 <HAL_GPIO_Init+0x350>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d101      	bne.n	8005f0e <HAL_GPIO_Init+0x21a>
 8005f0a:	2309      	movs	r3, #9
 8005f0c:	e012      	b.n	8005f34 <HAL_GPIO_Init+0x240>
 8005f0e:	230a      	movs	r3, #10
 8005f10:	e010      	b.n	8005f34 <HAL_GPIO_Init+0x240>
 8005f12:	2308      	movs	r3, #8
 8005f14:	e00e      	b.n	8005f34 <HAL_GPIO_Init+0x240>
 8005f16:	2307      	movs	r3, #7
 8005f18:	e00c      	b.n	8005f34 <HAL_GPIO_Init+0x240>
 8005f1a:	2306      	movs	r3, #6
 8005f1c:	e00a      	b.n	8005f34 <HAL_GPIO_Init+0x240>
 8005f1e:	2305      	movs	r3, #5
 8005f20:	e008      	b.n	8005f34 <HAL_GPIO_Init+0x240>
 8005f22:	2304      	movs	r3, #4
 8005f24:	e006      	b.n	8005f34 <HAL_GPIO_Init+0x240>
 8005f26:	2303      	movs	r3, #3
 8005f28:	e004      	b.n	8005f34 <HAL_GPIO_Init+0x240>
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	e002      	b.n	8005f34 <HAL_GPIO_Init+0x240>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <HAL_GPIO_Init+0x240>
 8005f32:	2300      	movs	r3, #0
 8005f34:	69fa      	ldr	r2, [r7, #28]
 8005f36:	f002 0203 	and.w	r2, r2, #3
 8005f3a:	0092      	lsls	r2, r2, #2
 8005f3c:	4093      	lsls	r3, r2
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f44:	4935      	ldr	r1, [pc, #212]	@ (800601c <HAL_GPIO_Init+0x328>)
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	089b      	lsrs	r3, r3, #2
 8005f4a:	3302      	adds	r3, #2
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f52:	4b3d      	ldr	r3, [pc, #244]	@ (8006048 <HAL_GPIO_Init+0x354>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	43db      	mvns	r3, r3
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f76:	4a34      	ldr	r2, [pc, #208]	@ (8006048 <HAL_GPIO_Init+0x354>)
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005f7c:	4b32      	ldr	r3, [pc, #200]	@ (8006048 <HAL_GPIO_Init+0x354>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	43db      	mvns	r3, r3
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d003      	beq.n	8005fa0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005fa0:	4a29      	ldr	r2, [pc, #164]	@ (8006048 <HAL_GPIO_Init+0x354>)
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005fa6:	4b28      	ldr	r3, [pc, #160]	@ (8006048 <HAL_GPIO_Init+0x354>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	43db      	mvns	r3, r3
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005fca:	4a1f      	ldr	r2, [pc, #124]	@ (8006048 <HAL_GPIO_Init+0x354>)
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8006048 <HAL_GPIO_Init+0x354>)
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	43db      	mvns	r3, r3
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ff4:	4a14      	ldr	r2, [pc, #80]	@ (8006048 <HAL_GPIO_Init+0x354>)
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	61fb      	str	r3, [r7, #28]
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	2b0f      	cmp	r3, #15
 8006004:	f67f ae84 	bls.w	8005d10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006008:	bf00      	nop
 800600a:	bf00      	nop
 800600c:	3724      	adds	r7, #36	@ 0x24
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	40023800 	.word	0x40023800
 800601c:	40013800 	.word	0x40013800
 8006020:	40020000 	.word	0x40020000
 8006024:	40020400 	.word	0x40020400
 8006028:	40020800 	.word	0x40020800
 800602c:	40020c00 	.word	0x40020c00
 8006030:	40021000 	.word	0x40021000
 8006034:	40021400 	.word	0x40021400
 8006038:	40021800 	.word	0x40021800
 800603c:	40021c00 	.word	0x40021c00
 8006040:	40022000 	.word	0x40022000
 8006044:	40022400 	.word	0x40022400
 8006048:	40013c00 	.word	0x40013c00

0800604c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	460b      	mov	r3, r1
 8006056:	807b      	strh	r3, [r7, #2]
 8006058:	4613      	mov	r3, r2
 800605a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800605c:	787b      	ldrb	r3, [r7, #1]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006062:	887a      	ldrh	r2, [r7, #2]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006068:	e003      	b.n	8006072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800606a:	887b      	ldrh	r3, [r7, #2]
 800606c:	041a      	lsls	r2, r3, #16
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	619a      	str	r2, [r3, #24]
}
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	460b      	mov	r3, r1
 8006088:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	695a      	ldr	r2, [r3, #20]
 800608e:	887b      	ldrh	r3, [r7, #2]
 8006090:	401a      	ands	r2, r3
 8006092:	887b      	ldrh	r3, [r7, #2]
 8006094:	429a      	cmp	r2, r3
 8006096:	d104      	bne.n	80060a2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006098:	887b      	ldrh	r3, [r7, #2]
 800609a:	041a      	lsls	r2, r3, #16
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80060a0:	e002      	b.n	80060a8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80060a2:	887a      	ldrh	r2, [r7, #2]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	619a      	str	r2, [r3, #24]
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e12b      	b.n	800631e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d106      	bne.n	80060e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f95d 	bl	800639a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2224      	movs	r2, #36	@ 0x24
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0201 	bic.w	r2, r2, #1
 80060f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006106:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006116:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006118:	f001 ff1a 	bl	8007f50 <HAL_RCC_GetPCLK1Freq>
 800611c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	4a81      	ldr	r2, [pc, #516]	@ (8006328 <HAL_I2C_Init+0x274>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d807      	bhi.n	8006138 <HAL_I2C_Init+0x84>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4a80      	ldr	r2, [pc, #512]	@ (800632c <HAL_I2C_Init+0x278>)
 800612c:	4293      	cmp	r3, r2
 800612e:	bf94      	ite	ls
 8006130:	2301      	movls	r3, #1
 8006132:	2300      	movhi	r3, #0
 8006134:	b2db      	uxtb	r3, r3
 8006136:	e006      	b.n	8006146 <HAL_I2C_Init+0x92>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4a7d      	ldr	r2, [pc, #500]	@ (8006330 <HAL_I2C_Init+0x27c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	bf94      	ite	ls
 8006140:	2301      	movls	r3, #1
 8006142:	2300      	movhi	r3, #0
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e0e7      	b.n	800631e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4a78      	ldr	r2, [pc, #480]	@ (8006334 <HAL_I2C_Init+0x280>)
 8006152:	fba2 2303 	umull	r2, r3, r2, r3
 8006156:	0c9b      	lsrs	r3, r3, #18
 8006158:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	4a6a      	ldr	r2, [pc, #424]	@ (8006328 <HAL_I2C_Init+0x274>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d802      	bhi.n	8006188 <HAL_I2C_Init+0xd4>
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	3301      	adds	r3, #1
 8006186:	e009      	b.n	800619c <HAL_I2C_Init+0xe8>
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800618e:	fb02 f303 	mul.w	r3, r2, r3
 8006192:	4a69      	ldr	r2, [pc, #420]	@ (8006338 <HAL_I2C_Init+0x284>)
 8006194:	fba2 2303 	umull	r2, r3, r2, r3
 8006198:	099b      	lsrs	r3, r3, #6
 800619a:	3301      	adds	r3, #1
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6812      	ldr	r2, [r2, #0]
 80061a0:	430b      	orrs	r3, r1
 80061a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80061ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	495c      	ldr	r1, [pc, #368]	@ (8006328 <HAL_I2C_Init+0x274>)
 80061b8:	428b      	cmp	r3, r1
 80061ba:	d819      	bhi.n	80061f0 <HAL_I2C_Init+0x13c>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	1e59      	subs	r1, r3, #1
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80061ca:	1c59      	adds	r1, r3, #1
 80061cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80061d0:	400b      	ands	r3, r1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <HAL_I2C_Init+0x138>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	1e59      	subs	r1, r3, #1
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80061e4:	3301      	adds	r3, #1
 80061e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ea:	e051      	b.n	8006290 <HAL_I2C_Init+0x1dc>
 80061ec:	2304      	movs	r3, #4
 80061ee:	e04f      	b.n	8006290 <HAL_I2C_Init+0x1dc>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d111      	bne.n	800621c <HAL_I2C_Init+0x168>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	1e58      	subs	r0, r3, #1
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6859      	ldr	r1, [r3, #4]
 8006200:	460b      	mov	r3, r1
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	440b      	add	r3, r1
 8006206:	fbb0 f3f3 	udiv	r3, r0, r3
 800620a:	3301      	adds	r3, #1
 800620c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006210:	2b00      	cmp	r3, #0
 8006212:	bf0c      	ite	eq
 8006214:	2301      	moveq	r3, #1
 8006216:	2300      	movne	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	e012      	b.n	8006242 <HAL_I2C_Init+0x18e>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	1e58      	subs	r0, r3, #1
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6859      	ldr	r1, [r3, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	440b      	add	r3, r1
 800622a:	0099      	lsls	r1, r3, #2
 800622c:	440b      	add	r3, r1
 800622e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006232:	3301      	adds	r3, #1
 8006234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006238:	2b00      	cmp	r3, #0
 800623a:	bf0c      	ite	eq
 800623c:	2301      	moveq	r3, #1
 800623e:	2300      	movne	r3, #0
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <HAL_I2C_Init+0x196>
 8006246:	2301      	movs	r3, #1
 8006248:	e022      	b.n	8006290 <HAL_I2C_Init+0x1dc>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10e      	bne.n	8006270 <HAL_I2C_Init+0x1bc>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	1e58      	subs	r0, r3, #1
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6859      	ldr	r1, [r3, #4]
 800625a:	460b      	mov	r3, r1
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	440b      	add	r3, r1
 8006260:	fbb0 f3f3 	udiv	r3, r0, r3
 8006264:	3301      	adds	r3, #1
 8006266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800626a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800626e:	e00f      	b.n	8006290 <HAL_I2C_Init+0x1dc>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	1e58      	subs	r0, r3, #1
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6859      	ldr	r1, [r3, #4]
 8006278:	460b      	mov	r3, r1
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	440b      	add	r3, r1
 800627e:	0099      	lsls	r1, r3, #2
 8006280:	440b      	add	r3, r1
 8006282:	fbb0 f3f3 	udiv	r3, r0, r3
 8006286:	3301      	adds	r3, #1
 8006288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800628c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006290:	6879      	ldr	r1, [r7, #4]
 8006292:	6809      	ldr	r1, [r1, #0]
 8006294:	4313      	orrs	r3, r2
 8006296:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69da      	ldr	r2, [r3, #28]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	431a      	orrs	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80062be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	6911      	ldr	r1, [r2, #16]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	68d2      	ldr	r2, [r2, #12]
 80062ca:	4311      	orrs	r1, r2
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6812      	ldr	r2, [r2, #0]
 80062d0:	430b      	orrs	r3, r1
 80062d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695a      	ldr	r2, [r3, #20]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0201 	orr.w	r2, r2, #1
 80062fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2220      	movs	r2, #32
 800630a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	000186a0 	.word	0x000186a0
 800632c:	001e847f 	.word	0x001e847f
 8006330:	003d08ff 	.word	0x003d08ff
 8006334:	431bde83 	.word	0x431bde83
 8006338:	10624dd3 	.word	0x10624dd3

0800633c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e021      	b.n	8006392 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2224      	movs	r2, #36	@ 0x24
 8006352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0201 	bic.w	r2, r2, #1
 8006364:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f821 	bl	80063ae <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
	...

080063c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b088      	sub	sp, #32
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	4608      	mov	r0, r1
 80063ce:	4611      	mov	r1, r2
 80063d0:	461a      	mov	r2, r3
 80063d2:	4603      	mov	r3, r0
 80063d4:	817b      	strh	r3, [r7, #10]
 80063d6:	460b      	mov	r3, r1
 80063d8:	813b      	strh	r3, [r7, #8]
 80063da:	4613      	mov	r3, r2
 80063dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063de:	f7fe fef3 	bl	80051c8 <HAL_GetTick>
 80063e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	f040 80d9 	bne.w	80065a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	2319      	movs	r3, #25
 80063f8:	2201      	movs	r2, #1
 80063fa:	496d      	ldr	r1, [pc, #436]	@ (80065b0 <HAL_I2C_Mem_Write+0x1ec>)
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 fc89 	bl	8006d14 <I2C_WaitOnFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006408:	2302      	movs	r3, #2
 800640a:	e0cc      	b.n	80065a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <HAL_I2C_Mem_Write+0x56>
 8006416:	2302      	movs	r3, #2
 8006418:	e0c5      	b.n	80065a6 <HAL_I2C_Mem_Write+0x1e2>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b01      	cmp	r3, #1
 800642e:	d007      	beq.n	8006440 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0201 	orr.w	r2, r2, #1
 800643e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800644e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2221      	movs	r2, #33	@ 0x21
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2240      	movs	r2, #64	@ 0x40
 800645c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6a3a      	ldr	r2, [r7, #32]
 800646a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006470:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4a4d      	ldr	r2, [pc, #308]	@ (80065b4 <HAL_I2C_Mem_Write+0x1f0>)
 8006480:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006482:	88f8      	ldrh	r0, [r7, #6]
 8006484:	893a      	ldrh	r2, [r7, #8]
 8006486:	8979      	ldrh	r1, [r7, #10]
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	4603      	mov	r3, r0
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 fac4 	bl	8006a20 <I2C_RequestMemoryWrite>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d052      	beq.n	8006544 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e081      	b.n	80065a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 fd0a 	bl	8006ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00d      	beq.n	80064ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d107      	bne.n	80064ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e06b      	b.n	80065a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d2:	781a      	ldrb	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064e8:	3b01      	subs	r3, #1
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	3b01      	subs	r3, #1
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	2b04      	cmp	r3, #4
 800650a:	d11b      	bne.n	8006544 <HAL_I2C_Mem_Write+0x180>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006510:	2b00      	cmp	r3, #0
 8006512:	d017      	beq.n	8006544 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006518:	781a      	ldrb	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006524:	1c5a      	adds	r2, r3, #1
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800652e:	3b01      	subs	r3, #1
 8006530:	b29a      	uxth	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800653a:	b29b      	uxth	r3, r3
 800653c:	3b01      	subs	r3, #1
 800653e:	b29a      	uxth	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1aa      	bne.n	80064a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 fcf6 	bl	8006f42 <I2C_WaitOnBTFFlagUntilTimeout>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00d      	beq.n	8006578 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006560:	2b04      	cmp	r3, #4
 8006562:	d107      	bne.n	8006574 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006572:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e016      	b.n	80065a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2220      	movs	r2, #32
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	e000      	b.n	80065a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80065a4:	2302      	movs	r3, #2
  }
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	00100002 	.word	0x00100002
 80065b4:	ffff0000 	.word	0xffff0000

080065b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08c      	sub	sp, #48	@ 0x30
 80065bc:	af02      	add	r7, sp, #8
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	4608      	mov	r0, r1
 80065c2:	4611      	mov	r1, r2
 80065c4:	461a      	mov	r2, r3
 80065c6:	4603      	mov	r3, r0
 80065c8:	817b      	strh	r3, [r7, #10]
 80065ca:	460b      	mov	r3, r1
 80065cc:	813b      	strh	r3, [r7, #8]
 80065ce:	4613      	mov	r3, r2
 80065d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065d2:	f7fe fdf9 	bl	80051c8 <HAL_GetTick>
 80065d6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b20      	cmp	r3, #32
 80065e2:	f040 8208 	bne.w	80069f6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	2319      	movs	r3, #25
 80065ec:	2201      	movs	r2, #1
 80065ee:	497b      	ldr	r1, [pc, #492]	@ (80067dc <HAL_I2C_Mem_Read+0x224>)
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 fb8f 	bl	8006d14 <I2C_WaitOnFlagUntilTimeout>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80065fc:	2302      	movs	r3, #2
 80065fe:	e1fb      	b.n	80069f8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <HAL_I2C_Mem_Read+0x56>
 800660a:	2302      	movs	r3, #2
 800660c:	e1f4      	b.n	80069f8 <HAL_I2C_Mem_Read+0x440>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b01      	cmp	r3, #1
 8006622:	d007      	beq.n	8006634 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0201 	orr.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006642:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2222      	movs	r2, #34	@ 0x22
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2240      	movs	r2, #64	@ 0x40
 8006650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800665e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006664:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800666a:	b29a      	uxth	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4a5b      	ldr	r2, [pc, #364]	@ (80067e0 <HAL_I2C_Mem_Read+0x228>)
 8006674:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006676:	88f8      	ldrh	r0, [r7, #6]
 8006678:	893a      	ldrh	r2, [r7, #8]
 800667a:	8979      	ldrh	r1, [r7, #10]
 800667c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	4603      	mov	r3, r0
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f000 fa5e 	bl	8006b48 <I2C_RequestMemoryRead>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e1b0      	b.n	80069f8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800669a:	2b00      	cmp	r3, #0
 800669c:	d113      	bne.n	80066c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800669e:	2300      	movs	r3, #0
 80066a0:	623b      	str	r3, [r7, #32]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	695b      	ldr	r3, [r3, #20]
 80066a8:	623b      	str	r3, [r7, #32]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	623b      	str	r3, [r7, #32]
 80066b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	e184      	b.n	80069d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d11b      	bne.n	8006706 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066de:	2300      	movs	r3, #0
 80066e0:	61fb      	str	r3, [r7, #28]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	61fb      	str	r3, [r7, #28]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	61fb      	str	r3, [r7, #28]
 80066f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	e164      	b.n	80069d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800670a:	2b02      	cmp	r3, #2
 800670c:	d11b      	bne.n	8006746 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800671c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800672c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800672e:	2300      	movs	r3, #0
 8006730:	61bb      	str	r3, [r7, #24]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	61bb      	str	r3, [r7, #24]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	61bb      	str	r3, [r7, #24]
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	e144      	b.n	80069d0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006746:	2300      	movs	r3, #0
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	617b      	str	r3, [r7, #20]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	617b      	str	r3, [r7, #20]
 800675a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800675c:	e138      	b.n	80069d0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006762:	2b03      	cmp	r3, #3
 8006764:	f200 80f1 	bhi.w	800694a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800676c:	2b01      	cmp	r3, #1
 800676e:	d123      	bne.n	80067b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006772:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 fc25 	bl	8006fc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e139      	b.n	80069f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691a      	ldr	r2, [r3, #16]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067a0:	3b01      	subs	r3, #1
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	3b01      	subs	r3, #1
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80067b6:	e10b      	b.n	80069d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d14e      	bne.n	800685e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c6:	2200      	movs	r2, #0
 80067c8:	4906      	ldr	r1, [pc, #24]	@ (80067e4 <HAL_I2C_Mem_Read+0x22c>)
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 faa2 	bl	8006d14 <I2C_WaitOnFlagUntilTimeout>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d008      	beq.n	80067e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e10e      	b.n	80069f8 <HAL_I2C_Mem_Read+0x440>
 80067da:	bf00      	nop
 80067dc:	00100002 	.word	0x00100002
 80067e0:	ffff0000 	.word	0xffff0000
 80067e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	691a      	ldr	r2, [r3, #16]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006814:	3b01      	subs	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006820:	b29b      	uxth	r3, r3
 8006822:	3b01      	subs	r3, #1
 8006824:	b29a      	uxth	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	691a      	ldr	r2, [r3, #16]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006834:	b2d2      	uxtb	r2, r2
 8006836:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683c:	1c5a      	adds	r2, r3, #1
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006846:	3b01      	subs	r3, #1
 8006848:	b29a      	uxth	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006852:	b29b      	uxth	r3, r3
 8006854:	3b01      	subs	r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800685c:	e0b8      	b.n	80069d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006864:	2200      	movs	r2, #0
 8006866:	4966      	ldr	r1, [pc, #408]	@ (8006a00 <HAL_I2C_Mem_Read+0x448>)
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 fa53 	bl	8006d14 <I2C_WaitOnFlagUntilTimeout>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e0bf      	b.n	80069f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006886:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	691a      	ldr	r2, [r3, #16]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068a4:	3b01      	subs	r3, #1
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c0:	2200      	movs	r2, #0
 80068c2:	494f      	ldr	r1, [pc, #316]	@ (8006a00 <HAL_I2C_Mem_Read+0x448>)
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 fa25 	bl	8006d14 <I2C_WaitOnFlagUntilTimeout>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e091      	b.n	80069f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	691a      	ldr	r2, [r3, #16]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006900:	3b01      	subs	r3, #1
 8006902:	b29a      	uxth	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800690c:	b29b      	uxth	r3, r3
 800690e:	3b01      	subs	r3, #1
 8006910:	b29a      	uxth	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006932:	3b01      	subs	r3, #1
 8006934:	b29a      	uxth	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800693e:	b29b      	uxth	r3, r3
 8006940:	3b01      	subs	r3, #1
 8006942:	b29a      	uxth	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006948:	e042      	b.n	80069d0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800694a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800694c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 fb38 	bl	8006fc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e04c      	b.n	80069f8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	691a      	ldr	r2, [r3, #16]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006968:	b2d2      	uxtb	r2, r2
 800696a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800697a:	3b01      	subs	r3, #1
 800697c:	b29a      	uxth	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006986:	b29b      	uxth	r3, r3
 8006988:	3b01      	subs	r3, #1
 800698a:	b29a      	uxth	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	f003 0304 	and.w	r3, r3, #4
 800699a:	2b04      	cmp	r3, #4
 800699c:	d118      	bne.n	80069d0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691a      	ldr	r2, [r3, #16]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ba:	3b01      	subs	r3, #1
 80069bc:	b29a      	uxth	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	3b01      	subs	r3, #1
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f47f aec2 	bne.w	800675e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2220      	movs	r2, #32
 80069de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e000      	b.n	80069f8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80069f6:	2302      	movs	r3, #2
  }
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3728      	adds	r7, #40	@ 0x28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	00010004 	.word	0x00010004

08006a04 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a12:	b2db      	uxtb	r3, r3
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b088      	sub	sp, #32
 8006a24:	af02      	add	r7, sp, #8
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	4608      	mov	r0, r1
 8006a2a:	4611      	mov	r1, r2
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	4603      	mov	r3, r0
 8006a30:	817b      	strh	r3, [r7, #10]
 8006a32:	460b      	mov	r3, r1
 8006a34:	813b      	strh	r3, [r7, #8]
 8006a36:	4613      	mov	r3, r2
 8006a38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 f95c 	bl	8006d14 <I2C_WaitOnFlagUntilTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00c      	beq.n	8006a7c <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e05f      	b.n	8006b3c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a7c:	897b      	ldrh	r3, [r7, #10]
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	461a      	mov	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006a8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8e:	6a3a      	ldr	r2, [r7, #32]
 8006a90:	492c      	ldr	r1, [pc, #176]	@ (8006b44 <I2C_RequestMemoryWrite+0x124>)
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 f995 	bl	8006dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e04c      	b.n	8006b3c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	617b      	str	r3, [r7, #20]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	617b      	str	r3, [r7, #20]
 8006ab6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aba:	6a39      	ldr	r1, [r7, #32]
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 f9ff 	bl	8006ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00d      	beq.n	8006ae4 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006acc:	2b04      	cmp	r3, #4
 8006ace:	d107      	bne.n	8006ae0 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ade:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e02b      	b.n	8006b3c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ae4:	88fb      	ldrh	r3, [r7, #6]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d105      	bne.n	8006af6 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006aea:	893b      	ldrh	r3, [r7, #8]
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	611a      	str	r2, [r3, #16]
 8006af4:	e021      	b.n	8006b3a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006af6:	893b      	ldrh	r3, [r7, #8]
 8006af8:	0a1b      	lsrs	r3, r3, #8
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b06:	6a39      	ldr	r1, [r7, #32]
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 f9d9 	bl	8006ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00d      	beq.n	8006b30 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	d107      	bne.n	8006b2c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e005      	b.n	8006b3c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b30:	893b      	ldrh	r3, [r7, #8]
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3718      	adds	r7, #24
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	00010002 	.word	0x00010002

08006b48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af02      	add	r7, sp, #8
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	4608      	mov	r0, r1
 8006b52:	4611      	mov	r1, r2
 8006b54:	461a      	mov	r2, r3
 8006b56:	4603      	mov	r3, r0
 8006b58:	817b      	strh	r3, [r7, #10]
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	813b      	strh	r3, [r7, #8]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 f8c0 	bl	8006d14 <I2C_WaitOnFlagUntilTimeout>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00c      	beq.n	8006bb4 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d003      	beq.n	8006bb0 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e0a9      	b.n	8006d08 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bb4:	897b      	ldrh	r3, [r7, #10]
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	461a      	mov	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006bc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc6:	6a3a      	ldr	r2, [r7, #32]
 8006bc8:	4951      	ldr	r1, [pc, #324]	@ (8006d10 <I2C_RequestMemoryRead+0x1c8>)
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 f8f9 	bl	8006dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e096      	b.n	8006d08 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bda:	2300      	movs	r3, #0
 8006bdc:	617b      	str	r3, [r7, #20]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf2:	6a39      	ldr	r1, [r7, #32]
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 f963 	bl	8006ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00d      	beq.n	8006c1c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	d107      	bne.n	8006c18 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c16:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e075      	b.n	8006d08 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c1c:	88fb      	ldrh	r3, [r7, #6]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d105      	bne.n	8006c2e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c22:	893b      	ldrh	r3, [r7, #8]
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	611a      	str	r2, [r3, #16]
 8006c2c:	e021      	b.n	8006c72 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c2e:	893b      	ldrh	r3, [r7, #8]
 8006c30:	0a1b      	lsrs	r3, r3, #8
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c3e:	6a39      	ldr	r1, [r7, #32]
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 f93d 	bl	8006ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00d      	beq.n	8006c68 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d107      	bne.n	8006c64 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e04f      	b.n	8006d08 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c68:	893b      	ldrh	r3, [r7, #8]
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c74:	6a39      	ldr	r1, [r7, #32]
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 f922 	bl	8006ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00d      	beq.n	8006c9e <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d107      	bne.n	8006c9a <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e034      	b.n	8006d08 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006cac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 f82a 	bl	8006d14 <I2C_WaitOnFlagUntilTimeout>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00c      	beq.n	8006ce0 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e013      	b.n	8006d08 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ce0:	897b      	ldrh	r3, [r7, #10]
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	f043 0301 	orr.w	r3, r3, #1
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf2:	6a3a      	ldr	r2, [r7, #32]
 8006cf4:	4906      	ldr	r1, [pc, #24]	@ (8006d10 <I2C_RequestMemoryRead+0x1c8>)
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f000 f863 	bl	8006dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e000      	b.n	8006d08 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	00010002 	.word	0x00010002

08006d14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	603b      	str	r3, [r7, #0]
 8006d20:	4613      	mov	r3, r2
 8006d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d24:	e025      	b.n	8006d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2c:	d021      	beq.n	8006d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d2e:	f7fe fa4b 	bl	80051c8 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d302      	bcc.n	8006d44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d116      	bne.n	8006d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5e:	f043 0220 	orr.w	r2, r3, #32
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e023      	b.n	8006dba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	0c1b      	lsrs	r3, r3, #16
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d10d      	bne.n	8006d98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	43da      	mvns	r2, r3
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	4013      	ands	r3, r2
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	bf0c      	ite	eq
 8006d8e:	2301      	moveq	r3, #1
 8006d90:	2300      	movne	r3, #0
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	461a      	mov	r2, r3
 8006d96:	e00c      	b.n	8006db2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	43da      	mvns	r2, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4013      	ands	r3, r2
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	bf0c      	ite	eq
 8006daa:	2301      	moveq	r3, #1
 8006dac:	2300      	movne	r3, #0
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	461a      	mov	r2, r3
 8006db2:	79fb      	ldrb	r3, [r7, #7]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d0b6      	beq.n	8006d26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	60f8      	str	r0, [r7, #12]
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	607a      	str	r2, [r7, #4]
 8006dce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006dd0:	e051      	b.n	8006e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de0:	d123      	bne.n	8006e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006df0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006dfa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e16:	f043 0204 	orr.w	r2, r3, #4
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e046      	b.n	8006eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e30:	d021      	beq.n	8006e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e32:	f7fe f9c9 	bl	80051c8 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d302      	bcc.n	8006e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d116      	bne.n	8006e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e62:	f043 0220 	orr.w	r2, r3, #32
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e020      	b.n	8006eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	0c1b      	lsrs	r3, r3, #16
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d10c      	bne.n	8006e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	43da      	mvns	r2, r3
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	bf14      	ite	ne
 8006e92:	2301      	movne	r3, #1
 8006e94:	2300      	moveq	r3, #0
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	e00b      	b.n	8006eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	43da      	mvns	r2, r3
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	bf14      	ite	ne
 8006eac:	2301      	movne	r3, #1
 8006eae:	2300      	moveq	r3, #0
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d18d      	bne.n	8006dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ecc:	e02d      	b.n	8006f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 f8ce 	bl	8007070 <I2C_IsAcknowledgeFailed>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e02d      	b.n	8006f3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee4:	d021      	beq.n	8006f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ee6:	f7fe f96f 	bl	80051c8 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d302      	bcc.n	8006efc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d116      	bne.n	8006f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2220      	movs	r2, #32
 8006f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f16:	f043 0220 	orr.w	r2, r3, #32
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e007      	b.n	8006f3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f34:	2b80      	cmp	r3, #128	@ 0x80
 8006f36:	d1ca      	bne.n	8006ece <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b084      	sub	sp, #16
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f4e:	e02d      	b.n	8006fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f000 f88d 	bl	8007070 <I2C_IsAcknowledgeFailed>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e02d      	b.n	8006fbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f66:	d021      	beq.n	8006fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f68:	f7fe f92e 	bl	80051c8 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d302      	bcc.n	8006f7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d116      	bne.n	8006fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2220      	movs	r2, #32
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f98:	f043 0220 	orr.w	r2, r3, #32
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e007      	b.n	8006fbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	f003 0304 	and.w	r3, r3, #4
 8006fb6:	2b04      	cmp	r3, #4
 8006fb8:	d1ca      	bne.n	8006f50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006fd0:	e042      	b.n	8007058 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	f003 0310 	and.w	r3, r3, #16
 8006fdc:	2b10      	cmp	r3, #16
 8006fde:	d119      	bne.n	8007014 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f06f 0210 	mvn.w	r2, #16
 8006fe8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e029      	b.n	8007068 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007014:	f7fe f8d8 	bl	80051c8 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	429a      	cmp	r2, r3
 8007022:	d302      	bcc.n	800702a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d116      	bne.n	8007058 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2220      	movs	r2, #32
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007044:	f043 0220 	orr.w	r2, r3, #32
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e007      	b.n	8007068 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007062:	2b40      	cmp	r3, #64	@ 0x40
 8007064:	d1b5      	bne.n	8006fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007086:	d11b      	bne.n	80070c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007090:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2220      	movs	r2, #32
 800709c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ac:	f043 0204 	orr.w	r2, r3, #4
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e000      	b.n	80070c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
	...

080070d0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e0bf      	b.n	8007262 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d106      	bne.n	80070fc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f8ba 	bl	8007270 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2202      	movs	r2, #2
 8007100:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	699a      	ldr	r2, [r3, #24]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007112:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6999      	ldr	r1, [r3, #24]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007128:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	430a      	orrs	r2, r1
 8007136:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6899      	ldr	r1, [r3, #8]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	4b4a      	ldr	r3, [pc, #296]	@ (800726c <HAL_LTDC_Init+0x19c>)
 8007144:	400b      	ands	r3, r1
 8007146:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	041b      	lsls	r3, r3, #16
 800714e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6899      	ldr	r1, [r3, #8]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	699a      	ldr	r2, [r3, #24]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	431a      	orrs	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68d9      	ldr	r1, [r3, #12]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	4b3e      	ldr	r3, [pc, #248]	@ (800726c <HAL_LTDC_Init+0x19c>)
 8007172:	400b      	ands	r3, r1
 8007174:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	041b      	lsls	r3, r3, #16
 800717c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68d9      	ldr	r1, [r3, #12]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a1a      	ldr	r2, [r3, #32]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	431a      	orrs	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6919      	ldr	r1, [r3, #16]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	4b33      	ldr	r3, [pc, #204]	@ (800726c <HAL_LTDC_Init+0x19c>)
 80071a0:	400b      	ands	r3, r1
 80071a2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a8:	041b      	lsls	r3, r3, #16
 80071aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6919      	ldr	r1, [r3, #16]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	431a      	orrs	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6959      	ldr	r1, [r3, #20]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	4b27      	ldr	r3, [pc, #156]	@ (800726c <HAL_LTDC_Init+0x19c>)
 80071ce:	400b      	ands	r3, r1
 80071d0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d6:	041b      	lsls	r3, r3, #16
 80071d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6959      	ldr	r1, [r3, #20]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	431a      	orrs	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80071f6:	021b      	lsls	r3, r3, #8
 80071f8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007200:	041b      	lsls	r3, r3, #16
 8007202:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007212:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4313      	orrs	r3, r2
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8007226:	431a      	orrs	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	430a      	orrs	r2, r1
 800722e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f042 0206 	orr.w	r2, r2, #6
 800723e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	699a      	ldr	r2, [r3, #24]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0201 	orr.w	r2, r2, #1
 800724e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	f000f800 	.word	0xf000f800

08007270 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007284:	b5b0      	push	{r4, r5, r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_LTDC_ConfigLayer+0x1a>
 800729a:	2302      	movs	r3, #2
 800729c:	e02c      	b.n	80072f8 <HAL_LTDC_ConfigLayer+0x74>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2202      	movs	r2, #2
 80072aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2134      	movs	r1, #52	@ 0x34
 80072b4:	fb01 f303 	mul.w	r3, r1, r3
 80072b8:	4413      	add	r3, r2
 80072ba:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	4614      	mov	r4, r2
 80072c2:	461d      	mov	r5, r3
 80072c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072d0:	682b      	ldr	r3, [r5, #0]
 80072d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	68b9      	ldr	r1, [r7, #8]
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 f83b 	bl	8007354 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2201      	movs	r2, #1
 80072e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bdb0      	pop	{r4, r5, r7, pc}

08007300 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800730e:	2b01      	cmp	r3, #1
 8007310:	d101      	bne.n	8007316 <HAL_LTDC_EnableDither+0x16>
 8007312:	2302      	movs	r3, #2
 8007314:	e016      	b.n	8007344 <HAL_LTDC_EnableDither+0x44>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2202      	movs	r2, #2
 8007322:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8007326:	4b0a      	ldr	r3, [pc, #40]	@ (8007350 <HAL_LTDC_EnableDither+0x50>)
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	4a09      	ldr	r2, [pc, #36]	@ (8007350 <HAL_LTDC_EnableDither+0x50>)
 800732c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007330:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	40016800 	.word	0x40016800

08007354 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007354:	b480      	push	{r7}
 8007356:	b089      	sub	sp, #36	@ 0x24
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	0c1b      	lsrs	r3, r3, #16
 800736c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007370:	4413      	add	r3, r2
 8007372:	041b      	lsls	r3, r3, #16
 8007374:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	01db      	lsls	r3, r3, #7
 8007380:	4413      	add	r3, r2
 8007382:	3384      	adds	r3, #132	@ 0x84
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	6812      	ldr	r2, [r2, #0]
 800738a:	4611      	mov	r1, r2
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	01d2      	lsls	r2, r2, #7
 8007390:	440a      	add	r2, r1
 8007392:	3284      	adds	r2, #132	@ 0x84
 8007394:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007398:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	0c1b      	lsrs	r3, r3, #16
 80073a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073aa:	4413      	add	r3, r2
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4619      	mov	r1, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	01db      	lsls	r3, r3, #7
 80073b8:	440b      	add	r3, r1
 80073ba:	3384      	adds	r3, #132	@ 0x84
 80073bc:	4619      	mov	r1, r3
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	68da      	ldr	r2, [r3, #12]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073d2:	4413      	add	r3, r2
 80073d4:	041b      	lsls	r3, r3, #16
 80073d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	461a      	mov	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	01db      	lsls	r3, r3, #7
 80073e2:	4413      	add	r3, r2
 80073e4:	3384      	adds	r3, #132	@ 0x84
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	6812      	ldr	r2, [r2, #0]
 80073ec:	4611      	mov	r1, r2
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	01d2      	lsls	r2, r2, #7
 80073f2:	440a      	add	r2, r1
 80073f4:	3284      	adds	r2, #132	@ 0x84
 80073f6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80073fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800740a:	4413      	add	r3, r2
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4619      	mov	r1, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	01db      	lsls	r3, r3, #7
 8007418:	440b      	add	r3, r1
 800741a:	3384      	adds	r3, #132	@ 0x84
 800741c:	4619      	mov	r1, r3
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	4313      	orrs	r3, r2
 8007422:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	461a      	mov	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	01db      	lsls	r3, r3, #7
 800742e:	4413      	add	r3, r2
 8007430:	3384      	adds	r3, #132	@ 0x84
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	6812      	ldr	r2, [r2, #0]
 8007438:	4611      	mov	r1, r2
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	01d2      	lsls	r2, r2, #7
 800743e:	440a      	add	r2, r1
 8007440:	3284      	adds	r2, #132	@ 0x84
 8007442:	f023 0307 	bic.w	r3, r3, #7
 8007446:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	01db      	lsls	r3, r3, #7
 8007452:	4413      	add	r3, r2
 8007454:	3384      	adds	r3, #132	@ 0x84
 8007456:	461a      	mov	r2, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007464:	021b      	lsls	r3, r3, #8
 8007466:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800746e:	041b      	lsls	r3, r3, #16
 8007470:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	061b      	lsls	r3, r3, #24
 8007478:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	01db      	lsls	r3, r3, #7
 8007484:	4413      	add	r3, r2
 8007486:	3384      	adds	r3, #132	@ 0x84
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	01db      	lsls	r3, r3, #7
 8007494:	4413      	add	r3, r2
 8007496:	3384      	adds	r3, #132	@ 0x84
 8007498:	461a      	mov	r2, r3
 800749a:	2300      	movs	r3, #0
 800749c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80074a4:	461a      	mov	r2, r3
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	431a      	orrs	r2, r3
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	431a      	orrs	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4619      	mov	r1, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	01db      	lsls	r3, r3, #7
 80074b8:	440b      	add	r3, r1
 80074ba:	3384      	adds	r3, #132	@ 0x84
 80074bc:	4619      	mov	r1, r3
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	461a      	mov	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	01db      	lsls	r3, r3, #7
 80074ce:	4413      	add	r3, r2
 80074d0:	3384      	adds	r3, #132	@ 0x84
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	6812      	ldr	r2, [r2, #0]
 80074d8:	4611      	mov	r1, r2
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	01d2      	lsls	r2, r2, #7
 80074de:	440a      	add	r2, r1
 80074e0:	3284      	adds	r2, #132	@ 0x84
 80074e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80074e6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	461a      	mov	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	01db      	lsls	r3, r3, #7
 80074f2:	4413      	add	r3, r2
 80074f4:	3384      	adds	r3, #132	@ 0x84
 80074f6:	461a      	mov	r2, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	01db      	lsls	r3, r3, #7
 8007508:	4413      	add	r3, r2
 800750a:	3384      	adds	r3, #132	@ 0x84
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	6812      	ldr	r2, [r2, #0]
 8007512:	4611      	mov	r1, r2
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	01d2      	lsls	r2, r2, #7
 8007518:	440a      	add	r2, r1
 800751a:	3284      	adds	r2, #132	@ 0x84
 800751c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007520:	f023 0307 	bic.w	r3, r3, #7
 8007524:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	69da      	ldr	r2, [r3, #28]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	68f9      	ldr	r1, [r7, #12]
 8007530:	6809      	ldr	r1, [r1, #0]
 8007532:	4608      	mov	r0, r1
 8007534:	6879      	ldr	r1, [r7, #4]
 8007536:	01c9      	lsls	r1, r1, #7
 8007538:	4401      	add	r1, r0
 800753a:	3184      	adds	r1, #132	@ 0x84
 800753c:	4313      	orrs	r3, r2
 800753e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	461a      	mov	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	01db      	lsls	r3, r3, #7
 800754a:	4413      	add	r3, r2
 800754c:	3384      	adds	r3, #132	@ 0x84
 800754e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	461a      	mov	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	01db      	lsls	r3, r3, #7
 800755a:	4413      	add	r3, r2
 800755c:	3384      	adds	r3, #132	@ 0x84
 800755e:	461a      	mov	r2, r3
 8007560:	2300      	movs	r3, #0
 8007562:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	01db      	lsls	r3, r3, #7
 800756e:	4413      	add	r3, r2
 8007570:	3384      	adds	r3, #132	@ 0x84
 8007572:	461a      	mov	r2, r3
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007578:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d102      	bne.n	8007588 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007582:	2304      	movs	r3, #4
 8007584:	61fb      	str	r3, [r7, #28]
 8007586:	e01b      	b.n	80075c0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d102      	bne.n	8007596 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007590:	2303      	movs	r3, #3
 8007592:	61fb      	str	r3, [r7, #28]
 8007594:	e014      	b.n	80075c0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	2b04      	cmp	r3, #4
 800759c:	d00b      	beq.n	80075b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d007      	beq.n	80075b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d003      	beq.n	80075b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80075b2:	2b07      	cmp	r3, #7
 80075b4:	d102      	bne.n	80075bc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80075b6:	2302      	movs	r3, #2
 80075b8:	61fb      	str	r3, [r7, #28]
 80075ba:	e001      	b.n	80075c0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80075bc:	2301      	movs	r3, #1
 80075be:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	461a      	mov	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	01db      	lsls	r3, r3, #7
 80075ca:	4413      	add	r3, r2
 80075cc:	3384      	adds	r3, #132	@ 0x84
 80075ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	6812      	ldr	r2, [r2, #0]
 80075d4:	4611      	mov	r1, r2
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	01d2      	lsls	r2, r2, #7
 80075da:	440a      	add	r2, r1
 80075dc:	3284      	adds	r2, #132	@ 0x84
 80075de:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80075e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e8:	69fa      	ldr	r2, [r7, #28]
 80075ea:	fb02 f303 	mul.w	r3, r2, r3
 80075ee:	041a      	lsls	r2, r3, #16
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	6859      	ldr	r1, [r3, #4]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	1acb      	subs	r3, r1, r3
 80075fa:	69f9      	ldr	r1, [r7, #28]
 80075fc:	fb01 f303 	mul.w	r3, r1, r3
 8007600:	3303      	adds	r3, #3
 8007602:	68f9      	ldr	r1, [r7, #12]
 8007604:	6809      	ldr	r1, [r1, #0]
 8007606:	4608      	mov	r0, r1
 8007608:	6879      	ldr	r1, [r7, #4]
 800760a:	01c9      	lsls	r1, r1, #7
 800760c:	4401      	add	r1, r0
 800760e:	3184      	adds	r1, #132	@ 0x84
 8007610:	4313      	orrs	r3, r2
 8007612:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	461a      	mov	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	01db      	lsls	r3, r3, #7
 800761e:	4413      	add	r3, r2
 8007620:	3384      	adds	r3, #132	@ 0x84
 8007622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	6812      	ldr	r2, [r2, #0]
 8007628:	4611      	mov	r1, r2
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	01d2      	lsls	r2, r2, #7
 800762e:	440a      	add	r2, r1
 8007630:	3284      	adds	r2, #132	@ 0x84
 8007632:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007636:	f023 0307 	bic.w	r3, r3, #7
 800763a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	01db      	lsls	r3, r3, #7
 8007646:	4413      	add	r3, r2
 8007648:	3384      	adds	r3, #132	@ 0x84
 800764a:	461a      	mov	r2, r3
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007650:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	01db      	lsls	r3, r3, #7
 800765c:	4413      	add	r3, r2
 800765e:	3384      	adds	r3, #132	@ 0x84
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	6812      	ldr	r2, [r2, #0]
 8007666:	4611      	mov	r1, r2
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	01d2      	lsls	r2, r2, #7
 800766c:	440a      	add	r2, r1
 800766e:	3284      	adds	r2, #132	@ 0x84
 8007670:	f043 0301 	orr.w	r3, r3, #1
 8007674:	6013      	str	r3, [r2, #0]
}
 8007676:	bf00      	nop
 8007678:	3724      	adds	r7, #36	@ 0x24
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
	...

08007684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d101      	bne.n	8007696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e25e      	b.n	8007b54 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d075      	beq.n	800778e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076a2:	4b88      	ldr	r3, [pc, #544]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f003 030c 	and.w	r3, r3, #12
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d00c      	beq.n	80076c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076ae:	4b85      	ldr	r3, [pc, #532]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076b6:	2b08      	cmp	r3, #8
 80076b8:	d112      	bne.n	80076e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076ba:	4b82      	ldr	r3, [pc, #520]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076c6:	d10b      	bne.n	80076e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076c8:	4b7e      	ldr	r3, [pc, #504]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d05b      	beq.n	800778c <HAL_RCC_OscConfig+0x108>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d157      	bne.n	800778c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e239      	b.n	8007b54 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076e8:	d106      	bne.n	80076f8 <HAL_RCC_OscConfig+0x74>
 80076ea:	4b76      	ldr	r3, [pc, #472]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a75      	ldr	r2, [pc, #468]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 80076f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	e01d      	b.n	8007734 <HAL_RCC_OscConfig+0xb0>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007700:	d10c      	bne.n	800771c <HAL_RCC_OscConfig+0x98>
 8007702:	4b70      	ldr	r3, [pc, #448]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a6f      	ldr	r2, [pc, #444]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 8007708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800770c:	6013      	str	r3, [r2, #0]
 800770e:	4b6d      	ldr	r3, [pc, #436]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a6c      	ldr	r2, [pc, #432]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 8007714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007718:	6013      	str	r3, [r2, #0]
 800771a:	e00b      	b.n	8007734 <HAL_RCC_OscConfig+0xb0>
 800771c:	4b69      	ldr	r3, [pc, #420]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a68      	ldr	r2, [pc, #416]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 8007722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007726:	6013      	str	r3, [r2, #0]
 8007728:	4b66      	ldr	r3, [pc, #408]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a65      	ldr	r2, [pc, #404]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 800772e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d013      	beq.n	8007764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800773c:	f7fd fd44 	bl	80051c8 <HAL_GetTick>
 8007740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007742:	e008      	b.n	8007756 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007744:	f7fd fd40 	bl	80051c8 <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	2b64      	cmp	r3, #100	@ 0x64
 8007750:	d901      	bls.n	8007756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e1fe      	b.n	8007b54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007756:	4b5b      	ldr	r3, [pc, #364]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d0f0      	beq.n	8007744 <HAL_RCC_OscConfig+0xc0>
 8007762:	e014      	b.n	800778e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007764:	f7fd fd30 	bl	80051c8 <HAL_GetTick>
 8007768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800776a:	e008      	b.n	800777e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800776c:	f7fd fd2c 	bl	80051c8 <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	2b64      	cmp	r3, #100	@ 0x64
 8007778:	d901      	bls.n	800777e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e1ea      	b.n	8007b54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800777e:	4b51      	ldr	r3, [pc, #324]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1f0      	bne.n	800776c <HAL_RCC_OscConfig+0xe8>
 800778a:	e000      	b.n	800778e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800778c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b00      	cmp	r3, #0
 8007798:	d063      	beq.n	8007862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800779a:	4b4a      	ldr	r3, [pc, #296]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f003 030c 	and.w	r3, r3, #12
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00b      	beq.n	80077be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077a6:	4b47      	ldr	r3, [pc, #284]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077ae:	2b08      	cmp	r3, #8
 80077b0:	d11c      	bne.n	80077ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077b2:	4b44      	ldr	r3, [pc, #272]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d116      	bne.n	80077ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077be:	4b41      	ldr	r3, [pc, #260]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d005      	beq.n	80077d6 <HAL_RCC_OscConfig+0x152>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d001      	beq.n	80077d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e1be      	b.n	8007b54 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077d6:	4b3b      	ldr	r3, [pc, #236]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	00db      	lsls	r3, r3, #3
 80077e4:	4937      	ldr	r1, [pc, #220]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077ea:	e03a      	b.n	8007862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d020      	beq.n	8007836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077f4:	4b34      	ldr	r3, [pc, #208]	@ (80078c8 <HAL_RCC_OscConfig+0x244>)
 80077f6:	2201      	movs	r2, #1
 80077f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077fa:	f7fd fce5 	bl	80051c8 <HAL_GetTick>
 80077fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007800:	e008      	b.n	8007814 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007802:	f7fd fce1 	bl	80051c8 <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	2b02      	cmp	r3, #2
 800780e:	d901      	bls.n	8007814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e19f      	b.n	8007b54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007814:	4b2b      	ldr	r3, [pc, #172]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0302 	and.w	r3, r3, #2
 800781c:	2b00      	cmp	r3, #0
 800781e:	d0f0      	beq.n	8007802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007820:	4b28      	ldr	r3, [pc, #160]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	4925      	ldr	r1, [pc, #148]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 8007830:	4313      	orrs	r3, r2
 8007832:	600b      	str	r3, [r1, #0]
 8007834:	e015      	b.n	8007862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007836:	4b24      	ldr	r3, [pc, #144]	@ (80078c8 <HAL_RCC_OscConfig+0x244>)
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800783c:	f7fd fcc4 	bl	80051c8 <HAL_GetTick>
 8007840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007842:	e008      	b.n	8007856 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007844:	f7fd fcc0 	bl	80051c8 <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	2b02      	cmp	r3, #2
 8007850:	d901      	bls.n	8007856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e17e      	b.n	8007b54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007856:	4b1b      	ldr	r3, [pc, #108]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0302 	and.w	r3, r3, #2
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1f0      	bne.n	8007844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	2b00      	cmp	r3, #0
 800786c:	d036      	beq.n	80078dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d016      	beq.n	80078a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007876:	4b15      	ldr	r3, [pc, #84]	@ (80078cc <HAL_RCC_OscConfig+0x248>)
 8007878:	2201      	movs	r2, #1
 800787a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800787c:	f7fd fca4 	bl	80051c8 <HAL_GetTick>
 8007880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007882:	e008      	b.n	8007896 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007884:	f7fd fca0 	bl	80051c8 <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	2b02      	cmp	r3, #2
 8007890:	d901      	bls.n	8007896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e15e      	b.n	8007b54 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007896:	4b0b      	ldr	r3, [pc, #44]	@ (80078c4 <HAL_RCC_OscConfig+0x240>)
 8007898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800789a:	f003 0302 	and.w	r3, r3, #2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0f0      	beq.n	8007884 <HAL_RCC_OscConfig+0x200>
 80078a2:	e01b      	b.n	80078dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078a4:	4b09      	ldr	r3, [pc, #36]	@ (80078cc <HAL_RCC_OscConfig+0x248>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078aa:	f7fd fc8d 	bl	80051c8 <HAL_GetTick>
 80078ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078b0:	e00e      	b.n	80078d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078b2:	f7fd fc89 	bl	80051c8 <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d907      	bls.n	80078d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e147      	b.n	8007b54 <HAL_RCC_OscConfig+0x4d0>
 80078c4:	40023800 	.word	0x40023800
 80078c8:	42470000 	.word	0x42470000
 80078cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078d0:	4b88      	ldr	r3, [pc, #544]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 80078d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078d4:	f003 0302 	and.w	r3, r3, #2
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1ea      	bne.n	80078b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 8097 	beq.w	8007a18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078ea:	2300      	movs	r3, #0
 80078ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078ee:	4b81      	ldr	r3, [pc, #516]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 80078f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10f      	bne.n	800791a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078fa:	2300      	movs	r3, #0
 80078fc:	60bb      	str	r3, [r7, #8]
 80078fe:	4b7d      	ldr	r3, [pc, #500]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 8007900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007902:	4a7c      	ldr	r2, [pc, #496]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 8007904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007908:	6413      	str	r3, [r2, #64]	@ 0x40
 800790a:	4b7a      	ldr	r3, [pc, #488]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 800790c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800790e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007912:	60bb      	str	r3, [r7, #8]
 8007914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007916:	2301      	movs	r3, #1
 8007918:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800791a:	4b77      	ldr	r3, [pc, #476]	@ (8007af8 <HAL_RCC_OscConfig+0x474>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007922:	2b00      	cmp	r3, #0
 8007924:	d118      	bne.n	8007958 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007926:	4b74      	ldr	r3, [pc, #464]	@ (8007af8 <HAL_RCC_OscConfig+0x474>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a73      	ldr	r2, [pc, #460]	@ (8007af8 <HAL_RCC_OscConfig+0x474>)
 800792c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007932:	f7fd fc49 	bl	80051c8 <HAL_GetTick>
 8007936:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007938:	e008      	b.n	800794c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800793a:	f7fd fc45 	bl	80051c8 <HAL_GetTick>
 800793e:	4602      	mov	r2, r0
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	2b02      	cmp	r3, #2
 8007946:	d901      	bls.n	800794c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	e103      	b.n	8007b54 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800794c:	4b6a      	ldr	r3, [pc, #424]	@ (8007af8 <HAL_RCC_OscConfig+0x474>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007954:	2b00      	cmp	r3, #0
 8007956:	d0f0      	beq.n	800793a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d106      	bne.n	800796e <HAL_RCC_OscConfig+0x2ea>
 8007960:	4b64      	ldr	r3, [pc, #400]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 8007962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007964:	4a63      	ldr	r2, [pc, #396]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 8007966:	f043 0301 	orr.w	r3, r3, #1
 800796a:	6713      	str	r3, [r2, #112]	@ 0x70
 800796c:	e01c      	b.n	80079a8 <HAL_RCC_OscConfig+0x324>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	2b05      	cmp	r3, #5
 8007974:	d10c      	bne.n	8007990 <HAL_RCC_OscConfig+0x30c>
 8007976:	4b5f      	ldr	r3, [pc, #380]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 8007978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800797a:	4a5e      	ldr	r2, [pc, #376]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 800797c:	f043 0304 	orr.w	r3, r3, #4
 8007980:	6713      	str	r3, [r2, #112]	@ 0x70
 8007982:	4b5c      	ldr	r3, [pc, #368]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 8007984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007986:	4a5b      	ldr	r2, [pc, #364]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 8007988:	f043 0301 	orr.w	r3, r3, #1
 800798c:	6713      	str	r3, [r2, #112]	@ 0x70
 800798e:	e00b      	b.n	80079a8 <HAL_RCC_OscConfig+0x324>
 8007990:	4b58      	ldr	r3, [pc, #352]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 8007992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007994:	4a57      	ldr	r2, [pc, #348]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 8007996:	f023 0301 	bic.w	r3, r3, #1
 800799a:	6713      	str	r3, [r2, #112]	@ 0x70
 800799c:	4b55      	ldr	r3, [pc, #340]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 800799e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079a0:	4a54      	ldr	r2, [pc, #336]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 80079a2:	f023 0304 	bic.w	r3, r3, #4
 80079a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d015      	beq.n	80079dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079b0:	f7fd fc0a 	bl	80051c8 <HAL_GetTick>
 80079b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079b6:	e00a      	b.n	80079ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079b8:	f7fd fc06 	bl	80051c8 <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d901      	bls.n	80079ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e0c2      	b.n	8007b54 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079ce:	4b49      	ldr	r3, [pc, #292]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 80079d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079d2:	f003 0302 	and.w	r3, r3, #2
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d0ee      	beq.n	80079b8 <HAL_RCC_OscConfig+0x334>
 80079da:	e014      	b.n	8007a06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079dc:	f7fd fbf4 	bl	80051c8 <HAL_GetTick>
 80079e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079e2:	e00a      	b.n	80079fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079e4:	f7fd fbf0 	bl	80051c8 <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d901      	bls.n	80079fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e0ac      	b.n	8007b54 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079fa:	4b3e      	ldr	r3, [pc, #248]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 80079fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1ee      	bne.n	80079e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a06:	7dfb      	ldrb	r3, [r7, #23]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d105      	bne.n	8007a18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a0c:	4b39      	ldr	r3, [pc, #228]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 8007a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a10:	4a38      	ldr	r2, [pc, #224]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 8007a12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 8098 	beq.w	8007b52 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a22:	4b34      	ldr	r3, [pc, #208]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f003 030c 	and.w	r3, r3, #12
 8007a2a:	2b08      	cmp	r3, #8
 8007a2c:	d05c      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d141      	bne.n	8007aba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a36:	4b31      	ldr	r3, [pc, #196]	@ (8007afc <HAL_RCC_OscConfig+0x478>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a3c:	f7fd fbc4 	bl	80051c8 <HAL_GetTick>
 8007a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a42:	e008      	b.n	8007a56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a44:	f7fd fbc0 	bl	80051c8 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d901      	bls.n	8007a56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e07e      	b.n	8007b54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a56:	4b27      	ldr	r3, [pc, #156]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1f0      	bne.n	8007a44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	69da      	ldr	r2, [r3, #28]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a70:	019b      	lsls	r3, r3, #6
 8007a72:	431a      	orrs	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a78:	085b      	lsrs	r3, r3, #1
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	041b      	lsls	r3, r3, #16
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a84:	061b      	lsls	r3, r3, #24
 8007a86:	491b      	ldr	r1, [pc, #108]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8007afc <HAL_RCC_OscConfig+0x478>)
 8007a8e:	2201      	movs	r2, #1
 8007a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a92:	f7fd fb99 	bl	80051c8 <HAL_GetTick>
 8007a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a98:	e008      	b.n	8007aac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a9a:	f7fd fb95 	bl	80051c8 <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d901      	bls.n	8007aac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e053      	b.n	8007b54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aac:	4b11      	ldr	r3, [pc, #68]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d0f0      	beq.n	8007a9a <HAL_RCC_OscConfig+0x416>
 8007ab8:	e04b      	b.n	8007b52 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aba:	4b10      	ldr	r3, [pc, #64]	@ (8007afc <HAL_RCC_OscConfig+0x478>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ac0:	f7fd fb82 	bl	80051c8 <HAL_GetTick>
 8007ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ac6:	e008      	b.n	8007ada <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ac8:	f7fd fb7e 	bl	80051c8 <HAL_GetTick>
 8007acc:	4602      	mov	r2, r0
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d901      	bls.n	8007ada <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e03c      	b.n	8007b54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ada:	4b06      	ldr	r3, [pc, #24]	@ (8007af4 <HAL_RCC_OscConfig+0x470>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1f0      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x444>
 8007ae6:	e034      	b.n	8007b52 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d107      	bne.n	8007b00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e02f      	b.n	8007b54 <HAL_RCC_OscConfig+0x4d0>
 8007af4:	40023800 	.word	0x40023800
 8007af8:	40007000 	.word	0x40007000
 8007afc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b00:	4b16      	ldr	r3, [pc, #88]	@ (8007b5c <HAL_RCC_OscConfig+0x4d8>)
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d11c      	bne.n	8007b4e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d115      	bne.n	8007b4e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007b28:	4013      	ands	r3, r2
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d10d      	bne.n	8007b4e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d106      	bne.n	8007b4e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d001      	beq.n	8007b52 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e000      	b.n	8007b54 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3718      	adds	r7, #24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	40023800 	.word	0x40023800

08007b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e0cc      	b.n	8007d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b74:	4b68      	ldr	r3, [pc, #416]	@ (8007d18 <HAL_RCC_ClockConfig+0x1b8>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 030f 	and.w	r3, r3, #15
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d90c      	bls.n	8007b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b82:	4b65      	ldr	r3, [pc, #404]	@ (8007d18 <HAL_RCC_ClockConfig+0x1b8>)
 8007b84:	683a      	ldr	r2, [r7, #0]
 8007b86:	b2d2      	uxtb	r2, r2
 8007b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b8a:	4b63      	ldr	r3, [pc, #396]	@ (8007d18 <HAL_RCC_ClockConfig+0x1b8>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 030f 	and.w	r3, r3, #15
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d001      	beq.n	8007b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e0b8      	b.n	8007d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0302 	and.w	r3, r3, #2
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d020      	beq.n	8007bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0304 	and.w	r3, r3, #4
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d005      	beq.n	8007bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bb4:	4b59      	ldr	r3, [pc, #356]	@ (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	4a58      	ldr	r2, [pc, #352]	@ (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007bba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007bbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0308 	and.w	r3, r3, #8
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d005      	beq.n	8007bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bcc:	4b53      	ldr	r3, [pc, #332]	@ (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	4a52      	ldr	r2, [pc, #328]	@ (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007bd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bd8:	4b50      	ldr	r3, [pc, #320]	@ (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	494d      	ldr	r1, [pc, #308]	@ (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d044      	beq.n	8007c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d107      	bne.n	8007c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bfe:	4b47      	ldr	r3, [pc, #284]	@ (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d119      	bne.n	8007c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e07f      	b.n	8007d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d003      	beq.n	8007c1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d107      	bne.n	8007c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d109      	bne.n	8007c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e06f      	b.n	8007d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0302 	and.w	r3, r3, #2
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e067      	b.n	8007d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c3e:	4b37      	ldr	r3, [pc, #220]	@ (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f023 0203 	bic.w	r2, r3, #3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	4934      	ldr	r1, [pc, #208]	@ (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c50:	f7fd faba 	bl	80051c8 <HAL_GetTick>
 8007c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c56:	e00a      	b.n	8007c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c58:	f7fd fab6 	bl	80051c8 <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d901      	bls.n	8007c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e04f      	b.n	8007d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f003 020c 	and.w	r2, r3, #12
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d1eb      	bne.n	8007c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c80:	4b25      	ldr	r3, [pc, #148]	@ (8007d18 <HAL_RCC_ClockConfig+0x1b8>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 030f 	and.w	r3, r3, #15
 8007c88:	683a      	ldr	r2, [r7, #0]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d20c      	bcs.n	8007ca8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c8e:	4b22      	ldr	r3, [pc, #136]	@ (8007d18 <HAL_RCC_ClockConfig+0x1b8>)
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	b2d2      	uxtb	r2, r2
 8007c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c96:	4b20      	ldr	r3, [pc, #128]	@ (8007d18 <HAL_RCC_ClockConfig+0x1b8>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 030f 	and.w	r3, r3, #15
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d001      	beq.n	8007ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e032      	b.n	8007d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0304 	and.w	r3, r3, #4
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d008      	beq.n	8007cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cb4:	4b19      	ldr	r3, [pc, #100]	@ (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	4916      	ldr	r1, [pc, #88]	@ (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0308 	and.w	r3, r3, #8
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d009      	beq.n	8007ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cd2:	4b12      	ldr	r3, [pc, #72]	@ (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	490e      	ldr	r1, [pc, #56]	@ (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ce6:	f000 f821 	bl	8007d2c <HAL_RCC_GetSysClockFreq>
 8007cea:	4602      	mov	r2, r0
 8007cec:	4b0b      	ldr	r3, [pc, #44]	@ (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	091b      	lsrs	r3, r3, #4
 8007cf2:	f003 030f 	and.w	r3, r3, #15
 8007cf6:	490a      	ldr	r1, [pc, #40]	@ (8007d20 <HAL_RCC_ClockConfig+0x1c0>)
 8007cf8:	5ccb      	ldrb	r3, [r1, r3]
 8007cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8007cfe:	4a09      	ldr	r2, [pc, #36]	@ (8007d24 <HAL_RCC_ClockConfig+0x1c4>)
 8007d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d02:	4b09      	ldr	r3, [pc, #36]	@ (8007d28 <HAL_RCC_ClockConfig+0x1c8>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fd fa1a 	bl	8005140 <HAL_InitTick>

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	40023c00 	.word	0x40023c00
 8007d1c:	40023800 	.word	0x40023800
 8007d20:	0800b5d8 	.word	0x0800b5d8
 8007d24:	20000020 	.word	0x20000020
 8007d28:	200000a8 	.word	0x200000a8

08007d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d30:	b094      	sub	sp, #80	@ 0x50
 8007d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d34:	2300      	movs	r3, #0
 8007d36:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d38:	2300      	movs	r3, #0
 8007d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d44:	4b79      	ldr	r3, [pc, #484]	@ (8007f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f003 030c 	and.w	r3, r3, #12
 8007d4c:	2b08      	cmp	r3, #8
 8007d4e:	d00d      	beq.n	8007d6c <HAL_RCC_GetSysClockFreq+0x40>
 8007d50:	2b08      	cmp	r3, #8
 8007d52:	f200 80e1 	bhi.w	8007f18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d002      	beq.n	8007d60 <HAL_RCC_GetSysClockFreq+0x34>
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	d003      	beq.n	8007d66 <HAL_RCC_GetSysClockFreq+0x3a>
 8007d5e:	e0db      	b.n	8007f18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d60:	4b73      	ldr	r3, [pc, #460]	@ (8007f30 <HAL_RCC_GetSysClockFreq+0x204>)
 8007d62:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007d64:	e0db      	b.n	8007f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d66:	4b73      	ldr	r3, [pc, #460]	@ (8007f34 <HAL_RCC_GetSysClockFreq+0x208>)
 8007d68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007d6a:	e0d8      	b.n	8007f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d6c:	4b6f      	ldr	r3, [pc, #444]	@ (8007f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d74:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d76:	4b6d      	ldr	r3, [pc, #436]	@ (8007f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d063      	beq.n	8007e4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d82:	4b6a      	ldr	r3, [pc, #424]	@ (8007f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	099b      	lsrs	r3, r3, #6
 8007d88:	2200      	movs	r2, #0
 8007d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d94:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d96:	2300      	movs	r3, #0
 8007d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007d9e:	4622      	mov	r2, r4
 8007da0:	462b      	mov	r3, r5
 8007da2:	f04f 0000 	mov.w	r0, #0
 8007da6:	f04f 0100 	mov.w	r1, #0
 8007daa:	0159      	lsls	r1, r3, #5
 8007dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007db0:	0150      	lsls	r0, r2, #5
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4621      	mov	r1, r4
 8007db8:	1a51      	subs	r1, r2, r1
 8007dba:	6139      	str	r1, [r7, #16]
 8007dbc:	4629      	mov	r1, r5
 8007dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8007dc2:	617b      	str	r3, [r7, #20]
 8007dc4:	f04f 0200 	mov.w	r2, #0
 8007dc8:	f04f 0300 	mov.w	r3, #0
 8007dcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007dd0:	4659      	mov	r1, fp
 8007dd2:	018b      	lsls	r3, r1, #6
 8007dd4:	4651      	mov	r1, sl
 8007dd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007dda:	4651      	mov	r1, sl
 8007ddc:	018a      	lsls	r2, r1, #6
 8007dde:	4651      	mov	r1, sl
 8007de0:	ebb2 0801 	subs.w	r8, r2, r1
 8007de4:	4659      	mov	r1, fp
 8007de6:	eb63 0901 	sbc.w	r9, r3, r1
 8007dea:	f04f 0200 	mov.w	r2, #0
 8007dee:	f04f 0300 	mov.w	r3, #0
 8007df2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007df6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007dfe:	4690      	mov	r8, r2
 8007e00:	4699      	mov	r9, r3
 8007e02:	4623      	mov	r3, r4
 8007e04:	eb18 0303 	adds.w	r3, r8, r3
 8007e08:	60bb      	str	r3, [r7, #8]
 8007e0a:	462b      	mov	r3, r5
 8007e0c:	eb49 0303 	adc.w	r3, r9, r3
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	f04f 0200 	mov.w	r2, #0
 8007e16:	f04f 0300 	mov.w	r3, #0
 8007e1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007e1e:	4629      	mov	r1, r5
 8007e20:	024b      	lsls	r3, r1, #9
 8007e22:	4621      	mov	r1, r4
 8007e24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007e28:	4621      	mov	r1, r4
 8007e2a:	024a      	lsls	r2, r1, #9
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e32:	2200      	movs	r2, #0
 8007e34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007e3c:	f7f8 fa98 	bl	8000370 <__aeabi_uldivmod>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	4613      	mov	r3, r2
 8007e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e48:	e058      	b.n	8007efc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e4a:	4b38      	ldr	r3, [pc, #224]	@ (8007f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	099b      	lsrs	r3, r3, #6
 8007e50:	2200      	movs	r2, #0
 8007e52:	4618      	mov	r0, r3
 8007e54:	4611      	mov	r1, r2
 8007e56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007e5a:	623b      	str	r3, [r7, #32]
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007e64:	4642      	mov	r2, r8
 8007e66:	464b      	mov	r3, r9
 8007e68:	f04f 0000 	mov.w	r0, #0
 8007e6c:	f04f 0100 	mov.w	r1, #0
 8007e70:	0159      	lsls	r1, r3, #5
 8007e72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e76:	0150      	lsls	r0, r2, #5
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4641      	mov	r1, r8
 8007e7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007e82:	4649      	mov	r1, r9
 8007e84:	eb63 0b01 	sbc.w	fp, r3, r1
 8007e88:	f04f 0200 	mov.w	r2, #0
 8007e8c:	f04f 0300 	mov.w	r3, #0
 8007e90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007e94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007e98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007e9c:	ebb2 040a 	subs.w	r4, r2, sl
 8007ea0:	eb63 050b 	sbc.w	r5, r3, fp
 8007ea4:	f04f 0200 	mov.w	r2, #0
 8007ea8:	f04f 0300 	mov.w	r3, #0
 8007eac:	00eb      	lsls	r3, r5, #3
 8007eae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007eb2:	00e2      	lsls	r2, r4, #3
 8007eb4:	4614      	mov	r4, r2
 8007eb6:	461d      	mov	r5, r3
 8007eb8:	4643      	mov	r3, r8
 8007eba:	18e3      	adds	r3, r4, r3
 8007ebc:	603b      	str	r3, [r7, #0]
 8007ebe:	464b      	mov	r3, r9
 8007ec0:	eb45 0303 	adc.w	r3, r5, r3
 8007ec4:	607b      	str	r3, [r7, #4]
 8007ec6:	f04f 0200 	mov.w	r2, #0
 8007eca:	f04f 0300 	mov.w	r3, #0
 8007ece:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	028b      	lsls	r3, r1, #10
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007edc:	4621      	mov	r1, r4
 8007ede:	028a      	lsls	r2, r1, #10
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	61bb      	str	r3, [r7, #24]
 8007eea:	61fa      	str	r2, [r7, #28]
 8007eec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ef0:	f7f8 fa3e 	bl	8000370 <__aeabi_uldivmod>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	4613      	mov	r3, r2
 8007efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007efc:	4b0b      	ldr	r3, [pc, #44]	@ (8007f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	0c1b      	lsrs	r3, r3, #16
 8007f02:	f003 0303 	and.w	r3, r3, #3
 8007f06:	3301      	adds	r3, #1
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007f0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007f16:	e002      	b.n	8007f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f18:	4b05      	ldr	r3, [pc, #20]	@ (8007f30 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3750      	adds	r7, #80	@ 0x50
 8007f24:	46bd      	mov	sp, r7
 8007f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f2a:	bf00      	nop
 8007f2c:	40023800 	.word	0x40023800
 8007f30:	00f42400 	.word	0x00f42400
 8007f34:	007a1200 	.word	0x007a1200

08007f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f3c:	4b03      	ldr	r3, [pc, #12]	@ (8007f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	20000020 	.word	0x20000020

08007f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f54:	f7ff fff0 	bl	8007f38 <HAL_RCC_GetHCLKFreq>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	4b05      	ldr	r3, [pc, #20]	@ (8007f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	0a9b      	lsrs	r3, r3, #10
 8007f60:	f003 0307 	and.w	r3, r3, #7
 8007f64:	4903      	ldr	r1, [pc, #12]	@ (8007f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f66:	5ccb      	ldrb	r3, [r1, r3]
 8007f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	40023800 	.word	0x40023800
 8007f74:	0800b5e8 	.word	0x0800b5e8

08007f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10b      	bne.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d105      	bne.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d075      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007fac:	4b91      	ldr	r3, [pc, #580]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007fb2:	f7fd f909 	bl	80051c8 <HAL_GetTick>
 8007fb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007fb8:	e008      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007fba:	f7fd f905 	bl	80051c8 <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d901      	bls.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e189      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007fcc:	4b8a      	ldr	r3, [pc, #552]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1f0      	bne.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d009      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	019a      	lsls	r2, r3, #6
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	071b      	lsls	r3, r3, #28
 8007ff0:	4981      	ldr	r1, [pc, #516]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0302 	and.w	r3, r3, #2
 8008000:	2b00      	cmp	r3, #0
 8008002:	d01f      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008004:	4b7c      	ldr	r3, [pc, #496]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008006:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800800a:	0f1b      	lsrs	r3, r3, #28
 800800c:	f003 0307 	and.w	r3, r3, #7
 8008010:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	019a      	lsls	r2, r3, #6
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	061b      	lsls	r3, r3, #24
 800801e:	431a      	orrs	r2, r3
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	071b      	lsls	r3, r3, #28
 8008024:	4974      	ldr	r1, [pc, #464]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008026:	4313      	orrs	r3, r2
 8008028:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800802c:	4b72      	ldr	r3, [pc, #456]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800802e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008032:	f023 021f 	bic.w	r2, r3, #31
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	3b01      	subs	r3, #1
 800803c:	496e      	ldr	r1, [pc, #440]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800803e:	4313      	orrs	r3, r2
 8008040:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00d      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	019a      	lsls	r2, r3, #6
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	061b      	lsls	r3, r3, #24
 800805c:	431a      	orrs	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	071b      	lsls	r3, r3, #28
 8008064:	4964      	ldr	r1, [pc, #400]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008066:	4313      	orrs	r3, r2
 8008068:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800806c:	4b61      	ldr	r3, [pc, #388]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800806e:	2201      	movs	r2, #1
 8008070:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008072:	f7fd f8a9 	bl	80051c8 <HAL_GetTick>
 8008076:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008078:	e008      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800807a:	f7fd f8a5 	bl	80051c8 <HAL_GetTick>
 800807e:	4602      	mov	r2, r0
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	2b02      	cmp	r3, #2
 8008086:	d901      	bls.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e129      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800808c:	4b5a      	ldr	r3, [pc, #360]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d0f0      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0304 	and.w	r3, r3, #4
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d105      	bne.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d079      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80080b0:	4b52      	ldr	r3, [pc, #328]	@ (80081fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80080b6:	f7fd f887 	bl	80051c8 <HAL_GetTick>
 80080ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80080bc:	e008      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80080be:	f7fd f883 	bl	80051c8 <HAL_GetTick>
 80080c2:	4602      	mov	r2, r0
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d901      	bls.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e107      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80080d0:	4b49      	ldr	r3, [pc, #292]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080dc:	d0ef      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 0304 	and.w	r3, r3, #4
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d020      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80080ea:	4b43      	ldr	r3, [pc, #268]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80080ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080f0:	0f1b      	lsrs	r3, r3, #28
 80080f2:	f003 0307 	and.w	r3, r3, #7
 80080f6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	019a      	lsls	r2, r3, #6
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	061b      	lsls	r3, r3, #24
 8008104:	431a      	orrs	r2, r3
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	071b      	lsls	r3, r3, #28
 800810a:	493b      	ldr	r1, [pc, #236]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800810c:	4313      	orrs	r3, r2
 800810e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008112:	4b39      	ldr	r3, [pc, #228]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008118:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a1b      	ldr	r3, [r3, #32]
 8008120:	3b01      	subs	r3, #1
 8008122:	021b      	lsls	r3, r3, #8
 8008124:	4934      	ldr	r1, [pc, #208]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008126:	4313      	orrs	r3, r2
 8008128:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0308 	and.w	r3, r3, #8
 8008134:	2b00      	cmp	r3, #0
 8008136:	d01e      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008138:	4b2f      	ldr	r3, [pc, #188]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800813a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800813e:	0e1b      	lsrs	r3, r3, #24
 8008140:	f003 030f 	and.w	r3, r3, #15
 8008144:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	019a      	lsls	r2, r3, #6
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	061b      	lsls	r3, r3, #24
 8008150:	431a      	orrs	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	071b      	lsls	r3, r3, #28
 8008158:	4927      	ldr	r1, [pc, #156]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800815a:	4313      	orrs	r3, r2
 800815c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008160:	4b25      	ldr	r3, [pc, #148]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008162:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008166:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800816e:	4922      	ldr	r1, [pc, #136]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008170:	4313      	orrs	r3, r2
 8008172:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008176:	4b21      	ldr	r3, [pc, #132]	@ (80081fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008178:	2201      	movs	r2, #1
 800817a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800817c:	f7fd f824 	bl	80051c8 <HAL_GetTick>
 8008180:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008182:	e008      	b.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008184:	f7fd f820 	bl	80051c8 <HAL_GetTick>
 8008188:	4602      	mov	r2, r0
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	2b02      	cmp	r3, #2
 8008190:	d901      	bls.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e0a4      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008196:	4b18      	ldr	r3, [pc, #96]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800819e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081a2:	d1ef      	bne.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0320 	and.w	r3, r3, #32
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 808b 	beq.w	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80081b2:	2300      	movs	r3, #0
 80081b4:	60fb      	str	r3, [r7, #12]
 80081b6:	4b10      	ldr	r3, [pc, #64]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ba:	4a0f      	ldr	r2, [pc, #60]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80081c2:	4b0d      	ldr	r3, [pc, #52]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80081ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a0b      	ldr	r2, [pc, #44]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80081d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80081da:	f7fc fff5 	bl	80051c8 <HAL_GetTick>
 80081de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80081e0:	e010      	b.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80081e2:	f7fc fff1 	bl	80051c8 <HAL_GetTick>
 80081e6:	4602      	mov	r2, r0
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d909      	bls.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e075      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80081f4:	42470068 	.word	0x42470068
 80081f8:	40023800 	.word	0x40023800
 80081fc:	42470070 	.word	0x42470070
 8008200:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008204:	4b38      	ldr	r3, [pc, #224]	@ (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800820c:	2b00      	cmp	r3, #0
 800820e:	d0e8      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008210:	4b36      	ldr	r3, [pc, #216]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008214:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008218:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d02f      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008224:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	429a      	cmp	r2, r3
 800822c:	d028      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800822e:	4b2f      	ldr	r3, [pc, #188]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008232:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008236:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008238:	4b2d      	ldr	r3, [pc, #180]	@ (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800823a:	2201      	movs	r2, #1
 800823c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800823e:	4b2c      	ldr	r3, [pc, #176]	@ (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008240:	2200      	movs	r2, #0
 8008242:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008244:	4a29      	ldr	r2, [pc, #164]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800824a:	4b28      	ldr	r3, [pc, #160]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800824c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b01      	cmp	r3, #1
 8008254:	d114      	bne.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008256:	f7fc ffb7 	bl	80051c8 <HAL_GetTick>
 800825a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800825c:	e00a      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800825e:	f7fc ffb3 	bl	80051c8 <HAL_GetTick>
 8008262:	4602      	mov	r2, r0
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800826c:	4293      	cmp	r3, r2
 800826e:	d901      	bls.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e035      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008274:	4b1d      	ldr	r3, [pc, #116]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008278:	f003 0302 	and.w	r3, r3, #2
 800827c:	2b00      	cmp	r3, #0
 800827e:	d0ee      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008284:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008288:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800828c:	d10d      	bne.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x332>
 800828e:	4b17      	ldr	r3, [pc, #92]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800829a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800829e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082a2:	4912      	ldr	r1, [pc, #72]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	608b      	str	r3, [r1, #8]
 80082a8:	e005      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80082aa:	4b10      	ldr	r3, [pc, #64]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	4a0f      	ldr	r2, [pc, #60]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082b0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80082b4:	6093      	str	r3, [r2, #8]
 80082b6:	4b0d      	ldr	r3, [pc, #52]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082b8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082c2:	490a      	ldr	r1, [pc, #40]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0310 	and.w	r3, r3, #16
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d004      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80082da:	4b06      	ldr	r3, [pc, #24]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80082dc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3718      	adds	r7, #24
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	40007000 	.word	0x40007000
 80082ec:	40023800 	.word	0x40023800
 80082f0:	42470e40 	.word	0x42470e40
 80082f4:	424711e0 	.word	0x424711e0

080082f8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e025      	b.n	8008358 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	d106      	bne.n	8008326 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f81d 	bl	8008360 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2202      	movs	r2, #2
 800832a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	3304      	adds	r3, #4
 8008336:	4619      	mov	r1, r3
 8008338:	4610      	mov	r0, r2
 800833a:	f001 fabe 	bl	80098ba <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6818      	ldr	r0, [r3, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	461a      	mov	r2, r3
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	f001 fb29 	bl	80099a0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2201      	movs	r2, #1
 8008352:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b02      	cmp	r3, #2
 800838a:	d101      	bne.n	8008390 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800838c:	2302      	movs	r3, #2
 800838e:	e018      	b.n	80083c2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	68b9      	ldr	r1, [r7, #8]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f001 fb7c 	bl	8009a9e <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d104      	bne.n	80083b8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2205      	movs	r2, #5
 80083b2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80083b6:	e003      	b.n	80083c0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }
  
  return HAL_OK;  
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b082      	sub	sp, #8
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d101      	bne.n	80083e4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80083e0:	2302      	movs	r3, #2
 80083e2:	e00e      	b.n	8008402 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2202      	movs	r2, #2
 80083e8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f001 fb8f 	bl	8009b16 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;   
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b082      	sub	sp, #8
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e05d      	b.n	80084d8 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2b00      	cmp	r3, #0
 8008426:	d106      	bne.n	8008436 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f87d 	bl	8008530 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2202      	movs	r2, #2
 800843a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800844c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685a      	ldr	r2, [r3, #4]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	431a      	orrs	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	431a      	orrs	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	431a      	orrs	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	695b      	ldr	r3, [r3, #20]
 8008468:	431a      	orrs	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008472:	431a      	orrs	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	69db      	ldr	r3, [r3, #28]
 8008478:	431a      	orrs	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	ea42 0103 	orr.w	r1, r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	0c1b      	lsrs	r3, r3, #16
 8008494:	f003 0104 	and.w	r1, r3, #4
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	430a      	orrs	r2, r1
 80084a2:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084ac:	d104      	bne.n	80084b8 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80084b6:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	69da      	ldr	r2, [r3, #28]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80084c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e01a      	b.n	8008528 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2202      	movs	r2, #2
 80084f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008508:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f81a 	bl	8008544 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b088      	sub	sp, #32
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	603b      	str	r3, [r7, #0]
 8008564:	4613      	mov	r3, r2
 8008566:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008572:	2b01      	cmp	r3, #1
 8008574:	d101      	bne.n	800857a <HAL_SPI_Transmit+0x22>
 8008576:	2302      	movs	r3, #2
 8008578:	e140      	b.n	80087fc <HAL_SPI_Transmit+0x2a4>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008582:	f7fc fe21 	bl	80051c8 <HAL_GetTick>
 8008586:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008588:	88fb      	ldrh	r3, [r7, #6]
 800858a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b01      	cmp	r3, #1
 8008596:	d002      	beq.n	800859e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008598:	2302      	movs	r3, #2
 800859a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800859c:	e125      	b.n	80087ea <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <HAL_SPI_Transmit+0x52>
 80085a4:	88fb      	ldrh	r3, [r7, #6]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d102      	bne.n	80085b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80085ae:	e11c      	b.n	80087ea <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2203      	movs	r2, #3
 80085b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	88fa      	ldrh	r2, [r7, #6]
 80085c8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	88fa      	ldrh	r2, [r7, #6]
 80085ce:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085f6:	d107      	bne.n	8008608 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008606:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800860c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008610:	d10f      	bne.n	8008632 <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008630:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800863c:	2b40      	cmp	r3, #64	@ 0x40
 800863e:	d007      	beq.n	8008650 <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800864e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008658:	d14b      	bne.n	80086f2 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d002      	beq.n	8008668 <HAL_SPI_Transmit+0x110>
 8008662:	8afb      	ldrh	r3, [r7, #22]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d13e      	bne.n	80086e6 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800866c:	881a      	ldrh	r2, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008678:	1c9a      	adds	r2, r3, #2
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008682:	b29b      	uxth	r3, r3
 8008684:	3b01      	subs	r3, #1
 8008686:	b29a      	uxth	r2, r3
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800868c:	e02b      	b.n	80086e6 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	f003 0302 	and.w	r3, r3, #2
 8008698:	2b02      	cmp	r3, #2
 800869a:	d112      	bne.n	80086c2 <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086a0:	881a      	ldrh	r2, [r3, #0]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ac:	1c9a      	adds	r2, r3, #2
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	3b01      	subs	r3, #1
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80086c0:	e011      	b.n	80086e6 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086c2:	f7fc fd81 	bl	80051c8 <HAL_GetTick>
 80086c6:	4602      	mov	r2, r0
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d803      	bhi.n	80086da <HAL_SPI_Transmit+0x182>
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d8:	d102      	bne.n	80086e0 <HAL_SPI_Transmit+0x188>
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d102      	bne.n	80086e6 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80086e4:	e081      	b.n	80087ea <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1ce      	bne.n	800868e <HAL_SPI_Transmit+0x136>
 80086f0:	e04c      	b.n	800878c <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d002      	beq.n	8008700 <HAL_SPI_Transmit+0x1a8>
 80086fa:	8afb      	ldrh	r3, [r7, #22]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d140      	bne.n	8008782 <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	330c      	adds	r3, #12
 800870a:	7812      	ldrb	r2, [r2, #0]
 800870c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800871c:	b29b      	uxth	r3, r3
 800871e:	3b01      	subs	r3, #1
 8008720:	b29a      	uxth	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008726:	e02c      	b.n	8008782 <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	2b02      	cmp	r3, #2
 8008734:	d113      	bne.n	800875e <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	330c      	adds	r3, #12
 8008740:	7812      	ldrb	r2, [r2, #0]
 8008742:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008748:	1c5a      	adds	r2, r3, #1
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008752:	b29b      	uxth	r3, r3
 8008754:	3b01      	subs	r3, #1
 8008756:	b29a      	uxth	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800875c:	e011      	b.n	8008782 <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800875e:	f7fc fd33 	bl	80051c8 <HAL_GetTick>
 8008762:	4602      	mov	r2, r0
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	683a      	ldr	r2, [r7, #0]
 800876a:	429a      	cmp	r2, r3
 800876c:	d803      	bhi.n	8008776 <HAL_SPI_Transmit+0x21e>
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008774:	d102      	bne.n	800877c <HAL_SPI_Transmit+0x224>
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d102      	bne.n	8008782 <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008780:	e033      	b.n	80087ea <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008786:	b29b      	uxth	r3, r3
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1cd      	bne.n	8008728 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008790:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008794:	d107      	bne.n	80087a6 <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80087a4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80087a6:	69ba      	ldr	r2, [r7, #24]
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f000 fc94 	bl	80090d8 <SPI_EndRxTxTransaction>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d002      	beq.n	80087bc <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2220      	movs	r2, #32
 80087ba:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087c4:	2300      	movs	r3, #0
 80087c6:	613b      	str	r3, [r7, #16]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	613b      	str	r3, [r7, #16]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	613b      	str	r3, [r7, #16]
 80087d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d002      	beq.n	80087e8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	77fb      	strb	r3, [r7, #31]
 80087e6:	e000      	b.n	80087ea <HAL_SPI_Transmit+0x292>
  }

error:
 80087e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80087fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3720      	adds	r7, #32
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b088      	sub	sp, #32
 8008808:	af02      	add	r7, sp, #8
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	603b      	str	r3, [r7, #0]
 8008810:	4613      	mov	r3, r2
 8008812:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008820:	d112      	bne.n	8008848 <HAL_SPI_Receive+0x44>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10e      	bne.n	8008848 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2204      	movs	r2, #4
 800882e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008832:	88fa      	ldrh	r2, [r7, #6]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	4613      	mov	r3, r2
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	68b9      	ldr	r1, [r7, #8]
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f000 f95f 	bl	8008b02 <HAL_SPI_TransmitReceive>
 8008844:	4603      	mov	r3, r0
 8008846:	e158      	b.n	8008afa <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800884e:	2b01      	cmp	r3, #1
 8008850:	d101      	bne.n	8008856 <HAL_SPI_Receive+0x52>
 8008852:	2302      	movs	r3, #2
 8008854:	e151      	b.n	8008afa <HAL_SPI_Receive+0x2f6>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2201      	movs	r2, #1
 800885a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800885e:	f7fc fcb3 	bl	80051c8 <HAL_GetTick>
 8008862:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800886a:	b2db      	uxtb	r3, r3
 800886c:	2b01      	cmp	r3, #1
 800886e:	d002      	beq.n	8008876 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008870:	2302      	movs	r3, #2
 8008872:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008874:	e138      	b.n	8008ae8 <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d002      	beq.n	8008882 <HAL_SPI_Receive+0x7e>
 800887c:	88fb      	ldrh	r3, [r7, #6]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d102      	bne.n	8008888 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008886:	e12f      	b.n	8008ae8 <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2204      	movs	r2, #4
 800888c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	88fa      	ldrh	r2, [r7, #6]
 80088a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	88fa      	ldrh	r2, [r7, #6]
 80088a6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088ce:	d116      	bne.n	80088fe <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80088de:	601a      	str	r2, [r3, #0]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80088ee:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	3b01      	subs	r3, #1
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008906:	d107      	bne.n	8008918 <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008916:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008922:	2b40      	cmp	r3, #64	@ 0x40
 8008924:	d007      	beq.n	8008936 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008934:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d162      	bne.n	8008a04 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800893e:	e02e      	b.n	800899e <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	2b01      	cmp	r3, #1
 800894c:	d115      	bne.n	800897a <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f103 020c 	add.w	r2, r3, #12
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800895a:	7812      	ldrb	r2, [r2, #0]
 800895c:	b2d2      	uxtb	r2, r2
 800895e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008964:	1c5a      	adds	r2, r3, #1
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800896e:	b29b      	uxth	r3, r3
 8008970:	3b01      	subs	r3, #1
 8008972:	b29a      	uxth	r2, r3
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008978:	e011      	b.n	800899e <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800897a:	f7fc fc25 	bl	80051c8 <HAL_GetTick>
 800897e:	4602      	mov	r2, r0
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	429a      	cmp	r2, r3
 8008988:	d803      	bhi.n	8008992 <HAL_SPI_Receive+0x18e>
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008990:	d102      	bne.n	8008998 <HAL_SPI_Receive+0x194>
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d102      	bne.n	800899e <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8008998:	2303      	movs	r3, #3
 800899a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800899c:	e0a4      	b.n	8008ae8 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1cb      	bne.n	8008940 <HAL_SPI_Receive+0x13c>
 80089a8:	e031      	b.n	8008a0e <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f003 0301 	and.w	r3, r3, #1
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d113      	bne.n	80089e0 <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c2:	b292      	uxth	r2, r2
 80089c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ca:	1c9a      	adds	r2, r3, #2
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	3b01      	subs	r3, #1
 80089d8:	b29a      	uxth	r2, r3
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80089de:	e011      	b.n	8008a04 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089e0:	f7fc fbf2 	bl	80051c8 <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d803      	bhi.n	80089f8 <HAL_SPI_Receive+0x1f4>
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f6:	d102      	bne.n	80089fe <HAL_SPI_Receive+0x1fa>
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d102      	bne.n	8008a04 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80089fe:	2303      	movs	r3, #3
 8008a00:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008a02:	e071      	b.n	8008ae8 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1cd      	bne.n	80089aa <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a16:	d142      	bne.n	8008a9e <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008a26:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	2101      	movs	r1, #1
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f000 fa81 	bl	8008f3a <SPI_WaitFlagStateUntilTimeout>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d002      	beq.n	8008a44 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	75fb      	strb	r3, [r7, #23]
      goto error;
 8008a42:	e051      	b.n	8008ae8 <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a4c:	d107      	bne.n	8008a5e <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68da      	ldr	r2, [r3, #12]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a58:	b292      	uxth	r2, r2
 8008a5a:	801a      	strh	r2, [r3, #0]
 8008a5c:	e008      	b.n	8008a70 <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f103 020c 	add.w	r2, r3, #12
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a6a:	7812      	ldrb	r2, [r2, #0]
 8008a6c:	b2d2      	uxtb	r2, r2
 8008a6e:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	9300      	str	r3, [sp, #0]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	2201      	movs	r2, #1
 8008a78:	2101      	movs	r1, #1
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f000 fa5d 	bl	8008f3a <SPI_WaitFlagStateUntilTimeout>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d008      	beq.n	8008a98 <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a8a:	f043 0202 	orr.w	r2, r3, #2
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	75fb      	strb	r3, [r7, #23]
      goto error;
 8008a96:	e027      	b.n	8008ae8 <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f000 fab3 	bl	800900e <SPI_EndRxTransaction>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d002      	beq.n	8008ab4 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f003 0310 	and.w	r3, r3, #16
 8008abe:	2b10      	cmp	r3, #16
 8008ac0:	d10a      	bne.n	8008ad8 <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ac6:	f043 0202 	orr.w	r2, r3, #2
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8008ad6:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d002      	beq.n	8008ae6 <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	75fb      	strb	r3, [r7, #23]
 8008ae4:	e000      	b.n	8008ae8 <HAL_SPI_Receive+0x2e4>
  }

error :
 8008ae6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3718      	adds	r7, #24
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b08e      	sub	sp, #56	@ 0x38
 8008b06:	af02      	add	r7, sp, #8
 8008b08:	60f8      	str	r0, [r7, #12]
 8008b0a:	60b9      	str	r1, [r7, #8]
 8008b0c:	607a      	str	r2, [r7, #4]
 8008b0e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008b10:	2301      	movs	r3, #1
 8008b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d101      	bne.n	8008b28 <HAL_SPI_TransmitReceive+0x26>
 8008b24:	2302      	movs	r3, #2
 8008b26:	e1f6      	b.n	8008f16 <HAL_SPI_TransmitReceive+0x414>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b30:	f7fc fb4a 	bl	80051c8 <HAL_GetTick>
 8008b34:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008b46:	887b      	ldrh	r3, [r7, #2]
 8008b48:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008b4a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d00f      	beq.n	8008b72 <HAL_SPI_TransmitReceive+0x70>
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b58:	d107      	bne.n	8008b6a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d103      	bne.n	8008b6a <HAL_SPI_TransmitReceive+0x68>
 8008b62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008b66:	2b04      	cmp	r3, #4
 8008b68:	d003      	beq.n	8008b72 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008b6a:	2302      	movs	r3, #2
 8008b6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008b70:	e1c7      	b.n	8008f02 <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d005      	beq.n	8008b84 <HAL_SPI_TransmitReceive+0x82>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d002      	beq.n	8008b84 <HAL_SPI_TransmitReceive+0x82>
 8008b7e:	887b      	ldrh	r3, [r7, #2]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d103      	bne.n	8008b8c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008b8a:	e1ba      	b.n	8008f02 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	2b04      	cmp	r3, #4
 8008b96:	d003      	beq.n	8008ba0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2205      	movs	r2, #5
 8008b9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	887a      	ldrh	r2, [r7, #2]
 8008bb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	887a      	ldrh	r2, [r7, #2]
 8008bb6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	887a      	ldrh	r2, [r7, #2]
 8008bc2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	887a      	ldrh	r2, [r7, #2]
 8008bc8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bde:	d10f      	bne.n	8008c00 <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008bfe:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c0a:	2b40      	cmp	r3, #64	@ 0x40
 8008c0c:	d007      	beq.n	8008c1e <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c26:	f040 808b 	bne.w	8008d40 <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d002      	beq.n	8008c38 <HAL_SPI_TransmitReceive+0x136>
 8008c32:	8b7b      	ldrh	r3, [r7, #26]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d178      	bne.n	8008d2a <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c3c:	881a      	ldrh	r2, [r3, #0]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c48:	1c9a      	adds	r2, r3, #2
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	3b01      	subs	r3, #1
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c5c:	e065      	b.n	8008d2a <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	f003 0302 	and.w	r3, r3, #2
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d12d      	bne.n	8008cc8 <HAL_SPI_TransmitReceive+0x1c6>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d028      	beq.n	8008cc8 <HAL_SPI_TransmitReceive+0x1c6>
 8008c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d125      	bne.n	8008cc8 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c80:	881a      	ldrh	r2, [r3, #0]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c8c:	1c9a      	adds	r2, r3, #2
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10c      	bne.n	8008cc8 <HAL_SPI_TransmitReceive+0x1c6>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cb6:	d107      	bne.n	8008cc8 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008cc6:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d119      	bne.n	8008d0a <HAL_SPI_TransmitReceive+0x208>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d014      	beq.n	8008d0a <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	68da      	ldr	r2, [r3, #12]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cea:	b292      	uxth	r2, r2
 8008cec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf2:	1c9a      	adds	r2, r3, #2
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d06:	2301      	movs	r3, #1
 8008d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008d0a:	f7fc fa5d 	bl	80051c8 <HAL_GetTick>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d807      	bhi.n	8008d2a <HAL_SPI_TransmitReceive+0x228>
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d20:	d003      	beq.n	8008d2a <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8008d28:	e0eb      	b.n	8008f02 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d194      	bne.n	8008c5e <HAL_SPI_TransmitReceive+0x15c>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d18f      	bne.n	8008c5e <HAL_SPI_TransmitReceive+0x15c>
 8008d3e:	e08e      	b.n	8008e5e <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <HAL_SPI_TransmitReceive+0x24c>
 8008d48:	8b7b      	ldrh	r3, [r7, #26]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d17d      	bne.n	8008e4a <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	330c      	adds	r3, #12
 8008d58:	7812      	ldrb	r2, [r2, #0]
 8008d5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d60:	1c5a      	adds	r2, r3, #1
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	b29a      	uxth	r2, r3
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d74:	e069      	b.n	8008e4a <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	f003 0302 	and.w	r3, r3, #2
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d12e      	bne.n	8008de2 <HAL_SPI_TransmitReceive+0x2e0>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d029      	beq.n	8008de2 <HAL_SPI_TransmitReceive+0x2e0>
 8008d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d126      	bne.n	8008de2 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	330c      	adds	r3, #12
 8008d9e:	7812      	ldrb	r2, [r2, #0]
 8008da0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	3b01      	subs	r3, #1
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10c      	bne.n	8008de2 <HAL_SPI_TransmitReceive+0x2e0>
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dd0:	d107      	bne.n	8008de2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008de0:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d119      	bne.n	8008e24 <HAL_SPI_TransmitReceive+0x322>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d014      	beq.n	8008e24 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68da      	ldr	r2, [r3, #12]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e04:	b2d2      	uxtb	r2, r2
 8008e06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e0c:	1c5a      	adds	r2, r3, #1
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e20:	2301      	movs	r3, #1
 8008e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008e24:	f7fc f9d0 	bl	80051c8 <HAL_GetTick>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d803      	bhi.n	8008e3c <HAL_SPI_TransmitReceive+0x33a>
 8008e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3a:	d102      	bne.n	8008e42 <HAL_SPI_TransmitReceive+0x340>
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d103      	bne.n	8008e4a <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 8008e42:	2303      	movs	r3, #3
 8008e44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8008e48:	e05b      	b.n	8008f02 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d190      	bne.n	8008d76 <HAL_SPI_TransmitReceive+0x274>
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d18b      	bne.n	8008d76 <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e66:	d117      	bne.n	8008e98 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e6e:	2201      	movs	r2, #1
 8008e70:	2101      	movs	r1, #1
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f000 f861 	bl	8008f3a <SPI_WaitFlagStateUntilTimeout>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d009      	beq.n	8008e92 <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e82:	f043 0202 	orr.w	r2, r3, #2
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      goto error;
 8008e90:	e037      	b.n	8008f02 <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f003 0310 	and.w	r3, r3, #16
 8008ea2:	2b10      	cmp	r3, #16
 8008ea4:	d10d      	bne.n	8008ec2 <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eaa:	f043 0202 	orr.w	r2, r3, #2
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8008eba:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ec4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f000 f906 	bl	80090d8 <SPI_EndRxTxTransaction>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d006      	beq.n	8008ee0 <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2220      	movs	r2, #32
 8008edc:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8008ede:	e010      	b.n	8008f02 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10b      	bne.n	8008f00 <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ee8:	2300      	movs	r3, #0
 8008eea:	617b      	str	r3, [r7, #20]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	617b      	str	r3, [r7, #20]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	617b      	str	r3, [r7, #20]
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	e000      	b.n	8008f02 <HAL_SPI_TransmitReceive+0x400>
  }

error :
 8008f00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008f12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3730      	adds	r7, #48	@ 0x30
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b083      	sub	sp, #12
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008f2c:	b2db      	uxtb	r3, r3
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b084      	sub	sp, #16
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	60f8      	str	r0, [r7, #12]
 8008f42:	60b9      	str	r1, [r7, #8]
 8008f44:	603b      	str	r3, [r7, #0]
 8008f46:	4613      	mov	r3, r2
 8008f48:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f4a:	e04c      	b.n	8008fe6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f52:	d048      	beq.n	8008fe6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008f54:	f7fc f938 	bl	80051c8 <HAL_GetTick>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d902      	bls.n	8008f6a <SPI_WaitFlagStateUntilTimeout+0x30>
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d13d      	bne.n	8008fe6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	685a      	ldr	r2, [r3, #4]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008f78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f82:	d111      	bne.n	8008fa8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f8c:	d004      	beq.n	8008f98 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f96:	d107      	bne.n	8008fa8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008fa6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fb0:	d10f      	bne.n	8008fd2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008fc0:	601a      	str	r2, [r3, #0]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008fd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e00f      	b.n	8009006 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	689a      	ldr	r2, [r3, #8]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	4013      	ands	r3, r2
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	bf0c      	ite	eq
 8008ff6:	2301      	moveq	r3, #1
 8008ff8:	2300      	movne	r3, #0
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	79fb      	ldrb	r3, [r7, #7]
 8009000:	429a      	cmp	r2, r3
 8009002:	d1a3      	bne.n	8008f4c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b086      	sub	sp, #24
 8009012:	af02      	add	r7, sp, #8
 8009014:	60f8      	str	r0, [r7, #12]
 8009016:	60b9      	str	r1, [r7, #8]
 8009018:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009022:	d111      	bne.n	8009048 <SPI_EndRxTransaction+0x3a>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800902c:	d004      	beq.n	8009038 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009036:	d107      	bne.n	8009048 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009046:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009050:	d12a      	bne.n	80090a8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800905a:	d012      	beq.n	8009082 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	2200      	movs	r2, #0
 8009064:	2180      	movs	r1, #128	@ 0x80
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f7ff ff67 	bl	8008f3a <SPI_WaitFlagStateUntilTimeout>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d02d      	beq.n	80090ce <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009076:	f043 0220 	orr.w	r2, r3, #32
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e026      	b.n	80090d0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	2200      	movs	r2, #0
 800908a:	2101      	movs	r1, #1
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f7ff ff54 	bl	8008f3a <SPI_WaitFlagStateUntilTimeout>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d01a      	beq.n	80090ce <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800909c:	f043 0220 	orr.w	r2, r3, #32
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e013      	b.n	80090d0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	2200      	movs	r2, #0
 80090b0:	2101      	movs	r1, #1
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f7ff ff41 	bl	8008f3a <SPI_WaitFlagStateUntilTimeout>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d007      	beq.n	80090ce <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090c2:	f043 0220 	orr.w	r2, r3, #32
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80090ca:	2303      	movs	r3, #3
 80090cc:	e000      	b.n	80090d0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b088      	sub	sp, #32
 80090dc:	af02      	add	r7, sp, #8
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80090e4:	4b1b      	ldr	r3, [pc, #108]	@ (8009154 <SPI_EndRxTxTransaction+0x7c>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a1b      	ldr	r2, [pc, #108]	@ (8009158 <SPI_EndRxTxTransaction+0x80>)
 80090ea:	fba2 2303 	umull	r2, r3, r2, r3
 80090ee:	0d5b      	lsrs	r3, r3, #21
 80090f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80090f4:	fb02 f303 	mul.w	r3, r2, r3
 80090f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009102:	d112      	bne.n	800912a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	2200      	movs	r2, #0
 800910c:	2180      	movs	r1, #128	@ 0x80
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f7ff ff13 	bl	8008f3a <SPI_WaitFlagStateUntilTimeout>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d016      	beq.n	8009148 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800911e:	f043 0220 	orr.w	r2, r3, #32
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009126:	2303      	movs	r3, #3
 8009128:	e00f      	b.n	800914a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00a      	beq.n	8009146 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	3b01      	subs	r3, #1
 8009134:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009140:	2b80      	cmp	r3, #128	@ 0x80
 8009142:	d0f2      	beq.n	800912a <SPI_EndRxTxTransaction+0x52>
 8009144:	e000      	b.n	8009148 <SPI_EndRxTxTransaction+0x70>
        break;
 8009146:	bf00      	nop
  }

  return HAL_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3718      	adds	r7, #24
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20000020 	.word	0x20000020
 8009158:	165e9f81 	.word	0x165e9f81

0800915c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e01d      	b.n	80091aa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d106      	bne.n	8009188 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f815 	bl	80091b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	3304      	adds	r3, #4
 8009198:	4619      	mov	r1, r3
 800919a:	4610      	mov	r0, r2
 800919c:	f000 f918 	bl	80093d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b083      	sub	sp, #12
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80091ba:	bf00      	nop
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
	...

080091c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2201      	movs	r2, #1
 80091d8:	6839      	ldr	r1, [r7, #0]
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 fb48 	bl	8009870 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a15      	ldr	r2, [pc, #84]	@ (800923c <HAL_TIM_PWM_Start+0x74>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d004      	beq.n	80091f4 <HAL_TIM_PWM_Start+0x2c>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a14      	ldr	r2, [pc, #80]	@ (8009240 <HAL_TIM_PWM_Start+0x78>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d101      	bne.n	80091f8 <HAL_TIM_PWM_Start+0x30>
 80091f4:	2301      	movs	r3, #1
 80091f6:	e000      	b.n	80091fa <HAL_TIM_PWM_Start+0x32>
 80091f8:	2300      	movs	r3, #0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d007      	beq.n	800920e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800920c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f003 0307 	and.w	r3, r3, #7
 8009218:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2b06      	cmp	r3, #6
 800921e:	d007      	beq.n	8009230 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f042 0201 	orr.w	r2, r2, #1
 800922e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	40010000 	.word	0x40010000
 8009240:	40010400 	.word	0x40010400

08009244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009256:	2b01      	cmp	r3, #1
 8009258:	d101      	bne.n	800925e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800925a:	2302      	movs	r3, #2
 800925c:	e0b4      	b.n	80093c8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2201      	movs	r2, #1
 8009262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2202      	movs	r2, #2
 800926a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  switch (Channel)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2b0c      	cmp	r3, #12
 8009272:	f200 809f 	bhi.w	80093b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009276:	a201      	add	r2, pc, #4	@ (adr r2, 800927c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927c:	080092b1 	.word	0x080092b1
 8009280:	080093b5 	.word	0x080093b5
 8009284:	080093b5 	.word	0x080093b5
 8009288:	080093b5 	.word	0x080093b5
 800928c:	080092f1 	.word	0x080092f1
 8009290:	080093b5 	.word	0x080093b5
 8009294:	080093b5 	.word	0x080093b5
 8009298:	080093b5 	.word	0x080093b5
 800929c:	08009333 	.word	0x08009333
 80092a0:	080093b5 	.word	0x080093b5
 80092a4:	080093b5 	.word	0x080093b5
 80092a8:	080093b5 	.word	0x080093b5
 80092ac:	08009373 	.word	0x08009373
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68b9      	ldr	r1, [r7, #8]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 f92a 	bl	8009510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	699a      	ldr	r2, [r3, #24]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f042 0208 	orr.w	r2, r2, #8
 80092ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	699a      	ldr	r2, [r3, #24]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f022 0204 	bic.w	r2, r2, #4
 80092da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6999      	ldr	r1, [r3, #24]
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	691a      	ldr	r2, [r3, #16]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	619a      	str	r2, [r3, #24]
      break;
 80092ee:	e062      	b.n	80093b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68b9      	ldr	r1, [r7, #8]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 f97a 	bl	80095f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	699a      	ldr	r2, [r3, #24]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800930a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	699a      	ldr	r2, [r3, #24]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800931a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6999      	ldr	r1, [r3, #24]
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	021a      	lsls	r2, r3, #8
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	430a      	orrs	r2, r1
 800932e:	619a      	str	r2, [r3, #24]
      break;
 8009330:	e041      	b.n	80093b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68b9      	ldr	r1, [r7, #8]
 8009338:	4618      	mov	r0, r3
 800933a:	f000 f9cf 	bl	80096dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	69da      	ldr	r2, [r3, #28]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f042 0208 	orr.w	r2, r2, #8
 800934c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	69da      	ldr	r2, [r3, #28]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f022 0204 	bic.w	r2, r2, #4
 800935c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	69d9      	ldr	r1, [r3, #28]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	691a      	ldr	r2, [r3, #16]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	430a      	orrs	r2, r1
 800936e:	61da      	str	r2, [r3, #28]
      break;
 8009370:	e021      	b.n	80093b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68b9      	ldr	r1, [r7, #8]
 8009378:	4618      	mov	r0, r3
 800937a:	f000 fa23 	bl	80097c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	69da      	ldr	r2, [r3, #28]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800938c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	69da      	ldr	r2, [r3, #28]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800939c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	69d9      	ldr	r1, [r3, #28]
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	021a      	lsls	r2, r3, #8
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	430a      	orrs	r2, r1
 80093b0:	61da      	str	r2, [r3, #28]
      break;
 80093b2:	e000      	b.n	80093b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80093b4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a40      	ldr	r2, [pc, #256]	@ (80094e4 <TIM_Base_SetConfig+0x114>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d013      	beq.n	8009410 <TIM_Base_SetConfig+0x40>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093ee:	d00f      	beq.n	8009410 <TIM_Base_SetConfig+0x40>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a3d      	ldr	r2, [pc, #244]	@ (80094e8 <TIM_Base_SetConfig+0x118>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d00b      	beq.n	8009410 <TIM_Base_SetConfig+0x40>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a3c      	ldr	r2, [pc, #240]	@ (80094ec <TIM_Base_SetConfig+0x11c>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d007      	beq.n	8009410 <TIM_Base_SetConfig+0x40>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a3b      	ldr	r2, [pc, #236]	@ (80094f0 <TIM_Base_SetConfig+0x120>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d003      	beq.n	8009410 <TIM_Base_SetConfig+0x40>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a3a      	ldr	r2, [pc, #232]	@ (80094f4 <TIM_Base_SetConfig+0x124>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d108      	bne.n	8009422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	4313      	orrs	r3, r2
 8009420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a2f      	ldr	r2, [pc, #188]	@ (80094e4 <TIM_Base_SetConfig+0x114>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d02b      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009430:	d027      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a2c      	ldr	r2, [pc, #176]	@ (80094e8 <TIM_Base_SetConfig+0x118>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d023      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a2b      	ldr	r2, [pc, #172]	@ (80094ec <TIM_Base_SetConfig+0x11c>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d01f      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a2a      	ldr	r2, [pc, #168]	@ (80094f0 <TIM_Base_SetConfig+0x120>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d01b      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a29      	ldr	r2, [pc, #164]	@ (80094f4 <TIM_Base_SetConfig+0x124>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d017      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a28      	ldr	r2, [pc, #160]	@ (80094f8 <TIM_Base_SetConfig+0x128>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d013      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a27      	ldr	r2, [pc, #156]	@ (80094fc <TIM_Base_SetConfig+0x12c>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d00f      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a26      	ldr	r2, [pc, #152]	@ (8009500 <TIM_Base_SetConfig+0x130>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d00b      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a25      	ldr	r2, [pc, #148]	@ (8009504 <TIM_Base_SetConfig+0x134>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d007      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a24      	ldr	r2, [pc, #144]	@ (8009508 <TIM_Base_SetConfig+0x138>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d003      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a23      	ldr	r2, [pc, #140]	@ (800950c <TIM_Base_SetConfig+0x13c>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d108      	bne.n	8009494 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	4313      	orrs	r3, r2
 8009492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	695b      	ldr	r3, [r3, #20]
 800949e:	4313      	orrs	r3, r2
 80094a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	689a      	ldr	r2, [r3, #8]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a0a      	ldr	r2, [pc, #40]	@ (80094e4 <TIM_Base_SetConfig+0x114>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d003      	beq.n	80094c8 <TIM_Base_SetConfig+0xf8>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a0c      	ldr	r2, [pc, #48]	@ (80094f4 <TIM_Base_SetConfig+0x124>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d103      	bne.n	80094d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	691a      	ldr	r2, [r3, #16]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	615a      	str	r2, [r3, #20]
}
 80094d6:	bf00      	nop
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	40010000 	.word	0x40010000
 80094e8:	40000400 	.word	0x40000400
 80094ec:	40000800 	.word	0x40000800
 80094f0:	40000c00 	.word	0x40000c00
 80094f4:	40010400 	.word	0x40010400
 80094f8:	40014000 	.word	0x40014000
 80094fc:	40014400 	.word	0x40014400
 8009500:	40014800 	.word	0x40014800
 8009504:	40001800 	.word	0x40001800
 8009508:	40001c00 	.word	0x40001c00
 800950c:	40002000 	.word	0x40002000

08009510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009510:	b480      	push	{r7}
 8009512:	b087      	sub	sp, #28
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a1b      	ldr	r3, [r3, #32]
 800951e:	f023 0201 	bic.w	r2, r3, #1
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800953e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f023 0303 	bic.w	r3, r3, #3
 8009546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	4313      	orrs	r3, r2
 8009550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	f023 0302 	bic.w	r3, r3, #2
 8009558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	4313      	orrs	r3, r2
 8009562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a20      	ldr	r2, [pc, #128]	@ (80095e8 <TIM_OC1_SetConfig+0xd8>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d003      	beq.n	8009574 <TIM_OC1_SetConfig+0x64>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a1f      	ldr	r2, [pc, #124]	@ (80095ec <TIM_OC1_SetConfig+0xdc>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d10c      	bne.n	800958e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	f023 0308 	bic.w	r3, r3, #8
 800957a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	697a      	ldr	r2, [r7, #20]
 8009582:	4313      	orrs	r3, r2
 8009584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	f023 0304 	bic.w	r3, r3, #4
 800958c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a15      	ldr	r2, [pc, #84]	@ (80095e8 <TIM_OC1_SetConfig+0xd8>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d003      	beq.n	800959e <TIM_OC1_SetConfig+0x8e>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a14      	ldr	r2, [pc, #80]	@ (80095ec <TIM_OC1_SetConfig+0xdc>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d111      	bne.n	80095c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80095ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	693a      	ldr	r2, [r7, #16]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	4313      	orrs	r3, r2
 80095c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	693a      	ldr	r2, [r7, #16]
 80095c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	685a      	ldr	r2, [r3, #4]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	621a      	str	r2, [r3, #32]
}
 80095dc:	bf00      	nop
 80095de:	371c      	adds	r7, #28
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr
 80095e8:	40010000 	.word	0x40010000
 80095ec:	40010400 	.word	0x40010400

080095f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b087      	sub	sp, #28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	f023 0210 	bic.w	r2, r3, #16
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800961e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	021b      	lsls	r3, r3, #8
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	4313      	orrs	r3, r2
 8009632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	f023 0320 	bic.w	r3, r3, #32
 800963a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	011b      	lsls	r3, r3, #4
 8009642:	697a      	ldr	r2, [r7, #20]
 8009644:	4313      	orrs	r3, r2
 8009646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a22      	ldr	r2, [pc, #136]	@ (80096d4 <TIM_OC2_SetConfig+0xe4>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d003      	beq.n	8009658 <TIM_OC2_SetConfig+0x68>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a21      	ldr	r2, [pc, #132]	@ (80096d8 <TIM_OC2_SetConfig+0xe8>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d10d      	bne.n	8009674 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800965e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	011b      	lsls	r3, r3, #4
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	4313      	orrs	r3, r2
 800966a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009672:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a17      	ldr	r2, [pc, #92]	@ (80096d4 <TIM_OC2_SetConfig+0xe4>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d003      	beq.n	8009684 <TIM_OC2_SetConfig+0x94>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a16      	ldr	r2, [pc, #88]	@ (80096d8 <TIM_OC2_SetConfig+0xe8>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d113      	bne.n	80096ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800968a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009692:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	695b      	ldr	r3, [r3, #20]
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	693a      	ldr	r2, [r7, #16]
 800969c:	4313      	orrs	r3, r2
 800969e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	685a      	ldr	r2, [r3, #4]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	621a      	str	r2, [r3, #32]
}
 80096c6:	bf00      	nop
 80096c8:	371c      	adds	r7, #28
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	40010000 	.word	0x40010000
 80096d8:	40010400 	.word	0x40010400

080096dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800970a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f023 0303 	bic.w	r3, r3, #3
 8009712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	4313      	orrs	r3, r2
 800971c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	021b      	lsls	r3, r3, #8
 800972c:	697a      	ldr	r2, [r7, #20]
 800972e:	4313      	orrs	r3, r2
 8009730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a21      	ldr	r2, [pc, #132]	@ (80097bc <TIM_OC3_SetConfig+0xe0>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d003      	beq.n	8009742 <TIM_OC3_SetConfig+0x66>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a20      	ldr	r2, [pc, #128]	@ (80097c0 <TIM_OC3_SetConfig+0xe4>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d10d      	bne.n	800975e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009748:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	021b      	lsls	r3, r3, #8
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	4313      	orrs	r3, r2
 8009754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800975c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4a16      	ldr	r2, [pc, #88]	@ (80097bc <TIM_OC3_SetConfig+0xe0>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d003      	beq.n	800976e <TIM_OC3_SetConfig+0x92>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a15      	ldr	r2, [pc, #84]	@ (80097c0 <TIM_OC3_SetConfig+0xe4>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d113      	bne.n	8009796 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800977c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	011b      	lsls	r3, r3, #4
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	4313      	orrs	r3, r2
 8009788:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	011b      	lsls	r3, r3, #4
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	4313      	orrs	r3, r2
 8009794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	693a      	ldr	r2, [r7, #16]
 800979a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	621a      	str	r2, [r3, #32]
}
 80097b0:	bf00      	nop
 80097b2:	371c      	adds	r7, #28
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr
 80097bc:	40010000 	.word	0x40010000
 80097c0:	40010400 	.word	0x40010400

080097c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b087      	sub	sp, #28
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	69db      	ldr	r3, [r3, #28]
 80097ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	021b      	lsls	r3, r3, #8
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	4313      	orrs	r3, r2
 8009806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800980e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	031b      	lsls	r3, r3, #12
 8009816:	693a      	ldr	r2, [r7, #16]
 8009818:	4313      	orrs	r3, r2
 800981a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a12      	ldr	r2, [pc, #72]	@ (8009868 <TIM_OC4_SetConfig+0xa4>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d003      	beq.n	800982c <TIM_OC4_SetConfig+0x68>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a11      	ldr	r2, [pc, #68]	@ (800986c <TIM_OC4_SetConfig+0xa8>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d109      	bne.n	8009840 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009832:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	019b      	lsls	r3, r3, #6
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	4313      	orrs	r3, r2
 800983e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	621a      	str	r2, [r3, #32]
}
 800985a:	bf00      	nop
 800985c:	371c      	adds	r7, #28
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	40010000 	.word	0x40010000
 800986c:	40010400 	.word	0x40010400

08009870 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009870:	b480      	push	{r7}
 8009872:	b087      	sub	sp, #28
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	f003 031f 	and.w	r3, r3, #31
 8009882:	2201      	movs	r2, #1
 8009884:	fa02 f303 	lsl.w	r3, r2, r3
 8009888:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6a1a      	ldr	r2, [r3, #32]
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	43db      	mvns	r3, r3
 8009892:	401a      	ands	r2, r3
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6a1a      	ldr	r2, [r3, #32]
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	f003 031f 	and.w	r3, r3, #31
 80098a2:	6879      	ldr	r1, [r7, #4]
 80098a4:	fa01 f303 	lsl.w	r3, r1, r3
 80098a8:	431a      	orrs	r2, r3
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	621a      	str	r2, [r3, #32]
}
 80098ae:	bf00      	nop
 80098b0:	371c      	adds	r7, #28
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b085      	sub	sp, #20
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
 80098c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80098c4:	2300      	movs	r3, #0
 80098c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80098c8:	2300      	movs	r3, #0
 80098ca:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d029      	beq.n	8009928 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80098e0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80098e4:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80098ee:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80098f4:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80098fa:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8009900:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8009906:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800990c:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8009912:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                                               Init->ReadBurst          |\
 8009918:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	4313      	orrs	r3, r2
 800991e:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	601a      	str	r2, [r3, #0]
 8009926:	e034      	b.n	8009992 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009934:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800993e:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 8009944:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	4313      	orrs	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009958:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800995c:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009966:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800996c:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8009972:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8009978:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800997e:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	4313      	orrs	r3, r2
 8009984:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b087      	sub	sp, #28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80099ac:	2300      	movs	r3, #0
 80099ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80099b0:	2300      	movs	r3, #0
 80099b2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d02e      	beq.n	8009a18 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80099c6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	3b01      	subs	r3, #1
 80099d4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80099d6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	3b01      	subs	r3, #1
 80099de:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80099e0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	3b01      	subs	r3, #1
 80099e8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80099ea:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	3b01      	subs	r3, #1
 80099f2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80099f4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	3b01      	subs	r3, #1
 80099fc:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80099fe:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	3b01      	subs	r3, #1
 8009a06:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	609a      	str	r2, [r3, #8]
 8009a16:	e03b      	b.n	8009a90 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009a24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009a28:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	3b01      	subs	r3, #1
 8009a38:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	697a      	ldr	r2, [r7, #20]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009a4e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009a5e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009a68:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009a72:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	693a      	ldr	r2, [r7, #16]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	693a      	ldr	r2, [r7, #16]
 8009a8e:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	371c      	adds	r7, #28
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr

08009a9e <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b086      	sub	sp, #24
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	60f8      	str	r0, [r7, #12]
 8009aa6:	60b9      	str	r1, [r7, #8]
 8009aa8:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009aba:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009ac4:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009acc:	4313      	orrs	r3, r2
 8009ace:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8009ad6:	f7fb fb77 	bl	80051c8 <HAL_GetTick>
 8009ada:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009adc:	e010      	b.n	8009b00 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae4:	d00c      	beq.n	8009b00 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d007      	beq.n	8009afc <FMC_SDRAM_SendCommand+0x5e>
 8009aec:	f7fb fb6c 	bl	80051c8 <HAL_GetTick>
 8009af0:	4602      	mov	r2, r0
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d201      	bcs.n	8009b00 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8009afc:	2303      	movs	r3, #3
 8009afe:	e006      	b.n	8009b0e <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	f003 0320 	and.w	r3, r3, #32
 8009b08:	2b20      	cmp	r3, #32
 8009b0a:	d0e8      	beq.n	8009ade <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3718      	adds	r7, #24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009b16:	b480      	push	{r7}
 8009b18:	b083      	sub	sp, #12
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	695a      	ldr	r2, [r3, #20]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	005b      	lsls	r3, r3, #1
 8009b28:	431a      	orrs	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <arm_max_f32>:
 8009b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b40:	1e4f      	subs	r7, r1, #1
 8009b42:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8009b46:	f100 0e04 	add.w	lr, r0, #4
 8009b4a:	edd0 7a00 	vldr	s15, [r0]
 8009b4e:	d058      	beq.n	8009c02 <arm_max_f32+0xc6>
 8009b50:	3014      	adds	r0, #20
 8009b52:	46c4      	mov	ip, r8
 8009b54:	2604      	movs	r6, #4
 8009b56:	2400      	movs	r4, #0
 8009b58:	ed10 6a04 	vldr	s12, [r0, #-16]
 8009b5c:	ed50 6a03 	vldr	s13, [r0, #-12]
 8009b60:	ed10 7a02 	vldr	s14, [r0, #-8]
 8009b64:	ed50 5a01 	vldr	s11, [r0, #-4]
 8009b68:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8009b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b70:	bfc8      	it	gt
 8009b72:	eef0 7a46 	vmovgt.f32	s15, s12
 8009b76:	f1a6 0503 	sub.w	r5, r6, #3
 8009b7a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009b7e:	bfc8      	it	gt
 8009b80:	462c      	movgt	r4, r5
 8009b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b86:	bf48      	it	mi
 8009b88:	eef0 7a66 	vmovmi.f32	s15, s13
 8009b8c:	f1a6 0502 	sub.w	r5, r6, #2
 8009b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b94:	bf48      	it	mi
 8009b96:	462c      	movmi	r4, r5
 8009b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b9c:	bf48      	it	mi
 8009b9e:	eef0 7a47 	vmovmi.f32	s15, s14
 8009ba2:	f106 35ff 	add.w	r5, r6, #4294967295
 8009ba6:	eef4 7ae5 	vcmpe.f32	s15, s11
 8009baa:	bf48      	it	mi
 8009bac:	462c      	movmi	r4, r5
 8009bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bb2:	bf48      	it	mi
 8009bb4:	4634      	movmi	r4, r6
 8009bb6:	bf48      	it	mi
 8009bb8:	eef0 7a65 	vmovmi.f32	s15, s11
 8009bbc:	f1bc 0c01 	subs.w	ip, ip, #1
 8009bc0:	f100 0010 	add.w	r0, r0, #16
 8009bc4:	f106 0604 	add.w	r6, r6, #4
 8009bc8:	d1c6      	bne.n	8009b58 <arm_max_f32+0x1c>
 8009bca:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8009bce:	f017 0003 	ands.w	r0, r7, #3
 8009bd2:	d018      	beq.n	8009c06 <arm_max_f32+0xca>
 8009bd4:	1a08      	subs	r0, r1, r0
 8009bd6:	ecbe 7a01 	vldmia	lr!, {s14}
 8009bda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009be2:	bfc8      	it	gt
 8009be4:	4604      	movgt	r4, r0
 8009be6:	f100 0001 	add.w	r0, r0, #1
 8009bea:	bfd8      	it	le
 8009bec:	eeb0 7a67 	vmovle.f32	s14, s15
 8009bf0:	4281      	cmp	r1, r0
 8009bf2:	eef0 7a47 	vmov.f32	s15, s14
 8009bf6:	d1ee      	bne.n	8009bd6 <arm_max_f32+0x9a>
 8009bf8:	ed82 7a00 	vstr	s14, [r2]
 8009bfc:	601c      	str	r4, [r3, #0]
 8009bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c02:	4644      	mov	r4, r8
 8009c04:	e7e3      	b.n	8009bce <arm_max_f32+0x92>
 8009c06:	eeb0 7a67 	vmov.f32	s14, s15
 8009c0a:	e7f5      	b.n	8009bf8 <arm_max_f32+0xbc>

08009c0c <arm_cfft_radix8by2_f32>:
 8009c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c10:	ed2d 8b08 	vpush	{d8-d11}
 8009c14:	4607      	mov	r7, r0
 8009c16:	4608      	mov	r0, r1
 8009c18:	f8b7 e000 	ldrh.w	lr, [r7]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8009c22:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8009c26:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8009c2a:	f000 80b0 	beq.w	8009d8e <arm_cfft_radix8by2_f32+0x182>
 8009c2e:	008b      	lsls	r3, r1, #2
 8009c30:	3310      	adds	r3, #16
 8009c32:	18c6      	adds	r6, r0, r3
 8009c34:	3210      	adds	r2, #16
 8009c36:	4443      	add	r3, r8
 8009c38:	f100 0510 	add.w	r5, r0, #16
 8009c3c:	f108 0410 	add.w	r4, r8, #16
 8009c40:	ed54 1a04 	vldr	s3, [r4, #-16]
 8009c44:	ed54 6a03 	vldr	s13, [r4, #-12]
 8009c48:	ed13 4a04 	vldr	s8, [r3, #-16]
 8009c4c:	ed53 3a03 	vldr	s7, [r3, #-12]
 8009c50:	ed53 5a02 	vldr	s11, [r3, #-8]
 8009c54:	ed13 5a01 	vldr	s10, [r3, #-4]
 8009c58:	ed14 0a02 	vldr	s0, [r4, #-8]
 8009c5c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8009c60:	ed16 2a04 	vldr	s4, [r6, #-16]
 8009c64:	ed56 2a03 	vldr	s5, [r6, #-12]
 8009c68:	ed15 6a03 	vldr	s12, [r5, #-12]
 8009c6c:	ed15 7a01 	vldr	s14, [r5, #-4]
 8009c70:	ed15 3a04 	vldr	s6, [r5, #-16]
 8009c74:	ed56 0a02 	vldr	s1, [r6, #-8]
 8009c78:	ed16 1a01 	vldr	s2, [r6, #-4]
 8009c7c:	ed55 4a02 	vldr	s9, [r5, #-8]
 8009c80:	ee73 ba21 	vadd.f32	s23, s6, s3
 8009c84:	ee36 ba26 	vadd.f32	s22, s12, s13
 8009c88:	ee37 aa27 	vadd.f32	s20, s14, s15
 8009c8c:	ee72 9a04 	vadd.f32	s19, s4, s8
 8009c90:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8009c94:	ee31 8a05 	vadd.f32	s16, s2, s10
 8009c98:	ee74 aa80 	vadd.f32	s21, s9, s0
 8009c9c:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8009ca0:	ed45 ba04 	vstr	s23, [r5, #-16]
 8009ca4:	ed05 ba03 	vstr	s22, [r5, #-12]
 8009ca8:	ed45 aa02 	vstr	s21, [r5, #-8]
 8009cac:	ed05 aa01 	vstr	s20, [r5, #-4]
 8009cb0:	ed06 8a01 	vstr	s16, [r6, #-4]
 8009cb4:	ed46 9a04 	vstr	s19, [r6, #-16]
 8009cb8:	ed06 9a03 	vstr	s18, [r6, #-12]
 8009cbc:	ed46 8a02 	vstr	s17, [r6, #-8]
 8009cc0:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009cc4:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8009cc8:	ed12 6a03 	vldr	s12, [r2, #-12]
 8009ccc:	ed52 2a04 	vldr	s5, [r2, #-16]
 8009cd0:	ee33 3a61 	vsub.f32	s6, s6, s3
 8009cd4:	ee34 4a42 	vsub.f32	s8, s8, s4
 8009cd8:	ee26 8a86 	vmul.f32	s16, s13, s12
 8009cdc:	ee24 2a06 	vmul.f32	s4, s8, s12
 8009ce0:	ee63 1a22 	vmul.f32	s3, s6, s5
 8009ce4:	ee24 4a22 	vmul.f32	s8, s8, s5
 8009ce8:	ee23 3a06 	vmul.f32	s6, s6, s12
 8009cec:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8009cf0:	ee23 6a86 	vmul.f32	s12, s7, s12
 8009cf4:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8009cf8:	ee36 6a04 	vadd.f32	s12, s12, s8
 8009cfc:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8009d00:	ee72 3a63 	vsub.f32	s7, s4, s7
 8009d04:	ee71 2a88 	vadd.f32	s5, s3, s16
 8009d08:	ed44 6a03 	vstr	s13, [r4, #-12]
 8009d0c:	ed44 2a04 	vstr	s5, [r4, #-16]
 8009d10:	ed43 3a04 	vstr	s7, [r3, #-16]
 8009d14:	ed03 6a03 	vstr	s12, [r3, #-12]
 8009d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d1c:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8009d20:	ed12 7a01 	vldr	s14, [r2, #-4]
 8009d24:	ed52 5a02 	vldr	s11, [r2, #-8]
 8009d28:	ee35 6a41 	vsub.f32	s12, s10, s2
 8009d2c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8009d30:	ee67 3a87 	vmul.f32	s7, s15, s14
 8009d34:	ee26 5a87 	vmul.f32	s10, s13, s14
 8009d38:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8009d3c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009d40:	ee64 4a87 	vmul.f32	s9, s9, s14
 8009d44:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009d48:	ee26 7a07 	vmul.f32	s14, s12, s14
 8009d4c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8009d50:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009d54:	ee74 5a23 	vadd.f32	s11, s8, s7
 8009d58:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009d5c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009d60:	f1be 0e01 	subs.w	lr, lr, #1
 8009d64:	ed44 5a02 	vstr	s11, [r4, #-8]
 8009d68:	f105 0510 	add.w	r5, r5, #16
 8009d6c:	ed44 7a01 	vstr	s15, [r4, #-4]
 8009d70:	f106 0610 	add.w	r6, r6, #16
 8009d74:	ed03 6a02 	vstr	s12, [r3, #-8]
 8009d78:	ed03 7a01 	vstr	s14, [r3, #-4]
 8009d7c:	f102 0210 	add.w	r2, r2, #16
 8009d80:	f104 0410 	add.w	r4, r4, #16
 8009d84:	f103 0310 	add.w	r3, r3, #16
 8009d88:	f47f af5a 	bne.w	8009c40 <arm_cfft_radix8by2_f32+0x34>
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	b28c      	uxth	r4, r1
 8009d90:	4621      	mov	r1, r4
 8009d92:	2302      	movs	r3, #2
 8009d94:	f000 fbca 	bl	800a52c <arm_radix8_butterfly_f32>
 8009d98:	ecbd 8b08 	vpop	{d8-d11}
 8009d9c:	4621      	mov	r1, r4
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	4640      	mov	r0, r8
 8009da2:	2302      	movs	r3, #2
 8009da4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009da8:	f000 bbc0 	b.w	800a52c <arm_radix8_butterfly_f32>

08009dac <arm_cfft_radix8by4_f32>:
 8009dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db0:	ed2d 8b0a 	vpush	{d8-d12}
 8009db4:	8802      	ldrh	r2, [r0, #0]
 8009db6:	ed91 6a00 	vldr	s12, [r1]
 8009dba:	b08f      	sub	sp, #60	@ 0x3c
 8009dbc:	460f      	mov	r7, r1
 8009dbe:	0852      	lsrs	r2, r2, #1
 8009dc0:	6841      	ldr	r1, [r0, #4]
 8009dc2:	900c      	str	r0, [sp, #48]	@ 0x30
 8009dc4:	0093      	lsls	r3, r2, #2
 8009dc6:	4638      	mov	r0, r7
 8009dc8:	4418      	add	r0, r3
 8009dca:	4606      	mov	r6, r0
 8009dcc:	9009      	str	r0, [sp, #36]	@ 0x24
 8009dce:	4418      	add	r0, r3
 8009dd0:	edd0 6a00 	vldr	s13, [r0]
 8009dd4:	ed96 4a00 	vldr	s8, [r6]
 8009dd8:	edd6 2a01 	vldr	s5, [r6, #4]
 8009ddc:	edd0 7a01 	vldr	s15, [r0, #4]
 8009de0:	900a      	str	r0, [sp, #40]	@ 0x28
 8009de2:	ee76 5a26 	vadd.f32	s11, s12, s13
 8009de6:	4604      	mov	r4, r0
 8009de8:	4625      	mov	r5, r4
 8009dea:	441c      	add	r4, r3
 8009dec:	edd4 4a00 	vldr	s9, [r4]
 8009df0:	ed97 7a01 	vldr	s14, [r7, #4]
 8009df4:	ed94 3a01 	vldr	s6, [r4, #4]
 8009df8:	9401      	str	r4, [sp, #4]
 8009dfa:	ee35 5a84 	vadd.f32	s10, s11, s8
 8009dfe:	4630      	mov	r0, r6
 8009e00:	ee35 5a24 	vadd.f32	s10, s10, s9
 8009e04:	463e      	mov	r6, r7
 8009e06:	ee15 ea10 	vmov	lr, s10
 8009e0a:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009e0e:	f846 eb08 	str.w	lr, [r6], #8
 8009e12:	ee37 6a27 	vadd.f32	s12, s14, s15
 8009e16:	ed90 5a01 	vldr	s10, [r0, #4]
 8009e1a:	9605      	str	r6, [sp, #20]
 8009e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e20:	9e01      	ldr	r6, [sp, #4]
 8009e22:	9707      	str	r7, [sp, #28]
 8009e24:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8009e28:	ed96 2a01 	vldr	s4, [r6, #4]
 8009e2c:	ee36 7a05 	vadd.f32	s14, s12, s10
 8009e30:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8009e34:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8009e38:	ee77 7a84 	vadd.f32	s15, s15, s8
 8009e3c:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8009e40:	4604      	mov	r4, r0
 8009e42:	46a3      	mov	fp, r4
 8009e44:	ee37 7a02 	vadd.f32	s14, s14, s4
 8009e48:	ee35 5a24 	vadd.f32	s10, s10, s9
 8009e4c:	ee14 8a10 	vmov	r8, s8
 8009e50:	46a4      	mov	ip, r4
 8009e52:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8009e56:	ed87 7a01 	vstr	s14, [r7, #4]
 8009e5a:	f84b 8b08 	str.w	r8, [fp], #8
 8009e5e:	f1ac 0704 	sub.w	r7, ip, #4
 8009e62:	ed8c 5a01 	vstr	s10, [ip, #4]
 8009e66:	f101 0c08 	add.w	ip, r1, #8
 8009e6a:	462c      	mov	r4, r5
 8009e6c:	f8cd c010 	str.w	ip, [sp, #16]
 8009e70:	ee15 ca90 	vmov	ip, s11
 8009e74:	ee36 6a62 	vsub.f32	s12, s12, s5
 8009e78:	f844 cb08 	str.w	ip, [r4], #8
 8009e7c:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8009e80:	ee36 6a43 	vsub.f32	s12, s12, s6
 8009e84:	9406      	str	r4, [sp, #24]
 8009e86:	ee76 6a83 	vadd.f32	s13, s13, s6
 8009e8a:	f101 0410 	add.w	r4, r1, #16
 8009e8e:	0852      	lsrs	r2, r2, #1
 8009e90:	9402      	str	r4, [sp, #8]
 8009e92:	ed85 6a01 	vstr	s12, [r5, #4]
 8009e96:	462c      	mov	r4, r5
 8009e98:	f101 0518 	add.w	r5, r1, #24
 8009e9c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009e9e:	46b2      	mov	sl, r6
 8009ea0:	9503      	str	r5, [sp, #12]
 8009ea2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009ea6:	3a02      	subs	r2, #2
 8009ea8:	ee16 5a90 	vmov	r5, s13
 8009eac:	46b6      	mov	lr, r6
 8009eae:	4630      	mov	r0, r6
 8009eb0:	0852      	lsrs	r2, r2, #1
 8009eb2:	f84a 5b08 	str.w	r5, [sl], #8
 8009eb6:	f1a0 0604 	sub.w	r6, r0, #4
 8009eba:	edce 7a01 	vstr	s15, [lr, #4]
 8009ebe:	9208      	str	r2, [sp, #32]
 8009ec0:	f000 8130 	beq.w	800a124 <arm_cfft_radix8by4_f32+0x378>
 8009ec4:	4691      	mov	r9, r2
 8009ec6:	9a07      	ldr	r2, [sp, #28]
 8009ec8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009ecc:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8009ed0:	3b08      	subs	r3, #8
 8009ed2:	f102 0510 	add.w	r5, r2, #16
 8009ed6:	f101 0c20 	add.w	ip, r1, #32
 8009eda:	f1a4 020c 	sub.w	r2, r4, #12
 8009ede:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8009ee2:	4433      	add	r3, r6
 8009ee4:	3410      	adds	r4, #16
 8009ee6:	4650      	mov	r0, sl
 8009ee8:	4659      	mov	r1, fp
 8009eea:	ed55 3a02 	vldr	s7, [r5, #-8]
 8009eee:	ed14 5a02 	vldr	s10, [r4, #-8]
 8009ef2:	ed91 7a00 	vldr	s14, [r1]
 8009ef6:	edd0 7a00 	vldr	s15, [r0]
 8009efa:	ed54 5a01 	vldr	s11, [r4, #-4]
 8009efe:	ed15 4a01 	vldr	s8, [r5, #-4]
 8009f02:	edd0 6a01 	vldr	s13, [r0, #4]
 8009f06:	ed91 6a01 	vldr	s12, [r1, #4]
 8009f0a:	ee33 8a85 	vadd.f32	s16, s7, s10
 8009f0e:	ee34 0a25 	vadd.f32	s0, s8, s11
 8009f12:	ee78 4a07 	vadd.f32	s9, s16, s14
 8009f16:	ee74 5a65 	vsub.f32	s11, s8, s11
 8009f1a:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8009f1e:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8009f22:	ed45 4a02 	vstr	s9, [r5, #-8]
 8009f26:	edd1 4a01 	vldr	s9, [r1, #4]
 8009f2a:	ed90 4a01 	vldr	s8, [r0, #4]
 8009f2e:	ee70 4a24 	vadd.f32	s9, s0, s9
 8009f32:	ee75 aa06 	vadd.f32	s21, s10, s12
 8009f36:	ee74 4a84 	vadd.f32	s9, s9, s8
 8009f3a:	ee35 aac7 	vsub.f32	s20, s11, s14
 8009f3e:	ed45 4a01 	vstr	s9, [r5, #-4]
 8009f42:	edd6 1a00 	vldr	s3, [r6]
 8009f46:	edd7 0a00 	vldr	s1, [r7]
 8009f4a:	ed92 4a02 	vldr	s8, [r2, #8]
 8009f4e:	edd3 3a02 	vldr	s7, [r3, #8]
 8009f52:	ed93 2a01 	vldr	s4, [r3, #4]
 8009f56:	ed16 1a01 	vldr	s2, [r6, #-4]
 8009f5a:	edd2 2a01 	vldr	s5, [r2, #4]
 8009f5e:	ed57 9a01 	vldr	s19, [r7, #-4]
 8009f62:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8009f66:	ee39 3a81 	vadd.f32	s6, s19, s2
 8009f6a:	ee74 8a84 	vadd.f32	s17, s9, s8
 8009f6e:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8009f72:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8009f76:	ee7a aae6 	vsub.f32	s21, s21, s13
 8009f7a:	ee18 aa90 	vmov	sl, s17
 8009f7e:	f847 a908 	str.w	sl, [r7], #-8
 8009f82:	edd2 8a01 	vldr	s17, [r2, #4]
 8009f86:	ed93 9a01 	vldr	s18, [r3, #4]
 8009f8a:	ee73 8a28 	vadd.f32	s17, s6, s17
 8009f8e:	ee3a aa27 	vadd.f32	s20, s20, s15
 8009f92:	ee78 8a89 	vadd.f32	s17, s17, s18
 8009f96:	ee74 0a63 	vsub.f32	s1, s8, s7
 8009f9a:	edc7 8a01 	vstr	s17, [r7, #4]
 8009f9e:	ed18 ba02 	vldr	s22, [r8, #-8]
 8009fa2:	ed58 8a01 	vldr	s17, [r8, #-4]
 8009fa6:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8009faa:	ee6a ba28 	vmul.f32	s23, s20, s17
 8009fae:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8009fb2:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8009fb6:	ee31 9a20 	vadd.f32	s18, s2, s1
 8009fba:	ee79 9a82 	vadd.f32	s19, s19, s4
 8009fbe:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8009fc2:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8009fc6:	ee69 baa8 	vmul.f32	s23, s19, s17
 8009fca:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8009fce:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8009fd2:	ee69 8a28 	vmul.f32	s17, s18, s17
 8009fd6:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8009fda:	ee1c aa10 	vmov	sl, s24
 8009fde:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8009fe2:	f841 ab08 	str.w	sl, [r1], #8
 8009fe6:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8009fea:	ee3b bacb 	vsub.f32	s22, s23, s22
 8009fee:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8009ff2:	ee33 3a62 	vsub.f32	s6, s6, s5
 8009ff6:	ed01 aa01 	vstr	s20, [r1, #-4]
 8009ffa:	edc2 8a01 	vstr	s17, [r2, #4]
 8009ffe:	ed82 ba02 	vstr	s22, [r2, #8]
 800a002:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800a006:	ee74 3a63 	vsub.f32	s7, s8, s7
 800a00a:	ee38 8a47 	vsub.f32	s16, s16, s14
 800a00e:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800a012:	ee30 0a46 	vsub.f32	s0, s0, s12
 800a016:	ee33 3a42 	vsub.f32	s6, s6, s4
 800a01a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800a01e:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a022:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800a026:	ee63 8a04 	vmul.f32	s17, s6, s8
 800a02a:	ee28 aa24 	vmul.f32	s20, s16, s9
 800a02e:	ee60 9a04 	vmul.f32	s19, s0, s8
 800a032:	ee28 8a04 	vmul.f32	s16, s16, s8
 800a036:	ee20 0a24 	vmul.f32	s0, s0, s9
 800a03a:	ee63 3a84 	vmul.f32	s7, s7, s8
 800a03e:	ee39 4a68 	vsub.f32	s8, s18, s17
 800a042:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800a046:	ee14 aa10 	vmov	sl, s8
 800a04a:	ee30 0a48 	vsub.f32	s0, s0, s16
 800a04e:	ee63 4a24 	vmul.f32	s9, s6, s9
 800a052:	ed44 9a02 	vstr	s19, [r4, #-8]
 800a056:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800a05a:	ed04 0a01 	vstr	s0, [r4, #-4]
 800a05e:	f846 a908 	str.w	sl, [r6], #-8
 800a062:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a066:	ee35 7a87 	vadd.f32	s14, s11, s14
 800a06a:	edc6 3a01 	vstr	s7, [r6, #4]
 800a06e:	ee76 6a26 	vadd.f32	s13, s12, s13
 800a072:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a076:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 800a07a:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 800a07e:	ee67 5a86 	vmul.f32	s11, s15, s12
 800a082:	ee26 5a87 	vmul.f32	s10, s13, s14
 800a086:	ee72 2a62 	vsub.f32	s5, s4, s5
 800a08a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800a08e:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800a092:	ee75 5a25 	vadd.f32	s11, s10, s11
 800a096:	ee62 0a86 	vmul.f32	s1, s5, s12
 800a09a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a09e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0a2:	ee21 6a06 	vmul.f32	s12, s2, s12
 800a0a6:	ee62 2a87 	vmul.f32	s5, s5, s14
 800a0aa:	ee21 1a07 	vmul.f32	s2, s2, s14
 800a0ae:	ee15 aa90 	vmov	sl, s11
 800a0b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a0b6:	f840 ab08 	str.w	sl, [r0], #8
 800a0ba:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800a0be:	ee76 2a22 	vadd.f32	s5, s12, s5
 800a0c2:	f1b9 0901 	subs.w	r9, r9, #1
 800a0c6:	ed40 7a01 	vstr	s15, [r0, #-4]
 800a0ca:	f105 0508 	add.w	r5, r5, #8
 800a0ce:	ed83 1a02 	vstr	s2, [r3, #8]
 800a0d2:	edc3 2a01 	vstr	s5, [r3, #4]
 800a0d6:	f108 0808 	add.w	r8, r8, #8
 800a0da:	f1a2 0208 	sub.w	r2, r2, #8
 800a0de:	f10c 0c10 	add.w	ip, ip, #16
 800a0e2:	f104 0408 	add.w	r4, r4, #8
 800a0e6:	f10e 0e18 	add.w	lr, lr, #24
 800a0ea:	f1a3 0308 	sub.w	r3, r3, #8
 800a0ee:	f47f aefc 	bne.w	8009eea <arm_cfft_radix8by4_f32+0x13e>
 800a0f2:	9908      	ldr	r1, [sp, #32]
 800a0f4:	9802      	ldr	r0, [sp, #8]
 800a0f6:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 800a0fa:	00cb      	lsls	r3, r1, #3
 800a0fc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a100:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a104:	9102      	str	r1, [sp, #8]
 800a106:	9905      	ldr	r1, [sp, #20]
 800a108:	4419      	add	r1, r3
 800a10a:	9105      	str	r1, [sp, #20]
 800a10c:	9904      	ldr	r1, [sp, #16]
 800a10e:	4419      	add	r1, r3
 800a110:	9104      	str	r1, [sp, #16]
 800a112:	9906      	ldr	r1, [sp, #24]
 800a114:	449b      	add	fp, r3
 800a116:	4419      	add	r1, r3
 800a118:	449a      	add	sl, r3
 800a11a:	9b03      	ldr	r3, [sp, #12]
 800a11c:	9106      	str	r1, [sp, #24]
 800a11e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a122:	9303      	str	r3, [sp, #12]
 800a124:	9a05      	ldr	r2, [sp, #20]
 800a126:	9806      	ldr	r0, [sp, #24]
 800a128:	ed92 4a00 	vldr	s8, [r2]
 800a12c:	ed90 7a00 	vldr	s14, [r0]
 800a130:	ed9b 3a00 	vldr	s6, [fp]
 800a134:	edda 3a00 	vldr	s7, [sl]
 800a138:	edd2 4a01 	vldr	s9, [r2, #4]
 800a13c:	edd0 6a01 	vldr	s13, [r0, #4]
 800a140:	ed9a 2a01 	vldr	s4, [sl, #4]
 800a144:	eddb 7a01 	vldr	s15, [fp, #4]
 800a148:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 800a14c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a14e:	ee34 6a07 	vadd.f32	s12, s8, s14
 800a152:	ee74 5aa6 	vadd.f32	s11, s9, s13
 800a156:	ee36 5a03 	vadd.f32	s10, s12, s6
 800a15a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800a15e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a162:	ee34 7a47 	vsub.f32	s14, s8, s14
 800a166:	ed82 5a00 	vstr	s10, [r2]
 800a16a:	ed9b 5a01 	vldr	s10, [fp, #4]
 800a16e:	edda 4a01 	vldr	s9, [sl, #4]
 800a172:	ee35 5a85 	vadd.f32	s10, s11, s10
 800a176:	ee37 4a27 	vadd.f32	s8, s14, s15
 800a17a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800a17e:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800a182:	ed82 5a01 	vstr	s10, [r2, #4]
 800a186:	9a04      	ldr	r2, [sp, #16]
 800a188:	ee34 5aa3 	vadd.f32	s10, s9, s7
 800a18c:	edd2 1a00 	vldr	s3, [r2]
 800a190:	edd2 2a01 	vldr	s5, [r2, #4]
 800a194:	9a02      	ldr	r2, [sp, #8]
 800a196:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a19a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800a19e:	ee64 4a21 	vmul.f32	s9, s8, s3
 800a1a2:	ee24 4a22 	vmul.f32	s8, s8, s5
 800a1a6:	ee65 2a22 	vmul.f32	s5, s10, s5
 800a1aa:	ee25 5a21 	vmul.f32	s10, s10, s3
 800a1ae:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800a1b2:	ee35 5a44 	vsub.f32	s10, s10, s8
 800a1b6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a1ba:	edcb 2a00 	vstr	s5, [fp]
 800a1be:	ed8b 5a01 	vstr	s10, [fp, #4]
 800a1c2:	ed92 4a01 	vldr	s8, [r2, #4]
 800a1c6:	ed92 5a00 	vldr	s10, [r2]
 800a1ca:	9a03      	ldr	r2, [sp, #12]
 800a1cc:	ee36 6a63 	vsub.f32	s12, s12, s7
 800a1d0:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800a1d4:	ee66 4a05 	vmul.f32	s9, s12, s10
 800a1d8:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a1dc:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a1e0:	ee65 5a84 	vmul.f32	s11, s11, s8
 800a1e4:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a1e8:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800a1ec:	ee76 6a83 	vadd.f32	s13, s13, s6
 800a1f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a1f4:	ed80 6a01 	vstr	s12, [r0, #4]
 800a1f8:	edc0 5a00 	vstr	s11, [r0]
 800a1fc:	edd2 5a01 	vldr	s11, [r2, #4]
 800a200:	9807      	ldr	r0, [sp, #28]
 800a202:	ee77 7a02 	vadd.f32	s15, s14, s4
 800a206:	ee36 7ae3 	vsub.f32	s14, s13, s7
 800a20a:	edd2 6a00 	vldr	s13, [r2]
 800a20e:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800a212:	ee67 6a26 	vmul.f32	s13, s14, s13
 800a216:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a21a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a21e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a222:	ee36 7a07 	vadd.f32	s14, s12, s14
 800a226:	edca 7a01 	vstr	s15, [sl, #4]
 800a22a:	ed8a 7a00 	vstr	s14, [sl]
 800a22e:	6872      	ldr	r2, [r6, #4]
 800a230:	4621      	mov	r1, r4
 800a232:	2304      	movs	r3, #4
 800a234:	f000 f97a 	bl	800a52c <arm_radix8_butterfly_f32>
 800a238:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a23a:	6872      	ldr	r2, [r6, #4]
 800a23c:	4621      	mov	r1, r4
 800a23e:	2304      	movs	r3, #4
 800a240:	f000 f974 	bl	800a52c <arm_radix8_butterfly_f32>
 800a244:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a246:	6872      	ldr	r2, [r6, #4]
 800a248:	4621      	mov	r1, r4
 800a24a:	2304      	movs	r3, #4
 800a24c:	f000 f96e 	bl	800a52c <arm_radix8_butterfly_f32>
 800a250:	6872      	ldr	r2, [r6, #4]
 800a252:	9801      	ldr	r0, [sp, #4]
 800a254:	4621      	mov	r1, r4
 800a256:	2304      	movs	r3, #4
 800a258:	b00f      	add	sp, #60	@ 0x3c
 800a25a:	ecbd 8b0a 	vpop	{d8-d12}
 800a25e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a262:	f000 b963 	b.w	800a52c <arm_radix8_butterfly_f32>
 800a266:	bf00      	nop

0800a268 <arm_cfft_f32>:
 800a268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a26c:	2a01      	cmp	r2, #1
 800a26e:	4606      	mov	r6, r0
 800a270:	4617      	mov	r7, r2
 800a272:	460c      	mov	r4, r1
 800a274:	4698      	mov	r8, r3
 800a276:	8805      	ldrh	r5, [r0, #0]
 800a278:	d054      	beq.n	800a324 <arm_cfft_f32+0xbc>
 800a27a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800a27e:	d04c      	beq.n	800a31a <arm_cfft_f32+0xb2>
 800a280:	d916      	bls.n	800a2b0 <arm_cfft_f32+0x48>
 800a282:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800a286:	d01a      	beq.n	800a2be <arm_cfft_f32+0x56>
 800a288:	d95c      	bls.n	800a344 <arm_cfft_f32+0xdc>
 800a28a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800a28e:	d044      	beq.n	800a31a <arm_cfft_f32+0xb2>
 800a290:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800a294:	d105      	bne.n	800a2a2 <arm_cfft_f32+0x3a>
 800a296:	2301      	movs	r3, #1
 800a298:	6872      	ldr	r2, [r6, #4]
 800a29a:	4629      	mov	r1, r5
 800a29c:	4620      	mov	r0, r4
 800a29e:	f000 f945 	bl	800a52c <arm_radix8_butterfly_f32>
 800a2a2:	f1b8 0f00 	cmp.w	r8, #0
 800a2a6:	d111      	bne.n	800a2cc <arm_cfft_f32+0x64>
 800a2a8:	2f01      	cmp	r7, #1
 800a2aa:	d016      	beq.n	800a2da <arm_cfft_f32+0x72>
 800a2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2b0:	2d20      	cmp	r5, #32
 800a2b2:	d032      	beq.n	800a31a <arm_cfft_f32+0xb2>
 800a2b4:	d94a      	bls.n	800a34c <arm_cfft_f32+0xe4>
 800a2b6:	2d40      	cmp	r5, #64	@ 0x40
 800a2b8:	d0ed      	beq.n	800a296 <arm_cfft_f32+0x2e>
 800a2ba:	2d80      	cmp	r5, #128	@ 0x80
 800a2bc:	d1f1      	bne.n	800a2a2 <arm_cfft_f32+0x3a>
 800a2be:	4621      	mov	r1, r4
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	f7ff fca3 	bl	8009c0c <arm_cfft_radix8by2_f32>
 800a2c6:	f1b8 0f00 	cmp.w	r8, #0
 800a2ca:	d0ed      	beq.n	800a2a8 <arm_cfft_f32+0x40>
 800a2cc:	68b2      	ldr	r2, [r6, #8]
 800a2ce:	89b1      	ldrh	r1, [r6, #12]
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	f7f5 ff8d 	bl	80001f0 <arm_bitreversal_32>
 800a2d6:	2f01      	cmp	r7, #1
 800a2d8:	d1e8      	bne.n	800a2ac <arm_cfft_f32+0x44>
 800a2da:	ee07 5a90 	vmov	s15, r5
 800a2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a2ea:	2d00      	cmp	r5, #0
 800a2ec:	d0de      	beq.n	800a2ac <arm_cfft_f32+0x44>
 800a2ee:	f104 0108 	add.w	r1, r4, #8
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	429d      	cmp	r5, r3
 800a2f8:	f101 0108 	add.w	r1, r1, #8
 800a2fc:	ed11 7a04 	vldr	s14, [r1, #-16]
 800a300:	ed51 7a03 	vldr	s15, [r1, #-12]
 800a304:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a308:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a30c:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a310:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a314:	d1ee      	bne.n	800a2f4 <arm_cfft_f32+0x8c>
 800a316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a31a:	4621      	mov	r1, r4
 800a31c:	4630      	mov	r0, r6
 800a31e:	f7ff fd45 	bl	8009dac <arm_cfft_radix8by4_f32>
 800a322:	e7be      	b.n	800a2a2 <arm_cfft_f32+0x3a>
 800a324:	b1ad      	cbz	r5, 800a352 <arm_cfft_f32+0xea>
 800a326:	f101 030c 	add.w	r3, r1, #12
 800a32a:	2200      	movs	r2, #0
 800a32c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a330:	3201      	adds	r2, #1
 800a332:	eef1 7a67 	vneg.f32	s15, s15
 800a336:	4295      	cmp	r5, r2
 800a338:	ed43 7a02 	vstr	s15, [r3, #-8]
 800a33c:	f103 0308 	add.w	r3, r3, #8
 800a340:	d1f4      	bne.n	800a32c <arm_cfft_f32+0xc4>
 800a342:	e79a      	b.n	800a27a <arm_cfft_f32+0x12>
 800a344:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800a348:	d0a5      	beq.n	800a296 <arm_cfft_f32+0x2e>
 800a34a:	e7aa      	b.n	800a2a2 <arm_cfft_f32+0x3a>
 800a34c:	2d10      	cmp	r5, #16
 800a34e:	d0b6      	beq.n	800a2be <arm_cfft_f32+0x56>
 800a350:	e7a7      	b.n	800a2a2 <arm_cfft_f32+0x3a>
 800a352:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800a356:	d894      	bhi.n	800a282 <arm_cfft_f32+0x1a>
 800a358:	e7aa      	b.n	800a2b0 <arm_cfft_f32+0x48>
 800a35a:	bf00      	nop

0800a35c <arm_cmplx_mag_f32>:
 800a35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a360:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800a364:	b084      	sub	sp, #16
 800a366:	d07f      	beq.n	800a468 <arm_cmplx_mag_f32+0x10c>
 800a368:	2700      	movs	r7, #0
 800a36a:	f100 0420 	add.w	r4, r0, #32
 800a36e:	f101 0510 	add.w	r5, r1, #16
 800a372:	4646      	mov	r6, r8
 800a374:	e05a      	b.n	800a42c <arm_cmplx_mag_f32+0xd0>
 800a376:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a37a:	eeb4 0a40 	vcmp.f32	s0, s0
 800a37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a382:	f040 80a4 	bne.w	800a4ce <arm_cmplx_mag_f32+0x172>
 800a386:	ed05 0a04 	vstr	s0, [r5, #-16]
 800a38a:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800a38e:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 800a392:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a396:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a39a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a39e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3a6:	f2c0 808f 	blt.w	800a4c8 <arm_cmplx_mag_f32+0x16c>
 800a3aa:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a3ae:	eeb4 0a40 	vcmp.f32	s0, s0
 800a3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3b6:	f040 80af 	bne.w	800a518 <arm_cmplx_mag_f32+0x1bc>
 800a3ba:	ed05 0a03 	vstr	s0, [r5, #-12]
 800a3be:	ed54 7a04 	vldr	s15, [r4, #-16]
 800a3c2:	ed14 0a03 	vldr	s0, [r4, #-12]
 800a3c6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a3ca:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a3ce:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a3d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3da:	db72      	blt.n	800a4c2 <arm_cmplx_mag_f32+0x166>
 800a3dc:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a3e0:	eeb4 0a40 	vcmp.f32	s0, s0
 800a3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e8:	f040 808c 	bne.w	800a504 <arm_cmplx_mag_f32+0x1a8>
 800a3ec:	ed05 0a02 	vstr	s0, [r5, #-8]
 800a3f0:	ed54 7a02 	vldr	s15, [r4, #-8]
 800a3f4:	ed14 0a01 	vldr	s0, [r4, #-4]
 800a3f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a3fc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a400:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a404:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a40c:	db20      	blt.n	800a450 <arm_cmplx_mag_f32+0xf4>
 800a40e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a412:	eeb4 0a40 	vcmp.f32	s0, s0
 800a416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a41a:	d169      	bne.n	800a4f0 <arm_cmplx_mag_f32+0x194>
 800a41c:	3e01      	subs	r6, #1
 800a41e:	ed05 0a01 	vstr	s0, [r5, #-4]
 800a422:	f104 0420 	add.w	r4, r4, #32
 800a426:	f105 0510 	add.w	r5, r5, #16
 800a42a:	d019      	beq.n	800a460 <arm_cmplx_mag_f32+0x104>
 800a42c:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 800a430:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 800a434:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a438:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a43c:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a440:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a448:	da95      	bge.n	800a376 <arm_cmplx_mag_f32+0x1a>
 800a44a:	f845 7c10 	str.w	r7, [r5, #-16]
 800a44e:	e79c      	b.n	800a38a <arm_cmplx_mag_f32+0x2e>
 800a450:	3e01      	subs	r6, #1
 800a452:	f845 7c04 	str.w	r7, [r5, #-4]
 800a456:	f104 0420 	add.w	r4, r4, #32
 800a45a:	f105 0510 	add.w	r5, r5, #16
 800a45e:	d1e5      	bne.n	800a42c <arm_cmplx_mag_f32+0xd0>
 800a460:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800a464:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800a468:	f012 0503 	ands.w	r5, r2, #3
 800a46c:	d026      	beq.n	800a4bc <arm_cmplx_mag_f32+0x160>
 800a46e:	2600      	movs	r6, #0
 800a470:	f100 0408 	add.w	r4, r0, #8
 800a474:	e00c      	b.n	800a490 <arm_cmplx_mag_f32+0x134>
 800a476:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a47a:	eeb4 0a40 	vcmp.f32	s0, s0
 800a47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a482:	d12e      	bne.n	800a4e2 <arm_cmplx_mag_f32+0x186>
 800a484:	3d01      	subs	r5, #1
 800a486:	ed01 0a01 	vstr	s0, [r1, #-4]
 800a48a:	f104 0408 	add.w	r4, r4, #8
 800a48e:	d015      	beq.n	800a4bc <arm_cmplx_mag_f32+0x160>
 800a490:	ed54 7a02 	vldr	s15, [r4, #-8]
 800a494:	ed14 0a01 	vldr	s0, [r4, #-4]
 800a498:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a49c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a4a0:	3104      	adds	r1, #4
 800a4a2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a4a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ae:	dae2      	bge.n	800a476 <arm_cmplx_mag_f32+0x11a>
 800a4b0:	3d01      	subs	r5, #1
 800a4b2:	f841 6c04 	str.w	r6, [r1, #-4]
 800a4b6:	f104 0408 	add.w	r4, r4, #8
 800a4ba:	d1e9      	bne.n	800a490 <arm_cmplx_mag_f32+0x134>
 800a4bc:	b004      	add	sp, #16
 800a4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4c2:	f845 7c08 	str.w	r7, [r5, #-8]
 800a4c6:	e793      	b.n	800a3f0 <arm_cmplx_mag_f32+0x94>
 800a4c8:	f845 7c0c 	str.w	r7, [r5, #-12]
 800a4cc:	e777      	b.n	800a3be <arm_cmplx_mag_f32+0x62>
 800a4ce:	eeb0 0a67 	vmov.f32	s0, s15
 800a4d2:	9203      	str	r2, [sp, #12]
 800a4d4:	9102      	str	r1, [sp, #8]
 800a4d6:	9001      	str	r0, [sp, #4]
 800a4d8:	f000 ffd0 	bl	800b47c <sqrtf>
 800a4dc:	a801      	add	r0, sp, #4
 800a4de:	c807      	ldmia	r0, {r0, r1, r2}
 800a4e0:	e751      	b.n	800a386 <arm_cmplx_mag_f32+0x2a>
 800a4e2:	eeb0 0a67 	vmov.f32	s0, s15
 800a4e6:	9101      	str	r1, [sp, #4]
 800a4e8:	f000 ffc8 	bl	800b47c <sqrtf>
 800a4ec:	9901      	ldr	r1, [sp, #4]
 800a4ee:	e7c9      	b.n	800a484 <arm_cmplx_mag_f32+0x128>
 800a4f0:	eeb0 0a67 	vmov.f32	s0, s15
 800a4f4:	9203      	str	r2, [sp, #12]
 800a4f6:	9102      	str	r1, [sp, #8]
 800a4f8:	9001      	str	r0, [sp, #4]
 800a4fa:	f000 ffbf 	bl	800b47c <sqrtf>
 800a4fe:	a801      	add	r0, sp, #4
 800a500:	c807      	ldmia	r0, {r0, r1, r2}
 800a502:	e78b      	b.n	800a41c <arm_cmplx_mag_f32+0xc0>
 800a504:	eeb0 0a67 	vmov.f32	s0, s15
 800a508:	9203      	str	r2, [sp, #12]
 800a50a:	9102      	str	r1, [sp, #8]
 800a50c:	9001      	str	r0, [sp, #4]
 800a50e:	f000 ffb5 	bl	800b47c <sqrtf>
 800a512:	a801      	add	r0, sp, #4
 800a514:	c807      	ldmia	r0, {r0, r1, r2}
 800a516:	e769      	b.n	800a3ec <arm_cmplx_mag_f32+0x90>
 800a518:	eeb0 0a67 	vmov.f32	s0, s15
 800a51c:	9203      	str	r2, [sp, #12]
 800a51e:	9102      	str	r1, [sp, #8]
 800a520:	9001      	str	r0, [sp, #4]
 800a522:	f000 ffab 	bl	800b47c <sqrtf>
 800a526:	a801      	add	r0, sp, #4
 800a528:	c807      	ldmia	r0, {r0, r1, r2}
 800a52a:	e746      	b.n	800a3ba <arm_cmplx_mag_f32+0x5e>

0800a52c <arm_radix8_butterfly_f32>:
 800a52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a530:	ed2d 8b10 	vpush	{d8-d15}
 800a534:	461c      	mov	r4, r3
 800a536:	b09d      	sub	sp, #116	@ 0x74
 800a538:	4603      	mov	r3, r0
 800a53a:	3304      	adds	r3, #4
 800a53c:	ed9f bac4 	vldr	s22, [pc, #784]	@ 800a850 <arm_radix8_butterfly_f32+0x324>
 800a540:	9019      	str	r0, [sp, #100]	@ 0x64
 800a542:	921a      	str	r2, [sp, #104]	@ 0x68
 800a544:	468b      	mov	fp, r1
 800a546:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a548:	468a      	mov	sl, r1
 800a54a:	46a1      	mov	r9, r4
 800a54c:	4607      	mov	r7, r0
 800a54e:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800a552:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800a556:	eb03 0508 	add.w	r5, r3, r8
 800a55a:	195c      	adds	r4, r3, r5
 800a55c:	00de      	lsls	r6, r3, #3
 800a55e:	191a      	adds	r2, r3, r4
 800a560:	9600      	str	r6, [sp, #0]
 800a562:	1898      	adds	r0, r3, r2
 800a564:	4619      	mov	r1, r3
 800a566:	9e00      	ldr	r6, [sp, #0]
 800a568:	9311      	str	r3, [sp, #68]	@ 0x44
 800a56a:	4401      	add	r1, r0
 800a56c:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800a570:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800a574:	19be      	adds	r6, r7, r6
 800a576:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800a57a:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800a57e:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 800a582:	9f00      	ldr	r7, [sp, #0]
 800a584:	011b      	lsls	r3, r3, #4
 800a586:	eb06 0e07 	add.w	lr, r6, r7
 800a58a:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 800a58c:	9302      	str	r3, [sp, #8]
 800a58e:	3204      	adds	r2, #4
 800a590:	3104      	adds	r1, #4
 800a592:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a596:	f04f 0c00 	mov.w	ip, #0
 800a59a:	edde 7a00 	vldr	s15, [lr]
 800a59e:	edd6 6a00 	vldr	s13, [r6]
 800a5a2:	ed95 2a00 	vldr	s4, [r5]
 800a5a6:	ed17 aa01 	vldr	s20, [r7, #-4]
 800a5aa:	edd4 4a00 	vldr	s9, [r4]
 800a5ae:	ed90 5a00 	vldr	s10, [r0]
 800a5b2:	ed12 7a01 	vldr	s14, [r2, #-4]
 800a5b6:	ed51 0a01 	vldr	s1, [r1, #-4]
 800a5ba:	ee77 8a85 	vadd.f32	s17, s15, s10
 800a5be:	ee76 3a87 	vadd.f32	s7, s13, s14
 800a5c2:	ee32 4a20 	vadd.f32	s8, s4, s1
 800a5c6:	ee3a 3a24 	vadd.f32	s6, s20, s9
 800a5ca:	ee33 6a84 	vadd.f32	s12, s7, s8
 800a5ce:	ee73 5a28 	vadd.f32	s11, s6, s17
 800a5d2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a5d6:	ee75 6a86 	vadd.f32	s13, s11, s12
 800a5da:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800a5de:	ed47 6a01 	vstr	s13, [r7, #-4]
 800a5e2:	edc4 5a00 	vstr	s11, [r4]
 800a5e6:	ed92 9a00 	vldr	s18, [r2]
 800a5ea:	ed95 1a01 	vldr	s2, [r5, #4]
 800a5ee:	edd6 5a01 	vldr	s11, [r6, #4]
 800a5f2:	ed91 6a00 	vldr	s12, [r1]
 800a5f6:	edd7 2a00 	vldr	s5, [r7]
 800a5fa:	edd4 1a01 	vldr	s3, [r4, #4]
 800a5fe:	edde 6a01 	vldr	s13, [lr, #4]
 800a602:	edd0 9a01 	vldr	s19, [r0, #4]
 800a606:	ee72 0a60 	vsub.f32	s1, s4, s1
 800a60a:	ee71 aa46 	vsub.f32	s21, s2, s12
 800a60e:	ee35 2ac9 	vsub.f32	s4, s11, s18
 800a612:	ee37 0a60 	vsub.f32	s0, s14, s1
 800a616:	ee32 8a2a 	vadd.f32	s16, s4, s21
 800a61a:	ee37 7a20 	vadd.f32	s14, s14, s1
 800a61e:	ee32 2a6a 	vsub.f32	s4, s4, s21
 800a622:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800a626:	ee75 5a89 	vadd.f32	s11, s11, s18
 800a62a:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800a62e:	ee7a 4a64 	vsub.f32	s9, s20, s9
 800a632:	ee31 6a06 	vadd.f32	s12, s2, s12
 800a636:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800a63a:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800a63e:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800a642:	ee72 1ae1 	vsub.f32	s3, s5, s3
 800a646:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800a64a:	ee62 2a0b 	vmul.f32	s5, s4, s22
 800a64e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800a652:	ee33 3a68 	vsub.f32	s6, s6, s17
 800a656:	ee36 0a88 	vadd.f32	s0, s13, s16
 800a65a:	ee75 8a86 	vadd.f32	s17, s11, s12
 800a65e:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800a662:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800a666:	ee74 6ae0 	vsub.f32	s13, s9, s1
 800a66a:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800a66e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800a672:	ee75 4a27 	vadd.f32	s9, s10, s15
 800a676:	ee71 5a49 	vsub.f32	s11, s2, s18
 800a67a:	ee31 2a09 	vadd.f32	s4, s2, s18
 800a67e:	ee75 7a67 	vsub.f32	s15, s10, s15
 800a682:	ee31 1aa2 	vadd.f32	s2, s3, s5
 800a686:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800a68a:	ee73 0a06 	vadd.f32	s1, s6, s12
 800a68e:	ee75 1ac4 	vsub.f32	s3, s11, s8
 800a692:	ee36 5a87 	vadd.f32	s10, s13, s14
 800a696:	ee32 8a28 	vadd.f32	s16, s4, s17
 800a69a:	ee33 6a46 	vsub.f32	s12, s6, s12
 800a69e:	ee34 4a25 	vadd.f32	s8, s8, s11
 800a6a2:	ee33 3a80 	vadd.f32	s6, s7, s0
 800a6a6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a6aa:	ee71 5a64 	vsub.f32	s11, s2, s9
 800a6ae:	ee72 6ae7 	vsub.f32	s13, s5, s15
 800a6b2:	ee32 2a68 	vsub.f32	s4, s4, s17
 800a6b6:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800a6ba:	ee74 4a81 	vadd.f32	s9, s9, s2
 800a6be:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800a6c2:	44dc      	add	ip, fp
 800a6c4:	45e2      	cmp	sl, ip
 800a6c6:	ed87 8a00 	vstr	s16, [r7]
 800a6ca:	ed84 2a01 	vstr	s4, [r4, #4]
 800a6ce:	441f      	add	r7, r3
 800a6d0:	edce 0a00 	vstr	s1, [lr]
 800a6d4:	441c      	add	r4, r3
 800a6d6:	ed80 6a00 	vstr	s12, [r0]
 800a6da:	edce 1a01 	vstr	s3, [lr, #4]
 800a6de:	ed80 4a01 	vstr	s8, [r0, #4]
 800a6e2:	449e      	add	lr, r3
 800a6e4:	ed86 3a00 	vstr	s6, [r6]
 800a6e8:	4418      	add	r0, r3
 800a6ea:	ed41 3a01 	vstr	s7, [r1, #-4]
 800a6ee:	ed02 5a01 	vstr	s10, [r2, #-4]
 800a6f2:	ed85 7a00 	vstr	s14, [r5]
 800a6f6:	edc6 5a01 	vstr	s11, [r6, #4]
 800a6fa:	edc1 4a00 	vstr	s9, [r1]
 800a6fe:	441e      	add	r6, r3
 800a700:	edc2 6a00 	vstr	s13, [r2]
 800a704:	4419      	add	r1, r3
 800a706:	edc5 7a01 	vstr	s15, [r5, #4]
 800a70a:	441a      	add	r2, r3
 800a70c:	441d      	add	r5, r3
 800a70e:	f63f af44 	bhi.w	800a59a <arm_radix8_butterfly_f32+0x6e>
 800a712:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a714:	2a07      	cmp	r2, #7
 800a716:	f240 81f5 	bls.w	800ab04 <arm_radix8_butterfly_f32+0x5d8>
 800a71a:	f108 0101 	add.w	r1, r8, #1
 800a71e:	188f      	adds	r7, r1, r2
 800a720:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 800a724:	19d6      	adds	r6, r2, r7
 800a726:	eb08 0c09 	add.w	ip, r8, r9
 800a72a:	1994      	adds	r4, r2, r6
 800a72c:	eb0c 0e09 	add.w	lr, ip, r9
 800a730:	4610      	mov	r0, r2
 800a732:	9701      	str	r7, [sp, #4]
 800a734:	4420      	add	r0, r4
 800a736:	eb0e 0709 	add.w	r7, lr, r9
 800a73a:	1815      	adds	r5, r2, r0
 800a73c:	eb07 0209 	add.w	r2, r7, r9
 800a740:	9203      	str	r2, [sp, #12]
 800a742:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a744:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a748:	9117      	str	r1, [sp, #92]	@ 0x5c
 800a74a:	440a      	add	r2, r1
 800a74c:	9900      	ldr	r1, [sp, #0]
 800a74e:	3108      	adds	r1, #8
 800a750:	9100      	str	r1, [sp, #0]
 800a752:	9902      	ldr	r1, [sp, #8]
 800a754:	3108      	adds	r1, #8
 800a756:	9102      	str	r1, [sp, #8]
 800a758:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800a75a:	00ff      	lsls	r7, r7, #3
 800a75c:	9715      	str	r7, [sp, #84]	@ 0x54
 800a75e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800a762:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a766:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800a76a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800a76c:	9903      	ldr	r1, [sp, #12]
 800a76e:	19d7      	adds	r7, r2, r7
 800a770:	00c9      	lsls	r1, r1, #3
 800a772:	9114      	str	r1, [sp, #80]	@ 0x50
 800a774:	9710      	str	r7, [sp, #64]	@ 0x40
 800a776:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800a778:	9f00      	ldr	r7, [sp, #0]
 800a77a:	19cf      	adds	r7, r1, r7
 800a77c:	970d      	str	r7, [sp, #52]	@ 0x34
 800a77e:	9f02      	ldr	r7, [sp, #8]
 800a780:	19cf      	adds	r7, r1, r7
 800a782:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800a786:	970c      	str	r7, [sp, #48]	@ 0x30
 800a788:	9f01      	ldr	r7, [sp, #4]
 800a78a:	f8cd e058 	str.w	lr, [sp, #88]	@ 0x58
 800a78e:	3504      	adds	r5, #4
 800a790:	3004      	adds	r0, #4
 800a792:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 800a796:	9508      	str	r5, [sp, #32]
 800a798:	9009      	str	r0, [sp, #36]	@ 0x24
 800a79a:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 800a79c:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800a79e:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 800a7a2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800a7a6:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 800a7aa:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a7ac:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
 800a7b0:	1945      	adds	r5, r0, r5
 800a7b2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800a7b6:	460f      	mov	r7, r1
 800a7b8:	3404      	adds	r4, #4
 800a7ba:	4641      	mov	r1, r8
 800a7bc:	1841      	adds	r1, r0, r1
 800a7be:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
 800a7c2:	940a      	str	r4, [sp, #40]	@ 0x28
 800a7c4:	eb00 0c06 	add.w	ip, r0, r6
 800a7c8:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 800a7cc:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a7ce:	9506      	str	r5, [sp, #24]
 800a7d0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800a7d2:	9105      	str	r1, [sp, #20]
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	1905      	adds	r5, r0, r4
 800a7d8:	3108      	adds	r1, #8
 800a7da:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800a7dc:	9507      	str	r5, [sp, #28]
 800a7de:	910f      	str	r1, [sp, #60]	@ 0x3c
 800a7e0:	ea4f 1509 	mov.w	r5, r9, lsl #4
 800a7e4:	2101      	movs	r1, #1
 800a7e6:	eb00 0e06 	add.w	lr, r0, r6
 800a7ea:	9518      	str	r5, [sp, #96]	@ 0x60
 800a7ec:	9404      	str	r4, [sp, #16]
 800a7ee:	9103      	str	r1, [sp, #12]
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	4689      	mov	r9, r1
 800a7f4:	9e06      	ldr	r6, [sp, #24]
 800a7f6:	ed90 fa00 	vldr	s30, [r0]
 800a7fa:	edd6 7a01 	vldr	s15, [r6, #4]
 800a7fe:	edd0 ba01 	vldr	s23, [r0, #4]
 800a802:	edcd 7a00 	vstr	s15, [sp]
 800a806:	a80d      	add	r0, sp, #52	@ 0x34
 800a808:	edde 7a01 	vldr	s15, [lr, #4]
 800a80c:	9c05      	ldr	r4, [sp, #20]
 800a80e:	9d07      	ldr	r5, [sp, #28]
 800a810:	edd2 fa00 	vldr	s31, [r2]
 800a814:	ed92 ca01 	vldr	s24, [r2, #4]
 800a818:	edcd 7a01 	vstr	s15, [sp, #4]
 800a81c:	c807      	ldmia	r0, {r0, r1, r2}
 800a81e:	eddc 7a01 	vldr	s15, [ip, #4]
 800a822:	edd4 ea00 	vldr	s29, [r4]
 800a826:	ed95 ea00 	vldr	s28, [r5]
 800a82a:	edd6 da00 	vldr	s27, [r6]
 800a82e:	edd4 aa01 	vldr	s21, [r4, #4]
 800a832:	ed95 aa01 	vldr	s20, [r5, #4]
 800a836:	ed9e da00 	vldr	s26, [lr]
 800a83a:	eddc ca00 	vldr	s25, [ip]
 800a83e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a842:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800a844:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a846:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a848:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800a84a:	edcd 7a02 	vstr	s15, [sp, #8]
 800a84e:	e001      	b.n	800a854 <arm_radix8_butterfly_f32+0x328>
 800a850:	3f3504f3 	.word	0x3f3504f3
 800a854:	ed16 6a01 	vldr	s12, [r6, #-4]
 800a858:	ed91 5a00 	vldr	s10, [r1]
 800a85c:	ed57 9a01 	vldr	s19, [r7, #-4]
 800a860:	edd5 7a00 	vldr	s15, [r5]
 800a864:	ed18 7a01 	vldr	s14, [r8, #-4]
 800a868:	edd2 3a00 	vldr	s7, [r2]
 800a86c:	ed94 3a00 	vldr	s6, [r4]
 800a870:	ed90 2a00 	vldr	s4, [r0]
 800a874:	ed92 0a01 	vldr	s0, [r2, #4]
 800a878:	ee33 8a85 	vadd.f32	s16, s7, s10
 800a87c:	ee32 1a06 	vadd.f32	s2, s4, s12
 800a880:	ee33 4a29 	vadd.f32	s8, s6, s19
 800a884:	ee77 4a87 	vadd.f32	s9, s15, s14
 800a888:	ee78 1a04 	vadd.f32	s3, s16, s8
 800a88c:	ee71 6a24 	vadd.f32	s13, s2, s9
 800a890:	ee32 2a46 	vsub.f32	s4, s4, s12
 800a894:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800a898:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a89c:	ed82 6a00 	vstr	s12, [r2]
 800a8a0:	edd5 8a01 	vldr	s17, [r5, #4]
 800a8a4:	ed90 9a01 	vldr	s18, [r0, #4]
 800a8a8:	edd6 2a00 	vldr	s5, [r6]
 800a8ac:	ed98 7a00 	vldr	s14, [r8]
 800a8b0:	edd4 0a01 	vldr	s1, [r4, #4]
 800a8b4:	ed91 6a01 	vldr	s12, [r1, #4]
 800a8b8:	edd7 5a00 	vldr	s11, [r7]
 800a8bc:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800a8c0:	ee33 3a69 	vsub.f32	s6, s6, s19
 800a8c4:	ee39 5a62 	vsub.f32	s10, s18, s5
 800a8c8:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800a8cc:	ee38 4a44 	vsub.f32	s8, s16, s8
 800a8d0:	ee38 7a87 	vadd.f32	s14, s17, s14
 800a8d4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800a8d8:	ee79 2a22 	vadd.f32	s5, s18, s5
 800a8dc:	ee75 8a69 	vsub.f32	s17, s10, s19
 800a8e0:	ee32 9a27 	vadd.f32	s18, s4, s15
 800a8e4:	ee35 5a29 	vadd.f32	s10, s10, s19
 800a8e8:	ee72 7a67 	vsub.f32	s15, s4, s15
 800a8ec:	ee30 2a06 	vadd.f32	s4, s0, s12
 800a8f0:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800a8f4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800a8f8:	ee32 9a08 	vadd.f32	s18, s4, s16
 800a8fc:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800a900:	ee32 2a48 	vsub.f32	s4, s4, s16
 800a904:	ee71 4a64 	vsub.f32	s9, s2, s9
 800a908:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800a90c:	ee32 1a87 	vadd.f32	s2, s5, s14
 800a910:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800a914:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800a918:	ee30 6a46 	vsub.f32	s12, s0, s12
 800a91c:	ee73 0a29 	vadd.f32	s1, s6, s19
 800a920:	ee36 0a28 	vadd.f32	s0, s12, s17
 800a924:	ee33 3a69 	vsub.f32	s6, s6, s19
 800a928:	ee32 7a64 	vsub.f32	s14, s4, s9
 800a92c:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800a930:	ee36 6a68 	vsub.f32	s12, s12, s17
 800a934:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800a938:	ee75 8a85 	vadd.f32	s17, s11, s10
 800a93c:	ee74 3a22 	vadd.f32	s7, s8, s5
 800a940:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800a944:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800a948:	ee79 1a41 	vsub.f32	s3, s18, s2
 800a94c:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800a950:	ee76 5a43 	vsub.f32	s11, s12, s6
 800a954:	ee74 2a62 	vsub.f32	s5, s8, s5
 800a958:	ee74 4a82 	vadd.f32	s9, s9, s4
 800a95c:	ee30 4a60 	vsub.f32	s8, s0, s1
 800a960:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800a964:	ee30 0a80 	vadd.f32	s0, s1, s0
 800a968:	ee77 9a85 	vadd.f32	s19, s15, s10
 800a96c:	ee33 6a06 	vadd.f32	s12, s6, s12
 800a970:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800a974:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800a978:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800a97c:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800a980:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800a984:	ee39 1a01 	vadd.f32	s2, s18, s2
 800a988:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800a98c:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800a990:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800a994:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800a998:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800a99c:	ee35 3a03 	vadd.f32	s6, s10, s6
 800a9a0:	ee72 6a66 	vsub.f32	s13, s4, s13
 800a9a4:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800a9a8:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800a9ac:	ed9d 4a02 	vldr	s8, [sp, #8]
 800a9b0:	ed82 1a01 	vstr	s2, [r2, #4]
 800a9b4:	ee77 3a63 	vsub.f32	s7, s14, s7
 800a9b8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800a9bc:	ed9d 7a01 	vldr	s14, [sp, #4]
 800a9c0:	ed81 3a00 	vstr	s6, [r1]
 800a9c4:	ee30 9a89 	vadd.f32	s18, s1, s18
 800a9c8:	ee32 2a05 	vadd.f32	s4, s4, s10
 800a9cc:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800a9d0:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800a9d4:	ee67 2a22 	vmul.f32	s5, s14, s5
 800a9d8:	ee64 1a00 	vmul.f32	s3, s8, s0
 800a9dc:	ee27 7a24 	vmul.f32	s14, s14, s9
 800a9e0:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800a9e4:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800a9e8:	ee64 8a28 	vmul.f32	s17, s8, s17
 800a9ec:	ed9d 4a00 	vldr	s8, [sp]
 800a9f0:	edc1 6a01 	vstr	s13, [r1, #4]
 800a9f4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800a9f8:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800a9fc:	ee64 9a29 	vmul.f32	s19, s8, s19
 800aa00:	ee24 4a25 	vmul.f32	s8, s8, s11
 800aa04:	ee30 7a87 	vadd.f32	s14, s1, s14
 800aa08:	ee74 4a84 	vadd.f32	s9, s9, s8
 800aa0c:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800aa10:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800aa14:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800aa18:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800aa1c:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800aa20:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800aa24:	ee75 1a21 	vadd.f32	s3, s10, s3
 800aa28:	ee30 0a68 	vsub.f32	s0, s0, s17
 800aa2c:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800aa30:	ee70 0a84 	vadd.f32	s1, s1, s8
 800aa34:	ee36 6a67 	vsub.f32	s12, s12, s15
 800aa38:	44d9      	add	r9, fp
 800aa3a:	45ca      	cmp	sl, r9
 800aa3c:	ed84 9a00 	vstr	s18, [r4]
 800aa40:	edc4 3a01 	vstr	s7, [r4, #4]
 800aa44:	441a      	add	r2, r3
 800aa46:	ed07 7a01 	vstr	s14, [r7, #-4]
 800aa4a:	edc7 2a00 	vstr	s5, [r7]
 800aa4e:	4419      	add	r1, r3
 800aa50:	ed80 2a00 	vstr	s4, [r0]
 800aa54:	ed80 8a01 	vstr	s16, [r0, #4]
 800aa58:	441c      	add	r4, r3
 800aa5a:	ed48 1a01 	vstr	s3, [r8, #-4]
 800aa5e:	ed88 0a00 	vstr	s0, [r8]
 800aa62:	441f      	add	r7, r3
 800aa64:	ed46 4a01 	vstr	s9, [r6, #-4]
 800aa68:	4418      	add	r0, r3
 800aa6a:	edc6 9a00 	vstr	s19, [r6]
 800aa6e:	4498      	add	r8, r3
 800aa70:	edc5 0a00 	vstr	s1, [r5]
 800aa74:	ed85 6a01 	vstr	s12, [r5, #4]
 800aa78:	441e      	add	r6, r3
 800aa7a:	441d      	add	r5, r3
 800aa7c:	f63f aeea 	bhi.w	800a854 <arm_radix8_butterfly_f32+0x328>
 800aa80:	9a03      	ldr	r2, [sp, #12]
 800aa82:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800aa84:	3201      	adds	r2, #1
 800aa86:	4611      	mov	r1, r2
 800aa88:	9203      	str	r2, [sp, #12]
 800aa8a:	9a04      	ldr	r2, [sp, #16]
 800aa8c:	4402      	add	r2, r0
 800aa8e:	9204      	str	r2, [sp, #16]
 800aa90:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800aa92:	9a05      	ldr	r2, [sp, #20]
 800aa94:	4402      	add	r2, r0
 800aa96:	9205      	str	r2, [sp, #20]
 800aa98:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800aa9a:	9a07      	ldr	r2, [sp, #28]
 800aa9c:	4402      	add	r2, r0
 800aa9e:	9207      	str	r2, [sp, #28]
 800aaa0:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800aaa2:	9a06      	ldr	r2, [sp, #24]
 800aaa4:	4402      	add	r2, r0
 800aaa6:	9206      	str	r2, [sp, #24]
 800aaa8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800aaaa:	4496      	add	lr, r2
 800aaac:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800aaae:	4494      	add	ip, r2
 800aab0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aab2:	3208      	adds	r2, #8
 800aab4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800aab6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aab8:	3208      	adds	r2, #8
 800aaba:	920e      	str	r2, [sp, #56]	@ 0x38
 800aabc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aabe:	3208      	adds	r2, #8
 800aac0:	920d      	str	r2, [sp, #52]	@ 0x34
 800aac2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800aac4:	3208      	adds	r2, #8
 800aac6:	920c      	str	r2, [sp, #48]	@ 0x30
 800aac8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aaca:	3208      	adds	r2, #8
 800aacc:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aace:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aad0:	3208      	adds	r2, #8
 800aad2:	920a      	str	r2, [sp, #40]	@ 0x28
 800aad4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aad6:	3208      	adds	r2, #8
 800aad8:	9209      	str	r2, [sp, #36]	@ 0x24
 800aada:	9a08      	ldr	r2, [sp, #32]
 800aadc:	3208      	adds	r2, #8
 800aade:	9208      	str	r2, [sp, #32]
 800aae0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800aae2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800aae4:	4288      	cmp	r0, r1
 800aae6:	4622      	mov	r2, r4
 800aae8:	d007      	beq.n	800aafa <arm_radix8_butterfly_f32+0x5ce>
 800aaea:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800aaec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800aaf0:	4621      	mov	r1, r4
 800aaf2:	4401      	add	r1, r0
 800aaf4:	9110      	str	r1, [sp, #64]	@ 0x40
 800aaf6:	9804      	ldr	r0, [sp, #16]
 800aaf8:	e67c      	b.n	800a7f4 <arm_radix8_butterfly_f32+0x2c8>
 800aafa:	4683      	mov	fp, r0
 800aafc:	f8bd 905c 	ldrh.w	r9, [sp, #92]	@ 0x5c
 800ab00:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 800ab02:	e524      	b.n	800a54e <arm_radix8_butterfly_f32+0x22>
 800ab04:	b01d      	add	sp, #116	@ 0x74
 800ab06:	ecbd 8b10 	vpop	{d8-d15}
 800ab0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab0e:	bf00      	nop

0800ab10 <sniprintf>:
 800ab10:	b40c      	push	{r2, r3}
 800ab12:	b530      	push	{r4, r5, lr}
 800ab14:	4b18      	ldr	r3, [pc, #96]	@ (800ab78 <sniprintf+0x68>)
 800ab16:	1e0c      	subs	r4, r1, #0
 800ab18:	681d      	ldr	r5, [r3, #0]
 800ab1a:	b09d      	sub	sp, #116	@ 0x74
 800ab1c:	da08      	bge.n	800ab30 <sniprintf+0x20>
 800ab1e:	238b      	movs	r3, #139	@ 0x8b
 800ab20:	602b      	str	r3, [r5, #0]
 800ab22:	f04f 30ff 	mov.w	r0, #4294967295
 800ab26:	b01d      	add	sp, #116	@ 0x74
 800ab28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab2c:	b002      	add	sp, #8
 800ab2e:	4770      	bx	lr
 800ab30:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ab34:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ab38:	f04f 0300 	mov.w	r3, #0
 800ab3c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ab3e:	bf14      	ite	ne
 800ab40:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ab44:	4623      	moveq	r3, r4
 800ab46:	9304      	str	r3, [sp, #16]
 800ab48:	9307      	str	r3, [sp, #28]
 800ab4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ab4e:	9002      	str	r0, [sp, #8]
 800ab50:	9006      	str	r0, [sp, #24]
 800ab52:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ab56:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ab58:	ab21      	add	r3, sp, #132	@ 0x84
 800ab5a:	a902      	add	r1, sp, #8
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	9301      	str	r3, [sp, #4]
 800ab60:	f000 f996 	bl	800ae90 <_svfiprintf_r>
 800ab64:	1c43      	adds	r3, r0, #1
 800ab66:	bfbc      	itt	lt
 800ab68:	238b      	movlt	r3, #139	@ 0x8b
 800ab6a:	602b      	strlt	r3, [r5, #0]
 800ab6c:	2c00      	cmp	r4, #0
 800ab6e:	d0da      	beq.n	800ab26 <sniprintf+0x16>
 800ab70:	9b02      	ldr	r3, [sp, #8]
 800ab72:	2200      	movs	r2, #0
 800ab74:	701a      	strb	r2, [r3, #0]
 800ab76:	e7d6      	b.n	800ab26 <sniprintf+0x16>
 800ab78:	200000b0 	.word	0x200000b0

0800ab7c <memset>:
 800ab7c:	4402      	add	r2, r0
 800ab7e:	4603      	mov	r3, r0
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d100      	bne.n	800ab86 <memset+0xa>
 800ab84:	4770      	bx	lr
 800ab86:	f803 1b01 	strb.w	r1, [r3], #1
 800ab8a:	e7f9      	b.n	800ab80 <memset+0x4>

0800ab8c <__libc_init_array>:
 800ab8c:	b570      	push	{r4, r5, r6, lr}
 800ab8e:	4d0d      	ldr	r5, [pc, #52]	@ (800abc4 <__libc_init_array+0x38>)
 800ab90:	4c0d      	ldr	r4, [pc, #52]	@ (800abc8 <__libc_init_array+0x3c>)
 800ab92:	1b64      	subs	r4, r4, r5
 800ab94:	10a4      	asrs	r4, r4, #2
 800ab96:	2600      	movs	r6, #0
 800ab98:	42a6      	cmp	r6, r4
 800ab9a:	d109      	bne.n	800abb0 <__libc_init_array+0x24>
 800ab9c:	4d0b      	ldr	r5, [pc, #44]	@ (800abcc <__libc_init_array+0x40>)
 800ab9e:	4c0c      	ldr	r4, [pc, #48]	@ (800abd0 <__libc_init_array+0x44>)
 800aba0:	f000 fca2 	bl	800b4e8 <_init>
 800aba4:	1b64      	subs	r4, r4, r5
 800aba6:	10a4      	asrs	r4, r4, #2
 800aba8:	2600      	movs	r6, #0
 800abaa:	42a6      	cmp	r6, r4
 800abac:	d105      	bne.n	800abba <__libc_init_array+0x2e>
 800abae:	bd70      	pop	{r4, r5, r6, pc}
 800abb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800abb4:	4798      	blx	r3
 800abb6:	3601      	adds	r6, #1
 800abb8:	e7ee      	b.n	800ab98 <__libc_init_array+0xc>
 800abba:	f855 3b04 	ldr.w	r3, [r5], #4
 800abbe:	4798      	blx	r3
 800abc0:	3601      	adds	r6, #1
 800abc2:	e7f2      	b.n	800abaa <__libc_init_array+0x1e>
 800abc4:	080234b0 	.word	0x080234b0
 800abc8:	080234b0 	.word	0x080234b0
 800abcc:	080234b0 	.word	0x080234b0
 800abd0:	080234b4 	.word	0x080234b4

0800abd4 <__retarget_lock_acquire_recursive>:
 800abd4:	4770      	bx	lr

0800abd6 <__retarget_lock_release_recursive>:
 800abd6:	4770      	bx	lr

0800abd8 <strcpy>:
 800abd8:	4603      	mov	r3, r0
 800abda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abde:	f803 2b01 	strb.w	r2, [r3], #1
 800abe2:	2a00      	cmp	r2, #0
 800abe4:	d1f9      	bne.n	800abda <strcpy+0x2>
 800abe6:	4770      	bx	lr

0800abe8 <_free_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	4605      	mov	r5, r0
 800abec:	2900      	cmp	r1, #0
 800abee:	d041      	beq.n	800ac74 <_free_r+0x8c>
 800abf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abf4:	1f0c      	subs	r4, r1, #4
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	bfb8      	it	lt
 800abfa:	18e4      	addlt	r4, r4, r3
 800abfc:	f000 f8e0 	bl	800adc0 <__malloc_lock>
 800ac00:	4a1d      	ldr	r2, [pc, #116]	@ (800ac78 <_free_r+0x90>)
 800ac02:	6813      	ldr	r3, [r2, #0]
 800ac04:	b933      	cbnz	r3, 800ac14 <_free_r+0x2c>
 800ac06:	6063      	str	r3, [r4, #4]
 800ac08:	6014      	str	r4, [r2, #0]
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac10:	f000 b8dc 	b.w	800adcc <__malloc_unlock>
 800ac14:	42a3      	cmp	r3, r4
 800ac16:	d908      	bls.n	800ac2a <_free_r+0x42>
 800ac18:	6820      	ldr	r0, [r4, #0]
 800ac1a:	1821      	adds	r1, r4, r0
 800ac1c:	428b      	cmp	r3, r1
 800ac1e:	bf01      	itttt	eq
 800ac20:	6819      	ldreq	r1, [r3, #0]
 800ac22:	685b      	ldreq	r3, [r3, #4]
 800ac24:	1809      	addeq	r1, r1, r0
 800ac26:	6021      	streq	r1, [r4, #0]
 800ac28:	e7ed      	b.n	800ac06 <_free_r+0x1e>
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	b10b      	cbz	r3, 800ac34 <_free_r+0x4c>
 800ac30:	42a3      	cmp	r3, r4
 800ac32:	d9fa      	bls.n	800ac2a <_free_r+0x42>
 800ac34:	6811      	ldr	r1, [r2, #0]
 800ac36:	1850      	adds	r0, r2, r1
 800ac38:	42a0      	cmp	r0, r4
 800ac3a:	d10b      	bne.n	800ac54 <_free_r+0x6c>
 800ac3c:	6820      	ldr	r0, [r4, #0]
 800ac3e:	4401      	add	r1, r0
 800ac40:	1850      	adds	r0, r2, r1
 800ac42:	4283      	cmp	r3, r0
 800ac44:	6011      	str	r1, [r2, #0]
 800ac46:	d1e0      	bne.n	800ac0a <_free_r+0x22>
 800ac48:	6818      	ldr	r0, [r3, #0]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	6053      	str	r3, [r2, #4]
 800ac4e:	4408      	add	r0, r1
 800ac50:	6010      	str	r0, [r2, #0]
 800ac52:	e7da      	b.n	800ac0a <_free_r+0x22>
 800ac54:	d902      	bls.n	800ac5c <_free_r+0x74>
 800ac56:	230c      	movs	r3, #12
 800ac58:	602b      	str	r3, [r5, #0]
 800ac5a:	e7d6      	b.n	800ac0a <_free_r+0x22>
 800ac5c:	6820      	ldr	r0, [r4, #0]
 800ac5e:	1821      	adds	r1, r4, r0
 800ac60:	428b      	cmp	r3, r1
 800ac62:	bf04      	itt	eq
 800ac64:	6819      	ldreq	r1, [r3, #0]
 800ac66:	685b      	ldreq	r3, [r3, #4]
 800ac68:	6063      	str	r3, [r4, #4]
 800ac6a:	bf04      	itt	eq
 800ac6c:	1809      	addeq	r1, r1, r0
 800ac6e:	6021      	streq	r1, [r4, #0]
 800ac70:	6054      	str	r4, [r2, #4]
 800ac72:	e7ca      	b.n	800ac0a <_free_r+0x22>
 800ac74:	bd38      	pop	{r3, r4, r5, pc}
 800ac76:	bf00      	nop
 800ac78:	200009a0 	.word	0x200009a0

0800ac7c <sbrk_aligned>:
 800ac7c:	b570      	push	{r4, r5, r6, lr}
 800ac7e:	4e0f      	ldr	r6, [pc, #60]	@ (800acbc <sbrk_aligned+0x40>)
 800ac80:	460c      	mov	r4, r1
 800ac82:	6831      	ldr	r1, [r6, #0]
 800ac84:	4605      	mov	r5, r0
 800ac86:	b911      	cbnz	r1, 800ac8e <sbrk_aligned+0x12>
 800ac88:	f000 fba4 	bl	800b3d4 <_sbrk_r>
 800ac8c:	6030      	str	r0, [r6, #0]
 800ac8e:	4621      	mov	r1, r4
 800ac90:	4628      	mov	r0, r5
 800ac92:	f000 fb9f 	bl	800b3d4 <_sbrk_r>
 800ac96:	1c43      	adds	r3, r0, #1
 800ac98:	d103      	bne.n	800aca2 <sbrk_aligned+0x26>
 800ac9a:	f04f 34ff 	mov.w	r4, #4294967295
 800ac9e:	4620      	mov	r0, r4
 800aca0:	bd70      	pop	{r4, r5, r6, pc}
 800aca2:	1cc4      	adds	r4, r0, #3
 800aca4:	f024 0403 	bic.w	r4, r4, #3
 800aca8:	42a0      	cmp	r0, r4
 800acaa:	d0f8      	beq.n	800ac9e <sbrk_aligned+0x22>
 800acac:	1a21      	subs	r1, r4, r0
 800acae:	4628      	mov	r0, r5
 800acb0:	f000 fb90 	bl	800b3d4 <_sbrk_r>
 800acb4:	3001      	adds	r0, #1
 800acb6:	d1f2      	bne.n	800ac9e <sbrk_aligned+0x22>
 800acb8:	e7ef      	b.n	800ac9a <sbrk_aligned+0x1e>
 800acba:	bf00      	nop
 800acbc:	2000099c 	.word	0x2000099c

0800acc0 <_malloc_r>:
 800acc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acc4:	1ccd      	adds	r5, r1, #3
 800acc6:	f025 0503 	bic.w	r5, r5, #3
 800acca:	3508      	adds	r5, #8
 800accc:	2d0c      	cmp	r5, #12
 800acce:	bf38      	it	cc
 800acd0:	250c      	movcc	r5, #12
 800acd2:	2d00      	cmp	r5, #0
 800acd4:	4606      	mov	r6, r0
 800acd6:	db01      	blt.n	800acdc <_malloc_r+0x1c>
 800acd8:	42a9      	cmp	r1, r5
 800acda:	d904      	bls.n	800ace6 <_malloc_r+0x26>
 800acdc:	230c      	movs	r3, #12
 800acde:	6033      	str	r3, [r6, #0]
 800ace0:	2000      	movs	r0, #0
 800ace2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ace6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800adbc <_malloc_r+0xfc>
 800acea:	f000 f869 	bl	800adc0 <__malloc_lock>
 800acee:	f8d8 3000 	ldr.w	r3, [r8]
 800acf2:	461c      	mov	r4, r3
 800acf4:	bb44      	cbnz	r4, 800ad48 <_malloc_r+0x88>
 800acf6:	4629      	mov	r1, r5
 800acf8:	4630      	mov	r0, r6
 800acfa:	f7ff ffbf 	bl	800ac7c <sbrk_aligned>
 800acfe:	1c43      	adds	r3, r0, #1
 800ad00:	4604      	mov	r4, r0
 800ad02:	d158      	bne.n	800adb6 <_malloc_r+0xf6>
 800ad04:	f8d8 4000 	ldr.w	r4, [r8]
 800ad08:	4627      	mov	r7, r4
 800ad0a:	2f00      	cmp	r7, #0
 800ad0c:	d143      	bne.n	800ad96 <_malloc_r+0xd6>
 800ad0e:	2c00      	cmp	r4, #0
 800ad10:	d04b      	beq.n	800adaa <_malloc_r+0xea>
 800ad12:	6823      	ldr	r3, [r4, #0]
 800ad14:	4639      	mov	r1, r7
 800ad16:	4630      	mov	r0, r6
 800ad18:	eb04 0903 	add.w	r9, r4, r3
 800ad1c:	f000 fb5a 	bl	800b3d4 <_sbrk_r>
 800ad20:	4581      	cmp	r9, r0
 800ad22:	d142      	bne.n	800adaa <_malloc_r+0xea>
 800ad24:	6821      	ldr	r1, [r4, #0]
 800ad26:	1a6d      	subs	r5, r5, r1
 800ad28:	4629      	mov	r1, r5
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	f7ff ffa6 	bl	800ac7c <sbrk_aligned>
 800ad30:	3001      	adds	r0, #1
 800ad32:	d03a      	beq.n	800adaa <_malloc_r+0xea>
 800ad34:	6823      	ldr	r3, [r4, #0]
 800ad36:	442b      	add	r3, r5
 800ad38:	6023      	str	r3, [r4, #0]
 800ad3a:	f8d8 3000 	ldr.w	r3, [r8]
 800ad3e:	685a      	ldr	r2, [r3, #4]
 800ad40:	bb62      	cbnz	r2, 800ad9c <_malloc_r+0xdc>
 800ad42:	f8c8 7000 	str.w	r7, [r8]
 800ad46:	e00f      	b.n	800ad68 <_malloc_r+0xa8>
 800ad48:	6822      	ldr	r2, [r4, #0]
 800ad4a:	1b52      	subs	r2, r2, r5
 800ad4c:	d420      	bmi.n	800ad90 <_malloc_r+0xd0>
 800ad4e:	2a0b      	cmp	r2, #11
 800ad50:	d917      	bls.n	800ad82 <_malloc_r+0xc2>
 800ad52:	1961      	adds	r1, r4, r5
 800ad54:	42a3      	cmp	r3, r4
 800ad56:	6025      	str	r5, [r4, #0]
 800ad58:	bf18      	it	ne
 800ad5a:	6059      	strne	r1, [r3, #4]
 800ad5c:	6863      	ldr	r3, [r4, #4]
 800ad5e:	bf08      	it	eq
 800ad60:	f8c8 1000 	streq.w	r1, [r8]
 800ad64:	5162      	str	r2, [r4, r5]
 800ad66:	604b      	str	r3, [r1, #4]
 800ad68:	4630      	mov	r0, r6
 800ad6a:	f000 f82f 	bl	800adcc <__malloc_unlock>
 800ad6e:	f104 000b 	add.w	r0, r4, #11
 800ad72:	1d23      	adds	r3, r4, #4
 800ad74:	f020 0007 	bic.w	r0, r0, #7
 800ad78:	1ac2      	subs	r2, r0, r3
 800ad7a:	bf1c      	itt	ne
 800ad7c:	1a1b      	subne	r3, r3, r0
 800ad7e:	50a3      	strne	r3, [r4, r2]
 800ad80:	e7af      	b.n	800ace2 <_malloc_r+0x22>
 800ad82:	6862      	ldr	r2, [r4, #4]
 800ad84:	42a3      	cmp	r3, r4
 800ad86:	bf0c      	ite	eq
 800ad88:	f8c8 2000 	streq.w	r2, [r8]
 800ad8c:	605a      	strne	r2, [r3, #4]
 800ad8e:	e7eb      	b.n	800ad68 <_malloc_r+0xa8>
 800ad90:	4623      	mov	r3, r4
 800ad92:	6864      	ldr	r4, [r4, #4]
 800ad94:	e7ae      	b.n	800acf4 <_malloc_r+0x34>
 800ad96:	463c      	mov	r4, r7
 800ad98:	687f      	ldr	r7, [r7, #4]
 800ad9a:	e7b6      	b.n	800ad0a <_malloc_r+0x4a>
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	42a3      	cmp	r3, r4
 800ada2:	d1fb      	bne.n	800ad9c <_malloc_r+0xdc>
 800ada4:	2300      	movs	r3, #0
 800ada6:	6053      	str	r3, [r2, #4]
 800ada8:	e7de      	b.n	800ad68 <_malloc_r+0xa8>
 800adaa:	230c      	movs	r3, #12
 800adac:	6033      	str	r3, [r6, #0]
 800adae:	4630      	mov	r0, r6
 800adb0:	f000 f80c 	bl	800adcc <__malloc_unlock>
 800adb4:	e794      	b.n	800ace0 <_malloc_r+0x20>
 800adb6:	6005      	str	r5, [r0, #0]
 800adb8:	e7d6      	b.n	800ad68 <_malloc_r+0xa8>
 800adba:	bf00      	nop
 800adbc:	200009a0 	.word	0x200009a0

0800adc0 <__malloc_lock>:
 800adc0:	4801      	ldr	r0, [pc, #4]	@ (800adc8 <__malloc_lock+0x8>)
 800adc2:	f7ff bf07 	b.w	800abd4 <__retarget_lock_acquire_recursive>
 800adc6:	bf00      	nop
 800adc8:	20000998 	.word	0x20000998

0800adcc <__malloc_unlock>:
 800adcc:	4801      	ldr	r0, [pc, #4]	@ (800add4 <__malloc_unlock+0x8>)
 800adce:	f7ff bf02 	b.w	800abd6 <__retarget_lock_release_recursive>
 800add2:	bf00      	nop
 800add4:	20000998 	.word	0x20000998

0800add8 <__ssputs_r>:
 800add8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800addc:	688e      	ldr	r6, [r1, #8]
 800adde:	461f      	mov	r7, r3
 800ade0:	42be      	cmp	r6, r7
 800ade2:	680b      	ldr	r3, [r1, #0]
 800ade4:	4682      	mov	sl, r0
 800ade6:	460c      	mov	r4, r1
 800ade8:	4690      	mov	r8, r2
 800adea:	d82d      	bhi.n	800ae48 <__ssputs_r+0x70>
 800adec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800adf0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800adf4:	d026      	beq.n	800ae44 <__ssputs_r+0x6c>
 800adf6:	6965      	ldr	r5, [r4, #20]
 800adf8:	6909      	ldr	r1, [r1, #16]
 800adfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adfe:	eba3 0901 	sub.w	r9, r3, r1
 800ae02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae06:	1c7b      	adds	r3, r7, #1
 800ae08:	444b      	add	r3, r9
 800ae0a:	106d      	asrs	r5, r5, #1
 800ae0c:	429d      	cmp	r5, r3
 800ae0e:	bf38      	it	cc
 800ae10:	461d      	movcc	r5, r3
 800ae12:	0553      	lsls	r3, r2, #21
 800ae14:	d527      	bpl.n	800ae66 <__ssputs_r+0x8e>
 800ae16:	4629      	mov	r1, r5
 800ae18:	f7ff ff52 	bl	800acc0 <_malloc_r>
 800ae1c:	4606      	mov	r6, r0
 800ae1e:	b360      	cbz	r0, 800ae7a <__ssputs_r+0xa2>
 800ae20:	6921      	ldr	r1, [r4, #16]
 800ae22:	464a      	mov	r2, r9
 800ae24:	f000 fae6 	bl	800b3f4 <memcpy>
 800ae28:	89a3      	ldrh	r3, [r4, #12]
 800ae2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae32:	81a3      	strh	r3, [r4, #12]
 800ae34:	6126      	str	r6, [r4, #16]
 800ae36:	6165      	str	r5, [r4, #20]
 800ae38:	444e      	add	r6, r9
 800ae3a:	eba5 0509 	sub.w	r5, r5, r9
 800ae3e:	6026      	str	r6, [r4, #0]
 800ae40:	60a5      	str	r5, [r4, #8]
 800ae42:	463e      	mov	r6, r7
 800ae44:	42be      	cmp	r6, r7
 800ae46:	d900      	bls.n	800ae4a <__ssputs_r+0x72>
 800ae48:	463e      	mov	r6, r7
 800ae4a:	6820      	ldr	r0, [r4, #0]
 800ae4c:	4632      	mov	r2, r6
 800ae4e:	4641      	mov	r1, r8
 800ae50:	f000 faa6 	bl	800b3a0 <memmove>
 800ae54:	68a3      	ldr	r3, [r4, #8]
 800ae56:	1b9b      	subs	r3, r3, r6
 800ae58:	60a3      	str	r3, [r4, #8]
 800ae5a:	6823      	ldr	r3, [r4, #0]
 800ae5c:	4433      	add	r3, r6
 800ae5e:	6023      	str	r3, [r4, #0]
 800ae60:	2000      	movs	r0, #0
 800ae62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae66:	462a      	mov	r2, r5
 800ae68:	f000 fad2 	bl	800b410 <_realloc_r>
 800ae6c:	4606      	mov	r6, r0
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	d1e0      	bne.n	800ae34 <__ssputs_r+0x5c>
 800ae72:	6921      	ldr	r1, [r4, #16]
 800ae74:	4650      	mov	r0, sl
 800ae76:	f7ff feb7 	bl	800abe8 <_free_r>
 800ae7a:	230c      	movs	r3, #12
 800ae7c:	f8ca 3000 	str.w	r3, [sl]
 800ae80:	89a3      	ldrh	r3, [r4, #12]
 800ae82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae86:	81a3      	strh	r3, [r4, #12]
 800ae88:	f04f 30ff 	mov.w	r0, #4294967295
 800ae8c:	e7e9      	b.n	800ae62 <__ssputs_r+0x8a>
	...

0800ae90 <_svfiprintf_r>:
 800ae90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae94:	4698      	mov	r8, r3
 800ae96:	898b      	ldrh	r3, [r1, #12]
 800ae98:	061b      	lsls	r3, r3, #24
 800ae9a:	b09d      	sub	sp, #116	@ 0x74
 800ae9c:	4607      	mov	r7, r0
 800ae9e:	460d      	mov	r5, r1
 800aea0:	4614      	mov	r4, r2
 800aea2:	d510      	bpl.n	800aec6 <_svfiprintf_r+0x36>
 800aea4:	690b      	ldr	r3, [r1, #16]
 800aea6:	b973      	cbnz	r3, 800aec6 <_svfiprintf_r+0x36>
 800aea8:	2140      	movs	r1, #64	@ 0x40
 800aeaa:	f7ff ff09 	bl	800acc0 <_malloc_r>
 800aeae:	6028      	str	r0, [r5, #0]
 800aeb0:	6128      	str	r0, [r5, #16]
 800aeb2:	b930      	cbnz	r0, 800aec2 <_svfiprintf_r+0x32>
 800aeb4:	230c      	movs	r3, #12
 800aeb6:	603b      	str	r3, [r7, #0]
 800aeb8:	f04f 30ff 	mov.w	r0, #4294967295
 800aebc:	b01d      	add	sp, #116	@ 0x74
 800aebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aec2:	2340      	movs	r3, #64	@ 0x40
 800aec4:	616b      	str	r3, [r5, #20]
 800aec6:	2300      	movs	r3, #0
 800aec8:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeca:	2320      	movs	r3, #32
 800aecc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aed0:	f8cd 800c 	str.w	r8, [sp, #12]
 800aed4:	2330      	movs	r3, #48	@ 0x30
 800aed6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b074 <_svfiprintf_r+0x1e4>
 800aeda:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aede:	f04f 0901 	mov.w	r9, #1
 800aee2:	4623      	mov	r3, r4
 800aee4:	469a      	mov	sl, r3
 800aee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeea:	b10a      	cbz	r2, 800aef0 <_svfiprintf_r+0x60>
 800aeec:	2a25      	cmp	r2, #37	@ 0x25
 800aeee:	d1f9      	bne.n	800aee4 <_svfiprintf_r+0x54>
 800aef0:	ebba 0b04 	subs.w	fp, sl, r4
 800aef4:	d00b      	beq.n	800af0e <_svfiprintf_r+0x7e>
 800aef6:	465b      	mov	r3, fp
 800aef8:	4622      	mov	r2, r4
 800aefa:	4629      	mov	r1, r5
 800aefc:	4638      	mov	r0, r7
 800aefe:	f7ff ff6b 	bl	800add8 <__ssputs_r>
 800af02:	3001      	adds	r0, #1
 800af04:	f000 80a7 	beq.w	800b056 <_svfiprintf_r+0x1c6>
 800af08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af0a:	445a      	add	r2, fp
 800af0c:	9209      	str	r2, [sp, #36]	@ 0x24
 800af0e:	f89a 3000 	ldrb.w	r3, [sl]
 800af12:	2b00      	cmp	r3, #0
 800af14:	f000 809f 	beq.w	800b056 <_svfiprintf_r+0x1c6>
 800af18:	2300      	movs	r3, #0
 800af1a:	f04f 32ff 	mov.w	r2, #4294967295
 800af1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af22:	f10a 0a01 	add.w	sl, sl, #1
 800af26:	9304      	str	r3, [sp, #16]
 800af28:	9307      	str	r3, [sp, #28]
 800af2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af2e:	931a      	str	r3, [sp, #104]	@ 0x68
 800af30:	4654      	mov	r4, sl
 800af32:	2205      	movs	r2, #5
 800af34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af38:	484e      	ldr	r0, [pc, #312]	@ (800b074 <_svfiprintf_r+0x1e4>)
 800af3a:	f7f5 f9c9 	bl	80002d0 <memchr>
 800af3e:	9a04      	ldr	r2, [sp, #16]
 800af40:	b9d8      	cbnz	r0, 800af7a <_svfiprintf_r+0xea>
 800af42:	06d0      	lsls	r0, r2, #27
 800af44:	bf44      	itt	mi
 800af46:	2320      	movmi	r3, #32
 800af48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af4c:	0711      	lsls	r1, r2, #28
 800af4e:	bf44      	itt	mi
 800af50:	232b      	movmi	r3, #43	@ 0x2b
 800af52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af56:	f89a 3000 	ldrb.w	r3, [sl]
 800af5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800af5c:	d015      	beq.n	800af8a <_svfiprintf_r+0xfa>
 800af5e:	9a07      	ldr	r2, [sp, #28]
 800af60:	4654      	mov	r4, sl
 800af62:	2000      	movs	r0, #0
 800af64:	f04f 0c0a 	mov.w	ip, #10
 800af68:	4621      	mov	r1, r4
 800af6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af6e:	3b30      	subs	r3, #48	@ 0x30
 800af70:	2b09      	cmp	r3, #9
 800af72:	d94b      	bls.n	800b00c <_svfiprintf_r+0x17c>
 800af74:	b1b0      	cbz	r0, 800afa4 <_svfiprintf_r+0x114>
 800af76:	9207      	str	r2, [sp, #28]
 800af78:	e014      	b.n	800afa4 <_svfiprintf_r+0x114>
 800af7a:	eba0 0308 	sub.w	r3, r0, r8
 800af7e:	fa09 f303 	lsl.w	r3, r9, r3
 800af82:	4313      	orrs	r3, r2
 800af84:	9304      	str	r3, [sp, #16]
 800af86:	46a2      	mov	sl, r4
 800af88:	e7d2      	b.n	800af30 <_svfiprintf_r+0xa0>
 800af8a:	9b03      	ldr	r3, [sp, #12]
 800af8c:	1d19      	adds	r1, r3, #4
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	9103      	str	r1, [sp, #12]
 800af92:	2b00      	cmp	r3, #0
 800af94:	bfbb      	ittet	lt
 800af96:	425b      	neglt	r3, r3
 800af98:	f042 0202 	orrlt.w	r2, r2, #2
 800af9c:	9307      	strge	r3, [sp, #28]
 800af9e:	9307      	strlt	r3, [sp, #28]
 800afa0:	bfb8      	it	lt
 800afa2:	9204      	strlt	r2, [sp, #16]
 800afa4:	7823      	ldrb	r3, [r4, #0]
 800afa6:	2b2e      	cmp	r3, #46	@ 0x2e
 800afa8:	d10a      	bne.n	800afc0 <_svfiprintf_r+0x130>
 800afaa:	7863      	ldrb	r3, [r4, #1]
 800afac:	2b2a      	cmp	r3, #42	@ 0x2a
 800afae:	d132      	bne.n	800b016 <_svfiprintf_r+0x186>
 800afb0:	9b03      	ldr	r3, [sp, #12]
 800afb2:	1d1a      	adds	r2, r3, #4
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	9203      	str	r2, [sp, #12]
 800afb8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800afbc:	3402      	adds	r4, #2
 800afbe:	9305      	str	r3, [sp, #20]
 800afc0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b084 <_svfiprintf_r+0x1f4>
 800afc4:	7821      	ldrb	r1, [r4, #0]
 800afc6:	2203      	movs	r2, #3
 800afc8:	4650      	mov	r0, sl
 800afca:	f7f5 f981 	bl	80002d0 <memchr>
 800afce:	b138      	cbz	r0, 800afe0 <_svfiprintf_r+0x150>
 800afd0:	9b04      	ldr	r3, [sp, #16]
 800afd2:	eba0 000a 	sub.w	r0, r0, sl
 800afd6:	2240      	movs	r2, #64	@ 0x40
 800afd8:	4082      	lsls	r2, r0
 800afda:	4313      	orrs	r3, r2
 800afdc:	3401      	adds	r4, #1
 800afde:	9304      	str	r3, [sp, #16]
 800afe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afe4:	4824      	ldr	r0, [pc, #144]	@ (800b078 <_svfiprintf_r+0x1e8>)
 800afe6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afea:	2206      	movs	r2, #6
 800afec:	f7f5 f970 	bl	80002d0 <memchr>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	d036      	beq.n	800b062 <_svfiprintf_r+0x1d2>
 800aff4:	4b21      	ldr	r3, [pc, #132]	@ (800b07c <_svfiprintf_r+0x1ec>)
 800aff6:	bb1b      	cbnz	r3, 800b040 <_svfiprintf_r+0x1b0>
 800aff8:	9b03      	ldr	r3, [sp, #12]
 800affa:	3307      	adds	r3, #7
 800affc:	f023 0307 	bic.w	r3, r3, #7
 800b000:	3308      	adds	r3, #8
 800b002:	9303      	str	r3, [sp, #12]
 800b004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b006:	4433      	add	r3, r6
 800b008:	9309      	str	r3, [sp, #36]	@ 0x24
 800b00a:	e76a      	b.n	800aee2 <_svfiprintf_r+0x52>
 800b00c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b010:	460c      	mov	r4, r1
 800b012:	2001      	movs	r0, #1
 800b014:	e7a8      	b.n	800af68 <_svfiprintf_r+0xd8>
 800b016:	2300      	movs	r3, #0
 800b018:	3401      	adds	r4, #1
 800b01a:	9305      	str	r3, [sp, #20]
 800b01c:	4619      	mov	r1, r3
 800b01e:	f04f 0c0a 	mov.w	ip, #10
 800b022:	4620      	mov	r0, r4
 800b024:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b028:	3a30      	subs	r2, #48	@ 0x30
 800b02a:	2a09      	cmp	r2, #9
 800b02c:	d903      	bls.n	800b036 <_svfiprintf_r+0x1a6>
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d0c6      	beq.n	800afc0 <_svfiprintf_r+0x130>
 800b032:	9105      	str	r1, [sp, #20]
 800b034:	e7c4      	b.n	800afc0 <_svfiprintf_r+0x130>
 800b036:	fb0c 2101 	mla	r1, ip, r1, r2
 800b03a:	4604      	mov	r4, r0
 800b03c:	2301      	movs	r3, #1
 800b03e:	e7f0      	b.n	800b022 <_svfiprintf_r+0x192>
 800b040:	ab03      	add	r3, sp, #12
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	462a      	mov	r2, r5
 800b046:	4b0e      	ldr	r3, [pc, #56]	@ (800b080 <_svfiprintf_r+0x1f0>)
 800b048:	a904      	add	r1, sp, #16
 800b04a:	4638      	mov	r0, r7
 800b04c:	f3af 8000 	nop.w
 800b050:	1c42      	adds	r2, r0, #1
 800b052:	4606      	mov	r6, r0
 800b054:	d1d6      	bne.n	800b004 <_svfiprintf_r+0x174>
 800b056:	89ab      	ldrh	r3, [r5, #12]
 800b058:	065b      	lsls	r3, r3, #25
 800b05a:	f53f af2d 	bmi.w	800aeb8 <_svfiprintf_r+0x28>
 800b05e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b060:	e72c      	b.n	800aebc <_svfiprintf_r+0x2c>
 800b062:	ab03      	add	r3, sp, #12
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	462a      	mov	r2, r5
 800b068:	4b05      	ldr	r3, [pc, #20]	@ (800b080 <_svfiprintf_r+0x1f0>)
 800b06a:	a904      	add	r1, sp, #16
 800b06c:	4638      	mov	r0, r7
 800b06e:	f000 f879 	bl	800b164 <_printf_i>
 800b072:	e7ed      	b.n	800b050 <_svfiprintf_r+0x1c0>
 800b074:	08023474 	.word	0x08023474
 800b078:	0802347e 	.word	0x0802347e
 800b07c:	00000000 	.word	0x00000000
 800b080:	0800add9 	.word	0x0800add9
 800b084:	0802347a 	.word	0x0802347a

0800b088 <_printf_common>:
 800b088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b08c:	4616      	mov	r6, r2
 800b08e:	4698      	mov	r8, r3
 800b090:	688a      	ldr	r2, [r1, #8]
 800b092:	690b      	ldr	r3, [r1, #16]
 800b094:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b098:	4293      	cmp	r3, r2
 800b09a:	bfb8      	it	lt
 800b09c:	4613      	movlt	r3, r2
 800b09e:	6033      	str	r3, [r6, #0]
 800b0a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b0a4:	4607      	mov	r7, r0
 800b0a6:	460c      	mov	r4, r1
 800b0a8:	b10a      	cbz	r2, 800b0ae <_printf_common+0x26>
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	6033      	str	r3, [r6, #0]
 800b0ae:	6823      	ldr	r3, [r4, #0]
 800b0b0:	0699      	lsls	r1, r3, #26
 800b0b2:	bf42      	ittt	mi
 800b0b4:	6833      	ldrmi	r3, [r6, #0]
 800b0b6:	3302      	addmi	r3, #2
 800b0b8:	6033      	strmi	r3, [r6, #0]
 800b0ba:	6825      	ldr	r5, [r4, #0]
 800b0bc:	f015 0506 	ands.w	r5, r5, #6
 800b0c0:	d106      	bne.n	800b0d0 <_printf_common+0x48>
 800b0c2:	f104 0a19 	add.w	sl, r4, #25
 800b0c6:	68e3      	ldr	r3, [r4, #12]
 800b0c8:	6832      	ldr	r2, [r6, #0]
 800b0ca:	1a9b      	subs	r3, r3, r2
 800b0cc:	42ab      	cmp	r3, r5
 800b0ce:	dc26      	bgt.n	800b11e <_printf_common+0x96>
 800b0d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b0d4:	6822      	ldr	r2, [r4, #0]
 800b0d6:	3b00      	subs	r3, #0
 800b0d8:	bf18      	it	ne
 800b0da:	2301      	movne	r3, #1
 800b0dc:	0692      	lsls	r2, r2, #26
 800b0de:	d42b      	bmi.n	800b138 <_printf_common+0xb0>
 800b0e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b0e4:	4641      	mov	r1, r8
 800b0e6:	4638      	mov	r0, r7
 800b0e8:	47c8      	blx	r9
 800b0ea:	3001      	adds	r0, #1
 800b0ec:	d01e      	beq.n	800b12c <_printf_common+0xa4>
 800b0ee:	6823      	ldr	r3, [r4, #0]
 800b0f0:	6922      	ldr	r2, [r4, #16]
 800b0f2:	f003 0306 	and.w	r3, r3, #6
 800b0f6:	2b04      	cmp	r3, #4
 800b0f8:	bf02      	ittt	eq
 800b0fa:	68e5      	ldreq	r5, [r4, #12]
 800b0fc:	6833      	ldreq	r3, [r6, #0]
 800b0fe:	1aed      	subeq	r5, r5, r3
 800b100:	68a3      	ldr	r3, [r4, #8]
 800b102:	bf0c      	ite	eq
 800b104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b108:	2500      	movne	r5, #0
 800b10a:	4293      	cmp	r3, r2
 800b10c:	bfc4      	itt	gt
 800b10e:	1a9b      	subgt	r3, r3, r2
 800b110:	18ed      	addgt	r5, r5, r3
 800b112:	2600      	movs	r6, #0
 800b114:	341a      	adds	r4, #26
 800b116:	42b5      	cmp	r5, r6
 800b118:	d11a      	bne.n	800b150 <_printf_common+0xc8>
 800b11a:	2000      	movs	r0, #0
 800b11c:	e008      	b.n	800b130 <_printf_common+0xa8>
 800b11e:	2301      	movs	r3, #1
 800b120:	4652      	mov	r2, sl
 800b122:	4641      	mov	r1, r8
 800b124:	4638      	mov	r0, r7
 800b126:	47c8      	blx	r9
 800b128:	3001      	adds	r0, #1
 800b12a:	d103      	bne.n	800b134 <_printf_common+0xac>
 800b12c:	f04f 30ff 	mov.w	r0, #4294967295
 800b130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b134:	3501      	adds	r5, #1
 800b136:	e7c6      	b.n	800b0c6 <_printf_common+0x3e>
 800b138:	18e1      	adds	r1, r4, r3
 800b13a:	1c5a      	adds	r2, r3, #1
 800b13c:	2030      	movs	r0, #48	@ 0x30
 800b13e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b142:	4422      	add	r2, r4
 800b144:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b148:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b14c:	3302      	adds	r3, #2
 800b14e:	e7c7      	b.n	800b0e0 <_printf_common+0x58>
 800b150:	2301      	movs	r3, #1
 800b152:	4622      	mov	r2, r4
 800b154:	4641      	mov	r1, r8
 800b156:	4638      	mov	r0, r7
 800b158:	47c8      	blx	r9
 800b15a:	3001      	adds	r0, #1
 800b15c:	d0e6      	beq.n	800b12c <_printf_common+0xa4>
 800b15e:	3601      	adds	r6, #1
 800b160:	e7d9      	b.n	800b116 <_printf_common+0x8e>
	...

0800b164 <_printf_i>:
 800b164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b168:	7e0f      	ldrb	r7, [r1, #24]
 800b16a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b16c:	2f78      	cmp	r7, #120	@ 0x78
 800b16e:	4691      	mov	r9, r2
 800b170:	4680      	mov	r8, r0
 800b172:	460c      	mov	r4, r1
 800b174:	469a      	mov	sl, r3
 800b176:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b17a:	d807      	bhi.n	800b18c <_printf_i+0x28>
 800b17c:	2f62      	cmp	r7, #98	@ 0x62
 800b17e:	d80a      	bhi.n	800b196 <_printf_i+0x32>
 800b180:	2f00      	cmp	r7, #0
 800b182:	f000 80d1 	beq.w	800b328 <_printf_i+0x1c4>
 800b186:	2f58      	cmp	r7, #88	@ 0x58
 800b188:	f000 80b8 	beq.w	800b2fc <_printf_i+0x198>
 800b18c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b190:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b194:	e03a      	b.n	800b20c <_printf_i+0xa8>
 800b196:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b19a:	2b15      	cmp	r3, #21
 800b19c:	d8f6      	bhi.n	800b18c <_printf_i+0x28>
 800b19e:	a101      	add	r1, pc, #4	@ (adr r1, 800b1a4 <_printf_i+0x40>)
 800b1a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1a4:	0800b1fd 	.word	0x0800b1fd
 800b1a8:	0800b211 	.word	0x0800b211
 800b1ac:	0800b18d 	.word	0x0800b18d
 800b1b0:	0800b18d 	.word	0x0800b18d
 800b1b4:	0800b18d 	.word	0x0800b18d
 800b1b8:	0800b18d 	.word	0x0800b18d
 800b1bc:	0800b211 	.word	0x0800b211
 800b1c0:	0800b18d 	.word	0x0800b18d
 800b1c4:	0800b18d 	.word	0x0800b18d
 800b1c8:	0800b18d 	.word	0x0800b18d
 800b1cc:	0800b18d 	.word	0x0800b18d
 800b1d0:	0800b30f 	.word	0x0800b30f
 800b1d4:	0800b23b 	.word	0x0800b23b
 800b1d8:	0800b2c9 	.word	0x0800b2c9
 800b1dc:	0800b18d 	.word	0x0800b18d
 800b1e0:	0800b18d 	.word	0x0800b18d
 800b1e4:	0800b331 	.word	0x0800b331
 800b1e8:	0800b18d 	.word	0x0800b18d
 800b1ec:	0800b23b 	.word	0x0800b23b
 800b1f0:	0800b18d 	.word	0x0800b18d
 800b1f4:	0800b18d 	.word	0x0800b18d
 800b1f8:	0800b2d1 	.word	0x0800b2d1
 800b1fc:	6833      	ldr	r3, [r6, #0]
 800b1fe:	1d1a      	adds	r2, r3, #4
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	6032      	str	r2, [r6, #0]
 800b204:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b208:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b20c:	2301      	movs	r3, #1
 800b20e:	e09c      	b.n	800b34a <_printf_i+0x1e6>
 800b210:	6833      	ldr	r3, [r6, #0]
 800b212:	6820      	ldr	r0, [r4, #0]
 800b214:	1d19      	adds	r1, r3, #4
 800b216:	6031      	str	r1, [r6, #0]
 800b218:	0606      	lsls	r6, r0, #24
 800b21a:	d501      	bpl.n	800b220 <_printf_i+0xbc>
 800b21c:	681d      	ldr	r5, [r3, #0]
 800b21e:	e003      	b.n	800b228 <_printf_i+0xc4>
 800b220:	0645      	lsls	r5, r0, #25
 800b222:	d5fb      	bpl.n	800b21c <_printf_i+0xb8>
 800b224:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b228:	2d00      	cmp	r5, #0
 800b22a:	da03      	bge.n	800b234 <_printf_i+0xd0>
 800b22c:	232d      	movs	r3, #45	@ 0x2d
 800b22e:	426d      	negs	r5, r5
 800b230:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b234:	4858      	ldr	r0, [pc, #352]	@ (800b398 <_printf_i+0x234>)
 800b236:	230a      	movs	r3, #10
 800b238:	e011      	b.n	800b25e <_printf_i+0xfa>
 800b23a:	6821      	ldr	r1, [r4, #0]
 800b23c:	6833      	ldr	r3, [r6, #0]
 800b23e:	0608      	lsls	r0, r1, #24
 800b240:	f853 5b04 	ldr.w	r5, [r3], #4
 800b244:	d402      	bmi.n	800b24c <_printf_i+0xe8>
 800b246:	0649      	lsls	r1, r1, #25
 800b248:	bf48      	it	mi
 800b24a:	b2ad      	uxthmi	r5, r5
 800b24c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b24e:	4852      	ldr	r0, [pc, #328]	@ (800b398 <_printf_i+0x234>)
 800b250:	6033      	str	r3, [r6, #0]
 800b252:	bf14      	ite	ne
 800b254:	230a      	movne	r3, #10
 800b256:	2308      	moveq	r3, #8
 800b258:	2100      	movs	r1, #0
 800b25a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b25e:	6866      	ldr	r6, [r4, #4]
 800b260:	60a6      	str	r6, [r4, #8]
 800b262:	2e00      	cmp	r6, #0
 800b264:	db05      	blt.n	800b272 <_printf_i+0x10e>
 800b266:	6821      	ldr	r1, [r4, #0]
 800b268:	432e      	orrs	r6, r5
 800b26a:	f021 0104 	bic.w	r1, r1, #4
 800b26e:	6021      	str	r1, [r4, #0]
 800b270:	d04b      	beq.n	800b30a <_printf_i+0x1a6>
 800b272:	4616      	mov	r6, r2
 800b274:	fbb5 f1f3 	udiv	r1, r5, r3
 800b278:	fb03 5711 	mls	r7, r3, r1, r5
 800b27c:	5dc7      	ldrb	r7, [r0, r7]
 800b27e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b282:	462f      	mov	r7, r5
 800b284:	42bb      	cmp	r3, r7
 800b286:	460d      	mov	r5, r1
 800b288:	d9f4      	bls.n	800b274 <_printf_i+0x110>
 800b28a:	2b08      	cmp	r3, #8
 800b28c:	d10b      	bne.n	800b2a6 <_printf_i+0x142>
 800b28e:	6823      	ldr	r3, [r4, #0]
 800b290:	07df      	lsls	r7, r3, #31
 800b292:	d508      	bpl.n	800b2a6 <_printf_i+0x142>
 800b294:	6923      	ldr	r3, [r4, #16]
 800b296:	6861      	ldr	r1, [r4, #4]
 800b298:	4299      	cmp	r1, r3
 800b29a:	bfde      	ittt	le
 800b29c:	2330      	movle	r3, #48	@ 0x30
 800b29e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b2a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b2a6:	1b92      	subs	r2, r2, r6
 800b2a8:	6122      	str	r2, [r4, #16]
 800b2aa:	f8cd a000 	str.w	sl, [sp]
 800b2ae:	464b      	mov	r3, r9
 800b2b0:	aa03      	add	r2, sp, #12
 800b2b2:	4621      	mov	r1, r4
 800b2b4:	4640      	mov	r0, r8
 800b2b6:	f7ff fee7 	bl	800b088 <_printf_common>
 800b2ba:	3001      	adds	r0, #1
 800b2bc:	d14a      	bne.n	800b354 <_printf_i+0x1f0>
 800b2be:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c2:	b004      	add	sp, #16
 800b2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2c8:	6823      	ldr	r3, [r4, #0]
 800b2ca:	f043 0320 	orr.w	r3, r3, #32
 800b2ce:	6023      	str	r3, [r4, #0]
 800b2d0:	4832      	ldr	r0, [pc, #200]	@ (800b39c <_printf_i+0x238>)
 800b2d2:	2778      	movs	r7, #120	@ 0x78
 800b2d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b2d8:	6823      	ldr	r3, [r4, #0]
 800b2da:	6831      	ldr	r1, [r6, #0]
 800b2dc:	061f      	lsls	r7, r3, #24
 800b2de:	f851 5b04 	ldr.w	r5, [r1], #4
 800b2e2:	d402      	bmi.n	800b2ea <_printf_i+0x186>
 800b2e4:	065f      	lsls	r7, r3, #25
 800b2e6:	bf48      	it	mi
 800b2e8:	b2ad      	uxthmi	r5, r5
 800b2ea:	6031      	str	r1, [r6, #0]
 800b2ec:	07d9      	lsls	r1, r3, #31
 800b2ee:	bf44      	itt	mi
 800b2f0:	f043 0320 	orrmi.w	r3, r3, #32
 800b2f4:	6023      	strmi	r3, [r4, #0]
 800b2f6:	b11d      	cbz	r5, 800b300 <_printf_i+0x19c>
 800b2f8:	2310      	movs	r3, #16
 800b2fa:	e7ad      	b.n	800b258 <_printf_i+0xf4>
 800b2fc:	4826      	ldr	r0, [pc, #152]	@ (800b398 <_printf_i+0x234>)
 800b2fe:	e7e9      	b.n	800b2d4 <_printf_i+0x170>
 800b300:	6823      	ldr	r3, [r4, #0]
 800b302:	f023 0320 	bic.w	r3, r3, #32
 800b306:	6023      	str	r3, [r4, #0]
 800b308:	e7f6      	b.n	800b2f8 <_printf_i+0x194>
 800b30a:	4616      	mov	r6, r2
 800b30c:	e7bd      	b.n	800b28a <_printf_i+0x126>
 800b30e:	6833      	ldr	r3, [r6, #0]
 800b310:	6825      	ldr	r5, [r4, #0]
 800b312:	6961      	ldr	r1, [r4, #20]
 800b314:	1d18      	adds	r0, r3, #4
 800b316:	6030      	str	r0, [r6, #0]
 800b318:	062e      	lsls	r6, r5, #24
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	d501      	bpl.n	800b322 <_printf_i+0x1be>
 800b31e:	6019      	str	r1, [r3, #0]
 800b320:	e002      	b.n	800b328 <_printf_i+0x1c4>
 800b322:	0668      	lsls	r0, r5, #25
 800b324:	d5fb      	bpl.n	800b31e <_printf_i+0x1ba>
 800b326:	8019      	strh	r1, [r3, #0]
 800b328:	2300      	movs	r3, #0
 800b32a:	6123      	str	r3, [r4, #16]
 800b32c:	4616      	mov	r6, r2
 800b32e:	e7bc      	b.n	800b2aa <_printf_i+0x146>
 800b330:	6833      	ldr	r3, [r6, #0]
 800b332:	1d1a      	adds	r2, r3, #4
 800b334:	6032      	str	r2, [r6, #0]
 800b336:	681e      	ldr	r6, [r3, #0]
 800b338:	6862      	ldr	r2, [r4, #4]
 800b33a:	2100      	movs	r1, #0
 800b33c:	4630      	mov	r0, r6
 800b33e:	f7f4 ffc7 	bl	80002d0 <memchr>
 800b342:	b108      	cbz	r0, 800b348 <_printf_i+0x1e4>
 800b344:	1b80      	subs	r0, r0, r6
 800b346:	6060      	str	r0, [r4, #4]
 800b348:	6863      	ldr	r3, [r4, #4]
 800b34a:	6123      	str	r3, [r4, #16]
 800b34c:	2300      	movs	r3, #0
 800b34e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b352:	e7aa      	b.n	800b2aa <_printf_i+0x146>
 800b354:	6923      	ldr	r3, [r4, #16]
 800b356:	4632      	mov	r2, r6
 800b358:	4649      	mov	r1, r9
 800b35a:	4640      	mov	r0, r8
 800b35c:	47d0      	blx	sl
 800b35e:	3001      	adds	r0, #1
 800b360:	d0ad      	beq.n	800b2be <_printf_i+0x15a>
 800b362:	6823      	ldr	r3, [r4, #0]
 800b364:	079b      	lsls	r3, r3, #30
 800b366:	d413      	bmi.n	800b390 <_printf_i+0x22c>
 800b368:	68e0      	ldr	r0, [r4, #12]
 800b36a:	9b03      	ldr	r3, [sp, #12]
 800b36c:	4298      	cmp	r0, r3
 800b36e:	bfb8      	it	lt
 800b370:	4618      	movlt	r0, r3
 800b372:	e7a6      	b.n	800b2c2 <_printf_i+0x15e>
 800b374:	2301      	movs	r3, #1
 800b376:	4632      	mov	r2, r6
 800b378:	4649      	mov	r1, r9
 800b37a:	4640      	mov	r0, r8
 800b37c:	47d0      	blx	sl
 800b37e:	3001      	adds	r0, #1
 800b380:	d09d      	beq.n	800b2be <_printf_i+0x15a>
 800b382:	3501      	adds	r5, #1
 800b384:	68e3      	ldr	r3, [r4, #12]
 800b386:	9903      	ldr	r1, [sp, #12]
 800b388:	1a5b      	subs	r3, r3, r1
 800b38a:	42ab      	cmp	r3, r5
 800b38c:	dcf2      	bgt.n	800b374 <_printf_i+0x210>
 800b38e:	e7eb      	b.n	800b368 <_printf_i+0x204>
 800b390:	2500      	movs	r5, #0
 800b392:	f104 0619 	add.w	r6, r4, #25
 800b396:	e7f5      	b.n	800b384 <_printf_i+0x220>
 800b398:	08023485 	.word	0x08023485
 800b39c:	08023496 	.word	0x08023496

0800b3a0 <memmove>:
 800b3a0:	4288      	cmp	r0, r1
 800b3a2:	b510      	push	{r4, lr}
 800b3a4:	eb01 0402 	add.w	r4, r1, r2
 800b3a8:	d902      	bls.n	800b3b0 <memmove+0x10>
 800b3aa:	4284      	cmp	r4, r0
 800b3ac:	4623      	mov	r3, r4
 800b3ae:	d807      	bhi.n	800b3c0 <memmove+0x20>
 800b3b0:	1e43      	subs	r3, r0, #1
 800b3b2:	42a1      	cmp	r1, r4
 800b3b4:	d008      	beq.n	800b3c8 <memmove+0x28>
 800b3b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3be:	e7f8      	b.n	800b3b2 <memmove+0x12>
 800b3c0:	4402      	add	r2, r0
 800b3c2:	4601      	mov	r1, r0
 800b3c4:	428a      	cmp	r2, r1
 800b3c6:	d100      	bne.n	800b3ca <memmove+0x2a>
 800b3c8:	bd10      	pop	{r4, pc}
 800b3ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3d2:	e7f7      	b.n	800b3c4 <memmove+0x24>

0800b3d4 <_sbrk_r>:
 800b3d4:	b538      	push	{r3, r4, r5, lr}
 800b3d6:	4d06      	ldr	r5, [pc, #24]	@ (800b3f0 <_sbrk_r+0x1c>)
 800b3d8:	2300      	movs	r3, #0
 800b3da:	4604      	mov	r4, r0
 800b3dc:	4608      	mov	r0, r1
 800b3de:	602b      	str	r3, [r5, #0]
 800b3e0:	f000 f874 	bl	800b4cc <_sbrk>
 800b3e4:	1c43      	adds	r3, r0, #1
 800b3e6:	d102      	bne.n	800b3ee <_sbrk_r+0x1a>
 800b3e8:	682b      	ldr	r3, [r5, #0]
 800b3ea:	b103      	cbz	r3, 800b3ee <_sbrk_r+0x1a>
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	bd38      	pop	{r3, r4, r5, pc}
 800b3f0:	20000994 	.word	0x20000994

0800b3f4 <memcpy>:
 800b3f4:	440a      	add	r2, r1
 800b3f6:	4291      	cmp	r1, r2
 800b3f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3fc:	d100      	bne.n	800b400 <memcpy+0xc>
 800b3fe:	4770      	bx	lr
 800b400:	b510      	push	{r4, lr}
 800b402:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b406:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b40a:	4291      	cmp	r1, r2
 800b40c:	d1f9      	bne.n	800b402 <memcpy+0xe>
 800b40e:	bd10      	pop	{r4, pc}

0800b410 <_realloc_r>:
 800b410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b414:	4607      	mov	r7, r0
 800b416:	4614      	mov	r4, r2
 800b418:	460d      	mov	r5, r1
 800b41a:	b921      	cbnz	r1, 800b426 <_realloc_r+0x16>
 800b41c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b420:	4611      	mov	r1, r2
 800b422:	f7ff bc4d 	b.w	800acc0 <_malloc_r>
 800b426:	b92a      	cbnz	r2, 800b434 <_realloc_r+0x24>
 800b428:	f7ff fbde 	bl	800abe8 <_free_r>
 800b42c:	4625      	mov	r5, r4
 800b42e:	4628      	mov	r0, r5
 800b430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b434:	f000 f81a 	bl	800b46c <_malloc_usable_size_r>
 800b438:	4284      	cmp	r4, r0
 800b43a:	4606      	mov	r6, r0
 800b43c:	d802      	bhi.n	800b444 <_realloc_r+0x34>
 800b43e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b442:	d8f4      	bhi.n	800b42e <_realloc_r+0x1e>
 800b444:	4621      	mov	r1, r4
 800b446:	4638      	mov	r0, r7
 800b448:	f7ff fc3a 	bl	800acc0 <_malloc_r>
 800b44c:	4680      	mov	r8, r0
 800b44e:	b908      	cbnz	r0, 800b454 <_realloc_r+0x44>
 800b450:	4645      	mov	r5, r8
 800b452:	e7ec      	b.n	800b42e <_realloc_r+0x1e>
 800b454:	42b4      	cmp	r4, r6
 800b456:	4622      	mov	r2, r4
 800b458:	4629      	mov	r1, r5
 800b45a:	bf28      	it	cs
 800b45c:	4632      	movcs	r2, r6
 800b45e:	f7ff ffc9 	bl	800b3f4 <memcpy>
 800b462:	4629      	mov	r1, r5
 800b464:	4638      	mov	r0, r7
 800b466:	f7ff fbbf 	bl	800abe8 <_free_r>
 800b46a:	e7f1      	b.n	800b450 <_realloc_r+0x40>

0800b46c <_malloc_usable_size_r>:
 800b46c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b470:	1f18      	subs	r0, r3, #4
 800b472:	2b00      	cmp	r3, #0
 800b474:	bfbc      	itt	lt
 800b476:	580b      	ldrlt	r3, [r1, r0]
 800b478:	18c0      	addlt	r0, r0, r3
 800b47a:	4770      	bx	lr

0800b47c <sqrtf>:
 800b47c:	b508      	push	{r3, lr}
 800b47e:	ed2d 8b02 	vpush	{d8}
 800b482:	eeb0 8a40 	vmov.f32	s16, s0
 800b486:	f000 f817 	bl	800b4b8 <__ieee754_sqrtf>
 800b48a:	eeb4 8a48 	vcmp.f32	s16, s16
 800b48e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b492:	d60c      	bvs.n	800b4ae <sqrtf+0x32>
 800b494:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b4b4 <sqrtf+0x38>
 800b498:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b49c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4a0:	d505      	bpl.n	800b4ae <sqrtf+0x32>
 800b4a2:	f000 f80d 	bl	800b4c0 <__errno>
 800b4a6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b4aa:	2321      	movs	r3, #33	@ 0x21
 800b4ac:	6003      	str	r3, [r0, #0]
 800b4ae:	ecbd 8b02 	vpop	{d8}
 800b4b2:	bd08      	pop	{r3, pc}
 800b4b4:	00000000 	.word	0x00000000

0800b4b8 <__ieee754_sqrtf>:
 800b4b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b4bc:	4770      	bx	lr
	...

0800b4c0 <__errno>:
 800b4c0:	4b01      	ldr	r3, [pc, #4]	@ (800b4c8 <__errno+0x8>)
 800b4c2:	6818      	ldr	r0, [r3, #0]
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	200000b0 	.word	0x200000b0

0800b4cc <_sbrk>:
 800b4cc:	4a04      	ldr	r2, [pc, #16]	@ (800b4e0 <_sbrk+0x14>)
 800b4ce:	6811      	ldr	r1, [r2, #0]
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	b909      	cbnz	r1, 800b4d8 <_sbrk+0xc>
 800b4d4:	4903      	ldr	r1, [pc, #12]	@ (800b4e4 <_sbrk+0x18>)
 800b4d6:	6011      	str	r1, [r2, #0]
 800b4d8:	6810      	ldr	r0, [r2, #0]
 800b4da:	4403      	add	r3, r0
 800b4dc:	6013      	str	r3, [r2, #0]
 800b4de:	4770      	bx	lr
 800b4e0:	200009a4 	.word	0x200009a4
 800b4e4:	200009a8 	.word	0x200009a8

0800b4e8 <_init>:
 800b4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ea:	bf00      	nop
 800b4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ee:	bc08      	pop	{r3}
 800b4f0:	469e      	mov	lr, r3
 800b4f2:	4770      	bx	lr

0800b4f4 <_fini>:
 800b4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f6:	bf00      	nop
 800b4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4fa:	bc08      	pop	{r3}
 800b4fc:	469e      	mov	lr, r3
 800b4fe:	4770      	bx	lr
