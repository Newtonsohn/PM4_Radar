
demo_code_20240411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b32c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00017fe0  0800b4dc  0800b4dc  0000c4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080234bc  080234bc  00025100  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080234bc  080234bc  000244bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080234c4  080234c4  00025100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080234c4  080234c4  000244c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080234c8  080234c8  000244c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  080234cc  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b0  20000100  080235cc  00025100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009b0  080235cc  000259b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a641  00000000  00000000  00025130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004230  00000000  00000000  0003f771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b0  00000000  00000000  000439a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001348  00000000  00000000  00045358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e25  00000000  00000000  000466a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e823  00000000  00000000  0006e4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7ba4  00000000  00000000  0008cce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0017488c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007028  00000000  00000000  00174940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  0017b968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002178  00000000  00000000  0017ba06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000110  00000000  00000000  0017db7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000100 	.word	0x20000100
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b4c4 	.word	0x0800b4c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000104 	.word	0x20000104
 80001ec:	0800b4c4 	.word	0x0800b4c4

080001f0 <arm_bitreversal_32>:
 80001f0:	1c4b      	adds	r3, r1, #1
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	bf98      	it	ls
 80001f6:	4770      	bxls	lr
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001fc:	1c91      	adds	r1, r2, #2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000208:	880a      	ldrh	r2, [r1, #0]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020e:	4480      	add	r8, r0
 8000210:	4481      	add	r9, r0
 8000212:	4402      	add	r2, r0
 8000214:	4484      	add	ip, r0
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
 800021e:	6815      	ldr	r5, [r2, #0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
 8000224:	f8c9 6000 	str.w	r6, [r9]
 8000228:	f8c8 7000 	str.w	r7, [r8]
 800022c:	f8cc 5000 	str.w	r5, [ip]
 8000230:	6014      	str	r4, [r2, #0]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800023a:	6855      	ldr	r5, [r2, #4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
 800024c:	6054      	str	r4, [r2, #4]
 800024e:	3108      	adds	r1, #8
 8000250:	3b01      	subs	r3, #1
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
 800025a:	1c4b      	adds	r3, r1, #1
 800025c:	2b01      	cmp	r3, #1
 800025e:	bf98      	it	ls
 8000260:	4770      	bxls	lr
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000266:	1c91      	adds	r1, r2, #2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000272:	880a      	ldrh	r2, [r1, #0]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
 8000290:	6815      	ldr	r5, [r2, #0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
 8000296:	f8c9 6000 	str.w	r6, [r9]
 800029a:	f8c8 7000 	str.w	r7, [r8]
 800029e:	f8cc 5000 	str.w	r5, [ip]
 80002a2:	6014      	str	r4, [r2, #0]
 80002a4:	3108      	adds	r1, #8
 80002a6:	3b01      	subs	r3, #1
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ae:	4770      	bx	lr

080002b0 <strcmp>:
 80002b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	bf28      	it	cs
 80002bc:	429a      	cmpcs	r2, r3
 80002be:	d0f7      	beq.n	80002b0 <strcmp>
 80002c0:	1ad0      	subs	r0, r2, r3
 80002c2:	4770      	bx	lr

080002c4 <strlen>:
 80002c4:	4603      	mov	r3, r0
 80002c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d1fb      	bne.n	80002c6 <strlen+0x2>
 80002ce:	1a18      	subs	r0, r3, r0
 80002d0:	3801      	subs	r0, #1
 80002d2:	4770      	bx	lr
	...

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 80006b8:	2300      	movs	r3, #0
 80006ba:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	887a      	ldrh	r2, [r7, #2]
 80006c0:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80006d0:	d02c      	beq.n	800072c <arm_cfft_init_f32+0x80>
 80006d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80006d6:	f300 809e 	bgt.w	8000816 <arm_cfft_init_f32+0x16a>
 80006da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006de:	d032      	beq.n	8000746 <arm_cfft_init_f32+0x9a>
 80006e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006e4:	f300 8097 	bgt.w	8000816 <arm_cfft_init_f32+0x16a>
 80006e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006ec:	d038      	beq.n	8000760 <arm_cfft_init_f32+0xb4>
 80006ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006f2:	f300 8090 	bgt.w	8000816 <arm_cfft_init_f32+0x16a>
 80006f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006fa:	d03e      	beq.n	800077a <arm_cfft_init_f32+0xce>
 80006fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000700:	f300 8089 	bgt.w	8000816 <arm_cfft_init_f32+0x16a>
 8000704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000708:	d044      	beq.n	8000794 <arm_cfft_init_f32+0xe8>
 800070a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800070e:	f300 8082 	bgt.w	8000816 <arm_cfft_init_f32+0x16a>
 8000712:	2b80      	cmp	r3, #128	@ 0x80
 8000714:	d04b      	beq.n	80007ae <arm_cfft_init_f32+0x102>
 8000716:	2b80      	cmp	r3, #128	@ 0x80
 8000718:	dc7d      	bgt.n	8000816 <arm_cfft_init_f32+0x16a>
 800071a:	2b40      	cmp	r3, #64	@ 0x40
 800071c:	d054      	beq.n	80007c8 <arm_cfft_init_f32+0x11c>
 800071e:	2b40      	cmp	r3, #64	@ 0x40
 8000720:	dc79      	bgt.n	8000816 <arm_cfft_init_f32+0x16a>
 8000722:	2b10      	cmp	r3, #16
 8000724:	d06a      	beq.n	80007fc <arm_cfft_init_f32+0x150>
 8000726:	2b20      	cmp	r3, #32
 8000728:	d05b      	beq.n	80007e2 <arm_cfft_init_f32+0x136>
 800072a:	e074      	b.n	8000816 <arm_cfft_init_f32+0x16a>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 800072c:	4b3f      	ldr	r3, [pc, #252]	@ (800082c <arm_cfft_init_f32+0x180>)
 800072e:	899a      	ldrh	r2, [r3, #12]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	819a      	strh	r2, [r3, #12]
 8000734:	4b3d      	ldr	r3, [pc, #244]	@ (800082c <arm_cfft_init_f32+0x180>)
 8000736:	689a      	ldr	r2, [r3, #8]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	4b3b      	ldr	r3, [pc, #236]	@ (800082c <arm_cfft_init_f32+0x180>)
 800073e:	685a      	ldr	r2, [r3, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	605a      	str	r2, [r3, #4]
            break;
 8000744:	e06a      	b.n	800081c <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 8000746:	4b3a      	ldr	r3, [pc, #232]	@ (8000830 <arm_cfft_init_f32+0x184>)
 8000748:	899a      	ldrh	r2, [r3, #12]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	819a      	strh	r2, [r3, #12]
 800074e:	4b38      	ldr	r3, [pc, #224]	@ (8000830 <arm_cfft_init_f32+0x184>)
 8000750:	689a      	ldr	r2, [r3, #8]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	4b36      	ldr	r3, [pc, #216]	@ (8000830 <arm_cfft_init_f32+0x184>)
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	605a      	str	r2, [r3, #4]

            break;
 800075e:	e05d      	b.n	800081c <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 8000760:	4b34      	ldr	r3, [pc, #208]	@ (8000834 <arm_cfft_init_f32+0x188>)
 8000762:	899a      	ldrh	r2, [r3, #12]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	819a      	strh	r2, [r3, #12]
 8000768:	4b32      	ldr	r3, [pc, #200]	@ (8000834 <arm_cfft_init_f32+0x188>)
 800076a:	689a      	ldr	r2, [r3, #8]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	4b30      	ldr	r3, [pc, #192]	@ (8000834 <arm_cfft_init_f32+0x188>)
 8000772:	685a      	ldr	r2, [r3, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	605a      	str	r2, [r3, #4]

            break;
 8000778:	e050      	b.n	800081c <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 800077a:	4b2f      	ldr	r3, [pc, #188]	@ (8000838 <arm_cfft_init_f32+0x18c>)
 800077c:	899a      	ldrh	r2, [r3, #12]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	819a      	strh	r2, [r3, #12]
 8000782:	4b2d      	ldr	r3, [pc, #180]	@ (8000838 <arm_cfft_init_f32+0x18c>)
 8000784:	689a      	ldr	r2, [r3, #8]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	4b2b      	ldr	r3, [pc, #172]	@ (8000838 <arm_cfft_init_f32+0x18c>)
 800078c:	685a      	ldr	r2, [r3, #4]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	605a      	str	r2, [r3, #4]
            break;
 8000792:	e043      	b.n	800081c <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 8000794:	4b29      	ldr	r3, [pc, #164]	@ (800083c <arm_cfft_init_f32+0x190>)
 8000796:	899a      	ldrh	r2, [r3, #12]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	819a      	strh	r2, [r3, #12]
 800079c:	4b27      	ldr	r3, [pc, #156]	@ (800083c <arm_cfft_init_f32+0x190>)
 800079e:	689a      	ldr	r2, [r3, #8]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	4b25      	ldr	r3, [pc, #148]	@ (800083c <arm_cfft_init_f32+0x190>)
 80007a6:	685a      	ldr	r2, [r3, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	605a      	str	r2, [r3, #4]
            break;
 80007ac:	e036      	b.n	800081c <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 80007ae:	4b24      	ldr	r3, [pc, #144]	@ (8000840 <arm_cfft_init_f32+0x194>)
 80007b0:	899a      	ldrh	r2, [r3, #12]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	819a      	strh	r2, [r3, #12]
 80007b6:	4b22      	ldr	r3, [pc, #136]	@ (8000840 <arm_cfft_init_f32+0x194>)
 80007b8:	689a      	ldr	r2, [r3, #8]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	4b20      	ldr	r3, [pc, #128]	@ (8000840 <arm_cfft_init_f32+0x194>)
 80007c0:	685a      	ldr	r2, [r3, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	605a      	str	r2, [r3, #4]
            break;
 80007c6:	e029      	b.n	800081c <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 80007c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000844 <arm_cfft_init_f32+0x198>)
 80007ca:	899a      	ldrh	r2, [r3, #12]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	819a      	strh	r2, [r3, #12]
 80007d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <arm_cfft_init_f32+0x198>)
 80007d2:	689a      	ldr	r2, [r3, #8]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <arm_cfft_init_f32+0x198>)
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	605a      	str	r2, [r3, #4]
            break;
 80007e0:	e01c      	b.n	800081c <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 80007e2:	4b19      	ldr	r3, [pc, #100]	@ (8000848 <arm_cfft_init_f32+0x19c>)
 80007e4:	899a      	ldrh	r2, [r3, #12]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	819a      	strh	r2, [r3, #12]
 80007ea:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <arm_cfft_init_f32+0x19c>)
 80007ec:	689a      	ldr	r2, [r3, #8]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <arm_cfft_init_f32+0x19c>)
 80007f4:	685a      	ldr	r2, [r3, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	605a      	str	r2, [r3, #4]
            break;
 80007fa:	e00f      	b.n	800081c <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 80007fc:	4b13      	ldr	r3, [pc, #76]	@ (800084c <arm_cfft_init_f32+0x1a0>)
 80007fe:	899a      	ldrh	r2, [r3, #12]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	819a      	strh	r2, [r3, #12]
 8000804:	4b11      	ldr	r3, [pc, #68]	@ (800084c <arm_cfft_init_f32+0x1a0>)
 8000806:	689a      	ldr	r2, [r3, #8]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <arm_cfft_init_f32+0x1a0>)
 800080e:	685a      	ldr	r2, [r3, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	605a      	str	r2, [r3, #4]
            break;
 8000814:	e002      	b.n	800081c <arm_cfft_init_f32+0x170>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 8000816:	23ff      	movs	r3, #255	@ 0xff
 8000818:	73fb      	strb	r3, [r7, #15]
            break;
 800081a:	bf00      	nop
        }


        return (status);
 800081c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	0800dfd0 	.word	0x0800dfd0
 8000830:	0800e000 	.word	0x0800e000
 8000834:	0800dfa0 	.word	0x0800dfa0
 8000838:	0800dfe0 	.word	0x0800dfe0
 800083c:	0800e010 	.word	0x0800e010
 8000840:	0800dfc0 	.word	0x0800dfc0
 8000844:	0800dfb0 	.word	0x0800dfb0
 8000848:	0800e020 	.word	0x0800e020
 800084c:	0800dff0 	.word	0x0800dff0

08000850 <Buzzer_Init>:
#include "buzzer.h"

static TIM_HandleTypeDef htim3;

void Buzzer_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	4b24      	ldr	r3, [pc, #144]	@ (80008ec <Buzzer_Init+0x9c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a23      	ldr	r2, [pc, #140]	@ (80008ec <Buzzer_Init+0x9c>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <Buzzer_Init+0x9c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <Buzzer_Init+0x9c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	4a1c      	ldr	r2, [pc, #112]	@ (80008ec <Buzzer_Init+0x9c>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	6413      	str	r3, [r2, #64]	@ 0x40
 8000882:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <Buzzer_Init+0x9c>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

    // PB6 als Ausgang, Ruhepegel LOW
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800089e:	2380      	movs	r3, #128	@ 0x80
 80008a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	4619      	mov	r1, r3
 80008b8:	480d      	ldr	r0, [pc, #52]	@ (80008f0 <Buzzer_Init+0xa0>)
 80008ba:	f005 fa23 	bl	8005d04 <HAL_GPIO_Init>
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);

    // Timer-Konfiguration (TIM4 CH1)
    htim3.Instance = TIM3;
 80008be:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <Buzzer_Init+0xa4>)
 80008c0:	4a0d      	ldr	r2, [pc, #52]	@ (80008f8 <Buzzer_Init+0xa8>)
 80008c2:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 84 - 1;          // 1 MHz
 80008c4:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <Buzzer_Init+0xa4>)
 80008c6:	2253      	movs	r2, #83	@ 0x53
 80008c8:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <Buzzer_Init+0xa4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 500 - 1;            // default: 2 kHz
 80008d0:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <Buzzer_Init+0xa4>)
 80008d2:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80008d6:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <Buzzer_Init+0xa4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
    HAL_TIM_PWM_Init(&htim3);
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <Buzzer_Init+0xa4>)
 80008e0:	f008 fc2a 	bl	8009138 <HAL_TIM_PWM_Init>
}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000
 80008f4:	2000011c 	.word	0x2000011c
 80008f8:	40000400 	.word	0x40000400

080008fc <Buzzer_SetFrequency>:

void Buzzer_SetFrequency(uint32_t freq_hz)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	@ 0x30
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
    uint32_t timer_clk = 1000000;
 8000904:	4b21      	ldr	r3, [pc, #132]	@ (800098c <Buzzer_SetFrequency+0x90>)
 8000906:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t period = timer_clk / freq_hz;
 8000908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28

    __HAL_TIM_DISABLE(&htim3);
 8000912:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <Buzzer_SetFrequency+0x94>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	6a1a      	ldr	r2, [r3, #32]
 8000918:	f241 1311 	movw	r3, #4369	@ 0x1111
 800091c:	4013      	ands	r3, r2
 800091e:	2b00      	cmp	r3, #0
 8000920:	d10f      	bne.n	8000942 <Buzzer_SetFrequency+0x46>
 8000922:	4b1b      	ldr	r3, [pc, #108]	@ (8000990 <Buzzer_SetFrequency+0x94>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	6a1a      	ldr	r2, [r3, #32]
 8000928:	f240 4344 	movw	r3, #1092	@ 0x444
 800092c:	4013      	ands	r3, r2
 800092e:	2b00      	cmp	r3, #0
 8000930:	d107      	bne.n	8000942 <Buzzer_SetFrequency+0x46>
 8000932:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <Buzzer_SetFrequency+0x94>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <Buzzer_SetFrequency+0x94>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f022 0201 	bic.w	r2, r2, #1
 8000940:	601a      	str	r2, [r3, #0]
    htim3.Init.Period = period - 1;
 8000942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000944:	3b01      	subs	r3, #1
 8000946:	4a12      	ldr	r2, [pc, #72]	@ (8000990 <Buzzer_SetFrequency+0x94>)
 8000948:	60d3      	str	r3, [r2, #12]
    HAL_TIM_PWM_Init(&htim3);
 800094a:	4811      	ldr	r0, [pc, #68]	@ (8000990 <Buzzer_SetFrequency+0x94>)
 800094c:	f008 fbf4 	bl	8009138 <HAL_TIM_PWM_Init>

    TIM_OC_InitTypeDef sConfigOC = {0};
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
 8000960:	615a      	str	r2, [r3, #20]
 8000962:	619a      	str	r2, [r3, #24]
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000964:	2360      	movs	r3, #96	@ 0x60
 8000966:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = (period / 2);
 8000968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800096a:	085b      	lsrs	r3, r3, #1
 800096c:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]

    HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	2204      	movs	r2, #4
 800097c:	4619      	mov	r1, r3
 800097e:	4804      	ldr	r0, [pc, #16]	@ (8000990 <Buzzer_SetFrequency+0x94>)
 8000980:	f008 fc4e 	bl	8009220 <HAL_TIM_PWM_ConfigChannel>
    //HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
    //__HAL_TIM_DISABLE(&htim3);
}
 8000984:	bf00      	nop
 8000986:	3730      	adds	r7, #48	@ 0x30
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	000f4240 	.word	0x000f4240
 8000990:	2000011c 	.word	0x2000011c

08000994 <Buzzer_Start>:

void Buzzer_Start(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);*/

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000998:	2104      	movs	r1, #4
 800099a:	4802      	ldr	r0, [pc, #8]	@ (80009a4 <Buzzer_Start+0x10>)
 800099c:	f008 fc02 	bl	80091a4 <HAL_TIM_PWM_Start>
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	2000011c 	.word	0x2000011c

080009a8 <Buzzer_Stop>:

void Buzzer_Stop(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,0);
 80009ac:	4b04      	ldr	r3, [pc, #16]	@ (80009c0 <Buzzer_Stop+0x18>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2200      	movs	r2, #0
 80009b2:	639a      	str	r2, [r3, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);*/
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	2000011c 	.word	0x2000011c

080009c4 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b087      	sub	sp, #28
 80009c8:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 80009ca:	f004 fb97 	bl	80050fc <HAL_Init>
	SystemClock_Config();				// Configure system clocks
 80009ce:	f000 f94f 	bl	8000c70 <SystemClock_Config>

#ifdef FLIPPED_LCD
	BSP_LCD_Init_Flipped();				// Initialize the LCD for flipped orientation
 80009d2:	f003 faa5 	bl	8003f20 <BSP_LCD_Init_Flipped>
#else
	BSP_LCD_Init();						// Initialize the LCD display
#endif
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 80009d6:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 80009da:	2001      	movs	r0, #1
 80009dc:	f003 fb2e 	bl	800403c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f003 fb8f 	bl	8004104 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 80009e6:	f003 fe97 	bl	8004718 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80009ea:	f04f 30ff 	mov.w	r0, #4294967295
 80009ee:	f003 fbe5 	bl	80041bc <BSP_LCD_Clear>
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 80009f2:	f003 fb0b 	bl	800400c <BSP_LCD_GetXSize>
 80009f6:	4603      	mov	r3, r0
 80009f8:	b29c      	uxth	r4, r3
 80009fa:	f003 fb13 	bl	8004024 <BSP_LCD_GetYSize>
 80009fe:	4603      	mov	r3, r0
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	4619      	mov	r1, r3
 8000a04:	4620      	mov	r0, r4
 8000a06:	f004 fa75 	bl	8004ef4 <BSP_TS_Init>
	/* Uncomment next line to enable touchscreen interrupt */
	// BSP_TS_ITConfig();					// Enable Touchscreen interrupt

	PB_init();							// Initialize the user pushbutton
 8000a0a:	f002 f957 	bl	8002cbc <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 8000a0e:	f002 f975 	bl	8002cfc <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 8000a12:	2000      	movs	r0, #0
 8000a14:	f002 fe88 	bl	8003728 <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f002 fe85 	bl	8003728 <BSP_LED_Init>

	//MENU_draw();						// Draw the menu
	//MENU_hint();						// Show hint at startup

	gyro_disable();						// Disable gyro, use those analog inputs
 8000a1e:	f000 f9a5 	bl	8000d6c <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 8000a22:	f000 fa63 	bl	8000eec <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 8000a26:	f000 fb35 	bl	8001094 <MEAS_timer_init>

	//init_radar();
	//MX_GPIO_Init();
	//MX_TIM3_Init();
	ADC1_IN11_ADC2_IN13_dual_init();
 8000a2a:	f000 ffb7 	bl	800199c <ADC1_IN11_ADC2_IN13_dual_init>
	ADC1_IN11_ADC2_IN13_dual_start();
 8000a2e:	f001 f85f 	bl	8001af0 <ADC1_IN11_ADC2_IN13_dual_start>
	//GPIO_PG13_Output_Init();
	int select_state = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
	int8_t t = 1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	75fb      	strb	r3, [r7, #23]
	static char soll_pin[7] = "1234";

	typedef enum{
		STARTMENU = 0, ARMED, DEFUSE, SUBMENU, ALARM
	}SYSTEMSTATE;
	SYSTEMSTATE STATE = STARTMENU;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	75bb      	strb	r3, [r7, #22]

    Buzzer_Init();
 8000a3e:	f7ff ff07 	bl	8000850 <Buzzer_Init>
	/* Infinite while loop */
	while (1) {							// Infinitely loop in main function
		switch (STATE){
 8000a42:	7dbb      	ldrb	r3, [r7, #22]
 8000a44:	2b04      	cmp	r3, #4
 8000a46:	f200 8098 	bhi.w	8000b7a <main+0x1b6>
 8000a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a50 <main+0x8c>)
 8000a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a50:	08000a65 	.word	0x08000a65
 8000a54:	08000a9b 	.word	0x08000a9b
 8000a58:	08000ac5 	.word	0x08000ac5
 8000a5c:	08000b2d 	.word	0x08000b2d
 8000a60:	08000b4f 	.word	0x08000b4f

		case STARTMENU:
			Buzzer_Stop();
 8000a64:	f7ff ffa0 	bl	80009a8 <Buzzer_Stop>
			//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);  // Zum Test HIGH
			BSP_LED_On(LED3);
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f002 feb1 	bl	80037d0 <BSP_LED_On>
			select_state = SHOW_STARTMENU();
 8000a6e:	f001 fa3b 	bl	8001ee8 <SHOW_STARTMENU>
 8000a72:	6138      	str	r0, [r7, #16]
			if(select_state == 1)
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d109      	bne.n	8000a8e <main+0xca>
			{
				STATE = ARMED;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	75bb      	strb	r3, [r7, #22]
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a82:	f003 fb9b 	bl	80041bc <BSP_LCD_Clear>
				start_countdown(30);
 8000a86:	201e      	movs	r0, #30
 8000a88:	f002 f880 	bl	8002b8c <start_countdown>
			}
			else if(select_state == 2)
			{
				STATE = SUBMENU;
			}
			break;
 8000a8c:	e077      	b.n	8000b7e <main+0x1ba>
			else if(select_state == 2)
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d174      	bne.n	8000b7e <main+0x1ba>
				STATE = SUBMENU;
 8000a94:	2303      	movs	r3, #3
 8000a96:	75bb      	strb	r3, [r7, #22]
			break;
 8000a98:	e071      	b.n	8000b7e <main+0x1ba>

		case ARMED:
			if(t > 0)
 8000a9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	dd03      	ble.n	8000aaa <main+0xe6>
				t = update_countdown();
 8000aa2:	f002 f88f 	bl	8002bc4 <update_countdown>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	75fb      	strb	r3, [r7, #23]
			if ((motion != 0)&&(t <= 0))
 8000aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8000c60 <main+0x29c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d067      	beq.n	8000b82 <main+0x1be>
 8000ab2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	dc63      	bgt.n	8000b82 <main+0x1be>
			{
				STATE = DEFUSE;
 8000aba:	2302      	movs	r3, #2
 8000abc:	75bb      	strb	r3, [r7, #22]
				t = 1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8000ac2:	e05e      	b.n	8000b82 <main+0x1be>
		case DEFUSE:
		{
			char* entered_pin = SHOW_DEFUSEMENU();
 8000ac4:	f001 facc 	bl	8002060 <SHOW_DEFUSEMENU>
 8000ac8:	6078      	str	r0, [r7, #4]
			if(entered_pin != NULL)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d01d      	beq.n	8000b0c <main+0x148>
			{
				if(strcmp(entered_pin, soll_pin) == 0)
 8000ad0:	4964      	ldr	r1, [pc, #400]	@ (8000c64 <main+0x2a0>)
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff fbec 	bl	80002b0 <strcmp>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d106      	bne.n	8000aec <main+0x128>
				{
					STATE = STARTMENU;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	75bb      	strb	r3, [r7, #22]
					BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae6:	f003 fb69 	bl	80041bc <BSP_LCD_Clear>
				Buzzer_Start();
				//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);  // Zum Test HIGH
				BSP_LED_Off(LED3);

			}
			break;
 8000aea:	e04f      	b.n	8000b8c <main+0x1c8>
					BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f003 fb64 	bl	80041bc <BSP_LCD_Clear>
					STATE = ALARM;
 8000af4:	2304      	movs	r3, #4
 8000af6:	75bb      	strb	r3, [r7, #22]
					Buzzer_SetFrequency(2500);
 8000af8:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000afc:	f7ff fefe 	bl	80008fc <Buzzer_SetFrequency>
					Buzzer_Start();
 8000b00:	f7ff ff48 	bl	8000994 <Buzzer_Start>
					BSP_LED_Off(LED3);
 8000b04:	2000      	movs	r0, #0
 8000b06:	f002 fe7d 	bl	8003804 <BSP_LED_Off>
			break;
 8000b0a:	e03f      	b.n	8000b8c <main+0x1c8>
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f003 fb54 	bl	80041bc <BSP_LCD_Clear>
				STATE = ALARM;
 8000b14:	2304      	movs	r3, #4
 8000b16:	75bb      	strb	r3, [r7, #22]
				Buzzer_SetFrequency(2000);
 8000b18:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b1c:	f7ff feee 	bl	80008fc <Buzzer_SetFrequency>
				Buzzer_Start();
 8000b20:	f7ff ff38 	bl	8000994 <Buzzer_Start>
				BSP_LED_Off(LED3);
 8000b24:	2000      	movs	r0, #0
 8000b26:	f002 fe6d 	bl	8003804 <BSP_LED_Off>
			break;
 8000b2a:	e02f      	b.n	8000b8c <main+0x1c8>
		}
		case SUBMENU:
			char* new_pin = change_pin();
 8000b2c:	f001 fdea 	bl	8002704 <change_pin>
 8000b30:	60b8      	str	r0, [r7, #8]
			if (new_pin != NULL) {
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d026      	beq.n	8000b86 <main+0x1c2>
			    strcpy(soll_pin, new_pin);  // ✅ Inhalt in das statische Array kopieren
 8000b38:	68b9      	ldr	r1, [r7, #8]
 8000b3a:	484a      	ldr	r0, [pc, #296]	@ (8000c64 <main+0x2a0>)
 8000b3c:	f00a f83a 	bl	800abb4 <strcpy>
			    STATE = STARTMENU;
 8000b40:	2300      	movs	r3, #0
 8000b42:	75bb      	strb	r3, [r7, #22]
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f003 fb38 	bl	80041bc <BSP_LCD_Clear>
			}
			break;
 8000b4c:	e01b      	b.n	8000b86 <main+0x1c2>
		case ALARM:

			char* entered_pin = SHOW_ALARMMENU();
 8000b4e:	f001 fb23 	bl	8002198 <SHOW_ALARMMENU>
 8000b52:	60f8      	str	r0, [r7, #12]
			if(entered_pin != NULL)
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d017      	beq.n	8000b8a <main+0x1c6>
			{
				if(strcmp(entered_pin, soll_pin) == 0)
 8000b5a:	4942      	ldr	r1, [pc, #264]	@ (8000c64 <main+0x2a0>)
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f7ff fba7 	bl	80002b0 <strcmp>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d110      	bne.n	8000b8a <main+0x1c6>
				{
					Buzzer_Stop();
 8000b68:	f7ff ff1e 	bl	80009a8 <Buzzer_Stop>
					STATE = STARTMENU;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	75bb      	strb	r3, [r7, #22]
					BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f003 fb22 	bl	80041bc <BSP_LCD_Clear>
				}
			}
			break;
 8000b78:	e007      	b.n	8000b8a <main+0x1c6>

		default:
			break;
 8000b7a:	bf00      	nop
 8000b7c:	e006      	b.n	8000b8c <main+0x1c8>
			break;
 8000b7e:	bf00      	nop
 8000b80:	e004      	b.n	8000b8c <main+0x1c8>
			break;
 8000b82:	bf00      	nop
 8000b84:	e002      	b.n	8000b8c <main+0x1c8>
			break;
 8000b86:	bf00      	nop
 8000b88:	e000      	b.n	8000b8c <main+0x1c8>
			break;
 8000b8a:	bf00      	nop
		}

		//subsystem_test();

		if (MEAS_data_ready) {			// Show data if new data available
 8000b8c:	4b36      	ldr	r3, [pc, #216]	@ (8000c68 <main+0x2a4>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00b      	beq.n	8000bac <main+0x1e8>
			MEAS_data_ready = false;
 8000b94:	4b34      	ldr	r3, [pc, #208]	@ (8000c68 <main+0x2a4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]


			//MEAS_show_data();
			motion = fft();
 8000b9a:	f000 ffd3 	bl	8001b44 <fft>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a2f      	ldr	r2, [pc, #188]	@ (8000c60 <main+0x29c>)
 8000ba2:	6013      	str	r3, [r2, #0]

			//ADC1_IN11_timer_init();
			//ADC1_IN11_timer_start();
			ADC1_IN11_ADC2_IN13_dual_init();
 8000ba4:	f000 fefa 	bl	800199c <ADC1_IN11_ADC2_IN13_dual_init>
			ADC1_IN11_ADC2_IN13_dual_start();
 8000ba8:	f000 ffa2 	bl	8001af0 <ADC1_IN11_ADC2_IN13_dual_start>
		}

		if (PB_pressed()) {				// Check if user pushbutton was pressed
 8000bac:	f002 f8d8 	bl	8002d60 <PB_pressed>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d01d      	beq.n	8000bf2 <main+0x22e>
			DAC_active = !DAC_active;	// Toggle DAC on/off
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c6c <main+0x2a8>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	bf14      	ite	ne
 8000bbe:	2301      	movne	r3, #1
 8000bc0:	2300      	moveq	r3, #0
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	f083 0301 	eor.w	r3, r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	4b26      	ldr	r3, [pc, #152]	@ (8000c6c <main+0x2a8>)
 8000bd2:	701a      	strb	r2, [r3, #0]
			if (DAC_active) {
 8000bd4:	4b25      	ldr	r3, [pc, #148]	@ (8000c6c <main+0x2a8>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d005      	beq.n	8000be8 <main+0x224>
				DAC_init();
 8000bdc:	f000 f9fe 	bl	8000fdc <DAC_init>
				BSP_LED_On(LED4);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f002 fdf5 	bl	80037d0 <BSP_LED_On>
 8000be6:	e004      	b.n	8000bf2 <main+0x22e>
			} else {
				DAC_reset();
 8000be8:	f000 f9e2 	bl	8000fb0 <DAC_reset>
				BSP_LED_Off(LED4);
 8000bec:	2001      	movs	r0, #1
 8000bee:	f002 fe09 	bl	8003804 <BSP_LED_Off>
			}
		}

		/* Comment next line if touchscreen interrupt is enabled */
		MENU_check_transition();
 8000bf2:	f001 f8e9 	bl	8001dc8 <MENU_check_transition>

		switch (MENU_get_transition()) {	// Handle user menu choice
 8000bf6:	f001 f8d5 	bl	8001da4 <MENU_get_transition>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b06      	cmp	r3, #6
 8000bfe:	d82a      	bhi.n	8000c56 <main+0x292>
 8000c00:	a201      	add	r2, pc, #4	@ (adr r2, 8000c08 <main+0x244>)
 8000c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c06:	bf00      	nop
 8000c08:	08000c25 	.word	0x08000c25
 8000c0c:	08000c57 	.word	0x08000c57
 8000c10:	08000c2f 	.word	0x08000c2f
 8000c14:	08000c39 	.word	0x08000c39
 8000c18:	08000c43 	.word	0x08000c43
 8000c1c:	08000c4d 	.word	0x08000c4d
 8000c20:	08000c57 	.word	0x08000c57
		case MENU_NONE:					// No transition => do nothing
			break;
		case MENU_ZERO:
			ADC1_IN11_ADC2_IN13_dual_init();
 8000c24:	f000 feba 	bl	800199c <ADC1_IN11_ADC2_IN13_dual_init>
			ADC1_IN11_ADC2_IN13_dual_start();
 8000c28:	f000 ff62 	bl	8001af0 <ADC1_IN11_ADC2_IN13_dual_start>
			break;
 8000c2c:	e014      	b.n	8000c58 <main+0x294>
		case MENU_ONE:
			break;
		case MENU_TWO:
			ADC3_IN4_DMA_init();
 8000c2e:	f000 fa67 	bl	8001100 <ADC3_IN4_DMA_init>
			ADC3_IN4_DMA_start();
 8000c32:	f000 faf3 	bl	800121c <ADC3_IN4_DMA_start>
			break;
 8000c36:	e00f      	b.n	8000c58 <main+0x294>
		case MENU_THREE:
			ADC1_IN13_ADC2_IN5_dual_init();
 8000c38:	f000 fb12 	bl	8001260 <ADC1_IN13_ADC2_IN5_dual_init>
			ADC1_IN13_ADC2_IN5_dual_start();
 8000c3c:	f000 fbba 	bl	80013b4 <ADC1_IN13_ADC2_IN5_dual_start>
			break;
 8000c40:	e00a      	b.n	8000c58 <main+0x294>
		case MENU_FOUR:
			ADC2_IN13_IN5_scan_init();
 8000c42:	f000 fbe1 	bl	8001408 <ADC2_IN13_IN5_scan_init>
			ADC2_IN13_IN5_scan_start();
 8000c46:	f000 fc81 	bl	800154c <ADC2_IN13_IN5_scan_start>
			break;
 8000c4a:	e005      	b.n	8000c58 <main+0x294>
		case MENU_FIVE:
			ADC3_IN13_IN4_scan_init();
 8000c4c:	f000 fca0 	bl	8001590 <ADC3_IN13_IN4_scan_init>
			ADC3_IN13_IN4_scan_start();
 8000c50:	f000 fd40 	bl	80016d4 <ADC3_IN13_IN4_scan_start>
			break;
 8000c54:	e000      	b.n	8000c58 <main+0x294>
		default:						// Should never occur
			break;
 8000c56:	bf00      	nop
		}

		HAL_Delay(200);					// Wait or sleep
 8000c58:	20c8      	movs	r0, #200	@ 0xc8
 8000c5a:	f004 fac9 	bl	80051f0 <HAL_Delay>
		switch (STATE){
 8000c5e:	e6f0      	b.n	8000a42 <main+0x7e>
 8000c60:	2000015c 	.word	0x2000015c
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000160 	.word	0x20000160
 8000c6c:	20000161 	.word	0x20000161

08000c70 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b0a0      	sub	sp, #128	@ 0x80
 8000c74:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c76:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c7a:	2230      	movs	r2, #48	@ 0x30
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f009 ff6a 	bl	800ab58 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c84:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	2230      	movs	r2, #48	@ 0x30
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f009 ff5b 	bl	800ab58 <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	4b2e      	ldr	r3, [pc, #184]	@ (8000d60 <SystemClock_Config+0xf0>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	4a2d      	ldr	r2, [pc, #180]	@ (8000d60 <SystemClock_Config+0xf0>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8000d60 <SystemClock_Config+0xf0>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b28      	ldr	r3, [pc, #160]	@ (8000d64 <SystemClock_Config+0xf4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a27      	ldr	r2, [pc, #156]	@ (8000d64 <SystemClock_Config+0xf4>)
 8000cc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	4b25      	ldr	r3, [pc, #148]	@ (8000d64 <SystemClock_Config+0xf4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ce2:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cec:	66fb      	str	r3, [r7, #108]	@ 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000cee:	2308      	movs	r3, #8
 8000cf0:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000cf2:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000cf6:	677b      	str	r3, [r7, #116]	@ 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000d00:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000d04:	4618      	mov	r0, r3
 8000d06:	f006 fcab 	bl	8007660 <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d0a:	230f      	movs	r3, #15
 8000d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d16:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d20:	64fb      	str	r3, [r7, #76]	@ 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000d22:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000d26:	2105      	movs	r1, #5
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f006 ff07 	bl	8007b3c <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d2e:	2308      	movs	r3, #8
 8000d30:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000d32:	23c0      	movs	r3, #192	@ 0xc0
 8000d34:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000d36:	2304      	movs	r3, #4
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000d3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d3e:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	4618      	mov	r0, r3
 8000d46:	f007 f905 	bl	8007f54 <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	@ (8000d68 <SystemClock_Config+0xf8>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	4a06      	ldr	r2, [pc, #24]	@ (8000d68 <SystemClock_Config+0xf8>)
 8000d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d54:	6053      	str	r3, [r2, #4]
}
 8000d56:	bf00      	nop
 8000d58:	3780      	adds	r7, #128	@ 0x80
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40007000 	.word	0x40007000
 8000d68:	40012300 	.word	0x40012300

08000d6c <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	4b2a      	ldr	r3, [pc, #168]	@ (8000e20 <gyro_disable+0xb4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a29      	ldr	r2, [pc, #164]	@ (8000e20 <gyro_disable+0xb4>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b27      	ldr	r3, [pc, #156]	@ (8000e20 <gyro_disable+0xb4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;	// Reset mode for PC1
 8000d8e:	4b25      	ldr	r3, [pc, #148]	@ (8000e24 <gyro_disable+0xb8>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a24      	ldr	r2, [pc, #144]	@ (8000e24 <gyro_disable+0xb8>)
 8000d94:	f023 030c 	bic.w	r3, r3, #12
 8000d98:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;	// Set PC1 as output
 8000d9a:	4b22      	ldr	r3, [pc, #136]	@ (8000e24 <gyro_disable+0xb8>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a21      	ldr	r2, [pc, #132]	@ (8000e24 <gyro_disable+0xb8>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 8000da6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <gyro_disable+0xb8>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	4a1e      	ldr	r2, [pc, #120]	@ (8000e24 <gyro_disable+0xb8>)
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db0:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 8000db2:	200a      	movs	r0, #10
 8000db4:	f004 fa1c 	bl	80051f0 <HAL_Delay>
	GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;	// Analog PC1 = ADC123_IN11
 8000db8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <gyro_disable+0xb8>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a19      	ldr	r2, [pc, #100]	@ (8000e24 <gyro_disable+0xb8>)
 8000dbe:	f043 030c 	orr.w	r3, r3, #12
 8000dc2:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <gyro_disable+0xb4>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dcc:	4a14      	ldr	r2, [pc, #80]	@ (8000e20 <gyro_disable+0xb4>)
 8000dce:	f043 0320 	orr.w	r3, r3, #32
 8000dd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd4:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <gyro_disable+0xb4>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd8:	f003 0320 	and.w	r3, r3, #32
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;	// Reset speed of PF8
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <gyro_disable+0xbc>)
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	4a10      	ldr	r2, [pc, #64]	@ (8000e28 <gyro_disable+0xbc>)
 8000de6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000dea:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;	// Reset alternate function of PF8
 8000dec:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <gyro_disable+0xbc>)
 8000dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e28 <gyro_disable+0xbc>)
 8000df2:	f023 030f 	bic.w	r3, r3, #15
 8000df6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;	// Reset pulup/down of PF8
 8000df8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <gyro_disable+0xbc>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <gyro_disable+0xbc>)
 8000dfe:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000e02:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 8000e04:	200a      	movs	r0, #10
 8000e06:	f004 f9f3 	bl	80051f0 <HAL_Delay>
	GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos; // Analog mode PF8 = ADC3_IN4
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <gyro_disable+0xbc>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a06      	ldr	r2, [pc, #24]	@ (8000e28 <gyro_disable+0xbc>)
 8000e10:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8000e14:	6013      	str	r3, [r2, #0]
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020800 	.word	0x40020800
 8000e28:	40021400 	.word	0x40021400

08000e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	db0b      	blt.n	8000e56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f003 021f 	and.w	r2, r3, #31
 8000e44:	4907      	ldr	r1, [pc, #28]	@ (8000e64 <__NVIC_EnableIRQ+0x38>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	095b      	lsrs	r3, r3, #5
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000e100 	.word	0xe000e100

08000e68 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db12      	blt.n	8000ea0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	490a      	ldr	r1, [pc, #40]	@ (8000eac <__NVIC_DisableIRQ+0x44>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	3320      	adds	r3, #32
 8000e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e94:	f3bf 8f4f 	dsb	sy
}
 8000e98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9a:	f3bf 8f6f 	isb	sy
}
 8000e9e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000e100 	.word	0xe000e100

08000eb0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db0c      	blt.n	8000edc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f003 021f 	and.w	r2, r3, #31
 8000ec8:	4907      	ldr	r1, [pc, #28]	@ (8000ee8 <__NVIC_ClearPendingIRQ+0x38>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	095b      	lsrs	r3, r3, #5
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed6:	3360      	adds	r3, #96	@ 0x60
 8000ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa0 <MEAS_GPIO_analog_init+0xb4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	4a29      	ldr	r2, [pc, #164]	@ (8000fa0 <MEAS_GPIO_analog_init+0xb4>)
 8000efc:	f043 0320 	orr.w	r3, r3, #32
 8000f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f02:	4b27      	ldr	r3, [pc, #156]	@ (8000fa0 <MEAS_GPIO_analog_init+0xb4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	f003 0320 	and.w	r3, r3, #32
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
	GPIOF->MODER |= (3UL << GPIO_MODER_MODER6_Pos);	// Analog PF6 = ADC3_IN4
 8000f0e:	4b25      	ldr	r3, [pc, #148]	@ (8000fa4 <MEAS_GPIO_analog_init+0xb8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a24      	ldr	r2, [pc, #144]	@ (8000fa4 <MEAS_GPIO_analog_init+0xb8>)
 8000f14:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000f18:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <MEAS_GPIO_analog_init+0xb4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa0 <MEAS_GPIO_analog_init+0xb4>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <MEAS_GPIO_analog_init+0xb4>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
	GPIOC->MODER |= (3UL << GPIO_MODER_MODER3_Pos);	// Analog PC3 = ADC123_IN13
 8000f36:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <MEAS_GPIO_analog_init+0xbc>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa8 <MEAS_GPIO_analog_init+0xbc>)
 8000f3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000f40:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <MEAS_GPIO_analog_init+0xb4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a15      	ldr	r2, [pc, #84]	@ (8000fa0 <MEAS_GPIO_analog_init+0xb4>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <MEAS_GPIO_analog_init+0xb4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (3UL << GPIO_MODER_MODER5_Pos);	// Analog PA5 ADC12_IN5
 8000f5e:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <MEAS_GPIO_analog_init+0xc0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a12      	ldr	r2, [pc, #72]	@ (8000fac <MEAS_GPIO_analog_init+0xc0>)
 8000f64:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000f68:	6013      	str	r3, [r2, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <MEAS_GPIO_analog_init+0xb4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa0 <MEAS_GPIO_analog_init+0xb4>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7a:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <MEAS_GPIO_analog_init+0xb4>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]
    // Für ADC1_IN14 (PC4) und ADC2_IN15 (PC5)
    GPIOC->MODER |= (3UL << GPIO_MODER_MODER4_Pos) | (3UL << GPIO_MODER_MODER5_Pos);
 8000f86:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <MEAS_GPIO_analog_init+0xbc>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a07      	ldr	r2, [pc, #28]	@ (8000fa8 <MEAS_GPIO_analog_init+0xbc>)
 8000f8c:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000f90:	6013      	str	r3, [r2, #0]

}
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40021400 	.word	0x40021400
 8000fa8:	40020800 	.word	0x40020800
 8000fac:	40020000 	.word	0x40020000

08000fb0 <DAC_reset>:
/** ***************************************************************************
 * @brief Resets the DAC
 *
 * when it is no longer used.
 *****************************************************************************/
void DAC_reset(void) {
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
	RCC->APB1RSTR |= RCC_APB1RSTR_DACRST;	// Reset the DAC
 8000fb4:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <DAC_reset+0x28>)
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	@ (8000fd8 <DAC_reset+0x28>)
 8000fba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000fbe:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_DACRST;	// Release reset of the DAC
 8000fc0:	4b05      	ldr	r3, [pc, #20]	@ (8000fd8 <DAC_reset+0x28>)
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <DAC_reset+0x28>)
 8000fc6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000fca:	6213      	str	r3, [r2, #32]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800

08000fdc <DAC_init>:
 * The output used is DAC_OUT2 = GPIO PA5
 * @n As DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 * it is possible to monitor the output voltage DAC_OUT2 by the input ADC12_IN5.
 *****************************************************************************/
void DAC_init(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
	__HAL_RCC_DAC_CLK_ENABLE();			// Enable Clock for DAC
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <DAC_init+0x3c>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	4a0b      	ldr	r2, [pc, #44]	@ (8001018 <DAC_init+0x3c>)
 8000fec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff2:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <DAC_init+0x3c>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
	DAC->CR |= DAC_CR_EN2;				// Enable DAC output 2
 8000ffe:	4b07      	ldr	r3, [pc, #28]	@ (800101c <DAC_init+0x40>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a06      	ldr	r2, [pc, #24]	@ (800101c <DAC_init+0x40>)
 8001004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001008:	6013      	str	r3, [r2, #0]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40007400 	.word	0x40007400

08001020 <DAC_increment>:

/** ***************************************************************************
 * @brief Increment the DAC value and write it to the output
 *
 *****************************************************************************/
void DAC_increment(void) {
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	DAC_sample += 20;				// Increment DAC output
 8001024:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <DAC_increment+0x30>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	3314      	adds	r3, #20
 800102a:	4a09      	ldr	r2, [pc, #36]	@ (8001050 <DAC_increment+0x30>)
 800102c:	6013      	str	r3, [r2, #0]
	if (DAC_sample >= (1UL << ADC_DAC_RES)) { DAC_sample = 0; }	// Go to 0
 800102e:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <DAC_increment+0x30>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001036:	d302      	bcc.n	800103e <DAC_increment+0x1e>
 8001038:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <DAC_increment+0x30>)
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
	DAC->DHR12R2 = DAC_sample;		// Write new DAC output value
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <DAC_increment+0x34>)
 8001040:	4b03      	ldr	r3, [pc, #12]	@ (8001050 <DAC_increment+0x30>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6153      	str	r3, [r2, #20]
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	20000568 	.word	0x20000568
 8001054:	40007400 	.word	0x40007400

08001058 <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 800105c:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <ADC_reset+0x38>)
 800105e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001060:	4a0b      	ldr	r2, [pc, #44]	@ (8001090 <ADC_reset+0x38>)
 8001062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001066:	6253      	str	r3, [r2, #36]	@ 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 8001068:	4b09      	ldr	r3, [pc, #36]	@ (8001090 <ADC_reset+0x38>)
 800106a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106c:	4a08      	ldr	r2, [pc, #32]	@ (8001090 <ADC_reset+0x38>)
 800106e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001072:	6253      	str	r3, [r2, #36]	@ 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 8001074:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800107e:	f023 0301 	bic.w	r3, r3, #1
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800

08001094 <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <MEAS_timer_init+0x68>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	4a16      	ldr	r2, [pc, #88]	@ (80010fc <MEAS_timer_init+0x68>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010aa:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <MEAS_timer_init+0x68>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 80010b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010ba:	f240 628f 	movw	r2, #1679	@ 0x68f
 80010be:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 80010c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010c4:	2209      	movs	r2, #9
 80010c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 80010c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010d2:	f043 0320 	orr.w	r3, r3, #32
 80010d6:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 80010d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 80010e8:	201c      	movs	r0, #28
 80010ea:	f7ff fee1 	bl	8000eb0 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 80010ee:	201c      	movs	r0, #28
 80010f0:	f7ff fe9c 	bl	8000e2c <__NVIC_EnableIRQ>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40023800 	.word	0x40023800

08001100 <ADC3_IN4_DMA_init>:
 * to memory without CPU intervention.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input is ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN4_DMA_init(void)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
	MEAS_input_count = 1;				// Only 1 input is converted
 8001106:	4b3e      	ldr	r3, [pc, #248]	@ (8001200 <ADC3_IN4_DMA_init+0x100>)
 8001108:	2201      	movs	r2, #1
 800110a:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 800110c:	2300      	movs	r3, #0
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	4b3c      	ldr	r3, [pc, #240]	@ (8001204 <ADC3_IN4_DMA_init+0x104>)
 8001112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001114:	4a3b      	ldr	r2, [pc, #236]	@ (8001204 <ADC3_IN4_DMA_init+0x104>)
 8001116:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800111a:	6453      	str	r3, [r2, #68]	@ 0x44
 800111c:	4b39      	ldr	r3, [pc, #228]	@ (8001204 <ADC3_IN4_DMA_init+0x104>)
 800111e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ1_Pos);	// Input 4 = first conversion
 8001128:	4b37      	ldr	r3, [pc, #220]	@ (8001208 <ADC3_IN4_DMA_init+0x108>)
 800112a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800112c:	4a36      	ldr	r2, [pc, #216]	@ (8001208 <ADC3_IN4_DMA_init+0x108>)
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001134:	4b34      	ldr	r3, [pc, #208]	@ (8001208 <ADC3_IN4_DMA_init+0x108>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	4a33      	ldr	r2, [pc, #204]	@ (8001208 <ADC3_IN4_DMA_init+0x108>)
 800113a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800113e:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001140:	4b31      	ldr	r3, [pc, #196]	@ (8001208 <ADC3_IN4_DMA_init+0x108>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	4a30      	ldr	r2, [pc, #192]	@ (8001208 <ADC3_IN4_DMA_init+0x108>)
 8001146:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 800114a:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 800114c:	4b2e      	ldr	r3, [pc, #184]	@ (8001208 <ADC3_IN4_DMA_init+0x108>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	4a2d      	ldr	r2, [pc, #180]	@ (8001208 <ADC3_IN4_DMA_init+0x108>)
 8001152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001156:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001158:	2300      	movs	r3, #0
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	4b29      	ldr	r3, [pc, #164]	@ (8001204 <ADC3_IN4_DMA_init+0x104>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001160:	4a28      	ldr	r2, [pc, #160]	@ (8001204 <ADC3_IN4_DMA_init+0x104>)
 8001162:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001166:	6313      	str	r3, [r2, #48]	@ 0x30
 8001168:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <ADC3_IN4_DMA_init+0x104>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 8001174:	4b25      	ldr	r3, [pc, #148]	@ (800120c <ADC3_IN4_DMA_init+0x10c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a24      	ldr	r2, [pc, #144]	@ (800120c <ADC3_IN4_DMA_init+0x10c>)
 800117a:	f023 0301 	bic.w	r3, r3, #1
 800117e:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001180:	bf00      	nop
 8001182:	4b22      	ldr	r3, [pc, #136]	@ (800120c <ADC3_IN4_DMA_init+0x10c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f9      	bne.n	8001182 <ADC3_IN4_DMA_init+0x82>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 800118e:	4b20      	ldr	r3, [pc, #128]	@ (8001210 <ADC3_IN4_DMA_init+0x110>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	4a1f      	ldr	r2, [pc, #124]	@ (8001210 <ADC3_IN4_DMA_init+0x110>)
 8001194:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001198:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 800119a:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <ADC3_IN4_DMA_init+0x10c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a1b      	ldr	r2, [pc, #108]	@ (800120c <ADC3_IN4_DMA_init+0x10c>)
 80011a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011a4:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 80011a6:	4b19      	ldr	r3, [pc, #100]	@ (800120c <ADC3_IN4_DMA_init+0x10c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a18      	ldr	r2, [pc, #96]	@ (800120c <ADC3_IN4_DMA_init+0x10c>)
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b0:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 80011b2:	4b16      	ldr	r3, [pc, #88]	@ (800120c <ADC3_IN4_DMA_init+0x10c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a15      	ldr	r2, [pc, #84]	@ (800120c <ADC3_IN4_DMA_init+0x10c>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011bc:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 80011be:	4b13      	ldr	r3, [pc, #76]	@ (800120c <ADC3_IN4_DMA_init+0x10c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a12      	ldr	r2, [pc, #72]	@ (800120c <ADC3_IN4_DMA_init+0x10c>)
 80011c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011c8:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <ADC3_IN4_DMA_init+0x10c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a0f      	ldr	r2, [pc, #60]	@ (800120c <ADC3_IN4_DMA_init+0x10c>)
 80011d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011d4:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 80011d6:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <ADC3_IN4_DMA_init+0x10c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a0c      	ldr	r2, [pc, #48]	@ (800120c <ADC3_IN4_DMA_init+0x10c>)
 80011dc:	f043 0310 	orr.w	r3, r3, #16
 80011e0:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = ADC_NUMS;		// Number of data items to transfer
 80011e2:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <ADC3_IN4_DMA_init+0x10c>)
 80011e4:	2280      	movs	r2, #128	@ 0x80
 80011e6:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <ADC3_IN4_DMA_init+0x10c>)
 80011ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <ADC3_IN4_DMA_init+0x114>)
 80011ec:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 80011ee:	4b07      	ldr	r3, [pc, #28]	@ (800120c <ADC3_IN4_DMA_init+0x10c>)
 80011f0:	4a09      	ldr	r2, [pc, #36]	@ (8001218 <ADC3_IN4_DMA_init+0x118>)
 80011f2:	60da      	str	r2, [r3, #12]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	20000008 	.word	0x20000008
 8001204:	40023800 	.word	0x40023800
 8001208:	40012200 	.word	0x40012200
 800120c:	40026428 	.word	0x40026428
 8001210:	40026400 	.word	0x40026400
 8001214:	4001224c 	.word	0x4001224c
 8001218:	20000168 	.word	0x20000168

0800121c <ADC3_IN4_DMA_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_IN4_DMA_start(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 8001220:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <ADC3_IN4_DMA_start+0x3c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0c      	ldr	r2, [pc, #48]	@ (8001258 <ADC3_IN4_DMA_start+0x3c>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 800122c:	2039      	movs	r0, #57	@ 0x39
 800122e:	f7ff fe3f 	bl	8000eb0 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 8001232:	2039      	movs	r0, #57	@ 0x39
 8001234:	f7ff fdfa 	bl	8000e2c <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <ADC3_IN4_DMA_start+0x40>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	4a07      	ldr	r2, [pc, #28]	@ (800125c <ADC3_IN4_DMA_start+0x40>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001244:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40026428 	.word	0x40026428
 800125c:	40012200 	.word	0x40012200

08001260 <ADC1_IN13_ADC2_IN5_dual_init>:
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input used with ADC1 is ADC123_IN13 = GPIO PC3
 * @n The input used with ADC2 is ADC12_IN5 = GPIO PA5
 *****************************************************************************/
void ADC1_IN13_ADC2_IN5_dual_init(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 8001266:	4b4a      	ldr	r3, [pc, #296]	@ (8001390 <ADC1_IN13_ADC2_IN5_dual_init+0x130>)
 8001268:	2202      	movs	r2, #2
 800126a:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC1_CLK_ENABLE();		// Enable Clock for ADC1
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	4b48      	ldr	r3, [pc, #288]	@ (8001394 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8001272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001274:	4a47      	ldr	r2, [pc, #284]	@ (8001394 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8001276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800127a:	6453      	str	r3, [r2, #68]	@ 0x44
 800127c:	4b45      	ldr	r3, [pc, #276]	@ (8001394 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 800127e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	4b41      	ldr	r3, [pc, #260]	@ (8001394 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 800128e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001290:	4a40      	ldr	r2, [pc, #256]	@ (8001394 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8001292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001296:	6453      	str	r3, [r2, #68]	@ 0x44
 8001298:	4b3e      	ldr	r3, [pc, #248]	@ (8001394 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 800129a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
	ADC->CCR |= ADC_CCR_DMA_1;			// Enable DMA mode 2 = dual DMA
 80012a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001398 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	4a3b      	ldr	r2, [pc, #236]	@ (8001398 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 80012aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012ae:	6053      	str	r3, [r2, #4]
	ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2 simultan.
 80012b0:	4b39      	ldr	r3, [pc, #228]	@ (8001398 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	4a38      	ldr	r2, [pc, #224]	@ (8001398 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 80012b6:	f043 0306 	orr.w	r3, r3, #6
 80012ba:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 80012bc:	4b37      	ldr	r3, [pc, #220]	@ (800139c <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	4a36      	ldr	r2, [pc, #216]	@ (800139c <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 80012c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 80012c8:	4b34      	ldr	r3, [pc, #208]	@ (800139c <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	4a33      	ldr	r2, [pc, #204]	@ (800139c <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 80012ce:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 80012d2:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 80012d4:	4b31      	ldr	r3, [pc, #196]	@ (800139c <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 80012d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012d8:	4a30      	ldr	r2, [pc, #192]	@ (800139c <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 80012da:	f043 030d 	orr.w	r3, r3, #13
 80012de:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->SQR3 |= (5UL << ADC_SQR3_SQ1_Pos);	// Input 5 = first conversion
 80012e0:	4b2f      	ldr	r3, [pc, #188]	@ (80013a0 <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 80012e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012e4:	4a2e      	ldr	r2, [pc, #184]	@ (80013a0 <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 80012e6:	f043 0305 	orr.w	r3, r3, #5
 80012ea:	6353      	str	r3, [r2, #52]	@ 0x34
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	4b28      	ldr	r3, [pc, #160]	@ (8001394 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f4:	4a27      	ldr	r2, [pc, #156]	@ (8001394 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 80012f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fc:	4b25      	ldr	r3, [pc, #148]	@ (8001394 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001300:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
	DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 4
 8001308:	4b26      	ldr	r3, [pc, #152]	@ (80013a4 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a25      	ldr	r2, [pc, #148]	@ (80013a4 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 800130e:	f023 0301 	bic.w	r3, r3, #1
 8001312:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001314:	bf00      	nop
 8001316:	4b23      	ldr	r3, [pc, #140]	@ (80013a4 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f9      	bne.n	8001316 <ADC1_IN13_ADC2_IN5_dual_init+0xb6>
	DMA2->HIFCR |= DMA_HIFCR_CTCIF4;	// Clear transfer complete interrupt fl.
 8001322:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	4a20      	ldr	r2, [pc, #128]	@ (80013a8 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001328:	f043 0320 	orr.w	r3, r3, #32
 800132c:	60d3      	str	r3, [r2, #12]
	DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);	// Select channel 0
 800132e:	4b1d      	ldr	r3, [pc, #116]	@ (80013a4 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001330:	4a1c      	ldr	r2, [pc, #112]	@ (80013a4 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PL_1;		// Priority high
 8001336:	4b1b      	ldr	r3, [pc, #108]	@ (80013a4 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a1a      	ldr	r2, [pc, #104]	@ (80013a4 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 800133c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001340:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8001342:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a17      	ldr	r2, [pc, #92]	@ (80013a4 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800134c:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 800134e:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a14      	ldr	r2, [pc, #80]	@ (80013a4 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001354:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001358:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 800135a:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a11      	ldr	r2, [pc, #68]	@ (80013a4 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001360:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001364:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8001366:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a0e      	ldr	r2, [pc, #56]	@ (80013a4 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->NDTR = ADC_NUMS;		// Number of data items to transfer
 8001372:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001374:	2280      	movs	r2, #128	@ 0x80
 8001376:	605a      	str	r2, [r3, #4]
	DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;	// Peripheral register address
 8001378:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 800137a:	4a0c      	ldr	r2, [pc, #48]	@ (80013ac <ADC1_IN13_ADC2_IN5_dual_init+0x14c>)
 800137c:	609a      	str	r2, [r3, #8]
	DMA2_Stream4->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 800137e:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001380:	4a0b      	ldr	r2, [pc, #44]	@ (80013b0 <ADC1_IN13_ADC2_IN5_dual_init+0x150>)
 8001382:	60da      	str	r2, [r3, #12]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	20000008 	.word	0x20000008
 8001394:	40023800 	.word	0x40023800
 8001398:	40012300 	.word	0x40012300
 800139c:	40012000 	.word	0x40012000
 80013a0:	40012100 	.word	0x40012100
 80013a4:	40026470 	.word	0x40026470
 80013a8:	40026400 	.word	0x40026400
 80013ac:	40012308 	.word	0x40012308
 80013b0:	20000168 	.word	0x20000168

080013b4 <ADC1_IN13_ADC2_IN5_dual_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC1_IN13_ADC2_IN5_dual_start(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	DMA2_Stream4->CR |= DMA_SxCR_EN;	// Enable DMA
 80013b8:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <ADC1_IN13_ADC2_IN5_dual_start+0x48>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0f      	ldr	r2, [pc, #60]	@ (80013fc <ADC1_IN13_ADC2_IN5_dual_start+0x48>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);	// Clear pending DMA interrupt
 80013c4:	203c      	movs	r0, #60	@ 0x3c
 80013c6:	f7ff fd73 	bl	8000eb0 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);	// Enable DMA interrupt in the NVIC
 80013ca:	203c      	movs	r0, #60	@ 0x3c
 80013cc:	f7ff fd2e 	bl	8000e2c <__NVIC_EnableIRQ>
	ADC1->CR2 |= ADC_CR2_ADON;			// Enable ADC1
 80013d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <ADC1_IN13_ADC2_IN5_dual_start+0x4c>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <ADC1_IN13_ADC2_IN5_dual_start+0x4c>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <ADC1_IN13_ADC2_IN5_dual_start+0x50>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	4a08      	ldr	r2, [pc, #32]	@ (8001404 <ADC1_IN13_ADC2_IN5_dual_start+0x50>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 80013e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40026470 	.word	0x40026470
 8001400:	40012000 	.word	0x40012000
 8001404:	40012100 	.word	0x40012100

08001408 <ADC2_IN13_IN5_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC12_IN5 = GPIO PA5
 *****************************************************************************/
void ADC2_IN13_IN5_scan_init(void)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 800140e:	4b48      	ldr	r3, [pc, #288]	@ (8001530 <ADC2_IN13_IN5_scan_init+0x128>)
 8001410:	2202      	movs	r2, #2
 8001412:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	4b46      	ldr	r3, [pc, #280]	@ (8001534 <ADC2_IN13_IN5_scan_init+0x12c>)
 800141a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141c:	4a45      	ldr	r2, [pc, #276]	@ (8001534 <ADC2_IN13_IN5_scan_init+0x12c>)
 800141e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001422:	6453      	str	r3, [r2, #68]	@ 0x44
 8001424:	4b43      	ldr	r3, [pc, #268]	@ (8001534 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001428:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
	ADC2->SQR1 |= (1UL << ADC_SQR1_L_Pos);			// Convert 2 inputs
 8001430:	4b41      	ldr	r3, [pc, #260]	@ (8001538 <ADC2_IN13_IN5_scan_init+0x130>)
 8001432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001434:	4a40      	ldr	r2, [pc, #256]	@ (8001538 <ADC2_IN13_IN5_scan_init+0x130>)
 8001436:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800143a:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC2->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 800143c:	4b3e      	ldr	r3, [pc, #248]	@ (8001538 <ADC2_IN13_IN5_scan_init+0x130>)
 800143e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001440:	4a3d      	ldr	r2, [pc, #244]	@ (8001538 <ADC2_IN13_IN5_scan_init+0x130>)
 8001442:	f043 030d 	orr.w	r3, r3, #13
 8001446:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->SQR3 |= (5UL << ADC_SQR3_SQ2_Pos);	// Input 5 = second conversion
 8001448:	4b3b      	ldr	r3, [pc, #236]	@ (8001538 <ADC2_IN13_IN5_scan_init+0x130>)
 800144a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800144c:	4a3a      	ldr	r2, [pc, #232]	@ (8001538 <ADC2_IN13_IN5_scan_init+0x130>)
 800144e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001452:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 8001454:	4b38      	ldr	r3, [pc, #224]	@ (8001538 <ADC2_IN13_IN5_scan_init+0x130>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4a37      	ldr	r2, [pc, #220]	@ (8001538 <ADC2_IN13_IN5_scan_init+0x130>)
 800145a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800145e:	6053      	str	r3, [r2, #4]
	ADC2->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001460:	4b35      	ldr	r3, [pc, #212]	@ (8001538 <ADC2_IN13_IN5_scan_init+0x130>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	4a34      	ldr	r2, [pc, #208]	@ (8001538 <ADC2_IN13_IN5_scan_init+0x130>)
 8001466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800146a:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 800146c:	4b32      	ldr	r3, [pc, #200]	@ (8001538 <ADC2_IN13_IN5_scan_init+0x130>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	4a31      	ldr	r2, [pc, #196]	@ (8001538 <ADC2_IN13_IN5_scan_init+0x130>)
 8001472:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8001476:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001478:	4b2f      	ldr	r3, [pc, #188]	@ (8001538 <ADC2_IN13_IN5_scan_init+0x130>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	4a2e      	ldr	r2, [pc, #184]	@ (8001538 <ADC2_IN13_IN5_scan_init+0x130>)
 800147e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001482:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001484:	2300      	movs	r3, #0
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	4b2a      	ldr	r3, [pc, #168]	@ (8001534 <ADC2_IN13_IN5_scan_init+0x12c>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148c:	4a29      	ldr	r2, [pc, #164]	@ (8001534 <ADC2_IN13_IN5_scan_init+0x12c>)
 800148e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001492:	6313      	str	r3, [r2, #48]	@ 0x30
 8001494:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001498:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 3
 80014a0:	4b26      	ldr	r3, [pc, #152]	@ (800153c <ADC2_IN13_IN5_scan_init+0x134>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a25      	ldr	r2, [pc, #148]	@ (800153c <ADC2_IN13_IN5_scan_init+0x134>)
 80014a6:	f023 0301 	bic.w	r3, r3, #1
 80014aa:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80014ac:	bf00      	nop
 80014ae:	4b23      	ldr	r3, [pc, #140]	@ (800153c <ADC2_IN13_IN5_scan_init+0x134>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f9      	bne.n	80014ae <ADC2_IN13_IN5_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF3;	// Clear transfer complete interrupt fl.
 80014ba:	4b21      	ldr	r3, [pc, #132]	@ (8001540 <ADC2_IN13_IN5_scan_init+0x138>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	4a20      	ldr	r2, [pc, #128]	@ (8001540 <ADC2_IN13_IN5_scan_init+0x138>)
 80014c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014c4:	6093      	str	r3, [r2, #8]
	DMA2_Stream3->CR |= (1UL << DMA_SxCR_CHSEL_Pos);	// Select channel 1
 80014c6:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <ADC2_IN13_IN5_scan_init+0x134>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a1c      	ldr	r2, [pc, #112]	@ (800153c <ADC2_IN13_IN5_scan_init+0x134>)
 80014cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014d0:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_PL_1;		// Priority high
 80014d2:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <ADC2_IN13_IN5_scan_init+0x134>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a19      	ldr	r2, [pc, #100]	@ (800153c <ADC2_IN13_IN5_scan_init+0x134>)
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014dc:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 80014de:	4b17      	ldr	r3, [pc, #92]	@ (800153c <ADC2_IN13_IN5_scan_init+0x134>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a16      	ldr	r2, [pc, #88]	@ (800153c <ADC2_IN13_IN5_scan_init+0x134>)
 80014e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e8:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 80014ea:	4b14      	ldr	r3, [pc, #80]	@ (800153c <ADC2_IN13_IN5_scan_init+0x134>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a13      	ldr	r2, [pc, #76]	@ (800153c <ADC2_IN13_IN5_scan_init+0x134>)
 80014f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014f4:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 80014f6:	4b11      	ldr	r3, [pc, #68]	@ (800153c <ADC2_IN13_IN5_scan_init+0x134>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a10      	ldr	r2, [pc, #64]	@ (800153c <ADC2_IN13_IN5_scan_init+0x134>)
 80014fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001500:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <ADC2_IN13_IN5_scan_init+0x134>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a0d      	ldr	r2, [pc, #52]	@ (800153c <ADC2_IN13_IN5_scan_init+0x134>)
 8001508:	f043 0310 	orr.w	r3, r3, #16
 800150c:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 800150e:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <ADC2_IN13_IN5_scan_init+0x134>)
 8001510:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001514:	605a      	str	r2, [r3, #4]
	DMA2_Stream3->PAR = (uint32_t)&ADC2->DR;	// Peripheral register address
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <ADC2_IN13_IN5_scan_init+0x134>)
 8001518:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <ADC2_IN13_IN5_scan_init+0x13c>)
 800151a:	609a      	str	r2, [r3, #8]
	DMA2_Stream3->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 800151c:	4b07      	ldr	r3, [pc, #28]	@ (800153c <ADC2_IN13_IN5_scan_init+0x134>)
 800151e:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <ADC2_IN13_IN5_scan_init+0x140>)
 8001520:	60da      	str	r2, [r3, #12]
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000008 	.word	0x20000008
 8001534:	40023800 	.word	0x40023800
 8001538:	40012100 	.word	0x40012100
 800153c:	40026458 	.word	0x40026458
 8001540:	40026400 	.word	0x40026400
 8001544:	4001214c 	.word	0x4001214c
 8001548:	20000168 	.word	0x20000168

0800154c <ADC2_IN13_IN5_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC2_IN13_IN5_scan_start(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	DMA2_Stream3->CR |= DMA_SxCR_EN;	// Enable DMA
 8001550:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <ADC2_IN13_IN5_scan_start+0x3c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0c      	ldr	r2, [pc, #48]	@ (8001588 <ADC2_IN13_IN5_scan_start+0x3c>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);	// Clear pending DMA interrupt
 800155c:	203b      	movs	r0, #59	@ 0x3b
 800155e:	f7ff fca7 	bl	8000eb0 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream3_IRQn);	// Enable DMA interrupt in the NVIC
 8001562:	203b      	movs	r0, #59	@ 0x3b
 8001564:	f7ff fc62 	bl	8000e2c <__NVIC_EnableIRQ>
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 8001568:	4b08      	ldr	r3, [pc, #32]	@ (800158c <ADC2_IN13_IN5_scan_start+0x40>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	4a07      	ldr	r2, [pc, #28]	@ (800158c <ADC2_IN13_IN5_scan_start+0x40>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001574:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40026458 	.word	0x40026458
 800158c:	40012100 	.word	0x40012100

08001590 <ADC3_IN13_IN4_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN13_IN4_scan_init(void)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 8001596:	4b48      	ldr	r3, [pc, #288]	@ (80016b8 <ADC3_IN13_IN4_scan_init+0x128>)
 8001598:	2202      	movs	r2, #2
 800159a:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	4b46      	ldr	r3, [pc, #280]	@ (80016bc <ADC3_IN13_IN4_scan_init+0x12c>)
 80015a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a4:	4a45      	ldr	r2, [pc, #276]	@ (80016bc <ADC3_IN13_IN4_scan_init+0x12c>)
 80015a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ac:	4b43      	ldr	r3, [pc, #268]	@ (80016bc <ADC3_IN13_IN4_scan_init+0x12c>)
 80015ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR1 |= (1UL << ADC_SQR1_L_Pos);		// Convert 2 inputs
 80015b8:	4b41      	ldr	r3, [pc, #260]	@ (80016c0 <ADC3_IN13_IN4_scan_init+0x130>)
 80015ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015bc:	4a40      	ldr	r2, [pc, #256]	@ (80016c0 <ADC3_IN13_IN4_scan_init+0x130>)
 80015be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80015c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC3->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 80015c4:	4b3e      	ldr	r3, [pc, #248]	@ (80016c0 <ADC3_IN13_IN4_scan_init+0x130>)
 80015c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015c8:	4a3d      	ldr	r2, [pc, #244]	@ (80016c0 <ADC3_IN13_IN4_scan_init+0x130>)
 80015ca:	f043 030d 	orr.w	r3, r3, #13
 80015ce:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ2_Pos);	// Input 4 = second conversion
 80015d0:	4b3b      	ldr	r3, [pc, #236]	@ (80016c0 <ADC3_IN13_IN4_scan_init+0x130>)
 80015d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015d4:	4a3a      	ldr	r2, [pc, #232]	@ (80016c0 <ADC3_IN13_IN4_scan_init+0x130>)
 80015d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015da:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 80015dc:	4b38      	ldr	r3, [pc, #224]	@ (80016c0 <ADC3_IN13_IN4_scan_init+0x130>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	4a37      	ldr	r2, [pc, #220]	@ (80016c0 <ADC3_IN13_IN4_scan_init+0x130>)
 80015e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e6:	6053      	str	r3, [r2, #4]
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 80015e8:	4b35      	ldr	r3, [pc, #212]	@ (80016c0 <ADC3_IN13_IN4_scan_init+0x130>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	4a34      	ldr	r2, [pc, #208]	@ (80016c0 <ADC3_IN13_IN4_scan_init+0x130>)
 80015ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f2:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 80015f4:	4b32      	ldr	r3, [pc, #200]	@ (80016c0 <ADC3_IN13_IN4_scan_init+0x130>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a31      	ldr	r2, [pc, #196]	@ (80016c0 <ADC3_IN13_IN4_scan_init+0x130>)
 80015fa:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 80015fe:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001600:	4b2f      	ldr	r3, [pc, #188]	@ (80016c0 <ADC3_IN13_IN4_scan_init+0x130>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	4a2e      	ldr	r2, [pc, #184]	@ (80016c0 <ADC3_IN13_IN4_scan_init+0x130>)
 8001606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800160a:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 800160c:	2300      	movs	r3, #0
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	4b2a      	ldr	r3, [pc, #168]	@ (80016bc <ADC3_IN13_IN4_scan_init+0x12c>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001614:	4a29      	ldr	r2, [pc, #164]	@ (80016bc <ADC3_IN13_IN4_scan_init+0x12c>)
 8001616:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800161a:	6313      	str	r3, [r2, #48]	@ 0x30
 800161c:	4b27      	ldr	r3, [pc, #156]	@ (80016bc <ADC3_IN13_IN4_scan_init+0x12c>)
 800161e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001620:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 8001628:	4b26      	ldr	r3, [pc, #152]	@ (80016c4 <ADC3_IN13_IN4_scan_init+0x134>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a25      	ldr	r2, [pc, #148]	@ (80016c4 <ADC3_IN13_IN4_scan_init+0x134>)
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001634:	bf00      	nop
 8001636:	4b23      	ldr	r3, [pc, #140]	@ (80016c4 <ADC3_IN13_IN4_scan_init+0x134>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f9      	bne.n	8001636 <ADC3_IN13_IN4_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 8001642:	4b21      	ldr	r3, [pc, #132]	@ (80016c8 <ADC3_IN13_IN4_scan_init+0x138>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	4a20      	ldr	r2, [pc, #128]	@ (80016c8 <ADC3_IN13_IN4_scan_init+0x138>)
 8001648:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800164c:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 800164e:	4b1d      	ldr	r3, [pc, #116]	@ (80016c4 <ADC3_IN13_IN4_scan_init+0x134>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a1c      	ldr	r2, [pc, #112]	@ (80016c4 <ADC3_IN13_IN4_scan_init+0x134>)
 8001654:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001658:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 800165a:	4b1a      	ldr	r3, [pc, #104]	@ (80016c4 <ADC3_IN13_IN4_scan_init+0x134>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a19      	ldr	r2, [pc, #100]	@ (80016c4 <ADC3_IN13_IN4_scan_init+0x134>)
 8001660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001664:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8001666:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <ADC3_IN13_IN4_scan_init+0x134>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a16      	ldr	r2, [pc, #88]	@ (80016c4 <ADC3_IN13_IN4_scan_init+0x134>)
 800166c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001670:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001672:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <ADC3_IN13_IN4_scan_init+0x134>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a13      	ldr	r2, [pc, #76]	@ (80016c4 <ADC3_IN13_IN4_scan_init+0x134>)
 8001678:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800167c:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 800167e:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <ADC3_IN13_IN4_scan_init+0x134>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a10      	ldr	r2, [pc, #64]	@ (80016c4 <ADC3_IN13_IN4_scan_init+0x134>)
 8001684:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001688:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <ADC3_IN13_IN4_scan_init+0x134>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a0d      	ldr	r2, [pc, #52]	@ (80016c4 <ADC3_IN13_IN4_scan_init+0x134>)
 8001690:	f043 0310 	orr.w	r3, r3, #16
 8001694:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 8001696:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <ADC3_IN13_IN4_scan_init+0x134>)
 8001698:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800169c:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 800169e:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <ADC3_IN13_IN4_scan_init+0x134>)
 80016a0:	4a0a      	ldr	r2, [pc, #40]	@ (80016cc <ADC3_IN13_IN4_scan_init+0x13c>)
 80016a2:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 80016a4:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <ADC3_IN13_IN4_scan_init+0x134>)
 80016a6:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <ADC3_IN13_IN4_scan_init+0x140>)
 80016a8:	60da      	str	r2, [r3, #12]

}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000008 	.word	0x20000008
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40012200 	.word	0x40012200
 80016c4:	40026428 	.word	0x40026428
 80016c8:	40026400 	.word	0x40026400
 80016cc:	4001224c 	.word	0x4001224c
 80016d0:	20000168 	.word	0x20000168

080016d4 <ADC3_IN13_IN4_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_IN13_IN4_scan_start(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 80016d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <ADC3_IN13_IN4_scan_start+0x3c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001710 <ADC3_IN13_IN4_scan_start+0x3c>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 80016e4:	2039      	movs	r0, #57	@ 0x39
 80016e6:	f7ff fbe3 	bl	8000eb0 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 80016ea:	2039      	movs	r0, #57	@ 0x39
 80016ec:	f7ff fb9e 	bl	8000e2c <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 80016f0:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <ADC3_IN13_IN4_scan_start+0x40>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	4a07      	ldr	r2, [pc, #28]	@ (8001714 <ADC3_IN13_IN4_scan_start+0x40>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 80016fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40026428 	.word	0x40026428
 8001714:	40012200 	.word	0x40012200

08001718 <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 800171c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	6113      	str	r3, [r2, #16]
	if (DAC_active) {
 800172c:	4b03      	ldr	r3, [pc, #12]	@ (800173c <TIM2_IRQHandler+0x24>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <TIM2_IRQHandler+0x20>
		DAC_increment();
 8001734:	f7ff fc74 	bl	8001020 <DAC_increment>
	}
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000161 	.word	0x20000161

08001740 <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 8001744:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <ADC_IRQHandler+0x58>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d020      	beq.n	8001792 <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 8001750:	4911      	ldr	r1, [pc, #68]	@ (8001798 <ADC_IRQHandler+0x58>)
 8001752:	4b12      	ldr	r3, [pc, #72]	@ (800179c <ADC_IRQHandler+0x5c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	4810      	ldr	r0, [pc, #64]	@ (800179c <ADC_IRQHandler+0x5c>)
 800175a:	6002      	str	r2, [r0, #0]
 800175c:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 800175e:	4910      	ldr	r1, [pc, #64]	@ (80017a0 <ADC_IRQHandler+0x60>)
 8001760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 8001764:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <ADC_IRQHandler+0x5c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b7f      	cmp	r3, #127	@ 0x7f
 800176a:	d912      	bls.n	8001792 <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 800176c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001776:	f023 0301 	bic.w	r3, r3, #1
 800177a:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <ADC_IRQHandler+0x58>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a05      	ldr	r2, [pc, #20]	@ (8001798 <ADC_IRQHandler+0x58>)
 8001782:	f023 0301 	bic.w	r3, r3, #1
 8001786:	6093      	str	r3, [r2, #8]
			ADC_reset();
 8001788:	f7ff fc66 	bl	8001058 <ADC_reset>
			MEAS_data_ready = true;
 800178c:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <ADC_IRQHandler+0x64>)
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40012200 	.word	0x40012200
 800179c:	20000164 	.word	0x20000164
 80017a0:	20000168 	.word	0x20000168
 80017a4:	20000160 	.word	0x20000160

080017a8 <DMA2_Stream1_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF1) {	// Stream1 transfer compl. interrupt f.
 80017ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001820 <DMA2_Stream1_IRQHandler+0x78>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d031      	beq.n	800181c <DMA2_Stream1_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream1_IRQn);	// Disable DMA interrupt in the NVIC
 80017b8:	2039      	movs	r0, #57	@ 0x39
 80017ba:	f7ff fb55 	bl	8000e68 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);// Clear pending DMA interrupt
 80017be:	2039      	movs	r0, #57	@ 0x39
 80017c0:	f7ff fb76 	bl	8000eb0 <__NVIC_ClearPendingIRQ>
		DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 80017c4:	4b17      	ldr	r3, [pc, #92]	@ (8001824 <DMA2_Stream1_IRQHandler+0x7c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a16      	ldr	r2, [pc, #88]	@ (8001824 <DMA2_Stream1_IRQHandler+0x7c>)
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80017d0:	bf00      	nop
 80017d2:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <DMA2_Stream1_IRQHandler+0x7c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f9      	bne.n	80017d2 <DMA2_Stream1_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF1;// Clear transfer complete interrupt fl.
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <DMA2_Stream1_IRQHandler+0x78>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001820 <DMA2_Stream1_IRQHandler+0x78>)
 80017e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017e8:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 80017ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017f4:	f023 0301 	bic.w	r3, r3, #1
 80017f8:	6013      	str	r3, [r2, #0]
		ADC3->CR2 &= ~ADC_CR2_ADON;		// Disable ADC3
 80017fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <DMA2_Stream1_IRQHandler+0x80>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <DMA2_Stream1_IRQHandler+0x80>)
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	6093      	str	r3, [r2, #8]
		ADC3->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 8001806:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <DMA2_Stream1_IRQHandler+0x80>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	4a07      	ldr	r2, [pc, #28]	@ (8001828 <DMA2_Stream1_IRQHandler+0x80>)
 800180c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001810:	6093      	str	r3, [r2, #8]
		ADC_reset();
 8001812:	f7ff fc21 	bl	8001058 <ADC_reset>
		MEAS_data_ready = true;
 8001816:	4b05      	ldr	r3, [pc, #20]	@ (800182c <DMA2_Stream1_IRQHandler+0x84>)
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]
	}
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40026400 	.word	0x40026400
 8001824:	40026428 	.word	0x40026428
 8001828:	40012200 	.word	0x40012200
 800182c:	20000160 	.word	0x20000160

08001830 <DMA2_Stream3_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream3_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF3) {	// Stream3 transfer compl. interrupt f.
 8001834:	4b1c      	ldr	r3, [pc, #112]	@ (80018a8 <DMA2_Stream3_IRQHandler+0x78>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d031      	beq.n	80018a4 <DMA2_Stream3_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream3_IRQn);	// Disable DMA interrupt in the NVIC
 8001840:	203b      	movs	r0, #59	@ 0x3b
 8001842:	f7ff fb11 	bl	8000e68 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);// Clear pending DMA interrupt
 8001846:	203b      	movs	r0, #59	@ 0x3b
 8001848:	f7ff fb32 	bl	8000eb0 <__NVIC_ClearPendingIRQ>
		DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 800184c:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <DMA2_Stream3_IRQHandler+0x7c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a16      	ldr	r2, [pc, #88]	@ (80018ac <DMA2_Stream3_IRQHandler+0x7c>)
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001858:	bf00      	nop
 800185a:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <DMA2_Stream3_IRQHandler+0x7c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f9      	bne.n	800185a <DMA2_Stream3_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF3;// Clear transfer complete interrupt fl.
 8001866:	4b10      	ldr	r3, [pc, #64]	@ (80018a8 <DMA2_Stream3_IRQHandler+0x78>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	4a0f      	ldr	r2, [pc, #60]	@ (80018a8 <DMA2_Stream3_IRQHandler+0x78>)
 800186c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001870:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001872:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	6013      	str	r3, [r2, #0]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 8001882:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <DMA2_Stream3_IRQHandler+0x80>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	4a0a      	ldr	r2, [pc, #40]	@ (80018b0 <DMA2_Stream3_IRQHandler+0x80>)
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 800188e:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <DMA2_Stream3_IRQHandler+0x80>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	4a07      	ldr	r2, [pc, #28]	@ (80018b0 <DMA2_Stream3_IRQHandler+0x80>)
 8001894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001898:	6093      	str	r3, [r2, #8]
		ADC_reset();
 800189a:	f7ff fbdd 	bl	8001058 <ADC_reset>
		MEAS_data_ready = true;
 800189e:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <DMA2_Stream3_IRQHandler+0x84>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
	}
}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40026400 	.word	0x40026400
 80018ac:	40026458 	.word	0x40026458
 80018b0:	40012100 	.word	0x40012100
 80018b4:	20000160 	.word	0x20000160

080018b8 <DMA2_Stream4_IRQHandler>:
 * @note In dual ADC mode two values are combined (packed) in a single uint32_t
 * ADC_CDR[31:0] = ADC2_DR[15:0] | ADC1_DR[15:0]
 * and are therefore extracted before further processing.
 *****************************************************************************/
void DMA2_Stream4_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
	if (DMA2->HISR & DMA_HISR_TCIF4) {	// Stream4 transfer compl. interrupt f.
 80018be:	4b30      	ldr	r3, [pc, #192]	@ (8001980 <DMA2_Stream4_IRQHandler+0xc8>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0320 	and.w	r3, r3, #32
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d055      	beq.n	8001976 <DMA2_Stream4_IRQHandler+0xbe>
		NVIC_DisableIRQ(DMA2_Stream4_IRQn);	// Disable DMA interrupt in the NVIC
 80018ca:	203c      	movs	r0, #60	@ 0x3c
 80018cc:	f7ff facc 	bl	8000e68 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);// Clear pending DMA interrupt
 80018d0:	203c      	movs	r0, #60	@ 0x3c
 80018d2:	f7ff faed 	bl	8000eb0 <__NVIC_ClearPendingIRQ>
		DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 80018d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001984 <DMA2_Stream4_IRQHandler+0xcc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a2a      	ldr	r2, [pc, #168]	@ (8001984 <DMA2_Stream4_IRQHandler+0xcc>)
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80018e2:	bf00      	nop
 80018e4:	4b27      	ldr	r3, [pc, #156]	@ (8001984 <DMA2_Stream4_IRQHandler+0xcc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f9      	bne.n	80018e4 <DMA2_Stream4_IRQHandler+0x2c>
		DMA2->HIFCR |= DMA_HIFCR_CTCIF4;// Clear transfer complete interrupt fl.
 80018f0:	4b23      	ldr	r3, [pc, #140]	@ (8001980 <DMA2_Stream4_IRQHandler+0xc8>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4a22      	ldr	r2, [pc, #136]	@ (8001980 <DMA2_Stream4_IRQHandler+0xc8>)
 80018f6:	f043 0320 	orr.w	r3, r3, #32
 80018fa:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 80018fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	6013      	str	r3, [r2, #0]
		ADC1->CR2 &= ~ADC_CR2_ADON;		// Disable ADC1
 800190c:	4b1e      	ldr	r3, [pc, #120]	@ (8001988 <DMA2_Stream4_IRQHandler+0xd0>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	4a1d      	ldr	r2, [pc, #116]	@ (8001988 <DMA2_Stream4_IRQHandler+0xd0>)
 8001912:	f023 0301 	bic.w	r3, r3, #1
 8001916:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 8001918:	4b1c      	ldr	r3, [pc, #112]	@ (800198c <DMA2_Stream4_IRQHandler+0xd4>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4a1b      	ldr	r2, [pc, #108]	@ (800198c <DMA2_Stream4_IRQHandler+0xd4>)
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	6093      	str	r3, [r2, #8]
		ADC->CCR &= ~ADC_CCR_DMA_1;		// Disable DMA mode
 8001924:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <DMA2_Stream4_IRQHandler+0xd8>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	4a19      	ldr	r2, [pc, #100]	@ (8001990 <DMA2_Stream4_IRQHandler+0xd8>)
 800192a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800192e:	6053      	str	r3, [r2, #4]
		/* Extract combined samples */
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 8001930:	237f      	movs	r3, #127	@ 0x7f
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	e017      	b.n	8001966 <DMA2_Stream4_IRQHandler+0xae>
			ADC_samples[2*i+1] = (ADC_samples[i] >> 16);
 8001936:	4a17      	ldr	r2, [pc, #92]	@ (8001994 <DMA2_Stream4_IRQHandler+0xdc>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	3301      	adds	r3, #1
 8001944:	0c12      	lsrs	r2, r2, #16
 8001946:	4913      	ldr	r1, [pc, #76]	@ (8001994 <DMA2_Stream4_IRQHandler+0xdc>)
 8001948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_samples[2*i]   = (ADC_samples[i] & 0xffff);
 800194c:	4a11      	ldr	r2, [pc, #68]	@ (8001994 <DMA2_Stream4_IRQHandler+0xdc>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	b292      	uxth	r2, r2
 800195a:	490e      	ldr	r1, [pc, #56]	@ (8001994 <DMA2_Stream4_IRQHandler+0xdc>)
 800195c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	dae4      	bge.n	8001936 <DMA2_Stream4_IRQHandler+0x7e>
		}
		ADC_reset();
 800196c:	f7ff fb74 	bl	8001058 <ADC_reset>
		MEAS_data_ready = true;
 8001970:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <DMA2_Stream4_IRQHandler+0xe0>)
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
	}
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40026400 	.word	0x40026400
 8001984:	40026470 	.word	0x40026470
 8001988:	40012000 	.word	0x40012000
 800198c:	40012100 	.word	0x40012100
 8001990:	40012300 	.word	0x40012300
 8001994:	20000168 	.word	0x20000168
 8001998:	20000160 	.word	0x20000160

0800199c <ADC1_IN11_ADC2_IN13_dual_init>:
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
}


void ADC1_IN11_ADC2_IN13_dual_init(void)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0

    MEAS_input_count = 2;                // 2 inputs are converted
 80019a2:	4b4a      	ldr	r3, [pc, #296]	@ (8001acc <ADC1_IN11_ADC2_IN13_dual_init+0x130>)
 80019a4:	2202      	movs	r2, #2
 80019a6:	601a      	str	r2, [r3, #0]
    __HAL_RCC_ADC1_CLK_ENABLE();        // Enable Clock for ADC1
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	4b48      	ldr	r3, [pc, #288]	@ (8001ad0 <ADC1_IN11_ADC2_IN13_dual_init+0x134>)
 80019ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b0:	4a47      	ldr	r2, [pc, #284]	@ (8001ad0 <ADC1_IN11_ADC2_IN13_dual_init+0x134>)
 80019b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b8:	4b45      	ldr	r3, [pc, #276]	@ (8001ad0 <ADC1_IN11_ADC2_IN13_dual_init+0x134>)
 80019ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_ADC2_CLK_ENABLE();        // Enable Clock for ADC2
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	4b41      	ldr	r3, [pc, #260]	@ (8001ad0 <ADC1_IN11_ADC2_IN13_dual_init+0x134>)
 80019ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019cc:	4a40      	ldr	r2, [pc, #256]	@ (8001ad0 <ADC1_IN11_ADC2_IN13_dual_init+0x134>)
 80019ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80019d4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad0 <ADC1_IN11_ADC2_IN13_dual_init+0x134>)
 80019d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]

    // Common ADC configuration
    ADC->CCR |= ADC_CCR_DMA_1;            // Enable DMA mode 2 = dual DMA
 80019e0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ad4 <ADC1_IN11_ADC2_IN13_dual_init+0x138>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	4a3b      	ldr	r2, [pc, #236]	@ (8001ad4 <ADC1_IN11_ADC2_IN13_dual_init+0x138>)
 80019e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019ea:	6053      	str	r3, [r2, #4]
    ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2 simultaneous
 80019ec:	4b39      	ldr	r3, [pc, #228]	@ (8001ad4 <ADC1_IN11_ADC2_IN13_dual_init+0x138>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4a38      	ldr	r2, [pc, #224]	@ (8001ad4 <ADC1_IN11_ADC2_IN13_dual_init+0x138>)
 80019f2:	f043 0306 	orr.w	r3, r3, #6
 80019f6:	6053      	str	r3, [r2, #4]

    // ADC1 configuration
    ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);    // Enable external trigger on rising edge
 80019f8:	4b37      	ldr	r3, [pc, #220]	@ (8001ad8 <ADC1_IN11_ADC2_IN13_dual_init+0x13c>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a36      	ldr	r2, [pc, #216]	@ (8001ad8 <ADC1_IN11_ADC2_IN13_dual_init+0x13c>)
 80019fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);   // Timer 2 TRGO event
 8001a04:	4b34      	ldr	r3, [pc, #208]	@ (8001ad8 <ADC1_IN11_ADC2_IN13_dual_init+0x13c>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	4a33      	ldr	r2, [pc, #204]	@ (8001ad8 <ADC1_IN11_ADC2_IN13_dual_init+0x13c>)
 8001a0a:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8001a0e:	6093      	str	r3, [r2, #8]
    ADC1->SQR3 |= (14UL << ADC_SQR3_SQ1_Pos);   // Input 14 = first conversion (changed from 13)
 8001a10:	4b31      	ldr	r3, [pc, #196]	@ (8001ad8 <ADC1_IN11_ADC2_IN13_dual_init+0x13c>)
 8001a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a14:	4a30      	ldr	r2, [pc, #192]	@ (8001ad8 <ADC1_IN11_ADC2_IN13_dual_init+0x13c>)
 8001a16:	f043 030e 	orr.w	r3, r3, #14
 8001a1a:	6353      	str	r3, [r2, #52]	@ 0x34

    // ADC2 configuration
    ADC2->SQR3 |= (15UL << ADC_SQR3_SQ1_Pos);   // Input 15 = first conversion (changed from 5)
 8001a1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001adc <ADC1_IN11_ADC2_IN13_dual_init+0x140>)
 8001a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a20:	4a2e      	ldr	r2, [pc, #184]	@ (8001adc <ADC1_IN11_ADC2_IN13_dual_init+0x140>)
 8001a22:	f043 030f 	orr.w	r3, r3, #15
 8001a26:	6353      	str	r3, [r2, #52]	@ 0x34

    // DMA configuration
    __HAL_RCC_DMA2_CLK_ENABLE();        // Enable Clock for DMA2
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	4b28      	ldr	r3, [pc, #160]	@ (8001ad0 <ADC1_IN11_ADC2_IN13_dual_init+0x134>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a30:	4a27      	ldr	r2, [pc, #156]	@ (8001ad0 <ADC1_IN11_ADC2_IN13_dual_init+0x134>)
 8001a32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a38:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <ADC1_IN11_ADC2_IN13_dual_init+0x134>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
    DMA2_Stream4->CR &= ~DMA_SxCR_EN;    // Disable the DMA stream 4
 8001a44:	4b26      	ldr	r3, [pc, #152]	@ (8001ae0 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a25      	ldr	r2, [pc, #148]	@ (8001ae0 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }    // Wait for DMA to finish
 8001a50:	bf00      	nop
 8001a52:	4b23      	ldr	r3, [pc, #140]	@ (8001ae0 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f9      	bne.n	8001a52 <ADC1_IN11_ADC2_IN13_dual_init+0xb6>

    DMA2->HIFCR |= DMA_HIFCR_CTCIF4;    // Clear transfer complete interrupt flag
 8001a5e:	4b21      	ldr	r3, [pc, #132]	@ (8001ae4 <ADC1_IN11_ADC2_IN13_dual_init+0x148>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	4a20      	ldr	r2, [pc, #128]	@ (8001ae4 <ADC1_IN11_ADC2_IN13_dual_init+0x148>)
 8001a64:	f043 0320 	orr.w	r3, r3, #32
 8001a68:	60d3      	str	r3, [r2, #12]
    DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);    // Select channel 0
 8001a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae0 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae0 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_PL_1;        // Priority high
 8001a72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae0 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae0 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a7c:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;    // Memory data size = 32 bit
 8001a7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ae0 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a17      	ldr	r2, [pc, #92]	@ (8001ae0 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a88:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;    // Peripheral data size = 32 bit
 8001a8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a14      	ldr	r2, [pc, #80]	@ (8001ae0 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a94:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_MINC;        // Increment memory address pointer
 8001a96:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a11      	ldr	r2, [pc, #68]	@ (8001ae0 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001a9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001aa0:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_TCIE;        // Transfer complete interrupt enable
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae0 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001aa8:	f043 0310 	orr.w	r3, r3, #16
 8001aac:	6013      	str	r3, [r2, #0]

    DMA2_Stream4->NDTR = ADC_NUMS;        // Number of data items to transfer
 8001aae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001ab0:	2280      	movs	r2, #128	@ 0x80
 8001ab2:	605a      	str	r2, [r3, #4]
    DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;    // Peripheral register address
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae8 <ADC1_IN11_ADC2_IN13_dual_init+0x14c>)
 8001ab8:	609a      	str	r2, [r3, #8]
    DMA2_Stream4->M0AR = (uint32_t)ADC_samples;    // Buffer memory location address
 8001aba:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <ADC1_IN11_ADC2_IN13_dual_init+0x144>)
 8001abc:	4a0b      	ldr	r2, [pc, #44]	@ (8001aec <ADC1_IN11_ADC2_IN13_dual_init+0x150>)
 8001abe:	60da      	str	r2, [r3, #12]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	20000008 	.word	0x20000008
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40012300 	.word	0x40012300
 8001ad8:	40012000 	.word	0x40012000
 8001adc:	40012100 	.word	0x40012100
 8001ae0:	40026470 	.word	0x40026470
 8001ae4:	40026400 	.word	0x40026400
 8001ae8:	40012308 	.word	0x40012308
 8001aec:	20000168 	.word	0x20000168

08001af0 <ADC1_IN11_ADC2_IN13_dual_start>:



void ADC1_IN11_ADC2_IN13_dual_start(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
    DMA2_Stream4->CR |= DMA_SxCR_EN;          // DMA-Stream aktivieren
 8001af4:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <ADC1_IN11_ADC2_IN13_dual_start+0x48>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0f      	ldr	r2, [pc, #60]	@ (8001b38 <ADC1_IN11_ADC2_IN13_dual_start+0x48>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6013      	str	r3, [r2, #0]
    NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);  // Ausstehende DMA-Interrupts löschen
 8001b00:	203c      	movs	r0, #60	@ 0x3c
 8001b02:	f7ff f9d5 	bl	8000eb0 <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(DMA2_Stream4_IRQn);        // DMA-Interrupt im NVIC aktivieren
 8001b06:	203c      	movs	r0, #60	@ 0x3c
 8001b08:	f7ff f990 	bl	8000e2c <__NVIC_EnableIRQ>

    ADC1->CR2 |= ADC_CR2_ADON;                // ADC1 einschalten
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <ADC1_IN11_ADC2_IN13_dual_start+0x4c>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <ADC1_IN11_ADC2_IN13_dual_start+0x4c>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6093      	str	r3, [r2, #8]
    ADC2->CR2 |= ADC_CR2_ADON;                // ADC2 einschalten
 8001b18:	4b09      	ldr	r3, [pc, #36]	@ (8001b40 <ADC1_IN11_ADC2_IN13_dual_start+0x50>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a08      	ldr	r2, [pc, #32]	@ (8001b40 <ADC1_IN11_ADC2_IN13_dual_start+0x50>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6093      	str	r3, [r2, #8]

    TIM2->CR1 |= TIM_CR1_CEN;                 // Timer starten
 8001b24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6013      	str	r3, [r2, #0]
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40026470 	.word	0x40026470
 8001b3c:	40012000 	.word	0x40012000
 8001b40:	40012100 	.word	0x40012100

08001b44 <fft>:

uint32_t fft(void)
{
 8001b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b48:	b09b      	sub	sp, #108	@ 0x6c
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	466b      	mov	r3, sp
 8001b4e:	607b      	str	r3, [r7, #4]
	uint32_t fftSize = ADC_NUMS;
 8001b50:	2380      	movs	r3, #128	@ 0x80
 8001b52:	657b      	str	r3, [r7, #84]	@ 0x54

	float32_t in[2*fftSize];
 8001b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b56:	005e      	lsls	r6, r3, #1
 8001b58:	4633      	mov	r3, r6
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8001b5e:	2300      	movs	r3, #0
 8001b60:	46b2      	mov	sl, r6
 8001b62:	469b      	mov	fp, r3
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001b70:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001b74:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001b78:	2300      	movs	r3, #0
 8001b7a:	46b0      	mov	r8, r6
 8001b7c:	4699      	mov	r9, r3
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001b8a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001b8e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001b92:	00b3      	lsls	r3, r6, #2
 8001b94:	3307      	adds	r3, #7
 8001b96:	08db      	lsrs	r3, r3, #3
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	ebad 0d03 	sub.w	sp, sp, r3
 8001b9e:	466b      	mov	r3, sp
 8001ba0:	3303      	adds	r3, #3
 8001ba2:	089b      	lsrs	r3, r3, #2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	float32_t out[fftSize];
 8001ba8:	6d7e      	ldr	r6, [r7, #84]	@ 0x54
 8001baa:	4633      	mov	r3, r6
 8001bac:	3b01      	subs	r3, #1
 8001bae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4634      	mov	r4, r6
 8001bb4:	461d      	mov	r5, r3
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	016b      	lsls	r3, r5, #5
 8001bc0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001bc4:	0162      	lsls	r2, r4, #5
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	4630      	mov	r0, r6
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	014b      	lsls	r3, r1, #5
 8001bd6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bda:	0142      	lsls	r2, r0, #5
 8001bdc:	00b3      	lsls	r3, r6, #2
 8001bde:	3307      	adds	r3, #7
 8001be0:	08db      	lsrs	r3, r3, #3
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	ebad 0d03 	sub.w	sp, sp, r3
 8001be8:	466b      	mov	r3, sp
 8001bea:	3303      	adds	r3, #3
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	647b      	str	r3, [r7, #68]	@ 0x44
	float32_t avg = 0;
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	667b      	str	r3, [r7, #100]	@ 0x64

	for (uint32_t i = 0; i < ADC_NUMS*2; i++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	663b      	str	r3, [r7, #96]	@ 0x60
 8001bfc:	e010      	b.n	8001c20 <fft+0xdc>
	{
		//Q_in[i] = (float32_t) ADC_samples[2*i];
		//I_in[i] = (float32_t) ADC_samples[2*i+1];

		avg += ADC_samples[i];
 8001bfe:	4a65      	ldr	r2, [pc, #404]	@ (8001d94 <fft+0x250>)
 8001c00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c0e:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c16:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	for (uint32_t i = 0; i < ADC_NUMS*2; i++)
 8001c1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c22:	2bff      	cmp	r3, #255	@ 0xff
 8001c24:	d9eb      	bls.n	8001bfe <fft+0xba>
	}
	avg /= (ADC_NUMS*2);
 8001c26:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001c2a:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001d98 <fft+0x254>
 8001c2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c32:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	for (uint32_t i = 0; i < ADC_NUMS*2; i++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c3a:	e01f      	b.n	8001c7c <fft+0x138>
	{
		if(i >=  ADC_NUMS*2)
 8001c3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c3e:	2bff      	cmp	r3, #255	@ 0xff
 8001c40:	d907      	bls.n	8001c52 <fft+0x10e>
		{
			in[i] = 0;
 8001c42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	e011      	b.n	8001c76 <fft+0x132>
		}
		else
		{
			in[i] = (float32_t) (ADC_samples[i] - avg);
 8001c52:	4a50      	ldr	r2, [pc, #320]	@ (8001d94 <fft+0x250>)
 8001c54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c62:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t i = 0; i < ADC_NUMS*2; i++)
 8001c76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c78:	3301      	adds	r3, #1
 8001c7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c7e:	2bff      	cmp	r3, #255	@ 0xff
 8001c80:	d9dc      	bls.n	8001c3c <fft+0xf8>
		//in[i] = 1;
	}



	uint32_t ifftFlag = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	643b      	str	r3, [r7, #64]	@ 0x40
	uint32_t doBitReverse = 1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
	arm_cfft_instance_f32 varInstCfftF32;
	/* Reference index at which max energy of bin ocuurs */
	uint32_t refIndex = 213, testIndex = 0;
 8001c8a:	23d5      	movs	r3, #213	@ 0xd5
 8001c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
	* Max magnitude FFT Bin test
	* ------------------------------------------------------------------- */

	arm_status status;
	float32_t maxValue;
	status = ARM_MATH_SUCCESS;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	status=arm_cfft_init_f32(&varInstCfftF32,fftSize);
 8001c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	f107 0320 	add.w	r3, r7, #32
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fd02 	bl	80006ac <arm_cfft_init_f32>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	/* Process the data through the CFFT/CIFFT module */
	arm_cfft_f32(&varInstCfftF32, in, ifftFlag, doBitReverse);
 8001cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f107 0020 	add.w	r0, r7, #32
 8001cba:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001cbc:	f008 fac2 	bl	800a244 <arm_cfft_f32>
	/* Process the data through the Complex Magnitude Module for
	calculating the magnitude at each bin */
	arm_cmplx_mag_f32(in, out, fftSize);
 8001cc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001cc2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001cc4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001cc6:	f008 fb37 	bl	800a338 <arm_cmplx_mag_f32>
	/* Calculates maxValue and returns corresponding BIN value */
	arm_max_f32(out, fftSize, &maxValue, &testIndex);
 8001cca:	f107 031c 	add.w	r3, r7, #28
 8001cce:	f107 0218 	add.w	r2, r7, #24
 8001cd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001cd4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001cd6:	f007 ff1f 	bl	8009b18 <arm_max_f32>
	status = (testIndex != refIndex) ? ARM_MATH_TEST_FAILURE : ARM_MATH_SUCCESS;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d002      	beq.n	8001ce8 <fft+0x1a4>
 8001ce2:	f06f 0305 	mvn.w	r3, #5
 8001ce6:	e000      	b.n	8001cea <fft+0x1a6>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (status != ARM_MATH_SUCCESS)
	{
	  //while(1);
	}

	float df = ADC_FS / fftSize;
 8001cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf8:	ee07 3a90 	vmov	s15, r3
 8001cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d00:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	int32_t f_dominant = 0;//df * testIndex;
 8001d04:	2300      	movs	r3, #0
 8001d06:	65bb      	str	r3, [r7, #88]	@ 0x58

	BSP_LCD_SetFont(&Font24);
 8001d08:	4824      	ldr	r0, [pc, #144]	@ (8001d9c <fft+0x258>)
 8001d0a:	f002 fa3d 	bl	8004188 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d12:	f002 fa1f 	bl	8004154 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001d16:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001d1a:	f002 fa03 	bl	8004124 <BSP_LCD_SetTextColor>
	char text[16];

	if(maxValue < 1000)
 8001d1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d22:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001da0 <fft+0x25c>
 8001d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2e:	d502      	bpl.n	8001d36 <fft+0x1f2>
	{
		f_dominant = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d34:	e025      	b.n	8001d82 <fft+0x23e>
	}
	else if(testIndex > fftSize/2)
 8001d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d38:	085a      	lsrs	r2, r3, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d212      	bcs.n	8001d66 <fft+0x222>
	{
		f_dominant = -(df * (fftSize - testIndex));
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	ee07 3a90 	vmov	s15, r3
 8001d4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d4e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d56:	eef1 7a67 	vneg.f32	s15, s15
 8001d5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d5e:	ee17 3a90 	vmov	r3, s15
 8001d62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d64:	e00d      	b.n	8001d82 <fft+0x23e>
	}
	else
	{
		f_dominant = df * testIndex;
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	ee07 3a90 	vmov	s15, r3
 8001d6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d70:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d7c:	ee17 3a90 	vmov	r3, s15
 8001d80:	65bb      	str	r3, [r7, #88]	@ 0x58
		data_last = data;
		data = (out[i]) / f;
		if (data > 99) { data = 99; }// Limit value (max 60'000)
		BSP_LCD_DrawLine((int) (Xspacing*(i-1)), Y_OFFSET-data_last,(int) (Xspacing*i), Y_OFFSET-data);
	}*/
	return f_dominant;
 8001d82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d84:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	376c      	adds	r7, #108	@ 0x6c
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d92:	bf00      	nop
 8001d94:	20000168 	.word	0x20000168
 8001d98:	43800000 	.word	0x43800000
 8001d9c:	20000094 	.word	0x20000094
 8001da0:	447a0000 	.word	0x447a0000

08001da4 <MENU_get_transition>:
 * MENU_transition is used as a flag.
 * When the value is read by calling MENU_get_transition()
 * this flag is cleared, respectively set to MENU_NONE.
 *****************************************************************************/
MENU_item_t MENU_get_transition(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
	MENU_item_t item = MENU_transition;
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <MENU_get_transition+0x20>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
	MENU_transition = MENU_NONE;
 8001db0:	4b04      	ldr	r3, [pc, #16]	@ (8001dc4 <MENU_get_transition+0x20>)
 8001db2:	2206      	movs	r2, #6
 8001db4:	701a      	strb	r2, [r3, #0]
	return item;
 8001db6:	79fb      	ldrb	r3, [r7, #7]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	2000000c 	.word	0x2000000c

08001dc8 <MENU_check_transition>:
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
void MENU_check_transition(void)
{
 8001dc8:	b598      	push	{r3, r4, r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 8001dcc:	4830      	ldr	r0, [pc, #192]	@ (8001e90 <MENU_check_transition+0xc8>)
 8001dce:	f003 f8d7 	bl	8004f80 <BSP_TS_GetState>


// Evalboard revision E (blue) has an inverted y-axis in the touch controller
#ifdef EVAL_REV_E
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8001dd2:	f002 f927 	bl	8004024 <BSP_LCD_GetYSize>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	4b2d      	ldr	r3, [pc, #180]	@ (8001e90 <MENU_check_transition+0xc8>)
 8001ddc:	889b      	ldrh	r3, [r3, #4]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	4b2b      	ldr	r3, [pc, #172]	@ (8001e90 <MENU_check_transition+0xc8>)
 8001de4:	809a      	strh	r2, [r3, #4]
#endif
	// Invert x- and y-axis if LCD is flipped
#ifdef FLIPPED_LCD
	TS_State.X = BSP_LCD_GetXSize() - TS_State.X;	// Invert the x-axis
 8001de6:	f002 f911 	bl	800400c <BSP_LCD_GetXSize>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	4b28      	ldr	r3, [pc, #160]	@ (8001e90 <MENU_check_transition+0xc8>)
 8001df0:	885b      	ldrh	r3, [r3, #2]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	4b26      	ldr	r3, [pc, #152]	@ (8001e90 <MENU_check_transition+0xc8>)
 8001df8:	805a      	strh	r2, [r3, #2]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8001dfa:	f002 f913 	bl	8004024 <BSP_LCD_GetYSize>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	4b23      	ldr	r3, [pc, #140]	@ (8001e90 <MENU_check_transition+0xc8>)
 8001e04:	889b      	ldrh	r3, [r3, #4]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	4b21      	ldr	r3, [pc, #132]	@ (8001e90 <MENU_check_transition+0xc8>)
 8001e0c:	809a      	strh	r2, [r3, #4]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
#endif
#ifdef EVAL_REV_E
#endif
*/
	if (TS_State.TouchDetected) {		// If a touch was detected
 8001e0e:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <MENU_check_transition+0xc8>)
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d039      	beq.n	8001e8a <MENU_check_transition+0xc2>
		/* Do only if last transition not pending anymore */
		if (MENU_NONE == MENU_transition) {
 8001e16:	4b1f      	ldr	r3, [pc, #124]	@ (8001e94 <MENU_check_transition+0xcc>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d135      	bne.n	8001e8a <MENU_check_transition+0xc2>
			item_old = item_new;		// Store old item
 8001e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e98 <MENU_check_transition+0xd0>)
 8001e20:	781a      	ldrb	r2, [r3, #0]
 8001e22:	4b1e      	ldr	r3, [pc, #120]	@ (8001e9c <MENU_check_transition+0xd4>)
 8001e24:	701a      	strb	r2, [r3, #0]
			/* If touched within the menu bar? */
			if ((MENU_Y < TS_State.Y) && (MENU_Y+MENU_HEIGHT > TS_State.Y)) {
 8001e26:	f002 f8fd 	bl	8004024 <BSP_LCD_GetYSize>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	3b28      	subs	r3, #40	@ 0x28
 8001e2e:	4a18      	ldr	r2, [pc, #96]	@ (8001e90 <MENU_check_transition+0xc8>)
 8001e30:	8892      	ldrh	r2, [r2, #4]
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d229      	bcs.n	8001e8a <MENU_check_transition+0xc2>
 8001e36:	f002 f8f5 	bl	8004024 <BSP_LCD_GetYSize>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4a14      	ldr	r2, [pc, #80]	@ (8001e90 <MENU_check_transition+0xc8>)
 8001e3e:	8892      	ldrh	r2, [r2, #4]
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d922      	bls.n	8001e8a <MENU_check_transition+0xc2>
				item_new = TS_State.X	// Calculate new item
 8001e44:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <MENU_check_transition+0xc8>)
 8001e46:	885b      	ldrh	r3, [r3, #2]
 8001e48:	461c      	mov	r4, r3
						/ (BSP_LCD_GetXSize()/MENU_ENTRY_COUNT);
 8001e4a:	f002 f8df 	bl	800400c <BSP_LCD_GetXSize>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4a13      	ldr	r2, [pc, #76]	@ (8001ea0 <MENU_check_transition+0xd8>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	fbb4 f3f3 	udiv	r3, r4, r3
 8001e5c:	b2da      	uxtb	r2, r3
				item_new = TS_State.X	// Calculate new item
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e98 <MENU_check_transition+0xd0>)
 8001e60:	701a      	strb	r2, [r3, #0]
				if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 8001e62:	4b0d      	ldr	r3, [pc, #52]	@ (8001e98 <MENU_check_transition+0xd0>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b05      	cmp	r3, #5
 8001e68:	d902      	bls.n	8001e70 <MENU_check_transition+0xa8>
					item_new = MENU_NONE;	// Out of bounds
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <MENU_check_transition+0xd0>)
 8001e6c:	2206      	movs	r2, #6
 8001e6e:	701a      	strb	r2, [r3, #0]
				}
				if (item_new == item_old) {	// 2 times the same menu item
 8001e70:	4b09      	ldr	r3, [pc, #36]	@ (8001e98 <MENU_check_transition+0xd0>)
 8001e72:	781a      	ldrb	r2, [r3, #0]
 8001e74:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <MENU_check_transition+0xd4>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d106      	bne.n	8001e8a <MENU_check_transition+0xc2>
					item_new = MENU_NONE;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <MENU_check_transition+0xd0>)
 8001e7e:	2206      	movs	r2, #6
 8001e80:	701a      	strb	r2, [r3, #0]
					MENU_transition = item_old;
 8001e82:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <MENU_check_transition+0xd4>)
 8001e84:	781a      	ldrb	r2, [r3, #0]
 8001e86:	4b03      	ldr	r3, [pc, #12]	@ (8001e94 <MENU_check_transition+0xcc>)
 8001e88:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 8001e8a:	bf00      	nop
 8001e8c:	bd98      	pop	{r3, r4, r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	2000056c 	.word	0x2000056c
 8001e94:	2000000c 	.word	0x2000000c
 8001e98:	20000018 	.word	0x20000018
 8001e9c:	20000019 	.word	0x20000019
 8001ea0:	aaaaaaab 	.word	0xaaaaaaab

08001ea4 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee4 <EXTI15_10_IRQHandler+0x40>)
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d014      	beq.n	8001ede <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <EXTI15_10_IRQHandler+0x40>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee4 <EXTI15_10_IRQHandler+0x40>)
 8001eba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ebe:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 8001ec0:	f003 f852 	bl	8004f68 <BSP_TS_ITGetStatus>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 8001eca:	f003 f90b 	bl	80050e4 <BSP_TS_ITClear>
			MENU_check_transition();
 8001ece:	f7ff ff7b 	bl	8001dc8 <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8001ed2:	4b04      	ldr	r3, [pc, #16]	@ (8001ee4 <EXTI15_10_IRQHandler+0x40>)
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	4a03      	ldr	r2, [pc, #12]	@ (8001ee4 <EXTI15_10_IRQHandler+0x40>)
 8001ed8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001edc:	6153      	str	r3, [r2, #20]
	}
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40013c00 	.word	0x40013c00

08001ee8 <SHOW_STARTMENU>:
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
    BSP_LCD_Clear(LCD_COLOR_WHITE);
}

int SHOW_STARTMENU(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0

	int pressed = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]


	int xSize = 240;
 8001ef2:	23f0      	movs	r3, #240	@ 0xf0
 8001ef4:	607b      	str	r3, [r7, #4]

	BSP_LCD_SetFont(&Font20);
 8001ef6:	4851      	ldr	r0, [pc, #324]	@ (800203c <SHOW_STARTMENU+0x154>)
 8001ef8:	f002 f946 	bl	8004188 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001efc:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001f00:	f002 f910 	bl	8004124 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	f002 f924 	bl	8004154 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(0, 3, (uint8_t *)"Security System", CENTER_MODE);
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	4a4c      	ldr	r2, [pc, #304]	@ (8002040 <SHOW_STARTMENU+0x158>)
 8001f10:	2103      	movs	r1, #3
 8001f12:	2000      	movs	r0, #0
 8001f14:	f002 f9be 	bl	8004294 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001f18:	484a      	ldr	r0, [pc, #296]	@ (8002044 <SHOW_STARTMENU+0x15c>)
 8001f1a:	f002 f903 	bl	8004124 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(BTN_GAP, 200, 100, 100);
 8001f1e:	2364      	movs	r3, #100	@ 0x64
 8001f20:	2264      	movs	r2, #100	@ 0x64
 8001f22:	21c8      	movs	r1, #200	@ 0xc8
 8001f24:	200d      	movs	r0, #13
 8001f26:	f002 fb75 	bl	8004614 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001f2a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001f2e:	f002 f8f9 	bl	8004124 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001f32:	4844      	ldr	r0, [pc, #272]	@ (8002044 <SHOW_STARTMENU+0x15c>)
 8001f34:	f002 f90e 	bl	8004154 <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font24);
 8001f38:	4843      	ldr	r0, [pc, #268]	@ (8002048 <SHOW_STARTMENU+0x160>)
 8001f3a:	f002 f925 	bl	8004188 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(BTN_GAP+26, 240, (uint8_t *)"ARM", LEFT_MODE);
 8001f3e:	2303      	movs	r3, #3
 8001f40:	4a42      	ldr	r2, [pc, #264]	@ (800204c <SHOW_STARTMENU+0x164>)
 8001f42:	21f0      	movs	r1, #240	@ 0xf0
 8001f44:	2027      	movs	r0, #39	@ 0x27
 8001f46:	f002 f9a5 	bl	8004294 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 8001f4a:	4841      	ldr	r0, [pc, #260]	@ (8002050 <SHOW_STARTMENU+0x168>)
 8001f4c:	f002 f8ea 	bl	8004124 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(BTN_GAP+BTN_SIZE+BTN_GAP, 200, 100, 100);
 8001f50:	2364      	movs	r3, #100	@ 0x64
 8001f52:	2264      	movs	r2, #100	@ 0x64
 8001f54:	21c8      	movs	r1, #200	@ 0xc8
 8001f56:	207e      	movs	r0, #126	@ 0x7e
 8001f58:	f002 fb5c 	bl	8004614 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001f5c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001f60:	f002 f8e0 	bl	8004124 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_LIGHTBLUE);
 8001f64:	483a      	ldr	r0, [pc, #232]	@ (8002050 <SHOW_STARTMENU+0x168>)
 8001f66:	f002 f8f5 	bl	8004154 <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font24);
 8001f6a:	4837      	ldr	r0, [pc, #220]	@ (8002048 <SHOW_STARTMENU+0x160>)
 8001f6c:	f002 f90c 	bl	8004188 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(BTN_GAP+BTN_SIZE+BTN_GAP+26, 230, (uint8_t *)"SET", LEFT_MODE);
 8001f70:	2303      	movs	r3, #3
 8001f72:	4a38      	ldr	r2, [pc, #224]	@ (8002054 <SHOW_STARTMENU+0x16c>)
 8001f74:	21e6      	movs	r1, #230	@ 0xe6
 8001f76:	2098      	movs	r0, #152	@ 0x98
 8001f78:	f002 f98c 	bl	8004294 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(BTN_GAP+BTN_SIZE+BTN_GAP+26, 250, (uint8_t *)"PIN", LEFT_MODE);
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	4a36      	ldr	r2, [pc, #216]	@ (8002058 <SHOW_STARTMENU+0x170>)
 8001f80:	21fa      	movs	r1, #250	@ 0xfa
 8001f82:	2098      	movs	r0, #152	@ 0x98
 8001f84:	f002 f986 	bl	8004294 <BSP_LCD_DisplayStringAt>
	while(1)
	{
		uint16_t touched = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	817b      	strh	r3, [r7, #10]
		static TS_StateTypeDef  TS_State;	// State of the touch controller
		BSP_TS_GetState(&TS_State);
 8001f8c:	4833      	ldr	r0, [pc, #204]	@ (800205c <SHOW_STARTMENU+0x174>)
 8001f8e:	f002 fff7 	bl	8004f80 <BSP_TS_GetState>
		uint16_t x = TS_State.X;
 8001f92:	4b32      	ldr	r3, [pc, #200]	@ (800205c <SHOW_STARTMENU+0x174>)
 8001f94:	885b      	ldrh	r3, [r3, #2]
 8001f96:	807b      	strh	r3, [r7, #2]
		uint16_t y = TS_State.Y;
 8001f98:	4b30      	ldr	r3, [pc, #192]	@ (800205c <SHOW_STARTMENU+0x174>)
 8001f9a:	889b      	ldrh	r3, [r3, #4]
 8001f9c:	803b      	strh	r3, [r7, #0]


		if (TS_State.TouchDetected)
 8001f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800205c <SHOW_STARTMENU+0x174>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d03b      	beq.n	800201e <SHOW_STARTMENU+0x136>
		{
			#ifdef EVAL_REV_E
				y = BSP_LCD_GetYSize() - y;
 8001fa6:	f002 f83d 	bl	8004024 <BSP_LCD_GetYSize>
 8001faa:	4603      	mov	r3, r0
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	883b      	ldrh	r3, [r7, #0]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	803b      	strh	r3, [r7, #0]
			#endif
			#ifdef FLIPPED_LCD
				x = BSP_LCD_GetXSize() - x;
 8001fb4:	f002 f82a 	bl	800400c <BSP_LCD_GetXSize>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	887b      	ldrh	r3, [r7, #2]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	807b      	strh	r3, [r7, #2]
				y = BSP_LCD_GetYSize() - y;
 8001fc2:	f002 f82f 	bl	8004024 <BSP_LCD_GetYSize>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	883b      	ldrh	r3, [r7, #0]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	803b      	strh	r3, [r7, #0]
			#endif
			if((x >= BTN_GAP)&&(x <= (BTN_GAP+BTN_SIZE))&& (y>=240)&&(y<=350))
 8001fd0:	887b      	ldrh	r3, [r7, #2]
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d90e      	bls.n	8001ff4 <SHOW_STARTMENU+0x10c>
 8001fd6:	887b      	ldrh	r3, [r7, #2]
 8001fd8:	2b71      	cmp	r3, #113	@ 0x71
 8001fda:	d80b      	bhi.n	8001ff4 <SHOW_STARTMENU+0x10c>
 8001fdc:	883b      	ldrh	r3, [r7, #0]
 8001fde:	2bef      	cmp	r3, #239	@ 0xef
 8001fe0:	d908      	bls.n	8001ff4 <SHOW_STARTMENU+0x10c>
 8001fe2:	883b      	ldrh	r3, [r7, #0]
 8001fe4:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8001fe8:	d804      	bhi.n	8001ff4 <SHOW_STARTMENU+0x10c>
			{
				pressed = 1;
 8001fea:	2301      	movs	r3, #1
 8001fec:	60fb      	str	r3, [r7, #12]
				touched = 1;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	817b      	strh	r3, [r7, #10]
 8001ff2:	e010      	b.n	8002016 <SHOW_STARTMENU+0x12e>
			}
			else if((x >= (BTN_GAP+BTN_SIZE+BTN_GAP))&&(x <= (BTN_GAP+BTN_SIZE+BTN_GAP+BTN_SIZE))&& (y>=240)&&(y<=350))
 8001ff4:	887b      	ldrh	r3, [r7, #2]
 8001ff6:	2b7d      	cmp	r3, #125	@ 0x7d
 8001ff8:	d911      	bls.n	800201e <SHOW_STARTMENU+0x136>
 8001ffa:	887b      	ldrh	r3, [r7, #2]
 8001ffc:	2be2      	cmp	r3, #226	@ 0xe2
 8001ffe:	d80e      	bhi.n	800201e <SHOW_STARTMENU+0x136>
 8002000:	883b      	ldrh	r3, [r7, #0]
 8002002:	2bef      	cmp	r3, #239	@ 0xef
 8002004:	d90b      	bls.n	800201e <SHOW_STARTMENU+0x136>
 8002006:	883b      	ldrh	r3, [r7, #0]
 8002008:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 800200c:	d807      	bhi.n	800201e <SHOW_STARTMENU+0x136>
			{
				pressed = 2;
 800200e:	2302      	movs	r3, #2
 8002010:	60fb      	str	r3, [r7, #12]
				touched = 1;
 8002012:	2301      	movs	r3, #1
 8002014:	817b      	strh	r3, [r7, #10]
			}
		}
		while(TS_State.TouchDetected)
 8002016:	e002      	b.n	800201e <SHOW_STARTMENU+0x136>
		{
			BSP_TS_GetState(&TS_State);
 8002018:	4810      	ldr	r0, [pc, #64]	@ (800205c <SHOW_STARTMENU+0x174>)
 800201a:	f002 ffb1 	bl	8004f80 <BSP_TS_GetState>
		while(TS_State.TouchDetected)
 800201e:	4b0f      	ldr	r3, [pc, #60]	@ (800205c <SHOW_STARTMENU+0x174>)
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f8      	bne.n	8002018 <SHOW_STARTMENU+0x130>
		}
		if(touched ==1)
 8002026:	897b      	ldrh	r3, [r7, #10]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d000      	beq.n	800202e <SHOW_STARTMENU+0x146>
	{
 800202c:	e7ac      	b.n	8001f88 <SHOW_STARTMENU+0xa0>
			break;
 800202e:	bf00      	nop
	}


	return pressed;
 8002030:	68fb      	ldr	r3, [r7, #12]

}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	2000009c 	.word	0x2000009c
 8002040:	0800b568 	.word	0x0800b568
 8002044:	ffff0000 	.word	0xffff0000
 8002048:	20000094 	.word	0x20000094
 800204c:	0800b578 	.word	0x0800b578
 8002050:	ff8080ff 	.word	0xff8080ff
 8002054:	0800b57c 	.word	0x0800b57c
 8002058:	0800b580 	.word	0x0800b580
 800205c:	20000574 	.word	0x20000574

08002060 <SHOW_DEFUSEMENU>:

char* SHOW_DEFUSEMENU(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
    BSP_LCD_Clear(LCD_COLOR_RED);
 8002066:	4844      	ldr	r0, [pc, #272]	@ (8002178 <SHOW_DEFUSEMENU+0x118>)
 8002068:	f002 f8a8 	bl	80041bc <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	f002 f858 	bl	8004124 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8002074:	4840      	ldr	r0, [pc, #256]	@ (8002178 <SHOW_DEFUSEMENU+0x118>)
 8002076:	f002 f86d 	bl	8004154 <BSP_LCD_SetBackColor>
    BSP_LCD_SetFont(&Font20);
 800207a:	4840      	ldr	r0, [pc, #256]	@ (800217c <SHOW_DEFUSEMENU+0x11c>)
 800207c:	f002 f884 	bl	8004188 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 120, (uint8_t *)"MOTION DETECTED!", LEFT_MODE);
 8002080:	2303      	movs	r3, #3
 8002082:	4a3f      	ldr	r2, [pc, #252]	@ (8002180 <SHOW_DEFUSEMENU+0x120>)
 8002084:	2178      	movs	r1, #120	@ 0x78
 8002086:	2000      	movs	r0, #0
 8002088:	f002 f904 	bl	8004294 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 140, (uint8_t *)"ENTER PIN TO", LEFT_MODE);
 800208c:	2303      	movs	r3, #3
 800208e:	4a3d      	ldr	r2, [pc, #244]	@ (8002184 <SHOW_DEFUSEMENU+0x124>)
 8002090:	218c      	movs	r1, #140	@ 0x8c
 8002092:	2000      	movs	r0, #0
 8002094:	f002 f8fe 	bl	8004294 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 160, (uint8_t *)"DEACTIVATE!", LEFT_MODE);
 8002098:	2303      	movs	r3, #3
 800209a:	4a3b      	ldr	r2, [pc, #236]	@ (8002188 <SHOW_DEFUSEMENU+0x128>)
 800209c:	21a0      	movs	r1, #160	@ 0xa0
 800209e:	2000      	movs	r0, #0
 80020a0:	f002 f8f8 	bl	8004294 <BSP_LCD_DisplayStringAt>
    HAL_Delay(3000);
 80020a4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80020a8:	f003 f8a2 	bl	80051f0 <HAL_Delay>

    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f002 f884 	bl	80041bc <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80020b4:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80020b8:	f002 f834 	bl	8004124 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	f002 f848 	bl	8004154 <BSP_LCD_SetBackColor>
    BSP_LCD_SetFont(&Font24);
 80020c4:	4831      	ldr	r0, [pc, #196]	@ (800218c <SHOW_DEFUSEMENU+0x12c>)
 80020c6:	f002 f85f 	bl	8004188 <BSP_LCD_SetFont>

    static char pin_buffer[PIN_MAX_LEN + 1] = {0};
    uint8_t pin_index = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	73fb      	strb	r3, [r7, #15]
    TS_StateTypeDef TS_State;

    draw_numpad();
 80020ce:	f000 f8e3 	bl	8002298 <draw_numpad>

    // Initiale PIN-Anzeige
    BSP_LCD_DisplayStringAt(0, 3, (uint8_t *)pin_buffer, LEFT_MODE);
 80020d2:	2303      	movs	r3, #3
 80020d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002190 <SHOW_DEFUSEMENU+0x130>)
 80020d6:	2103      	movs	r1, #3
 80020d8:	2000      	movs	r0, #0
 80020da:	f002 f8db 	bl	8004294 <BSP_LCD_DisplayStringAt>

    start_countdown(TIME_DEFUSE);
 80020de:	203c      	movs	r0, #60	@ 0x3c
 80020e0:	f000 fd54 	bl	8002b8c <start_countdown>

    while (1) {
        if (update_countdown() <= 0) {
 80020e4:	f000 fd6e 	bl	8002bc4 <update_countdown>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <SHOW_DEFUSEMENU+0x92>
            return NULL;  // Zeit abgelaufen → Alarm
 80020ee:	2300      	movs	r3, #0
 80020f0:	e03d      	b.n	800216e <SHOW_DEFUSEMENU+0x10e>
        }

        BSP_TS_GetState(&TS_State);
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	4618      	mov	r0, r3
 80020f6:	f002 ff43 	bl	8004f80 <BSP_TS_GetState>
        if (!TS_State.TouchDetected) continue;
 80020fa:	88bb      	ldrh	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d034      	beq.n	800216a <SHOW_DEFUSEMENU+0x10a>

        HAL_Delay(150); // debounce
 8002100:	2096      	movs	r0, #150	@ 0x96
 8002102:	f003 f875 	bl	80051f0 <HAL_Delay>
        bool ok_pressed = false;
 8002106:	2300      	movs	r3, #0
 8002108:	70fb      	strb	r3, [r7, #3]
        handle_touch_input(&TS_State, pin_buffer, &pin_index, &ok_pressed);
 800210a:	1cfb      	adds	r3, r7, #3
 800210c:	f107 020f 	add.w	r2, r7, #15
 8002110:	1d38      	adds	r0, r7, #4
 8002112:	491f      	ldr	r1, [pc, #124]	@ (8002190 <SHOW_DEFUSEMENU+0x130>)
 8002114:	f000 f9b8 	bl	8002488 <handle_touch_input>

        if (ok_pressed && strlen(pin_buffer) >= PIN_MIN_LEN) {
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <SHOW_DEFUSEMENU+0xce>
 800211e:	481c      	ldr	r0, [pc, #112]	@ (8002190 <SHOW_DEFUSEMENU+0x130>)
 8002120:	f7fe f8d0 	bl	80002c4 <strlen>
 8002124:	4603      	mov	r3, r0
 8002126:	2b03      	cmp	r3, #3
 8002128:	d901      	bls.n	800212e <SHOW_DEFUSEMENU+0xce>
            return pin_buffer;
 800212a:	4b19      	ldr	r3, [pc, #100]	@ (8002190 <SHOW_DEFUSEMENU+0x130>)
 800212c:	e01f      	b.n	800216e <SHOW_DEFUSEMENU+0x10e>
        }
        // Aktualisiere PIN-Anzeige
        BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800212e:	f04f 30ff 	mov.w	r0, #4294967295
 8002132:	f001 fff7 	bl	8004124 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(0, 0, xSize, 30);
 8002136:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <SHOW_DEFUSEMENU+0x134>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	b29a      	uxth	r2, r3
 800213c:	231e      	movs	r3, #30
 800213e:	2100      	movs	r1, #0
 8002140:	2000      	movs	r0, #0
 8002142:	f002 fa67 	bl	8004614 <BSP_LCD_FillRect>
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002146:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800214a:	f001 ffeb 	bl	8004124 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(0, 3, (uint8_t *)pin_buffer, LEFT_MODE);
 800214e:	2303      	movs	r3, #3
 8002150:	4a0f      	ldr	r2, [pc, #60]	@ (8002190 <SHOW_DEFUSEMENU+0x130>)
 8002152:	2103      	movs	r1, #3
 8002154:	2000      	movs	r0, #0
 8002156:	f002 f89d 	bl	8004294 <BSP_LCD_DisplayStringAt>

        if (strlen(pin_buffer) == PIN_MAX_LEN) {
 800215a:	480d      	ldr	r0, [pc, #52]	@ (8002190 <SHOW_DEFUSEMENU+0x130>)
 800215c:	f7fe f8b2 	bl	80002c4 <strlen>
 8002160:	4603      	mov	r3, r0
 8002162:	2b06      	cmp	r3, #6
 8002164:	d1be      	bne.n	80020e4 <SHOW_DEFUSEMENU+0x84>
            return pin_buffer;
 8002166:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <SHOW_DEFUSEMENU+0x130>)
 8002168:	e001      	b.n	800216e <SHOW_DEFUSEMENU+0x10e>
        if (!TS_State.TouchDetected) continue;
 800216a:	bf00      	nop
    while (1) {
 800216c:	e7ba      	b.n	80020e4 <SHOW_DEFUSEMENU+0x84>
        }
    }
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	ffff0000 	.word	0xffff0000
 800217c:	2000009c 	.word	0x2000009c
 8002180:	0800b584 	.word	0x0800b584
 8002184:	0800b598 	.word	0x0800b598
 8002188:	0800b5a8 	.word	0x0800b5a8
 800218c:	20000094 	.word	0x20000094
 8002190:	2000057c 	.word	0x2000057c
 8002194:	20000010 	.word	0x20000010

08002198 <SHOW_ALARMMENU>:


char* SHOW_ALARMMENU(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
    BSP_LCD_Clear(LCD_COLOR_RED);
 800219e:	4839      	ldr	r0, [pc, #228]	@ (8002284 <SHOW_ALARMMENU+0xec>)
 80021a0:	f002 f80c 	bl	80041bc <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295
 80021a8:	f001 ffbc 	bl	8004124 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80021ac:	4835      	ldr	r0, [pc, #212]	@ (8002284 <SHOW_ALARMMENU+0xec>)
 80021ae:	f001 ffd1 	bl	8004154 <BSP_LCD_SetBackColor>
    BSP_LCD_SetFont(&Font24);
 80021b2:	4835      	ldr	r0, [pc, #212]	@ (8002288 <SHOW_ALARMMENU+0xf0>)
 80021b4:	f001 ffe8 	bl	8004188 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 120, (uint8_t *)"ALARM STARTED", CENTER_MODE);
 80021b8:	2301      	movs	r3, #1
 80021ba:	4a34      	ldr	r2, [pc, #208]	@ (800228c <SHOW_ALARMMENU+0xf4>)
 80021bc:	2178      	movs	r1, #120	@ 0x78
 80021be:	2000      	movs	r0, #0
 80021c0:	f002 f868 	bl	8004294 <BSP_LCD_DisplayStringAt>
    HAL_Delay(3000);
 80021c4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80021c8:	f003 f812 	bl	80051f0 <HAL_Delay>

    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f001 fff4 	bl	80041bc <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80021d4:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80021d8:	f001 ffa4 	bl	8004124 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295
 80021e0:	f001 ffb8 	bl	8004154 <BSP_LCD_SetBackColor>
    BSP_LCD_SetFont(&Font24);
 80021e4:	4828      	ldr	r0, [pc, #160]	@ (8002288 <SHOW_ALARMMENU+0xf0>)
 80021e6:	f001 ffcf 	bl	8004188 <BSP_LCD_SetFont>

    static char pin_buffer[PIN_MAX_LEN + 1] = {0};
    uint8_t pin_index = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	73fb      	strb	r3, [r7, #15]
    TS_StateTypeDef TS_State;

    draw_numpad();
 80021ee:	f000 f853 	bl	8002298 <draw_numpad>

    BSP_LCD_DisplayStringAt(0, 3, (uint8_t *)pin_buffer, LEFT_MODE);
 80021f2:	2303      	movs	r3, #3
 80021f4:	4a26      	ldr	r2, [pc, #152]	@ (8002290 <SHOW_ALARMMENU+0xf8>)
 80021f6:	2103      	movs	r1, #3
 80021f8:	2000      	movs	r0, #0
 80021fa:	f002 f84b 	bl	8004294 <BSP_LCD_DisplayStringAt>

    while (1) {
        BSP_TS_GetState(&TS_State);
 80021fe:	1d3b      	adds	r3, r7, #4
 8002200:	4618      	mov	r0, r3
 8002202:	f002 febd 	bl	8004f80 <BSP_TS_GetState>
        if (!TS_State.TouchDetected) continue;
 8002206:	88bb      	ldrh	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d034      	beq.n	8002276 <SHOW_ALARMMENU+0xde>

        HAL_Delay(150);
 800220c:	2096      	movs	r0, #150	@ 0x96
 800220e:	f002 ffef 	bl	80051f0 <HAL_Delay>
        bool ok_pressed = false;
 8002212:	2300      	movs	r3, #0
 8002214:	70fb      	strb	r3, [r7, #3]
        handle_touch_input(&TS_State, pin_buffer, &pin_index, &ok_pressed);
 8002216:	1cfb      	adds	r3, r7, #3
 8002218:	f107 020f 	add.w	r2, r7, #15
 800221c:	1d38      	adds	r0, r7, #4
 800221e:	491c      	ldr	r1, [pc, #112]	@ (8002290 <SHOW_ALARMMENU+0xf8>)
 8002220:	f000 f932 	bl	8002488 <handle_touch_input>

        if (ok_pressed && strlen(pin_buffer) >= PIN_MIN_LEN) {
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <SHOW_ALARMMENU+0xa2>
 800222a:	4819      	ldr	r0, [pc, #100]	@ (8002290 <SHOW_ALARMMENU+0xf8>)
 800222c:	f7fe f84a 	bl	80002c4 <strlen>
 8002230:	4603      	mov	r3, r0
 8002232:	2b03      	cmp	r3, #3
 8002234:	d901      	bls.n	800223a <SHOW_ALARMMENU+0xa2>
            return pin_buffer;
 8002236:	4b16      	ldr	r3, [pc, #88]	@ (8002290 <SHOW_ALARMMENU+0xf8>)
 8002238:	e01f      	b.n	800227a <SHOW_ALARMMENU+0xe2>
        }
        BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800223a:	f04f 30ff 	mov.w	r0, #4294967295
 800223e:	f001 ff71 	bl	8004124 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(0, 0, xSize, 30);
 8002242:	4b14      	ldr	r3, [pc, #80]	@ (8002294 <SHOW_ALARMMENU+0xfc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	b29a      	uxth	r2, r3
 8002248:	231e      	movs	r3, #30
 800224a:	2100      	movs	r1, #0
 800224c:	2000      	movs	r0, #0
 800224e:	f002 f9e1 	bl	8004614 <BSP_LCD_FillRect>
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002252:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002256:	f001 ff65 	bl	8004124 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(0, 3, (uint8_t *)pin_buffer, LEFT_MODE);
 800225a:	2303      	movs	r3, #3
 800225c:	4a0c      	ldr	r2, [pc, #48]	@ (8002290 <SHOW_ALARMMENU+0xf8>)
 800225e:	2103      	movs	r1, #3
 8002260:	2000      	movs	r0, #0
 8002262:	f002 f817 	bl	8004294 <BSP_LCD_DisplayStringAt>

        if (strlen(pin_buffer) == PIN_MAX_LEN) {
 8002266:	480a      	ldr	r0, [pc, #40]	@ (8002290 <SHOW_ALARMMENU+0xf8>)
 8002268:	f7fe f82c 	bl	80002c4 <strlen>
 800226c:	4603      	mov	r3, r0
 800226e:	2b06      	cmp	r3, #6
 8002270:	d1c5      	bne.n	80021fe <SHOW_ALARMMENU+0x66>
            return pin_buffer;
 8002272:	4b07      	ldr	r3, [pc, #28]	@ (8002290 <SHOW_ALARMMENU+0xf8>)
 8002274:	e001      	b.n	800227a <SHOW_ALARMMENU+0xe2>
        if (!TS_State.TouchDetected) continue;
 8002276:	bf00      	nop
    while (1) {
 8002278:	e7c1      	b.n	80021fe <SHOW_ALARMMENU+0x66>
        }
    }
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	ffff0000 	.word	0xffff0000
 8002288:	20000094 	.word	0x20000094
 800228c:	0800b5b4 	.word	0x0800b5b4
 8002290:	20000584 	.word	0x20000584
 8002294:	20000010 	.word	0x20000010

08002298 <draw_numpad>:



void draw_numpad(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
    const uint16_t btn_w = 60, btn_h = 60;
 800229e:	233c      	movs	r3, #60	@ 0x3c
 80022a0:	82bb      	strh	r3, [r7, #20]
 80022a2:	233c      	movs	r3, #60	@ 0x3c
 80022a4:	827b      	strh	r3, [r7, #18]
    const uint16_t start_x = 20, start_y = 30;
 80022a6:	2314      	movs	r3, #20
 80022a8:	823b      	strh	r3, [r7, #16]
 80022aa:	231e      	movs	r3, #30
 80022ac:	81fb      	strh	r3, [r7, #14]
    const uint16_t gap = 10;
 80022ae:	230a      	movs	r3, #10
 80022b0:	81bb      	strh	r3, [r7, #12]

    char label[2] = {'0', '\0'};
 80022b2:	2330      	movs	r3, #48	@ 0x30
 80022b4:	803b      	strh	r3, [r7, #0]
    for (uint8_t i = 1; i <= 9; i++) {
 80022b6:	2301      	movs	r3, #1
 80022b8:	75fb      	strb	r3, [r7, #23]
 80022ba:	e041      	b.n	8002340 <draw_numpad+0xa8>
        uint16_t row = (i - 1) / 3;
 80022bc:	7dfb      	ldrb	r3, [r7, #23]
 80022be:	3b01      	subs	r3, #1
 80022c0:	4a6c      	ldr	r2, [pc, #432]	@ (8002474 <draw_numpad+0x1dc>)
 80022c2:	fb82 1203 	smull	r1, r2, r2, r3
 80022c6:	17db      	asrs	r3, r3, #31
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	817b      	strh	r3, [r7, #10]
        uint16_t col = (i - 1) % 3;
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
 80022ce:	1e5a      	subs	r2, r3, #1
 80022d0:	4b68      	ldr	r3, [pc, #416]	@ (8002474 <draw_numpad+0x1dc>)
 80022d2:	fb83 3102 	smull	r3, r1, r3, r2
 80022d6:	17d3      	asrs	r3, r2, #31
 80022d8:	1ac9      	subs	r1, r1, r3
 80022da:	460b      	mov	r3, r1
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	440b      	add	r3, r1
 80022e0:	1ad1      	subs	r1, r2, r3
 80022e2:	460b      	mov	r3, r1
 80022e4:	813b      	strh	r3, [r7, #8]
        uint16_t x = start_x + col * (btn_w + gap);
 80022e6:	8aba      	ldrh	r2, [r7, #20]
 80022e8:	89bb      	ldrh	r3, [r7, #12]
 80022ea:	4413      	add	r3, r2
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	893a      	ldrh	r2, [r7, #8]
 80022f0:	fb12 f303 	smulbb	r3, r2, r3
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	8a3b      	ldrh	r3, [r7, #16]
 80022f8:	4413      	add	r3, r2
 80022fa:	80fb      	strh	r3, [r7, #6]
        uint16_t y = start_y + row * (btn_h + gap);
 80022fc:	8a7a      	ldrh	r2, [r7, #18]
 80022fe:	89bb      	ldrh	r3, [r7, #12]
 8002300:	4413      	add	r3, r2
 8002302:	b29b      	uxth	r3, r3
 8002304:	897a      	ldrh	r2, [r7, #10]
 8002306:	fb12 f303 	smulbb	r3, r2, r3
 800230a:	b29a      	uxth	r2, r3
 800230c:	89fb      	ldrh	r3, [r7, #14]
 800230e:	4413      	add	r3, r2
 8002310:	80bb      	strh	r3, [r7, #4]
        BSP_LCD_DrawRect(x, y, btn_w, btn_h);
 8002312:	8a7b      	ldrh	r3, [r7, #18]
 8002314:	8aba      	ldrh	r2, [r7, #20]
 8002316:	88b9      	ldrh	r1, [r7, #4]
 8002318:	88f8      	ldrh	r0, [r7, #6]
 800231a:	f002 f949 	bl	80045b0 <BSP_LCD_DrawRect>
        label[0] = '0' + i;
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	3330      	adds	r3, #48	@ 0x30
 8002322:	b2db      	uxtb	r3, r3
 8002324:	703b      	strb	r3, [r7, #0]
        BSP_LCD_DisplayStringAt(x + 20, y + 20, (uint8_t *)label, LEFT_MODE);
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	3314      	adds	r3, #20
 800232a:	b298      	uxth	r0, r3
 800232c:	88bb      	ldrh	r3, [r7, #4]
 800232e:	3314      	adds	r3, #20
 8002330:	b299      	uxth	r1, r3
 8002332:	463a      	mov	r2, r7
 8002334:	2303      	movs	r3, #3
 8002336:	f001 ffad 	bl	8004294 <BSP_LCD_DisplayStringAt>
    for (uint8_t i = 1; i <= 9; i++) {
 800233a:	7dfb      	ldrb	r3, [r7, #23]
 800233c:	3301      	adds	r3, #1
 800233e:	75fb      	strb	r3, [r7, #23]
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	2b09      	cmp	r3, #9
 8002344:	d9ba      	bls.n	80022bc <draw_numpad+0x24>
    }

    BSP_LCD_DrawRect(start_x + btn_w + gap, start_y + 3 * (btn_h + gap), btn_w, btn_h);
 8002346:	8a3a      	ldrh	r2, [r7, #16]
 8002348:	8abb      	ldrh	r3, [r7, #20]
 800234a:	4413      	add	r3, r2
 800234c:	b29a      	uxth	r2, r3
 800234e:	89bb      	ldrh	r3, [r7, #12]
 8002350:	4413      	add	r3, r2
 8002352:	b298      	uxth	r0, r3
 8002354:	8a7a      	ldrh	r2, [r7, #18]
 8002356:	89bb      	ldrh	r3, [r7, #12]
 8002358:	4413      	add	r3, r2
 800235a:	b29b      	uxth	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	0052      	lsls	r2, r2, #1
 8002360:	4413      	add	r3, r2
 8002362:	b29a      	uxth	r2, r3
 8002364:	89fb      	ldrh	r3, [r7, #14]
 8002366:	4413      	add	r3, r2
 8002368:	b299      	uxth	r1, r3
 800236a:	8a7b      	ldrh	r3, [r7, #18]
 800236c:	8aba      	ldrh	r2, [r7, #20]
 800236e:	f002 f91f 	bl	80045b0 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(start_x + btn_w + gap + 20, start_y + 3 * (btn_h + gap) + 20, (uint8_t *)"0", LEFT_MODE);
 8002372:	8a3a      	ldrh	r2, [r7, #16]
 8002374:	8abb      	ldrh	r3, [r7, #20]
 8002376:	4413      	add	r3, r2
 8002378:	b29a      	uxth	r2, r3
 800237a:	89bb      	ldrh	r3, [r7, #12]
 800237c:	4413      	add	r3, r2
 800237e:	b29b      	uxth	r3, r3
 8002380:	3314      	adds	r3, #20
 8002382:	b298      	uxth	r0, r3
 8002384:	8a7a      	ldrh	r2, [r7, #18]
 8002386:	89bb      	ldrh	r3, [r7, #12]
 8002388:	4413      	add	r3, r2
 800238a:	b29b      	uxth	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	0052      	lsls	r2, r2, #1
 8002390:	4413      	add	r3, r2
 8002392:	b29a      	uxth	r2, r3
 8002394:	89fb      	ldrh	r3, [r7, #14]
 8002396:	4413      	add	r3, r2
 8002398:	b29b      	uxth	r3, r3
 800239a:	3314      	adds	r3, #20
 800239c:	b299      	uxth	r1, r3
 800239e:	2303      	movs	r3, #3
 80023a0:	4a35      	ldr	r2, [pc, #212]	@ (8002478 <draw_numpad+0x1e0>)
 80023a2:	f001 ff77 	bl	8004294 <BSP_LCD_DisplayStringAt>

    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80023a6:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80023aa:	f001 febb 	bl	8004124 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawRect(start_x, start_y + 3 * (btn_h + gap), btn_w, btn_h);
 80023ae:	8a7a      	ldrh	r2, [r7, #18]
 80023b0:	89bb      	ldrh	r3, [r7, #12]
 80023b2:	4413      	add	r3, r2
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	0052      	lsls	r2, r2, #1
 80023ba:	4413      	add	r3, r2
 80023bc:	b29a      	uxth	r2, r3
 80023be:	89fb      	ldrh	r3, [r7, #14]
 80023c0:	4413      	add	r3, r2
 80023c2:	b299      	uxth	r1, r3
 80023c4:	8a7b      	ldrh	r3, [r7, #18]
 80023c6:	8aba      	ldrh	r2, [r7, #20]
 80023c8:	8a38      	ldrh	r0, [r7, #16]
 80023ca:	f002 f8f1 	bl	80045b0 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(start_x + 10, start_y + 3 * (btn_h + gap) + 20, (uint8_t *)"OK", LEFT_MODE);
 80023ce:	8a3b      	ldrh	r3, [r7, #16]
 80023d0:	330a      	adds	r3, #10
 80023d2:	b298      	uxth	r0, r3
 80023d4:	8a7a      	ldrh	r2, [r7, #18]
 80023d6:	89bb      	ldrh	r3, [r7, #12]
 80023d8:	4413      	add	r3, r2
 80023da:	b29b      	uxth	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	0052      	lsls	r2, r2, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	89fb      	ldrh	r3, [r7, #14]
 80023e6:	4413      	add	r3, r2
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3314      	adds	r3, #20
 80023ec:	b299      	uxth	r1, r3
 80023ee:	2303      	movs	r3, #3
 80023f0:	4a22      	ldr	r2, [pc, #136]	@ (800247c <draw_numpad+0x1e4>)
 80023f2:	f001 ff4f 	bl	8004294 <BSP_LCD_DisplayStringAt>

    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80023f6:	4822      	ldr	r0, [pc, #136]	@ (8002480 <draw_numpad+0x1e8>)
 80023f8:	f001 fe94 	bl	8004124 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawRect(start_x + 2 * (btn_w + gap), start_y + 3 * (btn_h + gap), btn_w, btn_h);
 80023fc:	8aba      	ldrh	r2, [r7, #20]
 80023fe:	89bb      	ldrh	r3, [r7, #12]
 8002400:	4413      	add	r3, r2
 8002402:	b29b      	uxth	r3, r3
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	8a3b      	ldrh	r3, [r7, #16]
 800240a:	4413      	add	r3, r2
 800240c:	b298      	uxth	r0, r3
 800240e:	8a7a      	ldrh	r2, [r7, #18]
 8002410:	89bb      	ldrh	r3, [r7, #12]
 8002412:	4413      	add	r3, r2
 8002414:	b29b      	uxth	r3, r3
 8002416:	461a      	mov	r2, r3
 8002418:	0052      	lsls	r2, r2, #1
 800241a:	4413      	add	r3, r2
 800241c:	b29a      	uxth	r2, r3
 800241e:	89fb      	ldrh	r3, [r7, #14]
 8002420:	4413      	add	r3, r2
 8002422:	b299      	uxth	r1, r3
 8002424:	8a7b      	ldrh	r3, [r7, #18]
 8002426:	8aba      	ldrh	r2, [r7, #20]
 8002428:	f002 f8c2 	bl	80045b0 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(start_x + 10 + 2 * (btn_w + gap), start_y + 3 * (btn_h + gap) + 20, (uint8_t *)"CLR", LEFT_MODE);
 800242c:	8aba      	ldrh	r2, [r7, #20]
 800242e:	89bb      	ldrh	r3, [r7, #12]
 8002430:	4413      	add	r3, r2
 8002432:	b29b      	uxth	r3, r3
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	8a3b      	ldrh	r3, [r7, #16]
 800243a:	4413      	add	r3, r2
 800243c:	b29b      	uxth	r3, r3
 800243e:	330a      	adds	r3, #10
 8002440:	b298      	uxth	r0, r3
 8002442:	8a7a      	ldrh	r2, [r7, #18]
 8002444:	89bb      	ldrh	r3, [r7, #12]
 8002446:	4413      	add	r3, r2
 8002448:	b29b      	uxth	r3, r3
 800244a:	461a      	mov	r2, r3
 800244c:	0052      	lsls	r2, r2, #1
 800244e:	4413      	add	r3, r2
 8002450:	b29a      	uxth	r2, r3
 8002452:	89fb      	ldrh	r3, [r7, #14]
 8002454:	4413      	add	r3, r2
 8002456:	b29b      	uxth	r3, r3
 8002458:	3314      	adds	r3, #20
 800245a:	b299      	uxth	r1, r3
 800245c:	2303      	movs	r3, #3
 800245e:	4a09      	ldr	r2, [pc, #36]	@ (8002484 <draw_numpad+0x1ec>)
 8002460:	f001 ff18 	bl	8004294 <BSP_LCD_DisplayStringAt>

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002464:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002468:	f001 fe5c 	bl	8004124 <BSP_LCD_SetTextColor>
}
 800246c:	bf00      	nop
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	55555556 	.word	0x55555556
 8002478:	0800b5c4 	.word	0x0800b5c4
 800247c:	0800b5c8 	.word	0x0800b5c8
 8002480:	ffff0000 	.word	0xffff0000
 8002484:	0800b5cc 	.word	0x0800b5cc

08002488 <handle_touch_input>:

void handle_touch_input(TS_StateTypeDef* ts, char* pin_buffer, uint8_t* pin_index, bool* ok_pressed)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08e      	sub	sp, #56	@ 0x38
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	603b      	str	r3, [r7, #0]
    const uint16_t btn_w = 60, btn_h = 60;
 8002496:	233c      	movs	r3, #60	@ 0x3c
 8002498:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800249a:	233c      	movs	r3, #60	@ 0x3c
 800249c:	867b      	strh	r3, [r7, #50]	@ 0x32
    const uint16_t start_x = 20, start_y = 30;
 800249e:	2314      	movs	r3, #20
 80024a0:	863b      	strh	r3, [r7, #48]	@ 0x30
 80024a2:	231e      	movs	r3, #30
 80024a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    const uint16_t gap = 10;
 80024a6:	230a      	movs	r3, #10
 80024a8:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    uint16_t tx = 240 - ts->X;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	885b      	ldrh	r3, [r3, #2]
 80024ae:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80024b2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint16_t ty = ts->Y;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	889b      	ldrh	r3, [r3, #4]
 80024b8:	853b      	strh	r3, [r7, #40]	@ 0x28

    for (uint8_t i = 1; i <= 9; i++) {
 80024ba:	2301      	movs	r3, #1
 80024bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80024c0:	e060      	b.n	8002584 <handle_touch_input+0xfc>
        uint16_t row = (i - 1) / 3;
 80024c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80024c6:	3b01      	subs	r3, #1
 80024c8:	4a8b      	ldr	r2, [pc, #556]	@ (80026f8 <handle_touch_input+0x270>)
 80024ca:	fb82 1203 	smull	r1, r2, r2, r3
 80024ce:	17db      	asrs	r3, r3, #31
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	837b      	strh	r3, [r7, #26]
        uint16_t col = (i - 1) % 3;
 80024d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80024d8:	1e5a      	subs	r2, r3, #1
 80024da:	4b87      	ldr	r3, [pc, #540]	@ (80026f8 <handle_touch_input+0x270>)
 80024dc:	fb83 3102 	smull	r3, r1, r3, r2
 80024e0:	17d3      	asrs	r3, r2, #31
 80024e2:	1ac9      	subs	r1, r1, r3
 80024e4:	460b      	mov	r3, r1
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	440b      	add	r3, r1
 80024ea:	1ad1      	subs	r1, r2, r3
 80024ec:	460b      	mov	r3, r1
 80024ee:	833b      	strh	r3, [r7, #24]
        uint16_t x = start_x + col * (btn_w + gap);
 80024f0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80024f2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80024f4:	4413      	add	r3, r2
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	8b3a      	ldrh	r2, [r7, #24]
 80024fa:	fb12 f303 	smulbb	r3, r2, r3
 80024fe:	b29a      	uxth	r2, r3
 8002500:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002502:	4413      	add	r3, r2
 8002504:	82fb      	strh	r3, [r7, #22]
        uint16_t y = start_y + row * (btn_h + gap);
 8002506:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8002508:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800250a:	4413      	add	r3, r2
 800250c:	b29b      	uxth	r3, r3
 800250e:	8b7a      	ldrh	r2, [r7, #26]
 8002510:	fb12 f303 	smulbb	r3, r2, r3
 8002514:	b29a      	uxth	r2, r3
 8002516:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002518:	4413      	add	r3, r2
 800251a:	82bb      	strh	r3, [r7, #20]
        if (tx >= x && tx <= x + btn_w && ty >= y && ty <= y + btn_h) {
 800251c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800251e:	8afb      	ldrh	r3, [r7, #22]
 8002520:	429a      	cmp	r2, r3
 8002522:	d32a      	bcc.n	800257a <handle_touch_input+0xf2>
 8002524:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002526:	8af9      	ldrh	r1, [r7, #22]
 8002528:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800252a:	440b      	add	r3, r1
 800252c:	429a      	cmp	r2, r3
 800252e:	dc24      	bgt.n	800257a <handle_touch_input+0xf2>
 8002530:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002532:	8abb      	ldrh	r3, [r7, #20]
 8002534:	429a      	cmp	r2, r3
 8002536:	d320      	bcc.n	800257a <handle_touch_input+0xf2>
 8002538:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800253a:	8ab9      	ldrh	r1, [r7, #20]
 800253c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800253e:	440b      	add	r3, r1
 8002540:	429a      	cmp	r2, r3
 8002542:	dc1a      	bgt.n	800257a <handle_touch_input+0xf2>
            if (*pin_index < PIN_MAX_LEN) {
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b05      	cmp	r3, #5
 800254a:	f200 80cf 	bhi.w	80026ec <handle_touch_input+0x264>
                pin_buffer[(*pin_index)++] = '0' + i;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	b2d1      	uxtb	r1, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	7011      	strb	r1, [r2, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4413      	add	r3, r2
 8002560:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002564:	3230      	adds	r2, #48	@ 0x30
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]
                pin_buffer[*pin_index] = '\0';
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4413      	add	r3, r2
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
            }
            return;
 8002578:	e0b8      	b.n	80026ec <handle_touch_input+0x264>
    for (uint8_t i = 1; i <= 9; i++) {
 800257a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800257e:	3301      	adds	r3, #1
 8002580:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002584:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002588:	2b09      	cmp	r3, #9
 800258a:	d99a      	bls.n	80024c2 <handle_touch_input+0x3a>
        }
    }

    uint16_t x0 = start_x + btn_w + gap;
 800258c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800258e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002590:	4413      	add	r3, r2
 8002592:	b29a      	uxth	r2, r3
 8002594:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002596:	4413      	add	r3, r2
 8002598:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t y0 = start_y + 3 * (btn_h + gap);
 800259a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800259c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800259e:	4413      	add	r3, r2
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	0052      	lsls	r2, r2, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80025ac:	4413      	add	r3, r2
 80025ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
    if (tx >= x0 && tx <= x0 + btn_w && ty >= y0 && ty <= y0 + btn_h) {
 80025b0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80025b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d327      	bcc.n	8002608 <handle_touch_input+0x180>
 80025b8:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80025ba:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 80025bc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80025be:	440b      	add	r3, r1
 80025c0:	429a      	cmp	r2, r3
 80025c2:	dc21      	bgt.n	8002608 <handle_touch_input+0x180>
 80025c4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80025c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d31d      	bcc.n	8002608 <handle_touch_input+0x180>
 80025cc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80025ce:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80025d0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80025d2:	440b      	add	r3, r1
 80025d4:	429a      	cmp	r2, r3
 80025d6:	dc17      	bgt.n	8002608 <handle_touch_input+0x180>
        if (*pin_index < PIN_MAX_LEN) {
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	f200 8087 	bhi.w	80026f0 <handle_touch_input+0x268>
            pin_buffer[(*pin_index)++] = '0';
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	b2d1      	uxtb	r1, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	7011      	strb	r1, [r2, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4413      	add	r3, r2
 80025f4:	2230      	movs	r2, #48	@ 0x30
 80025f6:	701a      	strb	r2, [r3, #0]
            pin_buffer[*pin_index] = '\0';
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	4413      	add	r3, r2
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
        }
        return;
 8002606:	e073      	b.n	80026f0 <handle_touch_input+0x268>
    }

    uint16_t ok_x = start_x;
 8002608:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800260a:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t ok_y = start_y + 3 * (btn_h + gap);
 800260c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800260e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002610:	4413      	add	r3, r2
 8002612:	b29b      	uxth	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	0052      	lsls	r2, r2, #1
 8002618:	4413      	add	r3, r2
 800261a:	b29a      	uxth	r2, r3
 800261c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800261e:	4413      	add	r3, r2
 8002620:	843b      	strh	r3, [r7, #32]
    if (tx >= ok_x && tx <= ok_x + btn_w && ty >= ok_y && ty <= ok_y + btn_h) {
 8002622:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002624:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002626:	429a      	cmp	r2, r3
 8002628:	d313      	bcc.n	8002652 <handle_touch_input+0x1ca>
 800262a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800262c:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800262e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002630:	440b      	add	r3, r1
 8002632:	429a      	cmp	r2, r3
 8002634:	dc0d      	bgt.n	8002652 <handle_touch_input+0x1ca>
 8002636:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002638:	8c3b      	ldrh	r3, [r7, #32]
 800263a:	429a      	cmp	r2, r3
 800263c:	d309      	bcc.n	8002652 <handle_touch_input+0x1ca>
 800263e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002640:	8c39      	ldrh	r1, [r7, #32]
 8002642:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002644:	440b      	add	r3, r1
 8002646:	429a      	cmp	r2, r3
 8002648:	dc03      	bgt.n	8002652 <handle_touch_input+0x1ca>
        *ok_pressed = true;  // <–– neu
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
        return;
 8002650:	e04f      	b.n	80026f2 <handle_touch_input+0x26a>
    }

    uint16_t clr_x = start_x + 2 * (btn_w + gap);
 8002652:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002654:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002656:	4413      	add	r3, r2
 8002658:	b29b      	uxth	r3, r3
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002660:	4413      	add	r3, r2
 8002662:	83fb      	strh	r3, [r7, #30]
    uint16_t clr_y = start_y + 3 * (btn_h + gap);
 8002664:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8002666:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002668:	4413      	add	r3, r2
 800266a:	b29b      	uxth	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	0052      	lsls	r2, r2, #1
 8002670:	4413      	add	r3, r2
 8002672:	b29a      	uxth	r2, r3
 8002674:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002676:	4413      	add	r3, r2
 8002678:	83bb      	strh	r3, [r7, #28]
    if (tx >= clr_x && tx <= clr_x + btn_w && ty >= clr_y && ty <= clr_y + btn_h) {
 800267a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800267c:	8bfb      	ldrh	r3, [r7, #30]
 800267e:	429a      	cmp	r2, r3
 8002680:	d317      	bcc.n	80026b2 <handle_touch_input+0x22a>
 8002682:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002684:	8bf9      	ldrh	r1, [r7, #30]
 8002686:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002688:	440b      	add	r3, r1
 800268a:	429a      	cmp	r2, r3
 800268c:	dc11      	bgt.n	80026b2 <handle_touch_input+0x22a>
 800268e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002690:	8bbb      	ldrh	r3, [r7, #28]
 8002692:	429a      	cmp	r2, r3
 8002694:	d30d      	bcc.n	80026b2 <handle_touch_input+0x22a>
 8002696:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002698:	8bb9      	ldrh	r1, [r7, #28]
 800269a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800269c:	440b      	add	r3, r1
 800269e:	429a      	cmp	r2, r3
 80026a0:	dc07      	bgt.n	80026b2 <handle_touch_input+0x22a>
        memset(pin_buffer, 0, PIN_MAX_LEN + 1);
 80026a2:	2207      	movs	r2, #7
 80026a4:	2100      	movs	r1, #0
 80026a6:	68b8      	ldr	r0, [r7, #8]
 80026a8:	f008 fa56 	bl	800ab58 <memset>
        *pin_index = 0;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
    }

    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80026b2:	f04f 30ff 	mov.w	r0, #4294967295
 80026b6:	f001 fd35 	bl	8004124 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, ySize - 40, xSize, 30);
 80026ba:	4b10      	ldr	r3, [pc, #64]	@ (80026fc <handle_touch_input+0x274>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b28      	subs	r3, #40	@ 0x28
 80026c2:	b299      	uxth	r1, r3
 80026c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002700 <handle_touch_input+0x278>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	231e      	movs	r3, #30
 80026cc:	2000      	movs	r0, #0
 80026ce:	f001 ffa1 	bl	8004614 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80026d2:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80026d6:	f001 fd25 	bl	8004124 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, 3, (uint8_t *)pin_buffer, LEFT_MODE);
 80026da:	2303      	movs	r3, #3
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	2103      	movs	r1, #3
 80026e0:	2000      	movs	r0, #0
 80026e2:	f001 fdd7 	bl	8004294 <BSP_LCD_DisplayStringAt>
    draw_numpad();
 80026e6:	f7ff fdd7 	bl	8002298 <draw_numpad>
 80026ea:	e002      	b.n	80026f2 <handle_touch_input+0x26a>
            return;
 80026ec:	bf00      	nop
 80026ee:	e000      	b.n	80026f2 <handle_touch_input+0x26a>
        return;
 80026f0:	bf00      	nop
}
 80026f2:	3738      	adds	r7, #56	@ 0x38
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	55555556 	.word	0x55555556
 80026fc:	20000014 	.word	0x20000014
 8002700:	20000010 	.word	0x20000010

08002704 <change_pin>:


char* change_pin(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b090      	sub	sp, #64	@ 0x40
 8002708:	af00      	add	r7, sp, #0
    static char new_pin[PIN_MAX_LEN + 1] = {0};
    uint8_t pin_index = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    TS_StateTypeDef TS_State;
    const uint16_t btn_w = 60, btn_h = 60;
 8002710:	233c      	movs	r3, #60	@ 0x3c
 8002712:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8002714:	233c      	movs	r3, #60	@ 0x3c
 8002716:	873b      	strh	r3, [r7, #56]	@ 0x38
    const uint16_t start_x = 20, start_y = 50;
 8002718:	2314      	movs	r3, #20
 800271a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800271c:	2332      	movs	r3, #50	@ 0x32
 800271e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    const uint16_t gap = 10;
 8002720:	230a      	movs	r3, #10
 8002722:	867b      	strh	r3, [r7, #50]	@ 0x32

    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8002724:	f04f 30ff 	mov.w	r0, #4294967295
 8002728:	f001 fd48 	bl	80041bc <BSP_LCD_Clear>
    BSP_LCD_SetFont(&Font24);
 800272c:	4881      	ldr	r0, [pc, #516]	@ (8002934 <change_pin+0x230>)
 800272e:	f001 fd2b 	bl	8004188 <BSP_LCD_SetFont>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002732:	f04f 30ff 	mov.w	r0, #4294967295
 8002736:	f001 fd0d 	bl	8004154 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800273a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800273e:	f001 fcf1 	bl	8004124 <BSP_LCD_SetTextColor>

    // Zeichne Tastenfeld
    char label[2] = {'0', '\0'};
 8002742:	2330      	movs	r3, #48	@ 0x30
 8002744:	80bb      	strh	r3, [r7, #4]
    for (uint8_t i = 1; i <= 9; i++) {
 8002746:	2301      	movs	r3, #1
 8002748:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800274c:	e046      	b.n	80027dc <change_pin+0xd8>
        uint16_t row = (i - 1) / 3;
 800274e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002752:	3b01      	subs	r3, #1
 8002754:	4a78      	ldr	r2, [pc, #480]	@ (8002938 <change_pin+0x234>)
 8002756:	fb82 1203 	smull	r1, r2, r2, r3
 800275a:	17db      	asrs	r3, r3, #31
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	833b      	strh	r3, [r7, #24]
        uint16_t col = (i - 1) % 3;
 8002760:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002764:	1e5a      	subs	r2, r3, #1
 8002766:	4b74      	ldr	r3, [pc, #464]	@ (8002938 <change_pin+0x234>)
 8002768:	fb83 3102 	smull	r3, r1, r3, r2
 800276c:	17d3      	asrs	r3, r2, #31
 800276e:	1ac9      	subs	r1, r1, r3
 8002770:	460b      	mov	r3, r1
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	440b      	add	r3, r1
 8002776:	1ad1      	subs	r1, r2, r3
 8002778:	460b      	mov	r3, r1
 800277a:	82fb      	strh	r3, [r7, #22]
        uint16_t x = start_x + col * (btn_w + gap);
 800277c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800277e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002780:	4413      	add	r3, r2
 8002782:	b29b      	uxth	r3, r3
 8002784:	8afa      	ldrh	r2, [r7, #22]
 8002786:	fb12 f303 	smulbb	r3, r2, r3
 800278a:	b29a      	uxth	r2, r3
 800278c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800278e:	4413      	add	r3, r2
 8002790:	82bb      	strh	r3, [r7, #20]
        uint16_t y = start_y + row * (btn_h + gap);
 8002792:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002794:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002796:	4413      	add	r3, r2
 8002798:	b29b      	uxth	r3, r3
 800279a:	8b3a      	ldrh	r2, [r7, #24]
 800279c:	fb12 f303 	smulbb	r3, r2, r3
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80027a4:	4413      	add	r3, r2
 80027a6:	827b      	strh	r3, [r7, #18]
        BSP_LCD_DrawRect(x, y, btn_w, btn_h);
 80027a8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80027aa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80027ac:	8a79      	ldrh	r1, [r7, #18]
 80027ae:	8ab8      	ldrh	r0, [r7, #20]
 80027b0:	f001 fefe 	bl	80045b0 <BSP_LCD_DrawRect>
        label[0] = '0' + i;
 80027b4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80027b8:	3330      	adds	r3, #48	@ 0x30
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	713b      	strb	r3, [r7, #4]
        BSP_LCD_DisplayStringAt(x + 20, y + 20, (uint8_t *)label, LEFT_MODE);
 80027be:	8abb      	ldrh	r3, [r7, #20]
 80027c0:	3314      	adds	r3, #20
 80027c2:	b298      	uxth	r0, r3
 80027c4:	8a7b      	ldrh	r3, [r7, #18]
 80027c6:	3314      	adds	r3, #20
 80027c8:	b299      	uxth	r1, r3
 80027ca:	1d3a      	adds	r2, r7, #4
 80027cc:	2303      	movs	r3, #3
 80027ce:	f001 fd61 	bl	8004294 <BSP_LCD_DisplayStringAt>
    for (uint8_t i = 1; i <= 9; i++) {
 80027d2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80027d6:	3301      	adds	r3, #1
 80027d8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80027dc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80027e0:	2b09      	cmp	r3, #9
 80027e2:	d9b4      	bls.n	800274e <change_pin+0x4a>
    }

    // Taste 0
    BSP_LCD_DrawRect(start_x + btn_w + gap, start_y + 3 * (btn_h + gap), btn_w, btn_h);
 80027e4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80027e6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80027e8:	4413      	add	r3, r2
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80027ee:	4413      	add	r3, r2
 80027f0:	b298      	uxth	r0, r3
 80027f2:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80027f4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80027f6:	4413      	add	r3, r2
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	0052      	lsls	r2, r2, #1
 80027fe:	4413      	add	r3, r2
 8002800:	b29a      	uxth	r2, r3
 8002802:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002804:	4413      	add	r3, r2
 8002806:	b299      	uxth	r1, r3
 8002808:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800280a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800280c:	f001 fed0 	bl	80045b0 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(start_x + btn_w + gap + 20, start_y + 3 * (btn_h + gap) + 20, (uint8_t *)"0", LEFT_MODE);
 8002810:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002812:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002814:	4413      	add	r3, r2
 8002816:	b29a      	uxth	r2, r3
 8002818:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800281a:	4413      	add	r3, r2
 800281c:	b29b      	uxth	r3, r3
 800281e:	3314      	adds	r3, #20
 8002820:	b298      	uxth	r0, r3
 8002822:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002824:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002826:	4413      	add	r3, r2
 8002828:	b29b      	uxth	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	0052      	lsls	r2, r2, #1
 800282e:	4413      	add	r3, r2
 8002830:	b29a      	uxth	r2, r3
 8002832:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002834:	4413      	add	r3, r2
 8002836:	b29b      	uxth	r3, r3
 8002838:	3314      	adds	r3, #20
 800283a:	b299      	uxth	r1, r3
 800283c:	2303      	movs	r3, #3
 800283e:	4a3f      	ldr	r2, [pc, #252]	@ (800293c <change_pin+0x238>)
 8002840:	f001 fd28 	bl	8004294 <BSP_LCD_DisplayStringAt>

    // OK-Taste
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8002844:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8002848:	f001 fc6c 	bl	8004124 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawRect(start_x, start_y + 3 * (btn_h + gap), btn_w, btn_h);
 800284c:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800284e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002850:	4413      	add	r3, r2
 8002852:	b29b      	uxth	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	0052      	lsls	r2, r2, #1
 8002858:	4413      	add	r3, r2
 800285a:	b29a      	uxth	r2, r3
 800285c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800285e:	4413      	add	r3, r2
 8002860:	b299      	uxth	r1, r3
 8002862:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002864:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8002866:	8ef8      	ldrh	r0, [r7, #54]	@ 0x36
 8002868:	f001 fea2 	bl	80045b0 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(start_x + 10, start_y + 3 * (btn_h + gap) + 20, (uint8_t *)"OK", LEFT_MODE);
 800286c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800286e:	330a      	adds	r3, #10
 8002870:	b298      	uxth	r0, r3
 8002872:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002874:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002876:	4413      	add	r3, r2
 8002878:	b29b      	uxth	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	0052      	lsls	r2, r2, #1
 800287e:	4413      	add	r3, r2
 8002880:	b29a      	uxth	r2, r3
 8002882:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002884:	4413      	add	r3, r2
 8002886:	b29b      	uxth	r3, r3
 8002888:	3314      	adds	r3, #20
 800288a:	b299      	uxth	r1, r3
 800288c:	2303      	movs	r3, #3
 800288e:	4a2c      	ldr	r2, [pc, #176]	@ (8002940 <change_pin+0x23c>)
 8002890:	f001 fd00 	bl	8004294 <BSP_LCD_DisplayStringAt>

    // CLR-Taste
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002894:	482b      	ldr	r0, [pc, #172]	@ (8002944 <change_pin+0x240>)
 8002896:	f001 fc45 	bl	8004124 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawRect(start_x + 2 * (btn_w + gap), start_y + 3 * (btn_h + gap), btn_w, btn_h);
 800289a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800289c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800289e:	4413      	add	r3, r2
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80028a8:	4413      	add	r3, r2
 80028aa:	b298      	uxth	r0, r3
 80028ac:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80028ae:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80028b0:	4413      	add	r3, r2
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	0052      	lsls	r2, r2, #1
 80028b8:	4413      	add	r3, r2
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80028be:	4413      	add	r3, r2
 80028c0:	b299      	uxth	r1, r3
 80028c2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80028c4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80028c6:	f001 fe73 	bl	80045b0 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(start_x + 10 + 2 * (btn_w + gap), start_y + 3 * (btn_h + gap) + 20, (uint8_t *)"CLR", LEFT_MODE);
 80028ca:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80028cc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80028ce:	4413      	add	r3, r2
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80028d8:	4413      	add	r3, r2
 80028da:	b29b      	uxth	r3, r3
 80028dc:	330a      	adds	r3, #10
 80028de:	b298      	uxth	r0, r3
 80028e0:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80028e2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80028e4:	4413      	add	r3, r2
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	0052      	lsls	r2, r2, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80028f2:	4413      	add	r3, r2
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3314      	adds	r3, #20
 80028f8:	b299      	uxth	r1, r3
 80028fa:	2303      	movs	r3, #3
 80028fc:	4a12      	ldr	r2, [pc, #72]	@ (8002948 <change_pin+0x244>)
 80028fe:	f001 fcc9 	bl	8004294 <BSP_LCD_DisplayStringAt>

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002902:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002906:	f001 fc0d 	bl	8004124 <BSP_LCD_SetTextColor>

    while (1) {
        BSP_TS_GetState(&TS_State);
 800290a:	f107 0308 	add.w	r3, r7, #8
 800290e:	4618      	mov	r0, r3
 8002910:	f002 fb36 	bl	8004f80 <BSP_TS_GetState>
        if (TS_State.TouchDetected) {
 8002914:	893b      	ldrh	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f7      	beq.n	800290a <change_pin+0x206>
            HAL_Delay(150); // Debounce
 800291a:	2096      	movs	r0, #150	@ 0x96
 800291c:	f002 fc68 	bl	80051f0 <HAL_Delay>
            uint16_t tx = 240 - TS_State.X;
 8002920:	897b      	ldrh	r3, [r7, #10]
 8002922:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8002926:	863b      	strh	r3, [r7, #48]	@ 0x30
            uint16_t ty = TS_State.Y;
 8002928:	89bb      	ldrh	r3, [r7, #12]
 800292a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            // Prüfe Zahlen-Buttons
            for (uint8_t i = 1; i <= 9; i++) {
 800292c:	2301      	movs	r3, #1
 800292e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8002932:	e066      	b.n	8002a02 <change_pin+0x2fe>
 8002934:	20000094 	.word	0x20000094
 8002938:	55555556 	.word	0x55555556
 800293c:	0800b5c4 	.word	0x0800b5c4
 8002940:	0800b5c8 	.word	0x0800b5c8
 8002944:	ffff0000 	.word	0xffff0000
 8002948:	0800b5cc 	.word	0x0800b5cc
                uint16_t row = (i - 1) / 3;
 800294c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002950:	3b01      	subs	r3, #1
 8002952:	4a8a      	ldr	r2, [pc, #552]	@ (8002b7c <change_pin+0x478>)
 8002954:	fb82 1203 	smull	r1, r2, r2, r3
 8002958:	17db      	asrs	r3, r3, #31
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	843b      	strh	r3, [r7, #32]
                uint16_t col = (i - 1) % 3;
 800295e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002962:	1e5a      	subs	r2, r3, #1
 8002964:	4b85      	ldr	r3, [pc, #532]	@ (8002b7c <change_pin+0x478>)
 8002966:	fb83 3102 	smull	r3, r1, r3, r2
 800296a:	17d3      	asrs	r3, r2, #31
 800296c:	1ac9      	subs	r1, r1, r3
 800296e:	460b      	mov	r3, r1
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	440b      	add	r3, r1
 8002974:	1ad1      	subs	r1, r2, r3
 8002976:	460b      	mov	r3, r1
 8002978:	83fb      	strh	r3, [r7, #30]
                uint16_t x = start_x + col * (btn_w + gap);
 800297a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800297c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800297e:	4413      	add	r3, r2
 8002980:	b29b      	uxth	r3, r3
 8002982:	8bfa      	ldrh	r2, [r7, #30]
 8002984:	fb12 f303 	smulbb	r3, r2, r3
 8002988:	b29a      	uxth	r2, r3
 800298a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800298c:	4413      	add	r3, r2
 800298e:	83bb      	strh	r3, [r7, #28]
                uint16_t y = start_y + row * (btn_h + gap);
 8002990:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002992:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002994:	4413      	add	r3, r2
 8002996:	b29b      	uxth	r3, r3
 8002998:	8c3a      	ldrh	r2, [r7, #32]
 800299a:	fb12 f303 	smulbb	r3, r2, r3
 800299e:	b29a      	uxth	r2, r3
 80029a0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80029a2:	4413      	add	r3, r2
 80029a4:	837b      	strh	r3, [r7, #26]
                if (tx >= x && tx <= x + btn_w && ty >= y && ty <= y + btn_h) {
 80029a6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80029a8:	8bbb      	ldrh	r3, [r7, #28]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d324      	bcc.n	80029f8 <change_pin+0x2f4>
 80029ae:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80029b0:	8bb9      	ldrh	r1, [r7, #28]
 80029b2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80029b4:	440b      	add	r3, r1
 80029b6:	429a      	cmp	r2, r3
 80029b8:	dc1e      	bgt.n	80029f8 <change_pin+0x2f4>
 80029ba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80029bc:	8b7b      	ldrh	r3, [r7, #26]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d31a      	bcc.n	80029f8 <change_pin+0x2f4>
 80029c2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80029c4:	8b79      	ldrh	r1, [r7, #26]
 80029c6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80029c8:	440b      	add	r3, r1
 80029ca:	429a      	cmp	r2, r3
 80029cc:	dc14      	bgt.n	80029f8 <change_pin+0x2f4>
                    if (pin_index < PIN_MAX_LEN) {
 80029ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80029d2:	2b05      	cmp	r3, #5
 80029d4:	d810      	bhi.n	80029f8 <change_pin+0x2f4>
                        new_pin[pin_index++] = '0' + i;
 80029d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80029e0:	461a      	mov	r2, r3
 80029e2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80029e6:	3330      	adds	r3, #48	@ 0x30
 80029e8:	b2d9      	uxtb	r1, r3
 80029ea:	4b65      	ldr	r3, [pc, #404]	@ (8002b80 <change_pin+0x47c>)
 80029ec:	5499      	strb	r1, [r3, r2]
                        new_pin[pin_index] = '\0';
 80029ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80029f2:	4a63      	ldr	r2, [pc, #396]	@ (8002b80 <change_pin+0x47c>)
 80029f4:	2100      	movs	r1, #0
 80029f6:	54d1      	strb	r1, [r2, r3]
            for (uint8_t i = 1; i <= 9; i++) {
 80029f8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80029fc:	3301      	adds	r3, #1
 80029fe:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8002a02:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002a06:	2b09      	cmp	r3, #9
 8002a08:	d9a0      	bls.n	800294c <change_pin+0x248>
                    }
                }
            }

            // Taste 0
            uint16_t x0 = start_x + btn_w + gap;
 8002a0a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002a0c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002a0e:	4413      	add	r3, r2
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002a14:	4413      	add	r3, r2
 8002a16:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            uint16_t y0 = start_y + 3 * (btn_h + gap);
 8002a18:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002a1a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002a1c:	4413      	add	r3, r2
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	0052      	lsls	r2, r2, #1
 8002a24:	4413      	add	r3, r2
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002a2a:	4413      	add	r3, r2
 8002a2c:	857b      	strh	r3, [r7, #42]	@ 0x2a
            if (tx >= x0 && tx <= x0 + btn_w && ty >= y0 && ty <= y0 + btn_h) {
 8002a2e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002a30:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d321      	bcc.n	8002a7a <change_pin+0x376>
 8002a36:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002a38:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8002a3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002a3c:	440b      	add	r3, r1
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	dc1b      	bgt.n	8002a7a <change_pin+0x376>
 8002a42:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002a44:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d317      	bcc.n	8002a7a <change_pin+0x376>
 8002a4a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002a4c:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8002a4e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002a50:	440b      	add	r3, r1
 8002a52:	429a      	cmp	r2, r3
 8002a54:	dc11      	bgt.n	8002a7a <change_pin+0x376>
                if (pin_index < PIN_MAX_LEN) {
 8002a56:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d80d      	bhi.n	8002a7a <change_pin+0x376>
                    new_pin[pin_index++] = '0';
 8002a5e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b45      	ldr	r3, [pc, #276]	@ (8002b80 <change_pin+0x47c>)
 8002a6c:	2130      	movs	r1, #48	@ 0x30
 8002a6e:	5499      	strb	r1, [r3, r2]
                    new_pin[pin_index] = '\0';
 8002a70:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a74:	4a42      	ldr	r2, [pc, #264]	@ (8002b80 <change_pin+0x47c>)
 8002a76:	2100      	movs	r1, #0
 8002a78:	54d1      	strb	r1, [r2, r3]
                }
            }

            // OK-Taste
            uint16_t ok_x = start_x;
 8002a7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002a7c:	853b      	strh	r3, [r7, #40]	@ 0x28
            uint16_t ok_y = start_y + 3 * (btn_h + gap);
 8002a7e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002a80:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002a82:	4413      	add	r3, r2
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	461a      	mov	r2, r3
 8002a88:	0052      	lsls	r2, r2, #1
 8002a8a:	4413      	add	r3, r2
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002a90:	4413      	add	r3, r2
 8002a92:	84fb      	strh	r3, [r7, #38]	@ 0x26
            if (tx >= ok_x && tx <= ok_x + btn_w && ty >= ok_y && ty <= ok_y + btn_h) {
 8002a94:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002a96:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d31b      	bcc.n	8002ad4 <change_pin+0x3d0>
 8002a9c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002a9e:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8002aa0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002aa2:	440b      	add	r3, r1
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	dc15      	bgt.n	8002ad4 <change_pin+0x3d0>
 8002aa8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002aaa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d311      	bcc.n	8002ad4 <change_pin+0x3d0>
 8002ab0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002ab2:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8002ab4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002ab6:	440b      	add	r3, r1
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	dc0b      	bgt.n	8002ad4 <change_pin+0x3d0>
                if (pin_index >= PIN_MIN_LEN) {
 8002abc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d901      	bls.n	8002ac8 <change_pin+0x3c4>
                    return new_pin;
 8002ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8002b80 <change_pin+0x47c>)
 8002ac6:	e054      	b.n	8002b72 <change_pin+0x46e>
                } else {
                    BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"PIN zu kurz!", CENTER_MODE);
 8002ac8:	2301      	movs	r3, #1
 8002aca:	4a2e      	ldr	r2, [pc, #184]	@ (8002b84 <change_pin+0x480>)
 8002acc:	210a      	movs	r1, #10
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f001 fbe0 	bl	8004294 <BSP_LCD_DisplayStringAt>
                }
            }

            // CLR-Taste
            uint16_t clr_x = start_x + 2 * (btn_w + gap);
 8002ad4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8002ad6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002ad8:	4413      	add	r3, r2
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002ae2:	4413      	add	r3, r2
 8002ae4:	84bb      	strh	r3, [r7, #36]	@ 0x24
            uint16_t clr_y = start_y + 3 * (btn_h + gap);
 8002ae6:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002ae8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002aea:	4413      	add	r3, r2
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	0052      	lsls	r2, r2, #1
 8002af2:	4413      	add	r3, r2
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002af8:	4413      	add	r3, r2
 8002afa:	847b      	strh	r3, [r7, #34]	@ 0x22
            if (tx >= clr_x && tx <= clr_x + btn_w && ty >= clr_y && ty <= clr_y + btn_h) {
 8002afc:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002afe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d31f      	bcc.n	8002b44 <change_pin+0x440>
 8002b04:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002b06:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8002b08:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002b0a:	440b      	add	r3, r1
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	dc19      	bgt.n	8002b44 <change_pin+0x440>
 8002b10:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002b12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d315      	bcc.n	8002b44 <change_pin+0x440>
 8002b18:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002b1a:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8002b1c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002b1e:	440b      	add	r3, r1
 8002b20:	429a      	cmp	r2, r3
 8002b22:	dc0f      	bgt.n	8002b44 <change_pin+0x440>
                memset(new_pin, 0, sizeof(new_pin));
 8002b24:	2207      	movs	r2, #7
 8002b26:	2100      	movs	r1, #0
 8002b28:	4815      	ldr	r0, [pc, #84]	@ (8002b80 <change_pin+0x47c>)
 8002b2a:	f008 f815 	bl	800ab58 <memset>
                pin_index = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                BSP_LCD_FillRect(0, 0, xSize, 30);  // PIN-Anzeige löschen
 8002b34:	4b14      	ldr	r3, [pc, #80]	@ (8002b88 <change_pin+0x484>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	231e      	movs	r3, #30
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f001 fd68 	bl	8004614 <BSP_LCD_FillRect>
            }

            // Eingabeanzeige aktualisieren
            BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002b44:	f04f 30ff 	mov.w	r0, #4294967295
 8002b48:	f001 faec 	bl	8004124 <BSP_LCD_SetTextColor>
            BSP_LCD_FillRect(0, 0, xSize, 30);
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b88 <change_pin+0x484>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	231e      	movs	r3, #30
 8002b54:	2100      	movs	r1, #0
 8002b56:	2000      	movs	r0, #0
 8002b58:	f001 fd5c 	bl	8004614 <BSP_LCD_FillRect>
            BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002b5c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002b60:	f001 fae0 	bl	8004124 <BSP_LCD_SetTextColor>
            BSP_LCD_DisplayStringAt(0, 3, (uint8_t *)new_pin, LEFT_MODE);
 8002b64:	2303      	movs	r3, #3
 8002b66:	4a06      	ldr	r2, [pc, #24]	@ (8002b80 <change_pin+0x47c>)
 8002b68:	2103      	movs	r1, #3
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	f001 fb92 	bl	8004294 <BSP_LCD_DisplayStringAt>
        BSP_TS_GetState(&TS_State);
 8002b70:	e6cb      	b.n	800290a <change_pin+0x206>
        }
    }
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3740      	adds	r7, #64	@ 0x40
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	55555556 	.word	0x55555556
 8002b80:	2000058c 	.word	0x2000058c
 8002b84:	0800b5d0 	.word	0x0800b5d0
 8002b88:	20000010 	.word	0x20000010

08002b8c <start_countdown>:
#include <stdio.h>

uint32_t countdown_start = 0;
uint32_t countdown_last_update = 0;
int32_t countdown_remaining = 30;  // Sekunden
void start_countdown(uint8_t timer) {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	71fb      	strb	r3, [r7, #7]
    countdown_start = HAL_GetTick();
 8002b96:	f002 fb1f 	bl	80051d8 <HAL_GetTick>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4a06      	ldr	r2, [pc, #24]	@ (8002bb8 <start_countdown+0x2c>)
 8002b9e:	6013      	str	r3, [r2, #0]
    countdown_last_update = countdown_start;
 8002ba0:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <start_countdown+0x2c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a05      	ldr	r2, [pc, #20]	@ (8002bbc <start_countdown+0x30>)
 8002ba6:	6013      	str	r3, [r2, #0]
    countdown_remaining = timer;
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	4a05      	ldr	r2, [pc, #20]	@ (8002bc0 <start_countdown+0x34>)
 8002bac:	6013      	str	r3, [r2, #0]
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000594 	.word	0x20000594
 8002bbc:	20000598 	.word	0x20000598
 8002bc0:	2000001c 	.word	0x2000001c

08002bc4 <update_countdown>:
uint16_t update_countdown() {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	@ 0x28
 8002bc8:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 8002bca:	f002 fb05 	bl	80051d8 <HAL_GetTick>
 8002bce:	6278      	str	r0, [r7, #36]	@ 0x24

    // Alle 1000 ms aktualisieren
    if (now - countdown_last_update >= 1000) {
 8002bd0:	4b18      	ldr	r3, [pc, #96]	@ (8002c34 <update_countdown+0x70>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bdc:	d322      	bcc.n	8002c24 <update_countdown+0x60>
        countdown_remaining--;
 8002bde:	4b16      	ldr	r3, [pc, #88]	@ (8002c38 <update_countdown+0x74>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	4a14      	ldr	r2, [pc, #80]	@ (8002c38 <update_countdown+0x74>)
 8002be6:	6013      	str	r3, [r2, #0]
        countdown_last_update = now;
 8002be8:	4a12      	ldr	r2, [pc, #72]	@ (8002c34 <update_countdown+0x70>)
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	6013      	str	r3, [r2, #0]

        // Anzeige aktualisieren
        char buffer[32];
        snprintf(buffer, sizeof(buffer), "%lds", countdown_remaining);
 8002bee:	4b12      	ldr	r3, [pc, #72]	@ (8002c38 <update_countdown+0x74>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	1d38      	adds	r0, r7, #4
 8002bf4:	4a11      	ldr	r2, [pc, #68]	@ (8002c3c <update_countdown+0x78>)
 8002bf6:	2120      	movs	r1, #32
 8002bf8:	f007 ff78 	bl	800aaec <sniprintf>
        BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	f001 faa8 	bl	8004154 <BSP_LCD_SetBackColor>
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002c04:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002c08:	f001 fa8c 	bl	8004124 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(0, 3, (uint8_t *)"   ", RIGHT_MODE);
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c40 <update_countdown+0x7c>)
 8002c10:	2103      	movs	r1, #3
 8002c12:	2000      	movs	r0, #0
 8002c14:	f001 fb3e 	bl	8004294 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0, 3, (uint8_t *)buffer, RIGHT_MODE);
 8002c18:	1d3a      	adds	r2, r7, #4
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	2103      	movs	r1, #3
 8002c1e:	2000      	movs	r0, #0
 8002c20:	f001 fb38 	bl	8004294 <BSP_LCD_DisplayStringAt>
    }
    return countdown_remaining;
 8002c24:	4b04      	ldr	r3, [pc, #16]	@ (8002c38 <update_countdown+0x74>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	b29b      	uxth	r3, r3
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3728      	adds	r7, #40	@ 0x28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000598 	.word	0x20000598
 8002c38:	2000001c 	.word	0x2000001c
 8002c3c:	0800b5e0 	.word	0x0800b5e0
 8002c40:	0800b5e8 	.word	0x0800b5e8

08002c44 <__NVIC_EnableIRQ>:
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	db0b      	blt.n	8002c6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	f003 021f 	and.w	r2, r3, #31
 8002c5c:	4907      	ldr	r1, [pc, #28]	@ (8002c7c <__NVIC_EnableIRQ+0x38>)
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	2001      	movs	r0, #1
 8002c66:	fa00 f202 	lsl.w	r2, r0, r2
 8002c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	e000e100 	.word	0xe000e100

08002c80 <__NVIC_ClearPendingIRQ>:
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	db0c      	blt.n	8002cac <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	f003 021f 	and.w	r2, r3, #31
 8002c98:	4907      	ldr	r1, [pc, #28]	@ (8002cb8 <__NVIC_ClearPendingIRQ+0x38>)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca6:	3360      	adds	r3, #96	@ 0x60
 8002ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	e000e100 	.word	0xe000e100

08002cbc <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf4 <PB_init+0x38>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cca:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf4 <PB_init+0x38>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cd2:	4b08      	ldr	r3, [pc, #32]	@ (8002cf4 <PB_init+0x38>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	607b      	str	r3, [r7, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8002cde:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <PB_init+0x3c>)
 8002ce0:	4a05      	ldr	r2, [pc, #20]	@ (8002cf8 <PB_init+0x3c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6013      	str	r3, [r2, #0]
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40020000 	.word	0x40020000

08002cfc <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 8002d02:	2300      	movs	r3, #0
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	4b13      	ldr	r3, [pc, #76]	@ (8002d54 <PB_enableIRQ+0x58>)
 8002d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0a:	4a12      	ldr	r2, [pc, #72]	@ (8002d54 <PB_enableIRQ+0x58>)
 8002d0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d12:	4b10      	ldr	r3, [pc, #64]	@ (8002d54 <PB_enableIRQ+0x58>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d1a:	607b      	str	r3, [r7, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d58 <PB_enableIRQ+0x5c>)
 8002d20:	4a0d      	ldr	r2, [pc, #52]	@ (8002d58 <PB_enableIRQ+0x5c>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 8002d26:	4b0d      	ldr	r3, [pc, #52]	@ (8002d5c <PB_enableIRQ+0x60>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8002d5c <PB_enableIRQ+0x60>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 8002d32:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <PB_enableIRQ+0x60>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a09      	ldr	r2, [pc, #36]	@ (8002d5c <PB_enableIRQ+0x60>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 8002d3e:	2006      	movs	r0, #6
 8002d40:	f7ff ff9e 	bl	8002c80 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8002d44:	2006      	movs	r0, #6
 8002d46:	f7ff ff7d 	bl	8002c44 <__NVIC_EnableIRQ>
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40013800 	.word	0x40013800
 8002d5c:	40013c00 	.word	0x40013c00

08002d60 <PB_pressed>:
 * @brief Was the pushbutton pressed?
 *
 * @return true if pushbutton was pressed
 *****************************************************************************/
bool PB_pressed(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
	bool pressed = PB_pressed_flag;		// Read/store value of flag
 8002d66:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <PB_pressed+0x20>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	71fb      	strb	r3, [r7, #7]
	PB_pressed_flag = false;			// Reset flag
 8002d6c:	4b04      	ldr	r3, [pc, #16]	@ (8002d80 <PB_pressed+0x20>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
	return pressed;
 8002d72:	79fb      	ldrb	r3, [r7, #7]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	2000059c 	.word	0x2000059c

08002d84 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 8002d88:	4b09      	ldr	r3, [pc, #36]	@ (8002db0 <EXTI0_IRQHandler+0x2c>)
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8002d94:	4b06      	ldr	r3, [pc, #24]	@ (8002db0 <EXTI0_IRQHandler+0x2c>)
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	4a05      	ldr	r2, [pc, #20]	@ (8002db0 <EXTI0_IRQHandler+0x2c>)
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8002da0:	4b04      	ldr	r3, [pc, #16]	@ (8002db4 <EXTI0_IRQHandler+0x30>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
	}
}
 8002da6:	bf00      	nop
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	40013c00 	.word	0x40013c00
 8002db4:	2000059c 	.word	0x2000059c

08002db8 <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
}
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 8002dca:	bf00      	nop
 8002dcc:	e7fd      	b.n	8002dca <HardFault_Handler+0x4>

08002dce <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 8002dd2:	bf00      	nop
 8002dd4:	e7fd      	b.n	8002dd2 <MemManage_Handler+0x4>

08002dd6 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 8002dda:	bf00      	nop
 8002ddc:	e7fd      	b.n	8002dda <BusFault_Handler+0x4>

08002dde <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 8002de2:	bf00      	nop
 8002de4:	e7fd      	b.n	8002de2 <UsageFault_Handler+0x4>

08002de6 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0
}
 8002e06:	bf00      	nop
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8002e14:	f002 f9cc 	bl	80051b0 <HAL_IncTick>
}
 8002e18:	bf00      	nop
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e20:	4b16      	ldr	r3, [pc, #88]	@ (8002e7c <SystemInit+0x60>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e26:	4a15      	ldr	r2, [pc, #84]	@ (8002e7c <SystemInit+0x60>)
 8002e28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002e30:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <SystemInit+0x64>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a12      	ldr	r2, [pc, #72]	@ (8002e80 <SystemInit+0x64>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e3c:	4b10      	ldr	r3, [pc, #64]	@ (8002e80 <SystemInit+0x64>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002e42:	4b0f      	ldr	r3, [pc, #60]	@ (8002e80 <SystemInit+0x64>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a0e      	ldr	r2, [pc, #56]	@ (8002e80 <SystemInit+0x64>)
 8002e48:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8002e4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e50:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <SystemInit+0x64>)
 8002e54:	4a0b      	ldr	r2, [pc, #44]	@ (8002e84 <SystemInit+0x68>)
 8002e56:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e58:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <SystemInit+0x64>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a08      	ldr	r2, [pc, #32]	@ (8002e80 <SystemInit+0x64>)
 8002e5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002e64:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <SystemInit+0x64>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e6a:	4b04      	ldr	r3, [pc, #16]	@ (8002e7c <SystemInit+0x60>)
 8002e6c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e70:	609a      	str	r2, [r3, #8]
#endif
}
 8002e72:	bf00      	nop
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000ed00 	.word	0xe000ed00
 8002e80:	40023800 	.word	0x40023800
 8002e84:	24003010 	.word	0x24003010

08002e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002e88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ec0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e8e:	e003      	b.n	8002e98 <LoopCopyDataInit>

08002e90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e96:	3104      	adds	r1, #4

08002e98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e98:	480b      	ldr	r0, [pc, #44]	@ (8002ec8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002ecc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ea0:	d3f6      	bcc.n	8002e90 <CopyDataInit>
  ldr  r2, =_sbss
 8002ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8002ed0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ea4:	e002      	b.n	8002eac <LoopFillZerobss>

08002ea6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ea6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ea8:	f842 3b04 	str.w	r3, [r2], #4

08002eac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002eac:	4b09      	ldr	r3, [pc, #36]	@ (8002ed4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002eae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002eb0:	d3f9      	bcc.n	8002ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002eb2:	f7ff ffb3 	bl	8002e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eb6:	f007 fe57 	bl	800ab68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eba:	f7fd fd83 	bl	80009c4 <main>
  bx  lr    
 8002ebe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ec0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002ec4:	080234cc 	.word	0x080234cc
  ldr  r0, =_sdata
 8002ec8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ecc:	20000100 	.word	0x20000100
  ldr  r2, =_sbss
 8002ed0:	20000100 	.word	0x20000100
  ldr  r3, = _ebss
 8002ed4:	200009b0 	.word	0x200009b0

08002ed8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ed8:	e7fe      	b.n	8002ed8 <CAN1_RX0_IRQHandler>

08002eda <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002ede:	f000 fed3 	bl	8003c88 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002ee2:	20ca      	movs	r0, #202	@ 0xca
 8002ee4:	f000 f95d 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002ee8:	20c3      	movs	r0, #195	@ 0xc3
 8002eea:	f000 f967 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002eee:	2008      	movs	r0, #8
 8002ef0:	f000 f964 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002ef4:	2050      	movs	r0, #80	@ 0x50
 8002ef6:	f000 f961 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002efa:	20cf      	movs	r0, #207	@ 0xcf
 8002efc:	f000 f951 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002f00:	2000      	movs	r0, #0
 8002f02:	f000 f95b 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002f06:	20c1      	movs	r0, #193	@ 0xc1
 8002f08:	f000 f958 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002f0c:	2030      	movs	r0, #48	@ 0x30
 8002f0e:	f000 f955 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002f12:	20ed      	movs	r0, #237	@ 0xed
 8002f14:	f000 f945 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002f18:	2064      	movs	r0, #100	@ 0x64
 8002f1a:	f000 f94f 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002f1e:	2003      	movs	r0, #3
 8002f20:	f000 f94c 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002f24:	2012      	movs	r0, #18
 8002f26:	f000 f949 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002f2a:	2081      	movs	r0, #129	@ 0x81
 8002f2c:	f000 f946 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002f30:	20e8      	movs	r0, #232	@ 0xe8
 8002f32:	f000 f936 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002f36:	2085      	movs	r0, #133	@ 0x85
 8002f38:	f000 f940 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f000 f93d 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002f42:	2078      	movs	r0, #120	@ 0x78
 8002f44:	f000 f93a 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002f48:	20cb      	movs	r0, #203	@ 0xcb
 8002f4a:	f000 f92a 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002f4e:	2039      	movs	r0, #57	@ 0x39
 8002f50:	f000 f934 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002f54:	202c      	movs	r0, #44	@ 0x2c
 8002f56:	f000 f931 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f000 f92e 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002f60:	2034      	movs	r0, #52	@ 0x34
 8002f62:	f000 f92b 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002f66:	2002      	movs	r0, #2
 8002f68:	f000 f928 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002f6c:	20f7      	movs	r0, #247	@ 0xf7
 8002f6e:	f000 f918 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002f72:	2020      	movs	r0, #32
 8002f74:	f000 f922 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002f78:	20ea      	movs	r0, #234	@ 0xea
 8002f7a:	f000 f912 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f000 f91c 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f84:	2000      	movs	r0, #0
 8002f86:	f000 f919 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002f8a:	20b1      	movs	r0, #177	@ 0xb1
 8002f8c:	f000 f909 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002f90:	2000      	movs	r0, #0
 8002f92:	f000 f913 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002f96:	201b      	movs	r0, #27
 8002f98:	f000 f910 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002f9c:	20b6      	movs	r0, #182	@ 0xb6
 8002f9e:	f000 f900 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002fa2:	200a      	movs	r0, #10
 8002fa4:	f000 f90a 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002fa8:	20a2      	movs	r0, #162	@ 0xa2
 8002faa:	f000 f907 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002fae:	20c0      	movs	r0, #192	@ 0xc0
 8002fb0:	f000 f8f7 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002fb4:	2010      	movs	r0, #16
 8002fb6:	f000 f901 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002fba:	20c1      	movs	r0, #193	@ 0xc1
 8002fbc:	f000 f8f1 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002fc0:	2010      	movs	r0, #16
 8002fc2:	f000 f8fb 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002fc6:	20c5      	movs	r0, #197	@ 0xc5
 8002fc8:	f000 f8eb 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002fcc:	2045      	movs	r0, #69	@ 0x45
 8002fce:	f000 f8f5 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002fd2:	2015      	movs	r0, #21
 8002fd4:	f000 f8f2 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002fd8:	20c7      	movs	r0, #199	@ 0xc7
 8002fda:	f000 f8e2 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002fde:	2090      	movs	r0, #144	@ 0x90
 8002fe0:	f000 f8ec 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002fe4:	2036      	movs	r0, #54	@ 0x36
 8002fe6:	f000 f8dc 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002fea:	20c8      	movs	r0, #200	@ 0xc8
 8002fec:	f000 f8e6 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002ff0:	20f2      	movs	r0, #242	@ 0xf2
 8002ff2:	f000 f8d6 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	f000 f8e0 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002ffc:	20b0      	movs	r0, #176	@ 0xb0
 8002ffe:	f000 f8d0 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8003002:	20c2      	movs	r0, #194	@ 0xc2
 8003004:	f000 f8da 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8003008:	20b6      	movs	r0, #182	@ 0xb6
 800300a:	f000 f8ca 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800300e:	200a      	movs	r0, #10
 8003010:	f000 f8d4 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8003014:	20a7      	movs	r0, #167	@ 0xa7
 8003016:	f000 f8d1 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800301a:	2027      	movs	r0, #39	@ 0x27
 800301c:	f000 f8ce 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8003020:	2004      	movs	r0, #4
 8003022:	f000 f8cb 	bl	80031bc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8003026:	202a      	movs	r0, #42	@ 0x2a
 8003028:	f000 f8bb 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800302c:	2000      	movs	r0, #0
 800302e:	f000 f8c5 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003032:	2000      	movs	r0, #0
 8003034:	f000 f8c2 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003038:	2000      	movs	r0, #0
 800303a:	f000 f8bf 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800303e:	20ef      	movs	r0, #239	@ 0xef
 8003040:	f000 f8bc 	bl	80031bc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8003044:	202b      	movs	r0, #43	@ 0x2b
 8003046:	f000 f8ac 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800304a:	2000      	movs	r0, #0
 800304c:	f000 f8b6 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003050:	2000      	movs	r0, #0
 8003052:	f000 f8b3 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8003056:	2001      	movs	r0, #1
 8003058:	f000 f8b0 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800305c:	203f      	movs	r0, #63	@ 0x3f
 800305e:	f000 f8ad 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8003062:	20f6      	movs	r0, #246	@ 0xf6
 8003064:	f000 f89d 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8003068:	2001      	movs	r0, #1
 800306a:	f000 f8a7 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800306e:	2000      	movs	r0, #0
 8003070:	f000 f8a4 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8003074:	2006      	movs	r0, #6
 8003076:	f000 f8a1 	bl	80031bc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800307a:	202c      	movs	r0, #44	@ 0x2c
 800307c:	f000 f891 	bl	80031a2 <ili9341_WriteReg>
  LCD_Delay(200);
 8003080:	20c8      	movs	r0, #200	@ 0xc8
 8003082:	f000 feef 	bl	8003e64 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8003086:	2026      	movs	r0, #38	@ 0x26
 8003088:	f000 f88b 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800308c:	2001      	movs	r0, #1
 800308e:	f000 f895 	bl	80031bc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8003092:	20e0      	movs	r0, #224	@ 0xe0
 8003094:	f000 f885 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8003098:	200f      	movs	r0, #15
 800309a:	f000 f88f 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800309e:	2029      	movs	r0, #41	@ 0x29
 80030a0:	f000 f88c 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80030a4:	2024      	movs	r0, #36	@ 0x24
 80030a6:	f000 f889 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80030aa:	200c      	movs	r0, #12
 80030ac:	f000 f886 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80030b0:	200e      	movs	r0, #14
 80030b2:	f000 f883 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80030b6:	2009      	movs	r0, #9
 80030b8:	f000 f880 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80030bc:	204e      	movs	r0, #78	@ 0x4e
 80030be:	f000 f87d 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80030c2:	2078      	movs	r0, #120	@ 0x78
 80030c4:	f000 f87a 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80030c8:	203c      	movs	r0, #60	@ 0x3c
 80030ca:	f000 f877 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80030ce:	2009      	movs	r0, #9
 80030d0:	f000 f874 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80030d4:	2013      	movs	r0, #19
 80030d6:	f000 f871 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80030da:	2005      	movs	r0, #5
 80030dc:	f000 f86e 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80030e0:	2017      	movs	r0, #23
 80030e2:	f000 f86b 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80030e6:	2011      	movs	r0, #17
 80030e8:	f000 f868 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80030ec:	2000      	movs	r0, #0
 80030ee:	f000 f865 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80030f2:	20e1      	movs	r0, #225	@ 0xe1
 80030f4:	f000 f855 	bl	80031a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80030f8:	2000      	movs	r0, #0
 80030fa:	f000 f85f 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80030fe:	2016      	movs	r0, #22
 8003100:	f000 f85c 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8003104:	201b      	movs	r0, #27
 8003106:	f000 f859 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800310a:	2004      	movs	r0, #4
 800310c:	f000 f856 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003110:	2011      	movs	r0, #17
 8003112:	f000 f853 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8003116:	2007      	movs	r0, #7
 8003118:	f000 f850 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800311c:	2031      	movs	r0, #49	@ 0x31
 800311e:	f000 f84d 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8003122:	2033      	movs	r0, #51	@ 0x33
 8003124:	f000 f84a 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8003128:	2042      	movs	r0, #66	@ 0x42
 800312a:	f000 f847 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800312e:	2005      	movs	r0, #5
 8003130:	f000 f844 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003134:	200c      	movs	r0, #12
 8003136:	f000 f841 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800313a:	200a      	movs	r0, #10
 800313c:	f000 f83e 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8003140:	2028      	movs	r0, #40	@ 0x28
 8003142:	f000 f83b 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8003146:	202f      	movs	r0, #47	@ 0x2f
 8003148:	f000 f838 	bl	80031bc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800314c:	200f      	movs	r0, #15
 800314e:	f000 f835 	bl	80031bc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8003152:	2011      	movs	r0, #17
 8003154:	f000 f825 	bl	80031a2 <ili9341_WriteReg>
  LCD_Delay(200);
 8003158:	20c8      	movs	r0, #200	@ 0xc8
 800315a:	f000 fe83 	bl	8003e64 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800315e:	2029      	movs	r0, #41	@ 0x29
 8003160:	f000 f81f 	bl	80031a2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8003164:	202c      	movs	r0, #44	@ 0x2c
 8003166:	f000 f81c 	bl	80031a2 <ili9341_WriteReg>
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}

0800316e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8003172:	f000 fd89 	bl	8003c88 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8003176:	2103      	movs	r1, #3
 8003178:	20d3      	movs	r0, #211	@ 0xd3
 800317a:	f000 f82c 	bl	80031d6 <ili9341_ReadData>
 800317e:	4603      	mov	r3, r0
 8003180:	b29b      	uxth	r3, r3
}
 8003182:	4618      	mov	r0, r3
 8003184:	bd80      	pop	{r7, pc}

08003186 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800318a:	2029      	movs	r0, #41	@ 0x29
 800318c:	f000 f809 	bl	80031a2 <ili9341_WriteReg>
}
 8003190:	bf00      	nop
 8003192:	bd80      	pop	{r7, pc}

08003194 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8003198:	2028      	movs	r0, #40	@ 0x28
 800319a:	f000 f802 	bl	80031a2 <ili9341_WriteReg>
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	4603      	mov	r3, r0
 80031aa:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fe04 	bl	8003dbc <LCD_IO_WriteReg>
}
 80031b4:	bf00      	nop
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 fdd5 	bl	8003d78 <LCD_IO_WriteData>
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	460a      	mov	r2, r1
 80031e0:	80fb      	strh	r3, [r7, #6]
 80031e2:	4613      	mov	r3, r2
 80031e4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80031e6:	797a      	ldrb	r2, [r7, #5]
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fe07 	bl	8003e00 <LCD_IO_ReadData>
 80031f2:	4603      	mov	r3, r0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8003200:	23f0      	movs	r3, #240	@ 0xf0
}
 8003202:	4618      	mov	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8003210:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fa59 	bl	80036e4 <stmpe811_GetInstance>
 8003232:	4603      	mov	r3, r0
 8003234:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	2bff      	cmp	r3, #255	@ 0xff
 800323a:	d112      	bne.n	8003262 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 800323c:	2000      	movs	r0, #0
 800323e:	f000 fa51 	bl	80036e4 <stmpe811_GetInstance>
 8003242:	4603      	mov	r3, r0
 8003244:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8003246:	7bbb      	ldrb	r3, [r7, #14]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d80a      	bhi.n	8003262 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 800324c:	7bbb      	ldrb	r3, [r7, #14]
 800324e:	88fa      	ldrh	r2, [r7, #6]
 8003250:	b2d1      	uxtb	r1, r2
 8003252:	4a06      	ldr	r2, [pc, #24]	@ (800326c <stmpe811_Init+0x4c>)
 8003254:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8003256:	f000 fe10 	bl	8003e7a <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	4618      	mov	r0, r3
 800325e:	f000 f807 	bl	8003270 <stmpe811_Reset>
    }
  }
}
 8003262:	bf00      	nop
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	200005a0 	.word	0x200005a0

08003270 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2202      	movs	r2, #2
 8003280:	2103      	movs	r1, #3
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fe05 	bl	8003e92 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8003288:	200a      	movs	r0, #10
 800328a:	f000 fe3e 	bl	8003f0a <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800328e:	88fb      	ldrh	r3, [r7, #6]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2200      	movs	r2, #0
 8003294:	2103      	movs	r1, #3
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fdfb 	bl	8003e92 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 800329c:	2002      	movs	r0, #2
 800329e:	f000 fe34 	bl	8003f0a <IOE_Delay>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80032aa:	b590      	push	{r4, r7, lr}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	4603      	mov	r3, r0
 80032b2:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 80032b4:	f000 fde1 	bl	8003e7a <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2100      	movs	r1, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fdfa 	bl	8003eb8 <IOE_Read>
 80032c4:	4603      	mov	r3, r0
 80032c6:	b21b      	sxth	r3, r3
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2101      	movs	r1, #1
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fdf0 	bl	8003eb8 <IOE_Read>
 80032d8:	4603      	mov	r3, r0
 80032da:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80032dc:	4323      	orrs	r3, r4
 80032de:	b21b      	sxth	r3, r3
 80032e0:	b29b      	uxth	r3, r3
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd90      	pop	{r4, r7, pc}

080032ea <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80032f4:	2300      	movs	r3, #0
 80032f6:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2109      	movs	r1, #9
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fdda 	bl	8003eb8 <IOE_Read>
 8003304:	4603      	mov	r3, r0
 8003306:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	7bfa      	ldrb	r2, [r7, #15]
 8003316:	2109      	movs	r1, #9
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fdba 	bl	8003e92 <IOE_Write>
}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	4603      	mov	r3, r0
 800332e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003334:	88fb      	ldrh	r3, [r7, #6]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2109      	movs	r1, #9
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fdbc 	bl	8003eb8 <IOE_Read>
 8003340:	4603      	mov	r3, r0
 8003342:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	f023 0301 	bic.w	r3, r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	7bfa      	ldrb	r2, [r7, #15]
 8003352:	2109      	movs	r1, #9
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fd9c 	bl	8003e92 <IOE_Write>
    
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	4603      	mov	r3, r0
 800336a:	460a      	mov	r2, r1
 800336c:	80fb      	strh	r3, [r7, #6]
 800336e:	4613      	mov	r3, r2
 8003370:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	210a      	movs	r1, #10
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fd9b 	bl	8003eb8 <IOE_Read>
 8003382:	4603      	mov	r3, r0
 8003384:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8003386:	7bfa      	ldrb	r2, [r7, #15]
 8003388:	797b      	ldrb	r3, [r7, #5]
 800338a:	4313      	orrs	r3, r2
 800338c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	7bfa      	ldrb	r2, [r7, #15]
 8003394:	210a      	movs	r1, #10
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fd7b 	bl	8003e92 <IOE_Write>
}
 800339c:	bf00      	nop
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	460a      	mov	r2, r1
 80033ae:	80fb      	strh	r3, [r7, #6]
 80033b0:	4613      	mov	r3, r2
 80033b2:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80033b8:	88fb      	ldrh	r3, [r7, #6]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	210a      	movs	r1, #10
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fd7a 	bl	8003eb8 <IOE_Read>
 80033c4:	4603      	mov	r3, r0
 80033c6:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 80033c8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	b25a      	sxtb	r2, r3
 80033d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d4:	4013      	ands	r3, r2
 80033d6:	b25b      	sxtb	r3, r3
 80033d8:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	7bfa      	ldrb	r2, [r7, #15]
 80033e0:	210a      	movs	r1, #10
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fd55 	bl	8003e92 <IOE_Write>
}
 80033e8:	bf00      	nop
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	460a      	mov	r2, r1
 80033fa:	80fb      	strh	r3, [r7, #6]
 80033fc:	4613      	mov	r3, r2
 80033fe:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	210b      	movs	r1, #11
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fd56 	bl	8003eb8 <IOE_Read>
 800340c:	4603      	mov	r3, r0
 800340e:	461a      	mov	r2, r3
 8003410:	797b      	ldrb	r3, [r7, #5]
 8003412:	4013      	ands	r3, r2
 8003414:	b2db      	uxtb	r3, r3
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	4603      	mov	r3, r0
 8003426:	460a      	mov	r2, r1
 8003428:	80fb      	strh	r3, [r7, #6]
 800342a:	4613      	mov	r3, r2
 800342c:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	797a      	ldrb	r2, [r7, #5]
 8003434:	210b      	movs	r1, #11
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fd2b 	bl	8003e92 <IOE_Write>
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	6039      	str	r1, [r7, #0]
 800344e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2117      	movs	r1, #23
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fd2c 	bl	8003eb8 <IOE_Read>
 8003460:	4603      	mov	r3, r0
 8003462:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	b25b      	sxtb	r3, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	b25a      	sxtb	r2, r3
 800346c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003470:	4013      	ands	r3, r2
 8003472:	b25b      	sxtb	r3, r3
 8003474:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8003476:	88fb      	ldrh	r3, [r7, #6]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	7bfa      	ldrb	r2, [r7, #15]
 800347c:	2117      	movs	r1, #23
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fd07 	bl	8003e92 <IOE_Write>
}
 8003484:	bf00      	nop
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2104      	movs	r1, #4
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fd0b 	bl	8003eb8 <IOE_Read>
 80034a2:	4603      	mov	r3, r0
 80034a4:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	f023 0304 	bic.w	r3, r3, #4
 80034ac:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	7bfa      	ldrb	r2, [r7, #15]
 80034b4:	2104      	movs	r1, #4
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fceb 	bl	8003e92 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	21f0      	movs	r1, #240	@ 0xf0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff ffbf 	bl	8003444 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	f023 0303 	bic.w	r3, r3, #3
 80034cc:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	2104      	movs	r1, #4
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fcdb 	bl	8003e92 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2249      	movs	r2, #73	@ 0x49
 80034e2:	2120      	movs	r1, #32
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fcd4 	bl	8003e92 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80034ea:	2002      	movs	r0, #2
 80034ec:	f000 fd0d 	bl	8003f0a <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80034f0:	88fb      	ldrh	r3, [r7, #6]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2201      	movs	r2, #1
 80034f6:	2121      	movs	r1, #33	@ 0x21
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fcca 	bl	8003e92 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	229a      	movs	r2, #154	@ 0x9a
 8003504:	2141      	movs	r1, #65	@ 0x41
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fcc3 	bl	8003e92 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800350c:	88fb      	ldrh	r3, [r7, #6]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2201      	movs	r2, #1
 8003512:	214a      	movs	r1, #74	@ 0x4a
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fcbc 	bl	8003e92 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2201      	movs	r2, #1
 8003520:	214b      	movs	r1, #75	@ 0x4b
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fcb5 	bl	8003e92 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2200      	movs	r2, #0
 800352e:	214b      	movs	r1, #75	@ 0x4b
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fcae 	bl	8003e92 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2201      	movs	r2, #1
 800353c:	2156      	movs	r1, #86	@ 0x56
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fca7 	bl	8003e92 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2201      	movs	r2, #1
 800354a:	2158      	movs	r1, #88	@ 0x58
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fca0 	bl	8003e92 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2201      	movs	r2, #1
 8003558:	2140      	movs	r1, #64	@ 0x40
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fc99 	bl	8003e92 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8003560:	88fb      	ldrh	r3, [r7, #6]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	22ff      	movs	r2, #255	@ 0xff
 8003566:	210b      	movs	r1, #11
 8003568:	4618      	mov	r0, r3
 800356a:	f000 fc92 	bl	8003e92 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 800356e:	2002      	movs	r0, #2
 8003570:	f000 fccb 	bl	8003f0a <IOE_Delay>
}
 8003574:	bf00      	nop
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8003586:	2300      	movs	r3, #0
 8003588:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2140      	movs	r1, #64	@ 0x40
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fc91 	bl	8003eb8 <IOE_Read>
 8003596:	4603      	mov	r3, r0
 8003598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359c:	2b80      	cmp	r3, #128	@ 0x80
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80035a8:	7bbb      	ldrb	r3, [r7, #14]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	214c      	movs	r1, #76	@ 0x4c
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fc7f 	bl	8003eb8 <IOE_Read>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d010      	beq.n	80035e2 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80035c0:	2301      	movs	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
 80035c4:	e00d      	b.n	80035e2 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2201      	movs	r2, #1
 80035cc:	214b      	movs	r1, #75	@ 0x4b
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fc5f 	bl	8003e92 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2200      	movs	r2, #0
 80035da:	214b      	movs	r1, #75	@ 0x4b
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fc58 	bl	8003e92 <IOE_Write>
  }
  
  return ret;
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80035fa:	89fb      	ldrh	r3, [r7, #14]
 80035fc:	b2d8      	uxtb	r0, r3
 80035fe:	f107 0210 	add.w	r2, r7, #16
 8003602:	2304      	movs	r3, #4
 8003604:	21d7      	movs	r1, #215	@ 0xd7
 8003606:	f000 fc6a 	bl	8003ede <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 800360a:	7c3b      	ldrb	r3, [r7, #16]
 800360c:	061a      	lsls	r2, r3, #24
 800360e:	7c7b      	ldrb	r3, [r7, #17]
 8003610:	041b      	lsls	r3, r3, #16
 8003612:	431a      	orrs	r2, r3
 8003614:	7cbb      	ldrb	r3, [r7, #18]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	4313      	orrs	r3, r2
 800361a:	7cfa      	ldrb	r2, [r7, #19]
 800361c:	4313      	orrs	r3, r2
 800361e:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	0d1b      	lsrs	r3, r3, #20
 8003624:	b29a      	uxth	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	0a1b      	lsrs	r3, r3, #8
 800362e:	b29b      	uxth	r3, r3
 8003630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003634:	b29a      	uxth	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800363a:	89fb      	ldrh	r3, [r7, #14]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2201      	movs	r2, #1
 8003640:	214b      	movs	r1, #75	@ 0x4b
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fc25 	bl	8003e92 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003648:	89fb      	ldrh	r3, [r7, #14]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2200      	movs	r2, #0
 800364e:	214b      	movs	r1, #75	@ 0x4b
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fc1e 	bl	8003e92 <IOE_Write>
}
 8003656:	bf00      	nop
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	4603      	mov	r3, r0
 8003666:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8003668:	f000 fc0d 	bl	8003e86 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	211f      	movs	r1, #31
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff fe76 	bl	8003362 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fe36 	bl	80032ea <stmpe811_EnableGlobalIT>
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	4603      	mov	r3, r0
 800368e:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8003690:	88fb      	ldrh	r3, [r7, #6]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff fe47 	bl	8003326 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003698:	88fb      	ldrh	r3, [r7, #6]
 800369a:	211f      	movs	r1, #31
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff fe81 	bl	80033a4 <stmpe811_DisableITSource>
}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	4603      	mov	r3, r0
 80036b2:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	211f      	movs	r1, #31
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fe99 	bl	80033f0 <stmpe811_ReadGITStatus>
 80036be:	4603      	mov	r3, r0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	211f      	movs	r1, #31
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fea1 	bl	800341e <stmpe811_ClearGlobalIT>
}
 80036dc:	bf00      	nop
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	73fb      	strb	r3, [r7, #15]
 80036f6:	e00b      	b.n	8003710 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003724 <stmpe811_GetInstance+0x40>)
 80036fc:	5cd3      	ldrb	r3, [r2, r3]
 80036fe:	461a      	mov	r2, r3
 8003700:	88fb      	ldrh	r3, [r7, #6]
 8003702:	4293      	cmp	r3, r2
 8003704:	d101      	bne.n	800370a <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	e006      	b.n	8003718 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	3301      	adds	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d9f0      	bls.n	80036f8 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8003716:	23ff      	movs	r3, #255	@ 0xff
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	200005a0 	.word	0x200005a0

08003728 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	@ 0x28
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10e      	bne.n	8003756 <BSP_LED_Init+0x2e>
 8003738:	2300      	movs	r3, #0
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	4b21      	ldr	r3, [pc, #132]	@ (80037c4 <BSP_LED_Init+0x9c>)
 800373e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003740:	4a20      	ldr	r2, [pc, #128]	@ (80037c4 <BSP_LED_Init+0x9c>)
 8003742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003746:	6313      	str	r3, [r2, #48]	@ 0x30
 8003748:	4b1e      	ldr	r3, [pc, #120]	@ (80037c4 <BSP_LED_Init+0x9c>)
 800374a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	e010      	b.n	8003778 <BSP_LED_Init+0x50>
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d10d      	bne.n	8003778 <BSP_LED_Init+0x50>
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	4b18      	ldr	r3, [pc, #96]	@ (80037c4 <BSP_LED_Init+0x9c>)
 8003762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003764:	4a17      	ldr	r2, [pc, #92]	@ (80037c4 <BSP_LED_Init+0x9c>)
 8003766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800376a:	6313      	str	r3, [r2, #48]	@ 0x30
 800376c:	4b15      	ldr	r3, [pc, #84]	@ (80037c4 <BSP_LED_Init+0x9c>)
 800376e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	4a13      	ldr	r2, [pc, #76]	@ (80037c8 <BSP_LED_Init+0xa0>)
 800377c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003782:	2301      	movs	r3, #1
 8003784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003786:	2301      	movs	r3, #1
 8003788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800378a:	2302      	movs	r3, #2
 800378c:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	4a0e      	ldr	r2, [pc, #56]	@ (80037cc <BSP_LED_Init+0xa4>)
 8003792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003796:	f107 0214 	add.w	r2, r7, #20
 800379a:	4611      	mov	r1, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f002 fab1 	bl	8005d04 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	4a09      	ldr	r2, [pc, #36]	@ (80037cc <BSP_LED_Init+0xa4>)
 80037a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	4a06      	ldr	r2, [pc, #24]	@ (80037c8 <BSP_LED_Init+0xa0>)
 80037ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037b2:	2200      	movs	r2, #0
 80037b4:	4619      	mov	r1, r3
 80037b6:	f002 fc51 	bl	800605c <HAL_GPIO_WritePin>
}
 80037ba:	bf00      	nop
 80037bc:	3728      	adds	r7, #40	@ 0x28
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40023800 	.word	0x40023800
 80037c8:	0800b604 	.word	0x0800b604
 80037cc:	20000084 	.word	0x20000084

080037d0 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	4a07      	ldr	r2, [pc, #28]	@ (80037fc <BSP_LED_On+0x2c>)
 80037de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	4a06      	ldr	r2, [pc, #24]	@ (8003800 <BSP_LED_On+0x30>)
 80037e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037ea:	2201      	movs	r2, #1
 80037ec:	4619      	mov	r1, r3
 80037ee:	f002 fc35 	bl	800605c <HAL_GPIO_WritePin>
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000084 	.word	0x20000084
 8003800:	0800b604 	.word	0x0800b604

08003804 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	4a07      	ldr	r2, [pc, #28]	@ (8003830 <BSP_LED_Off+0x2c>)
 8003812:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	4a06      	ldr	r2, [pc, #24]	@ (8003834 <BSP_LED_Off+0x30>)
 800381a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800381e:	2200      	movs	r2, #0
 8003820:	4619      	mov	r1, r3
 8003822:	f002 fc1b 	bl	800605c <HAL_GPIO_WritePin>
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000084 	.word	0x20000084
 8003834:	0800b604 	.word	0x0800b604

08003838 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	@ 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a33      	ldr	r2, [pc, #204]	@ (8003914 <I2Cx_MspInit+0xdc>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d15f      	bne.n	800390a <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	4b32      	ldr	r3, [pc, #200]	@ (8003918 <I2Cx_MspInit+0xe0>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003852:	4a31      	ldr	r2, [pc, #196]	@ (8003918 <I2Cx_MspInit+0xe0>)
 8003854:	f043 0304 	orr.w	r3, r3, #4
 8003858:	6313      	str	r3, [r2, #48]	@ 0x30
 800385a:	4b2f      	ldr	r3, [pc, #188]	@ (8003918 <I2Cx_MspInit+0xe0>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	4b2b      	ldr	r3, [pc, #172]	@ (8003918 <I2Cx_MspInit+0xe0>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386e:	4a2a      	ldr	r2, [pc, #168]	@ (8003918 <I2Cx_MspInit+0xe0>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	6313      	str	r3, [r2, #48]	@ 0x30
 8003876:	4b28      	ldr	r3, [pc, #160]	@ (8003918 <I2Cx_MspInit+0xe0>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8003882:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8003888:	2312      	movs	r3, #18
 800388a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800388c:	2300      	movs	r3, #0
 800388e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8003890:	2302      	movs	r3, #2
 8003892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003894:	2304      	movs	r3, #4
 8003896:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003898:	f107 0314 	add.w	r3, r7, #20
 800389c:	4619      	mov	r1, r3
 800389e:	481f      	ldr	r0, [pc, #124]	@ (800391c <I2Cx_MspInit+0xe4>)
 80038a0:	f002 fa30 	bl	8005d04 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80038a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038a8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80038aa:	f107 0314 	add.w	r3, r7, #20
 80038ae:	4619      	mov	r1, r3
 80038b0:	481b      	ldr	r0, [pc, #108]	@ (8003920 <I2Cx_MspInit+0xe8>)
 80038b2:	f002 fa27 	bl	8005d04 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	4b17      	ldr	r3, [pc, #92]	@ (8003918 <I2Cx_MspInit+0xe0>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	4a16      	ldr	r2, [pc, #88]	@ (8003918 <I2Cx_MspInit+0xe0>)
 80038c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038c6:	4b14      	ldr	r3, [pc, #80]	@ (8003918 <I2Cx_MspInit+0xe0>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038ce:	60bb      	str	r3, [r7, #8]
 80038d0:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 80038d2:	4b11      	ldr	r3, [pc, #68]	@ (8003918 <I2Cx_MspInit+0xe0>)
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	4a10      	ldr	r2, [pc, #64]	@ (8003918 <I2Cx_MspInit+0xe0>)
 80038d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038dc:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80038de:	4b0e      	ldr	r3, [pc, #56]	@ (8003918 <I2Cx_MspInit+0xe0>)
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003918 <I2Cx_MspInit+0xe0>)
 80038e4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80038e8:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80038ea:	2200      	movs	r2, #0
 80038ec:	210f      	movs	r1, #15
 80038ee:	2048      	movs	r0, #72	@ 0x48
 80038f0:	f001 fd7d 	bl	80053ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80038f4:	2048      	movs	r0, #72	@ 0x48
 80038f6:	f001 fd96 	bl	8005426 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80038fa:	2200      	movs	r2, #0
 80038fc:	210f      	movs	r1, #15
 80038fe:	2049      	movs	r0, #73	@ 0x49
 8003900:	f001 fd75 	bl	80053ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8003904:	2049      	movs	r0, #73	@ 0x49
 8003906:	f001 fd8e 	bl	8005426 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 800390a:	bf00      	nop
 800390c:	3728      	adds	r7, #40	@ 0x28
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40005c00 	.word	0x40005c00
 8003918:	40023800 	.word	0x40023800
 800391c:	40020000 	.word	0x40020000
 8003920:	40020800 	.word	0x40020800

08003924 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8003928:	4814      	ldr	r0, [pc, #80]	@ (800397c <I2Cx_Init+0x58>)
 800392a:	f003 f859 	bl	80069e0 <HAL_I2C_GetState>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d121      	bne.n	8003978 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8003934:	4b11      	ldr	r3, [pc, #68]	@ (800397c <I2Cx_Init+0x58>)
 8003936:	4a12      	ldr	r2, [pc, #72]	@ (8003980 <I2Cx_Init+0x5c>)
 8003938:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800393a:	4b10      	ldr	r3, [pc, #64]	@ (800397c <I2Cx_Init+0x58>)
 800393c:	4a11      	ldr	r2, [pc, #68]	@ (8003984 <I2Cx_Init+0x60>)
 800393e:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8003940:	4b0e      	ldr	r3, [pc, #56]	@ (800397c <I2Cx_Init+0x58>)
 8003942:	2200      	movs	r2, #0
 8003944:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8003946:	4b0d      	ldr	r3, [pc, #52]	@ (800397c <I2Cx_Init+0x58>)
 8003948:	2200      	movs	r2, #0
 800394a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800394c:	4b0b      	ldr	r3, [pc, #44]	@ (800397c <I2Cx_Init+0x58>)
 800394e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003952:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8003954:	4b09      	ldr	r3, [pc, #36]	@ (800397c <I2Cx_Init+0x58>)
 8003956:	2200      	movs	r2, #0
 8003958:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800395a:	4b08      	ldr	r3, [pc, #32]	@ (800397c <I2Cx_Init+0x58>)
 800395c:	2200      	movs	r2, #0
 800395e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8003960:	4b06      	ldr	r3, [pc, #24]	@ (800397c <I2Cx_Init+0x58>)
 8003962:	2200      	movs	r2, #0
 8003964:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8003966:	4b05      	ldr	r3, [pc, #20]	@ (800397c <I2Cx_Init+0x58>)
 8003968:	2200      	movs	r2, #0
 800396a:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 800396c:	4803      	ldr	r0, [pc, #12]	@ (800397c <I2Cx_Init+0x58>)
 800396e:	f7ff ff63 	bl	8003838 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8003972:	4802      	ldr	r0, [pc, #8]	@ (800397c <I2Cx_Init+0x58>)
 8003974:	f002 fb8c 	bl	8006090 <HAL_I2C_Init>
  }
}
 8003978:	bf00      	nop
 800397a:	bd80      	pop	{r7, pc}
 800397c:	200005a4 	.word	0x200005a4
 8003980:	40005c00 	.word	0x40005c00
 8003984:	000186a0 	.word	0x000186a0

08003988 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	603b      	str	r3, [r7, #0]
 8003992:	4b13      	ldr	r3, [pc, #76]	@ (80039e0 <I2Cx_ITConfig+0x58>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	4a12      	ldr	r2, [pc, #72]	@ (80039e0 <I2Cx_ITConfig+0x58>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	6313      	str	r3, [r2, #48]	@ 0x30
 800399e:	4b10      	ldr	r3, [pc, #64]	@ (80039e0 <I2Cx_ITConfig+0x58>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80039aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80039b0:	2301      	movs	r3, #1
 80039b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80039b4:	2300      	movs	r3, #0
 80039b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80039b8:	4b0a      	ldr	r3, [pc, #40]	@ (80039e4 <I2Cx_ITConfig+0x5c>)
 80039ba:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80039bc:	1d3b      	adds	r3, r7, #4
 80039be:	4619      	mov	r1, r3
 80039c0:	4809      	ldr	r0, [pc, #36]	@ (80039e8 <I2Cx_ITConfig+0x60>)
 80039c2:	f002 f99f 	bl	8005d04 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80039c6:	2200      	movs	r2, #0
 80039c8:	210f      	movs	r1, #15
 80039ca:	2028      	movs	r0, #40	@ 0x28
 80039cc:	f001 fd0f 	bl	80053ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80039d0:	2028      	movs	r0, #40	@ 0x28
 80039d2:	f001 fd28 	bl	8005426 <HAL_NVIC_EnableIRQ>
}
 80039d6:	bf00      	nop
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800
 80039e4:	10210000 	.word	0x10210000
 80039e8:	40020000 	.word	0x40020000

080039ec <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af04      	add	r7, sp, #16
 80039f2:	4603      	mov	r3, r0
 80039f4:	71fb      	strb	r3, [r7, #7]
 80039f6:	460b      	mov	r3, r1
 80039f8:	71bb      	strb	r3, [r7, #6]
 80039fa:	4613      	mov	r3, r2
 80039fc:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	b299      	uxth	r1, r3
 8003a06:	79bb      	ldrb	r3, [r7, #6]
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a38 <I2Cx_WriteData+0x4c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	9302      	str	r3, [sp, #8]
 8003a10:	2301      	movs	r3, #1
 8003a12:	9301      	str	r3, [sp, #4]
 8003a14:	1d7b      	adds	r3, r7, #5
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	2301      	movs	r3, #1
 8003a1a:	4808      	ldr	r0, [pc, #32]	@ (8003a3c <I2Cx_WriteData+0x50>)
 8003a1c:	f002 fcc0 	bl	80063a0 <HAL_I2C_Mem_Write>
 8003a20:	4603      	mov	r3, r0
 8003a22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003a2a:	f000 f863 	bl	8003af4 <I2Cx_Error>
  }        
}
 8003a2e:	bf00      	nop
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	2000008c 	.word	0x2000008c
 8003a3c:	200005a4 	.word	0x200005a4

08003a40 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af04      	add	r7, sp, #16
 8003a46:	4603      	mov	r3, r0
 8003a48:	460a      	mov	r2, r1
 8003a4a:	71fb      	strb	r3, [r7, #7]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8003a54:	2300      	movs	r3, #0
 8003a56:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8003a58:	79fb      	ldrb	r3, [r7, #7]
 8003a5a:	b299      	uxth	r1, r3
 8003a5c:	79bb      	ldrb	r3, [r7, #6]
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	4b0b      	ldr	r3, [pc, #44]	@ (8003a90 <I2Cx_ReadData+0x50>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	9302      	str	r3, [sp, #8]
 8003a66:	2301      	movs	r3, #1
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	f107 030e 	add.w	r3, r7, #14
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	2301      	movs	r3, #1
 8003a72:	4808      	ldr	r0, [pc, #32]	@ (8003a94 <I2Cx_ReadData+0x54>)
 8003a74:	f002 fd8e 	bl	8006594 <HAL_I2C_Mem_Read>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003a82:	f000 f837 	bl	8003af4 <I2Cx_Error>
  
  }
  return value;
 8003a86:	7bbb      	ldrb	r3, [r7, #14]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	2000008c 	.word	0x2000008c
 8003a94:	200005a4 	.word	0x200005a4

08003a98 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af04      	add	r7, sp, #16
 8003a9e:	603a      	str	r2, [r7, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	71fb      	strb	r3, [r7, #7]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	71bb      	strb	r3, [r7, #6]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	b299      	uxth	r1, r3
 8003ab6:	79bb      	ldrb	r3, [r7, #6]
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	4b0c      	ldr	r3, [pc, #48]	@ (8003aec <I2Cx_ReadBuffer+0x54>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	9302      	str	r3, [sp, #8]
 8003ac0:	88bb      	ldrh	r3, [r7, #4]
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	2301      	movs	r3, #1
 8003aca:	4809      	ldr	r0, [pc, #36]	@ (8003af0 <I2Cx_ReadBuffer+0x58>)
 8003acc:	f002 fd62 	bl	8006594 <HAL_I2C_Mem_Read>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e002      	b.n	8003ae4 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003ade:	f000 f809 	bl	8003af4 <I2Cx_Error>

    return 1;
 8003ae2:	2301      	movs	r3, #1
  }
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	2000008c 	.word	0x2000008c
 8003af0:	200005a4 	.word	0x200005a4

08003af4 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003af8:	4803      	ldr	r0, [pc, #12]	@ (8003b08 <I2Cx_Error+0x14>)
 8003afa:	f002 fc0d 	bl	8006318 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8003afe:	f7ff ff11 	bl	8003924 <I2Cx_Init>
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	200005a4 	.word	0x200005a4

08003b0c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003b10:	4819      	ldr	r0, [pc, #100]	@ (8003b78 <SPIx_Init+0x6c>)
 8003b12:	f005 f9f2 	bl	8008efa <HAL_SPI_GetState>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d12b      	bne.n	8003b74 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003b1c:	4b16      	ldr	r3, [pc, #88]	@ (8003b78 <SPIx_Init+0x6c>)
 8003b1e:	4a17      	ldr	r2, [pc, #92]	@ (8003b7c <SPIx_Init+0x70>)
 8003b20:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003b22:	4b15      	ldr	r3, [pc, #84]	@ (8003b78 <SPIx_Init+0x6c>)
 8003b24:	2218      	movs	r2, #24
 8003b26:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003b28:	4b13      	ldr	r3, [pc, #76]	@ (8003b78 <SPIx_Init+0x6c>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003b2e:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <SPIx_Init+0x6c>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003b34:	4b10      	ldr	r3, [pc, #64]	@ (8003b78 <SPIx_Init+0x6c>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b78 <SPIx_Init+0x6c>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003b40:	4b0d      	ldr	r3, [pc, #52]	@ (8003b78 <SPIx_Init+0x6c>)
 8003b42:	2207      	movs	r2, #7
 8003b44:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003b46:	4b0c      	ldr	r3, [pc, #48]	@ (8003b78 <SPIx_Init+0x6c>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b78 <SPIx_Init+0x6c>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003b52:	4b09      	ldr	r3, [pc, #36]	@ (8003b78 <SPIx_Init+0x6c>)
 8003b54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b58:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003b5a:	4b07      	ldr	r3, [pc, #28]	@ (8003b78 <SPIx_Init+0x6c>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003b60:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <SPIx_Init+0x6c>)
 8003b62:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b66:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8003b68:	4803      	ldr	r0, [pc, #12]	@ (8003b78 <SPIx_Init+0x6c>)
 8003b6a:	f000 f853 	bl	8003c14 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003b6e:	4802      	ldr	r0, [pc, #8]	@ (8003b78 <SPIx_Init+0x6c>)
 8003b70:	f004 fc39 	bl	80083e6 <HAL_SPI_Init>
  } 
}
 8003b74:	bf00      	nop
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	200005f8 	.word	0x200005f8
 8003b7c:	40015000 	.word	0x40015000

08003b80 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	4b09      	ldr	r3, [pc, #36]	@ (8003bb8 <SPIx_Read+0x38>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f107 0108 	add.w	r1, r7, #8
 8003b9a:	4808      	ldr	r0, [pc, #32]	@ (8003bbc <SPIx_Read+0x3c>)
 8003b9c:	f004 fe20 	bl	80087e0 <HAL_SPI_Receive>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003baa:	f000 f827 	bl	8003bfc <SPIx_Error>
  }
  
  return readvalue;
 8003bae:	68bb      	ldr	r3, [r7, #8]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20000090 	.word	0x20000090
 8003bbc:	200005f8 	.word	0x200005f8

08003bc0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8003bce:	4b09      	ldr	r3, [pc, #36]	@ (8003bf4 <SPIx_Write+0x34>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	1db9      	adds	r1, r7, #6
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	4808      	ldr	r0, [pc, #32]	@ (8003bf8 <SPIx_Write+0x38>)
 8003bd8:	f004 fcac 	bl	8008534 <HAL_SPI_Transmit>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003be6:	f000 f809 	bl	8003bfc <SPIx_Error>
  }
}
 8003bea:	bf00      	nop
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000090 	.word	0x20000090
 8003bf8:	200005f8 	.word	0x200005f8

08003bfc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003c00:	4803      	ldr	r0, [pc, #12]	@ (8003c10 <SPIx_Error+0x14>)
 8003c02:	f004 fc5b 	bl	80084bc <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003c06:	f7ff ff81 	bl	8003b0c <SPIx_Init>
}
 8003c0a:	bf00      	nop
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	200005f8 	.word	0x200005f8

08003c14 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08a      	sub	sp, #40	@ 0x28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	4b17      	ldr	r3, [pc, #92]	@ (8003c80 <SPIx_MspInit+0x6c>)
 8003c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c24:	4a16      	ldr	r2, [pc, #88]	@ (8003c80 <SPIx_MspInit+0x6c>)
 8003c26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c2c:	4b14      	ldr	r3, [pc, #80]	@ (8003c80 <SPIx_MspInit+0x6c>)
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	4b10      	ldr	r3, [pc, #64]	@ (8003c80 <SPIx_MspInit+0x6c>)
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c40:	4a0f      	ldr	r2, [pc, #60]	@ (8003c80 <SPIx_MspInit+0x6c>)
 8003c42:	f043 0320 	orr.w	r3, r3, #32
 8003c46:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c48:	4b0d      	ldr	r3, [pc, #52]	@ (8003c80 <SPIx_MspInit+0x6c>)
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003c54:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003c5e:	2302      	movs	r3, #2
 8003c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003c62:	2301      	movs	r3, #1
 8003c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003c66:	2305      	movs	r3, #5
 8003c68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8003c6a:	f107 0314 	add.w	r3, r7, #20
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4804      	ldr	r0, [pc, #16]	@ (8003c84 <SPIx_MspInit+0x70>)
 8003c72:	f002 f847 	bl	8005d04 <HAL_GPIO_Init>
}
 8003c76:	bf00      	nop
 8003c78:	3728      	adds	r7, #40	@ 0x28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800
 8003c84:	40021400 	.word	0x40021400

08003c88 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8003c8e:	4b36      	ldr	r3, [pc, #216]	@ (8003d68 <LCD_IO_Init+0xe0>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d164      	bne.n	8003d60 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8003c96:	4b34      	ldr	r3, [pc, #208]	@ (8003d68 <LCD_IO_Init+0xe0>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	4b32      	ldr	r3, [pc, #200]	@ (8003d6c <LCD_IO_Init+0xe4>)
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca4:	4a31      	ldr	r2, [pc, #196]	@ (8003d6c <LCD_IO_Init+0xe4>)
 8003ca6:	f043 0308 	orr.w	r3, r3, #8
 8003caa:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cac:	4b2f      	ldr	r3, [pc, #188]	@ (8003d6c <LCD_IO_Init+0xe4>)
 8003cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003cb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003cbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003cca:	f107 030c 	add.w	r3, r7, #12
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4827      	ldr	r0, [pc, #156]	@ (8003d70 <LCD_IO_Init+0xe8>)
 8003cd2:	f002 f817 	bl	8005d04 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	607b      	str	r3, [r7, #4]
 8003cda:	4b24      	ldr	r3, [pc, #144]	@ (8003d6c <LCD_IO_Init+0xe4>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cde:	4a23      	ldr	r2, [pc, #140]	@ (8003d6c <LCD_IO_Init+0xe4>)
 8003ce0:	f043 0308 	orr.w	r3, r3, #8
 8003ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ce6:	4b21      	ldr	r3, [pc, #132]	@ (8003d6c <LCD_IO_Init+0xe4>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	607b      	str	r3, [r7, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003cf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cf6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003d00:	2302      	movs	r3, #2
 8003d02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003d04:	f107 030c 	add.w	r3, r7, #12
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4819      	ldr	r0, [pc, #100]	@ (8003d70 <LCD_IO_Init+0xe8>)
 8003d0c:	f001 fffa 	bl	8005d04 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003d10:	2300      	movs	r3, #0
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	4b15      	ldr	r3, [pc, #84]	@ (8003d6c <LCD_IO_Init+0xe4>)
 8003d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d18:	4a14      	ldr	r2, [pc, #80]	@ (8003d6c <LCD_IO_Init+0xe4>)
 8003d1a:	f043 0304 	orr.w	r3, r3, #4
 8003d1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d20:	4b12      	ldr	r3, [pc, #72]	@ (8003d6c <LCD_IO_Init+0xe4>)
 8003d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	603b      	str	r3, [r7, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003d2c:	2304      	movs	r3, #4
 8003d2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003d30:	2301      	movs	r3, #1
 8003d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003d3c:	f107 030c 	add.w	r3, r7, #12
 8003d40:	4619      	mov	r1, r3
 8003d42:	480c      	ldr	r0, [pc, #48]	@ (8003d74 <LCD_IO_Init+0xec>)
 8003d44:	f001 ffde 	bl	8005d04 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2104      	movs	r1, #4
 8003d4c:	4809      	ldr	r0, [pc, #36]	@ (8003d74 <LCD_IO_Init+0xec>)
 8003d4e:	f002 f985 	bl	800605c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003d52:	2201      	movs	r2, #1
 8003d54:	2104      	movs	r1, #4
 8003d56:	4807      	ldr	r0, [pc, #28]	@ (8003d74 <LCD_IO_Init+0xec>)
 8003d58:	f002 f980 	bl	800605c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8003d5c:	f7ff fed6 	bl	8003b0c <SPIx_Init>
  }
}
 8003d60:	bf00      	nop
 8003d62:	3720      	adds	r7, #32
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20000650 	.word	0x20000650
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40020c00 	.word	0x40020c00
 8003d74:	40020800 	.word	0x40020800

08003d78 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003d82:	2201      	movs	r2, #1
 8003d84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003d88:	480a      	ldr	r0, [pc, #40]	@ (8003db4 <LCD_IO_WriteData+0x3c>)
 8003d8a:	f002 f967 	bl	800605c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8003d8e:	2200      	movs	r2, #0
 8003d90:	2104      	movs	r1, #4
 8003d92:	4809      	ldr	r0, [pc, #36]	@ (8003db8 <LCD_IO_WriteData+0x40>)
 8003d94:	f002 f962 	bl	800605c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003d98:	88fb      	ldrh	r3, [r7, #6]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff ff10 	bl	8003bc0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003da0:	2201      	movs	r2, #1
 8003da2:	2104      	movs	r1, #4
 8003da4:	4804      	ldr	r0, [pc, #16]	@ (8003db8 <LCD_IO_WriteData+0x40>)
 8003da6:	f002 f959 	bl	800605c <HAL_GPIO_WritePin>
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40020c00 	.word	0x40020c00
 8003db8:	40020800 	.word	0x40020800

08003dbc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003dcc:	480a      	ldr	r0, [pc, #40]	@ (8003df8 <LCD_IO_WriteReg+0x3c>)
 8003dce:	f002 f945 	bl	800605c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2104      	movs	r1, #4
 8003dd6:	4809      	ldr	r0, [pc, #36]	@ (8003dfc <LCD_IO_WriteReg+0x40>)
 8003dd8:	f002 f940 	bl	800605c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003ddc:	79fb      	ldrb	r3, [r7, #7]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff feed 	bl	8003bc0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003de6:	2201      	movs	r2, #1
 8003de8:	2104      	movs	r1, #4
 8003dea:	4804      	ldr	r0, [pc, #16]	@ (8003dfc <LCD_IO_WriteReg+0x40>)
 8003dec:	f002 f936 	bl	800605c <HAL_GPIO_WritePin>
}
 8003df0:	bf00      	nop
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40020c00 	.word	0x40020c00
 8003dfc:	40020800 	.word	0x40020800

08003e00 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	460a      	mov	r2, r1
 8003e0a:	80fb      	strh	r3, [r7, #6]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003e14:	2200      	movs	r2, #0
 8003e16:	2104      	movs	r1, #4
 8003e18:	4810      	ldr	r0, [pc, #64]	@ (8003e5c <LCD_IO_ReadData+0x5c>)
 8003e1a:	f002 f91f 	bl	800605c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e24:	480e      	ldr	r0, [pc, #56]	@ (8003e60 <LCD_IO_ReadData+0x60>)
 8003e26:	f002 f919 	bl	800605c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8003e2a:	88fb      	ldrh	r3, [r7, #6]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff fec7 	bl	8003bc0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8003e32:	797b      	ldrb	r3, [r7, #5]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fea3 	bl	8003b80 <SPIx_Read>
 8003e3a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e42:	4807      	ldr	r0, [pc, #28]	@ (8003e60 <LCD_IO_ReadData+0x60>)
 8003e44:	f002 f90a 	bl	800605c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003e48:	2201      	movs	r2, #1
 8003e4a:	2104      	movs	r1, #4
 8003e4c:	4803      	ldr	r0, [pc, #12]	@ (8003e5c <LCD_IO_ReadData+0x5c>)
 8003e4e:	f002 f905 	bl	800605c <HAL_GPIO_WritePin>
  
  return readvalue;
 8003e52:	68fb      	ldr	r3, [r7, #12]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40020800 	.word	0x40020800
 8003e60:	40020c00 	.word	0x40020c00

08003e64 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f001 f9bf 	bl	80051f0 <HAL_Delay>
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8003e7e:	f7ff fd51 	bl	8003924 <I2Cx_Init>
}
 8003e82:	bf00      	nop
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8003e8a:	f7ff fd7d 	bl	8003988 <I2Cx_ITConfig>
}
 8003e8e:	bf00      	nop
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	4603      	mov	r3, r0
 8003e9a:	71fb      	strb	r3, [r7, #7]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	71bb      	strb	r3, [r7, #6]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8003ea4:	797a      	ldrb	r2, [r7, #5]
 8003ea6:	79b9      	ldrb	r1, [r7, #6]
 8003ea8:	79fb      	ldrb	r3, [r7, #7]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fd9e 	bl	80039ec <I2Cx_WriteData>
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	460a      	mov	r2, r1
 8003ec2:	71fb      	strb	r3, [r7, #7]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8003ec8:	79ba      	ldrb	r2, [r7, #6]
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff fdb6 	bl	8003a40 <I2Cx_ReadData>
 8003ed4:	4603      	mov	r3, r0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	603a      	str	r2, [r7, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4603      	mov	r3, r0
 8003eea:	71fb      	strb	r3, [r7, #7]
 8003eec:	460b      	mov	r3, r1
 8003eee:	71bb      	strb	r3, [r7, #6]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8003ef4:	88bb      	ldrh	r3, [r7, #4]
 8003ef6:	79b9      	ldrb	r1, [r7, #6]
 8003ef8:	79f8      	ldrb	r0, [r7, #7]
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	f7ff fdcc 	bl	8003a98 <I2Cx_ReadBuffer>
 8003f00:	4603      	mov	r3, r0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f001 f96c 	bl	80051f0 <HAL_Delay>
}
 8003f18:	bf00      	nop
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <BSP_LCD_Init_Flipped>:
/**
 * @brief  Initializes the LCD for flipped operation.
 * LCD orientation is rotated by 180°.
 * @retval LCD state
 */
uint8_t BSP_LCD_Init_Flipped(void){
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
	flippedLcd = true;
 8003f24:	4b03      	ldr	r3, [pc, #12]	@ (8003f34 <BSP_LCD_Init_Flipped+0x14>)
 8003f26:	2201      	movs	r2, #1
 8003f28:	701a      	strb	r2, [r3, #0]
	return BSP_LCD_Init();
 8003f2a:	f000 f805 	bl	8003f38 <BSP_LCD_Init>
 8003f2e:	4603      	mov	r3, r0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	2000078c 	.word	0x2000078c

08003f38 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8003f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ff4 <BSP_LCD_Init+0xbc>)
 8003f3e:	4a2e      	ldr	r2, [pc, #184]	@ (8003ff8 <BSP_LCD_Init+0xc0>)
 8003f40:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8003f42:	4b2c      	ldr	r3, [pc, #176]	@ (8003ff4 <BSP_LCD_Init+0xbc>)
 8003f44:	2209      	movs	r2, #9
 8003f46:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003f48:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff4 <BSP_LCD_Init+0xbc>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8003f4e:	4b29      	ldr	r3, [pc, #164]	@ (8003ff4 <BSP_LCD_Init+0xbc>)
 8003f50:	221d      	movs	r2, #29
 8003f52:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003f54:	4b27      	ldr	r3, [pc, #156]	@ (8003ff4 <BSP_LCD_Init+0xbc>)
 8003f56:	2203      	movs	r2, #3
 8003f58:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8003f5a:	4b26      	ldr	r3, [pc, #152]	@ (8003ff4 <BSP_LCD_Init+0xbc>)
 8003f5c:	f240 120d 	movw	r2, #269	@ 0x10d
 8003f60:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8003f62:	4b24      	ldr	r3, [pc, #144]	@ (8003ff4 <BSP_LCD_Init+0xbc>)
 8003f64:	f240 1243 	movw	r2, #323	@ 0x143
 8003f68:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8003f6a:	4b22      	ldr	r3, [pc, #136]	@ (8003ff4 <BSP_LCD_Init+0xbc>)
 8003f6c:	f240 1217 	movw	r2, #279	@ 0x117
 8003f70:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8003f72:	4b20      	ldr	r3, [pc, #128]	@ (8003ff4 <BSP_LCD_Init+0xbc>)
 8003f74:	f240 1247 	movw	r2, #327	@ 0x147
 8003f78:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8003f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ff4 <BSP_LCD_Init+0xbc>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8003f82:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff4 <BSP_LCD_Init+0xbc>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8003f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ff4 <BSP_LCD_Init+0xbc>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003f92:	4b1a      	ldr	r3, [pc, #104]	@ (8003ffc <BSP_LCD_Init+0xc4>)
 8003f94:	2208      	movs	r2, #8
 8003f96:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003f98:	4b18      	ldr	r3, [pc, #96]	@ (8003ffc <BSP_LCD_Init+0xc4>)
 8003f9a:	22c0      	movs	r2, #192	@ 0xc0
 8003f9c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003f9e:	4b17      	ldr	r3, [pc, #92]	@ (8003ffc <BSP_LCD_Init+0xc4>)
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003fa4:	4b15      	ldr	r3, [pc, #84]	@ (8003ffc <BSP_LCD_Init+0xc4>)
 8003fa6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003faa:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003fac:	4813      	ldr	r0, [pc, #76]	@ (8003ffc <BSP_LCD_Init+0xc4>)
 8003fae:	f003 ffd1 	bl	8007f54 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003fb2:	4b10      	ldr	r3, [pc, #64]	@ (8003ff4 <BSP_LCD_Init+0xbc>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff4 <BSP_LCD_Init+0xbc>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff4 <BSP_LCD_Init+0xbc>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff4 <BSP_LCD_Init+0xbc>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8003fca:	f000 fbb5 	bl	8004738 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003fce:	4809      	ldr	r0, [pc, #36]	@ (8003ff4 <BSP_LCD_Init+0xbc>)
 8003fd0:	f003 f86c 	bl	80070ac <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8004000 <BSP_LCD_Init+0xc8>)
 8003fd6:	4a0b      	ldr	r2, [pc, #44]	@ (8004004 <BSP_LCD_Init+0xcc>)
 8003fd8:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8003fda:	4b09      	ldr	r3, [pc, #36]	@ (8004000 <BSP_LCD_Init+0xc8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8003fe2:	f000 fdbd 	bl	8004b60 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003fe6:	4808      	ldr	r0, [pc, #32]	@ (8004008 <BSP_LCD_Init+0xd0>)
 8003fe8:	f000 f8ce 	bl	8004188 <BSP_LCD_SetFont>

  return LCD_OK;
 8003fec:	2300      	movs	r3, #0
}  
 8003fee:	4618      	mov	r0, r3
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000654 	.word	0x20000654
 8003ff8:	40016800 	.word	0x40016800
 8003ffc:	2000073c 	.word	0x2000073c
 8004000:	20000788 	.word	0x20000788
 8004004:	20000024 	.word	0x20000024
 8004008:	20000094 	.word	0x20000094

0800400c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8004010:	4b03      	ldr	r3, [pc, #12]	@ (8004020 <BSP_LCD_GetXSize+0x14>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004016:	4798      	blx	r3
 8004018:	4603      	mov	r3, r0
}
 800401a:	4618      	mov	r0, r3
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	20000788 	.word	0x20000788

08004024 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8004028:	4b03      	ldr	r3, [pc, #12]	@ (8004038 <BSP_LCD_GetYSize+0x14>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402e:	4798      	blx	r3
 8004030:	4603      	mov	r3, r0
}
 8004032:	4618      	mov	r0, r3
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000788 	.word	0x20000788

0800403c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800403c:	b580      	push	{r7, lr}
 800403e:	b090      	sub	sp, #64	@ 0x40
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	6039      	str	r1, [r7, #0]
 8004046:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800404c:	f7ff ffde 	bl	800400c <BSP_LCD_GetXSize>
 8004050:	4603      	mov	r3, r0
 8004052:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004058:	f7ff ffe4 	bl	8004024 <BSP_LCD_GetYSize>
 800405c:	4603      	mov	r3, r0
 800405e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004060:	2300      	movs	r3, #0
 8004062:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8004068:	23ff      	movs	r3, #255	@ 0xff
 800406a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8004070:	2300      	movs	r3, #0
 8004072:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004082:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004086:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004088:	2307      	movs	r3, #7
 800408a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800408c:	f7ff ffbe 	bl	800400c <BSP_LCD_GetXSize>
 8004090:	4603      	mov	r3, r0
 8004092:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8004094:	f7ff ffc6 	bl	8004024 <BSP_LCD_GetYSize>
 8004098:	4603      	mov	r3, r0
 800409a:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800409c:	88fa      	ldrh	r2, [r7, #6]
 800409e:	f107 030c 	add.w	r3, r7, #12
 80040a2:	4619      	mov	r1, r3
 80040a4:	4814      	ldr	r0, [pc, #80]	@ (80040f8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80040a6:	f003 f8db 	bl	8007260 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80040aa:	88fa      	ldrh	r2, [r7, #6]
 80040ac:	4913      	ldr	r1, [pc, #76]	@ (80040fc <BSP_LCD_LayerDefaultInit+0xc0>)
 80040ae:	4613      	mov	r3, r2
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	3304      	adds	r3, #4
 80040ba:	f04f 32ff 	mov.w	r2, #4294967295
 80040be:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80040c0:	88fa      	ldrh	r2, [r7, #6]
 80040c2:	490e      	ldr	r1, [pc, #56]	@ (80040fc <BSP_LCD_LayerDefaultInit+0xc0>)
 80040c4:	4613      	mov	r3, r2
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	3308      	adds	r3, #8
 80040d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004100 <BSP_LCD_LayerDefaultInit+0xc4>)
 80040d2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80040d4:	88fa      	ldrh	r2, [r7, #6]
 80040d6:	4909      	ldr	r1, [pc, #36]	@ (80040fc <BSP_LCD_LayerDefaultInit+0xc0>)
 80040d8:	4613      	mov	r3, r2
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80040e6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80040e8:	4803      	ldr	r0, [pc, #12]	@ (80040f8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80040ea:	f003 f8f7 	bl	80072dc <HAL_LTDC_EnableDither>
}
 80040ee:	bf00      	nop
 80040f0:	3740      	adds	r7, #64	@ 0x40
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000654 	.word	0x20000654
 80040fc:	20000770 	.word	0x20000770
 8004100:	20000094 	.word	0x20000094

08004104 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800410c:	4a04      	ldr	r2, [pc, #16]	@ (8004120 <BSP_LCD_SelectLayer+0x1c>)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6013      	str	r3, [r2, #0]
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	2000076c 	.word	0x2000076c

08004124 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800412c:	4b07      	ldr	r3, [pc, #28]	@ (800414c <BSP_LCD_SetTextColor+0x28>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4907      	ldr	r1, [pc, #28]	@ (8004150 <BSP_LCD_SetTextColor+0x2c>)
 8004132:	4613      	mov	r3, r2
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	4413      	add	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	601a      	str	r2, [r3, #0]
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	2000076c 	.word	0x2000076c
 8004150:	20000770 	.word	0x20000770

08004154 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800415c:	4b08      	ldr	r3, [pc, #32]	@ (8004180 <BSP_LCD_SetBackColor+0x2c>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	4908      	ldr	r1, [pc, #32]	@ (8004184 <BSP_LCD_SetBackColor+0x30>)
 8004162:	4613      	mov	r3, r2
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	440b      	add	r3, r1
 800416c:	3304      	adds	r3, #4
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	601a      	str	r2, [r3, #0]
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	2000076c 	.word	0x2000076c
 8004184:	20000770 	.word	0x20000770

08004188 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8004190:	4b08      	ldr	r3, [pc, #32]	@ (80041b4 <BSP_LCD_SetFont+0x2c>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4908      	ldr	r1, [pc, #32]	@ (80041b8 <BSP_LCD_SetFont+0x30>)
 8004196:	4613      	mov	r3, r2
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	3308      	adds	r3, #8
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	601a      	str	r2, [r3, #0]
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	2000076c 	.word	0x2000076c
 80041b8:	20000770 	.word	0x20000770

080041bc <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80041bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041be:	b085      	sub	sp, #20
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80041c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004204 <BSP_LCD_Clear+0x48>)
 80041c6:	681c      	ldr	r4, [r3, #0]
 80041c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004204 <BSP_LCD_Clear+0x48>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a0e      	ldr	r2, [pc, #56]	@ (8004208 <BSP_LCD_Clear+0x4c>)
 80041ce:	2134      	movs	r1, #52	@ 0x34
 80041d0:	fb01 f303 	mul.w	r3, r1, r3
 80041d4:	4413      	add	r3, r2
 80041d6:	335c      	adds	r3, #92	@ 0x5c
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	461e      	mov	r6, r3
 80041dc:	f7ff ff16 	bl	800400c <BSP_LCD_GetXSize>
 80041e0:	4605      	mov	r5, r0
 80041e2:	f7ff ff1f 	bl	8004024 <BSP_LCD_GetYSize>
 80041e6:	4602      	mov	r2, r0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	9301      	str	r3, [sp, #4]
 80041ec:	2300      	movs	r3, #0
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	4613      	mov	r3, r2
 80041f2:	462a      	mov	r2, r5
 80041f4:	4631      	mov	r1, r6
 80041f6:	4620      	mov	r0, r4
 80041f8:	f000 fc7a 	bl	8004af0 <FillBuffer>
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004204:	2000076c 	.word	0x2000076c
 8004208:	20000654 	.word	0x20000654

0800420c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	80fb      	strh	r3, [r7, #6]
 8004216:	460b      	mov	r3, r1
 8004218:	80bb      	strh	r3, [r7, #4]
 800421a:	4613      	mov	r3, r2
 800421c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800421e:	4b1b      	ldr	r3, [pc, #108]	@ (800428c <BSP_LCD_DisplayChar+0x80>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	491b      	ldr	r1, [pc, #108]	@ (8004290 <BSP_LCD_DisplayChar+0x84>)
 8004224:	4613      	mov	r3, r2
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	3308      	adds	r3, #8
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6819      	ldr	r1, [r3, #0]
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800423a:	4b14      	ldr	r3, [pc, #80]	@ (800428c <BSP_LCD_DisplayChar+0x80>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4c14      	ldr	r4, [pc, #80]	@ (8004290 <BSP_LCD_DisplayChar+0x84>)
 8004240:	4613      	mov	r3, r2
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4423      	add	r3, r4
 800424a:	3308      	adds	r3, #8
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004250:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004254:	4b0d      	ldr	r3, [pc, #52]	@ (800428c <BSP_LCD_DisplayChar+0x80>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	4c0d      	ldr	r4, [pc, #52]	@ (8004290 <BSP_LCD_DisplayChar+0x84>)
 800425a:	4613      	mov	r3, r2
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	4413      	add	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4423      	add	r3, r4
 8004264:	3308      	adds	r3, #8
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	889b      	ldrh	r3, [r3, #4]
 800426a:	3307      	adds	r3, #7
 800426c:	2b00      	cmp	r3, #0
 800426e:	da00      	bge.n	8004272 <BSP_LCD_DisplayChar+0x66>
 8004270:	3307      	adds	r3, #7
 8004272:	10db      	asrs	r3, r3, #3
 8004274:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004278:	18ca      	adds	r2, r1, r3
 800427a:	88b9      	ldrh	r1, [r7, #4]
 800427c:	88fb      	ldrh	r3, [r7, #6]
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fb7c 	bl	800497c <DrawChar>
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	bd90      	pop	{r4, r7, pc}
 800428c:	2000076c 	.word	0x2000076c
 8004290:	20000770 	.word	0x20000770

08004294 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8004294:	b5b0      	push	{r4, r5, r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	60ba      	str	r2, [r7, #8]
 800429c:	461a      	mov	r2, r3
 800429e:	4603      	mov	r3, r0
 80042a0:	81fb      	strh	r3, [r7, #14]
 80042a2:	460b      	mov	r3, r1
 80042a4:	81bb      	strh	r3, [r7, #12]
 80042a6:	4613      	mov	r3, r2
 80042a8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80042aa:	2301      	movs	r3, #1
 80042ac:	83fb      	strh	r3, [r7, #30]
 80042ae:	2300      	movs	r3, #0
 80042b0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80042b2:	2300      	movs	r3, #0
 80042b4:	61bb      	str	r3, [r7, #24]
 80042b6:	2300      	movs	r3, #0
 80042b8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80042be:	e002      	b.n	80042c6 <BSP_LCD_DisplayStringAt+0x32>
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	3301      	adds	r3, #1
 80042c4:	61bb      	str	r3, [r7, #24]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	617a      	str	r2, [r7, #20]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f6      	bne.n	80042c0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80042d2:	f7ff fe9b 	bl	800400c <BSP_LCD_GetXSize>
 80042d6:	4601      	mov	r1, r0
 80042d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004408 <BSP_LCD_DisplayStringAt+0x174>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	484b      	ldr	r0, [pc, #300]	@ (800440c <BSP_LCD_DisplayStringAt+0x178>)
 80042de:	4613      	mov	r3, r2
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4403      	add	r3, r0
 80042e8:	3308      	adds	r3, #8
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	889b      	ldrh	r3, [r3, #4]
 80042ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80042f2:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d01c      	beq.n	8004334 <BSP_LCD_DisplayStringAt+0xa0>
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	dc33      	bgt.n	8004366 <BSP_LCD_DisplayStringAt+0xd2>
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d002      	beq.n	8004308 <BSP_LCD_DisplayStringAt+0x74>
 8004302:	2b02      	cmp	r3, #2
 8004304:	d019      	beq.n	800433a <BSP_LCD_DisplayStringAt+0xa6>
 8004306:	e02e      	b.n	8004366 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	1ad1      	subs	r1, r2, r3
 800430e:	4b3e      	ldr	r3, [pc, #248]	@ (8004408 <BSP_LCD_DisplayStringAt+0x174>)
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	483e      	ldr	r0, [pc, #248]	@ (800440c <BSP_LCD_DisplayStringAt+0x178>)
 8004314:	4613      	mov	r3, r2
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4403      	add	r3, r0
 800431e:	3308      	adds	r3, #8
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	889b      	ldrh	r3, [r3, #4]
 8004324:	fb01 f303 	mul.w	r3, r1, r3
 8004328:	085b      	lsrs	r3, r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	89fb      	ldrh	r3, [r7, #14]
 800432e:	4413      	add	r3, r2
 8004330:	83fb      	strh	r3, [r7, #30]
      break;
 8004332:	e01b      	b.n	800436c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8004334:	89fb      	ldrh	r3, [r7, #14]
 8004336:	83fb      	strh	r3, [r7, #30]
      break;
 8004338:	e018      	b.n	800436c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	b299      	uxth	r1, r3
 8004342:	4b31      	ldr	r3, [pc, #196]	@ (8004408 <BSP_LCD_DisplayStringAt+0x174>)
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	4831      	ldr	r0, [pc, #196]	@ (800440c <BSP_LCD_DisplayStringAt+0x178>)
 8004348:	4613      	mov	r3, r2
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	4413      	add	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4403      	add	r3, r0
 8004352:	3308      	adds	r3, #8
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	889b      	ldrh	r3, [r3, #4]
 8004358:	fb11 f303 	smulbb	r3, r1, r3
 800435c:	b29a      	uxth	r2, r3
 800435e:	89fb      	ldrh	r3, [r7, #14]
 8004360:	4413      	add	r3, r2
 8004362:	83fb      	strh	r3, [r7, #30]
      break;
 8004364:	e002      	b.n	800436c <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8004366:	89fb      	ldrh	r3, [r7, #14]
 8004368:	83fb      	strh	r3, [r7, #30]
      break;
 800436a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800436c:	e01a      	b.n	80043a4 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	781a      	ldrb	r2, [r3, #0]
 8004372:	89b9      	ldrh	r1, [r7, #12]
 8004374:	8bfb      	ldrh	r3, [r7, #30]
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff ff48 	bl	800420c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800437c:	4b22      	ldr	r3, [pc, #136]	@ (8004408 <BSP_LCD_DisplayStringAt+0x174>)
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4922      	ldr	r1, [pc, #136]	@ (800440c <BSP_LCD_DisplayStringAt+0x178>)
 8004382:	4613      	mov	r3, r2
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	3308      	adds	r3, #8
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	889a      	ldrh	r2, [r3, #4]
 8004392:	8bfb      	ldrh	r3, [r7, #30]
 8004394:	4413      	add	r3, r2
 8004396:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	3301      	adds	r3, #1
 800439c:	60bb      	str	r3, [r7, #8]
    i++;
 800439e:	8bbb      	ldrh	r3, [r7, #28]
 80043a0:	3301      	adds	r3, #1
 80043a2:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf14      	ite	ne
 80043ac:	2301      	movne	r3, #1
 80043ae:	2300      	moveq	r3, #0
 80043b0:	b2dc      	uxtb	r4, r3
 80043b2:	f7ff fe2b 	bl	800400c <BSP_LCD_GetXSize>
 80043b6:	8bb9      	ldrh	r1, [r7, #28]
 80043b8:	4b13      	ldr	r3, [pc, #76]	@ (8004408 <BSP_LCD_DisplayStringAt+0x174>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	4d13      	ldr	r5, [pc, #76]	@ (800440c <BSP_LCD_DisplayStringAt+0x178>)
 80043be:	4613      	mov	r3, r2
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	442b      	add	r3, r5
 80043c8:	3308      	adds	r3, #8
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	889b      	ldrh	r3, [r3, #4]
 80043ce:	fb01 f303 	mul.w	r3, r1, r3
 80043d2:	1ac3      	subs	r3, r0, r3
 80043d4:	b299      	uxth	r1, r3
 80043d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004408 <BSP_LCD_DisplayStringAt+0x174>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	480c      	ldr	r0, [pc, #48]	@ (800440c <BSP_LCD_DisplayStringAt+0x178>)
 80043dc:	4613      	mov	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4403      	add	r3, r0
 80043e6:	3308      	adds	r3, #8
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	889b      	ldrh	r3, [r3, #4]
 80043ec:	4299      	cmp	r1, r3
 80043ee:	bf2c      	ite	cs
 80043f0:	2301      	movcs	r3, #1
 80043f2:	2300      	movcc	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	4023      	ands	r3, r4
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1b7      	bne.n	800436e <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80043fe:	bf00      	nop
 8004400:	bf00      	nop
 8004402:	3720      	adds	r7, #32
 8004404:	46bd      	mov	sp, r7
 8004406:	bdb0      	pop	{r4, r5, r7, pc}
 8004408:	2000076c 	.word	0x2000076c
 800440c:	20000770 	.word	0x20000770

08004410 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004412:	b087      	sub	sp, #28
 8004414:	af02      	add	r7, sp, #8
 8004416:	4603      	mov	r3, r0
 8004418:	80fb      	strh	r3, [r7, #6]
 800441a:	460b      	mov	r3, r1
 800441c:	80bb      	strh	r3, [r7, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if (flippedLcd)
 8004426:	4b29      	ldr	r3, [pc, #164]	@ (80044cc <BSP_LCD_DrawHLine+0xbc>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d021      	beq.n	8004472 <BSP_LCD_DrawHLine+0x62>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+1) - (Xpos+Length) +BSP_LCD_GetXSize()*BSP_LCD_GetYSize()); //Rotate by 180°
 800442e:	4b28      	ldr	r3, [pc, #160]	@ (80044d0 <BSP_LCD_DrawHLine+0xc0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a28      	ldr	r2, [pc, #160]	@ (80044d4 <BSP_LCD_DrawHLine+0xc4>)
 8004434:	2134      	movs	r1, #52	@ 0x34
 8004436:	fb01 f303 	mul.w	r3, r1, r3
 800443a:	4413      	add	r3, r2
 800443c:	335c      	adds	r3, #92	@ 0x5c
 800443e:	681c      	ldr	r4, [r3, #0]
 8004440:	f7ff fde4 	bl	800400c <BSP_LCD_GetXSize>
 8004444:	4603      	mov	r3, r0
 8004446:	425b      	negs	r3, r3
 8004448:	88ba      	ldrh	r2, [r7, #4]
 800444a:	3201      	adds	r2, #1
 800444c:	fb02 f503 	mul.w	r5, r2, r3
 8004450:	f7ff fddc 	bl	800400c <BSP_LCD_GetXSize>
 8004454:	4606      	mov	r6, r0
 8004456:	f7ff fde5 	bl	8004024 <BSP_LCD_GetYSize>
 800445a:	4603      	mov	r3, r0
 800445c:	fb06 f303 	mul.w	r3, r6, r3
 8004460:	442b      	add	r3, r5
 8004462:	88f9      	ldrh	r1, [r7, #6]
 8004464:	887a      	ldrh	r2, [r7, #2]
 8004466:	440a      	add	r2, r1
 8004468:	1a9b      	subs	r3, r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4423      	add	r3, r4
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e013      	b.n	800449a <BSP_LCD_DrawHLine+0x8a>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004472:	4b17      	ldr	r3, [pc, #92]	@ (80044d0 <BSP_LCD_DrawHLine+0xc0>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a17      	ldr	r2, [pc, #92]	@ (80044d4 <BSP_LCD_DrawHLine+0xc4>)
 8004478:	2134      	movs	r1, #52	@ 0x34
 800447a:	fb01 f303 	mul.w	r3, r1, r3
 800447e:	4413      	add	r3, r2
 8004480:	335c      	adds	r3, #92	@ 0x5c
 8004482:	681c      	ldr	r4, [r3, #0]
 8004484:	f7ff fdc2 	bl	800400c <BSP_LCD_GetXSize>
 8004488:	4602      	mov	r2, r0
 800448a:	88bb      	ldrh	r3, [r7, #4]
 800448c:	fb03 f202 	mul.w	r2, r3, r2
 8004490:	88fb      	ldrh	r3, [r7, #6]
 8004492:	4413      	add	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4423      	add	r3, r4
 8004498:	60fb      	str	r3, [r7, #12]
  }
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800449a:	4b0d      	ldr	r3, [pc, #52]	@ (80044d0 <BSP_LCD_DrawHLine+0xc0>)
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	68f9      	ldr	r1, [r7, #12]
 80044a0:	887c      	ldrh	r4, [r7, #2]
 80044a2:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <BSP_LCD_DrawHLine+0xc0>)
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	4d0c      	ldr	r5, [pc, #48]	@ (80044d8 <BSP_LCD_DrawHLine+0xc8>)
 80044a8:	4613      	mov	r3, r2
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	4413      	add	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	442b      	add	r3, r5
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	2300      	movs	r3, #0
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	2301      	movs	r3, #1
 80044bc:	4622      	mov	r2, r4
 80044be:	f000 fb17 	bl	8004af0 <FillBuffer>
}
 80044c2:	bf00      	nop
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ca:	bf00      	nop
 80044cc:	2000078c 	.word	0x2000078c
 80044d0:	2000076c 	.word	0x2000076c
 80044d4:	20000654 	.word	0x20000654
 80044d8:	20000770 	.word	0x20000770

080044dc <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80044dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044de:	b087      	sub	sp, #28
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	4603      	mov	r3, r0
 80044e4:	80fb      	strh	r3, [r7, #6]
 80044e6:	460b      	mov	r3, r1
 80044e8:	80bb      	strh	r3, [r7, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if (flippedLcd)
 80044f2:	4b2b      	ldr	r3, [pc, #172]	@ (80045a0 <BSP_LCD_DrawVLine+0xc4>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d021      	beq.n	800453e <BSP_LCD_DrawVLine+0x62>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Length) - (Xpos+1) +BSP_LCD_GetXSize()*BSP_LCD_GetYSize()); //Rotate by 180°
 80044fa:	4b2a      	ldr	r3, [pc, #168]	@ (80045a4 <BSP_LCD_DrawVLine+0xc8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a2a      	ldr	r2, [pc, #168]	@ (80045a8 <BSP_LCD_DrawVLine+0xcc>)
 8004500:	2134      	movs	r1, #52	@ 0x34
 8004502:	fb01 f303 	mul.w	r3, r1, r3
 8004506:	4413      	add	r3, r2
 8004508:	335c      	adds	r3, #92	@ 0x5c
 800450a:	681c      	ldr	r4, [r3, #0]
 800450c:	f7ff fd7e 	bl	800400c <BSP_LCD_GetXSize>
 8004510:	4603      	mov	r3, r0
 8004512:	425b      	negs	r3, r3
 8004514:	88b9      	ldrh	r1, [r7, #4]
 8004516:	887a      	ldrh	r2, [r7, #2]
 8004518:	440a      	add	r2, r1
 800451a:	fb03 f202 	mul.w	r2, r3, r2
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	1ad5      	subs	r5, r2, r3
 8004522:	f7ff fd73 	bl	800400c <BSP_LCD_GetXSize>
 8004526:	4606      	mov	r6, r0
 8004528:	f7ff fd7c 	bl	8004024 <BSP_LCD_GetYSize>
 800452c:	4603      	mov	r3, r0
 800452e:	fb06 f303 	mul.w	r3, r6, r3
 8004532:	442b      	add	r3, r5
 8004534:	3b01      	subs	r3, #1
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4423      	add	r3, r4
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	e013      	b.n	8004566 <BSP_LCD_DrawVLine+0x8a>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800453e:	4b19      	ldr	r3, [pc, #100]	@ (80045a4 <BSP_LCD_DrawVLine+0xc8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a19      	ldr	r2, [pc, #100]	@ (80045a8 <BSP_LCD_DrawVLine+0xcc>)
 8004544:	2134      	movs	r1, #52	@ 0x34
 8004546:	fb01 f303 	mul.w	r3, r1, r3
 800454a:	4413      	add	r3, r2
 800454c:	335c      	adds	r3, #92	@ 0x5c
 800454e:	681c      	ldr	r4, [r3, #0]
 8004550:	f7ff fd5c 	bl	800400c <BSP_LCD_GetXSize>
 8004554:	4602      	mov	r2, r0
 8004556:	88bb      	ldrh	r3, [r7, #4]
 8004558:	fb03 f202 	mul.w	r2, r3, r2
 800455c:	88fb      	ldrh	r3, [r7, #6]
 800455e:	4413      	add	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4423      	add	r3, r4
 8004564:	60fb      	str	r3, [r7, #12]
  }
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8004566:	4b0f      	ldr	r3, [pc, #60]	@ (80045a4 <BSP_LCD_DrawVLine+0xc8>)
 8004568:	681c      	ldr	r4, [r3, #0]
 800456a:	68fd      	ldr	r5, [r7, #12]
 800456c:	887e      	ldrh	r6, [r7, #2]
 800456e:	f7ff fd4d 	bl	800400c <BSP_LCD_GetXSize>
 8004572:	4603      	mov	r3, r0
 8004574:	1e59      	subs	r1, r3, #1
 8004576:	4b0b      	ldr	r3, [pc, #44]	@ (80045a4 <BSP_LCD_DrawVLine+0xc8>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	480c      	ldr	r0, [pc, #48]	@ (80045ac <BSP_LCD_DrawVLine+0xd0>)
 800457c:	4613      	mov	r3, r2
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4403      	add	r3, r0
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	9100      	str	r1, [sp, #0]
 800458c:	4633      	mov	r3, r6
 800458e:	2201      	movs	r2, #1
 8004590:	4629      	mov	r1, r5
 8004592:	4620      	mov	r0, r4
 8004594:	f000 faac 	bl	8004af0 <FillBuffer>
}
 8004598:	bf00      	nop
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045a0:	2000078c 	.word	0x2000078c
 80045a4:	2000076c 	.word	0x2000076c
 80045a8:	20000654 	.word	0x20000654
 80045ac:	20000770 	.word	0x20000770

080045b0 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80045b0:	b590      	push	{r4, r7, lr}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4604      	mov	r4, r0
 80045b8:	4608      	mov	r0, r1
 80045ba:	4611      	mov	r1, r2
 80045bc:	461a      	mov	r2, r3
 80045be:	4623      	mov	r3, r4
 80045c0:	80fb      	strh	r3, [r7, #6]
 80045c2:	4603      	mov	r3, r0
 80045c4:	80bb      	strh	r3, [r7, #4]
 80045c6:	460b      	mov	r3, r1
 80045c8:	807b      	strh	r3, [r7, #2]
 80045ca:	4613      	mov	r3, r2
 80045cc:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80045ce:	887a      	ldrh	r2, [r7, #2]
 80045d0:	88b9      	ldrh	r1, [r7, #4]
 80045d2:	88fb      	ldrh	r3, [r7, #6]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff ff1b 	bl	8004410 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 80045da:	88ba      	ldrh	r2, [r7, #4]
 80045dc:	883b      	ldrh	r3, [r7, #0]
 80045de:	4413      	add	r3, r2
 80045e0:	b299      	uxth	r1, r3
 80045e2:	887a      	ldrh	r2, [r7, #2]
 80045e4:	88fb      	ldrh	r3, [r7, #6]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff ff12 	bl	8004410 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80045ec:	883a      	ldrh	r2, [r7, #0]
 80045ee:	88b9      	ldrh	r1, [r7, #4]
 80045f0:	88fb      	ldrh	r3, [r7, #6]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff ff72 	bl	80044dc <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80045f8:	88fa      	ldrh	r2, [r7, #6]
 80045fa:	887b      	ldrh	r3, [r7, #2]
 80045fc:	4413      	add	r3, r2
 80045fe:	b29b      	uxth	r3, r3
 8004600:	883a      	ldrh	r2, [r7, #0]
 8004602:	88b9      	ldrh	r1, [r7, #4]
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff ff69 	bl	80044dc <BSP_LCD_DrawVLine>
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	bd90      	pop	{r4, r7, pc}
	...

08004614 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004618:	b086      	sub	sp, #24
 800461a:	af02      	add	r7, sp, #8
 800461c:	4604      	mov	r4, r0
 800461e:	4608      	mov	r0, r1
 8004620:	4611      	mov	r1, r2
 8004622:	461a      	mov	r2, r3
 8004624:	4623      	mov	r3, r4
 8004626:	80fb      	strh	r3, [r7, #6]
 8004628:	4603      	mov	r3, r0
 800462a:	80bb      	strh	r3, [r7, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	807b      	strh	r3, [r7, #2]
 8004630:	4613      	mov	r3, r2
 8004632:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004638:	4b33      	ldr	r3, [pc, #204]	@ (8004708 <BSP_LCD_FillRect+0xf4>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4933      	ldr	r1, [pc, #204]	@ (800470c <BSP_LCD_FillRect+0xf8>)
 800463e:	4613      	mov	r3, r2
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff fd6a 	bl	8004124 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 8004650:	4b2f      	ldr	r3, [pc, #188]	@ (8004710 <BSP_LCD_FillRect+0xfc>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d022      	beq.n	800469e <BSP_LCD_FillRect+0x8a>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +BSP_LCD_GetXSize()*BSP_LCD_GetYSize()); //Rotate by 180°
 8004658:	4b2b      	ldr	r3, [pc, #172]	@ (8004708 <BSP_LCD_FillRect+0xf4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a2d      	ldr	r2, [pc, #180]	@ (8004714 <BSP_LCD_FillRect+0x100>)
 800465e:	2134      	movs	r1, #52	@ 0x34
 8004660:	fb01 f303 	mul.w	r3, r1, r3
 8004664:	4413      	add	r3, r2
 8004666:	335c      	adds	r3, #92	@ 0x5c
 8004668:	681c      	ldr	r4, [r3, #0]
 800466a:	f7ff fccf 	bl	800400c <BSP_LCD_GetXSize>
 800466e:	4603      	mov	r3, r0
 8004670:	425b      	negs	r3, r3
 8004672:	88b9      	ldrh	r1, [r7, #4]
 8004674:	883a      	ldrh	r2, [r7, #0]
 8004676:	440a      	add	r2, r1
 8004678:	fb02 f503 	mul.w	r5, r2, r3
 800467c:	f7ff fcc6 	bl	800400c <BSP_LCD_GetXSize>
 8004680:	4606      	mov	r6, r0
 8004682:	f7ff fccf 	bl	8004024 <BSP_LCD_GetYSize>
 8004686:	4603      	mov	r3, r0
 8004688:	fb06 f303 	mul.w	r3, r6, r3
 800468c:	442b      	add	r3, r5
 800468e:	88f9      	ldrh	r1, [r7, #6]
 8004690:	887a      	ldrh	r2, [r7, #2]
 8004692:	440a      	add	r2, r1
 8004694:	1a9b      	subs	r3, r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4423      	add	r3, r4
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	e013      	b.n	80046c6 <BSP_LCD_FillRect+0xb2>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800469e:	4b1a      	ldr	r3, [pc, #104]	@ (8004708 <BSP_LCD_FillRect+0xf4>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004714 <BSP_LCD_FillRect+0x100>)
 80046a4:	2134      	movs	r1, #52	@ 0x34
 80046a6:	fb01 f303 	mul.w	r3, r1, r3
 80046aa:	4413      	add	r3, r2
 80046ac:	335c      	adds	r3, #92	@ 0x5c
 80046ae:	681c      	ldr	r4, [r3, #0]
 80046b0:	f7ff fcac 	bl	800400c <BSP_LCD_GetXSize>
 80046b4:	4602      	mov	r2, r0
 80046b6:	88bb      	ldrh	r3, [r7, #4]
 80046b8:	fb03 f202 	mul.w	r2, r3, r2
 80046bc:	88fb      	ldrh	r3, [r7, #6]
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4423      	add	r3, r4
 80046c4:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80046c6:	4b10      	ldr	r3, [pc, #64]	@ (8004708 <BSP_LCD_FillRect+0xf4>)
 80046c8:	681c      	ldr	r4, [r3, #0]
 80046ca:	68fd      	ldr	r5, [r7, #12]
 80046cc:	887e      	ldrh	r6, [r7, #2]
 80046ce:	f8b7 8000 	ldrh.w	r8, [r7]
 80046d2:	f7ff fc9b 	bl	800400c <BSP_LCD_GetXSize>
 80046d6:	4602      	mov	r2, r0
 80046d8:	887b      	ldrh	r3, [r7, #2]
 80046da:	1ad1      	subs	r1, r2, r3
 80046dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004708 <BSP_LCD_FillRect+0xf4>)
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	480a      	ldr	r0, [pc, #40]	@ (800470c <BSP_LCD_FillRect+0xf8>)
 80046e2:	4613      	mov	r3, r2
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	4413      	add	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4403      	add	r3, r0
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	9301      	str	r3, [sp, #4]
 80046f0:	9100      	str	r1, [sp, #0]
 80046f2:	4643      	mov	r3, r8
 80046f4:	4632      	mov	r2, r6
 80046f6:	4629      	mov	r1, r5
 80046f8:	4620      	mov	r0, r4
 80046fa:	f000 f9f9 	bl	8004af0 <FillBuffer>
}
 80046fe:	bf00      	nop
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004708:	2000076c 	.word	0x2000076c
 800470c:	20000770 	.word	0x20000770
 8004710:	2000078c 	.word	0x2000078c
 8004714:	20000654 	.word	0x20000654

08004718 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 800471c:	4b05      	ldr	r3, [pc, #20]	@ (8004734 <BSP_LCD_DisplayOn+0x1c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8004726:	4b03      	ldr	r3, [pc, #12]	@ (8004734 <BSP_LCD_DisplayOn+0x1c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4798      	blx	r3
  }
}
 800472e:	bf00      	nop
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20000788 	.word	0x20000788

08004738 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08e      	sub	sp, #56	@ 0x38
 800473c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800473e:	2300      	movs	r3, #0
 8004740:	623b      	str	r3, [r7, #32]
 8004742:	4b61      	ldr	r3, [pc, #388]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 8004744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004746:	4a60      	ldr	r2, [pc, #384]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 8004748:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800474c:	6453      	str	r3, [r2, #68]	@ 0x44
 800474e:	4b5e      	ldr	r3, [pc, #376]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 8004750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004752:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004756:	623b      	str	r3, [r7, #32]
 8004758:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	4b5a      	ldr	r3, [pc, #360]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004762:	4a59      	ldr	r2, [pc, #356]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 8004764:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004768:	6313      	str	r3, [r2, #48]	@ 0x30
 800476a:	4b57      	ldr	r3, [pc, #348]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004772:	61fb      	str	r3, [r7, #28]
 8004774:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004776:	2300      	movs	r3, #0
 8004778:	61bb      	str	r3, [r7, #24]
 800477a:	4b53      	ldr	r3, [pc, #332]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 800477c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477e:	4a52      	ldr	r2, [pc, #328]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 8004780:	f043 0301 	orr.w	r3, r3, #1
 8004784:	6313      	str	r3, [r2, #48]	@ 0x30
 8004786:	4b50      	ldr	r3, [pc, #320]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	61bb      	str	r3, [r7, #24]
 8004790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	4b4c      	ldr	r3, [pc, #304]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 8004798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479a:	4a4b      	ldr	r2, [pc, #300]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 800479c:	f043 0302 	orr.w	r3, r3, #2
 80047a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80047a2:	4b49      	ldr	r3, [pc, #292]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047ae:	2300      	movs	r3, #0
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	4b45      	ldr	r3, [pc, #276]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 80047b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b6:	4a44      	ldr	r2, [pc, #272]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 80047b8:	f043 0304 	orr.w	r3, r3, #4
 80047bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80047be:	4b42      	ldr	r3, [pc, #264]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 80047c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	4b3e      	ldr	r3, [pc, #248]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d2:	4a3d      	ldr	r2, [pc, #244]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 80047d4:	f043 0308 	orr.w	r3, r3, #8
 80047d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80047da:	4b3b      	ldr	r3, [pc, #236]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80047e6:	2300      	movs	r3, #0
 80047e8:	60bb      	str	r3, [r7, #8]
 80047ea:	4b37      	ldr	r3, [pc, #220]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ee:	4a36      	ldr	r2, [pc, #216]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 80047f0:	f043 0320 	orr.w	r3, r3, #32
 80047f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80047f6:	4b34      	ldr	r3, [pc, #208]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 80047f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	60bb      	str	r3, [r7, #8]
 8004800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004802:	2300      	movs	r3, #0
 8004804:	607b      	str	r3, [r7, #4]
 8004806:	4b30      	ldr	r3, [pc, #192]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480a:	4a2f      	ldr	r2, [pc, #188]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 800480c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004810:	6313      	str	r3, [r2, #48]	@ 0x30
 8004812:	4b2d      	ldr	r3, [pc, #180]	@ (80048c8 <BSP_LCD_MspInit+0x190>)
 8004814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800481a:	607b      	str	r3, [r7, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800481e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8004822:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004824:	2302      	movs	r3, #2
 8004826:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004828:	2300      	movs	r3, #0
 800482a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800482c:	2302      	movs	r3, #2
 800482e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8004830:	230e      	movs	r3, #14
 8004832:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004838:	4619      	mov	r1, r3
 800483a:	4824      	ldr	r0, [pc, #144]	@ (80048cc <BSP_LCD_MspInit+0x194>)
 800483c:	f001 fa62 	bl	8005d04 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8004840:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8004844:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800484a:	4619      	mov	r1, r3
 800484c:	4820      	ldr	r0, [pc, #128]	@ (80048d0 <BSP_LCD_MspInit+0x198>)
 800484e:	f001 fa59 	bl	8005d04 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8004852:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8004856:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800485c:	4619      	mov	r1, r3
 800485e:	481d      	ldr	r0, [pc, #116]	@ (80048d4 <BSP_LCD_MspInit+0x19c>)
 8004860:	f001 fa50 	bl	8005d04 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8004864:	2348      	movs	r3, #72	@ 0x48
 8004866:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800486c:	4619      	mov	r1, r3
 800486e:	481a      	ldr	r0, [pc, #104]	@ (80048d8 <BSP_LCD_MspInit+0x1a0>)
 8004870:	f001 fa48 	bl	8005d04 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8004874:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004878:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800487a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800487e:	4619      	mov	r1, r3
 8004880:	4816      	ldr	r0, [pc, #88]	@ (80048dc <BSP_LCD_MspInit+0x1a4>)
 8004882:	f001 fa3f 	bl	8005d04 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8004886:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800488a:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800488c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004890:	4619      	mov	r1, r3
 8004892:	4813      	ldr	r0, [pc, #76]	@ (80048e0 <BSP_LCD_MspInit+0x1a8>)
 8004894:	f001 fa36 	bl	8005d04 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004898:	2303      	movs	r3, #3
 800489a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800489c:	2309      	movs	r3, #9
 800489e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80048a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048a4:	4619      	mov	r1, r3
 80048a6:	480a      	ldr	r0, [pc, #40]	@ (80048d0 <BSP_LCD_MspInit+0x198>)
 80048a8:	f001 fa2c 	bl	8005d04 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80048ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80048b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80048b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048b6:	4619      	mov	r1, r3
 80048b8:	4809      	ldr	r0, [pc, #36]	@ (80048e0 <BSP_LCD_MspInit+0x1a8>)
 80048ba:	f001 fa23 	bl	8005d04 <HAL_GPIO_Init>
}
 80048be:	bf00      	nop
 80048c0:	3738      	adds	r7, #56	@ 0x38
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800
 80048cc:	40020000 	.word	0x40020000
 80048d0:	40020400 	.word	0x40020400
 80048d4:	40020800 	.word	0x40020800
 80048d8:	40020c00 	.word	0x40020c00
 80048dc:	40021400 	.word	0x40021400
 80048e0:	40021800 	.word	0x40021800

080048e4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80048e4:	b5b0      	push	{r4, r5, r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	603a      	str	r2, [r7, #0]
 80048ee:	80fb      	strh	r3, [r7, #6]
 80048f0:	460b      	mov	r3, r1
 80048f2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 80048f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004970 <BSP_LCD_DrawPixel+0x8c>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01f      	beq.n	800493c <BSP_LCD_DrawPixel+0x58>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (BSP_LCD_GetXSize()*BSP_LCD_GetYSize() - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 80048fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004974 <BSP_LCD_DrawPixel+0x90>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a1d      	ldr	r2, [pc, #116]	@ (8004978 <BSP_LCD_DrawPixel+0x94>)
 8004902:	2134      	movs	r1, #52	@ 0x34
 8004904:	fb01 f303 	mul.w	r3, r1, r3
 8004908:	4413      	add	r3, r2
 800490a:	335c      	adds	r3, #92	@ 0x5c
 800490c:	681c      	ldr	r4, [r3, #0]
 800490e:	f7ff fb7d 	bl	800400c <BSP_LCD_GetXSize>
 8004912:	4605      	mov	r5, r0
 8004914:	f7ff fb86 	bl	8004024 <BSP_LCD_GetYSize>
 8004918:	4603      	mov	r3, r0
 800491a:	fb03 f205 	mul.w	r2, r3, r5
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	1ad5      	subs	r5, r2, r3
 8004922:	f7ff fb73 	bl	800400c <BSP_LCD_GetXSize>
 8004926:	4602      	mov	r2, r0
 8004928:	88bb      	ldrh	r3, [r7, #4]
 800492a:	fb02 f303 	mul.w	r3, r2, r3
 800492e:	1aeb      	subs	r3, r5, r3
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4423      	add	r3, r4
 8004934:	461a      	mov	r2, r3
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800493a:	e015      	b.n	8004968 <BSP_LCD_DrawPixel+0x84>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800493c:	4b0d      	ldr	r3, [pc, #52]	@ (8004974 <BSP_LCD_DrawPixel+0x90>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a0d      	ldr	r2, [pc, #52]	@ (8004978 <BSP_LCD_DrawPixel+0x94>)
 8004942:	2134      	movs	r1, #52	@ 0x34
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	4413      	add	r3, r2
 800494a:	335c      	adds	r3, #92	@ 0x5c
 800494c:	681c      	ldr	r4, [r3, #0]
 800494e:	88bd      	ldrh	r5, [r7, #4]
 8004950:	f7ff fb5c 	bl	800400c <BSP_LCD_GetXSize>
 8004954:	4603      	mov	r3, r0
 8004956:	fb03 f205 	mul.w	r2, r3, r5
 800495a:	88fb      	ldrh	r3, [r7, #6]
 800495c:	4413      	add	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4423      	add	r3, r4
 8004962:	461a      	mov	r2, r3
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	6013      	str	r3, [r2, #0]
}
 8004968:	bf00      	nop
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bdb0      	pop	{r4, r5, r7, pc}
 8004970:	2000078c 	.word	0x2000078c
 8004974:	2000076c 	.word	0x2000076c
 8004978:	20000654 	.word	0x20000654

0800497c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	603a      	str	r2, [r7, #0]
 8004986:	80fb      	strh	r3, [r7, #6]
 8004988:	460b      	mov	r3, r1
 800498a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800498c:	2300      	movs	r3, #0
 800498e:	61fb      	str	r3, [r7, #28]
 8004990:	2300      	movs	r3, #0
 8004992:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8004998:	4b53      	ldr	r3, [pc, #332]	@ (8004ae8 <DrawChar+0x16c>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	4953      	ldr	r1, [pc, #332]	@ (8004aec <DrawChar+0x170>)
 800499e:	4613      	mov	r3, r2
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	3308      	adds	r3, #8
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	88db      	ldrh	r3, [r3, #6]
 80049ae:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80049b0:	4b4d      	ldr	r3, [pc, #308]	@ (8004ae8 <DrawChar+0x16c>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	494d      	ldr	r1, [pc, #308]	@ (8004aec <DrawChar+0x170>)
 80049b6:	4613      	mov	r3, r2
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	4413      	add	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	440b      	add	r3, r1
 80049c0:	3308      	adds	r3, #8
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	889b      	ldrh	r3, [r3, #4]
 80049c6:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80049c8:	8a3b      	ldrh	r3, [r7, #16]
 80049ca:	3307      	adds	r3, #7
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	da00      	bge.n	80049d2 <DrawChar+0x56>
 80049d0:	3307      	adds	r3, #7
 80049d2:	10db      	asrs	r3, r3, #3
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	8a3b      	ldrh	r3, [r7, #16]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80049e2:	2300      	movs	r3, #0
 80049e4:	61fb      	str	r3, [r7, #28]
 80049e6:	e076      	b.n	8004ad6 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80049e8:	8a3b      	ldrh	r3, [r7, #16]
 80049ea:	3307      	adds	r3, #7
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	da00      	bge.n	80049f2 <DrawChar+0x76>
 80049f0:	3307      	adds	r3, #7
 80049f2:	10db      	asrs	r3, r3, #3
 80049f4:	461a      	mov	r2, r3
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	fb02 f303 	mul.w	r3, r2, r3
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	4413      	add	r3, r2
 8004a00:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8004a02:	8a3b      	ldrh	r3, [r7, #16]
 8004a04:	3307      	adds	r3, #7
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	da00      	bge.n	8004a0c <DrawChar+0x90>
 8004a0a:	3307      	adds	r3, #7
 8004a0c:	10db      	asrs	r3, r3, #3
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d002      	beq.n	8004a18 <DrawChar+0x9c>
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d004      	beq.n	8004a20 <DrawChar+0xa4>
 8004a16:	e00c      	b.n	8004a32 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	617b      	str	r3, [r7, #20]
      break;
 8004a1e:	e016      	b.n	8004a4e <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	021b      	lsls	r3, r3, #8
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	3201      	adds	r2, #1
 8004a2a:	7812      	ldrb	r2, [r2, #0]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]
      break;
 8004a30:	e00d      	b.n	8004a4e <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	041a      	lsls	r2, r3, #16
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	4313      	orrs	r3, r2
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	3202      	adds	r2, #2
 8004a46:	7812      	ldrb	r2, [r2, #0]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]
      break;
 8004a4c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61bb      	str	r3, [r7, #24]
 8004a52:	e036      	b.n	8004ac2 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004a54:	8a3a      	ldrh	r2, [r7, #16]
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	1ad2      	subs	r2, r2, r3
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	2201      	movs	r2, #1
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d012      	beq.n	8004a96 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	88fb      	ldrh	r3, [r7, #6]
 8004a76:	4413      	add	r3, r2
 8004a78:	b298      	uxth	r0, r3
 8004a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae8 <DrawChar+0x16c>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	491b      	ldr	r1, [pc, #108]	@ (8004aec <DrawChar+0x170>)
 8004a80:	4613      	mov	r3, r2
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	4413      	add	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	88bb      	ldrh	r3, [r7, #4]
 8004a8e:	4619      	mov	r1, r3
 8004a90:	f7ff ff28 	bl	80048e4 <BSP_LCD_DrawPixel>
 8004a94:	e012      	b.n	8004abc <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	88fb      	ldrh	r3, [r7, #6]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	b298      	uxth	r0, r3
 8004aa0:	4b11      	ldr	r3, [pc, #68]	@ (8004ae8 <DrawChar+0x16c>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	4911      	ldr	r1, [pc, #68]	@ (8004aec <DrawChar+0x170>)
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	440b      	add	r3, r1
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	88bb      	ldrh	r3, [r7, #4]
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	f7ff ff14 	bl	80048e4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	8a3b      	ldrh	r3, [r7, #16]
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d3c4      	bcc.n	8004a54 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8004aca:	88bb      	ldrh	r3, [r7, #4]
 8004acc:	3301      	adds	r3, #1
 8004ace:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	61fb      	str	r3, [r7, #28]
 8004ad6:	8a7b      	ldrh	r3, [r7, #18]
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d384      	bcc.n	80049e8 <DrawChar+0x6c>
  }
}
 8004ade:	bf00      	nop
 8004ae0:	bf00      	nop
 8004ae2:	3720      	adds	r7, #32
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	2000076c 	.word	0x2000076c
 8004aec:	20000770 	.word	0x20000770

08004af0 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
 8004afc:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8004afe:	4b16      	ldr	r3, [pc, #88]	@ (8004b58 <FillBuffer+0x68>)
 8004b00:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004b04:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004b06:	4b14      	ldr	r3, [pc, #80]	@ (8004b58 <FillBuffer+0x68>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8004b0c:	4a12      	ldr	r2, [pc, #72]	@ (8004b58 <FillBuffer+0x68>)
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8004b12:	4b11      	ldr	r3, [pc, #68]	@ (8004b58 <FillBuffer+0x68>)
 8004b14:	4a11      	ldr	r2, [pc, #68]	@ (8004b5c <FillBuffer+0x6c>)
 8004b16:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8004b18:	480f      	ldr	r0, [pc, #60]	@ (8004b58 <FillBuffer+0x68>)
 8004b1a:	f000 fe5d 	bl	80057d8 <HAL_DMA2D_Init>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d115      	bne.n	8004b50 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8004b24:	68f9      	ldr	r1, [r7, #12]
 8004b26:	480c      	ldr	r0, [pc, #48]	@ (8004b58 <FillBuffer+0x68>)
 8004b28:	f000 ffbe 	bl	8005aa8 <HAL_DMA2D_ConfigLayer>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10e      	bne.n	8004b50 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69f9      	ldr	r1, [r7, #28]
 8004b3c:	4806      	ldr	r0, [pc, #24]	@ (8004b58 <FillBuffer+0x68>)
 8004b3e:	f000 fe9e 	bl	800587e <HAL_DMA2D_Start>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d103      	bne.n	8004b50 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004b48:	210a      	movs	r1, #10
 8004b4a:	4803      	ldr	r0, [pc, #12]	@ (8004b58 <FillBuffer+0x68>)
 8004b4c:	f000 fec2 	bl	80058d4 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	200006fc 	.word	0x200006fc
 8004b5c:	4002b000 	.word	0x4002b000

08004b60 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004b64:	4b29      	ldr	r3, [pc, #164]	@ (8004c0c <BSP_SDRAM_Init+0xac>)
 8004b66:	4a2a      	ldr	r2, [pc, #168]	@ (8004c10 <BSP_SDRAM_Init+0xb0>)
 8004b68:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004c14 <BSP_SDRAM_Init+0xb4>)
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004b70:	4b28      	ldr	r3, [pc, #160]	@ (8004c14 <BSP_SDRAM_Init+0xb4>)
 8004b72:	2207      	movs	r2, #7
 8004b74:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8004b76:	4b27      	ldr	r3, [pc, #156]	@ (8004c14 <BSP_SDRAM_Init+0xb4>)
 8004b78:	2204      	movs	r2, #4
 8004b7a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004b7c:	4b25      	ldr	r3, [pc, #148]	@ (8004c14 <BSP_SDRAM_Init+0xb4>)
 8004b7e:	2207      	movs	r2, #7
 8004b80:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8004b82:	4b24      	ldr	r3, [pc, #144]	@ (8004c14 <BSP_SDRAM_Init+0xb4>)
 8004b84:	2202      	movs	r2, #2
 8004b86:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8004b88:	4b22      	ldr	r3, [pc, #136]	@ (8004c14 <BSP_SDRAM_Init+0xb4>)
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8004b8e:	4b21      	ldr	r3, [pc, #132]	@ (8004c14 <BSP_SDRAM_Init+0xb4>)
 8004b90:	2202      	movs	r2, #2
 8004b92:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004b94:	4b1d      	ldr	r3, [pc, #116]	@ (8004c0c <BSP_SDRAM_Init+0xac>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8004c0c <BSP_SDRAM_Init+0xac>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8004c0c <BSP_SDRAM_Init+0xac>)
 8004ba2:	2204      	movs	r2, #4
 8004ba4:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004ba6:	4b19      	ldr	r3, [pc, #100]	@ (8004c0c <BSP_SDRAM_Init+0xac>)
 8004ba8:	2210      	movs	r2, #16
 8004baa:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004bac:	4b17      	ldr	r3, [pc, #92]	@ (8004c0c <BSP_SDRAM_Init+0xac>)
 8004bae:	2240      	movs	r2, #64	@ 0x40
 8004bb0:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8004bb2:	4b16      	ldr	r3, [pc, #88]	@ (8004c0c <BSP_SDRAM_Init+0xac>)
 8004bb4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004bb8:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004bba:	4b14      	ldr	r3, [pc, #80]	@ (8004c0c <BSP_SDRAM_Init+0xac>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004bc0:	4b12      	ldr	r3, [pc, #72]	@ (8004c0c <BSP_SDRAM_Init+0xac>)
 8004bc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bc6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8004bc8:	4b10      	ldr	r3, [pc, #64]	@ (8004c0c <BSP_SDRAM_Init+0xac>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8004bce:	4b0f      	ldr	r3, [pc, #60]	@ (8004c0c <BSP_SDRAM_Init+0xac>)
 8004bd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004bd4:	629a      	str	r2, [r3, #40]	@ 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	480c      	ldr	r0, [pc, #48]	@ (8004c0c <BSP_SDRAM_Init+0xac>)
 8004bda:	f000 f87f 	bl	8004cdc <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8004bde:	490d      	ldr	r1, [pc, #52]	@ (8004c14 <BSP_SDRAM_Init+0xb4>)
 8004be0:	480a      	ldr	r0, [pc, #40]	@ (8004c0c <BSP_SDRAM_Init+0xac>)
 8004be2:	f003 fb77 	bl	80082d4 <HAL_SDRAM_Init>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004bec:	4b0a      	ldr	r3, [pc, #40]	@ (8004c18 <BSP_SDRAM_Init+0xb8>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	701a      	strb	r2, [r3, #0]
 8004bf2:	e002      	b.n	8004bfa <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004bf4:	4b08      	ldr	r3, [pc, #32]	@ (8004c18 <BSP_SDRAM_Init+0xb8>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004bfa:	f240 506a 	movw	r0, #1386	@ 0x56a
 8004bfe:	f000 f80d 	bl	8004c1c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004c02:	4b05      	ldr	r3, [pc, #20]	@ (8004c18 <BSP_SDRAM_Init+0xb8>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000790 	.word	0x20000790
 8004c10:	a0000140 	.word	0xa0000140
 8004c14:	200007c4 	.word	0x200007c4
 8004c18:	200000a4 	.word	0x200000a4

08004c1c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8004c24:	2300      	movs	r3, #0
 8004c26:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004c28:	4b2a      	ldr	r3, [pc, #168]	@ (8004cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004c2e:	4b29      	ldr	r3, [pc, #164]	@ (8004cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c30:	2208      	movs	r2, #8
 8004c32:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004c34:	4b27      	ldr	r3, [pc, #156]	@ (8004cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004c3a:	4b26      	ldr	r3, [pc, #152]	@ (8004cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004c40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c44:	4923      	ldr	r1, [pc, #140]	@ (8004cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c46:	4824      	ldr	r0, [pc, #144]	@ (8004cd8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c48:	f003 fb82 	bl	8008350 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	f000 facf 	bl	80051f0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8004c52:	4b20      	ldr	r3, [pc, #128]	@ (8004cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c54:	2202      	movs	r2, #2
 8004c56:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004c58:	4b1e      	ldr	r3, [pc, #120]	@ (8004cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c5a:	2208      	movs	r2, #8
 8004c5c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c60:	2201      	movs	r2, #1
 8004c62:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004c64:	4b1b      	ldr	r3, [pc, #108]	@ (8004cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8004c6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c6e:	4919      	ldr	r1, [pc, #100]	@ (8004cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c70:	4819      	ldr	r0, [pc, #100]	@ (8004cd8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c72:	f003 fb6d 	bl	8008350 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004c76:	4b17      	ldr	r3, [pc, #92]	@ (8004cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c78:	2203      	movs	r2, #3
 8004c7a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004c7c:	4b15      	ldr	r3, [pc, #84]	@ (8004cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c7e:	2208      	movs	r2, #8
 8004c80:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8004c82:	4b14      	ldr	r3, [pc, #80]	@ (8004cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c84:	2204      	movs	r2, #4
 8004c86:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004c88:	4b12      	ldr	r3, [pc, #72]	@ (8004cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004c8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c92:	4910      	ldr	r1, [pc, #64]	@ (8004cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c94:	4810      	ldr	r0, [pc, #64]	@ (8004cd8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c96:	f003 fb5b 	bl	8008350 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8004c9a:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8004c9e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8004cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ca2:	2204      	movs	r2, #4
 8004ca4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ca8:	2208      	movs	r2, #8
 8004caa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004cac:	4b09      	ldr	r3, [pc, #36]	@ (8004cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004cae:	2201      	movs	r2, #1
 8004cb0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4a07      	ldr	r2, [pc, #28]	@ (8004cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004cb6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004cb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cbc:	4905      	ldr	r1, [pc, #20]	@ (8004cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004cbe:	4806      	ldr	r0, [pc, #24]	@ (8004cd8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004cc0:	f003 fb46 	bl	8008350 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	4804      	ldr	r0, [pc, #16]	@ (8004cd8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004cc8:	f003 fb6d 	bl	80083a6 <HAL_SDRAM_ProgramRefreshRate>
}
 8004ccc:	bf00      	nop
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	200007e0 	.word	0x200007e0
 8004cd8:	20000790 	.word	0x20000790

08004cdc <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b090      	sub	sp, #64	@ 0x40
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80ec 	beq.w	8004ec6 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004cee:	2300      	movs	r3, #0
 8004cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cf2:	4b77      	ldr	r3, [pc, #476]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf6:	4a76      	ldr	r2, [pc, #472]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004cf8:	f043 0301 	orr.w	r3, r3, #1
 8004cfc:	6393      	str	r3, [r2, #56]	@ 0x38
 8004cfe:	4b74      	ldr	r3, [pc, #464]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d0e:	4b70      	ldr	r3, [pc, #448]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d12:	4a6f      	ldr	r2, [pc, #444]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d1a:	4b6d      	ldr	r3, [pc, #436]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	623b      	str	r3, [r7, #32]
 8004d2a:	4b69      	ldr	r3, [pc, #420]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2e:	4a68      	ldr	r2, [pc, #416]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d30:	f043 0302 	orr.w	r3, r3, #2
 8004d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d36:	4b66      	ldr	r3, [pc, #408]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	623b      	str	r3, [r7, #32]
 8004d40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d42:	2300      	movs	r3, #0
 8004d44:	61fb      	str	r3, [r7, #28]
 8004d46:	4b62      	ldr	r3, [pc, #392]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4a:	4a61      	ldr	r2, [pc, #388]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d4c:	f043 0304 	orr.w	r3, r3, #4
 8004d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d52:	4b5f      	ldr	r3, [pc, #380]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	61fb      	str	r3, [r7, #28]
 8004d5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	4b5b      	ldr	r3, [pc, #364]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d66:	4a5a      	ldr	r2, [pc, #360]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d68:	f043 0308 	orr.w	r3, r3, #8
 8004d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d6e:	4b58      	ldr	r3, [pc, #352]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	4b54      	ldr	r3, [pc, #336]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d82:	4a53      	ldr	r2, [pc, #332]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d84:	f043 0310 	orr.w	r3, r3, #16
 8004d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d8a:	4b51      	ldr	r3, [pc, #324]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d96:	2300      	movs	r3, #0
 8004d98:	613b      	str	r3, [r7, #16]
 8004d9a:	4b4d      	ldr	r3, [pc, #308]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9e:	4a4c      	ldr	r2, [pc, #304]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004da0:	f043 0320 	orr.w	r3, r3, #32
 8004da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004da6:	4b4a      	ldr	r3, [pc, #296]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	613b      	str	r3, [r7, #16]
 8004db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	4b46      	ldr	r3, [pc, #280]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dba:	4a45      	ldr	r2, [pc, #276]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004dbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004dc2:	4b43      	ldr	r3, [pc, #268]	@ (8004ed0 <BSP_SDRAM_MspInit+0x1f4>)
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8004dce:	2302      	movs	r3, #2
 8004dd0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004dda:	230c      	movs	r3, #12
 8004ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8004dde:	2360      	movs	r3, #96	@ 0x60
 8004de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8004de2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004de6:	4619      	mov	r1, r3
 8004de8:	483a      	ldr	r0, [pc, #232]	@ (8004ed4 <BSP_SDRAM_MspInit+0x1f8>)
 8004dea:	f000 ff8b 	bl	8005d04 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8004dee:	2301      	movs	r3, #1
 8004df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8004df2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004df6:	4619      	mov	r1, r3
 8004df8:	4837      	ldr	r0, [pc, #220]	@ (8004ed8 <BSP_SDRAM_MspInit+0x1fc>)
 8004dfa:	f000 ff83 	bl	8005d04 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8004dfe:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004e04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4834      	ldr	r0, [pc, #208]	@ (8004edc <BSP_SDRAM_MspInit+0x200>)
 8004e0c:	f000 ff7a 	bl	8005d04 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004e10:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4830      	ldr	r0, [pc, #192]	@ (8004ee0 <BSP_SDRAM_MspInit+0x204>)
 8004e1e:	f000 ff71 	bl	8005d04 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8004e22:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004e28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	482d      	ldr	r0, [pc, #180]	@ (8004ee4 <BSP_SDRAM_MspInit+0x208>)
 8004e30:	f000 ff68 	bl	8005d04 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004e34:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004e3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4829      	ldr	r0, [pc, #164]	@ (8004ee8 <BSP_SDRAM_MspInit+0x20c>)
 8004e42:	f000 ff5f 	bl	8005d04 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004e46:	4b29      	ldr	r3, [pc, #164]	@ (8004eec <BSP_SDRAM_MspInit+0x210>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004e4c:	4b27      	ldr	r3, [pc, #156]	@ (8004eec <BSP_SDRAM_MspInit+0x210>)
 8004e4e:	2280      	movs	r2, #128	@ 0x80
 8004e50:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004e52:	4b26      	ldr	r3, [pc, #152]	@ (8004eec <BSP_SDRAM_MspInit+0x210>)
 8004e54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e58:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004e5a:	4b24      	ldr	r3, [pc, #144]	@ (8004eec <BSP_SDRAM_MspInit+0x210>)
 8004e5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e60:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004e62:	4b22      	ldr	r3, [pc, #136]	@ (8004eec <BSP_SDRAM_MspInit+0x210>)
 8004e64:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004e68:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004e6a:	4b20      	ldr	r3, [pc, #128]	@ (8004eec <BSP_SDRAM_MspInit+0x210>)
 8004e6c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004e70:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8004e72:	4b1e      	ldr	r3, [pc, #120]	@ (8004eec <BSP_SDRAM_MspInit+0x210>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004e78:	4b1c      	ldr	r3, [pc, #112]	@ (8004eec <BSP_SDRAM_MspInit+0x210>)
 8004e7a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004e7e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004e80:	4b1a      	ldr	r3, [pc, #104]	@ (8004eec <BSP_SDRAM_MspInit+0x210>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	625a      	str	r2, [r3, #36]	@ 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004e86:	4b19      	ldr	r3, [pc, #100]	@ (8004eec <BSP_SDRAM_MspInit+0x210>)
 8004e88:	2203      	movs	r2, #3
 8004e8a:	629a      	str	r2, [r3, #40]	@ 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004e8c:	4b17      	ldr	r3, [pc, #92]	@ (8004eec <BSP_SDRAM_MspInit+0x210>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004e92:	4b16      	ldr	r3, [pc, #88]	@ (8004eec <BSP_SDRAM_MspInit+0x210>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004e98:	4b14      	ldr	r3, [pc, #80]	@ (8004eec <BSP_SDRAM_MspInit+0x210>)
 8004e9a:	4a15      	ldr	r2, [pc, #84]	@ (8004ef0 <BSP_SDRAM_MspInit+0x214>)
 8004e9c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a12      	ldr	r2, [pc, #72]	@ (8004eec <BSP_SDRAM_MspInit+0x210>)
 8004ea2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ea4:	4a11      	ldr	r2, [pc, #68]	@ (8004eec <BSP_SDRAM_MspInit+0x210>)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8004eaa:	4810      	ldr	r0, [pc, #64]	@ (8004eec <BSP_SDRAM_MspInit+0x210>)
 8004eac:	f000 fb84 	bl	80055b8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8004eb0:	480e      	ldr	r0, [pc, #56]	@ (8004eec <BSP_SDRAM_MspInit+0x210>)
 8004eb2:	f000 fad3 	bl	800545c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	210f      	movs	r1, #15
 8004eba:	2038      	movs	r0, #56	@ 0x38
 8004ebc:	f000 fa97 	bl	80053ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004ec0:	2038      	movs	r0, #56	@ 0x38
 8004ec2:	f000 fab0 	bl	8005426 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8004ec6:	bf00      	nop
 8004ec8:	3740      	adds	r7, #64	@ 0x40
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	40020400 	.word	0x40020400
 8004ed8:	40020800 	.word	0x40020800
 8004edc:	40020c00 	.word	0x40020c00
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	40021400 	.word	0x40021400
 8004ee8:	40021800 	.word	0x40021800
 8004eec:	200007f0 	.word	0x200007f0
 8004ef0:	40026410 	.word	0x40026410

08004ef4 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	4603      	mov	r3, r0
 8004efc:	460a      	mov	r2, r1
 8004efe:	80fb      	strh	r3, [r7, #6]
 8004f00:	4613      	mov	r3, r2
 8004f02:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8004f08:	4a13      	ldr	r2, [pc, #76]	@ (8004f58 <BSP_TS_Init+0x64>)
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8004f0e:	4a13      	ldr	r2, [pc, #76]	@ (8004f5c <BSP_TS_Init+0x68>)
 8004f10:	88bb      	ldrh	r3, [r7, #4]
 8004f12:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8004f14:	4b12      	ldr	r3, [pc, #72]	@ (8004f60 <BSP_TS_Init+0x6c>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	2082      	movs	r0, #130	@ 0x82
 8004f1a:	4798      	blx	r3
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f640 0311 	movw	r3, #2065	@ 0x811
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d104      	bne.n	8004f32 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8004f28:	4b0e      	ldr	r3, [pc, #56]	@ (8004f64 <BSP_TS_Init+0x70>)
 8004f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8004f60 <BSP_TS_Init+0x6c>)
 8004f2c:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d109      	bne.n	8004f4c <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8004f38:	4b0a      	ldr	r3, [pc, #40]	@ (8004f64 <BSP_TS_Init+0x70>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2082      	movs	r0, #130	@ 0x82
 8004f40:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8004f42:	4b08      	ldr	r3, [pc, #32]	@ (8004f64 <BSP_TS_Init+0x70>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	2082      	movs	r0, #130	@ 0x82
 8004f4a:	4798      	blx	r3
  }

  return ret;
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20000854 	.word	0x20000854
 8004f5c:	20000856 	.word	0x20000856
 8004f60:	2000005c 	.word	0x2000005c
 8004f64:	20000850 	.word	0x20000850

08004f68 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8004f6c:	4b03      	ldr	r3, [pc, #12]	@ (8004f7c <BSP_TS_ITGetStatus+0x14>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	2082      	movs	r0, #130	@ 0x82
 8004f74:	4798      	blx	r3
 8004f76:	4603      	mov	r3, r0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20000850 	.word	0x20000850

08004f80 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004f88:	4b4f      	ldr	r3, [pc, #316]	@ (80050c8 <BSP_TS_GetState+0x148>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2082      	movs	r0, #130	@ 0x82
 8004f90:	4798      	blx	r3
 8004f92:	4603      	mov	r3, r0
 8004f94:	461a      	mov	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 808d 	beq.w	80050be <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8004fa4:	4b48      	ldr	r3, [pc, #288]	@ (80050c8 <BSP_TS_GetState+0x148>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	f107 020c 	add.w	r2, r7, #12
 8004fae:	f107 010e 	add.w	r1, r7, #14
 8004fb2:	2082      	movs	r0, #130	@ 0x82
 8004fb4:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8004fb6:	89bb      	ldrh	r3, [r7, #12]
 8004fb8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8004fc0:	89bb      	ldrh	r3, [r7, #12]
 8004fc2:	4a42      	ldr	r2, [pc, #264]	@ (80050cc <BSP_TS_GetState+0x14c>)
 8004fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc8:	08db      	lsrs	r3, r3, #3
 8004fca:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8004fcc:	8abb      	ldrh	r3, [r7, #20]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d102      	bne.n	8004fd8 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	82bb      	strh	r3, [r7, #20]
 8004fd6:	e008      	b.n	8004fea <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8004fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80050d0 <BSP_TS_GetState+0x150>)
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	8aba      	ldrh	r2, [r7, #20]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d903      	bls.n	8004fea <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8004fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80050d0 <BSP_TS_GetState+0x150>)
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8004fea:	8abb      	ldrh	r3, [r7, #20]
 8004fec:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8004fee:	89fb      	ldrh	r3, [r7, #14]
 8004ff0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d806      	bhi.n	8005006 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8004ff8:	89fb      	ldrh	r3, [r7, #14]
 8004ffa:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 8004ffe:	330e      	adds	r3, #14
 8005000:	b29b      	uxth	r3, r3
 8005002:	81fb      	strh	r3, [r7, #14]
 8005004:	e005      	b.n	8005012 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8005006:	89fb      	ldrh	r3, [r7, #14]
 8005008:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800500c:	3308      	adds	r3, #8
 800500e:	b29b      	uxth	r3, r3
 8005010:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8005012:	89fb      	ldrh	r3, [r7, #14]
 8005014:	4a2f      	ldr	r2, [pc, #188]	@ (80050d4 <BSP_TS_GetState+0x154>)
 8005016:	fba2 2303 	umull	r2, r3, r2, r3
 800501a:	08db      	lsrs	r3, r3, #3
 800501c:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 800501e:	8afb      	ldrh	r3, [r7, #22]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d102      	bne.n	800502a <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	82fb      	strh	r3, [r7, #22]
 8005028:	e008      	b.n	800503c <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800502a:	4b2b      	ldr	r3, [pc, #172]	@ (80050d8 <BSP_TS_GetState+0x158>)
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	8afa      	ldrh	r2, [r7, #22]
 8005030:	429a      	cmp	r2, r3
 8005032:	d903      	bls.n	800503c <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8005034:	4b28      	ldr	r3, [pc, #160]	@ (80050d8 <BSP_TS_GetState+0x158>)
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	3b01      	subs	r3, #1
 800503a:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 800503c:	8afb      	ldrh	r3, [r7, #22]
 800503e:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8005040:	89fb      	ldrh	r3, [r7, #14]
 8005042:	461a      	mov	r2, r3
 8005044:	4b25      	ldr	r3, [pc, #148]	@ (80050dc <BSP_TS_GetState+0x15c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d906      	bls.n	800505a <BSP_TS_GetState+0xda>
 800504c:	89fa      	ldrh	r2, [r7, #14]
 800504e:	4b23      	ldr	r3, [pc, #140]	@ (80050dc <BSP_TS_GetState+0x15c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	b29b      	uxth	r3, r3
 8005058:	e005      	b.n	8005066 <BSP_TS_GetState+0xe6>
 800505a:	4b20      	ldr	r3, [pc, #128]	@ (80050dc <BSP_TS_GetState+0x15c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	b29a      	uxth	r2, r3
 8005060:	89fb      	ldrh	r3, [r7, #14]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	b29b      	uxth	r3, r3
 8005066:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8005068:	89bb      	ldrh	r3, [r7, #12]
 800506a:	461a      	mov	r2, r3
 800506c:	4b1c      	ldr	r3, [pc, #112]	@ (80050e0 <BSP_TS_GetState+0x160>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d906      	bls.n	8005082 <BSP_TS_GetState+0x102>
 8005074:	89ba      	ldrh	r2, [r7, #12]
 8005076:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <BSP_TS_GetState+0x160>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	b29b      	uxth	r3, r3
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	b29b      	uxth	r3, r3
 8005080:	e005      	b.n	800508e <BSP_TS_GetState+0x10e>
 8005082:	4b17      	ldr	r3, [pc, #92]	@ (80050e0 <BSP_TS_GetState+0x160>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	b29a      	uxth	r2, r3
 8005088:	89bb      	ldrh	r3, [r7, #12]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	b29b      	uxth	r3, r3
 800508e:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8005090:	8a7a      	ldrh	r2, [r7, #18]
 8005092:	8a3b      	ldrh	r3, [r7, #16]
 8005094:	4413      	add	r3, r2
 8005096:	2b05      	cmp	r3, #5
 8005098:	dd07      	ble.n	80050aa <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800509a:	89fb      	ldrh	r3, [r7, #14]
 800509c:	461a      	mov	r2, r3
 800509e:	4b0f      	ldr	r3, [pc, #60]	@ (80050dc <BSP_TS_GetState+0x15c>)
 80050a0:	601a      	str	r2, [r3, #0]
      _y = y; 
 80050a2:	89bb      	ldrh	r3, [r7, #12]
 80050a4:	461a      	mov	r2, r3
 80050a6:	4b0e      	ldr	r3, [pc, #56]	@ (80050e0 <BSP_TS_GetState+0x160>)
 80050a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 80050aa:	4b0c      	ldr	r3, [pc, #48]	@ (80050dc <BSP_TS_GetState+0x15c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 80050b4:	4b0a      	ldr	r3, [pc, #40]	@ (80050e0 <BSP_TS_GetState+0x160>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	809a      	strh	r2, [r3, #4]
  }
}
 80050be:	bf00      	nop
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000850 	.word	0x20000850
 80050cc:	ba2e8ba3 	.word	0xba2e8ba3
 80050d0:	20000856 	.word	0x20000856
 80050d4:	88888889 	.word	0x88888889
 80050d8:	20000854 	.word	0x20000854
 80050dc:	20000858 	.word	0x20000858
 80050e0:	2000085c 	.word	0x2000085c

080050e4 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 80050e8:	4b03      	ldr	r3, [pc, #12]	@ (80050f8 <BSP_TS_ITClear+0x14>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	2082      	movs	r0, #130	@ 0x82
 80050f0:	4798      	blx	r3
}
 80050f2:	bf00      	nop
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20000850 	.word	0x20000850

080050fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005100:	4b0e      	ldr	r3, [pc, #56]	@ (800513c <HAL_Init+0x40>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a0d      	ldr	r2, [pc, #52]	@ (800513c <HAL_Init+0x40>)
 8005106:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800510a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800510c:	4b0b      	ldr	r3, [pc, #44]	@ (800513c <HAL_Init+0x40>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a0a      	ldr	r2, [pc, #40]	@ (800513c <HAL_Init+0x40>)
 8005112:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005118:	4b08      	ldr	r3, [pc, #32]	@ (800513c <HAL_Init+0x40>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a07      	ldr	r2, [pc, #28]	@ (800513c <HAL_Init+0x40>)
 800511e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005124:	2003      	movs	r0, #3
 8005126:	f000 f957 	bl	80053d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800512a:	200f      	movs	r0, #15
 800512c:	f000 f810 	bl	8005150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005130:	f000 f806 	bl	8005140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	40023c00 	.word	0x40023c00

08005140 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8005144:	bf00      	nop
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
	...

08005150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005158:	4b12      	ldr	r3, [pc, #72]	@ (80051a4 <HAL_InitTick+0x54>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	4b12      	ldr	r3, [pc, #72]	@ (80051a8 <HAL_InitTick+0x58>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	4619      	mov	r1, r3
 8005162:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005166:	fbb3 f3f1 	udiv	r3, r3, r1
 800516a:	fbb2 f3f3 	udiv	r3, r2, r3
 800516e:	4618      	mov	r0, r3
 8005170:	f000 f967 	bl	8005442 <HAL_SYSTICK_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e00e      	b.n	800519c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b0f      	cmp	r3, #15
 8005182:	d80a      	bhi.n	800519a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005184:	2200      	movs	r2, #0
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	f04f 30ff 	mov.w	r0, #4294967295
 800518c:	f000 f92f 	bl	80053ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005190:	4a06      	ldr	r2, [pc, #24]	@ (80051ac <HAL_InitTick+0x5c>)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	e000      	b.n	800519c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
}
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	20000020 	.word	0x20000020
 80051a8:	200000ac 	.word	0x200000ac
 80051ac:	200000a8 	.word	0x200000a8

080051b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051b4:	4b06      	ldr	r3, [pc, #24]	@ (80051d0 <HAL_IncTick+0x20>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	4b06      	ldr	r3, [pc, #24]	@ (80051d4 <HAL_IncTick+0x24>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4413      	add	r3, r2
 80051c0:	4a04      	ldr	r2, [pc, #16]	@ (80051d4 <HAL_IncTick+0x24>)
 80051c2:	6013      	str	r3, [r2, #0]
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	200000ac 	.word	0x200000ac
 80051d4:	20000860 	.word	0x20000860

080051d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  return uwTick;
 80051dc:	4b03      	ldr	r3, [pc, #12]	@ (80051ec <HAL_GetTick+0x14>)
 80051de:	681b      	ldr	r3, [r3, #0]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	20000860 	.word	0x20000860

080051f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051f8:	f7ff ffee 	bl	80051d8 <HAL_GetTick>
 80051fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005208:	d005      	beq.n	8005216 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800520a:	4b0a      	ldr	r3, [pc, #40]	@ (8005234 <HAL_Delay+0x44>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4413      	add	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005216:	bf00      	nop
 8005218:	f7ff ffde 	bl	80051d8 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	429a      	cmp	r2, r3
 8005226:	d8f7      	bhi.n	8005218 <HAL_Delay+0x28>
  {
  }
}
 8005228:	bf00      	nop
 800522a:	bf00      	nop
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	200000ac 	.word	0x200000ac

08005238 <__NVIC_SetPriorityGrouping>:
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005248:	4b0c      	ldr	r3, [pc, #48]	@ (800527c <__NVIC_SetPriorityGrouping+0x44>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005254:	4013      	ands	r3, r2
 8005256:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005260:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800526a:	4a04      	ldr	r2, [pc, #16]	@ (800527c <__NVIC_SetPriorityGrouping+0x44>)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	60d3      	str	r3, [r2, #12]
}
 8005270:	bf00      	nop
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	e000ed00 	.word	0xe000ed00

08005280 <__NVIC_GetPriorityGrouping>:
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005284:	4b04      	ldr	r3, [pc, #16]	@ (8005298 <__NVIC_GetPriorityGrouping+0x18>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	0a1b      	lsrs	r3, r3, #8
 800528a:	f003 0307 	and.w	r3, r3, #7
}
 800528e:	4618      	mov	r0, r3
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	e000ed00 	.word	0xe000ed00

0800529c <__NVIC_EnableIRQ>:
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	4603      	mov	r3, r0
 80052a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	db0b      	blt.n	80052c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	f003 021f 	and.w	r2, r3, #31
 80052b4:	4907      	ldr	r1, [pc, #28]	@ (80052d4 <__NVIC_EnableIRQ+0x38>)
 80052b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	2001      	movs	r0, #1
 80052be:	fa00 f202 	lsl.w	r2, r0, r2
 80052c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	e000e100 	.word	0xe000e100

080052d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	4603      	mov	r3, r0
 80052e0:	6039      	str	r1, [r7, #0]
 80052e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	db0a      	blt.n	8005302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	490c      	ldr	r1, [pc, #48]	@ (8005324 <__NVIC_SetPriority+0x4c>)
 80052f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052f6:	0112      	lsls	r2, r2, #4
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	440b      	add	r3, r1
 80052fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005300:	e00a      	b.n	8005318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	b2da      	uxtb	r2, r3
 8005306:	4908      	ldr	r1, [pc, #32]	@ (8005328 <__NVIC_SetPriority+0x50>)
 8005308:	79fb      	ldrb	r3, [r7, #7]
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	3b04      	subs	r3, #4
 8005310:	0112      	lsls	r2, r2, #4
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	440b      	add	r3, r1
 8005316:	761a      	strb	r2, [r3, #24]
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	e000e100 	.word	0xe000e100
 8005328:	e000ed00 	.word	0xe000ed00

0800532c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800532c:	b480      	push	{r7}
 800532e:	b089      	sub	sp, #36	@ 0x24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f1c3 0307 	rsb	r3, r3, #7
 8005346:	2b04      	cmp	r3, #4
 8005348:	bf28      	it	cs
 800534a:	2304      	movcs	r3, #4
 800534c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	3304      	adds	r3, #4
 8005352:	2b06      	cmp	r3, #6
 8005354:	d902      	bls.n	800535c <NVIC_EncodePriority+0x30>
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	3b03      	subs	r3, #3
 800535a:	e000      	b.n	800535e <NVIC_EncodePriority+0x32>
 800535c:	2300      	movs	r3, #0
 800535e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005360:	f04f 32ff 	mov.w	r2, #4294967295
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	43da      	mvns	r2, r3
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	401a      	ands	r2, r3
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005374:	f04f 31ff 	mov.w	r1, #4294967295
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	fa01 f303 	lsl.w	r3, r1, r3
 800537e:	43d9      	mvns	r1, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005384:	4313      	orrs	r3, r2
         );
}
 8005386:	4618      	mov	r0, r3
 8005388:	3724      	adds	r7, #36	@ 0x24
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
	...

08005394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3b01      	subs	r3, #1
 80053a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053a4:	d301      	bcc.n	80053aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053a6:	2301      	movs	r3, #1
 80053a8:	e00f      	b.n	80053ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053aa:	4a0a      	ldr	r2, [pc, #40]	@ (80053d4 <SysTick_Config+0x40>)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053b2:	210f      	movs	r1, #15
 80053b4:	f04f 30ff 	mov.w	r0, #4294967295
 80053b8:	f7ff ff8e 	bl	80052d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053bc:	4b05      	ldr	r3, [pc, #20]	@ (80053d4 <SysTick_Config+0x40>)
 80053be:	2200      	movs	r2, #0
 80053c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053c2:	4b04      	ldr	r3, [pc, #16]	@ (80053d4 <SysTick_Config+0x40>)
 80053c4:	2207      	movs	r2, #7
 80053c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	e000e010 	.word	0xe000e010

080053d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff ff29 	bl	8005238 <__NVIC_SetPriorityGrouping>
}
 80053e6:	bf00      	nop
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b086      	sub	sp, #24
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	4603      	mov	r3, r0
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	607a      	str	r2, [r7, #4]
 80053fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005400:	f7ff ff3e 	bl	8005280 <__NVIC_GetPriorityGrouping>
 8005404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	6978      	ldr	r0, [r7, #20]
 800540c:	f7ff ff8e 	bl	800532c <NVIC_EncodePriority>
 8005410:	4602      	mov	r2, r0
 8005412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005416:	4611      	mov	r1, r2
 8005418:	4618      	mov	r0, r3
 800541a:	f7ff ff5d 	bl	80052d8 <__NVIC_SetPriority>
}
 800541e:	bf00      	nop
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	4603      	mov	r3, r0
 800542e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff ff31 	bl	800529c <__NVIC_EnableIRQ>
}
 800543a:	bf00      	nop
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b082      	sub	sp, #8
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7ff ffa2 	bl	8005394 <SysTick_Config>
 8005450:	4603      	mov	r3, r0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005468:	f7ff feb6 	bl	80051d8 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e099      	b.n	80055ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0201 	bic.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005498:	e00f      	b.n	80054ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800549a:	f7ff fe9d 	bl	80051d8 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b05      	cmp	r3, #5
 80054a6:	d908      	bls.n	80054ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2220      	movs	r2, #32
 80054ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2203      	movs	r2, #3
 80054b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e078      	b.n	80055ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e8      	bne.n	800549a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	4b38      	ldr	r3, [pc, #224]	@ (80055b4 <HAL_DMA_Init+0x158>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005510:	2b04      	cmp	r3, #4
 8005512:	d107      	bne.n	8005524 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551c:	4313      	orrs	r3, r2
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f023 0307 	bic.w	r3, r3, #7
 800553a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	4313      	orrs	r3, r2
 8005544:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554a:	2b04      	cmp	r3, #4
 800554c:	d117      	bne.n	800557e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00e      	beq.n	800557e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f8bd 	bl	80056e0 <DMA_CheckFifoParam>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d008      	beq.n	800557e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2240      	movs	r2, #64	@ 0x40
 8005570:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800557a:	2301      	movs	r3, #1
 800557c:	e016      	b.n	80055ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f874 	bl	8005674 <DMA_CalcBaseAndBitshift>
 800558c:	4603      	mov	r3, r0
 800558e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005594:	223f      	movs	r2, #63	@ 0x3f
 8005596:	409a      	lsls	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	f010803f 	.word	0xf010803f

080055b8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e050      	b.n	800566c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d101      	bne.n	80055da <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80055d6:	2302      	movs	r3, #2
 80055d8:	e048      	b.n	800566c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0201 	bic.w	r2, r2, #1
 80055e8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2200      	movs	r2, #0
 80055f8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2200      	movs	r2, #0
 8005600:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2200      	movs	r2, #0
 8005608:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2200      	movs	r2, #0
 8005610:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2221      	movs	r2, #33	@ 0x21
 8005618:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f82a 	bl	8005674 <DMA_CalcBaseAndBitshift>
 8005620:	4603      	mov	r3, r0
 8005622:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800564c:	223f      	movs	r2, #63	@ 0x3f
 800564e:	409a      	lsls	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	b2db      	uxtb	r3, r3
 8005682:	3b10      	subs	r3, #16
 8005684:	4a14      	ldr	r2, [pc, #80]	@ (80056d8 <DMA_CalcBaseAndBitshift+0x64>)
 8005686:	fba2 2303 	umull	r2, r3, r2, r3
 800568a:	091b      	lsrs	r3, r3, #4
 800568c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800568e:	4a13      	ldr	r2, [pc, #76]	@ (80056dc <DMA_CalcBaseAndBitshift+0x68>)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d909      	bls.n	80056b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80056aa:	f023 0303 	bic.w	r3, r3, #3
 80056ae:	1d1a      	adds	r2, r3, #4
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80056b4:	e007      	b.n	80056c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80056be:	f023 0303 	bic.w	r3, r3, #3
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	aaaaaaab 	.word	0xaaaaaaab
 80056dc:	0800df98 	.word	0x0800df98

080056e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d11f      	bne.n	800573a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	d856      	bhi.n	80057ae <DMA_CheckFifoParam+0xce>
 8005700:	a201      	add	r2, pc, #4	@ (adr r2, 8005708 <DMA_CheckFifoParam+0x28>)
 8005702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005706:	bf00      	nop
 8005708:	08005719 	.word	0x08005719
 800570c:	0800572b 	.word	0x0800572b
 8005710:	08005719 	.word	0x08005719
 8005714:	080057af 	.word	0x080057af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d046      	beq.n	80057b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005728:	e043      	b.n	80057b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005732:	d140      	bne.n	80057b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005738:	e03d      	b.n	80057b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005742:	d121      	bne.n	8005788 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b03      	cmp	r3, #3
 8005748:	d837      	bhi.n	80057ba <DMA_CheckFifoParam+0xda>
 800574a:	a201      	add	r2, pc, #4	@ (adr r2, 8005750 <DMA_CheckFifoParam+0x70>)
 800574c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005750:	08005761 	.word	0x08005761
 8005754:	08005767 	.word	0x08005767
 8005758:	08005761 	.word	0x08005761
 800575c:	08005779 	.word	0x08005779
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
      break;
 8005764:	e030      	b.n	80057c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d025      	beq.n	80057be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005776:	e022      	b.n	80057be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005780:	d11f      	bne.n	80057c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005786:	e01c      	b.n	80057c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b02      	cmp	r3, #2
 800578c:	d903      	bls.n	8005796 <DMA_CheckFifoParam+0xb6>
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b03      	cmp	r3, #3
 8005792:	d003      	beq.n	800579c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005794:	e018      	b.n	80057c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	73fb      	strb	r3, [r7, #15]
      break;
 800579a:	e015      	b.n	80057c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00e      	beq.n	80057c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	73fb      	strb	r3, [r7, #15]
      break;
 80057ac:	e00b      	b.n	80057c6 <DMA_CheckFifoParam+0xe6>
      break;
 80057ae:	bf00      	nop
 80057b0:	e00a      	b.n	80057c8 <DMA_CheckFifoParam+0xe8>
      break;
 80057b2:	bf00      	nop
 80057b4:	e008      	b.n	80057c8 <DMA_CheckFifoParam+0xe8>
      break;
 80057b6:	bf00      	nop
 80057b8:	e006      	b.n	80057c8 <DMA_CheckFifoParam+0xe8>
      break;
 80057ba:	bf00      	nop
 80057bc:	e004      	b.n	80057c8 <DMA_CheckFifoParam+0xe8>
      break;
 80057be:	bf00      	nop
 80057c0:	e002      	b.n	80057c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80057c2:	bf00      	nop
 80057c4:	e000      	b.n	80057c8 <DMA_CheckFifoParam+0xe8>
      break;
 80057c6:	bf00      	nop
    }
  } 
  
  return status; 
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop

080057d8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e03b      	b.n	8005862 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f833 	bl	800586a <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005828:	f023 0107 	bic.w	r1, r3, #7
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005842:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	68d1      	ldr	r1, [r2, #12]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6812      	ldr	r2, [r2, #0]
 800584e:	430b      	orrs	r3, r1
 8005850:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b086      	sub	sp, #24
 8005882:	af02      	add	r7, sp, #8
 8005884:	60f8      	str	r0, [r7, #12]
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	607a      	str	r2, [r7, #4]
 800588a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005892:	2b01      	cmp	r3, #1
 8005894:	d101      	bne.n	800589a <HAL_DMA2D_Start+0x1c>
 8005896:	2302      	movs	r3, #2
 8005898:	e018      	b.n	80058cc <HAL_DMA2D_Start+0x4e>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2202      	movs	r2, #2
 80058a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 f989 	bl	8005bcc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0201 	orr.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d056      	beq.n	800599e <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80058f0:	f7ff fc72 	bl	80051d8 <HAL_GetTick>
 80058f4:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80058f6:	e04b      	b.n	8005990 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005906:	2b00      	cmp	r3, #0
 8005908:	d023      	beq.n	8005952 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005918:	f043 0202 	orr.w	r2, r3, #2
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d005      	beq.n	8005936 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592e:	f043 0201 	orr.w	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2221      	movs	r2, #33	@ 0x21
 800593c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2204      	movs	r2, #4
 8005942:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e0a5      	b.n	8005a9e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005958:	d01a      	beq.n	8005990 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800595a:	f7ff fc3d 	bl	80051d8 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d302      	bcc.n	8005970 <HAL_DMA2D_PollForTransfer+0x9c>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10f      	bne.n	8005990 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005974:	f043 0220 	orr.w	r2, r3, #32
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2203      	movs	r2, #3
 8005980:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e086      	b.n	8005a9e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0ac      	beq.n	80058f8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	f003 0320 	and.w	r3, r3, #32
 80059a8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d061      	beq.n	8005a84 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80059c0:	f7ff fc0a 	bl	80051d8 <HAL_GetTick>
 80059c4:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80059c6:	e056      	b.n	8005a76 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d02e      	beq.n	8005a38 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d005      	beq.n	80059f0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e8:	f043 0204 	orr.w	r2, r3, #4
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f003 0320 	and.w	r3, r3, #32
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d005      	beq.n	8005a06 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059fe:	f043 0202 	orr.w	r2, r3, #2
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d005      	beq.n	8005a1c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a14:	f043 0201 	orr.w	r2, r3, #1
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2229      	movs	r2, #41	@ 0x29
 8005a22:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2204      	movs	r2, #4
 8005a28:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e032      	b.n	8005a9e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3e:	d01a      	beq.n	8005a76 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005a40:	f7ff fbca 	bl	80051d8 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d302      	bcc.n	8005a56 <HAL_DMA2D_PollForTransfer+0x182>
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10f      	bne.n	8005a76 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5a:	f043 0220 	orr.w	r2, r3, #32
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2203      	movs	r2, #3
 8005a66:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e013      	b.n	8005a9e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f003 0310 	and.w	r3, r3, #16
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0a1      	beq.n	80059c8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2212      	movs	r2, #18
 8005a8a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d101      	bne.n	8005ac8 <HAL_DMA2D_ConfigLayer+0x20>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e079      	b.n	8005bbc <HAL_DMA2D_ConfigLayer+0x114>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	3318      	adds	r3, #24
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	041b      	lsls	r3, r3, #16
 8005aee:	4313      	orrs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005af2:	4b35      	ldr	r3, [pc, #212]	@ (8005bc8 <HAL_DMA2D_ConfigLayer+0x120>)
 8005af4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b0a      	cmp	r3, #10
 8005afc:	d003      	beq.n	8005b06 <HAL_DMA2D_ConfigLayer+0x5e>
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	2b09      	cmp	r3, #9
 8005b04:	d107      	bne.n	8005b16 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	e005      	b.n	8005b22 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	061b      	lsls	r3, r3, #24
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d120      	bne.n	8005b6a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	43db      	mvns	r3, r3
 8005b32:	ea02 0103 	and.w	r1, r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	6812      	ldr	r2, [r2, #0]
 8005b48:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2b0a      	cmp	r3, #10
 8005b50:	d003      	beq.n	8005b5a <HAL_DMA2D_ConfigLayer+0xb2>
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2b09      	cmp	r3, #9
 8005b58:	d127      	bne.n	8005baa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005b66:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b68:	e01f      	b.n	8005baa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69da      	ldr	r2, [r3, #28]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	43db      	mvns	r3, r3
 8005b74:	ea02 0103 	and.w	r1, r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	6812      	ldr	r2, [r2, #0]
 8005b8a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	2b0a      	cmp	r3, #10
 8005b92:	d003      	beq.n	8005b9c <HAL_DMA2D_ConfigLayer+0xf4>
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2b09      	cmp	r3, #9
 8005b9a:	d106      	bne.n	8005baa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005ba8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	371c      	adds	r7, #28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	ff03000f 	.word	0xff03000f

08005bcc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b08b      	sub	sp, #44	@ 0x2c
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
 8005bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be0:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	041a      	lsls	r2, r3, #16
 8005be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bea:	431a      	orrs	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c04:	d174      	bne.n	8005cf0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005c0c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005c14:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005c1c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d108      	bne.n	8005c3e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	431a      	orrs	r2, r3
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c3c:	e053      	b.n	8005ce6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d106      	bne.n	8005c54 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c52:	e048      	b.n	8005ce6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d111      	bne.n	8005c80 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	0cdb      	lsrs	r3, r3, #19
 8005c60:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	0a9b      	lsrs	r3, r3, #10
 8005c66:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	08db      	lsrs	r3, r3, #3
 8005c6c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	02db      	lsls	r3, r3, #11
 8005c76:	4313      	orrs	r3, r2
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c7e:	e032      	b.n	8005ce6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d117      	bne.n	8005cb8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	0fdb      	lsrs	r3, r3, #31
 8005c8c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	0cdb      	lsrs	r3, r3, #19
 8005c92:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	0adb      	lsrs	r3, r3, #11
 8005c98:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	08db      	lsrs	r3, r3, #3
 8005c9e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	029b      	lsls	r3, r3, #10
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	03db      	lsls	r3, r3, #15
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cb6:	e016      	b.n	8005ce6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	0f1b      	lsrs	r3, r3, #28
 8005cbc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	0d1b      	lsrs	r3, r3, #20
 8005cc2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	0b1b      	lsrs	r3, r3, #12
 8005cc8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	091b      	lsrs	r3, r3, #4
 8005cce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	011a      	lsls	r2, r3, #4
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	021b      	lsls	r3, r3, #8
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	031b      	lsls	r3, r3, #12
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cec:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005cee:	e003      	b.n	8005cf8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	60da      	str	r2, [r3, #12]
}
 8005cf8:	bf00      	nop
 8005cfa:	372c      	adds	r7, #44	@ 0x2c
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b089      	sub	sp, #36	@ 0x24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	61fb      	str	r3, [r7, #28]
 8005d1e:	e177      	b.n	8006010 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d20:	2201      	movs	r2, #1
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4013      	ands	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	f040 8166 	bne.w	800600a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d00b      	beq.n	8005d5e <HAL_GPIO_Init+0x5a>
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d007      	beq.n	8005d5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d52:	2b11      	cmp	r3, #17
 8005d54:	d003      	beq.n	8005d5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2b12      	cmp	r3, #18
 8005d5c:	d130      	bne.n	8005dc0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	2203      	movs	r2, #3
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	43db      	mvns	r3, r3
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	4013      	ands	r3, r2
 8005d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68da      	ldr	r2, [r3, #12]
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	005b      	lsls	r3, r3, #1
 8005d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d94:	2201      	movs	r2, #1
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9c:	43db      	mvns	r3, r3
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	4013      	ands	r3, r2
 8005da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	091b      	lsrs	r3, r3, #4
 8005daa:	f003 0201 	and.w	r2, r3, #1
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	fa02 f303 	lsl.w	r3, r2, r3
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	2203      	movs	r2, #3
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d003      	beq.n	8005e00 <HAL_GPIO_Init+0xfc>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b12      	cmp	r3, #18
 8005dfe:	d123      	bne.n	8005e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	08da      	lsrs	r2, r3, #3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3208      	adds	r2, #8
 8005e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	220f      	movs	r2, #15
 8005e18:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1c:	43db      	mvns	r3, r3
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	4013      	ands	r3, r2
 8005e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	fa02 f303 	lsl.w	r3, r2, r3
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	08da      	lsrs	r2, r3, #3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	3208      	adds	r2, #8
 8005e42:	69b9      	ldr	r1, [r7, #24]
 8005e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	2203      	movs	r2, #3
 8005e54:	fa02 f303 	lsl.w	r3, r2, r3
 8005e58:	43db      	mvns	r3, r3
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f003 0203 	and.w	r2, r3, #3
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 80c0 	beq.w	800600a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	4b66      	ldr	r3, [pc, #408]	@ (8006028 <HAL_GPIO_Init+0x324>)
 8005e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e92:	4a65      	ldr	r2, [pc, #404]	@ (8006028 <HAL_GPIO_Init+0x324>)
 8005e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8005e9a:	4b63      	ldr	r3, [pc, #396]	@ (8006028 <HAL_GPIO_Init+0x324>)
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ea6:	4a61      	ldr	r2, [pc, #388]	@ (800602c <HAL_GPIO_Init+0x328>)
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	089b      	lsrs	r3, r3, #2
 8005eac:	3302      	adds	r3, #2
 8005eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	220f      	movs	r2, #15
 8005ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec2:	43db      	mvns	r3, r3
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a58      	ldr	r2, [pc, #352]	@ (8006030 <HAL_GPIO_Init+0x32c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d037      	beq.n	8005f42 <HAL_GPIO_Init+0x23e>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a57      	ldr	r2, [pc, #348]	@ (8006034 <HAL_GPIO_Init+0x330>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d031      	beq.n	8005f3e <HAL_GPIO_Init+0x23a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a56      	ldr	r2, [pc, #344]	@ (8006038 <HAL_GPIO_Init+0x334>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d02b      	beq.n	8005f3a <HAL_GPIO_Init+0x236>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a55      	ldr	r2, [pc, #340]	@ (800603c <HAL_GPIO_Init+0x338>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d025      	beq.n	8005f36 <HAL_GPIO_Init+0x232>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a54      	ldr	r2, [pc, #336]	@ (8006040 <HAL_GPIO_Init+0x33c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d01f      	beq.n	8005f32 <HAL_GPIO_Init+0x22e>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a53      	ldr	r2, [pc, #332]	@ (8006044 <HAL_GPIO_Init+0x340>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d019      	beq.n	8005f2e <HAL_GPIO_Init+0x22a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a52      	ldr	r2, [pc, #328]	@ (8006048 <HAL_GPIO_Init+0x344>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d013      	beq.n	8005f2a <HAL_GPIO_Init+0x226>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a51      	ldr	r2, [pc, #324]	@ (800604c <HAL_GPIO_Init+0x348>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d00d      	beq.n	8005f26 <HAL_GPIO_Init+0x222>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a50      	ldr	r2, [pc, #320]	@ (8006050 <HAL_GPIO_Init+0x34c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d007      	beq.n	8005f22 <HAL_GPIO_Init+0x21e>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a4f      	ldr	r2, [pc, #316]	@ (8006054 <HAL_GPIO_Init+0x350>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d101      	bne.n	8005f1e <HAL_GPIO_Init+0x21a>
 8005f1a:	2309      	movs	r3, #9
 8005f1c:	e012      	b.n	8005f44 <HAL_GPIO_Init+0x240>
 8005f1e:	230a      	movs	r3, #10
 8005f20:	e010      	b.n	8005f44 <HAL_GPIO_Init+0x240>
 8005f22:	2308      	movs	r3, #8
 8005f24:	e00e      	b.n	8005f44 <HAL_GPIO_Init+0x240>
 8005f26:	2307      	movs	r3, #7
 8005f28:	e00c      	b.n	8005f44 <HAL_GPIO_Init+0x240>
 8005f2a:	2306      	movs	r3, #6
 8005f2c:	e00a      	b.n	8005f44 <HAL_GPIO_Init+0x240>
 8005f2e:	2305      	movs	r3, #5
 8005f30:	e008      	b.n	8005f44 <HAL_GPIO_Init+0x240>
 8005f32:	2304      	movs	r3, #4
 8005f34:	e006      	b.n	8005f44 <HAL_GPIO_Init+0x240>
 8005f36:	2303      	movs	r3, #3
 8005f38:	e004      	b.n	8005f44 <HAL_GPIO_Init+0x240>
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e002      	b.n	8005f44 <HAL_GPIO_Init+0x240>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <HAL_GPIO_Init+0x240>
 8005f42:	2300      	movs	r3, #0
 8005f44:	69fa      	ldr	r2, [r7, #28]
 8005f46:	f002 0203 	and.w	r2, r2, #3
 8005f4a:	0092      	lsls	r2, r2, #2
 8005f4c:	4093      	lsls	r3, r2
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f54:	4935      	ldr	r1, [pc, #212]	@ (800602c <HAL_GPIO_Init+0x328>)
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	089b      	lsrs	r3, r3, #2
 8005f5a:	3302      	adds	r3, #2
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f62:	4b3d      	ldr	r3, [pc, #244]	@ (8006058 <HAL_GPIO_Init+0x354>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	43db      	mvns	r3, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f86:	4a34      	ldr	r2, [pc, #208]	@ (8006058 <HAL_GPIO_Init+0x354>)
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005f8c:	4b32      	ldr	r3, [pc, #200]	@ (8006058 <HAL_GPIO_Init+0x354>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	43db      	mvns	r3, r3
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005fb0:	4a29      	ldr	r2, [pc, #164]	@ (8006058 <HAL_GPIO_Init+0x354>)
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005fb6:	4b28      	ldr	r3, [pc, #160]	@ (8006058 <HAL_GPIO_Init+0x354>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005fda:	4a1f      	ldr	r2, [pc, #124]	@ (8006058 <HAL_GPIO_Init+0x354>)
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8006058 <HAL_GPIO_Init+0x354>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	4013      	ands	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006004:	4a14      	ldr	r2, [pc, #80]	@ (8006058 <HAL_GPIO_Init+0x354>)
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	3301      	adds	r3, #1
 800600e:	61fb      	str	r3, [r7, #28]
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	2b0f      	cmp	r3, #15
 8006014:	f67f ae84 	bls.w	8005d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006018:	bf00      	nop
 800601a:	bf00      	nop
 800601c:	3724      	adds	r7, #36	@ 0x24
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40023800 	.word	0x40023800
 800602c:	40013800 	.word	0x40013800
 8006030:	40020000 	.word	0x40020000
 8006034:	40020400 	.word	0x40020400
 8006038:	40020800 	.word	0x40020800
 800603c:	40020c00 	.word	0x40020c00
 8006040:	40021000 	.word	0x40021000
 8006044:	40021400 	.word	0x40021400
 8006048:	40021800 	.word	0x40021800
 800604c:	40021c00 	.word	0x40021c00
 8006050:	40022000 	.word	0x40022000
 8006054:	40022400 	.word	0x40022400
 8006058:	40013c00 	.word	0x40013c00

0800605c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	460b      	mov	r3, r1
 8006066:	807b      	strh	r3, [r7, #2]
 8006068:	4613      	mov	r3, r2
 800606a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800606c:	787b      	ldrb	r3, [r7, #1]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006072:	887a      	ldrh	r2, [r7, #2]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006078:	e003      	b.n	8006082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800607a:	887b      	ldrh	r3, [r7, #2]
 800607c:	041a      	lsls	r2, r3, #16
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	619a      	str	r2, [r3, #24]
}
 8006082:	bf00      	nop
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
	...

08006090 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e12b      	b.n	80062fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d106      	bne.n	80060bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f95d 	bl	8006376 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2224      	movs	r2, #36	@ 0x24
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0201 	bic.w	r2, r2, #1
 80060d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80060f4:	f001 ff1a 	bl	8007f2c <HAL_RCC_GetPCLK1Freq>
 80060f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	4a81      	ldr	r2, [pc, #516]	@ (8006304 <HAL_I2C_Init+0x274>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d807      	bhi.n	8006114 <HAL_I2C_Init+0x84>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4a80      	ldr	r2, [pc, #512]	@ (8006308 <HAL_I2C_Init+0x278>)
 8006108:	4293      	cmp	r3, r2
 800610a:	bf94      	ite	ls
 800610c:	2301      	movls	r3, #1
 800610e:	2300      	movhi	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	e006      	b.n	8006122 <HAL_I2C_Init+0x92>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4a7d      	ldr	r2, [pc, #500]	@ (800630c <HAL_I2C_Init+0x27c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	bf94      	ite	ls
 800611c:	2301      	movls	r3, #1
 800611e:	2300      	movhi	r3, #0
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e0e7      	b.n	80062fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	4a78      	ldr	r2, [pc, #480]	@ (8006310 <HAL_I2C_Init+0x280>)
 800612e:	fba2 2303 	umull	r2, r3, r2, r3
 8006132:	0c9b      	lsrs	r3, r3, #18
 8006134:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	430a      	orrs	r2, r1
 8006148:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6a1b      	ldr	r3, [r3, #32]
 8006150:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	4a6a      	ldr	r2, [pc, #424]	@ (8006304 <HAL_I2C_Init+0x274>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d802      	bhi.n	8006164 <HAL_I2C_Init+0xd4>
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	3301      	adds	r3, #1
 8006162:	e009      	b.n	8006178 <HAL_I2C_Init+0xe8>
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800616a:	fb02 f303 	mul.w	r3, r2, r3
 800616e:	4a69      	ldr	r2, [pc, #420]	@ (8006314 <HAL_I2C_Init+0x284>)
 8006170:	fba2 2303 	umull	r2, r3, r2, r3
 8006174:	099b      	lsrs	r3, r3, #6
 8006176:	3301      	adds	r3, #1
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6812      	ldr	r2, [r2, #0]
 800617c:	430b      	orrs	r3, r1
 800617e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800618a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	495c      	ldr	r1, [pc, #368]	@ (8006304 <HAL_I2C_Init+0x274>)
 8006194:	428b      	cmp	r3, r1
 8006196:	d819      	bhi.n	80061cc <HAL_I2C_Init+0x13c>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	1e59      	subs	r1, r3, #1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80061a6:	1c59      	adds	r1, r3, #1
 80061a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80061ac:	400b      	ands	r3, r1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <HAL_I2C_Init+0x138>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	1e59      	subs	r1, r3, #1
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80061c0:	3301      	adds	r3, #1
 80061c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061c6:	e051      	b.n	800626c <HAL_I2C_Init+0x1dc>
 80061c8:	2304      	movs	r3, #4
 80061ca:	e04f      	b.n	800626c <HAL_I2C_Init+0x1dc>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d111      	bne.n	80061f8 <HAL_I2C_Init+0x168>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	1e58      	subs	r0, r3, #1
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6859      	ldr	r1, [r3, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	440b      	add	r3, r1
 80061e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80061e6:	3301      	adds	r3, #1
 80061e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	bf0c      	ite	eq
 80061f0:	2301      	moveq	r3, #1
 80061f2:	2300      	movne	r3, #0
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	e012      	b.n	800621e <HAL_I2C_Init+0x18e>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	1e58      	subs	r0, r3, #1
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6859      	ldr	r1, [r3, #4]
 8006200:	460b      	mov	r3, r1
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	440b      	add	r3, r1
 8006206:	0099      	lsls	r1, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	fbb0 f3f3 	udiv	r3, r0, r3
 800620e:	3301      	adds	r3, #1
 8006210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006214:	2b00      	cmp	r3, #0
 8006216:	bf0c      	ite	eq
 8006218:	2301      	moveq	r3, #1
 800621a:	2300      	movne	r3, #0
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <HAL_I2C_Init+0x196>
 8006222:	2301      	movs	r3, #1
 8006224:	e022      	b.n	800626c <HAL_I2C_Init+0x1dc>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10e      	bne.n	800624c <HAL_I2C_Init+0x1bc>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	1e58      	subs	r0, r3, #1
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6859      	ldr	r1, [r3, #4]
 8006236:	460b      	mov	r3, r1
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	440b      	add	r3, r1
 800623c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006240:	3301      	adds	r3, #1
 8006242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006246:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800624a:	e00f      	b.n	800626c <HAL_I2C_Init+0x1dc>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	1e58      	subs	r0, r3, #1
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6859      	ldr	r1, [r3, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	440b      	add	r3, r1
 800625a:	0099      	lsls	r1, r3, #2
 800625c:	440b      	add	r3, r1
 800625e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006262:	3301      	adds	r3, #1
 8006264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006268:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	6809      	ldr	r1, [r1, #0]
 8006270:	4313      	orrs	r3, r2
 8006272:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	69da      	ldr	r2, [r3, #28]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800629a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	6911      	ldr	r1, [r2, #16]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	68d2      	ldr	r2, [r2, #12]
 80062a6:	4311      	orrs	r1, r2
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6812      	ldr	r2, [r2, #0]
 80062ac:	430b      	orrs	r3, r1
 80062ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	695a      	ldr	r2, [r3, #20]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0201 	orr.w	r2, r2, #1
 80062da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	000186a0 	.word	0x000186a0
 8006308:	001e847f 	.word	0x001e847f
 800630c:	003d08ff 	.word	0x003d08ff
 8006310:	431bde83 	.word	0x431bde83
 8006314:	10624dd3 	.word	0x10624dd3

08006318 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e021      	b.n	800636e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2224      	movs	r2, #36	@ 0x24
 800632e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0201 	bic.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f821 	bl	800638a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
	...

080063a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	4608      	mov	r0, r1
 80063aa:	4611      	mov	r1, r2
 80063ac:	461a      	mov	r2, r3
 80063ae:	4603      	mov	r3, r0
 80063b0:	817b      	strh	r3, [r7, #10]
 80063b2:	460b      	mov	r3, r1
 80063b4:	813b      	strh	r3, [r7, #8]
 80063b6:	4613      	mov	r3, r2
 80063b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063ba:	f7fe ff0d 	bl	80051d8 <HAL_GetTick>
 80063be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b20      	cmp	r3, #32
 80063ca:	f040 80d9 	bne.w	8006580 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	2319      	movs	r3, #25
 80063d4:	2201      	movs	r2, #1
 80063d6:	496d      	ldr	r1, [pc, #436]	@ (800658c <HAL_I2C_Mem_Write+0x1ec>)
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 fc89 	bl	8006cf0 <I2C_WaitOnFlagUntilTimeout>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80063e4:	2302      	movs	r3, #2
 80063e6:	e0cc      	b.n	8006582 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <HAL_I2C_Mem_Write+0x56>
 80063f2:	2302      	movs	r3, #2
 80063f4:	e0c5      	b.n	8006582 <HAL_I2C_Mem_Write+0x1e2>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b01      	cmp	r3, #1
 800640a:	d007      	beq.n	800641c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0201 	orr.w	r2, r2, #1
 800641a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800642a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2221      	movs	r2, #33	@ 0x21
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2240      	movs	r2, #64	@ 0x40
 8006438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a3a      	ldr	r2, [r7, #32]
 8006446:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800644c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006452:	b29a      	uxth	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4a4d      	ldr	r2, [pc, #308]	@ (8006590 <HAL_I2C_Mem_Write+0x1f0>)
 800645c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800645e:	88f8      	ldrh	r0, [r7, #6]
 8006460:	893a      	ldrh	r2, [r7, #8]
 8006462:	8979      	ldrh	r1, [r7, #10]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	9301      	str	r3, [sp, #4]
 8006468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	4603      	mov	r3, r0
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 fac4 	bl	80069fc <I2C_RequestMemoryWrite>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d052      	beq.n	8006520 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e081      	b.n	8006582 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 fd0a 	bl	8006e9c <I2C_WaitOnTXEFlagUntilTimeout>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00d      	beq.n	80064aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006492:	2b04      	cmp	r3, #4
 8006494:	d107      	bne.n	80064a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e06b      	b.n	8006582 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ae:	781a      	ldrb	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064c4:	3b01      	subs	r3, #1
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	3b01      	subs	r3, #1
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d11b      	bne.n	8006520 <HAL_I2C_Mem_Write+0x180>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d017      	beq.n	8006520 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f4:	781a      	ldrb	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800650a:	3b01      	subs	r3, #1
 800650c:	b29a      	uxth	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006516:	b29b      	uxth	r3, r3
 8006518:	3b01      	subs	r3, #1
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1aa      	bne.n	800647e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 fcf6 	bl	8006f1e <I2C_WaitOnBTFFlagUntilTimeout>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00d      	beq.n	8006554 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653c:	2b04      	cmp	r3, #4
 800653e:	d107      	bne.n	8006550 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800654e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e016      	b.n	8006582 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2220      	movs	r2, #32
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	e000      	b.n	8006582 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006580:	2302      	movs	r3, #2
  }
}
 8006582:	4618      	mov	r0, r3
 8006584:	3718      	adds	r7, #24
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	00100002 	.word	0x00100002
 8006590:	ffff0000 	.word	0xffff0000

08006594 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08c      	sub	sp, #48	@ 0x30
 8006598:	af02      	add	r7, sp, #8
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	4608      	mov	r0, r1
 800659e:	4611      	mov	r1, r2
 80065a0:	461a      	mov	r2, r3
 80065a2:	4603      	mov	r3, r0
 80065a4:	817b      	strh	r3, [r7, #10]
 80065a6:	460b      	mov	r3, r1
 80065a8:	813b      	strh	r3, [r7, #8]
 80065aa:	4613      	mov	r3, r2
 80065ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065ae:	f7fe fe13 	bl	80051d8 <HAL_GetTick>
 80065b2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b20      	cmp	r3, #32
 80065be:	f040 8208 	bne.w	80069d2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	2319      	movs	r3, #25
 80065c8:	2201      	movs	r2, #1
 80065ca:	497b      	ldr	r1, [pc, #492]	@ (80067b8 <HAL_I2C_Mem_Read+0x224>)
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f000 fb8f 	bl	8006cf0 <I2C_WaitOnFlagUntilTimeout>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80065d8:	2302      	movs	r3, #2
 80065da:	e1fb      	b.n	80069d4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d101      	bne.n	80065ea <HAL_I2C_Mem_Read+0x56>
 80065e6:	2302      	movs	r3, #2
 80065e8:	e1f4      	b.n	80069d4 <HAL_I2C_Mem_Read+0x440>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d007      	beq.n	8006610 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0201 	orr.w	r2, r2, #1
 800660e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800661e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2222      	movs	r2, #34	@ 0x22
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2240      	movs	r2, #64	@ 0x40
 800662c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800663a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006640:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006646:	b29a      	uxth	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4a5b      	ldr	r2, [pc, #364]	@ (80067bc <HAL_I2C_Mem_Read+0x228>)
 8006650:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006652:	88f8      	ldrh	r0, [r7, #6]
 8006654:	893a      	ldrh	r2, [r7, #8]
 8006656:	8979      	ldrh	r1, [r7, #10]
 8006658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665a:	9301      	str	r3, [sp, #4]
 800665c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	4603      	mov	r3, r0
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 fa5e 	bl	8006b24 <I2C_RequestMemoryRead>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e1b0      	b.n	80069d4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006676:	2b00      	cmp	r3, #0
 8006678:	d113      	bne.n	80066a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800667a:	2300      	movs	r3, #0
 800667c:	623b      	str	r3, [r7, #32]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	623b      	str	r3, [r7, #32]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	623b      	str	r3, [r7, #32]
 800668e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	e184      	b.n	80069ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d11b      	bne.n	80066e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ba:	2300      	movs	r3, #0
 80066bc:	61fb      	str	r3, [r7, #28]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	61fb      	str	r3, [r7, #28]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	61fb      	str	r3, [r7, #28]
 80066ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	e164      	b.n	80069ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d11b      	bne.n	8006722 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006708:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800670a:	2300      	movs	r3, #0
 800670c:	61bb      	str	r3, [r7, #24]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	61bb      	str	r3, [r7, #24]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	61bb      	str	r3, [r7, #24]
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	e144      	b.n	80069ac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006722:	2300      	movs	r3, #0
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006738:	e138      	b.n	80069ac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800673e:	2b03      	cmp	r3, #3
 8006740:	f200 80f1 	bhi.w	8006926 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006748:	2b01      	cmp	r3, #1
 800674a:	d123      	bne.n	8006794 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800674c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800674e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 fc25 	bl	8006fa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d001      	beq.n	8006760 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e139      	b.n	80069d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	691a      	ldr	r2, [r3, #16]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676a:	b2d2      	uxtb	r2, r2
 800676c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800677c:	3b01      	subs	r3, #1
 800677e:	b29a      	uxth	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006788:	b29b      	uxth	r3, r3
 800678a:	3b01      	subs	r3, #1
 800678c:	b29a      	uxth	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006792:	e10b      	b.n	80069ac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006798:	2b02      	cmp	r3, #2
 800679a:	d14e      	bne.n	800683a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800679c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a2:	2200      	movs	r2, #0
 80067a4:	4906      	ldr	r1, [pc, #24]	@ (80067c0 <HAL_I2C_Mem_Read+0x22c>)
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 faa2 	bl	8006cf0 <I2C_WaitOnFlagUntilTimeout>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d008      	beq.n	80067c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e10e      	b.n	80069d4 <HAL_I2C_Mem_Read+0x440>
 80067b6:	bf00      	nop
 80067b8:	00100002 	.word	0x00100002
 80067bc:	ffff0000 	.word	0xffff0000
 80067c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	691a      	ldr	r2, [r3, #16]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067de:	b2d2      	uxtb	r2, r2
 80067e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	3b01      	subs	r3, #1
 8006800:	b29a      	uxth	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	691a      	ldr	r2, [r3, #16]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006810:	b2d2      	uxtb	r2, r2
 8006812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006822:	3b01      	subs	r3, #1
 8006824:	b29a      	uxth	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800682e:	b29b      	uxth	r3, r3
 8006830:	3b01      	subs	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006838:	e0b8      	b.n	80069ac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006840:	2200      	movs	r2, #0
 8006842:	4966      	ldr	r1, [pc, #408]	@ (80069dc <HAL_I2C_Mem_Read+0x448>)
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 fa53 	bl	8006cf0 <I2C_WaitOnFlagUntilTimeout>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e0bf      	b.n	80069d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006862:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	691a      	ldr	r2, [r3, #16]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006880:	3b01      	subs	r3, #1
 8006882:	b29a      	uxth	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800688c:	b29b      	uxth	r3, r3
 800688e:	3b01      	subs	r3, #1
 8006890:	b29a      	uxth	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800689c:	2200      	movs	r2, #0
 800689e:	494f      	ldr	r1, [pc, #316]	@ (80069dc <HAL_I2C_Mem_Read+0x448>)
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 fa25 	bl	8006cf0 <I2C_WaitOnFlagUntilTimeout>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e091      	b.n	80069d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691a      	ldr	r2, [r3, #16]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068dc:	3b01      	subs	r3, #1
 80068de:	b29a      	uxth	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	3b01      	subs	r3, #1
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	691a      	ldr	r2, [r3, #16]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fc:	b2d2      	uxtb	r2, r2
 80068fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800690e:	3b01      	subs	r3, #1
 8006910:	b29a      	uxth	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800691a:	b29b      	uxth	r3, r3
 800691c:	3b01      	subs	r3, #1
 800691e:	b29a      	uxth	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006924:	e042      	b.n	80069ac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006928:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 fb38 	bl	8006fa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e04c      	b.n	80069d4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	691a      	ldr	r2, [r3, #16]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006944:	b2d2      	uxtb	r2, r2
 8006946:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006956:	3b01      	subs	r3, #1
 8006958:	b29a      	uxth	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006962:	b29b      	uxth	r3, r3
 8006964:	3b01      	subs	r3, #1
 8006966:	b29a      	uxth	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	f003 0304 	and.w	r3, r3, #4
 8006976:	2b04      	cmp	r3, #4
 8006978:	d118      	bne.n	80069ac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	691a      	ldr	r2, [r3, #16]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006984:	b2d2      	uxtb	r2, r2
 8006986:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006996:	3b01      	subs	r3, #1
 8006998:	b29a      	uxth	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	3b01      	subs	r3, #1
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f47f aec2 	bne.w	800673a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	e000      	b.n	80069d4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80069d2:	2302      	movs	r3, #2
  }
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3728      	adds	r7, #40	@ 0x28
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	00010004 	.word	0x00010004

080069e0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069ee:	b2db      	uxtb	r3, r3
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b088      	sub	sp, #32
 8006a00:	af02      	add	r7, sp, #8
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	4608      	mov	r0, r1
 8006a06:	4611      	mov	r1, r2
 8006a08:	461a      	mov	r2, r3
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	817b      	strh	r3, [r7, #10]
 8006a0e:	460b      	mov	r3, r1
 8006a10:	813b      	strh	r3, [r7, #8]
 8006a12:	4613      	mov	r3, r2
 8006a14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 f95c 	bl	8006cf0 <I2C_WaitOnFlagUntilTimeout>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00c      	beq.n	8006a58 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e05f      	b.n	8006b18 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a58:	897b      	ldrh	r3, [r7, #10]
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006a66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6a:	6a3a      	ldr	r2, [r7, #32]
 8006a6c:	492c      	ldr	r1, [pc, #176]	@ (8006b20 <I2C_RequestMemoryWrite+0x124>)
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f000 f995 	bl	8006d9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e04c      	b.n	8006b18 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	617b      	str	r3, [r7, #20]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	617b      	str	r3, [r7, #20]
 8006a92:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a96:	6a39      	ldr	r1, [r7, #32]
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 f9ff 	bl	8006e9c <I2C_WaitOnTXEFlagUntilTimeout>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00d      	beq.n	8006ac0 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	d107      	bne.n	8006abc <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006aba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e02b      	b.n	8006b18 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ac0:	88fb      	ldrh	r3, [r7, #6]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d105      	bne.n	8006ad2 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ac6:	893b      	ldrh	r3, [r7, #8]
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	611a      	str	r2, [r3, #16]
 8006ad0:	e021      	b.n	8006b16 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ad2:	893b      	ldrh	r3, [r7, #8]
 8006ad4:	0a1b      	lsrs	r3, r3, #8
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ae2:	6a39      	ldr	r1, [r7, #32]
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 f9d9 	bl	8006e9c <I2C_WaitOnTXEFlagUntilTimeout>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00d      	beq.n	8006b0c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d107      	bne.n	8006b08 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e005      	b.n	8006b18 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b0c:	893b      	ldrh	r3, [r7, #8]
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	00010002 	.word	0x00010002

08006b24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b088      	sub	sp, #32
 8006b28:	af02      	add	r7, sp, #8
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	4611      	mov	r1, r2
 8006b30:	461a      	mov	r2, r3
 8006b32:	4603      	mov	r3, r0
 8006b34:	817b      	strh	r3, [r7, #10]
 8006b36:	460b      	mov	r3, r1
 8006b38:	813b      	strh	r3, [r7, #8]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 f8c0 	bl	8006cf0 <I2C_WaitOnFlagUntilTimeout>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00c      	beq.n	8006b90 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e0a9      	b.n	8006ce4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b90:	897b      	ldrh	r3, [r7, #10]
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	461a      	mov	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba2:	6a3a      	ldr	r2, [r7, #32]
 8006ba4:	4951      	ldr	r1, [pc, #324]	@ (8006cec <I2C_RequestMemoryRead+0x1c8>)
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 f8f9 	bl	8006d9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e096      	b.n	8006ce4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	617b      	str	r3, [r7, #20]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	617b      	str	r3, [r7, #20]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	617b      	str	r3, [r7, #20]
 8006bca:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bce:	6a39      	ldr	r1, [r7, #32]
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 f963 	bl	8006e9c <I2C_WaitOnTXEFlagUntilTimeout>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00d      	beq.n	8006bf8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be0:	2b04      	cmp	r3, #4
 8006be2:	d107      	bne.n	8006bf4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bf2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e075      	b.n	8006ce4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bf8:	88fb      	ldrh	r3, [r7, #6]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d105      	bne.n	8006c0a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bfe:	893b      	ldrh	r3, [r7, #8]
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	611a      	str	r2, [r3, #16]
 8006c08:	e021      	b.n	8006c4e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c0a:	893b      	ldrh	r3, [r7, #8]
 8006c0c:	0a1b      	lsrs	r3, r3, #8
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c1a:	6a39      	ldr	r1, [r7, #32]
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f000 f93d 	bl	8006e9c <I2C_WaitOnTXEFlagUntilTimeout>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00d      	beq.n	8006c44 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2c:	2b04      	cmp	r3, #4
 8006c2e:	d107      	bne.n	8006c40 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e04f      	b.n	8006ce4 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c44:	893b      	ldrh	r3, [r7, #8]
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c50:	6a39      	ldr	r1, [r7, #32]
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f922 	bl	8006e9c <I2C_WaitOnTXEFlagUntilTimeout>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00d      	beq.n	8006c7a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d107      	bne.n	8006c76 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e034      	b.n	8006ce4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 f82a 	bl	8006cf0 <I2C_WaitOnFlagUntilTimeout>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00c      	beq.n	8006cbc <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e013      	b.n	8006ce4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006cbc:	897b      	ldrh	r3, [r7, #10]
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	f043 0301 	orr.w	r3, r3, #1
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cce:	6a3a      	ldr	r2, [r7, #32]
 8006cd0:	4906      	ldr	r1, [pc, #24]	@ (8006cec <I2C_RequestMemoryRead+0x1c8>)
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f000 f863 	bl	8006d9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e000      	b.n	8006ce4 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3718      	adds	r7, #24
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	00010002 	.word	0x00010002

08006cf0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d00:	e025      	b.n	8006d4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d08:	d021      	beq.n	8006d4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d0a:	f7fe fa65 	bl	80051d8 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d302      	bcc.n	8006d20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d116      	bne.n	8006d4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3a:	f043 0220 	orr.w	r2, r3, #32
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e023      	b.n	8006d96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	0c1b      	lsrs	r3, r3, #16
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d10d      	bne.n	8006d74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	43da      	mvns	r2, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	4013      	ands	r3, r2
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	bf0c      	ite	eq
 8006d6a:	2301      	moveq	r3, #1
 8006d6c:	2300      	movne	r3, #0
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	461a      	mov	r2, r3
 8006d72:	e00c      	b.n	8006d8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	43da      	mvns	r2, r3
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	4013      	ands	r3, r2
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	bf0c      	ite	eq
 8006d86:	2301      	moveq	r3, #1
 8006d88:	2300      	movne	r3, #0
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	79fb      	ldrb	r3, [r7, #7]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d0b6      	beq.n	8006d02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	60f8      	str	r0, [r7, #12]
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	607a      	str	r2, [r7, #4]
 8006daa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006dac:	e051      	b.n	8006e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006db8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dbc:	d123      	bne.n	8006e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dcc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006dd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2220      	movs	r2, #32
 8006de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df2:	f043 0204 	orr.w	r2, r3, #4
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e046      	b.n	8006e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0c:	d021      	beq.n	8006e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e0e:	f7fe f9e3 	bl	80051d8 <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d302      	bcc.n	8006e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d116      	bne.n	8006e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e3e:	f043 0220 	orr.w	r2, r3, #32
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e020      	b.n	8006e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	0c1b      	lsrs	r3, r3, #16
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d10c      	bne.n	8006e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	43da      	mvns	r2, r3
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	4013      	ands	r3, r2
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	bf14      	ite	ne
 8006e6e:	2301      	movne	r3, #1
 8006e70:	2300      	moveq	r3, #0
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	e00b      	b.n	8006e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	43da      	mvns	r2, r3
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	4013      	ands	r3, r2
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	bf14      	ite	ne
 8006e88:	2301      	movne	r3, #1
 8006e8a:	2300      	moveq	r3, #0
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d18d      	bne.n	8006dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ea8:	e02d      	b.n	8006f06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 f8ce 	bl	800704c <I2C_IsAcknowledgeFailed>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e02d      	b.n	8006f16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec0:	d021      	beq.n	8006f06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ec2:	f7fe f989 	bl	80051d8 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d302      	bcc.n	8006ed8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d116      	bne.n	8006f06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef2:	f043 0220 	orr.w	r2, r3, #32
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e007      	b.n	8006f16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f10:	2b80      	cmp	r3, #128	@ 0x80
 8006f12:	d1ca      	bne.n	8006eaa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b084      	sub	sp, #16
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f2a:	e02d      	b.n	8006f88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 f88d 	bl	800704c <I2C_IsAcknowledgeFailed>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e02d      	b.n	8006f98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f42:	d021      	beq.n	8006f88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f44:	f7fe f948 	bl	80051d8 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d302      	bcc.n	8006f5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d116      	bne.n	8006f88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2220      	movs	r2, #32
 8006f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f74:	f043 0220 	orr.w	r2, r3, #32
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e007      	b.n	8006f98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	f003 0304 	and.w	r3, r3, #4
 8006f92:	2b04      	cmp	r3, #4
 8006f94:	d1ca      	bne.n	8006f2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006fac:	e042      	b.n	8007034 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	f003 0310 	and.w	r3, r3, #16
 8006fb8:	2b10      	cmp	r3, #16
 8006fba:	d119      	bne.n	8006ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f06f 0210 	mvn.w	r2, #16
 8006fc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e029      	b.n	8007044 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ff0:	f7fe f8f2 	bl	80051d8 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d302      	bcc.n	8007006 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d116      	bne.n	8007034 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2220      	movs	r2, #32
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007020:	f043 0220 	orr.w	r2, r3, #32
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e007      	b.n	8007044 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800703e:	2b40      	cmp	r3, #64	@ 0x40
 8007040:	d1b5      	bne.n	8006fae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800705e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007062:	d11b      	bne.n	800709c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800706c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2220      	movs	r2, #32
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007088:	f043 0204 	orr.w	r2, r3, #4
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e000      	b.n	800709e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
	...

080070ac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e0bf      	b.n	800723e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d106      	bne.n	80070d8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f8ba 	bl	800724c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	699a      	ldr	r2, [r3, #24]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80070ee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6999      	ldr	r1, [r3, #24]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007104:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	430a      	orrs	r2, r1
 8007112:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6899      	ldr	r1, [r3, #8]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	4b4a      	ldr	r3, [pc, #296]	@ (8007248 <HAL_LTDC_Init+0x19c>)
 8007120:	400b      	ands	r3, r1
 8007122:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	041b      	lsls	r3, r3, #16
 800712a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6899      	ldr	r1, [r3, #8]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	699a      	ldr	r2, [r3, #24]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	431a      	orrs	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68d9      	ldr	r1, [r3, #12]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	4b3e      	ldr	r3, [pc, #248]	@ (8007248 <HAL_LTDC_Init+0x19c>)
 800714e:	400b      	ands	r3, r1
 8007150:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	041b      	lsls	r3, r3, #16
 8007158:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68d9      	ldr	r1, [r3, #12]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a1a      	ldr	r2, [r3, #32]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	431a      	orrs	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6919      	ldr	r1, [r3, #16]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	4b33      	ldr	r3, [pc, #204]	@ (8007248 <HAL_LTDC_Init+0x19c>)
 800717c:	400b      	ands	r3, r1
 800717e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007184:	041b      	lsls	r3, r3, #16
 8007186:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6919      	ldr	r1, [r3, #16]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	431a      	orrs	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	430a      	orrs	r2, r1
 800719c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6959      	ldr	r1, [r3, #20]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	4b27      	ldr	r3, [pc, #156]	@ (8007248 <HAL_LTDC_Init+0x19c>)
 80071aa:	400b      	ands	r3, r1
 80071ac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b2:	041b      	lsls	r3, r3, #16
 80071b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6959      	ldr	r1, [r3, #20]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	431a      	orrs	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80071d2:	021b      	lsls	r3, r3, #8
 80071d4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80071dc:	041b      	lsls	r3, r3, #16
 80071de:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80071ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8007202:	431a      	orrs	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f042 0206 	orr.w	r2, r2, #6
 800721a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	699a      	ldr	r2, [r3, #24]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0201 	orr.w	r2, r2, #1
 800722a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	f000f800 	.word	0xf000f800

0800724c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007260:	b5b0      	push	{r4, r5, r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007272:	2b01      	cmp	r3, #1
 8007274:	d101      	bne.n	800727a <HAL_LTDC_ConfigLayer+0x1a>
 8007276:	2302      	movs	r3, #2
 8007278:	e02c      	b.n	80072d4 <HAL_LTDC_ConfigLayer+0x74>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2202      	movs	r2, #2
 8007286:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2134      	movs	r1, #52	@ 0x34
 8007290:	fb01 f303 	mul.w	r3, r1, r3
 8007294:	4413      	add	r3, r2
 8007296:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	4614      	mov	r4, r2
 800729e:	461d      	mov	r5, r3
 80072a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	68b9      	ldr	r1, [r7, #8]
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 f83b 	bl	8007330 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2201      	movs	r2, #1
 80072c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bdb0      	pop	{r4, r5, r7, pc}

080072dc <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d101      	bne.n	80072f2 <HAL_LTDC_EnableDither+0x16>
 80072ee:	2302      	movs	r3, #2
 80072f0:	e016      	b.n	8007320 <HAL_LTDC_EnableDither+0x44>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2202      	movs	r2, #2
 80072fe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8007302:	4b0a      	ldr	r3, [pc, #40]	@ (800732c <HAL_LTDC_EnableDither+0x50>)
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	4a09      	ldr	r2, [pc, #36]	@ (800732c <HAL_LTDC_EnableDither+0x50>)
 8007308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800730c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	40016800 	.word	0x40016800

08007330 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007330:	b480      	push	{r7}
 8007332:	b089      	sub	sp, #36	@ 0x24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	0c1b      	lsrs	r3, r3, #16
 8007348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800734c:	4413      	add	r3, r2
 800734e:	041b      	lsls	r3, r3, #16
 8007350:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	461a      	mov	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	01db      	lsls	r3, r3, #7
 800735c:	4413      	add	r3, r2
 800735e:	3384      	adds	r3, #132	@ 0x84
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	6812      	ldr	r2, [r2, #0]
 8007366:	4611      	mov	r1, r2
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	01d2      	lsls	r2, r2, #7
 800736c:	440a      	add	r2, r1
 800736e:	3284      	adds	r2, #132	@ 0x84
 8007370:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007374:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	0c1b      	lsrs	r3, r3, #16
 8007382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007386:	4413      	add	r3, r2
 8007388:	1c5a      	adds	r2, r3, #1
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4619      	mov	r1, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	01db      	lsls	r3, r3, #7
 8007394:	440b      	add	r3, r1
 8007396:	3384      	adds	r3, #132	@ 0x84
 8007398:	4619      	mov	r1, r3
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	4313      	orrs	r3, r2
 800739e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073ae:	4413      	add	r3, r2
 80073b0:	041b      	lsls	r3, r3, #16
 80073b2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	461a      	mov	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	01db      	lsls	r3, r3, #7
 80073be:	4413      	add	r3, r2
 80073c0:	3384      	adds	r3, #132	@ 0x84
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	6812      	ldr	r2, [r2, #0]
 80073c8:	4611      	mov	r1, r2
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	01d2      	lsls	r2, r2, #7
 80073ce:	440a      	add	r2, r1
 80073d0:	3284      	adds	r2, #132	@ 0x84
 80073d2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80073d6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	689a      	ldr	r2, [r3, #8]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073e6:	4413      	add	r3, r2
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4619      	mov	r1, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	01db      	lsls	r3, r3, #7
 80073f4:	440b      	add	r3, r1
 80073f6:	3384      	adds	r3, #132	@ 0x84
 80073f8:	4619      	mov	r1, r3
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	461a      	mov	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	01db      	lsls	r3, r3, #7
 800740a:	4413      	add	r3, r2
 800740c:	3384      	adds	r3, #132	@ 0x84
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	6812      	ldr	r2, [r2, #0]
 8007414:	4611      	mov	r1, r2
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	01d2      	lsls	r2, r2, #7
 800741a:	440a      	add	r2, r1
 800741c:	3284      	adds	r2, #132	@ 0x84
 800741e:	f023 0307 	bic.w	r3, r3, #7
 8007422:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	461a      	mov	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	01db      	lsls	r3, r3, #7
 800742e:	4413      	add	r3, r2
 8007430:	3384      	adds	r3, #132	@ 0x84
 8007432:	461a      	mov	r2, r3
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007440:	021b      	lsls	r3, r3, #8
 8007442:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800744a:	041b      	lsls	r3, r3, #16
 800744c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	061b      	lsls	r3, r3, #24
 8007454:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	01db      	lsls	r3, r3, #7
 8007460:	4413      	add	r3, r2
 8007462:	3384      	adds	r3, #132	@ 0x84
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	01db      	lsls	r3, r3, #7
 8007470:	4413      	add	r3, r2
 8007472:	3384      	adds	r3, #132	@ 0x84
 8007474:	461a      	mov	r2, r3
 8007476:	2300      	movs	r3, #0
 8007478:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007480:	461a      	mov	r2, r3
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	431a      	orrs	r2, r3
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	431a      	orrs	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4619      	mov	r1, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	01db      	lsls	r3, r3, #7
 8007494:	440b      	add	r3, r1
 8007496:	3384      	adds	r3, #132	@ 0x84
 8007498:	4619      	mov	r1, r3
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	4313      	orrs	r3, r2
 800749e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	461a      	mov	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	01db      	lsls	r3, r3, #7
 80074aa:	4413      	add	r3, r2
 80074ac:	3384      	adds	r3, #132	@ 0x84
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	6812      	ldr	r2, [r2, #0]
 80074b4:	4611      	mov	r1, r2
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	01d2      	lsls	r2, r2, #7
 80074ba:	440a      	add	r2, r1
 80074bc:	3284      	adds	r2, #132	@ 0x84
 80074be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80074c2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	461a      	mov	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	01db      	lsls	r3, r3, #7
 80074ce:	4413      	add	r3, r2
 80074d0:	3384      	adds	r3, #132	@ 0x84
 80074d2:	461a      	mov	r2, r3
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	461a      	mov	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	01db      	lsls	r3, r3, #7
 80074e4:	4413      	add	r3, r2
 80074e6:	3384      	adds	r3, #132	@ 0x84
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	6812      	ldr	r2, [r2, #0]
 80074ee:	4611      	mov	r1, r2
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	01d2      	lsls	r2, r2, #7
 80074f4:	440a      	add	r2, r1
 80074f6:	3284      	adds	r2, #132	@ 0x84
 80074f8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80074fc:	f023 0307 	bic.w	r3, r3, #7
 8007500:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	69da      	ldr	r2, [r3, #28]
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	68f9      	ldr	r1, [r7, #12]
 800750c:	6809      	ldr	r1, [r1, #0]
 800750e:	4608      	mov	r0, r1
 8007510:	6879      	ldr	r1, [r7, #4]
 8007512:	01c9      	lsls	r1, r1, #7
 8007514:	4401      	add	r1, r0
 8007516:	3184      	adds	r1, #132	@ 0x84
 8007518:	4313      	orrs	r3, r2
 800751a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	461a      	mov	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	01db      	lsls	r3, r3, #7
 8007526:	4413      	add	r3, r2
 8007528:	3384      	adds	r3, #132	@ 0x84
 800752a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	01db      	lsls	r3, r3, #7
 8007536:	4413      	add	r3, r2
 8007538:	3384      	adds	r3, #132	@ 0x84
 800753a:	461a      	mov	r2, r3
 800753c:	2300      	movs	r3, #0
 800753e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	461a      	mov	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	01db      	lsls	r3, r3, #7
 800754a:	4413      	add	r3, r2
 800754c:	3384      	adds	r3, #132	@ 0x84
 800754e:	461a      	mov	r2, r3
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007554:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d102      	bne.n	8007564 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800755e:	2304      	movs	r3, #4
 8007560:	61fb      	str	r3, [r7, #28]
 8007562:	e01b      	b.n	800759c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d102      	bne.n	8007572 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800756c:	2303      	movs	r3, #3
 800756e:	61fb      	str	r3, [r7, #28]
 8007570:	e014      	b.n	800759c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	2b04      	cmp	r3, #4
 8007578:	d00b      	beq.n	8007592 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800757e:	2b02      	cmp	r3, #2
 8007580:	d007      	beq.n	8007592 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007586:	2b03      	cmp	r3, #3
 8007588:	d003      	beq.n	8007592 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800758e:	2b07      	cmp	r3, #7
 8007590:	d102      	bne.n	8007598 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007592:	2302      	movs	r3, #2
 8007594:	61fb      	str	r3, [r7, #28]
 8007596:	e001      	b.n	800759c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007598:	2301      	movs	r3, #1
 800759a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	461a      	mov	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	01db      	lsls	r3, r3, #7
 80075a6:	4413      	add	r3, r2
 80075a8:	3384      	adds	r3, #132	@ 0x84
 80075aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	6812      	ldr	r2, [r2, #0]
 80075b0:	4611      	mov	r1, r2
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	01d2      	lsls	r2, r2, #7
 80075b6:	440a      	add	r2, r1
 80075b8:	3284      	adds	r2, #132	@ 0x84
 80075ba:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80075be:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c4:	69fa      	ldr	r2, [r7, #28]
 80075c6:	fb02 f303 	mul.w	r3, r2, r3
 80075ca:	041a      	lsls	r2, r3, #16
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	6859      	ldr	r1, [r3, #4]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	1acb      	subs	r3, r1, r3
 80075d6:	69f9      	ldr	r1, [r7, #28]
 80075d8:	fb01 f303 	mul.w	r3, r1, r3
 80075dc:	3303      	adds	r3, #3
 80075de:	68f9      	ldr	r1, [r7, #12]
 80075e0:	6809      	ldr	r1, [r1, #0]
 80075e2:	4608      	mov	r0, r1
 80075e4:	6879      	ldr	r1, [r7, #4]
 80075e6:	01c9      	lsls	r1, r1, #7
 80075e8:	4401      	add	r1, r0
 80075ea:	3184      	adds	r1, #132	@ 0x84
 80075ec:	4313      	orrs	r3, r2
 80075ee:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	461a      	mov	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	01db      	lsls	r3, r3, #7
 80075fa:	4413      	add	r3, r2
 80075fc:	3384      	adds	r3, #132	@ 0x84
 80075fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	6812      	ldr	r2, [r2, #0]
 8007604:	4611      	mov	r1, r2
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	01d2      	lsls	r2, r2, #7
 800760a:	440a      	add	r2, r1
 800760c:	3284      	adds	r2, #132	@ 0x84
 800760e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007612:	f023 0307 	bic.w	r3, r3, #7
 8007616:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	461a      	mov	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	01db      	lsls	r3, r3, #7
 8007622:	4413      	add	r3, r2
 8007624:	3384      	adds	r3, #132	@ 0x84
 8007626:	461a      	mov	r2, r3
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	461a      	mov	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	01db      	lsls	r3, r3, #7
 8007638:	4413      	add	r3, r2
 800763a:	3384      	adds	r3, #132	@ 0x84
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	6812      	ldr	r2, [r2, #0]
 8007642:	4611      	mov	r1, r2
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	01d2      	lsls	r2, r2, #7
 8007648:	440a      	add	r2, r1
 800764a:	3284      	adds	r2, #132	@ 0x84
 800764c:	f043 0301 	orr.w	r3, r3, #1
 8007650:	6013      	str	r3, [r2, #0]
}
 8007652:	bf00      	nop
 8007654:	3724      	adds	r7, #36	@ 0x24
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
	...

08007660 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e25e      	b.n	8007b30 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d075      	beq.n	800776a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800767e:	4b88      	ldr	r3, [pc, #544]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f003 030c 	and.w	r3, r3, #12
 8007686:	2b04      	cmp	r3, #4
 8007688:	d00c      	beq.n	80076a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800768a:	4b85      	ldr	r3, [pc, #532]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007692:	2b08      	cmp	r3, #8
 8007694:	d112      	bne.n	80076bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007696:	4b82      	ldr	r3, [pc, #520]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800769e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076a2:	d10b      	bne.n	80076bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076a4:	4b7e      	ldr	r3, [pc, #504]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d05b      	beq.n	8007768 <HAL_RCC_OscConfig+0x108>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d157      	bne.n	8007768 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e239      	b.n	8007b30 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076c4:	d106      	bne.n	80076d4 <HAL_RCC_OscConfig+0x74>
 80076c6:	4b76      	ldr	r3, [pc, #472]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a75      	ldr	r2, [pc, #468]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 80076cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076d0:	6013      	str	r3, [r2, #0]
 80076d2:	e01d      	b.n	8007710 <HAL_RCC_OscConfig+0xb0>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80076dc:	d10c      	bne.n	80076f8 <HAL_RCC_OscConfig+0x98>
 80076de:	4b70      	ldr	r3, [pc, #448]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a6f      	ldr	r2, [pc, #444]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 80076e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80076e8:	6013      	str	r3, [r2, #0]
 80076ea:	4b6d      	ldr	r3, [pc, #436]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a6c      	ldr	r2, [pc, #432]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 80076f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	e00b      	b.n	8007710 <HAL_RCC_OscConfig+0xb0>
 80076f8:	4b69      	ldr	r3, [pc, #420]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a68      	ldr	r2, [pc, #416]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 80076fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007702:	6013      	str	r3, [r2, #0]
 8007704:	4b66      	ldr	r3, [pc, #408]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a65      	ldr	r2, [pc, #404]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 800770a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800770e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d013      	beq.n	8007740 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007718:	f7fd fd5e 	bl	80051d8 <HAL_GetTick>
 800771c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800771e:	e008      	b.n	8007732 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007720:	f7fd fd5a 	bl	80051d8 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	2b64      	cmp	r3, #100	@ 0x64
 800772c:	d901      	bls.n	8007732 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e1fe      	b.n	8007b30 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007732:	4b5b      	ldr	r3, [pc, #364]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d0f0      	beq.n	8007720 <HAL_RCC_OscConfig+0xc0>
 800773e:	e014      	b.n	800776a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007740:	f7fd fd4a 	bl	80051d8 <HAL_GetTick>
 8007744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007746:	e008      	b.n	800775a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007748:	f7fd fd46 	bl	80051d8 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	2b64      	cmp	r3, #100	@ 0x64
 8007754:	d901      	bls.n	800775a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e1ea      	b.n	8007b30 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800775a:	4b51      	ldr	r3, [pc, #324]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1f0      	bne.n	8007748 <HAL_RCC_OscConfig+0xe8>
 8007766:	e000      	b.n	800776a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d063      	beq.n	800783e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007776:	4b4a      	ldr	r3, [pc, #296]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f003 030c 	and.w	r3, r3, #12
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00b      	beq.n	800779a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007782:	4b47      	ldr	r3, [pc, #284]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800778a:	2b08      	cmp	r3, #8
 800778c:	d11c      	bne.n	80077c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800778e:	4b44      	ldr	r3, [pc, #272]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d116      	bne.n	80077c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800779a:	4b41      	ldr	r3, [pc, #260]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d005      	beq.n	80077b2 <HAL_RCC_OscConfig+0x152>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d001      	beq.n	80077b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e1be      	b.n	8007b30 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077b2:	4b3b      	ldr	r3, [pc, #236]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	4937      	ldr	r1, [pc, #220]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077c6:	e03a      	b.n	800783e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d020      	beq.n	8007812 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077d0:	4b34      	ldr	r3, [pc, #208]	@ (80078a4 <HAL_RCC_OscConfig+0x244>)
 80077d2:	2201      	movs	r2, #1
 80077d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d6:	f7fd fcff 	bl	80051d8 <HAL_GetTick>
 80077da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077dc:	e008      	b.n	80077f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077de:	f7fd fcfb 	bl	80051d8 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d901      	bls.n	80077f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e19f      	b.n	8007b30 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077f0:	4b2b      	ldr	r3, [pc, #172]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0302 	and.w	r3, r3, #2
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d0f0      	beq.n	80077de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077fc:	4b28      	ldr	r3, [pc, #160]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	00db      	lsls	r3, r3, #3
 800780a:	4925      	ldr	r1, [pc, #148]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 800780c:	4313      	orrs	r3, r2
 800780e:	600b      	str	r3, [r1, #0]
 8007810:	e015      	b.n	800783e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007812:	4b24      	ldr	r3, [pc, #144]	@ (80078a4 <HAL_RCC_OscConfig+0x244>)
 8007814:	2200      	movs	r2, #0
 8007816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007818:	f7fd fcde 	bl	80051d8 <HAL_GetTick>
 800781c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800781e:	e008      	b.n	8007832 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007820:	f7fd fcda 	bl	80051d8 <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	2b02      	cmp	r3, #2
 800782c:	d901      	bls.n	8007832 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e17e      	b.n	8007b30 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007832:	4b1b      	ldr	r3, [pc, #108]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1f0      	bne.n	8007820 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0308 	and.w	r3, r3, #8
 8007846:	2b00      	cmp	r3, #0
 8007848:	d036      	beq.n	80078b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d016      	beq.n	8007880 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007852:	4b15      	ldr	r3, [pc, #84]	@ (80078a8 <HAL_RCC_OscConfig+0x248>)
 8007854:	2201      	movs	r2, #1
 8007856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007858:	f7fd fcbe 	bl	80051d8 <HAL_GetTick>
 800785c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800785e:	e008      	b.n	8007872 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007860:	f7fd fcba 	bl	80051d8 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b02      	cmp	r3, #2
 800786c:	d901      	bls.n	8007872 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e15e      	b.n	8007b30 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007872:	4b0b      	ldr	r3, [pc, #44]	@ (80078a0 <HAL_RCC_OscConfig+0x240>)
 8007874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0f0      	beq.n	8007860 <HAL_RCC_OscConfig+0x200>
 800787e:	e01b      	b.n	80078b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007880:	4b09      	ldr	r3, [pc, #36]	@ (80078a8 <HAL_RCC_OscConfig+0x248>)
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007886:	f7fd fca7 	bl	80051d8 <HAL_GetTick>
 800788a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800788c:	e00e      	b.n	80078ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800788e:	f7fd fca3 	bl	80051d8 <HAL_GetTick>
 8007892:	4602      	mov	r2, r0
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	2b02      	cmp	r3, #2
 800789a:	d907      	bls.n	80078ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e147      	b.n	8007b30 <HAL_RCC_OscConfig+0x4d0>
 80078a0:	40023800 	.word	0x40023800
 80078a4:	42470000 	.word	0x42470000
 80078a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078ac:	4b88      	ldr	r3, [pc, #544]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 80078ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078b0:	f003 0302 	and.w	r3, r3, #2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1ea      	bne.n	800788e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 8097 	beq.w	80079f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078c6:	2300      	movs	r3, #0
 80078c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078ca:	4b81      	ldr	r3, [pc, #516]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 80078cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10f      	bne.n	80078f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078d6:	2300      	movs	r3, #0
 80078d8:	60bb      	str	r3, [r7, #8]
 80078da:	4b7d      	ldr	r3, [pc, #500]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 80078dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078de:	4a7c      	ldr	r2, [pc, #496]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 80078e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80078e6:	4b7a      	ldr	r3, [pc, #488]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 80078e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078ee:	60bb      	str	r3, [r7, #8]
 80078f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078f2:	2301      	movs	r3, #1
 80078f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078f6:	4b77      	ldr	r3, [pc, #476]	@ (8007ad4 <HAL_RCC_OscConfig+0x474>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d118      	bne.n	8007934 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007902:	4b74      	ldr	r3, [pc, #464]	@ (8007ad4 <HAL_RCC_OscConfig+0x474>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a73      	ldr	r2, [pc, #460]	@ (8007ad4 <HAL_RCC_OscConfig+0x474>)
 8007908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800790c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800790e:	f7fd fc63 	bl	80051d8 <HAL_GetTick>
 8007912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007914:	e008      	b.n	8007928 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007916:	f7fd fc5f 	bl	80051d8 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	2b02      	cmp	r3, #2
 8007922:	d901      	bls.n	8007928 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e103      	b.n	8007b30 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007928:	4b6a      	ldr	r3, [pc, #424]	@ (8007ad4 <HAL_RCC_OscConfig+0x474>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007930:	2b00      	cmp	r3, #0
 8007932:	d0f0      	beq.n	8007916 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d106      	bne.n	800794a <HAL_RCC_OscConfig+0x2ea>
 800793c:	4b64      	ldr	r3, [pc, #400]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 800793e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007940:	4a63      	ldr	r2, [pc, #396]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 8007942:	f043 0301 	orr.w	r3, r3, #1
 8007946:	6713      	str	r3, [r2, #112]	@ 0x70
 8007948:	e01c      	b.n	8007984 <HAL_RCC_OscConfig+0x324>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	2b05      	cmp	r3, #5
 8007950:	d10c      	bne.n	800796c <HAL_RCC_OscConfig+0x30c>
 8007952:	4b5f      	ldr	r3, [pc, #380]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 8007954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007956:	4a5e      	ldr	r2, [pc, #376]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 8007958:	f043 0304 	orr.w	r3, r3, #4
 800795c:	6713      	str	r3, [r2, #112]	@ 0x70
 800795e:	4b5c      	ldr	r3, [pc, #368]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 8007960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007962:	4a5b      	ldr	r2, [pc, #364]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 8007964:	f043 0301 	orr.w	r3, r3, #1
 8007968:	6713      	str	r3, [r2, #112]	@ 0x70
 800796a:	e00b      	b.n	8007984 <HAL_RCC_OscConfig+0x324>
 800796c:	4b58      	ldr	r3, [pc, #352]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 800796e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007970:	4a57      	ldr	r2, [pc, #348]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 8007972:	f023 0301 	bic.w	r3, r3, #1
 8007976:	6713      	str	r3, [r2, #112]	@ 0x70
 8007978:	4b55      	ldr	r3, [pc, #340]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 800797a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800797c:	4a54      	ldr	r2, [pc, #336]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 800797e:	f023 0304 	bic.w	r3, r3, #4
 8007982:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d015      	beq.n	80079b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800798c:	f7fd fc24 	bl	80051d8 <HAL_GetTick>
 8007990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007992:	e00a      	b.n	80079aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007994:	f7fd fc20 	bl	80051d8 <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d901      	bls.n	80079aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e0c2      	b.n	8007b30 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079aa:	4b49      	ldr	r3, [pc, #292]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 80079ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d0ee      	beq.n	8007994 <HAL_RCC_OscConfig+0x334>
 80079b6:	e014      	b.n	80079e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079b8:	f7fd fc0e 	bl	80051d8 <HAL_GetTick>
 80079bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079be:	e00a      	b.n	80079d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079c0:	f7fd fc0a 	bl	80051d8 <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d901      	bls.n	80079d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e0ac      	b.n	8007b30 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079d6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 80079d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1ee      	bne.n	80079c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d105      	bne.n	80079f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079e8:	4b39      	ldr	r3, [pc, #228]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 80079ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ec:	4a38      	ldr	r2, [pc, #224]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 80079ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 8098 	beq.w	8007b2e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079fe:	4b34      	ldr	r3, [pc, #208]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f003 030c 	and.w	r3, r3, #12
 8007a06:	2b08      	cmp	r3, #8
 8007a08:	d05c      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d141      	bne.n	8007a96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a12:	4b31      	ldr	r3, [pc, #196]	@ (8007ad8 <HAL_RCC_OscConfig+0x478>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a18:	f7fd fbde 	bl	80051d8 <HAL_GetTick>
 8007a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a1e:	e008      	b.n	8007a32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a20:	f7fd fbda 	bl	80051d8 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e07e      	b.n	8007b30 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a32:	4b27      	ldr	r3, [pc, #156]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1f0      	bne.n	8007a20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	69da      	ldr	r2, [r3, #28]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	431a      	orrs	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a4c:	019b      	lsls	r3, r3, #6
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a54:	085b      	lsrs	r3, r3, #1
 8007a56:	3b01      	subs	r3, #1
 8007a58:	041b      	lsls	r3, r3, #16
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a60:	061b      	lsls	r3, r3, #24
 8007a62:	491b      	ldr	r1, [pc, #108]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 8007a64:	4313      	orrs	r3, r2
 8007a66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a68:	4b1b      	ldr	r3, [pc, #108]	@ (8007ad8 <HAL_RCC_OscConfig+0x478>)
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a6e:	f7fd fbb3 	bl	80051d8 <HAL_GetTick>
 8007a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a74:	e008      	b.n	8007a88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a76:	f7fd fbaf 	bl	80051d8 <HAL_GetTick>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d901      	bls.n	8007a88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e053      	b.n	8007b30 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a88:	4b11      	ldr	r3, [pc, #68]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d0f0      	beq.n	8007a76 <HAL_RCC_OscConfig+0x416>
 8007a94:	e04b      	b.n	8007b2e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a96:	4b10      	ldr	r3, [pc, #64]	@ (8007ad8 <HAL_RCC_OscConfig+0x478>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a9c:	f7fd fb9c 	bl	80051d8 <HAL_GetTick>
 8007aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aa2:	e008      	b.n	8007ab6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007aa4:	f7fd fb98 	bl	80051d8 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e03c      	b.n	8007b30 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ab6:	4b06      	ldr	r3, [pc, #24]	@ (8007ad0 <HAL_RCC_OscConfig+0x470>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1f0      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x444>
 8007ac2:	e034      	b.n	8007b2e <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d107      	bne.n	8007adc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e02f      	b.n	8007b30 <HAL_RCC_OscConfig+0x4d0>
 8007ad0:	40023800 	.word	0x40023800
 8007ad4:	40007000 	.word	0x40007000
 8007ad8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007adc:	4b16      	ldr	r3, [pc, #88]	@ (8007b38 <HAL_RCC_OscConfig+0x4d8>)
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d11c      	bne.n	8007b2a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d115      	bne.n	8007b2a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007b04:	4013      	ands	r3, r2
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d10d      	bne.n	8007b2a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d106      	bne.n	8007b2a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d001      	beq.n	8007b2e <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3718      	adds	r7, #24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	40023800 	.word	0x40023800

08007b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d101      	bne.n	8007b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e0cc      	b.n	8007cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b50:	4b68      	ldr	r3, [pc, #416]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 030f 	and.w	r3, r3, #15
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d90c      	bls.n	8007b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b5e:	4b65      	ldr	r3, [pc, #404]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	b2d2      	uxtb	r2, r2
 8007b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b66:	4b63      	ldr	r3, [pc, #396]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 030f 	and.w	r3, r3, #15
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d001      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e0b8      	b.n	8007cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d020      	beq.n	8007bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0304 	and.w	r3, r3, #4
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d005      	beq.n	8007b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b90:	4b59      	ldr	r3, [pc, #356]	@ (8007cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	4a58      	ldr	r2, [pc, #352]	@ (8007cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007b9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0308 	and.w	r3, r3, #8
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d005      	beq.n	8007bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ba8:	4b53      	ldr	r3, [pc, #332]	@ (8007cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	4a52      	ldr	r2, [pc, #328]	@ (8007cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8007bae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bb4:	4b50      	ldr	r3, [pc, #320]	@ (8007cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	494d      	ldr	r1, [pc, #308]	@ (8007cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d044      	beq.n	8007c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d107      	bne.n	8007bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bda:	4b47      	ldr	r3, [pc, #284]	@ (8007cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d119      	bne.n	8007c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e07f      	b.n	8007cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d003      	beq.n	8007bfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d107      	bne.n	8007c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8007cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d109      	bne.n	8007c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e06f      	b.n	8007cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8007cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0302 	and.w	r3, r3, #2
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e067      	b.n	8007cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c1a:	4b37      	ldr	r3, [pc, #220]	@ (8007cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f023 0203 	bic.w	r2, r3, #3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	4934      	ldr	r1, [pc, #208]	@ (8007cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c2c:	f7fd fad4 	bl	80051d8 <HAL_GetTick>
 8007c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c32:	e00a      	b.n	8007c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c34:	f7fd fad0 	bl	80051d8 <HAL_GetTick>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d901      	bls.n	8007c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e04f      	b.n	8007cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8007cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f003 020c 	and.w	r2, r3, #12
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d1eb      	bne.n	8007c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c5c:	4b25      	ldr	r3, [pc, #148]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 030f 	and.w	r3, r3, #15
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d20c      	bcs.n	8007c84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c6a:	4b22      	ldr	r3, [pc, #136]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	b2d2      	uxtb	r2, r2
 8007c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c72:	4b20      	ldr	r3, [pc, #128]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 030f 	and.w	r3, r3, #15
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d001      	beq.n	8007c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e032      	b.n	8007cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0304 	and.w	r3, r3, #4
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d008      	beq.n	8007ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c90:	4b19      	ldr	r3, [pc, #100]	@ (8007cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	4916      	ldr	r1, [pc, #88]	@ (8007cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0308 	and.w	r3, r3, #8
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d009      	beq.n	8007cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cae:	4b12      	ldr	r3, [pc, #72]	@ (8007cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	00db      	lsls	r3, r3, #3
 8007cbc:	490e      	ldr	r1, [pc, #56]	@ (8007cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007cc2:	f000 f821 	bl	8007d08 <HAL_RCC_GetSysClockFreq>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8007cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	091b      	lsrs	r3, r3, #4
 8007cce:	f003 030f 	and.w	r3, r3, #15
 8007cd2:	490a      	ldr	r1, [pc, #40]	@ (8007cfc <HAL_RCC_ClockConfig+0x1c0>)
 8007cd4:	5ccb      	ldrb	r3, [r1, r3]
 8007cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cda:	4a09      	ldr	r2, [pc, #36]	@ (8007d00 <HAL_RCC_ClockConfig+0x1c4>)
 8007cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007cde:	4b09      	ldr	r3, [pc, #36]	@ (8007d04 <HAL_RCC_ClockConfig+0x1c8>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fd fa34 	bl	8005150 <HAL_InitTick>

  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	40023c00 	.word	0x40023c00
 8007cf8:	40023800 	.word	0x40023800
 8007cfc:	0800b5ec 	.word	0x0800b5ec
 8007d00:	20000020 	.word	0x20000020
 8007d04:	200000a8 	.word	0x200000a8

08007d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d0c:	b094      	sub	sp, #80	@ 0x50
 8007d0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d10:	2300      	movs	r3, #0
 8007d12:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d14:	2300      	movs	r3, #0
 8007d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d18:	2300      	movs	r3, #0
 8007d1a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d20:	4b79      	ldr	r3, [pc, #484]	@ (8007f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f003 030c 	and.w	r3, r3, #12
 8007d28:	2b08      	cmp	r3, #8
 8007d2a:	d00d      	beq.n	8007d48 <HAL_RCC_GetSysClockFreq+0x40>
 8007d2c:	2b08      	cmp	r3, #8
 8007d2e:	f200 80e1 	bhi.w	8007ef4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d002      	beq.n	8007d3c <HAL_RCC_GetSysClockFreq+0x34>
 8007d36:	2b04      	cmp	r3, #4
 8007d38:	d003      	beq.n	8007d42 <HAL_RCC_GetSysClockFreq+0x3a>
 8007d3a:	e0db      	b.n	8007ef4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d3c:	4b73      	ldr	r3, [pc, #460]	@ (8007f0c <HAL_RCC_GetSysClockFreq+0x204>)
 8007d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007d40:	e0db      	b.n	8007efa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d42:	4b73      	ldr	r3, [pc, #460]	@ (8007f10 <HAL_RCC_GetSysClockFreq+0x208>)
 8007d44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007d46:	e0d8      	b.n	8007efa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d48:	4b6f      	ldr	r3, [pc, #444]	@ (8007f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d50:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d52:	4b6d      	ldr	r3, [pc, #436]	@ (8007f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d063      	beq.n	8007e26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8007f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	099b      	lsrs	r3, r3, #6
 8007d64:	2200      	movs	r2, #0
 8007d66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d70:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d72:	2300      	movs	r3, #0
 8007d74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007d7a:	4622      	mov	r2, r4
 8007d7c:	462b      	mov	r3, r5
 8007d7e:	f04f 0000 	mov.w	r0, #0
 8007d82:	f04f 0100 	mov.w	r1, #0
 8007d86:	0159      	lsls	r1, r3, #5
 8007d88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d8c:	0150      	lsls	r0, r2, #5
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	4621      	mov	r1, r4
 8007d94:	1a51      	subs	r1, r2, r1
 8007d96:	6139      	str	r1, [r7, #16]
 8007d98:	4629      	mov	r1, r5
 8007d9a:	eb63 0301 	sbc.w	r3, r3, r1
 8007d9e:	617b      	str	r3, [r7, #20]
 8007da0:	f04f 0200 	mov.w	r2, #0
 8007da4:	f04f 0300 	mov.w	r3, #0
 8007da8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007dac:	4659      	mov	r1, fp
 8007dae:	018b      	lsls	r3, r1, #6
 8007db0:	4651      	mov	r1, sl
 8007db2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007db6:	4651      	mov	r1, sl
 8007db8:	018a      	lsls	r2, r1, #6
 8007dba:	4651      	mov	r1, sl
 8007dbc:	ebb2 0801 	subs.w	r8, r2, r1
 8007dc0:	4659      	mov	r1, fp
 8007dc2:	eb63 0901 	sbc.w	r9, r3, r1
 8007dc6:	f04f 0200 	mov.w	r2, #0
 8007dca:	f04f 0300 	mov.w	r3, #0
 8007dce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007dd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007dd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007dda:	4690      	mov	r8, r2
 8007ddc:	4699      	mov	r9, r3
 8007dde:	4623      	mov	r3, r4
 8007de0:	eb18 0303 	adds.w	r3, r8, r3
 8007de4:	60bb      	str	r3, [r7, #8]
 8007de6:	462b      	mov	r3, r5
 8007de8:	eb49 0303 	adc.w	r3, r9, r3
 8007dec:	60fb      	str	r3, [r7, #12]
 8007dee:	f04f 0200 	mov.w	r2, #0
 8007df2:	f04f 0300 	mov.w	r3, #0
 8007df6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	024b      	lsls	r3, r1, #9
 8007dfe:	4621      	mov	r1, r4
 8007e00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007e04:	4621      	mov	r1, r4
 8007e06:	024a      	lsls	r2, r1, #9
 8007e08:	4610      	mov	r0, r2
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e0e:	2200      	movs	r2, #0
 8007e10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007e18:	f7f8 fab2 	bl	8000380 <__aeabi_uldivmod>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	4613      	mov	r3, r2
 8007e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e24:	e058      	b.n	8007ed8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e26:	4b38      	ldr	r3, [pc, #224]	@ (8007f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	099b      	lsrs	r3, r3, #6
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	4618      	mov	r0, r3
 8007e30:	4611      	mov	r1, r2
 8007e32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007e36:	623b      	str	r3, [r7, #32]
 8007e38:	2300      	movs	r3, #0
 8007e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007e40:	4642      	mov	r2, r8
 8007e42:	464b      	mov	r3, r9
 8007e44:	f04f 0000 	mov.w	r0, #0
 8007e48:	f04f 0100 	mov.w	r1, #0
 8007e4c:	0159      	lsls	r1, r3, #5
 8007e4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e52:	0150      	lsls	r0, r2, #5
 8007e54:	4602      	mov	r2, r0
 8007e56:	460b      	mov	r3, r1
 8007e58:	4641      	mov	r1, r8
 8007e5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8007e5e:	4649      	mov	r1, r9
 8007e60:	eb63 0b01 	sbc.w	fp, r3, r1
 8007e64:	f04f 0200 	mov.w	r2, #0
 8007e68:	f04f 0300 	mov.w	r3, #0
 8007e6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007e70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007e74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007e78:	ebb2 040a 	subs.w	r4, r2, sl
 8007e7c:	eb63 050b 	sbc.w	r5, r3, fp
 8007e80:	f04f 0200 	mov.w	r2, #0
 8007e84:	f04f 0300 	mov.w	r3, #0
 8007e88:	00eb      	lsls	r3, r5, #3
 8007e8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e8e:	00e2      	lsls	r2, r4, #3
 8007e90:	4614      	mov	r4, r2
 8007e92:	461d      	mov	r5, r3
 8007e94:	4643      	mov	r3, r8
 8007e96:	18e3      	adds	r3, r4, r3
 8007e98:	603b      	str	r3, [r7, #0]
 8007e9a:	464b      	mov	r3, r9
 8007e9c:	eb45 0303 	adc.w	r3, r5, r3
 8007ea0:	607b      	str	r3, [r7, #4]
 8007ea2:	f04f 0200 	mov.w	r2, #0
 8007ea6:	f04f 0300 	mov.w	r3, #0
 8007eaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007eae:	4629      	mov	r1, r5
 8007eb0:	028b      	lsls	r3, r1, #10
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007eb8:	4621      	mov	r1, r4
 8007eba:	028a      	lsls	r2, r1, #10
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	61bb      	str	r3, [r7, #24]
 8007ec6:	61fa      	str	r2, [r7, #28]
 8007ec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ecc:	f7f8 fa58 	bl	8000380 <__aeabi_uldivmod>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8007f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	0c1b      	lsrs	r3, r3, #16
 8007ede:	f003 0303 	and.w	r3, r3, #3
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	005b      	lsls	r3, r3, #1
 8007ee6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007ee8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007eea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ef2:	e002      	b.n	8007efa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ef4:	4b05      	ldr	r3, [pc, #20]	@ (8007f0c <HAL_RCC_GetSysClockFreq+0x204>)
 8007ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3750      	adds	r7, #80	@ 0x50
 8007f00:	46bd      	mov	sp, r7
 8007f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f06:	bf00      	nop
 8007f08:	40023800 	.word	0x40023800
 8007f0c:	00f42400 	.word	0x00f42400
 8007f10:	007a1200 	.word	0x007a1200

08007f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f14:	b480      	push	{r7}
 8007f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f18:	4b03      	ldr	r3, [pc, #12]	@ (8007f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	20000020 	.word	0x20000020

08007f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f30:	f7ff fff0 	bl	8007f14 <HAL_RCC_GetHCLKFreq>
 8007f34:	4602      	mov	r2, r0
 8007f36:	4b05      	ldr	r3, [pc, #20]	@ (8007f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	0a9b      	lsrs	r3, r3, #10
 8007f3c:	f003 0307 	and.w	r3, r3, #7
 8007f40:	4903      	ldr	r1, [pc, #12]	@ (8007f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f42:	5ccb      	ldrb	r3, [r1, r3]
 8007f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	40023800 	.word	0x40023800
 8007f50:	0800b5fc 	.word	0x0800b5fc

08007f54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007f60:	2300      	movs	r3, #0
 8007f62:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10b      	bne.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d105      	bne.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d075      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007f88:	4b91      	ldr	r3, [pc, #580]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007f8e:	f7fd f923 	bl	80051d8 <HAL_GetTick>
 8007f92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f94:	e008      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007f96:	f7fd f91f 	bl	80051d8 <HAL_GetTick>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d901      	bls.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e189      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007fa8:	4b8a      	ldr	r3, [pc, #552]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1f0      	bne.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0301 	and.w	r3, r3, #1
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d009      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	019a      	lsls	r2, r3, #6
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	071b      	lsls	r3, r3, #28
 8007fcc:	4981      	ldr	r1, [pc, #516]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d01f      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007fe0:	4b7c      	ldr	r3, [pc, #496]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fe6:	0f1b      	lsrs	r3, r3, #28
 8007fe8:	f003 0307 	and.w	r3, r3, #7
 8007fec:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	019a      	lsls	r2, r3, #6
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	061b      	lsls	r3, r3, #24
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	071b      	lsls	r3, r3, #28
 8008000:	4974      	ldr	r1, [pc, #464]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008002:	4313      	orrs	r3, r2
 8008004:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008008:	4b72      	ldr	r3, [pc, #456]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800800a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800800e:	f023 021f 	bic.w	r2, r3, #31
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	3b01      	subs	r3, #1
 8008018:	496e      	ldr	r1, [pc, #440]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800801a:	4313      	orrs	r3, r2
 800801c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00d      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	019a      	lsls	r2, r3, #6
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	061b      	lsls	r3, r3, #24
 8008038:	431a      	orrs	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	071b      	lsls	r3, r3, #28
 8008040:	4964      	ldr	r1, [pc, #400]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008042:	4313      	orrs	r3, r2
 8008044:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008048:	4b61      	ldr	r3, [pc, #388]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800804a:	2201      	movs	r2, #1
 800804c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800804e:	f7fd f8c3 	bl	80051d8 <HAL_GetTick>
 8008052:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008054:	e008      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008056:	f7fd f8bf 	bl	80051d8 <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	2b02      	cmp	r3, #2
 8008062:	d901      	bls.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e129      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008068:	4b5a      	ldr	r3, [pc, #360]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d0f0      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0304 	and.w	r3, r3, #4
 800807c:	2b00      	cmp	r3, #0
 800807e:	d105      	bne.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008088:	2b00      	cmp	r3, #0
 800808a:	d079      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800808c:	4b52      	ldr	r3, [pc, #328]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800808e:	2200      	movs	r2, #0
 8008090:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008092:	f7fd f8a1 	bl	80051d8 <HAL_GetTick>
 8008096:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008098:	e008      	b.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800809a:	f7fd f89d 	bl	80051d8 <HAL_GetTick>
 800809e:	4602      	mov	r2, r0
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d901      	bls.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e107      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80080ac:	4b49      	ldr	r3, [pc, #292]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080b8:	d0ef      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 0304 	and.w	r3, r3, #4
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d020      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80080c6:	4b43      	ldr	r3, [pc, #268]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80080c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080cc:	0f1b      	lsrs	r3, r3, #28
 80080ce:	f003 0307 	and.w	r3, r3, #7
 80080d2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	019a      	lsls	r2, r3, #6
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	061b      	lsls	r3, r3, #24
 80080e0:	431a      	orrs	r2, r3
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	071b      	lsls	r3, r3, #28
 80080e6:	493b      	ldr	r1, [pc, #236]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80080ee:	4b39      	ldr	r3, [pc, #228]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80080f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080f4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a1b      	ldr	r3, [r3, #32]
 80080fc:	3b01      	subs	r3, #1
 80080fe:	021b      	lsls	r3, r3, #8
 8008100:	4934      	ldr	r1, [pc, #208]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008102:	4313      	orrs	r3, r2
 8008104:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0308 	and.w	r3, r3, #8
 8008110:	2b00      	cmp	r3, #0
 8008112:	d01e      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008114:	4b2f      	ldr	r3, [pc, #188]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800811a:	0e1b      	lsrs	r3, r3, #24
 800811c:	f003 030f 	and.w	r3, r3, #15
 8008120:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	019a      	lsls	r2, r3, #6
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	061b      	lsls	r3, r3, #24
 800812c:	431a      	orrs	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	071b      	lsls	r3, r3, #28
 8008134:	4927      	ldr	r1, [pc, #156]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008136:	4313      	orrs	r3, r2
 8008138:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800813c:	4b25      	ldr	r3, [pc, #148]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800813e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008142:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800814a:	4922      	ldr	r1, [pc, #136]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800814c:	4313      	orrs	r3, r2
 800814e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008152:	4b21      	ldr	r3, [pc, #132]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008154:	2201      	movs	r2, #1
 8008156:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008158:	f7fd f83e 	bl	80051d8 <HAL_GetTick>
 800815c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800815e:	e008      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008160:	f7fd f83a 	bl	80051d8 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	2b02      	cmp	r3, #2
 800816c:	d901      	bls.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e0a4      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008172:	4b18      	ldr	r3, [pc, #96]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800817a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800817e:	d1ef      	bne.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0320 	and.w	r3, r3, #32
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 808b 	beq.w	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800818e:	2300      	movs	r3, #0
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	4b10      	ldr	r3, [pc, #64]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008196:	4a0f      	ldr	r2, [pc, #60]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800819c:	6413      	str	r3, [r2, #64]	@ 0x40
 800819e:	4b0d      	ldr	r3, [pc, #52]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081a6:	60fb      	str	r3, [r7, #12]
 80081a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80081aa:	4b0c      	ldr	r3, [pc, #48]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a0b      	ldr	r2, [pc, #44]	@ (80081dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80081b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80081b6:	f7fd f80f 	bl	80051d8 <HAL_GetTick>
 80081ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80081bc:	e010      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80081be:	f7fd f80b 	bl	80051d8 <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d909      	bls.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80081cc:	2303      	movs	r3, #3
 80081ce:	e075      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80081d0:	42470068 	.word	0x42470068
 80081d4:	40023800 	.word	0x40023800
 80081d8:	42470070 	.word	0x42470070
 80081dc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80081e0:	4b38      	ldr	r3, [pc, #224]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d0e8      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80081ec:	4b36      	ldr	r3, [pc, #216]	@ (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80081ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d02f      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008200:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	429a      	cmp	r2, r3
 8008208:	d028      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800820a:	4b2f      	ldr	r3, [pc, #188]	@ (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800820c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800820e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008212:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008214:	4b2d      	ldr	r3, [pc, #180]	@ (80082cc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008216:	2201      	movs	r2, #1
 8008218:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800821a:	4b2c      	ldr	r3, [pc, #176]	@ (80082cc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800821c:	2200      	movs	r2, #0
 800821e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008220:	4a29      	ldr	r2, [pc, #164]	@ (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008226:	4b28      	ldr	r3, [pc, #160]	@ (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b01      	cmp	r3, #1
 8008230:	d114      	bne.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008232:	f7fc ffd1 	bl	80051d8 <HAL_GetTick>
 8008236:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008238:	e00a      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800823a:	f7fc ffcd 	bl	80051d8 <HAL_GetTick>
 800823e:	4602      	mov	r2, r0
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008248:	4293      	cmp	r3, r2
 800824a:	d901      	bls.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e035      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008250:	4b1d      	ldr	r3, [pc, #116]	@ (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008254:	f003 0302 	and.w	r3, r3, #2
 8008258:	2b00      	cmp	r3, #0
 800825a:	d0ee      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008260:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008264:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008268:	d10d      	bne.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800826a:	4b17      	ldr	r3, [pc, #92]	@ (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008276:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800827a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800827e:	4912      	ldr	r1, [pc, #72]	@ (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008280:	4313      	orrs	r3, r2
 8008282:	608b      	str	r3, [r1, #8]
 8008284:	e005      	b.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8008286:	4b10      	ldr	r3, [pc, #64]	@ (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	4a0f      	ldr	r2, [pc, #60]	@ (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800828c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008290:	6093      	str	r3, [r2, #8]
 8008292:	4b0d      	ldr	r3, [pc, #52]	@ (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008294:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800829a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800829e:	490a      	ldr	r1, [pc, #40]	@ (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082a0:	4313      	orrs	r3, r2
 80082a2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0310 	and.w	r3, r3, #16
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d004      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80082b6:	4b06      	ldr	r3, [pc, #24]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80082b8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3718      	adds	r7, #24
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	40007000 	.word	0x40007000
 80082c8:	40023800 	.word	0x40023800
 80082cc:	42470e40 	.word	0x42470e40
 80082d0:	424711e0 	.word	0x424711e0

080082d4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d101      	bne.n	80082e8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e025      	b.n	8008334 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d106      	bne.n	8008302 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f81d 	bl	800833c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2202      	movs	r2, #2
 8008306:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	3304      	adds	r3, #4
 8008312:	4619      	mov	r1, r3
 8008314:	4610      	mov	r0, r2
 8008316:	f001 fabe 	bl	8009896 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6818      	ldr	r0, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	461a      	mov	r2, r3
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	f001 fb29 	bl	800997c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b02      	cmp	r3, #2
 8008366:	d101      	bne.n	800836c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008368:	2302      	movs	r3, #2
 800836a:	e018      	b.n	800839e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2202      	movs	r2, #2
 8008370:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	68b9      	ldr	r1, [r7, #8]
 800837c:	4618      	mov	r0, r3
 800837e:	f001 fb7c 	bl	8009a7a <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b02      	cmp	r3, #2
 8008388:	d104      	bne.n	8008394 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2205      	movs	r2, #5
 800838e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8008392:	e003      	b.n	800839c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }
  
  return HAL_OK;  
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b082      	sub	sp, #8
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d101      	bne.n	80083c0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80083bc:	2302      	movs	r3, #2
 80083be:	e00e      	b.n	80083de <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f001 fb8f 	bl	8009af2 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;   
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b082      	sub	sp, #8
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d101      	bne.n	80083f8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e05d      	b.n	80084b4 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b00      	cmp	r3, #0
 8008402:	d106      	bne.n	8008412 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f87d 	bl	800850c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2202      	movs	r2, #2
 8008416:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008428:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685a      	ldr	r2, [r3, #4]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	431a      	orrs	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	431a      	orrs	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	431a      	orrs	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	695b      	ldr	r3, [r3, #20]
 8008444:	431a      	orrs	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800844e:	431a      	orrs	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	431a      	orrs	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	ea42 0103 	orr.w	r1, r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	0c1b      	lsrs	r3, r3, #16
 8008470:	f003 0104 	and.w	r1, r3, #4
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	430a      	orrs	r2, r1
 800847e:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008484:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008488:	d104      	bne.n	8008494 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008492:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	69da      	ldr	r2, [r3, #28]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80084a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e01a      	b.n	8008504 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2202      	movs	r2, #2
 80084d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084e4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f81a 	bl	8008520 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b088      	sub	sp, #32
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	603b      	str	r3, [r7, #0]
 8008540:	4613      	mov	r3, r2
 8008542:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800854e:	2b01      	cmp	r3, #1
 8008550:	d101      	bne.n	8008556 <HAL_SPI_Transmit+0x22>
 8008552:	2302      	movs	r3, #2
 8008554:	e140      	b.n	80087d8 <HAL_SPI_Transmit+0x2a4>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800855e:	f7fc fe3b 	bl	80051d8 <HAL_GetTick>
 8008562:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008564:	88fb      	ldrh	r3, [r7, #6]
 8008566:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b01      	cmp	r3, #1
 8008572:	d002      	beq.n	800857a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008574:	2302      	movs	r3, #2
 8008576:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008578:	e125      	b.n	80087c6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <HAL_SPI_Transmit+0x52>
 8008580:	88fb      	ldrh	r3, [r7, #6]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d102      	bne.n	800858c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	77fb      	strb	r3, [r7, #31]
    goto error;
 800858a:	e11c      	b.n	80087c6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2203      	movs	r2, #3
 8008590:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	88fa      	ldrh	r2, [r7, #6]
 80085a4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	88fa      	ldrh	r2, [r7, #6]
 80085aa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085d2:	d107      	bne.n	80085e4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085e2:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085ec:	d10f      	bne.n	800860e <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800860c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008618:	2b40      	cmp	r3, #64	@ 0x40
 800861a:	d007      	beq.n	800862c <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800862a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008634:	d14b      	bne.n	80086ce <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d002      	beq.n	8008644 <HAL_SPI_Transmit+0x110>
 800863e:	8afb      	ldrh	r3, [r7, #22]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d13e      	bne.n	80086c2 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008648:	881a      	ldrh	r2, [r3, #0]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008654:	1c9a      	adds	r2, r3, #2
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800865e:	b29b      	uxth	r3, r3
 8008660:	3b01      	subs	r3, #1
 8008662:	b29a      	uxth	r2, r3
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008668:	e02b      	b.n	80086c2 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f003 0302 	and.w	r3, r3, #2
 8008674:	2b02      	cmp	r3, #2
 8008676:	d112      	bne.n	800869e <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800867c:	881a      	ldrh	r2, [r3, #0]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008688:	1c9a      	adds	r2, r3, #2
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008692:	b29b      	uxth	r3, r3
 8008694:	3b01      	subs	r3, #1
 8008696:	b29a      	uxth	r2, r3
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800869c:	e011      	b.n	80086c2 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800869e:	f7fc fd9b 	bl	80051d8 <HAL_GetTick>
 80086a2:	4602      	mov	r2, r0
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d803      	bhi.n	80086b6 <HAL_SPI_Transmit+0x182>
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b4:	d102      	bne.n	80086bc <HAL_SPI_Transmit+0x188>
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d102      	bne.n	80086c2 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80086c0:	e081      	b.n	80087c6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1ce      	bne.n	800866a <HAL_SPI_Transmit+0x136>
 80086cc:	e04c      	b.n	8008768 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <HAL_SPI_Transmit+0x1a8>
 80086d6:	8afb      	ldrh	r3, [r7, #22]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d140      	bne.n	800875e <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	330c      	adds	r3, #12
 80086e6:	7812      	ldrb	r2, [r2, #0]
 80086e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ee:	1c5a      	adds	r2, r3, #1
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	3b01      	subs	r3, #1
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008702:	e02c      	b.n	800875e <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f003 0302 	and.w	r3, r3, #2
 800870e:	2b02      	cmp	r3, #2
 8008710:	d113      	bne.n	800873a <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	330c      	adds	r3, #12
 800871c:	7812      	ldrb	r2, [r2, #0]
 800871e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008724:	1c5a      	adds	r2, r3, #1
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800872e:	b29b      	uxth	r3, r3
 8008730:	3b01      	subs	r3, #1
 8008732:	b29a      	uxth	r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008738:	e011      	b.n	800875e <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800873a:	f7fc fd4d 	bl	80051d8 <HAL_GetTick>
 800873e:	4602      	mov	r2, r0
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	429a      	cmp	r2, r3
 8008748:	d803      	bhi.n	8008752 <HAL_SPI_Transmit+0x21e>
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008750:	d102      	bne.n	8008758 <HAL_SPI_Transmit+0x224>
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d102      	bne.n	800875e <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800875c:	e033      	b.n	80087c6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008762:	b29b      	uxth	r3, r3
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1cd      	bne.n	8008704 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800876c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008770:	d107      	bne.n	8008782 <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008780:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008782:	69ba      	ldr	r2, [r7, #24]
 8008784:	6839      	ldr	r1, [r7, #0]
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 fc94 	bl	80090b4 <SPI_EndRxTxTransaction>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d002      	beq.n	8008798 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2220      	movs	r2, #32
 8008796:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10a      	bne.n	80087b6 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087a0:	2300      	movs	r3, #0
 80087a2:	613b      	str	r3, [r7, #16]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	613b      	str	r3, [r7, #16]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	613b      	str	r3, [r7, #16]
 80087b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	77fb      	strb	r3, [r7, #31]
 80087c2:	e000      	b.n	80087c6 <HAL_SPI_Transmit+0x292>
  }

error:
 80087c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80087d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3720      	adds	r7, #32
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b088      	sub	sp, #32
 80087e4:	af02      	add	r7, sp, #8
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	603b      	str	r3, [r7, #0]
 80087ec:	4613      	mov	r3, r2
 80087ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80087fc:	d112      	bne.n	8008824 <HAL_SPI_Receive+0x44>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10e      	bne.n	8008824 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2204      	movs	r2, #4
 800880a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800880e:	88fa      	ldrh	r2, [r7, #6]
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	4613      	mov	r3, r2
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	68b9      	ldr	r1, [r7, #8]
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 f95f 	bl	8008ade <HAL_SPI_TransmitReceive>
 8008820:	4603      	mov	r3, r0
 8008822:	e158      	b.n	8008ad6 <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800882a:	2b01      	cmp	r3, #1
 800882c:	d101      	bne.n	8008832 <HAL_SPI_Receive+0x52>
 800882e:	2302      	movs	r3, #2
 8008830:	e151      	b.n	8008ad6 <HAL_SPI_Receive+0x2f6>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800883a:	f7fc fccd 	bl	80051d8 <HAL_GetTick>
 800883e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b01      	cmp	r3, #1
 800884a:	d002      	beq.n	8008852 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800884c:	2302      	movs	r3, #2
 800884e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008850:	e138      	b.n	8008ac4 <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <HAL_SPI_Receive+0x7e>
 8008858:	88fb      	ldrh	r3, [r7, #6]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d102      	bne.n	8008864 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008862:	e12f      	b.n	8008ac4 <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2204      	movs	r2, #4
 8008868:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	88fa      	ldrh	r2, [r7, #6]
 800887c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	88fa      	ldrh	r2, [r7, #6]
 8008882:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088aa:	d116      	bne.n	80088da <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80088ba:	601a      	str	r2, [r3, #0]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80088ca:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	3b01      	subs	r3, #1
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088e2:	d107      	bne.n	80088f4 <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80088f2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088fe:	2b40      	cmp	r3, #64	@ 0x40
 8008900:	d007      	beq.n	8008912 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008910:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d162      	bne.n	80089e0 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800891a:	e02e      	b.n	800897a <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	2b01      	cmp	r3, #1
 8008928:	d115      	bne.n	8008956 <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f103 020c 	add.w	r2, r3, #12
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008936:	7812      	ldrb	r2, [r2, #0]
 8008938:	b2d2      	uxtb	r2, r2
 800893a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008940:	1c5a      	adds	r2, r3, #1
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800894a:	b29b      	uxth	r3, r3
 800894c:	3b01      	subs	r3, #1
 800894e:	b29a      	uxth	r2, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008954:	e011      	b.n	800897a <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008956:	f7fc fc3f 	bl	80051d8 <HAL_GetTick>
 800895a:	4602      	mov	r2, r0
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	683a      	ldr	r2, [r7, #0]
 8008962:	429a      	cmp	r2, r3
 8008964:	d803      	bhi.n	800896e <HAL_SPI_Receive+0x18e>
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800896c:	d102      	bne.n	8008974 <HAL_SPI_Receive+0x194>
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d102      	bne.n	800897a <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008978:	e0a4      	b.n	8008ac4 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800897e:	b29b      	uxth	r3, r3
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1cb      	bne.n	800891c <HAL_SPI_Receive+0x13c>
 8008984:	e031      	b.n	80089ea <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	2b01      	cmp	r3, #1
 8008992:	d113      	bne.n	80089bc <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800899e:	b292      	uxth	r2, r2
 80089a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a6:	1c9a      	adds	r2, r3, #2
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	3b01      	subs	r3, #1
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80089ba:	e011      	b.n	80089e0 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089bc:	f7fc fc0c 	bl	80051d8 <HAL_GetTick>
 80089c0:	4602      	mov	r2, r0
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	683a      	ldr	r2, [r7, #0]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d803      	bhi.n	80089d4 <HAL_SPI_Receive+0x1f4>
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d2:	d102      	bne.n	80089da <HAL_SPI_Receive+0x1fa>
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d102      	bne.n	80089e0 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80089de:	e071      	b.n	8008ac4 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1cd      	bne.n	8008986 <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089f2:	d142      	bne.n	8008a7a <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008a02:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f000 fa81 	bl	8008f16 <SPI_WaitFlagStateUntilTimeout>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d002      	beq.n	8008a20 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	75fb      	strb	r3, [r7, #23]
      goto error;
 8008a1e:	e051      	b.n	8008ac4 <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a28:	d107      	bne.n	8008a3a <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68da      	ldr	r2, [r3, #12]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a34:	b292      	uxth	r2, r2
 8008a36:	801a      	strh	r2, [r3, #0]
 8008a38:	e008      	b.n	8008a4c <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f103 020c 	add.w	r2, r3, #12
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a46:	7812      	ldrb	r2, [r2, #0]
 8008a48:	b2d2      	uxtb	r2, r2
 8008a4a:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	2201      	movs	r2, #1
 8008a54:	2101      	movs	r1, #1
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f000 fa5d 	bl	8008f16 <SPI_WaitFlagStateUntilTimeout>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d008      	beq.n	8008a74 <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a66:	f043 0202 	orr.w	r2, r3, #2
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	75fb      	strb	r3, [r7, #23]
      goto error;
 8008a72:	e027      	b.n	8008ac4 <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f000 fab3 	bl	8008fea <SPI_EndRxTransaction>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d002      	beq.n	8008a90 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2220      	movs	r2, #32
 8008a8e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f003 0310 	and.w	r3, r3, #16
 8008a9a:	2b10      	cmp	r3, #16
 8008a9c:	d10a      	bne.n	8008ab4 <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aa2:	f043 0202 	orr.w	r2, r3, #2
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8008ab2:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d002      	beq.n	8008ac2 <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	75fb      	strb	r3, [r7, #23]
 8008ac0:	e000      	b.n	8008ac4 <HAL_SPI_Receive+0x2e4>
  }

error :
 8008ac2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3718      	adds	r7, #24
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b08e      	sub	sp, #56	@ 0x38
 8008ae2:	af02      	add	r7, sp, #8
 8008ae4:	60f8      	str	r0, [r7, #12]
 8008ae6:	60b9      	str	r1, [r7, #8]
 8008ae8:	607a      	str	r2, [r7, #4]
 8008aea:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008aec:	2301      	movs	r3, #1
 8008aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008af0:	2300      	movs	r3, #0
 8008af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d101      	bne.n	8008b04 <HAL_SPI_TransmitReceive+0x26>
 8008b00:	2302      	movs	r3, #2
 8008b02:	e1f6      	b.n	8008ef2 <HAL_SPI_TransmitReceive+0x414>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b0c:	f7fc fb64 	bl	80051d8 <HAL_GetTick>
 8008b10:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008b22:	887b      	ldrh	r3, [r7, #2]
 8008b24:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008b26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d00f      	beq.n	8008b4e <HAL_SPI_TransmitReceive+0x70>
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b34:	d107      	bne.n	8008b46 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d103      	bne.n	8008b46 <HAL_SPI_TransmitReceive+0x68>
 8008b3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008b42:	2b04      	cmp	r3, #4
 8008b44:	d003      	beq.n	8008b4e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008b46:	2302      	movs	r3, #2
 8008b48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008b4c:	e1c7      	b.n	8008ede <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d005      	beq.n	8008b60 <HAL_SPI_TransmitReceive+0x82>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d002      	beq.n	8008b60 <HAL_SPI_TransmitReceive+0x82>
 8008b5a:	887b      	ldrh	r3, [r7, #2]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d103      	bne.n	8008b68 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008b66:	e1ba      	b.n	8008ede <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	2b04      	cmp	r3, #4
 8008b72:	d003      	beq.n	8008b7c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2205      	movs	r2, #5
 8008b78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	887a      	ldrh	r2, [r7, #2]
 8008b8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	887a      	ldrh	r2, [r7, #2]
 8008b92:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	68ba      	ldr	r2, [r7, #8]
 8008b98:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	887a      	ldrh	r2, [r7, #2]
 8008b9e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	887a      	ldrh	r2, [r7, #2]
 8008ba4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bba:	d10f      	bne.n	8008bdc <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008bda:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008be6:	2b40      	cmp	r3, #64	@ 0x40
 8008be8:	d007      	beq.n	8008bfa <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008bf8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c02:	f040 808b 	bne.w	8008d1c <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d002      	beq.n	8008c14 <HAL_SPI_TransmitReceive+0x136>
 8008c0e:	8b7b      	ldrh	r3, [r7, #26]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d178      	bne.n	8008d06 <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c18:	881a      	ldrh	r2, [r3, #0]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c24:	1c9a      	adds	r2, r3, #2
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	3b01      	subs	r3, #1
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c38:	e065      	b.n	8008d06 <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	f003 0302 	and.w	r3, r3, #2
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d12d      	bne.n	8008ca4 <HAL_SPI_TransmitReceive+0x1c6>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d028      	beq.n	8008ca4 <HAL_SPI_TransmitReceive+0x1c6>
 8008c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d125      	bne.n	8008ca4 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c5c:	881a      	ldrh	r2, [r3, #0]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c68:	1c9a      	adds	r2, r3, #2
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	3b01      	subs	r3, #1
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10c      	bne.n	8008ca4 <HAL_SPI_TransmitReceive+0x1c6>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c92:	d107      	bne.n	8008ca4 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008ca2:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d119      	bne.n	8008ce6 <HAL_SPI_TransmitReceive+0x208>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d014      	beq.n	8008ce6 <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68da      	ldr	r2, [r3, #12]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cc6:	b292      	uxth	r2, r2
 8008cc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cce:	1c9a      	adds	r2, r3, #2
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ce6:	f7fc fa77 	bl	80051d8 <HAL_GetTick>
 8008cea:	4602      	mov	r2, r0
 8008cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d807      	bhi.n	8008d06 <HAL_SPI_TransmitReceive+0x228>
 8008cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfc:	d003      	beq.n	8008d06 <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8008d04:	e0eb      	b.n	8008ede <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d194      	bne.n	8008c3a <HAL_SPI_TransmitReceive+0x15c>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d18f      	bne.n	8008c3a <HAL_SPI_TransmitReceive+0x15c>
 8008d1a:	e08e      	b.n	8008e3a <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <HAL_SPI_TransmitReceive+0x24c>
 8008d24:	8b7b      	ldrh	r3, [r7, #26]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d17d      	bne.n	8008e26 <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	330c      	adds	r3, #12
 8008d34:	7812      	ldrb	r2, [r2, #0]
 8008d36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d3c:	1c5a      	adds	r2, r3, #1
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d50:	e069      	b.n	8008e26 <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	f003 0302 	and.w	r3, r3, #2
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d12e      	bne.n	8008dbe <HAL_SPI_TransmitReceive+0x2e0>
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d029      	beq.n	8008dbe <HAL_SPI_TransmitReceive+0x2e0>
 8008d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d126      	bne.n	8008dbe <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	330c      	adds	r3, #12
 8008d7a:	7812      	ldrb	r2, [r2, #0]
 8008d7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d82:	1c5a      	adds	r2, r3, #1
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10c      	bne.n	8008dbe <HAL_SPI_TransmitReceive+0x2e0>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dac:	d107      	bne.n	8008dbe <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008dbc:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	f003 0301 	and.w	r3, r3, #1
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d119      	bne.n	8008e00 <HAL_SPI_TransmitReceive+0x322>
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d014      	beq.n	8008e00 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68da      	ldr	r2, [r3, #12]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de0:	b2d2      	uxtb	r2, r2
 8008de2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de8:	1c5a      	adds	r2, r3, #1
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	3b01      	subs	r3, #1
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008e00:	f7fc f9ea 	bl	80051d8 <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d803      	bhi.n	8008e18 <HAL_SPI_TransmitReceive+0x33a>
 8008e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e16:	d102      	bne.n	8008e1e <HAL_SPI_TransmitReceive+0x340>
 8008e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d103      	bne.n	8008e26 <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8008e24:	e05b      	b.n	8008ede <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d190      	bne.n	8008d52 <HAL_SPI_TransmitReceive+0x274>
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d18b      	bne.n	8008d52 <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e42:	d117      	bne.n	8008e74 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	2101      	movs	r1, #1
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f000 f861 	bl	8008f16 <SPI_WaitFlagStateUntilTimeout>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d009      	beq.n	8008e6e <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e5e:	f043 0202 	orr.w	r2, r3, #2
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      goto error;
 8008e6c:	e037      	b.n	8008ede <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f003 0310 	and.w	r3, r3, #16
 8008e7e:	2b10      	cmp	r3, #16
 8008e80:	d10d      	bne.n	8008e9e <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e86:	f043 0202 	orr.w	r2, r3, #2
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8008e96:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ea0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f000 f906 	bl	80090b4 <SPI_EndRxTxTransaction>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d006      	beq.n	8008ebc <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2220      	movs	r2, #32
 8008eb8:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8008eba:	e010      	b.n	8008ede <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10b      	bne.n	8008edc <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	617b      	str	r3, [r7, #20]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	617b      	str	r3, [r7, #20]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	617b      	str	r3, [r7, #20]
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	e000      	b.n	8008ede <HAL_SPI_TransmitReceive+0x400>
  }

error :
 8008edc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008eee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3730      	adds	r7, #48	@ 0x30
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b083      	sub	sp, #12
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008f08:	b2db      	uxtb	r3, r3
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b084      	sub	sp, #16
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	60f8      	str	r0, [r7, #12]
 8008f1e:	60b9      	str	r1, [r7, #8]
 8008f20:	603b      	str	r3, [r7, #0]
 8008f22:	4613      	mov	r3, r2
 8008f24:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f26:	e04c      	b.n	8008fc2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f2e:	d048      	beq.n	8008fc2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008f30:	f7fc f952 	bl	80051d8 <HAL_GetTick>
 8008f34:	4602      	mov	r2, r0
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d902      	bls.n	8008f46 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d13d      	bne.n	8008fc2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008f54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f5e:	d111      	bne.n	8008f84 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f68:	d004      	beq.n	8008f74 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f72:	d107      	bne.n	8008f84 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f8c:	d10f      	bne.n	8008fae <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008fac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	e00f      	b.n	8008fe2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	689a      	ldr	r2, [r3, #8]
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	4013      	ands	r3, r2
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	bf0c      	ite	eq
 8008fd2:	2301      	moveq	r3, #1
 8008fd4:	2300      	movne	r3, #0
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	461a      	mov	r2, r3
 8008fda:	79fb      	ldrb	r3, [r7, #7]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d1a3      	bne.n	8008f28 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b086      	sub	sp, #24
 8008fee:	af02      	add	r7, sp, #8
 8008ff0:	60f8      	str	r0, [r7, #12]
 8008ff2:	60b9      	str	r1, [r7, #8]
 8008ff4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ffe:	d111      	bne.n	8009024 <SPI_EndRxTransaction+0x3a>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009008:	d004      	beq.n	8009014 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009012:	d107      	bne.n	8009024 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009022:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800902c:	d12a      	bne.n	8009084 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009036:	d012      	beq.n	800905e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	2200      	movs	r2, #0
 8009040:	2180      	movs	r1, #128	@ 0x80
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f7ff ff67 	bl	8008f16 <SPI_WaitFlagStateUntilTimeout>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d02d      	beq.n	80090aa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009052:	f043 0220 	orr.w	r2, r3, #32
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e026      	b.n	80090ac <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	2200      	movs	r2, #0
 8009066:	2101      	movs	r1, #1
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f7ff ff54 	bl	8008f16 <SPI_WaitFlagStateUntilTimeout>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d01a      	beq.n	80090aa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009078:	f043 0220 	orr.w	r2, r3, #32
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009080:	2303      	movs	r3, #3
 8009082:	e013      	b.n	80090ac <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	2200      	movs	r2, #0
 800908c:	2101      	movs	r1, #1
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f7ff ff41 	bl	8008f16 <SPI_WaitFlagStateUntilTimeout>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d007      	beq.n	80090aa <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800909e:	f043 0220 	orr.w	r2, r3, #32
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e000      	b.n	80090ac <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b088      	sub	sp, #32
 80090b8:	af02      	add	r7, sp, #8
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80090c0:	4b1b      	ldr	r3, [pc, #108]	@ (8009130 <SPI_EndRxTxTransaction+0x7c>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a1b      	ldr	r2, [pc, #108]	@ (8009134 <SPI_EndRxTxTransaction+0x80>)
 80090c6:	fba2 2303 	umull	r2, r3, r2, r3
 80090ca:	0d5b      	lsrs	r3, r3, #21
 80090cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80090d0:	fb02 f303 	mul.w	r3, r2, r3
 80090d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80090de:	d112      	bne.n	8009106 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	2200      	movs	r2, #0
 80090e8:	2180      	movs	r1, #128	@ 0x80
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f7ff ff13 	bl	8008f16 <SPI_WaitFlagStateUntilTimeout>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d016      	beq.n	8009124 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090fa:	f043 0220 	orr.w	r2, r3, #32
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009102:	2303      	movs	r3, #3
 8009104:	e00f      	b.n	8009126 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00a      	beq.n	8009122 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	3b01      	subs	r3, #1
 8009110:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800911c:	2b80      	cmp	r3, #128	@ 0x80
 800911e:	d0f2      	beq.n	8009106 <SPI_EndRxTxTransaction+0x52>
 8009120:	e000      	b.n	8009124 <SPI_EndRxTxTransaction+0x70>
        break;
 8009122:	bf00      	nop
  }

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3718      	adds	r7, #24
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	20000020 	.word	0x20000020
 8009134:	165e9f81 	.word	0x165e9f81

08009138 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d101      	bne.n	800914a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e01d      	b.n	8009186 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009150:	b2db      	uxtb	r3, r3
 8009152:	2b00      	cmp	r3, #0
 8009154:	d106      	bne.n	8009164 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f815 	bl	800918e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2202      	movs	r2, #2
 8009168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	3304      	adds	r3, #4
 8009174:	4619      	mov	r1, r3
 8009176:	4610      	mov	r0, r2
 8009178:	f000 f918 	bl	80093ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800918e:	b480      	push	{r7}
 8009190:	b083      	sub	sp, #12
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009196:	bf00      	nop
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
	...

080091a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2201      	movs	r2, #1
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 fb48 	bl	800984c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a15      	ldr	r2, [pc, #84]	@ (8009218 <HAL_TIM_PWM_Start+0x74>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d004      	beq.n	80091d0 <HAL_TIM_PWM_Start+0x2c>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a14      	ldr	r2, [pc, #80]	@ (800921c <HAL_TIM_PWM_Start+0x78>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d101      	bne.n	80091d4 <HAL_TIM_PWM_Start+0x30>
 80091d0:	2301      	movs	r3, #1
 80091d2:	e000      	b.n	80091d6 <HAL_TIM_PWM_Start+0x32>
 80091d4:	2300      	movs	r3, #0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d007      	beq.n	80091ea <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80091e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	f003 0307 	and.w	r3, r3, #7
 80091f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2b06      	cmp	r3, #6
 80091fa:	d007      	beq.n	800920c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0201 	orr.w	r2, r2, #1
 800920a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	40010000 	.word	0x40010000
 800921c:	40010400 	.word	0x40010400

08009220 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009232:	2b01      	cmp	r3, #1
 8009234:	d101      	bne.n	800923a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009236:	2302      	movs	r3, #2
 8009238:	e0b4      	b.n	80093a4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2201      	movs	r2, #1
 800923e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2202      	movs	r2, #2
 8009246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  switch (Channel)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2b0c      	cmp	r3, #12
 800924e:	f200 809f 	bhi.w	8009390 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009252:	a201      	add	r2, pc, #4	@ (adr r2, 8009258 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009258:	0800928d 	.word	0x0800928d
 800925c:	08009391 	.word	0x08009391
 8009260:	08009391 	.word	0x08009391
 8009264:	08009391 	.word	0x08009391
 8009268:	080092cd 	.word	0x080092cd
 800926c:	08009391 	.word	0x08009391
 8009270:	08009391 	.word	0x08009391
 8009274:	08009391 	.word	0x08009391
 8009278:	0800930f 	.word	0x0800930f
 800927c:	08009391 	.word	0x08009391
 8009280:	08009391 	.word	0x08009391
 8009284:	08009391 	.word	0x08009391
 8009288:	0800934f 	.word	0x0800934f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68b9      	ldr	r1, [r7, #8]
 8009292:	4618      	mov	r0, r3
 8009294:	f000 f92a 	bl	80094ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	699a      	ldr	r2, [r3, #24]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f042 0208 	orr.w	r2, r2, #8
 80092a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	699a      	ldr	r2, [r3, #24]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f022 0204 	bic.w	r2, r2, #4
 80092b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6999      	ldr	r1, [r3, #24]
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	691a      	ldr	r2, [r3, #16]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	430a      	orrs	r2, r1
 80092c8:	619a      	str	r2, [r3, #24]
      break;
 80092ca:	e062      	b.n	8009392 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68b9      	ldr	r1, [r7, #8]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 f97a 	bl	80095cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	699a      	ldr	r2, [r3, #24]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80092e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	699a      	ldr	r2, [r3, #24]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80092f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6999      	ldr	r1, [r3, #24]
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	021a      	lsls	r2, r3, #8
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	430a      	orrs	r2, r1
 800930a:	619a      	str	r2, [r3, #24]
      break;
 800930c:	e041      	b.n	8009392 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68b9      	ldr	r1, [r7, #8]
 8009314:	4618      	mov	r0, r3
 8009316:	f000 f9cf 	bl	80096b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	69da      	ldr	r2, [r3, #28]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f042 0208 	orr.w	r2, r2, #8
 8009328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	69da      	ldr	r2, [r3, #28]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f022 0204 	bic.w	r2, r2, #4
 8009338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	69d9      	ldr	r1, [r3, #28]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	691a      	ldr	r2, [r3, #16]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	430a      	orrs	r2, r1
 800934a:	61da      	str	r2, [r3, #28]
      break;
 800934c:	e021      	b.n	8009392 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68b9      	ldr	r1, [r7, #8]
 8009354:	4618      	mov	r0, r3
 8009356:	f000 fa23 	bl	80097a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	69da      	ldr	r2, [r3, #28]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	69da      	ldr	r2, [r3, #28]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	69d9      	ldr	r1, [r3, #28]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	021a      	lsls	r2, r3, #8
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	430a      	orrs	r2, r1
 800938c:	61da      	str	r2, [r3, #28]
      break;
 800938e:	e000      	b.n	8009392 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009390:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a40      	ldr	r2, [pc, #256]	@ (80094c0 <TIM_Base_SetConfig+0x114>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d013      	beq.n	80093ec <TIM_Base_SetConfig+0x40>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093ca:	d00f      	beq.n	80093ec <TIM_Base_SetConfig+0x40>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a3d      	ldr	r2, [pc, #244]	@ (80094c4 <TIM_Base_SetConfig+0x118>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d00b      	beq.n	80093ec <TIM_Base_SetConfig+0x40>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a3c      	ldr	r2, [pc, #240]	@ (80094c8 <TIM_Base_SetConfig+0x11c>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d007      	beq.n	80093ec <TIM_Base_SetConfig+0x40>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a3b      	ldr	r2, [pc, #236]	@ (80094cc <TIM_Base_SetConfig+0x120>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d003      	beq.n	80093ec <TIM_Base_SetConfig+0x40>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a3a      	ldr	r2, [pc, #232]	@ (80094d0 <TIM_Base_SetConfig+0x124>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d108      	bne.n	80093fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a2f      	ldr	r2, [pc, #188]	@ (80094c0 <TIM_Base_SetConfig+0x114>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d02b      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800940c:	d027      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a2c      	ldr	r2, [pc, #176]	@ (80094c4 <TIM_Base_SetConfig+0x118>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d023      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a2b      	ldr	r2, [pc, #172]	@ (80094c8 <TIM_Base_SetConfig+0x11c>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d01f      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a2a      	ldr	r2, [pc, #168]	@ (80094cc <TIM_Base_SetConfig+0x120>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d01b      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a29      	ldr	r2, [pc, #164]	@ (80094d0 <TIM_Base_SetConfig+0x124>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d017      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a28      	ldr	r2, [pc, #160]	@ (80094d4 <TIM_Base_SetConfig+0x128>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d013      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a27      	ldr	r2, [pc, #156]	@ (80094d8 <TIM_Base_SetConfig+0x12c>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d00f      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a26      	ldr	r2, [pc, #152]	@ (80094dc <TIM_Base_SetConfig+0x130>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d00b      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a25      	ldr	r2, [pc, #148]	@ (80094e0 <TIM_Base_SetConfig+0x134>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d007      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a24      	ldr	r2, [pc, #144]	@ (80094e4 <TIM_Base_SetConfig+0x138>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d003      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a23      	ldr	r2, [pc, #140]	@ (80094e8 <TIM_Base_SetConfig+0x13c>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d108      	bne.n	8009470 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	4313      	orrs	r3, r2
 800946e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	4313      	orrs	r3, r2
 800947c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	689a      	ldr	r2, [r3, #8]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a0a      	ldr	r2, [pc, #40]	@ (80094c0 <TIM_Base_SetConfig+0x114>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d003      	beq.n	80094a4 <TIM_Base_SetConfig+0xf8>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a0c      	ldr	r2, [pc, #48]	@ (80094d0 <TIM_Base_SetConfig+0x124>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d103      	bne.n	80094ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	691a      	ldr	r2, [r3, #16]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	615a      	str	r2, [r3, #20]
}
 80094b2:	bf00      	nop
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	40010000 	.word	0x40010000
 80094c4:	40000400 	.word	0x40000400
 80094c8:	40000800 	.word	0x40000800
 80094cc:	40000c00 	.word	0x40000c00
 80094d0:	40010400 	.word	0x40010400
 80094d4:	40014000 	.word	0x40014000
 80094d8:	40014400 	.word	0x40014400
 80094dc:	40014800 	.word	0x40014800
 80094e0:	40001800 	.word	0x40001800
 80094e4:	40001c00 	.word	0x40001c00
 80094e8:	40002000 	.word	0x40002000

080094ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b087      	sub	sp, #28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	f023 0201 	bic.w	r2, r3, #1
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	699b      	ldr	r3, [r3, #24]
 8009512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800951a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f023 0303 	bic.w	r3, r3, #3
 8009522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	4313      	orrs	r3, r2
 800952c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f023 0302 	bic.w	r3, r3, #2
 8009534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	4313      	orrs	r3, r2
 800953e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a20      	ldr	r2, [pc, #128]	@ (80095c4 <TIM_OC1_SetConfig+0xd8>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d003      	beq.n	8009550 <TIM_OC1_SetConfig+0x64>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a1f      	ldr	r2, [pc, #124]	@ (80095c8 <TIM_OC1_SetConfig+0xdc>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d10c      	bne.n	800956a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	f023 0308 	bic.w	r3, r3, #8
 8009556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	697a      	ldr	r2, [r7, #20]
 800955e:	4313      	orrs	r3, r2
 8009560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f023 0304 	bic.w	r3, r3, #4
 8009568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a15      	ldr	r2, [pc, #84]	@ (80095c4 <TIM_OC1_SetConfig+0xd8>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d003      	beq.n	800957a <TIM_OC1_SetConfig+0x8e>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a14      	ldr	r2, [pc, #80]	@ (80095c8 <TIM_OC1_SetConfig+0xdc>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d111      	bne.n	800959e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	4313      	orrs	r3, r2
 8009592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	4313      	orrs	r3, r2
 800959c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	697a      	ldr	r2, [r7, #20]
 80095b6:	621a      	str	r2, [r3, #32]
}
 80095b8:	bf00      	nop
 80095ba:	371c      	adds	r7, #28
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	40010000 	.word	0x40010000
 80095c8:	40010400 	.word	0x40010400

080095cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b087      	sub	sp, #28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	f023 0210 	bic.w	r2, r3, #16
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	021b      	lsls	r3, r3, #8
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	4313      	orrs	r3, r2
 800960e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	f023 0320 	bic.w	r3, r3, #32
 8009616:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	011b      	lsls	r3, r3, #4
 800961e:	697a      	ldr	r2, [r7, #20]
 8009620:	4313      	orrs	r3, r2
 8009622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a22      	ldr	r2, [pc, #136]	@ (80096b0 <TIM_OC2_SetConfig+0xe4>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d003      	beq.n	8009634 <TIM_OC2_SetConfig+0x68>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a21      	ldr	r2, [pc, #132]	@ (80096b4 <TIM_OC2_SetConfig+0xe8>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d10d      	bne.n	8009650 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800963a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	011b      	lsls	r3, r3, #4
 8009642:	697a      	ldr	r2, [r7, #20]
 8009644:	4313      	orrs	r3, r2
 8009646:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800964e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a17      	ldr	r2, [pc, #92]	@ (80096b0 <TIM_OC2_SetConfig+0xe4>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d003      	beq.n	8009660 <TIM_OC2_SetConfig+0x94>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a16      	ldr	r2, [pc, #88]	@ (80096b4 <TIM_OC2_SetConfig+0xe8>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d113      	bne.n	8009688 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009666:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800966e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	695b      	ldr	r3, [r3, #20]
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	4313      	orrs	r3, r2
 800967a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	4313      	orrs	r3, r2
 8009686:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	685a      	ldr	r2, [r3, #4]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	621a      	str	r2, [r3, #32]
}
 80096a2:	bf00      	nop
 80096a4:	371c      	adds	r7, #28
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	40010000 	.word	0x40010000
 80096b4:	40010400 	.word	0x40010400

080096b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b087      	sub	sp, #28
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	69db      	ldr	r3, [r3, #28]
 80096de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f023 0303 	bic.w	r3, r3, #3
 80096ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	021b      	lsls	r3, r3, #8
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	4313      	orrs	r3, r2
 800970c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a21      	ldr	r2, [pc, #132]	@ (8009798 <TIM_OC3_SetConfig+0xe0>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d003      	beq.n	800971e <TIM_OC3_SetConfig+0x66>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a20      	ldr	r2, [pc, #128]	@ (800979c <TIM_OC3_SetConfig+0xe4>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d10d      	bne.n	800973a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009724:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	021b      	lsls	r3, r3, #8
 800972c:	697a      	ldr	r2, [r7, #20]
 800972e:	4313      	orrs	r3, r2
 8009730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a16      	ldr	r2, [pc, #88]	@ (8009798 <TIM_OC3_SetConfig+0xe0>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d003      	beq.n	800974a <TIM_OC3_SetConfig+0x92>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a15      	ldr	r2, [pc, #84]	@ (800979c <TIM_OC3_SetConfig+0xe4>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d113      	bne.n	8009772 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	011b      	lsls	r3, r3, #4
 8009760:	693a      	ldr	r2, [r7, #16]
 8009762:	4313      	orrs	r3, r2
 8009764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	699b      	ldr	r3, [r3, #24]
 800976a:	011b      	lsls	r3, r3, #4
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	4313      	orrs	r3, r2
 8009770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	693a      	ldr	r2, [r7, #16]
 8009776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	685a      	ldr	r2, [r3, #4]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	697a      	ldr	r2, [r7, #20]
 800978a:	621a      	str	r2, [r3, #32]
}
 800978c:	bf00      	nop
 800978e:	371c      	adds	r7, #28
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr
 8009798:	40010000 	.word	0x40010000
 800979c:	40010400 	.word	0x40010400

080097a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b087      	sub	sp, #28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	69db      	ldr	r3, [r3, #28]
 80097c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	021b      	lsls	r3, r3, #8
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80097ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	031b      	lsls	r3, r3, #12
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a12      	ldr	r2, [pc, #72]	@ (8009844 <TIM_OC4_SetConfig+0xa4>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d003      	beq.n	8009808 <TIM_OC4_SetConfig+0x68>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a11      	ldr	r2, [pc, #68]	@ (8009848 <TIM_OC4_SetConfig+0xa8>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d109      	bne.n	800981c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800980e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	695b      	ldr	r3, [r3, #20]
 8009814:	019b      	lsls	r3, r3, #6
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	4313      	orrs	r3, r2
 800981a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	621a      	str	r2, [r3, #32]
}
 8009836:	bf00      	nop
 8009838:	371c      	adds	r7, #28
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	40010000 	.word	0x40010000
 8009848:	40010400 	.word	0x40010400

0800984c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800984c:	b480      	push	{r7}
 800984e:	b087      	sub	sp, #28
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	f003 031f 	and.w	r3, r3, #31
 800985e:	2201      	movs	r2, #1
 8009860:	fa02 f303 	lsl.w	r3, r2, r3
 8009864:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6a1a      	ldr	r2, [r3, #32]
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	43db      	mvns	r3, r3
 800986e:	401a      	ands	r2, r3
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6a1a      	ldr	r2, [r3, #32]
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	f003 031f 	and.w	r3, r3, #31
 800987e:	6879      	ldr	r1, [r7, #4]
 8009880:	fa01 f303 	lsl.w	r3, r1, r3
 8009884:	431a      	orrs	r2, r3
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	621a      	str	r2, [r3, #32]
}
 800988a:	bf00      	nop
 800988c:	371c      	adds	r7, #28
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009896:	b480      	push	{r7}
 8009898:	b085      	sub	sp, #20
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80098a0:	2300      	movs	r3, #0
 80098a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80098a4:	2300      	movs	r3, #0
 80098a6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d029      	beq.n	8009904 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80098bc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80098c0:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80098ca:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80098d0:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80098d6:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80098dc:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80098e2:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80098e8:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80098ee:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                                               Init->ReadBurst          |\
 80098f4:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	601a      	str	r2, [r3, #0]
 8009902:	e034      	b.n	800996e <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009910:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800991a:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 8009920:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	4313      	orrs	r3, r2
 8009926:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009934:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009938:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009942:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8009948:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800994e:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8009954:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800995a:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	4313      	orrs	r3, r2
 8009960:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3714      	adds	r7, #20
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800997c:	b480      	push	{r7}
 800997e:	b087      	sub	sp, #28
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8009988:	2300      	movs	r3, #0
 800998a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800998c:	2300      	movs	r3, #0
 800998e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b01      	cmp	r3, #1
 8009994:	d02e      	beq.n	80099f4 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80099a2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80099b2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	3b01      	subs	r3, #1
 80099ba:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80099bc:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	3b01      	subs	r3, #1
 80099c4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80099c6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	3b01      	subs	r3, #1
 80099ce:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80099d0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	695b      	ldr	r3, [r3, #20]
 80099d6:	3b01      	subs	r3, #1
 80099d8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80099da:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	699b      	ldr	r3, [r3, #24]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80099e4:	4313      	orrs	r3, r2
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	609a      	str	r2, [r3, #8]
 80099f2:	e03b      	b.n	8009a6c <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009a00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009a04:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	695b      	ldr	r3, [r3, #20]
 8009a12:	3b01      	subs	r3, #1
 8009a14:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009a16:	4313      	orrs	r3, r2
 8009a18:	697a      	ldr	r2, [r7, #20]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009a2a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	3b01      	subs	r3, #1
 8009a38:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009a3a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	3b01      	subs	r3, #1
 8009a42:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009a44:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009a4e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	699b      	ldr	r3, [r3, #24]
 8009a54:	3b01      	subs	r3, #1
 8009a56:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	693a      	ldr	r2, [r7, #16]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	697a      	ldr	r2, [r7, #20]
 8009a64:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	371c      	adds	r7, #28
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr

08009a7a <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b086      	sub	sp, #24
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	60f8      	str	r0, [r7, #12]
 8009a82:	60b9      	str	r1, [r7, #8]
 8009a84:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009a96:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009aa0:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8009ab2:	f7fb fb91 	bl	80051d8 <HAL_GetTick>
 8009ab6:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009ab8:	e010      	b.n	8009adc <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac0:	d00c      	beq.n	8009adc <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d007      	beq.n	8009ad8 <FMC_SDRAM_SendCommand+0x5e>
 8009ac8:	f7fb fb86 	bl	80051d8 <HAL_GetTick>
 8009acc:	4602      	mov	r2, r0
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d201      	bcs.n	8009adc <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	e006      	b.n	8009aea <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	f003 0320 	and.w	r3, r3, #32
 8009ae4:	2b20      	cmp	r3, #32
 8009ae6:	d0e8      	beq.n	8009aba <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3718      	adds	r7, #24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009af2:	b480      	push	{r7}
 8009af4:	b083      	sub	sp, #12
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
 8009afa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	695a      	ldr	r2, [r3, #20]
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	005b      	lsls	r3, r3, #1
 8009b04:	431a      	orrs	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <arm_max_f32>:
 8009b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1c:	1e4f      	subs	r7, r1, #1
 8009b1e:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8009b22:	f100 0e04 	add.w	lr, r0, #4
 8009b26:	edd0 7a00 	vldr	s15, [r0]
 8009b2a:	d058      	beq.n	8009bde <arm_max_f32+0xc6>
 8009b2c:	3014      	adds	r0, #20
 8009b2e:	46c4      	mov	ip, r8
 8009b30:	2604      	movs	r6, #4
 8009b32:	2400      	movs	r4, #0
 8009b34:	ed10 6a04 	vldr	s12, [r0, #-16]
 8009b38:	ed50 6a03 	vldr	s13, [r0, #-12]
 8009b3c:	ed10 7a02 	vldr	s14, [r0, #-8]
 8009b40:	ed50 5a01 	vldr	s11, [r0, #-4]
 8009b44:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8009b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b4c:	bfc8      	it	gt
 8009b4e:	eef0 7a46 	vmovgt.f32	s15, s12
 8009b52:	f1a6 0503 	sub.w	r5, r6, #3
 8009b56:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009b5a:	bfc8      	it	gt
 8009b5c:	462c      	movgt	r4, r5
 8009b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b62:	bf48      	it	mi
 8009b64:	eef0 7a66 	vmovmi.f32	s15, s13
 8009b68:	f1a6 0502 	sub.w	r5, r6, #2
 8009b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b70:	bf48      	it	mi
 8009b72:	462c      	movmi	r4, r5
 8009b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b78:	bf48      	it	mi
 8009b7a:	eef0 7a47 	vmovmi.f32	s15, s14
 8009b7e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009b82:	eef4 7ae5 	vcmpe.f32	s15, s11
 8009b86:	bf48      	it	mi
 8009b88:	462c      	movmi	r4, r5
 8009b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b8e:	bf48      	it	mi
 8009b90:	4634      	movmi	r4, r6
 8009b92:	bf48      	it	mi
 8009b94:	eef0 7a65 	vmovmi.f32	s15, s11
 8009b98:	f1bc 0c01 	subs.w	ip, ip, #1
 8009b9c:	f100 0010 	add.w	r0, r0, #16
 8009ba0:	f106 0604 	add.w	r6, r6, #4
 8009ba4:	d1c6      	bne.n	8009b34 <arm_max_f32+0x1c>
 8009ba6:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8009baa:	f017 0003 	ands.w	r0, r7, #3
 8009bae:	d018      	beq.n	8009be2 <arm_max_f32+0xca>
 8009bb0:	1a08      	subs	r0, r1, r0
 8009bb2:	ecbe 7a01 	vldmia	lr!, {s14}
 8009bb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bbe:	bfc8      	it	gt
 8009bc0:	4604      	movgt	r4, r0
 8009bc2:	f100 0001 	add.w	r0, r0, #1
 8009bc6:	bfd8      	it	le
 8009bc8:	eeb0 7a67 	vmovle.f32	s14, s15
 8009bcc:	4281      	cmp	r1, r0
 8009bce:	eef0 7a47 	vmov.f32	s15, s14
 8009bd2:	d1ee      	bne.n	8009bb2 <arm_max_f32+0x9a>
 8009bd4:	ed82 7a00 	vstr	s14, [r2]
 8009bd8:	601c      	str	r4, [r3, #0]
 8009bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bde:	4644      	mov	r4, r8
 8009be0:	e7e3      	b.n	8009baa <arm_max_f32+0x92>
 8009be2:	eeb0 7a67 	vmov.f32	s14, s15
 8009be6:	e7f5      	b.n	8009bd4 <arm_max_f32+0xbc>

08009be8 <arm_cfft_radix8by2_f32>:
 8009be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bec:	ed2d 8b08 	vpush	{d8-d11}
 8009bf0:	4607      	mov	r7, r0
 8009bf2:	4608      	mov	r0, r1
 8009bf4:	f8b7 e000 	ldrh.w	lr, [r7]
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8009bfe:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8009c02:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8009c06:	f000 80b0 	beq.w	8009d6a <arm_cfft_radix8by2_f32+0x182>
 8009c0a:	008b      	lsls	r3, r1, #2
 8009c0c:	3310      	adds	r3, #16
 8009c0e:	18c6      	adds	r6, r0, r3
 8009c10:	3210      	adds	r2, #16
 8009c12:	4443      	add	r3, r8
 8009c14:	f100 0510 	add.w	r5, r0, #16
 8009c18:	f108 0410 	add.w	r4, r8, #16
 8009c1c:	ed54 1a04 	vldr	s3, [r4, #-16]
 8009c20:	ed54 6a03 	vldr	s13, [r4, #-12]
 8009c24:	ed13 4a04 	vldr	s8, [r3, #-16]
 8009c28:	ed53 3a03 	vldr	s7, [r3, #-12]
 8009c2c:	ed53 5a02 	vldr	s11, [r3, #-8]
 8009c30:	ed13 5a01 	vldr	s10, [r3, #-4]
 8009c34:	ed14 0a02 	vldr	s0, [r4, #-8]
 8009c38:	ed54 7a01 	vldr	s15, [r4, #-4]
 8009c3c:	ed16 2a04 	vldr	s4, [r6, #-16]
 8009c40:	ed56 2a03 	vldr	s5, [r6, #-12]
 8009c44:	ed15 6a03 	vldr	s12, [r5, #-12]
 8009c48:	ed15 7a01 	vldr	s14, [r5, #-4]
 8009c4c:	ed15 3a04 	vldr	s6, [r5, #-16]
 8009c50:	ed56 0a02 	vldr	s1, [r6, #-8]
 8009c54:	ed16 1a01 	vldr	s2, [r6, #-4]
 8009c58:	ed55 4a02 	vldr	s9, [r5, #-8]
 8009c5c:	ee73 ba21 	vadd.f32	s23, s6, s3
 8009c60:	ee36 ba26 	vadd.f32	s22, s12, s13
 8009c64:	ee37 aa27 	vadd.f32	s20, s14, s15
 8009c68:	ee72 9a04 	vadd.f32	s19, s4, s8
 8009c6c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8009c70:	ee31 8a05 	vadd.f32	s16, s2, s10
 8009c74:	ee74 aa80 	vadd.f32	s21, s9, s0
 8009c78:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8009c7c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8009c80:	ed05 ba03 	vstr	s22, [r5, #-12]
 8009c84:	ed45 aa02 	vstr	s21, [r5, #-8]
 8009c88:	ed05 aa01 	vstr	s20, [r5, #-4]
 8009c8c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8009c90:	ed46 9a04 	vstr	s19, [r6, #-16]
 8009c94:	ed06 9a03 	vstr	s18, [r6, #-12]
 8009c98:	ed46 8a02 	vstr	s17, [r6, #-8]
 8009c9c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009ca0:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8009ca4:	ed12 6a03 	vldr	s12, [r2, #-12]
 8009ca8:	ed52 2a04 	vldr	s5, [r2, #-16]
 8009cac:	ee33 3a61 	vsub.f32	s6, s6, s3
 8009cb0:	ee34 4a42 	vsub.f32	s8, s8, s4
 8009cb4:	ee26 8a86 	vmul.f32	s16, s13, s12
 8009cb8:	ee24 2a06 	vmul.f32	s4, s8, s12
 8009cbc:	ee63 1a22 	vmul.f32	s3, s6, s5
 8009cc0:	ee24 4a22 	vmul.f32	s8, s8, s5
 8009cc4:	ee23 3a06 	vmul.f32	s6, s6, s12
 8009cc8:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8009ccc:	ee23 6a86 	vmul.f32	s12, s7, s12
 8009cd0:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8009cd4:	ee36 6a04 	vadd.f32	s12, s12, s8
 8009cd8:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8009cdc:	ee72 3a63 	vsub.f32	s7, s4, s7
 8009ce0:	ee71 2a88 	vadd.f32	s5, s3, s16
 8009ce4:	ed44 6a03 	vstr	s13, [r4, #-12]
 8009ce8:	ed44 2a04 	vstr	s5, [r4, #-16]
 8009cec:	ed43 3a04 	vstr	s7, [r3, #-16]
 8009cf0:	ed03 6a03 	vstr	s12, [r3, #-12]
 8009cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cf8:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8009cfc:	ed12 7a01 	vldr	s14, [r2, #-4]
 8009d00:	ed52 5a02 	vldr	s11, [r2, #-8]
 8009d04:	ee35 6a41 	vsub.f32	s12, s10, s2
 8009d08:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8009d0c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8009d10:	ee26 5a87 	vmul.f32	s10, s13, s14
 8009d14:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8009d18:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009d1c:	ee64 4a87 	vmul.f32	s9, s9, s14
 8009d20:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009d24:	ee26 7a07 	vmul.f32	s14, s12, s14
 8009d28:	ee26 6a25 	vmul.f32	s12, s12, s11
 8009d2c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009d30:	ee74 5a23 	vadd.f32	s11, s8, s7
 8009d34:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009d38:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009d3c:	f1be 0e01 	subs.w	lr, lr, #1
 8009d40:	ed44 5a02 	vstr	s11, [r4, #-8]
 8009d44:	f105 0510 	add.w	r5, r5, #16
 8009d48:	ed44 7a01 	vstr	s15, [r4, #-4]
 8009d4c:	f106 0610 	add.w	r6, r6, #16
 8009d50:	ed03 6a02 	vstr	s12, [r3, #-8]
 8009d54:	ed03 7a01 	vstr	s14, [r3, #-4]
 8009d58:	f102 0210 	add.w	r2, r2, #16
 8009d5c:	f104 0410 	add.w	r4, r4, #16
 8009d60:	f103 0310 	add.w	r3, r3, #16
 8009d64:	f47f af5a 	bne.w	8009c1c <arm_cfft_radix8by2_f32+0x34>
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	b28c      	uxth	r4, r1
 8009d6c:	4621      	mov	r1, r4
 8009d6e:	2302      	movs	r3, #2
 8009d70:	f000 fbca 	bl	800a508 <arm_radix8_butterfly_f32>
 8009d74:	ecbd 8b08 	vpop	{d8-d11}
 8009d78:	4621      	mov	r1, r4
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	4640      	mov	r0, r8
 8009d7e:	2302      	movs	r3, #2
 8009d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d84:	f000 bbc0 	b.w	800a508 <arm_radix8_butterfly_f32>

08009d88 <arm_cfft_radix8by4_f32>:
 8009d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8c:	ed2d 8b0a 	vpush	{d8-d12}
 8009d90:	8802      	ldrh	r2, [r0, #0]
 8009d92:	ed91 6a00 	vldr	s12, [r1]
 8009d96:	b08f      	sub	sp, #60	@ 0x3c
 8009d98:	460f      	mov	r7, r1
 8009d9a:	0852      	lsrs	r2, r2, #1
 8009d9c:	6841      	ldr	r1, [r0, #4]
 8009d9e:	900c      	str	r0, [sp, #48]	@ 0x30
 8009da0:	0093      	lsls	r3, r2, #2
 8009da2:	4638      	mov	r0, r7
 8009da4:	4418      	add	r0, r3
 8009da6:	4606      	mov	r6, r0
 8009da8:	9009      	str	r0, [sp, #36]	@ 0x24
 8009daa:	4418      	add	r0, r3
 8009dac:	edd0 6a00 	vldr	s13, [r0]
 8009db0:	ed96 4a00 	vldr	s8, [r6]
 8009db4:	edd6 2a01 	vldr	s5, [r6, #4]
 8009db8:	edd0 7a01 	vldr	s15, [r0, #4]
 8009dbc:	900a      	str	r0, [sp, #40]	@ 0x28
 8009dbe:	ee76 5a26 	vadd.f32	s11, s12, s13
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	4625      	mov	r5, r4
 8009dc6:	441c      	add	r4, r3
 8009dc8:	edd4 4a00 	vldr	s9, [r4]
 8009dcc:	ed97 7a01 	vldr	s14, [r7, #4]
 8009dd0:	ed94 3a01 	vldr	s6, [r4, #4]
 8009dd4:	9401      	str	r4, [sp, #4]
 8009dd6:	ee35 5a84 	vadd.f32	s10, s11, s8
 8009dda:	4630      	mov	r0, r6
 8009ddc:	ee35 5a24 	vadd.f32	s10, s10, s9
 8009de0:	463e      	mov	r6, r7
 8009de2:	ee15 ea10 	vmov	lr, s10
 8009de6:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009dea:	f846 eb08 	str.w	lr, [r6], #8
 8009dee:	ee37 6a27 	vadd.f32	s12, s14, s15
 8009df2:	ed90 5a01 	vldr	s10, [r0, #4]
 8009df6:	9605      	str	r6, [sp, #20]
 8009df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009dfc:	9e01      	ldr	r6, [sp, #4]
 8009dfe:	9707      	str	r7, [sp, #28]
 8009e00:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8009e04:	ed96 2a01 	vldr	s4, [r6, #4]
 8009e08:	ee36 7a05 	vadd.f32	s14, s12, s10
 8009e0c:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8009e10:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8009e14:	ee77 7a84 	vadd.f32	s15, s15, s8
 8009e18:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	46a3      	mov	fp, r4
 8009e20:	ee37 7a02 	vadd.f32	s14, s14, s4
 8009e24:	ee35 5a24 	vadd.f32	s10, s10, s9
 8009e28:	ee14 8a10 	vmov	r8, s8
 8009e2c:	46a4      	mov	ip, r4
 8009e2e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8009e32:	ed87 7a01 	vstr	s14, [r7, #4]
 8009e36:	f84b 8b08 	str.w	r8, [fp], #8
 8009e3a:	f1ac 0704 	sub.w	r7, ip, #4
 8009e3e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8009e42:	f101 0c08 	add.w	ip, r1, #8
 8009e46:	462c      	mov	r4, r5
 8009e48:	f8cd c010 	str.w	ip, [sp, #16]
 8009e4c:	ee15 ca90 	vmov	ip, s11
 8009e50:	ee36 6a62 	vsub.f32	s12, s12, s5
 8009e54:	f844 cb08 	str.w	ip, [r4], #8
 8009e58:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8009e5c:	ee36 6a43 	vsub.f32	s12, s12, s6
 8009e60:	9406      	str	r4, [sp, #24]
 8009e62:	ee76 6a83 	vadd.f32	s13, s13, s6
 8009e66:	f101 0410 	add.w	r4, r1, #16
 8009e6a:	0852      	lsrs	r2, r2, #1
 8009e6c:	9402      	str	r4, [sp, #8]
 8009e6e:	ed85 6a01 	vstr	s12, [r5, #4]
 8009e72:	462c      	mov	r4, r5
 8009e74:	f101 0518 	add.w	r5, r1, #24
 8009e78:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009e7a:	46b2      	mov	sl, r6
 8009e7c:	9503      	str	r5, [sp, #12]
 8009e7e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009e82:	3a02      	subs	r2, #2
 8009e84:	ee16 5a90 	vmov	r5, s13
 8009e88:	46b6      	mov	lr, r6
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	0852      	lsrs	r2, r2, #1
 8009e8e:	f84a 5b08 	str.w	r5, [sl], #8
 8009e92:	f1a0 0604 	sub.w	r6, r0, #4
 8009e96:	edce 7a01 	vstr	s15, [lr, #4]
 8009e9a:	9208      	str	r2, [sp, #32]
 8009e9c:	f000 8130 	beq.w	800a100 <arm_cfft_radix8by4_f32+0x378>
 8009ea0:	4691      	mov	r9, r2
 8009ea2:	9a07      	ldr	r2, [sp, #28]
 8009ea4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009ea8:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8009eac:	3b08      	subs	r3, #8
 8009eae:	f102 0510 	add.w	r5, r2, #16
 8009eb2:	f101 0c20 	add.w	ip, r1, #32
 8009eb6:	f1a4 020c 	sub.w	r2, r4, #12
 8009eba:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8009ebe:	4433      	add	r3, r6
 8009ec0:	3410      	adds	r4, #16
 8009ec2:	4650      	mov	r0, sl
 8009ec4:	4659      	mov	r1, fp
 8009ec6:	ed55 3a02 	vldr	s7, [r5, #-8]
 8009eca:	ed14 5a02 	vldr	s10, [r4, #-8]
 8009ece:	ed91 7a00 	vldr	s14, [r1]
 8009ed2:	edd0 7a00 	vldr	s15, [r0]
 8009ed6:	ed54 5a01 	vldr	s11, [r4, #-4]
 8009eda:	ed15 4a01 	vldr	s8, [r5, #-4]
 8009ede:	edd0 6a01 	vldr	s13, [r0, #4]
 8009ee2:	ed91 6a01 	vldr	s12, [r1, #4]
 8009ee6:	ee33 8a85 	vadd.f32	s16, s7, s10
 8009eea:	ee34 0a25 	vadd.f32	s0, s8, s11
 8009eee:	ee78 4a07 	vadd.f32	s9, s16, s14
 8009ef2:	ee74 5a65 	vsub.f32	s11, s8, s11
 8009ef6:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8009efa:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8009efe:	ed45 4a02 	vstr	s9, [r5, #-8]
 8009f02:	edd1 4a01 	vldr	s9, [r1, #4]
 8009f06:	ed90 4a01 	vldr	s8, [r0, #4]
 8009f0a:	ee70 4a24 	vadd.f32	s9, s0, s9
 8009f0e:	ee75 aa06 	vadd.f32	s21, s10, s12
 8009f12:	ee74 4a84 	vadd.f32	s9, s9, s8
 8009f16:	ee35 aac7 	vsub.f32	s20, s11, s14
 8009f1a:	ed45 4a01 	vstr	s9, [r5, #-4]
 8009f1e:	edd6 1a00 	vldr	s3, [r6]
 8009f22:	edd7 0a00 	vldr	s1, [r7]
 8009f26:	ed92 4a02 	vldr	s8, [r2, #8]
 8009f2a:	edd3 3a02 	vldr	s7, [r3, #8]
 8009f2e:	ed93 2a01 	vldr	s4, [r3, #4]
 8009f32:	ed16 1a01 	vldr	s2, [r6, #-4]
 8009f36:	edd2 2a01 	vldr	s5, [r2, #4]
 8009f3a:	ed57 9a01 	vldr	s19, [r7, #-4]
 8009f3e:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8009f42:	ee39 3a81 	vadd.f32	s6, s19, s2
 8009f46:	ee74 8a84 	vadd.f32	s17, s9, s8
 8009f4a:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8009f4e:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8009f52:	ee7a aae6 	vsub.f32	s21, s21, s13
 8009f56:	ee18 aa90 	vmov	sl, s17
 8009f5a:	f847 a908 	str.w	sl, [r7], #-8
 8009f5e:	edd2 8a01 	vldr	s17, [r2, #4]
 8009f62:	ed93 9a01 	vldr	s18, [r3, #4]
 8009f66:	ee73 8a28 	vadd.f32	s17, s6, s17
 8009f6a:	ee3a aa27 	vadd.f32	s20, s20, s15
 8009f6e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8009f72:	ee74 0a63 	vsub.f32	s1, s8, s7
 8009f76:	edc7 8a01 	vstr	s17, [r7, #4]
 8009f7a:	ed18 ba02 	vldr	s22, [r8, #-8]
 8009f7e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8009f82:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8009f86:	ee6a ba28 	vmul.f32	s23, s20, s17
 8009f8a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8009f8e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8009f92:	ee31 9a20 	vadd.f32	s18, s2, s1
 8009f96:	ee79 9a82 	vadd.f32	s19, s19, s4
 8009f9a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8009f9e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8009fa2:	ee69 baa8 	vmul.f32	s23, s19, s17
 8009fa6:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8009faa:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8009fae:	ee69 8a28 	vmul.f32	s17, s18, s17
 8009fb2:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8009fb6:	ee1c aa10 	vmov	sl, s24
 8009fba:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8009fbe:	f841 ab08 	str.w	sl, [r1], #8
 8009fc2:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8009fc6:	ee3b bacb 	vsub.f32	s22, s23, s22
 8009fca:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8009fce:	ee33 3a62 	vsub.f32	s6, s6, s5
 8009fd2:	ed01 aa01 	vstr	s20, [r1, #-4]
 8009fd6:	edc2 8a01 	vstr	s17, [r2, #4]
 8009fda:	ed82 ba02 	vstr	s22, [r2, #8]
 8009fde:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8009fe2:	ee74 3a63 	vsub.f32	s7, s8, s7
 8009fe6:	ee38 8a47 	vsub.f32	s16, s16, s14
 8009fea:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8009fee:	ee30 0a46 	vsub.f32	s0, s0, s12
 8009ff2:	ee33 3a42 	vsub.f32	s6, s6, s4
 8009ff6:	ee38 8a67 	vsub.f32	s16, s16, s15
 8009ffa:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009ffe:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800a002:	ee63 8a04 	vmul.f32	s17, s6, s8
 800a006:	ee28 aa24 	vmul.f32	s20, s16, s9
 800a00a:	ee60 9a04 	vmul.f32	s19, s0, s8
 800a00e:	ee28 8a04 	vmul.f32	s16, s16, s8
 800a012:	ee20 0a24 	vmul.f32	s0, s0, s9
 800a016:	ee63 3a84 	vmul.f32	s7, s7, s8
 800a01a:	ee39 4a68 	vsub.f32	s8, s18, s17
 800a01e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800a022:	ee14 aa10 	vmov	sl, s8
 800a026:	ee30 0a48 	vsub.f32	s0, s0, s16
 800a02a:	ee63 4a24 	vmul.f32	s9, s6, s9
 800a02e:	ed44 9a02 	vstr	s19, [r4, #-8]
 800a032:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800a036:	ed04 0a01 	vstr	s0, [r4, #-4]
 800a03a:	f846 a908 	str.w	sl, [r6], #-8
 800a03e:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a042:	ee35 7a87 	vadd.f32	s14, s11, s14
 800a046:	edc6 3a01 	vstr	s7, [r6, #4]
 800a04a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800a04e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a052:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 800a056:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 800a05a:	ee67 5a86 	vmul.f32	s11, s15, s12
 800a05e:	ee26 5a87 	vmul.f32	s10, s13, s14
 800a062:	ee72 2a62 	vsub.f32	s5, s4, s5
 800a066:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800a06a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800a06e:	ee75 5a25 	vadd.f32	s11, s10, s11
 800a072:	ee62 0a86 	vmul.f32	s1, s5, s12
 800a076:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a07a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a07e:	ee21 6a06 	vmul.f32	s12, s2, s12
 800a082:	ee62 2a87 	vmul.f32	s5, s5, s14
 800a086:	ee21 1a07 	vmul.f32	s2, s2, s14
 800a08a:	ee15 aa90 	vmov	sl, s11
 800a08e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a092:	f840 ab08 	str.w	sl, [r0], #8
 800a096:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800a09a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800a09e:	f1b9 0901 	subs.w	r9, r9, #1
 800a0a2:	ed40 7a01 	vstr	s15, [r0, #-4]
 800a0a6:	f105 0508 	add.w	r5, r5, #8
 800a0aa:	ed83 1a02 	vstr	s2, [r3, #8]
 800a0ae:	edc3 2a01 	vstr	s5, [r3, #4]
 800a0b2:	f108 0808 	add.w	r8, r8, #8
 800a0b6:	f1a2 0208 	sub.w	r2, r2, #8
 800a0ba:	f10c 0c10 	add.w	ip, ip, #16
 800a0be:	f104 0408 	add.w	r4, r4, #8
 800a0c2:	f10e 0e18 	add.w	lr, lr, #24
 800a0c6:	f1a3 0308 	sub.w	r3, r3, #8
 800a0ca:	f47f aefc 	bne.w	8009ec6 <arm_cfft_radix8by4_f32+0x13e>
 800a0ce:	9908      	ldr	r1, [sp, #32]
 800a0d0:	9802      	ldr	r0, [sp, #8]
 800a0d2:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 800a0d6:	00cb      	lsls	r3, r1, #3
 800a0d8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a0dc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a0e0:	9102      	str	r1, [sp, #8]
 800a0e2:	9905      	ldr	r1, [sp, #20]
 800a0e4:	4419      	add	r1, r3
 800a0e6:	9105      	str	r1, [sp, #20]
 800a0e8:	9904      	ldr	r1, [sp, #16]
 800a0ea:	4419      	add	r1, r3
 800a0ec:	9104      	str	r1, [sp, #16]
 800a0ee:	9906      	ldr	r1, [sp, #24]
 800a0f0:	449b      	add	fp, r3
 800a0f2:	4419      	add	r1, r3
 800a0f4:	449a      	add	sl, r3
 800a0f6:	9b03      	ldr	r3, [sp, #12]
 800a0f8:	9106      	str	r1, [sp, #24]
 800a0fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0fe:	9303      	str	r3, [sp, #12]
 800a100:	9a05      	ldr	r2, [sp, #20]
 800a102:	9806      	ldr	r0, [sp, #24]
 800a104:	ed92 4a00 	vldr	s8, [r2]
 800a108:	ed90 7a00 	vldr	s14, [r0]
 800a10c:	ed9b 3a00 	vldr	s6, [fp]
 800a110:	edda 3a00 	vldr	s7, [sl]
 800a114:	edd2 4a01 	vldr	s9, [r2, #4]
 800a118:	edd0 6a01 	vldr	s13, [r0, #4]
 800a11c:	ed9a 2a01 	vldr	s4, [sl, #4]
 800a120:	eddb 7a01 	vldr	s15, [fp, #4]
 800a124:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 800a128:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a12a:	ee34 6a07 	vadd.f32	s12, s8, s14
 800a12e:	ee74 5aa6 	vadd.f32	s11, s9, s13
 800a132:	ee36 5a03 	vadd.f32	s10, s12, s6
 800a136:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800a13a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a13e:	ee34 7a47 	vsub.f32	s14, s8, s14
 800a142:	ed82 5a00 	vstr	s10, [r2]
 800a146:	ed9b 5a01 	vldr	s10, [fp, #4]
 800a14a:	edda 4a01 	vldr	s9, [sl, #4]
 800a14e:	ee35 5a85 	vadd.f32	s10, s11, s10
 800a152:	ee37 4a27 	vadd.f32	s8, s14, s15
 800a156:	ee35 5a24 	vadd.f32	s10, s10, s9
 800a15a:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800a15e:	ed82 5a01 	vstr	s10, [r2, #4]
 800a162:	9a04      	ldr	r2, [sp, #16]
 800a164:	ee34 5aa3 	vadd.f32	s10, s9, s7
 800a168:	edd2 1a00 	vldr	s3, [r2]
 800a16c:	edd2 2a01 	vldr	s5, [r2, #4]
 800a170:	9a02      	ldr	r2, [sp, #8]
 800a172:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a176:	ee36 6a43 	vsub.f32	s12, s12, s6
 800a17a:	ee64 4a21 	vmul.f32	s9, s8, s3
 800a17e:	ee24 4a22 	vmul.f32	s8, s8, s5
 800a182:	ee65 2a22 	vmul.f32	s5, s10, s5
 800a186:	ee25 5a21 	vmul.f32	s10, s10, s3
 800a18a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800a18e:	ee35 5a44 	vsub.f32	s10, s10, s8
 800a192:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a196:	edcb 2a00 	vstr	s5, [fp]
 800a19a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800a19e:	ed92 4a01 	vldr	s8, [r2, #4]
 800a1a2:	ed92 5a00 	vldr	s10, [r2]
 800a1a6:	9a03      	ldr	r2, [sp, #12]
 800a1a8:	ee36 6a63 	vsub.f32	s12, s12, s7
 800a1ac:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800a1b0:	ee66 4a05 	vmul.f32	s9, s12, s10
 800a1b4:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a1b8:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a1bc:	ee65 5a84 	vmul.f32	s11, s11, s8
 800a1c0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a1c4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800a1c8:	ee76 6a83 	vadd.f32	s13, s13, s6
 800a1cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a1d0:	ed80 6a01 	vstr	s12, [r0, #4]
 800a1d4:	edc0 5a00 	vstr	s11, [r0]
 800a1d8:	edd2 5a01 	vldr	s11, [r2, #4]
 800a1dc:	9807      	ldr	r0, [sp, #28]
 800a1de:	ee77 7a02 	vadd.f32	s15, s14, s4
 800a1e2:	ee36 7ae3 	vsub.f32	s14, s13, s7
 800a1e6:	edd2 6a00 	vldr	s13, [r2]
 800a1ea:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800a1ee:	ee67 6a26 	vmul.f32	s13, s14, s13
 800a1f2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a1f6:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a1fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a1fe:	ee36 7a07 	vadd.f32	s14, s12, s14
 800a202:	edca 7a01 	vstr	s15, [sl, #4]
 800a206:	ed8a 7a00 	vstr	s14, [sl]
 800a20a:	6872      	ldr	r2, [r6, #4]
 800a20c:	4621      	mov	r1, r4
 800a20e:	2304      	movs	r3, #4
 800a210:	f000 f97a 	bl	800a508 <arm_radix8_butterfly_f32>
 800a214:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a216:	6872      	ldr	r2, [r6, #4]
 800a218:	4621      	mov	r1, r4
 800a21a:	2304      	movs	r3, #4
 800a21c:	f000 f974 	bl	800a508 <arm_radix8_butterfly_f32>
 800a220:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a222:	6872      	ldr	r2, [r6, #4]
 800a224:	4621      	mov	r1, r4
 800a226:	2304      	movs	r3, #4
 800a228:	f000 f96e 	bl	800a508 <arm_radix8_butterfly_f32>
 800a22c:	6872      	ldr	r2, [r6, #4]
 800a22e:	9801      	ldr	r0, [sp, #4]
 800a230:	4621      	mov	r1, r4
 800a232:	2304      	movs	r3, #4
 800a234:	b00f      	add	sp, #60	@ 0x3c
 800a236:	ecbd 8b0a 	vpop	{d8-d12}
 800a23a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23e:	f000 b963 	b.w	800a508 <arm_radix8_butterfly_f32>
 800a242:	bf00      	nop

0800a244 <arm_cfft_f32>:
 800a244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a248:	2a01      	cmp	r2, #1
 800a24a:	4606      	mov	r6, r0
 800a24c:	4617      	mov	r7, r2
 800a24e:	460c      	mov	r4, r1
 800a250:	4698      	mov	r8, r3
 800a252:	8805      	ldrh	r5, [r0, #0]
 800a254:	d054      	beq.n	800a300 <arm_cfft_f32+0xbc>
 800a256:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800a25a:	d04c      	beq.n	800a2f6 <arm_cfft_f32+0xb2>
 800a25c:	d916      	bls.n	800a28c <arm_cfft_f32+0x48>
 800a25e:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800a262:	d01a      	beq.n	800a29a <arm_cfft_f32+0x56>
 800a264:	d95c      	bls.n	800a320 <arm_cfft_f32+0xdc>
 800a266:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800a26a:	d044      	beq.n	800a2f6 <arm_cfft_f32+0xb2>
 800a26c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800a270:	d105      	bne.n	800a27e <arm_cfft_f32+0x3a>
 800a272:	2301      	movs	r3, #1
 800a274:	6872      	ldr	r2, [r6, #4]
 800a276:	4629      	mov	r1, r5
 800a278:	4620      	mov	r0, r4
 800a27a:	f000 f945 	bl	800a508 <arm_radix8_butterfly_f32>
 800a27e:	f1b8 0f00 	cmp.w	r8, #0
 800a282:	d111      	bne.n	800a2a8 <arm_cfft_f32+0x64>
 800a284:	2f01      	cmp	r7, #1
 800a286:	d016      	beq.n	800a2b6 <arm_cfft_f32+0x72>
 800a288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a28c:	2d20      	cmp	r5, #32
 800a28e:	d032      	beq.n	800a2f6 <arm_cfft_f32+0xb2>
 800a290:	d94a      	bls.n	800a328 <arm_cfft_f32+0xe4>
 800a292:	2d40      	cmp	r5, #64	@ 0x40
 800a294:	d0ed      	beq.n	800a272 <arm_cfft_f32+0x2e>
 800a296:	2d80      	cmp	r5, #128	@ 0x80
 800a298:	d1f1      	bne.n	800a27e <arm_cfft_f32+0x3a>
 800a29a:	4621      	mov	r1, r4
 800a29c:	4630      	mov	r0, r6
 800a29e:	f7ff fca3 	bl	8009be8 <arm_cfft_radix8by2_f32>
 800a2a2:	f1b8 0f00 	cmp.w	r8, #0
 800a2a6:	d0ed      	beq.n	800a284 <arm_cfft_f32+0x40>
 800a2a8:	68b2      	ldr	r2, [r6, #8]
 800a2aa:	89b1      	ldrh	r1, [r6, #12]
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	f7f5 ff9f 	bl	80001f0 <arm_bitreversal_32>
 800a2b2:	2f01      	cmp	r7, #1
 800a2b4:	d1e8      	bne.n	800a288 <arm_cfft_f32+0x44>
 800a2b6:	ee07 5a90 	vmov	s15, r5
 800a2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a2c6:	2d00      	cmp	r5, #0
 800a2c8:	d0de      	beq.n	800a288 <arm_cfft_f32+0x44>
 800a2ca:	f104 0108 	add.w	r1, r4, #8
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	429d      	cmp	r5, r3
 800a2d4:	f101 0108 	add.w	r1, r1, #8
 800a2d8:	ed11 7a04 	vldr	s14, [r1, #-16]
 800a2dc:	ed51 7a03 	vldr	s15, [r1, #-12]
 800a2e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a2e4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a2e8:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a2ec:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a2f0:	d1ee      	bne.n	800a2d0 <arm_cfft_f32+0x8c>
 800a2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	f7ff fd45 	bl	8009d88 <arm_cfft_radix8by4_f32>
 800a2fe:	e7be      	b.n	800a27e <arm_cfft_f32+0x3a>
 800a300:	b1ad      	cbz	r5, 800a32e <arm_cfft_f32+0xea>
 800a302:	f101 030c 	add.w	r3, r1, #12
 800a306:	2200      	movs	r2, #0
 800a308:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a30c:	3201      	adds	r2, #1
 800a30e:	eef1 7a67 	vneg.f32	s15, s15
 800a312:	4295      	cmp	r5, r2
 800a314:	ed43 7a02 	vstr	s15, [r3, #-8]
 800a318:	f103 0308 	add.w	r3, r3, #8
 800a31c:	d1f4      	bne.n	800a308 <arm_cfft_f32+0xc4>
 800a31e:	e79a      	b.n	800a256 <arm_cfft_f32+0x12>
 800a320:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800a324:	d0a5      	beq.n	800a272 <arm_cfft_f32+0x2e>
 800a326:	e7aa      	b.n	800a27e <arm_cfft_f32+0x3a>
 800a328:	2d10      	cmp	r5, #16
 800a32a:	d0b6      	beq.n	800a29a <arm_cfft_f32+0x56>
 800a32c:	e7a7      	b.n	800a27e <arm_cfft_f32+0x3a>
 800a32e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800a332:	d894      	bhi.n	800a25e <arm_cfft_f32+0x1a>
 800a334:	e7aa      	b.n	800a28c <arm_cfft_f32+0x48>
 800a336:	bf00      	nop

0800a338 <arm_cmplx_mag_f32>:
 800a338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a33c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800a340:	b084      	sub	sp, #16
 800a342:	d07f      	beq.n	800a444 <arm_cmplx_mag_f32+0x10c>
 800a344:	2700      	movs	r7, #0
 800a346:	f100 0420 	add.w	r4, r0, #32
 800a34a:	f101 0510 	add.w	r5, r1, #16
 800a34e:	4646      	mov	r6, r8
 800a350:	e05a      	b.n	800a408 <arm_cmplx_mag_f32+0xd0>
 800a352:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a356:	eeb4 0a40 	vcmp.f32	s0, s0
 800a35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a35e:	f040 80a4 	bne.w	800a4aa <arm_cmplx_mag_f32+0x172>
 800a362:	ed05 0a04 	vstr	s0, [r5, #-16]
 800a366:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800a36a:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 800a36e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a372:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a376:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a37a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a382:	f2c0 808f 	blt.w	800a4a4 <arm_cmplx_mag_f32+0x16c>
 800a386:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a38a:	eeb4 0a40 	vcmp.f32	s0, s0
 800a38e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a392:	f040 80af 	bne.w	800a4f4 <arm_cmplx_mag_f32+0x1bc>
 800a396:	ed05 0a03 	vstr	s0, [r5, #-12]
 800a39a:	ed54 7a04 	vldr	s15, [r4, #-16]
 800a39e:	ed14 0a03 	vldr	s0, [r4, #-12]
 800a3a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a3a6:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a3aa:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a3ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3b6:	db72      	blt.n	800a49e <arm_cmplx_mag_f32+0x166>
 800a3b8:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a3bc:	eeb4 0a40 	vcmp.f32	s0, s0
 800a3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3c4:	f040 808c 	bne.w	800a4e0 <arm_cmplx_mag_f32+0x1a8>
 800a3c8:	ed05 0a02 	vstr	s0, [r5, #-8]
 800a3cc:	ed54 7a02 	vldr	s15, [r4, #-8]
 800a3d0:	ed14 0a01 	vldr	s0, [r4, #-4]
 800a3d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a3d8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a3dc:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a3e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e8:	db20      	blt.n	800a42c <arm_cmplx_mag_f32+0xf4>
 800a3ea:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a3ee:	eeb4 0a40 	vcmp.f32	s0, s0
 800a3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3f6:	d169      	bne.n	800a4cc <arm_cmplx_mag_f32+0x194>
 800a3f8:	3e01      	subs	r6, #1
 800a3fa:	ed05 0a01 	vstr	s0, [r5, #-4]
 800a3fe:	f104 0420 	add.w	r4, r4, #32
 800a402:	f105 0510 	add.w	r5, r5, #16
 800a406:	d019      	beq.n	800a43c <arm_cmplx_mag_f32+0x104>
 800a408:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 800a40c:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 800a410:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a414:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a418:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a41c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a424:	da95      	bge.n	800a352 <arm_cmplx_mag_f32+0x1a>
 800a426:	f845 7c10 	str.w	r7, [r5, #-16]
 800a42a:	e79c      	b.n	800a366 <arm_cmplx_mag_f32+0x2e>
 800a42c:	3e01      	subs	r6, #1
 800a42e:	f845 7c04 	str.w	r7, [r5, #-4]
 800a432:	f104 0420 	add.w	r4, r4, #32
 800a436:	f105 0510 	add.w	r5, r5, #16
 800a43a:	d1e5      	bne.n	800a408 <arm_cmplx_mag_f32+0xd0>
 800a43c:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800a440:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800a444:	f012 0503 	ands.w	r5, r2, #3
 800a448:	d026      	beq.n	800a498 <arm_cmplx_mag_f32+0x160>
 800a44a:	2600      	movs	r6, #0
 800a44c:	f100 0408 	add.w	r4, r0, #8
 800a450:	e00c      	b.n	800a46c <arm_cmplx_mag_f32+0x134>
 800a452:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a456:	eeb4 0a40 	vcmp.f32	s0, s0
 800a45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a45e:	d12e      	bne.n	800a4be <arm_cmplx_mag_f32+0x186>
 800a460:	3d01      	subs	r5, #1
 800a462:	ed01 0a01 	vstr	s0, [r1, #-4]
 800a466:	f104 0408 	add.w	r4, r4, #8
 800a46a:	d015      	beq.n	800a498 <arm_cmplx_mag_f32+0x160>
 800a46c:	ed54 7a02 	vldr	s15, [r4, #-8]
 800a470:	ed14 0a01 	vldr	s0, [r4, #-4]
 800a474:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a478:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a47c:	3104      	adds	r1, #4
 800a47e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a482:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a48a:	dae2      	bge.n	800a452 <arm_cmplx_mag_f32+0x11a>
 800a48c:	3d01      	subs	r5, #1
 800a48e:	f841 6c04 	str.w	r6, [r1, #-4]
 800a492:	f104 0408 	add.w	r4, r4, #8
 800a496:	d1e9      	bne.n	800a46c <arm_cmplx_mag_f32+0x134>
 800a498:	b004      	add	sp, #16
 800a49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a49e:	f845 7c08 	str.w	r7, [r5, #-8]
 800a4a2:	e793      	b.n	800a3cc <arm_cmplx_mag_f32+0x94>
 800a4a4:	f845 7c0c 	str.w	r7, [r5, #-12]
 800a4a8:	e777      	b.n	800a39a <arm_cmplx_mag_f32+0x62>
 800a4aa:	eeb0 0a67 	vmov.f32	s0, s15
 800a4ae:	9203      	str	r2, [sp, #12]
 800a4b0:	9102      	str	r1, [sp, #8]
 800a4b2:	9001      	str	r0, [sp, #4]
 800a4b4:	f000 ffd0 	bl	800b458 <sqrtf>
 800a4b8:	a801      	add	r0, sp, #4
 800a4ba:	c807      	ldmia	r0, {r0, r1, r2}
 800a4bc:	e751      	b.n	800a362 <arm_cmplx_mag_f32+0x2a>
 800a4be:	eeb0 0a67 	vmov.f32	s0, s15
 800a4c2:	9101      	str	r1, [sp, #4]
 800a4c4:	f000 ffc8 	bl	800b458 <sqrtf>
 800a4c8:	9901      	ldr	r1, [sp, #4]
 800a4ca:	e7c9      	b.n	800a460 <arm_cmplx_mag_f32+0x128>
 800a4cc:	eeb0 0a67 	vmov.f32	s0, s15
 800a4d0:	9203      	str	r2, [sp, #12]
 800a4d2:	9102      	str	r1, [sp, #8]
 800a4d4:	9001      	str	r0, [sp, #4]
 800a4d6:	f000 ffbf 	bl	800b458 <sqrtf>
 800a4da:	a801      	add	r0, sp, #4
 800a4dc:	c807      	ldmia	r0, {r0, r1, r2}
 800a4de:	e78b      	b.n	800a3f8 <arm_cmplx_mag_f32+0xc0>
 800a4e0:	eeb0 0a67 	vmov.f32	s0, s15
 800a4e4:	9203      	str	r2, [sp, #12]
 800a4e6:	9102      	str	r1, [sp, #8]
 800a4e8:	9001      	str	r0, [sp, #4]
 800a4ea:	f000 ffb5 	bl	800b458 <sqrtf>
 800a4ee:	a801      	add	r0, sp, #4
 800a4f0:	c807      	ldmia	r0, {r0, r1, r2}
 800a4f2:	e769      	b.n	800a3c8 <arm_cmplx_mag_f32+0x90>
 800a4f4:	eeb0 0a67 	vmov.f32	s0, s15
 800a4f8:	9203      	str	r2, [sp, #12]
 800a4fa:	9102      	str	r1, [sp, #8]
 800a4fc:	9001      	str	r0, [sp, #4]
 800a4fe:	f000 ffab 	bl	800b458 <sqrtf>
 800a502:	a801      	add	r0, sp, #4
 800a504:	c807      	ldmia	r0, {r0, r1, r2}
 800a506:	e746      	b.n	800a396 <arm_cmplx_mag_f32+0x5e>

0800a508 <arm_radix8_butterfly_f32>:
 800a508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a50c:	ed2d 8b10 	vpush	{d8-d15}
 800a510:	461c      	mov	r4, r3
 800a512:	b09d      	sub	sp, #116	@ 0x74
 800a514:	4603      	mov	r3, r0
 800a516:	3304      	adds	r3, #4
 800a518:	ed9f bac4 	vldr	s22, [pc, #784]	@ 800a82c <arm_radix8_butterfly_f32+0x324>
 800a51c:	9019      	str	r0, [sp, #100]	@ 0x64
 800a51e:	921a      	str	r2, [sp, #104]	@ 0x68
 800a520:	468b      	mov	fp, r1
 800a522:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a524:	468a      	mov	sl, r1
 800a526:	46a1      	mov	r9, r4
 800a528:	4607      	mov	r7, r0
 800a52a:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800a52e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800a532:	eb03 0508 	add.w	r5, r3, r8
 800a536:	195c      	adds	r4, r3, r5
 800a538:	00de      	lsls	r6, r3, #3
 800a53a:	191a      	adds	r2, r3, r4
 800a53c:	9600      	str	r6, [sp, #0]
 800a53e:	1898      	adds	r0, r3, r2
 800a540:	4619      	mov	r1, r3
 800a542:	9e00      	ldr	r6, [sp, #0]
 800a544:	9311      	str	r3, [sp, #68]	@ 0x44
 800a546:	4401      	add	r1, r0
 800a548:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800a54c:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800a550:	19be      	adds	r6, r7, r6
 800a552:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800a556:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800a55a:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 800a55e:	9f00      	ldr	r7, [sp, #0]
 800a560:	011b      	lsls	r3, r3, #4
 800a562:	eb06 0e07 	add.w	lr, r6, r7
 800a566:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 800a568:	9302      	str	r3, [sp, #8]
 800a56a:	3204      	adds	r2, #4
 800a56c:	3104      	adds	r1, #4
 800a56e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a572:	f04f 0c00 	mov.w	ip, #0
 800a576:	edde 7a00 	vldr	s15, [lr]
 800a57a:	edd6 6a00 	vldr	s13, [r6]
 800a57e:	ed95 2a00 	vldr	s4, [r5]
 800a582:	ed17 aa01 	vldr	s20, [r7, #-4]
 800a586:	edd4 4a00 	vldr	s9, [r4]
 800a58a:	ed90 5a00 	vldr	s10, [r0]
 800a58e:	ed12 7a01 	vldr	s14, [r2, #-4]
 800a592:	ed51 0a01 	vldr	s1, [r1, #-4]
 800a596:	ee77 8a85 	vadd.f32	s17, s15, s10
 800a59a:	ee76 3a87 	vadd.f32	s7, s13, s14
 800a59e:	ee32 4a20 	vadd.f32	s8, s4, s1
 800a5a2:	ee3a 3a24 	vadd.f32	s6, s20, s9
 800a5a6:	ee33 6a84 	vadd.f32	s12, s7, s8
 800a5aa:	ee73 5a28 	vadd.f32	s11, s6, s17
 800a5ae:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a5b2:	ee75 6a86 	vadd.f32	s13, s11, s12
 800a5b6:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800a5ba:	ed47 6a01 	vstr	s13, [r7, #-4]
 800a5be:	edc4 5a00 	vstr	s11, [r4]
 800a5c2:	ed92 9a00 	vldr	s18, [r2]
 800a5c6:	ed95 1a01 	vldr	s2, [r5, #4]
 800a5ca:	edd6 5a01 	vldr	s11, [r6, #4]
 800a5ce:	ed91 6a00 	vldr	s12, [r1]
 800a5d2:	edd7 2a00 	vldr	s5, [r7]
 800a5d6:	edd4 1a01 	vldr	s3, [r4, #4]
 800a5da:	edde 6a01 	vldr	s13, [lr, #4]
 800a5de:	edd0 9a01 	vldr	s19, [r0, #4]
 800a5e2:	ee72 0a60 	vsub.f32	s1, s4, s1
 800a5e6:	ee71 aa46 	vsub.f32	s21, s2, s12
 800a5ea:	ee35 2ac9 	vsub.f32	s4, s11, s18
 800a5ee:	ee37 0a60 	vsub.f32	s0, s14, s1
 800a5f2:	ee32 8a2a 	vadd.f32	s16, s4, s21
 800a5f6:	ee37 7a20 	vadd.f32	s14, s14, s1
 800a5fa:	ee32 2a6a 	vsub.f32	s4, s4, s21
 800a5fe:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800a602:	ee75 5a89 	vadd.f32	s11, s11, s18
 800a606:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800a60a:	ee7a 4a64 	vsub.f32	s9, s20, s9
 800a60e:	ee31 6a06 	vadd.f32	s12, s2, s12
 800a612:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800a616:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800a61a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800a61e:	ee72 1ae1 	vsub.f32	s3, s5, s3
 800a622:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800a626:	ee62 2a0b 	vmul.f32	s5, s4, s22
 800a62a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800a62e:	ee33 3a68 	vsub.f32	s6, s6, s17
 800a632:	ee36 0a88 	vadd.f32	s0, s13, s16
 800a636:	ee75 8a86 	vadd.f32	s17, s11, s12
 800a63a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800a63e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800a642:	ee74 6ae0 	vsub.f32	s13, s9, s1
 800a646:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800a64a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800a64e:	ee75 4a27 	vadd.f32	s9, s10, s15
 800a652:	ee71 5a49 	vsub.f32	s11, s2, s18
 800a656:	ee31 2a09 	vadd.f32	s4, s2, s18
 800a65a:	ee75 7a67 	vsub.f32	s15, s10, s15
 800a65e:	ee31 1aa2 	vadd.f32	s2, s3, s5
 800a662:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800a666:	ee73 0a06 	vadd.f32	s1, s6, s12
 800a66a:	ee75 1ac4 	vsub.f32	s3, s11, s8
 800a66e:	ee36 5a87 	vadd.f32	s10, s13, s14
 800a672:	ee32 8a28 	vadd.f32	s16, s4, s17
 800a676:	ee33 6a46 	vsub.f32	s12, s6, s12
 800a67a:	ee34 4a25 	vadd.f32	s8, s8, s11
 800a67e:	ee33 3a80 	vadd.f32	s6, s7, s0
 800a682:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a686:	ee71 5a64 	vsub.f32	s11, s2, s9
 800a68a:	ee72 6ae7 	vsub.f32	s13, s5, s15
 800a68e:	ee32 2a68 	vsub.f32	s4, s4, s17
 800a692:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800a696:	ee74 4a81 	vadd.f32	s9, s9, s2
 800a69a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800a69e:	44dc      	add	ip, fp
 800a6a0:	45e2      	cmp	sl, ip
 800a6a2:	ed87 8a00 	vstr	s16, [r7]
 800a6a6:	ed84 2a01 	vstr	s4, [r4, #4]
 800a6aa:	441f      	add	r7, r3
 800a6ac:	edce 0a00 	vstr	s1, [lr]
 800a6b0:	441c      	add	r4, r3
 800a6b2:	ed80 6a00 	vstr	s12, [r0]
 800a6b6:	edce 1a01 	vstr	s3, [lr, #4]
 800a6ba:	ed80 4a01 	vstr	s8, [r0, #4]
 800a6be:	449e      	add	lr, r3
 800a6c0:	ed86 3a00 	vstr	s6, [r6]
 800a6c4:	4418      	add	r0, r3
 800a6c6:	ed41 3a01 	vstr	s7, [r1, #-4]
 800a6ca:	ed02 5a01 	vstr	s10, [r2, #-4]
 800a6ce:	ed85 7a00 	vstr	s14, [r5]
 800a6d2:	edc6 5a01 	vstr	s11, [r6, #4]
 800a6d6:	edc1 4a00 	vstr	s9, [r1]
 800a6da:	441e      	add	r6, r3
 800a6dc:	edc2 6a00 	vstr	s13, [r2]
 800a6e0:	4419      	add	r1, r3
 800a6e2:	edc5 7a01 	vstr	s15, [r5, #4]
 800a6e6:	441a      	add	r2, r3
 800a6e8:	441d      	add	r5, r3
 800a6ea:	f63f af44 	bhi.w	800a576 <arm_radix8_butterfly_f32+0x6e>
 800a6ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a6f0:	2a07      	cmp	r2, #7
 800a6f2:	f240 81f5 	bls.w	800aae0 <arm_radix8_butterfly_f32+0x5d8>
 800a6f6:	f108 0101 	add.w	r1, r8, #1
 800a6fa:	188f      	adds	r7, r1, r2
 800a6fc:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 800a700:	19d6      	adds	r6, r2, r7
 800a702:	eb08 0c09 	add.w	ip, r8, r9
 800a706:	1994      	adds	r4, r2, r6
 800a708:	eb0c 0e09 	add.w	lr, ip, r9
 800a70c:	4610      	mov	r0, r2
 800a70e:	9701      	str	r7, [sp, #4]
 800a710:	4420      	add	r0, r4
 800a712:	eb0e 0709 	add.w	r7, lr, r9
 800a716:	1815      	adds	r5, r2, r0
 800a718:	eb07 0209 	add.w	r2, r7, r9
 800a71c:	9203      	str	r2, [sp, #12]
 800a71e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a720:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a724:	9117      	str	r1, [sp, #92]	@ 0x5c
 800a726:	440a      	add	r2, r1
 800a728:	9900      	ldr	r1, [sp, #0]
 800a72a:	3108      	adds	r1, #8
 800a72c:	9100      	str	r1, [sp, #0]
 800a72e:	9902      	ldr	r1, [sp, #8]
 800a730:	3108      	adds	r1, #8
 800a732:	9102      	str	r1, [sp, #8]
 800a734:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800a736:	00ff      	lsls	r7, r7, #3
 800a738:	9715      	str	r7, [sp, #84]	@ 0x54
 800a73a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800a73e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a742:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800a746:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800a748:	9903      	ldr	r1, [sp, #12]
 800a74a:	19d7      	adds	r7, r2, r7
 800a74c:	00c9      	lsls	r1, r1, #3
 800a74e:	9114      	str	r1, [sp, #80]	@ 0x50
 800a750:	9710      	str	r7, [sp, #64]	@ 0x40
 800a752:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800a754:	9f00      	ldr	r7, [sp, #0]
 800a756:	19cf      	adds	r7, r1, r7
 800a758:	970d      	str	r7, [sp, #52]	@ 0x34
 800a75a:	9f02      	ldr	r7, [sp, #8]
 800a75c:	19cf      	adds	r7, r1, r7
 800a75e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800a762:	970c      	str	r7, [sp, #48]	@ 0x30
 800a764:	9f01      	ldr	r7, [sp, #4]
 800a766:	f8cd e058 	str.w	lr, [sp, #88]	@ 0x58
 800a76a:	3504      	adds	r5, #4
 800a76c:	3004      	adds	r0, #4
 800a76e:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 800a772:	9508      	str	r5, [sp, #32]
 800a774:	9009      	str	r0, [sp, #36]	@ 0x24
 800a776:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 800a778:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800a77a:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 800a77e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800a782:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 800a786:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a788:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
 800a78c:	1945      	adds	r5, r0, r5
 800a78e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800a792:	460f      	mov	r7, r1
 800a794:	3404      	adds	r4, #4
 800a796:	4641      	mov	r1, r8
 800a798:	1841      	adds	r1, r0, r1
 800a79a:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
 800a79e:	940a      	str	r4, [sp, #40]	@ 0x28
 800a7a0:	eb00 0c06 	add.w	ip, r0, r6
 800a7a4:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 800a7a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a7aa:	9506      	str	r5, [sp, #24]
 800a7ac:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800a7ae:	9105      	str	r1, [sp, #20]
 800a7b0:	4639      	mov	r1, r7
 800a7b2:	1905      	adds	r5, r0, r4
 800a7b4:	3108      	adds	r1, #8
 800a7b6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800a7b8:	9507      	str	r5, [sp, #28]
 800a7ba:	910f      	str	r1, [sp, #60]	@ 0x3c
 800a7bc:	ea4f 1509 	mov.w	r5, r9, lsl #4
 800a7c0:	2101      	movs	r1, #1
 800a7c2:	eb00 0e06 	add.w	lr, r0, r6
 800a7c6:	9518      	str	r5, [sp, #96]	@ 0x60
 800a7c8:	9404      	str	r4, [sp, #16]
 800a7ca:	9103      	str	r1, [sp, #12]
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	4689      	mov	r9, r1
 800a7d0:	9e06      	ldr	r6, [sp, #24]
 800a7d2:	ed90 fa00 	vldr	s30, [r0]
 800a7d6:	edd6 7a01 	vldr	s15, [r6, #4]
 800a7da:	edd0 ba01 	vldr	s23, [r0, #4]
 800a7de:	edcd 7a00 	vstr	s15, [sp]
 800a7e2:	a80d      	add	r0, sp, #52	@ 0x34
 800a7e4:	edde 7a01 	vldr	s15, [lr, #4]
 800a7e8:	9c05      	ldr	r4, [sp, #20]
 800a7ea:	9d07      	ldr	r5, [sp, #28]
 800a7ec:	edd2 fa00 	vldr	s31, [r2]
 800a7f0:	ed92 ca01 	vldr	s24, [r2, #4]
 800a7f4:	edcd 7a01 	vstr	s15, [sp, #4]
 800a7f8:	c807      	ldmia	r0, {r0, r1, r2}
 800a7fa:	eddc 7a01 	vldr	s15, [ip, #4]
 800a7fe:	edd4 ea00 	vldr	s29, [r4]
 800a802:	ed95 ea00 	vldr	s28, [r5]
 800a806:	edd6 da00 	vldr	s27, [r6]
 800a80a:	edd4 aa01 	vldr	s21, [r4, #4]
 800a80e:	ed95 aa01 	vldr	s20, [r5, #4]
 800a812:	ed9e da00 	vldr	s26, [lr]
 800a816:	eddc ca00 	vldr	s25, [ip]
 800a81a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a81e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800a820:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a822:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a824:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800a826:	edcd 7a02 	vstr	s15, [sp, #8]
 800a82a:	e001      	b.n	800a830 <arm_radix8_butterfly_f32+0x328>
 800a82c:	3f3504f3 	.word	0x3f3504f3
 800a830:	ed16 6a01 	vldr	s12, [r6, #-4]
 800a834:	ed91 5a00 	vldr	s10, [r1]
 800a838:	ed57 9a01 	vldr	s19, [r7, #-4]
 800a83c:	edd5 7a00 	vldr	s15, [r5]
 800a840:	ed18 7a01 	vldr	s14, [r8, #-4]
 800a844:	edd2 3a00 	vldr	s7, [r2]
 800a848:	ed94 3a00 	vldr	s6, [r4]
 800a84c:	ed90 2a00 	vldr	s4, [r0]
 800a850:	ed92 0a01 	vldr	s0, [r2, #4]
 800a854:	ee33 8a85 	vadd.f32	s16, s7, s10
 800a858:	ee32 1a06 	vadd.f32	s2, s4, s12
 800a85c:	ee33 4a29 	vadd.f32	s8, s6, s19
 800a860:	ee77 4a87 	vadd.f32	s9, s15, s14
 800a864:	ee78 1a04 	vadd.f32	s3, s16, s8
 800a868:	ee71 6a24 	vadd.f32	s13, s2, s9
 800a86c:	ee32 2a46 	vsub.f32	s4, s4, s12
 800a870:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800a874:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a878:	ed82 6a00 	vstr	s12, [r2]
 800a87c:	edd5 8a01 	vldr	s17, [r5, #4]
 800a880:	ed90 9a01 	vldr	s18, [r0, #4]
 800a884:	edd6 2a00 	vldr	s5, [r6]
 800a888:	ed98 7a00 	vldr	s14, [r8]
 800a88c:	edd4 0a01 	vldr	s1, [r4, #4]
 800a890:	ed91 6a01 	vldr	s12, [r1, #4]
 800a894:	edd7 5a00 	vldr	s11, [r7]
 800a898:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800a89c:	ee33 3a69 	vsub.f32	s6, s6, s19
 800a8a0:	ee39 5a62 	vsub.f32	s10, s18, s5
 800a8a4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800a8a8:	ee38 4a44 	vsub.f32	s8, s16, s8
 800a8ac:	ee38 7a87 	vadd.f32	s14, s17, s14
 800a8b0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800a8b4:	ee79 2a22 	vadd.f32	s5, s18, s5
 800a8b8:	ee75 8a69 	vsub.f32	s17, s10, s19
 800a8bc:	ee32 9a27 	vadd.f32	s18, s4, s15
 800a8c0:	ee35 5a29 	vadd.f32	s10, s10, s19
 800a8c4:	ee72 7a67 	vsub.f32	s15, s4, s15
 800a8c8:	ee30 2a06 	vadd.f32	s4, s0, s12
 800a8cc:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800a8d0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800a8d4:	ee32 9a08 	vadd.f32	s18, s4, s16
 800a8d8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800a8dc:	ee32 2a48 	vsub.f32	s4, s4, s16
 800a8e0:	ee71 4a64 	vsub.f32	s9, s2, s9
 800a8e4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800a8e8:	ee32 1a87 	vadd.f32	s2, s5, s14
 800a8ec:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800a8f0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800a8f4:	ee30 6a46 	vsub.f32	s12, s0, s12
 800a8f8:	ee73 0a29 	vadd.f32	s1, s6, s19
 800a8fc:	ee36 0a28 	vadd.f32	s0, s12, s17
 800a900:	ee33 3a69 	vsub.f32	s6, s6, s19
 800a904:	ee32 7a64 	vsub.f32	s14, s4, s9
 800a908:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800a90c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800a910:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800a914:	ee75 8a85 	vadd.f32	s17, s11, s10
 800a918:	ee74 3a22 	vadd.f32	s7, s8, s5
 800a91c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800a920:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800a924:	ee79 1a41 	vsub.f32	s3, s18, s2
 800a928:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800a92c:	ee76 5a43 	vsub.f32	s11, s12, s6
 800a930:	ee74 2a62 	vsub.f32	s5, s8, s5
 800a934:	ee74 4a82 	vadd.f32	s9, s9, s4
 800a938:	ee30 4a60 	vsub.f32	s8, s0, s1
 800a93c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800a940:	ee30 0a80 	vadd.f32	s0, s1, s0
 800a944:	ee77 9a85 	vadd.f32	s19, s15, s10
 800a948:	ee33 6a06 	vadd.f32	s12, s6, s12
 800a94c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800a950:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800a954:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800a958:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800a95c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800a960:	ee39 1a01 	vadd.f32	s2, s18, s2
 800a964:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800a968:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800a96c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800a970:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800a974:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800a978:	ee35 3a03 	vadd.f32	s6, s10, s6
 800a97c:	ee72 6a66 	vsub.f32	s13, s4, s13
 800a980:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800a984:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800a988:	ed9d 4a02 	vldr	s8, [sp, #8]
 800a98c:	ed82 1a01 	vstr	s2, [r2, #4]
 800a990:	ee77 3a63 	vsub.f32	s7, s14, s7
 800a994:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800a998:	ed9d 7a01 	vldr	s14, [sp, #4]
 800a99c:	ed81 3a00 	vstr	s6, [r1]
 800a9a0:	ee30 9a89 	vadd.f32	s18, s1, s18
 800a9a4:	ee32 2a05 	vadd.f32	s4, s4, s10
 800a9a8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800a9ac:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800a9b0:	ee67 2a22 	vmul.f32	s5, s14, s5
 800a9b4:	ee64 1a00 	vmul.f32	s3, s8, s0
 800a9b8:	ee27 7a24 	vmul.f32	s14, s14, s9
 800a9bc:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800a9c0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800a9c4:	ee64 8a28 	vmul.f32	s17, s8, s17
 800a9c8:	ed9d 4a00 	vldr	s8, [sp]
 800a9cc:	edc1 6a01 	vstr	s13, [r1, #4]
 800a9d0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800a9d4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800a9d8:	ee64 9a29 	vmul.f32	s19, s8, s19
 800a9dc:	ee24 4a25 	vmul.f32	s8, s8, s11
 800a9e0:	ee30 7a87 	vadd.f32	s14, s1, s14
 800a9e4:	ee74 4a84 	vadd.f32	s9, s9, s8
 800a9e8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800a9ec:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800a9f0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800a9f4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800a9f8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800a9fc:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800aa00:	ee75 1a21 	vadd.f32	s3, s10, s3
 800aa04:	ee30 0a68 	vsub.f32	s0, s0, s17
 800aa08:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800aa0c:	ee70 0a84 	vadd.f32	s1, s1, s8
 800aa10:	ee36 6a67 	vsub.f32	s12, s12, s15
 800aa14:	44d9      	add	r9, fp
 800aa16:	45ca      	cmp	sl, r9
 800aa18:	ed84 9a00 	vstr	s18, [r4]
 800aa1c:	edc4 3a01 	vstr	s7, [r4, #4]
 800aa20:	441a      	add	r2, r3
 800aa22:	ed07 7a01 	vstr	s14, [r7, #-4]
 800aa26:	edc7 2a00 	vstr	s5, [r7]
 800aa2a:	4419      	add	r1, r3
 800aa2c:	ed80 2a00 	vstr	s4, [r0]
 800aa30:	ed80 8a01 	vstr	s16, [r0, #4]
 800aa34:	441c      	add	r4, r3
 800aa36:	ed48 1a01 	vstr	s3, [r8, #-4]
 800aa3a:	ed88 0a00 	vstr	s0, [r8]
 800aa3e:	441f      	add	r7, r3
 800aa40:	ed46 4a01 	vstr	s9, [r6, #-4]
 800aa44:	4418      	add	r0, r3
 800aa46:	edc6 9a00 	vstr	s19, [r6]
 800aa4a:	4498      	add	r8, r3
 800aa4c:	edc5 0a00 	vstr	s1, [r5]
 800aa50:	ed85 6a01 	vstr	s12, [r5, #4]
 800aa54:	441e      	add	r6, r3
 800aa56:	441d      	add	r5, r3
 800aa58:	f63f aeea 	bhi.w	800a830 <arm_radix8_butterfly_f32+0x328>
 800aa5c:	9a03      	ldr	r2, [sp, #12]
 800aa5e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800aa60:	3201      	adds	r2, #1
 800aa62:	4611      	mov	r1, r2
 800aa64:	9203      	str	r2, [sp, #12]
 800aa66:	9a04      	ldr	r2, [sp, #16]
 800aa68:	4402      	add	r2, r0
 800aa6a:	9204      	str	r2, [sp, #16]
 800aa6c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800aa6e:	9a05      	ldr	r2, [sp, #20]
 800aa70:	4402      	add	r2, r0
 800aa72:	9205      	str	r2, [sp, #20]
 800aa74:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800aa76:	9a07      	ldr	r2, [sp, #28]
 800aa78:	4402      	add	r2, r0
 800aa7a:	9207      	str	r2, [sp, #28]
 800aa7c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800aa7e:	9a06      	ldr	r2, [sp, #24]
 800aa80:	4402      	add	r2, r0
 800aa82:	9206      	str	r2, [sp, #24]
 800aa84:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800aa86:	4496      	add	lr, r2
 800aa88:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800aa8a:	4494      	add	ip, r2
 800aa8c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aa8e:	3208      	adds	r2, #8
 800aa90:	920f      	str	r2, [sp, #60]	@ 0x3c
 800aa92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa94:	3208      	adds	r2, #8
 800aa96:	920e      	str	r2, [sp, #56]	@ 0x38
 800aa98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aa9a:	3208      	adds	r2, #8
 800aa9c:	920d      	str	r2, [sp, #52]	@ 0x34
 800aa9e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800aaa0:	3208      	adds	r2, #8
 800aaa2:	920c      	str	r2, [sp, #48]	@ 0x30
 800aaa4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aaa6:	3208      	adds	r2, #8
 800aaa8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aaaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aaac:	3208      	adds	r2, #8
 800aaae:	920a      	str	r2, [sp, #40]	@ 0x28
 800aab0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aab2:	3208      	adds	r2, #8
 800aab4:	9209      	str	r2, [sp, #36]	@ 0x24
 800aab6:	9a08      	ldr	r2, [sp, #32]
 800aab8:	3208      	adds	r2, #8
 800aaba:	9208      	str	r2, [sp, #32]
 800aabc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800aabe:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800aac0:	4288      	cmp	r0, r1
 800aac2:	4622      	mov	r2, r4
 800aac4:	d007      	beq.n	800aad6 <arm_radix8_butterfly_f32+0x5ce>
 800aac6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800aac8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800aacc:	4621      	mov	r1, r4
 800aace:	4401      	add	r1, r0
 800aad0:	9110      	str	r1, [sp, #64]	@ 0x40
 800aad2:	9804      	ldr	r0, [sp, #16]
 800aad4:	e67c      	b.n	800a7d0 <arm_radix8_butterfly_f32+0x2c8>
 800aad6:	4683      	mov	fp, r0
 800aad8:	f8bd 905c 	ldrh.w	r9, [sp, #92]	@ 0x5c
 800aadc:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 800aade:	e524      	b.n	800a52a <arm_radix8_butterfly_f32+0x22>
 800aae0:	b01d      	add	sp, #116	@ 0x74
 800aae2:	ecbd 8b10 	vpop	{d8-d15}
 800aae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaea:	bf00      	nop

0800aaec <sniprintf>:
 800aaec:	b40c      	push	{r2, r3}
 800aaee:	b530      	push	{r4, r5, lr}
 800aaf0:	4b18      	ldr	r3, [pc, #96]	@ (800ab54 <sniprintf+0x68>)
 800aaf2:	1e0c      	subs	r4, r1, #0
 800aaf4:	681d      	ldr	r5, [r3, #0]
 800aaf6:	b09d      	sub	sp, #116	@ 0x74
 800aaf8:	da08      	bge.n	800ab0c <sniprintf+0x20>
 800aafa:	238b      	movs	r3, #139	@ 0x8b
 800aafc:	602b      	str	r3, [r5, #0]
 800aafe:	f04f 30ff 	mov.w	r0, #4294967295
 800ab02:	b01d      	add	sp, #116	@ 0x74
 800ab04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab08:	b002      	add	sp, #8
 800ab0a:	4770      	bx	lr
 800ab0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ab10:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ab14:	f04f 0300 	mov.w	r3, #0
 800ab18:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ab1a:	bf14      	ite	ne
 800ab1c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ab20:	4623      	moveq	r3, r4
 800ab22:	9304      	str	r3, [sp, #16]
 800ab24:	9307      	str	r3, [sp, #28]
 800ab26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ab2a:	9002      	str	r0, [sp, #8]
 800ab2c:	9006      	str	r0, [sp, #24]
 800ab2e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ab32:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ab34:	ab21      	add	r3, sp, #132	@ 0x84
 800ab36:	a902      	add	r1, sp, #8
 800ab38:	4628      	mov	r0, r5
 800ab3a:	9301      	str	r3, [sp, #4]
 800ab3c:	f000 f996 	bl	800ae6c <_svfiprintf_r>
 800ab40:	1c43      	adds	r3, r0, #1
 800ab42:	bfbc      	itt	lt
 800ab44:	238b      	movlt	r3, #139	@ 0x8b
 800ab46:	602b      	strlt	r3, [r5, #0]
 800ab48:	2c00      	cmp	r4, #0
 800ab4a:	d0da      	beq.n	800ab02 <sniprintf+0x16>
 800ab4c:	9b02      	ldr	r3, [sp, #8]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	701a      	strb	r2, [r3, #0]
 800ab52:	e7d6      	b.n	800ab02 <sniprintf+0x16>
 800ab54:	200000b0 	.word	0x200000b0

0800ab58 <memset>:
 800ab58:	4402      	add	r2, r0
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d100      	bne.n	800ab62 <memset+0xa>
 800ab60:	4770      	bx	lr
 800ab62:	f803 1b01 	strb.w	r1, [r3], #1
 800ab66:	e7f9      	b.n	800ab5c <memset+0x4>

0800ab68 <__libc_init_array>:
 800ab68:	b570      	push	{r4, r5, r6, lr}
 800ab6a:	4d0d      	ldr	r5, [pc, #52]	@ (800aba0 <__libc_init_array+0x38>)
 800ab6c:	4c0d      	ldr	r4, [pc, #52]	@ (800aba4 <__libc_init_array+0x3c>)
 800ab6e:	1b64      	subs	r4, r4, r5
 800ab70:	10a4      	asrs	r4, r4, #2
 800ab72:	2600      	movs	r6, #0
 800ab74:	42a6      	cmp	r6, r4
 800ab76:	d109      	bne.n	800ab8c <__libc_init_array+0x24>
 800ab78:	4d0b      	ldr	r5, [pc, #44]	@ (800aba8 <__libc_init_array+0x40>)
 800ab7a:	4c0c      	ldr	r4, [pc, #48]	@ (800abac <__libc_init_array+0x44>)
 800ab7c:	f000 fca2 	bl	800b4c4 <_init>
 800ab80:	1b64      	subs	r4, r4, r5
 800ab82:	10a4      	asrs	r4, r4, #2
 800ab84:	2600      	movs	r6, #0
 800ab86:	42a6      	cmp	r6, r4
 800ab88:	d105      	bne.n	800ab96 <__libc_init_array+0x2e>
 800ab8a:	bd70      	pop	{r4, r5, r6, pc}
 800ab8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab90:	4798      	blx	r3
 800ab92:	3601      	adds	r6, #1
 800ab94:	e7ee      	b.n	800ab74 <__libc_init_array+0xc>
 800ab96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab9a:	4798      	blx	r3
 800ab9c:	3601      	adds	r6, #1
 800ab9e:	e7f2      	b.n	800ab86 <__libc_init_array+0x1e>
 800aba0:	080234c4 	.word	0x080234c4
 800aba4:	080234c4 	.word	0x080234c4
 800aba8:	080234c4 	.word	0x080234c4
 800abac:	080234c8 	.word	0x080234c8

0800abb0 <__retarget_lock_acquire_recursive>:
 800abb0:	4770      	bx	lr

0800abb2 <__retarget_lock_release_recursive>:
 800abb2:	4770      	bx	lr

0800abb4 <strcpy>:
 800abb4:	4603      	mov	r3, r0
 800abb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abba:	f803 2b01 	strb.w	r2, [r3], #1
 800abbe:	2a00      	cmp	r2, #0
 800abc0:	d1f9      	bne.n	800abb6 <strcpy+0x2>
 800abc2:	4770      	bx	lr

0800abc4 <_free_r>:
 800abc4:	b538      	push	{r3, r4, r5, lr}
 800abc6:	4605      	mov	r5, r0
 800abc8:	2900      	cmp	r1, #0
 800abca:	d041      	beq.n	800ac50 <_free_r+0x8c>
 800abcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abd0:	1f0c      	subs	r4, r1, #4
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	bfb8      	it	lt
 800abd6:	18e4      	addlt	r4, r4, r3
 800abd8:	f000 f8e0 	bl	800ad9c <__malloc_lock>
 800abdc:	4a1d      	ldr	r2, [pc, #116]	@ (800ac54 <_free_r+0x90>)
 800abde:	6813      	ldr	r3, [r2, #0]
 800abe0:	b933      	cbnz	r3, 800abf0 <_free_r+0x2c>
 800abe2:	6063      	str	r3, [r4, #4]
 800abe4:	6014      	str	r4, [r2, #0]
 800abe6:	4628      	mov	r0, r5
 800abe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abec:	f000 b8dc 	b.w	800ada8 <__malloc_unlock>
 800abf0:	42a3      	cmp	r3, r4
 800abf2:	d908      	bls.n	800ac06 <_free_r+0x42>
 800abf4:	6820      	ldr	r0, [r4, #0]
 800abf6:	1821      	adds	r1, r4, r0
 800abf8:	428b      	cmp	r3, r1
 800abfa:	bf01      	itttt	eq
 800abfc:	6819      	ldreq	r1, [r3, #0]
 800abfe:	685b      	ldreq	r3, [r3, #4]
 800ac00:	1809      	addeq	r1, r1, r0
 800ac02:	6021      	streq	r1, [r4, #0]
 800ac04:	e7ed      	b.n	800abe2 <_free_r+0x1e>
 800ac06:	461a      	mov	r2, r3
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	b10b      	cbz	r3, 800ac10 <_free_r+0x4c>
 800ac0c:	42a3      	cmp	r3, r4
 800ac0e:	d9fa      	bls.n	800ac06 <_free_r+0x42>
 800ac10:	6811      	ldr	r1, [r2, #0]
 800ac12:	1850      	adds	r0, r2, r1
 800ac14:	42a0      	cmp	r0, r4
 800ac16:	d10b      	bne.n	800ac30 <_free_r+0x6c>
 800ac18:	6820      	ldr	r0, [r4, #0]
 800ac1a:	4401      	add	r1, r0
 800ac1c:	1850      	adds	r0, r2, r1
 800ac1e:	4283      	cmp	r3, r0
 800ac20:	6011      	str	r1, [r2, #0]
 800ac22:	d1e0      	bne.n	800abe6 <_free_r+0x22>
 800ac24:	6818      	ldr	r0, [r3, #0]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	6053      	str	r3, [r2, #4]
 800ac2a:	4408      	add	r0, r1
 800ac2c:	6010      	str	r0, [r2, #0]
 800ac2e:	e7da      	b.n	800abe6 <_free_r+0x22>
 800ac30:	d902      	bls.n	800ac38 <_free_r+0x74>
 800ac32:	230c      	movs	r3, #12
 800ac34:	602b      	str	r3, [r5, #0]
 800ac36:	e7d6      	b.n	800abe6 <_free_r+0x22>
 800ac38:	6820      	ldr	r0, [r4, #0]
 800ac3a:	1821      	adds	r1, r4, r0
 800ac3c:	428b      	cmp	r3, r1
 800ac3e:	bf04      	itt	eq
 800ac40:	6819      	ldreq	r1, [r3, #0]
 800ac42:	685b      	ldreq	r3, [r3, #4]
 800ac44:	6063      	str	r3, [r4, #4]
 800ac46:	bf04      	itt	eq
 800ac48:	1809      	addeq	r1, r1, r0
 800ac4a:	6021      	streq	r1, [r4, #0]
 800ac4c:	6054      	str	r4, [r2, #4]
 800ac4e:	e7ca      	b.n	800abe6 <_free_r+0x22>
 800ac50:	bd38      	pop	{r3, r4, r5, pc}
 800ac52:	bf00      	nop
 800ac54:	200009a8 	.word	0x200009a8

0800ac58 <sbrk_aligned>:
 800ac58:	b570      	push	{r4, r5, r6, lr}
 800ac5a:	4e0f      	ldr	r6, [pc, #60]	@ (800ac98 <sbrk_aligned+0x40>)
 800ac5c:	460c      	mov	r4, r1
 800ac5e:	6831      	ldr	r1, [r6, #0]
 800ac60:	4605      	mov	r5, r0
 800ac62:	b911      	cbnz	r1, 800ac6a <sbrk_aligned+0x12>
 800ac64:	f000 fba4 	bl	800b3b0 <_sbrk_r>
 800ac68:	6030      	str	r0, [r6, #0]
 800ac6a:	4621      	mov	r1, r4
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	f000 fb9f 	bl	800b3b0 <_sbrk_r>
 800ac72:	1c43      	adds	r3, r0, #1
 800ac74:	d103      	bne.n	800ac7e <sbrk_aligned+0x26>
 800ac76:	f04f 34ff 	mov.w	r4, #4294967295
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	bd70      	pop	{r4, r5, r6, pc}
 800ac7e:	1cc4      	adds	r4, r0, #3
 800ac80:	f024 0403 	bic.w	r4, r4, #3
 800ac84:	42a0      	cmp	r0, r4
 800ac86:	d0f8      	beq.n	800ac7a <sbrk_aligned+0x22>
 800ac88:	1a21      	subs	r1, r4, r0
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	f000 fb90 	bl	800b3b0 <_sbrk_r>
 800ac90:	3001      	adds	r0, #1
 800ac92:	d1f2      	bne.n	800ac7a <sbrk_aligned+0x22>
 800ac94:	e7ef      	b.n	800ac76 <sbrk_aligned+0x1e>
 800ac96:	bf00      	nop
 800ac98:	200009a4 	.word	0x200009a4

0800ac9c <_malloc_r>:
 800ac9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aca0:	1ccd      	adds	r5, r1, #3
 800aca2:	f025 0503 	bic.w	r5, r5, #3
 800aca6:	3508      	adds	r5, #8
 800aca8:	2d0c      	cmp	r5, #12
 800acaa:	bf38      	it	cc
 800acac:	250c      	movcc	r5, #12
 800acae:	2d00      	cmp	r5, #0
 800acb0:	4606      	mov	r6, r0
 800acb2:	db01      	blt.n	800acb8 <_malloc_r+0x1c>
 800acb4:	42a9      	cmp	r1, r5
 800acb6:	d904      	bls.n	800acc2 <_malloc_r+0x26>
 800acb8:	230c      	movs	r3, #12
 800acba:	6033      	str	r3, [r6, #0]
 800acbc:	2000      	movs	r0, #0
 800acbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad98 <_malloc_r+0xfc>
 800acc6:	f000 f869 	bl	800ad9c <__malloc_lock>
 800acca:	f8d8 3000 	ldr.w	r3, [r8]
 800acce:	461c      	mov	r4, r3
 800acd0:	bb44      	cbnz	r4, 800ad24 <_malloc_r+0x88>
 800acd2:	4629      	mov	r1, r5
 800acd4:	4630      	mov	r0, r6
 800acd6:	f7ff ffbf 	bl	800ac58 <sbrk_aligned>
 800acda:	1c43      	adds	r3, r0, #1
 800acdc:	4604      	mov	r4, r0
 800acde:	d158      	bne.n	800ad92 <_malloc_r+0xf6>
 800ace0:	f8d8 4000 	ldr.w	r4, [r8]
 800ace4:	4627      	mov	r7, r4
 800ace6:	2f00      	cmp	r7, #0
 800ace8:	d143      	bne.n	800ad72 <_malloc_r+0xd6>
 800acea:	2c00      	cmp	r4, #0
 800acec:	d04b      	beq.n	800ad86 <_malloc_r+0xea>
 800acee:	6823      	ldr	r3, [r4, #0]
 800acf0:	4639      	mov	r1, r7
 800acf2:	4630      	mov	r0, r6
 800acf4:	eb04 0903 	add.w	r9, r4, r3
 800acf8:	f000 fb5a 	bl	800b3b0 <_sbrk_r>
 800acfc:	4581      	cmp	r9, r0
 800acfe:	d142      	bne.n	800ad86 <_malloc_r+0xea>
 800ad00:	6821      	ldr	r1, [r4, #0]
 800ad02:	1a6d      	subs	r5, r5, r1
 800ad04:	4629      	mov	r1, r5
 800ad06:	4630      	mov	r0, r6
 800ad08:	f7ff ffa6 	bl	800ac58 <sbrk_aligned>
 800ad0c:	3001      	adds	r0, #1
 800ad0e:	d03a      	beq.n	800ad86 <_malloc_r+0xea>
 800ad10:	6823      	ldr	r3, [r4, #0]
 800ad12:	442b      	add	r3, r5
 800ad14:	6023      	str	r3, [r4, #0]
 800ad16:	f8d8 3000 	ldr.w	r3, [r8]
 800ad1a:	685a      	ldr	r2, [r3, #4]
 800ad1c:	bb62      	cbnz	r2, 800ad78 <_malloc_r+0xdc>
 800ad1e:	f8c8 7000 	str.w	r7, [r8]
 800ad22:	e00f      	b.n	800ad44 <_malloc_r+0xa8>
 800ad24:	6822      	ldr	r2, [r4, #0]
 800ad26:	1b52      	subs	r2, r2, r5
 800ad28:	d420      	bmi.n	800ad6c <_malloc_r+0xd0>
 800ad2a:	2a0b      	cmp	r2, #11
 800ad2c:	d917      	bls.n	800ad5e <_malloc_r+0xc2>
 800ad2e:	1961      	adds	r1, r4, r5
 800ad30:	42a3      	cmp	r3, r4
 800ad32:	6025      	str	r5, [r4, #0]
 800ad34:	bf18      	it	ne
 800ad36:	6059      	strne	r1, [r3, #4]
 800ad38:	6863      	ldr	r3, [r4, #4]
 800ad3a:	bf08      	it	eq
 800ad3c:	f8c8 1000 	streq.w	r1, [r8]
 800ad40:	5162      	str	r2, [r4, r5]
 800ad42:	604b      	str	r3, [r1, #4]
 800ad44:	4630      	mov	r0, r6
 800ad46:	f000 f82f 	bl	800ada8 <__malloc_unlock>
 800ad4a:	f104 000b 	add.w	r0, r4, #11
 800ad4e:	1d23      	adds	r3, r4, #4
 800ad50:	f020 0007 	bic.w	r0, r0, #7
 800ad54:	1ac2      	subs	r2, r0, r3
 800ad56:	bf1c      	itt	ne
 800ad58:	1a1b      	subne	r3, r3, r0
 800ad5a:	50a3      	strne	r3, [r4, r2]
 800ad5c:	e7af      	b.n	800acbe <_malloc_r+0x22>
 800ad5e:	6862      	ldr	r2, [r4, #4]
 800ad60:	42a3      	cmp	r3, r4
 800ad62:	bf0c      	ite	eq
 800ad64:	f8c8 2000 	streq.w	r2, [r8]
 800ad68:	605a      	strne	r2, [r3, #4]
 800ad6a:	e7eb      	b.n	800ad44 <_malloc_r+0xa8>
 800ad6c:	4623      	mov	r3, r4
 800ad6e:	6864      	ldr	r4, [r4, #4]
 800ad70:	e7ae      	b.n	800acd0 <_malloc_r+0x34>
 800ad72:	463c      	mov	r4, r7
 800ad74:	687f      	ldr	r7, [r7, #4]
 800ad76:	e7b6      	b.n	800ace6 <_malloc_r+0x4a>
 800ad78:	461a      	mov	r2, r3
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	42a3      	cmp	r3, r4
 800ad7e:	d1fb      	bne.n	800ad78 <_malloc_r+0xdc>
 800ad80:	2300      	movs	r3, #0
 800ad82:	6053      	str	r3, [r2, #4]
 800ad84:	e7de      	b.n	800ad44 <_malloc_r+0xa8>
 800ad86:	230c      	movs	r3, #12
 800ad88:	6033      	str	r3, [r6, #0]
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	f000 f80c 	bl	800ada8 <__malloc_unlock>
 800ad90:	e794      	b.n	800acbc <_malloc_r+0x20>
 800ad92:	6005      	str	r5, [r0, #0]
 800ad94:	e7d6      	b.n	800ad44 <_malloc_r+0xa8>
 800ad96:	bf00      	nop
 800ad98:	200009a8 	.word	0x200009a8

0800ad9c <__malloc_lock>:
 800ad9c:	4801      	ldr	r0, [pc, #4]	@ (800ada4 <__malloc_lock+0x8>)
 800ad9e:	f7ff bf07 	b.w	800abb0 <__retarget_lock_acquire_recursive>
 800ada2:	bf00      	nop
 800ada4:	200009a0 	.word	0x200009a0

0800ada8 <__malloc_unlock>:
 800ada8:	4801      	ldr	r0, [pc, #4]	@ (800adb0 <__malloc_unlock+0x8>)
 800adaa:	f7ff bf02 	b.w	800abb2 <__retarget_lock_release_recursive>
 800adae:	bf00      	nop
 800adb0:	200009a0 	.word	0x200009a0

0800adb4 <__ssputs_r>:
 800adb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adb8:	688e      	ldr	r6, [r1, #8]
 800adba:	461f      	mov	r7, r3
 800adbc:	42be      	cmp	r6, r7
 800adbe:	680b      	ldr	r3, [r1, #0]
 800adc0:	4682      	mov	sl, r0
 800adc2:	460c      	mov	r4, r1
 800adc4:	4690      	mov	r8, r2
 800adc6:	d82d      	bhi.n	800ae24 <__ssputs_r+0x70>
 800adc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800adcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800add0:	d026      	beq.n	800ae20 <__ssputs_r+0x6c>
 800add2:	6965      	ldr	r5, [r4, #20]
 800add4:	6909      	ldr	r1, [r1, #16]
 800add6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adda:	eba3 0901 	sub.w	r9, r3, r1
 800adde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ade2:	1c7b      	adds	r3, r7, #1
 800ade4:	444b      	add	r3, r9
 800ade6:	106d      	asrs	r5, r5, #1
 800ade8:	429d      	cmp	r5, r3
 800adea:	bf38      	it	cc
 800adec:	461d      	movcc	r5, r3
 800adee:	0553      	lsls	r3, r2, #21
 800adf0:	d527      	bpl.n	800ae42 <__ssputs_r+0x8e>
 800adf2:	4629      	mov	r1, r5
 800adf4:	f7ff ff52 	bl	800ac9c <_malloc_r>
 800adf8:	4606      	mov	r6, r0
 800adfa:	b360      	cbz	r0, 800ae56 <__ssputs_r+0xa2>
 800adfc:	6921      	ldr	r1, [r4, #16]
 800adfe:	464a      	mov	r2, r9
 800ae00:	f000 fae6 	bl	800b3d0 <memcpy>
 800ae04:	89a3      	ldrh	r3, [r4, #12]
 800ae06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae0e:	81a3      	strh	r3, [r4, #12]
 800ae10:	6126      	str	r6, [r4, #16]
 800ae12:	6165      	str	r5, [r4, #20]
 800ae14:	444e      	add	r6, r9
 800ae16:	eba5 0509 	sub.w	r5, r5, r9
 800ae1a:	6026      	str	r6, [r4, #0]
 800ae1c:	60a5      	str	r5, [r4, #8]
 800ae1e:	463e      	mov	r6, r7
 800ae20:	42be      	cmp	r6, r7
 800ae22:	d900      	bls.n	800ae26 <__ssputs_r+0x72>
 800ae24:	463e      	mov	r6, r7
 800ae26:	6820      	ldr	r0, [r4, #0]
 800ae28:	4632      	mov	r2, r6
 800ae2a:	4641      	mov	r1, r8
 800ae2c:	f000 faa6 	bl	800b37c <memmove>
 800ae30:	68a3      	ldr	r3, [r4, #8]
 800ae32:	1b9b      	subs	r3, r3, r6
 800ae34:	60a3      	str	r3, [r4, #8]
 800ae36:	6823      	ldr	r3, [r4, #0]
 800ae38:	4433      	add	r3, r6
 800ae3a:	6023      	str	r3, [r4, #0]
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae42:	462a      	mov	r2, r5
 800ae44:	f000 fad2 	bl	800b3ec <_realloc_r>
 800ae48:	4606      	mov	r6, r0
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	d1e0      	bne.n	800ae10 <__ssputs_r+0x5c>
 800ae4e:	6921      	ldr	r1, [r4, #16]
 800ae50:	4650      	mov	r0, sl
 800ae52:	f7ff feb7 	bl	800abc4 <_free_r>
 800ae56:	230c      	movs	r3, #12
 800ae58:	f8ca 3000 	str.w	r3, [sl]
 800ae5c:	89a3      	ldrh	r3, [r4, #12]
 800ae5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae62:	81a3      	strh	r3, [r4, #12]
 800ae64:	f04f 30ff 	mov.w	r0, #4294967295
 800ae68:	e7e9      	b.n	800ae3e <__ssputs_r+0x8a>
	...

0800ae6c <_svfiprintf_r>:
 800ae6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae70:	4698      	mov	r8, r3
 800ae72:	898b      	ldrh	r3, [r1, #12]
 800ae74:	061b      	lsls	r3, r3, #24
 800ae76:	b09d      	sub	sp, #116	@ 0x74
 800ae78:	4607      	mov	r7, r0
 800ae7a:	460d      	mov	r5, r1
 800ae7c:	4614      	mov	r4, r2
 800ae7e:	d510      	bpl.n	800aea2 <_svfiprintf_r+0x36>
 800ae80:	690b      	ldr	r3, [r1, #16]
 800ae82:	b973      	cbnz	r3, 800aea2 <_svfiprintf_r+0x36>
 800ae84:	2140      	movs	r1, #64	@ 0x40
 800ae86:	f7ff ff09 	bl	800ac9c <_malloc_r>
 800ae8a:	6028      	str	r0, [r5, #0]
 800ae8c:	6128      	str	r0, [r5, #16]
 800ae8e:	b930      	cbnz	r0, 800ae9e <_svfiprintf_r+0x32>
 800ae90:	230c      	movs	r3, #12
 800ae92:	603b      	str	r3, [r7, #0]
 800ae94:	f04f 30ff 	mov.w	r0, #4294967295
 800ae98:	b01d      	add	sp, #116	@ 0x74
 800ae9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9e:	2340      	movs	r3, #64	@ 0x40
 800aea0:	616b      	str	r3, [r5, #20]
 800aea2:	2300      	movs	r3, #0
 800aea4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aea6:	2320      	movs	r3, #32
 800aea8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aeac:	f8cd 800c 	str.w	r8, [sp, #12]
 800aeb0:	2330      	movs	r3, #48	@ 0x30
 800aeb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b050 <_svfiprintf_r+0x1e4>
 800aeb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aeba:	f04f 0901 	mov.w	r9, #1
 800aebe:	4623      	mov	r3, r4
 800aec0:	469a      	mov	sl, r3
 800aec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aec6:	b10a      	cbz	r2, 800aecc <_svfiprintf_r+0x60>
 800aec8:	2a25      	cmp	r2, #37	@ 0x25
 800aeca:	d1f9      	bne.n	800aec0 <_svfiprintf_r+0x54>
 800aecc:	ebba 0b04 	subs.w	fp, sl, r4
 800aed0:	d00b      	beq.n	800aeea <_svfiprintf_r+0x7e>
 800aed2:	465b      	mov	r3, fp
 800aed4:	4622      	mov	r2, r4
 800aed6:	4629      	mov	r1, r5
 800aed8:	4638      	mov	r0, r7
 800aeda:	f7ff ff6b 	bl	800adb4 <__ssputs_r>
 800aede:	3001      	adds	r0, #1
 800aee0:	f000 80a7 	beq.w	800b032 <_svfiprintf_r+0x1c6>
 800aee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aee6:	445a      	add	r2, fp
 800aee8:	9209      	str	r2, [sp, #36]	@ 0x24
 800aeea:	f89a 3000 	ldrb.w	r3, [sl]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f000 809f 	beq.w	800b032 <_svfiprintf_r+0x1c6>
 800aef4:	2300      	movs	r3, #0
 800aef6:	f04f 32ff 	mov.w	r2, #4294967295
 800aefa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aefe:	f10a 0a01 	add.w	sl, sl, #1
 800af02:	9304      	str	r3, [sp, #16]
 800af04:	9307      	str	r3, [sp, #28]
 800af06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af0a:	931a      	str	r3, [sp, #104]	@ 0x68
 800af0c:	4654      	mov	r4, sl
 800af0e:	2205      	movs	r2, #5
 800af10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af14:	484e      	ldr	r0, [pc, #312]	@ (800b050 <_svfiprintf_r+0x1e4>)
 800af16:	f7f5 f9e3 	bl	80002e0 <memchr>
 800af1a:	9a04      	ldr	r2, [sp, #16]
 800af1c:	b9d8      	cbnz	r0, 800af56 <_svfiprintf_r+0xea>
 800af1e:	06d0      	lsls	r0, r2, #27
 800af20:	bf44      	itt	mi
 800af22:	2320      	movmi	r3, #32
 800af24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af28:	0711      	lsls	r1, r2, #28
 800af2a:	bf44      	itt	mi
 800af2c:	232b      	movmi	r3, #43	@ 0x2b
 800af2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af32:	f89a 3000 	ldrb.w	r3, [sl]
 800af36:	2b2a      	cmp	r3, #42	@ 0x2a
 800af38:	d015      	beq.n	800af66 <_svfiprintf_r+0xfa>
 800af3a:	9a07      	ldr	r2, [sp, #28]
 800af3c:	4654      	mov	r4, sl
 800af3e:	2000      	movs	r0, #0
 800af40:	f04f 0c0a 	mov.w	ip, #10
 800af44:	4621      	mov	r1, r4
 800af46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af4a:	3b30      	subs	r3, #48	@ 0x30
 800af4c:	2b09      	cmp	r3, #9
 800af4e:	d94b      	bls.n	800afe8 <_svfiprintf_r+0x17c>
 800af50:	b1b0      	cbz	r0, 800af80 <_svfiprintf_r+0x114>
 800af52:	9207      	str	r2, [sp, #28]
 800af54:	e014      	b.n	800af80 <_svfiprintf_r+0x114>
 800af56:	eba0 0308 	sub.w	r3, r0, r8
 800af5a:	fa09 f303 	lsl.w	r3, r9, r3
 800af5e:	4313      	orrs	r3, r2
 800af60:	9304      	str	r3, [sp, #16]
 800af62:	46a2      	mov	sl, r4
 800af64:	e7d2      	b.n	800af0c <_svfiprintf_r+0xa0>
 800af66:	9b03      	ldr	r3, [sp, #12]
 800af68:	1d19      	adds	r1, r3, #4
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	9103      	str	r1, [sp, #12]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	bfbb      	ittet	lt
 800af72:	425b      	neglt	r3, r3
 800af74:	f042 0202 	orrlt.w	r2, r2, #2
 800af78:	9307      	strge	r3, [sp, #28]
 800af7a:	9307      	strlt	r3, [sp, #28]
 800af7c:	bfb8      	it	lt
 800af7e:	9204      	strlt	r2, [sp, #16]
 800af80:	7823      	ldrb	r3, [r4, #0]
 800af82:	2b2e      	cmp	r3, #46	@ 0x2e
 800af84:	d10a      	bne.n	800af9c <_svfiprintf_r+0x130>
 800af86:	7863      	ldrb	r3, [r4, #1]
 800af88:	2b2a      	cmp	r3, #42	@ 0x2a
 800af8a:	d132      	bne.n	800aff2 <_svfiprintf_r+0x186>
 800af8c:	9b03      	ldr	r3, [sp, #12]
 800af8e:	1d1a      	adds	r2, r3, #4
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	9203      	str	r2, [sp, #12]
 800af94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af98:	3402      	adds	r4, #2
 800af9a:	9305      	str	r3, [sp, #20]
 800af9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b060 <_svfiprintf_r+0x1f4>
 800afa0:	7821      	ldrb	r1, [r4, #0]
 800afa2:	2203      	movs	r2, #3
 800afa4:	4650      	mov	r0, sl
 800afa6:	f7f5 f99b 	bl	80002e0 <memchr>
 800afaa:	b138      	cbz	r0, 800afbc <_svfiprintf_r+0x150>
 800afac:	9b04      	ldr	r3, [sp, #16]
 800afae:	eba0 000a 	sub.w	r0, r0, sl
 800afb2:	2240      	movs	r2, #64	@ 0x40
 800afb4:	4082      	lsls	r2, r0
 800afb6:	4313      	orrs	r3, r2
 800afb8:	3401      	adds	r4, #1
 800afba:	9304      	str	r3, [sp, #16]
 800afbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afc0:	4824      	ldr	r0, [pc, #144]	@ (800b054 <_svfiprintf_r+0x1e8>)
 800afc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afc6:	2206      	movs	r2, #6
 800afc8:	f7f5 f98a 	bl	80002e0 <memchr>
 800afcc:	2800      	cmp	r0, #0
 800afce:	d036      	beq.n	800b03e <_svfiprintf_r+0x1d2>
 800afd0:	4b21      	ldr	r3, [pc, #132]	@ (800b058 <_svfiprintf_r+0x1ec>)
 800afd2:	bb1b      	cbnz	r3, 800b01c <_svfiprintf_r+0x1b0>
 800afd4:	9b03      	ldr	r3, [sp, #12]
 800afd6:	3307      	adds	r3, #7
 800afd8:	f023 0307 	bic.w	r3, r3, #7
 800afdc:	3308      	adds	r3, #8
 800afde:	9303      	str	r3, [sp, #12]
 800afe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afe2:	4433      	add	r3, r6
 800afe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800afe6:	e76a      	b.n	800aebe <_svfiprintf_r+0x52>
 800afe8:	fb0c 3202 	mla	r2, ip, r2, r3
 800afec:	460c      	mov	r4, r1
 800afee:	2001      	movs	r0, #1
 800aff0:	e7a8      	b.n	800af44 <_svfiprintf_r+0xd8>
 800aff2:	2300      	movs	r3, #0
 800aff4:	3401      	adds	r4, #1
 800aff6:	9305      	str	r3, [sp, #20]
 800aff8:	4619      	mov	r1, r3
 800affa:	f04f 0c0a 	mov.w	ip, #10
 800affe:	4620      	mov	r0, r4
 800b000:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b004:	3a30      	subs	r2, #48	@ 0x30
 800b006:	2a09      	cmp	r2, #9
 800b008:	d903      	bls.n	800b012 <_svfiprintf_r+0x1a6>
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d0c6      	beq.n	800af9c <_svfiprintf_r+0x130>
 800b00e:	9105      	str	r1, [sp, #20]
 800b010:	e7c4      	b.n	800af9c <_svfiprintf_r+0x130>
 800b012:	fb0c 2101 	mla	r1, ip, r1, r2
 800b016:	4604      	mov	r4, r0
 800b018:	2301      	movs	r3, #1
 800b01a:	e7f0      	b.n	800affe <_svfiprintf_r+0x192>
 800b01c:	ab03      	add	r3, sp, #12
 800b01e:	9300      	str	r3, [sp, #0]
 800b020:	462a      	mov	r2, r5
 800b022:	4b0e      	ldr	r3, [pc, #56]	@ (800b05c <_svfiprintf_r+0x1f0>)
 800b024:	a904      	add	r1, sp, #16
 800b026:	4638      	mov	r0, r7
 800b028:	f3af 8000 	nop.w
 800b02c:	1c42      	adds	r2, r0, #1
 800b02e:	4606      	mov	r6, r0
 800b030:	d1d6      	bne.n	800afe0 <_svfiprintf_r+0x174>
 800b032:	89ab      	ldrh	r3, [r5, #12]
 800b034:	065b      	lsls	r3, r3, #25
 800b036:	f53f af2d 	bmi.w	800ae94 <_svfiprintf_r+0x28>
 800b03a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b03c:	e72c      	b.n	800ae98 <_svfiprintf_r+0x2c>
 800b03e:	ab03      	add	r3, sp, #12
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	462a      	mov	r2, r5
 800b044:	4b05      	ldr	r3, [pc, #20]	@ (800b05c <_svfiprintf_r+0x1f0>)
 800b046:	a904      	add	r1, sp, #16
 800b048:	4638      	mov	r0, r7
 800b04a:	f000 f879 	bl	800b140 <_printf_i>
 800b04e:	e7ed      	b.n	800b02c <_svfiprintf_r+0x1c0>
 800b050:	08023488 	.word	0x08023488
 800b054:	08023492 	.word	0x08023492
 800b058:	00000000 	.word	0x00000000
 800b05c:	0800adb5 	.word	0x0800adb5
 800b060:	0802348e 	.word	0x0802348e

0800b064 <_printf_common>:
 800b064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b068:	4616      	mov	r6, r2
 800b06a:	4698      	mov	r8, r3
 800b06c:	688a      	ldr	r2, [r1, #8]
 800b06e:	690b      	ldr	r3, [r1, #16]
 800b070:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b074:	4293      	cmp	r3, r2
 800b076:	bfb8      	it	lt
 800b078:	4613      	movlt	r3, r2
 800b07a:	6033      	str	r3, [r6, #0]
 800b07c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b080:	4607      	mov	r7, r0
 800b082:	460c      	mov	r4, r1
 800b084:	b10a      	cbz	r2, 800b08a <_printf_common+0x26>
 800b086:	3301      	adds	r3, #1
 800b088:	6033      	str	r3, [r6, #0]
 800b08a:	6823      	ldr	r3, [r4, #0]
 800b08c:	0699      	lsls	r1, r3, #26
 800b08e:	bf42      	ittt	mi
 800b090:	6833      	ldrmi	r3, [r6, #0]
 800b092:	3302      	addmi	r3, #2
 800b094:	6033      	strmi	r3, [r6, #0]
 800b096:	6825      	ldr	r5, [r4, #0]
 800b098:	f015 0506 	ands.w	r5, r5, #6
 800b09c:	d106      	bne.n	800b0ac <_printf_common+0x48>
 800b09e:	f104 0a19 	add.w	sl, r4, #25
 800b0a2:	68e3      	ldr	r3, [r4, #12]
 800b0a4:	6832      	ldr	r2, [r6, #0]
 800b0a6:	1a9b      	subs	r3, r3, r2
 800b0a8:	42ab      	cmp	r3, r5
 800b0aa:	dc26      	bgt.n	800b0fa <_printf_common+0x96>
 800b0ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b0b0:	6822      	ldr	r2, [r4, #0]
 800b0b2:	3b00      	subs	r3, #0
 800b0b4:	bf18      	it	ne
 800b0b6:	2301      	movne	r3, #1
 800b0b8:	0692      	lsls	r2, r2, #26
 800b0ba:	d42b      	bmi.n	800b114 <_printf_common+0xb0>
 800b0bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b0c0:	4641      	mov	r1, r8
 800b0c2:	4638      	mov	r0, r7
 800b0c4:	47c8      	blx	r9
 800b0c6:	3001      	adds	r0, #1
 800b0c8:	d01e      	beq.n	800b108 <_printf_common+0xa4>
 800b0ca:	6823      	ldr	r3, [r4, #0]
 800b0cc:	6922      	ldr	r2, [r4, #16]
 800b0ce:	f003 0306 	and.w	r3, r3, #6
 800b0d2:	2b04      	cmp	r3, #4
 800b0d4:	bf02      	ittt	eq
 800b0d6:	68e5      	ldreq	r5, [r4, #12]
 800b0d8:	6833      	ldreq	r3, [r6, #0]
 800b0da:	1aed      	subeq	r5, r5, r3
 800b0dc:	68a3      	ldr	r3, [r4, #8]
 800b0de:	bf0c      	ite	eq
 800b0e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0e4:	2500      	movne	r5, #0
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	bfc4      	itt	gt
 800b0ea:	1a9b      	subgt	r3, r3, r2
 800b0ec:	18ed      	addgt	r5, r5, r3
 800b0ee:	2600      	movs	r6, #0
 800b0f0:	341a      	adds	r4, #26
 800b0f2:	42b5      	cmp	r5, r6
 800b0f4:	d11a      	bne.n	800b12c <_printf_common+0xc8>
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	e008      	b.n	800b10c <_printf_common+0xa8>
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	4652      	mov	r2, sl
 800b0fe:	4641      	mov	r1, r8
 800b100:	4638      	mov	r0, r7
 800b102:	47c8      	blx	r9
 800b104:	3001      	adds	r0, #1
 800b106:	d103      	bne.n	800b110 <_printf_common+0xac>
 800b108:	f04f 30ff 	mov.w	r0, #4294967295
 800b10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b110:	3501      	adds	r5, #1
 800b112:	e7c6      	b.n	800b0a2 <_printf_common+0x3e>
 800b114:	18e1      	adds	r1, r4, r3
 800b116:	1c5a      	adds	r2, r3, #1
 800b118:	2030      	movs	r0, #48	@ 0x30
 800b11a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b11e:	4422      	add	r2, r4
 800b120:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b124:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b128:	3302      	adds	r3, #2
 800b12a:	e7c7      	b.n	800b0bc <_printf_common+0x58>
 800b12c:	2301      	movs	r3, #1
 800b12e:	4622      	mov	r2, r4
 800b130:	4641      	mov	r1, r8
 800b132:	4638      	mov	r0, r7
 800b134:	47c8      	blx	r9
 800b136:	3001      	adds	r0, #1
 800b138:	d0e6      	beq.n	800b108 <_printf_common+0xa4>
 800b13a:	3601      	adds	r6, #1
 800b13c:	e7d9      	b.n	800b0f2 <_printf_common+0x8e>
	...

0800b140 <_printf_i>:
 800b140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b144:	7e0f      	ldrb	r7, [r1, #24]
 800b146:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b148:	2f78      	cmp	r7, #120	@ 0x78
 800b14a:	4691      	mov	r9, r2
 800b14c:	4680      	mov	r8, r0
 800b14e:	460c      	mov	r4, r1
 800b150:	469a      	mov	sl, r3
 800b152:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b156:	d807      	bhi.n	800b168 <_printf_i+0x28>
 800b158:	2f62      	cmp	r7, #98	@ 0x62
 800b15a:	d80a      	bhi.n	800b172 <_printf_i+0x32>
 800b15c:	2f00      	cmp	r7, #0
 800b15e:	f000 80d1 	beq.w	800b304 <_printf_i+0x1c4>
 800b162:	2f58      	cmp	r7, #88	@ 0x58
 800b164:	f000 80b8 	beq.w	800b2d8 <_printf_i+0x198>
 800b168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b16c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b170:	e03a      	b.n	800b1e8 <_printf_i+0xa8>
 800b172:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b176:	2b15      	cmp	r3, #21
 800b178:	d8f6      	bhi.n	800b168 <_printf_i+0x28>
 800b17a:	a101      	add	r1, pc, #4	@ (adr r1, 800b180 <_printf_i+0x40>)
 800b17c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b180:	0800b1d9 	.word	0x0800b1d9
 800b184:	0800b1ed 	.word	0x0800b1ed
 800b188:	0800b169 	.word	0x0800b169
 800b18c:	0800b169 	.word	0x0800b169
 800b190:	0800b169 	.word	0x0800b169
 800b194:	0800b169 	.word	0x0800b169
 800b198:	0800b1ed 	.word	0x0800b1ed
 800b19c:	0800b169 	.word	0x0800b169
 800b1a0:	0800b169 	.word	0x0800b169
 800b1a4:	0800b169 	.word	0x0800b169
 800b1a8:	0800b169 	.word	0x0800b169
 800b1ac:	0800b2eb 	.word	0x0800b2eb
 800b1b0:	0800b217 	.word	0x0800b217
 800b1b4:	0800b2a5 	.word	0x0800b2a5
 800b1b8:	0800b169 	.word	0x0800b169
 800b1bc:	0800b169 	.word	0x0800b169
 800b1c0:	0800b30d 	.word	0x0800b30d
 800b1c4:	0800b169 	.word	0x0800b169
 800b1c8:	0800b217 	.word	0x0800b217
 800b1cc:	0800b169 	.word	0x0800b169
 800b1d0:	0800b169 	.word	0x0800b169
 800b1d4:	0800b2ad 	.word	0x0800b2ad
 800b1d8:	6833      	ldr	r3, [r6, #0]
 800b1da:	1d1a      	adds	r2, r3, #4
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	6032      	str	r2, [r6, #0]
 800b1e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e09c      	b.n	800b326 <_printf_i+0x1e6>
 800b1ec:	6833      	ldr	r3, [r6, #0]
 800b1ee:	6820      	ldr	r0, [r4, #0]
 800b1f0:	1d19      	adds	r1, r3, #4
 800b1f2:	6031      	str	r1, [r6, #0]
 800b1f4:	0606      	lsls	r6, r0, #24
 800b1f6:	d501      	bpl.n	800b1fc <_printf_i+0xbc>
 800b1f8:	681d      	ldr	r5, [r3, #0]
 800b1fa:	e003      	b.n	800b204 <_printf_i+0xc4>
 800b1fc:	0645      	lsls	r5, r0, #25
 800b1fe:	d5fb      	bpl.n	800b1f8 <_printf_i+0xb8>
 800b200:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b204:	2d00      	cmp	r5, #0
 800b206:	da03      	bge.n	800b210 <_printf_i+0xd0>
 800b208:	232d      	movs	r3, #45	@ 0x2d
 800b20a:	426d      	negs	r5, r5
 800b20c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b210:	4858      	ldr	r0, [pc, #352]	@ (800b374 <_printf_i+0x234>)
 800b212:	230a      	movs	r3, #10
 800b214:	e011      	b.n	800b23a <_printf_i+0xfa>
 800b216:	6821      	ldr	r1, [r4, #0]
 800b218:	6833      	ldr	r3, [r6, #0]
 800b21a:	0608      	lsls	r0, r1, #24
 800b21c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b220:	d402      	bmi.n	800b228 <_printf_i+0xe8>
 800b222:	0649      	lsls	r1, r1, #25
 800b224:	bf48      	it	mi
 800b226:	b2ad      	uxthmi	r5, r5
 800b228:	2f6f      	cmp	r7, #111	@ 0x6f
 800b22a:	4852      	ldr	r0, [pc, #328]	@ (800b374 <_printf_i+0x234>)
 800b22c:	6033      	str	r3, [r6, #0]
 800b22e:	bf14      	ite	ne
 800b230:	230a      	movne	r3, #10
 800b232:	2308      	moveq	r3, #8
 800b234:	2100      	movs	r1, #0
 800b236:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b23a:	6866      	ldr	r6, [r4, #4]
 800b23c:	60a6      	str	r6, [r4, #8]
 800b23e:	2e00      	cmp	r6, #0
 800b240:	db05      	blt.n	800b24e <_printf_i+0x10e>
 800b242:	6821      	ldr	r1, [r4, #0]
 800b244:	432e      	orrs	r6, r5
 800b246:	f021 0104 	bic.w	r1, r1, #4
 800b24a:	6021      	str	r1, [r4, #0]
 800b24c:	d04b      	beq.n	800b2e6 <_printf_i+0x1a6>
 800b24e:	4616      	mov	r6, r2
 800b250:	fbb5 f1f3 	udiv	r1, r5, r3
 800b254:	fb03 5711 	mls	r7, r3, r1, r5
 800b258:	5dc7      	ldrb	r7, [r0, r7]
 800b25a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b25e:	462f      	mov	r7, r5
 800b260:	42bb      	cmp	r3, r7
 800b262:	460d      	mov	r5, r1
 800b264:	d9f4      	bls.n	800b250 <_printf_i+0x110>
 800b266:	2b08      	cmp	r3, #8
 800b268:	d10b      	bne.n	800b282 <_printf_i+0x142>
 800b26a:	6823      	ldr	r3, [r4, #0]
 800b26c:	07df      	lsls	r7, r3, #31
 800b26e:	d508      	bpl.n	800b282 <_printf_i+0x142>
 800b270:	6923      	ldr	r3, [r4, #16]
 800b272:	6861      	ldr	r1, [r4, #4]
 800b274:	4299      	cmp	r1, r3
 800b276:	bfde      	ittt	le
 800b278:	2330      	movle	r3, #48	@ 0x30
 800b27a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b27e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b282:	1b92      	subs	r2, r2, r6
 800b284:	6122      	str	r2, [r4, #16]
 800b286:	f8cd a000 	str.w	sl, [sp]
 800b28a:	464b      	mov	r3, r9
 800b28c:	aa03      	add	r2, sp, #12
 800b28e:	4621      	mov	r1, r4
 800b290:	4640      	mov	r0, r8
 800b292:	f7ff fee7 	bl	800b064 <_printf_common>
 800b296:	3001      	adds	r0, #1
 800b298:	d14a      	bne.n	800b330 <_printf_i+0x1f0>
 800b29a:	f04f 30ff 	mov.w	r0, #4294967295
 800b29e:	b004      	add	sp, #16
 800b2a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2a4:	6823      	ldr	r3, [r4, #0]
 800b2a6:	f043 0320 	orr.w	r3, r3, #32
 800b2aa:	6023      	str	r3, [r4, #0]
 800b2ac:	4832      	ldr	r0, [pc, #200]	@ (800b378 <_printf_i+0x238>)
 800b2ae:	2778      	movs	r7, #120	@ 0x78
 800b2b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b2b4:	6823      	ldr	r3, [r4, #0]
 800b2b6:	6831      	ldr	r1, [r6, #0]
 800b2b8:	061f      	lsls	r7, r3, #24
 800b2ba:	f851 5b04 	ldr.w	r5, [r1], #4
 800b2be:	d402      	bmi.n	800b2c6 <_printf_i+0x186>
 800b2c0:	065f      	lsls	r7, r3, #25
 800b2c2:	bf48      	it	mi
 800b2c4:	b2ad      	uxthmi	r5, r5
 800b2c6:	6031      	str	r1, [r6, #0]
 800b2c8:	07d9      	lsls	r1, r3, #31
 800b2ca:	bf44      	itt	mi
 800b2cc:	f043 0320 	orrmi.w	r3, r3, #32
 800b2d0:	6023      	strmi	r3, [r4, #0]
 800b2d2:	b11d      	cbz	r5, 800b2dc <_printf_i+0x19c>
 800b2d4:	2310      	movs	r3, #16
 800b2d6:	e7ad      	b.n	800b234 <_printf_i+0xf4>
 800b2d8:	4826      	ldr	r0, [pc, #152]	@ (800b374 <_printf_i+0x234>)
 800b2da:	e7e9      	b.n	800b2b0 <_printf_i+0x170>
 800b2dc:	6823      	ldr	r3, [r4, #0]
 800b2de:	f023 0320 	bic.w	r3, r3, #32
 800b2e2:	6023      	str	r3, [r4, #0]
 800b2e4:	e7f6      	b.n	800b2d4 <_printf_i+0x194>
 800b2e6:	4616      	mov	r6, r2
 800b2e8:	e7bd      	b.n	800b266 <_printf_i+0x126>
 800b2ea:	6833      	ldr	r3, [r6, #0]
 800b2ec:	6825      	ldr	r5, [r4, #0]
 800b2ee:	6961      	ldr	r1, [r4, #20]
 800b2f0:	1d18      	adds	r0, r3, #4
 800b2f2:	6030      	str	r0, [r6, #0]
 800b2f4:	062e      	lsls	r6, r5, #24
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	d501      	bpl.n	800b2fe <_printf_i+0x1be>
 800b2fa:	6019      	str	r1, [r3, #0]
 800b2fc:	e002      	b.n	800b304 <_printf_i+0x1c4>
 800b2fe:	0668      	lsls	r0, r5, #25
 800b300:	d5fb      	bpl.n	800b2fa <_printf_i+0x1ba>
 800b302:	8019      	strh	r1, [r3, #0]
 800b304:	2300      	movs	r3, #0
 800b306:	6123      	str	r3, [r4, #16]
 800b308:	4616      	mov	r6, r2
 800b30a:	e7bc      	b.n	800b286 <_printf_i+0x146>
 800b30c:	6833      	ldr	r3, [r6, #0]
 800b30e:	1d1a      	adds	r2, r3, #4
 800b310:	6032      	str	r2, [r6, #0]
 800b312:	681e      	ldr	r6, [r3, #0]
 800b314:	6862      	ldr	r2, [r4, #4]
 800b316:	2100      	movs	r1, #0
 800b318:	4630      	mov	r0, r6
 800b31a:	f7f4 ffe1 	bl	80002e0 <memchr>
 800b31e:	b108      	cbz	r0, 800b324 <_printf_i+0x1e4>
 800b320:	1b80      	subs	r0, r0, r6
 800b322:	6060      	str	r0, [r4, #4]
 800b324:	6863      	ldr	r3, [r4, #4]
 800b326:	6123      	str	r3, [r4, #16]
 800b328:	2300      	movs	r3, #0
 800b32a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b32e:	e7aa      	b.n	800b286 <_printf_i+0x146>
 800b330:	6923      	ldr	r3, [r4, #16]
 800b332:	4632      	mov	r2, r6
 800b334:	4649      	mov	r1, r9
 800b336:	4640      	mov	r0, r8
 800b338:	47d0      	blx	sl
 800b33a:	3001      	adds	r0, #1
 800b33c:	d0ad      	beq.n	800b29a <_printf_i+0x15a>
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	079b      	lsls	r3, r3, #30
 800b342:	d413      	bmi.n	800b36c <_printf_i+0x22c>
 800b344:	68e0      	ldr	r0, [r4, #12]
 800b346:	9b03      	ldr	r3, [sp, #12]
 800b348:	4298      	cmp	r0, r3
 800b34a:	bfb8      	it	lt
 800b34c:	4618      	movlt	r0, r3
 800b34e:	e7a6      	b.n	800b29e <_printf_i+0x15e>
 800b350:	2301      	movs	r3, #1
 800b352:	4632      	mov	r2, r6
 800b354:	4649      	mov	r1, r9
 800b356:	4640      	mov	r0, r8
 800b358:	47d0      	blx	sl
 800b35a:	3001      	adds	r0, #1
 800b35c:	d09d      	beq.n	800b29a <_printf_i+0x15a>
 800b35e:	3501      	adds	r5, #1
 800b360:	68e3      	ldr	r3, [r4, #12]
 800b362:	9903      	ldr	r1, [sp, #12]
 800b364:	1a5b      	subs	r3, r3, r1
 800b366:	42ab      	cmp	r3, r5
 800b368:	dcf2      	bgt.n	800b350 <_printf_i+0x210>
 800b36a:	e7eb      	b.n	800b344 <_printf_i+0x204>
 800b36c:	2500      	movs	r5, #0
 800b36e:	f104 0619 	add.w	r6, r4, #25
 800b372:	e7f5      	b.n	800b360 <_printf_i+0x220>
 800b374:	08023499 	.word	0x08023499
 800b378:	080234aa 	.word	0x080234aa

0800b37c <memmove>:
 800b37c:	4288      	cmp	r0, r1
 800b37e:	b510      	push	{r4, lr}
 800b380:	eb01 0402 	add.w	r4, r1, r2
 800b384:	d902      	bls.n	800b38c <memmove+0x10>
 800b386:	4284      	cmp	r4, r0
 800b388:	4623      	mov	r3, r4
 800b38a:	d807      	bhi.n	800b39c <memmove+0x20>
 800b38c:	1e43      	subs	r3, r0, #1
 800b38e:	42a1      	cmp	r1, r4
 800b390:	d008      	beq.n	800b3a4 <memmove+0x28>
 800b392:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b396:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b39a:	e7f8      	b.n	800b38e <memmove+0x12>
 800b39c:	4402      	add	r2, r0
 800b39e:	4601      	mov	r1, r0
 800b3a0:	428a      	cmp	r2, r1
 800b3a2:	d100      	bne.n	800b3a6 <memmove+0x2a>
 800b3a4:	bd10      	pop	{r4, pc}
 800b3a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3ae:	e7f7      	b.n	800b3a0 <memmove+0x24>

0800b3b0 <_sbrk_r>:
 800b3b0:	b538      	push	{r3, r4, r5, lr}
 800b3b2:	4d06      	ldr	r5, [pc, #24]	@ (800b3cc <_sbrk_r+0x1c>)
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	4604      	mov	r4, r0
 800b3b8:	4608      	mov	r0, r1
 800b3ba:	602b      	str	r3, [r5, #0]
 800b3bc:	f000 f874 	bl	800b4a8 <_sbrk>
 800b3c0:	1c43      	adds	r3, r0, #1
 800b3c2:	d102      	bne.n	800b3ca <_sbrk_r+0x1a>
 800b3c4:	682b      	ldr	r3, [r5, #0]
 800b3c6:	b103      	cbz	r3, 800b3ca <_sbrk_r+0x1a>
 800b3c8:	6023      	str	r3, [r4, #0]
 800b3ca:	bd38      	pop	{r3, r4, r5, pc}
 800b3cc:	2000099c 	.word	0x2000099c

0800b3d0 <memcpy>:
 800b3d0:	440a      	add	r2, r1
 800b3d2:	4291      	cmp	r1, r2
 800b3d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3d8:	d100      	bne.n	800b3dc <memcpy+0xc>
 800b3da:	4770      	bx	lr
 800b3dc:	b510      	push	{r4, lr}
 800b3de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3e6:	4291      	cmp	r1, r2
 800b3e8:	d1f9      	bne.n	800b3de <memcpy+0xe>
 800b3ea:	bd10      	pop	{r4, pc}

0800b3ec <_realloc_r>:
 800b3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3f0:	4607      	mov	r7, r0
 800b3f2:	4614      	mov	r4, r2
 800b3f4:	460d      	mov	r5, r1
 800b3f6:	b921      	cbnz	r1, 800b402 <_realloc_r+0x16>
 800b3f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3fc:	4611      	mov	r1, r2
 800b3fe:	f7ff bc4d 	b.w	800ac9c <_malloc_r>
 800b402:	b92a      	cbnz	r2, 800b410 <_realloc_r+0x24>
 800b404:	f7ff fbde 	bl	800abc4 <_free_r>
 800b408:	4625      	mov	r5, r4
 800b40a:	4628      	mov	r0, r5
 800b40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b410:	f000 f81a 	bl	800b448 <_malloc_usable_size_r>
 800b414:	4284      	cmp	r4, r0
 800b416:	4606      	mov	r6, r0
 800b418:	d802      	bhi.n	800b420 <_realloc_r+0x34>
 800b41a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b41e:	d8f4      	bhi.n	800b40a <_realloc_r+0x1e>
 800b420:	4621      	mov	r1, r4
 800b422:	4638      	mov	r0, r7
 800b424:	f7ff fc3a 	bl	800ac9c <_malloc_r>
 800b428:	4680      	mov	r8, r0
 800b42a:	b908      	cbnz	r0, 800b430 <_realloc_r+0x44>
 800b42c:	4645      	mov	r5, r8
 800b42e:	e7ec      	b.n	800b40a <_realloc_r+0x1e>
 800b430:	42b4      	cmp	r4, r6
 800b432:	4622      	mov	r2, r4
 800b434:	4629      	mov	r1, r5
 800b436:	bf28      	it	cs
 800b438:	4632      	movcs	r2, r6
 800b43a:	f7ff ffc9 	bl	800b3d0 <memcpy>
 800b43e:	4629      	mov	r1, r5
 800b440:	4638      	mov	r0, r7
 800b442:	f7ff fbbf 	bl	800abc4 <_free_r>
 800b446:	e7f1      	b.n	800b42c <_realloc_r+0x40>

0800b448 <_malloc_usable_size_r>:
 800b448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b44c:	1f18      	subs	r0, r3, #4
 800b44e:	2b00      	cmp	r3, #0
 800b450:	bfbc      	itt	lt
 800b452:	580b      	ldrlt	r3, [r1, r0]
 800b454:	18c0      	addlt	r0, r0, r3
 800b456:	4770      	bx	lr

0800b458 <sqrtf>:
 800b458:	b508      	push	{r3, lr}
 800b45a:	ed2d 8b02 	vpush	{d8}
 800b45e:	eeb0 8a40 	vmov.f32	s16, s0
 800b462:	f000 f817 	bl	800b494 <__ieee754_sqrtf>
 800b466:	eeb4 8a48 	vcmp.f32	s16, s16
 800b46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b46e:	d60c      	bvs.n	800b48a <sqrtf+0x32>
 800b470:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b490 <sqrtf+0x38>
 800b474:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b47c:	d505      	bpl.n	800b48a <sqrtf+0x32>
 800b47e:	f000 f80d 	bl	800b49c <__errno>
 800b482:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b486:	2321      	movs	r3, #33	@ 0x21
 800b488:	6003      	str	r3, [r0, #0]
 800b48a:	ecbd 8b02 	vpop	{d8}
 800b48e:	bd08      	pop	{r3, pc}
 800b490:	00000000 	.word	0x00000000

0800b494 <__ieee754_sqrtf>:
 800b494:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b498:	4770      	bx	lr
	...

0800b49c <__errno>:
 800b49c:	4b01      	ldr	r3, [pc, #4]	@ (800b4a4 <__errno+0x8>)
 800b49e:	6818      	ldr	r0, [r3, #0]
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop
 800b4a4:	200000b0 	.word	0x200000b0

0800b4a8 <_sbrk>:
 800b4a8:	4a04      	ldr	r2, [pc, #16]	@ (800b4bc <_sbrk+0x14>)
 800b4aa:	6811      	ldr	r1, [r2, #0]
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	b909      	cbnz	r1, 800b4b4 <_sbrk+0xc>
 800b4b0:	4903      	ldr	r1, [pc, #12]	@ (800b4c0 <_sbrk+0x18>)
 800b4b2:	6011      	str	r1, [r2, #0]
 800b4b4:	6810      	ldr	r0, [r2, #0]
 800b4b6:	4403      	add	r3, r0
 800b4b8:	6013      	str	r3, [r2, #0]
 800b4ba:	4770      	bx	lr
 800b4bc:	200009ac 	.word	0x200009ac
 800b4c0:	200009b0 	.word	0x200009b0

0800b4c4 <_init>:
 800b4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c6:	bf00      	nop
 800b4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ca:	bc08      	pop	{r3}
 800b4cc:	469e      	mov	lr, r3
 800b4ce:	4770      	bx	lr

0800b4d0 <_fini>:
 800b4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d2:	bf00      	nop
 800b4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4d6:	bc08      	pop	{r3}
 800b4d8:	469e      	mov	lr, r3
 800b4da:	4770      	bx	lr
